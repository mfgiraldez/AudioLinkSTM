
AudioLinkSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca04  900001d0  900001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f18  9000cbd4  9000cbd4  0001cbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  90011aec  90011aec  00021aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  90011af4  90011af4  00021af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90011af8  90011af8  00021af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000160  20000000  90011afc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010ab8  20000160  90011c5c  00030160  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  20010c18  90011c5c  00030c18  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003a246  00000000  00000000  000301d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000081ee  00000000  00000000  0006a419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00015c5a  00000000  00000000  00072607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00088268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ddb  00000000  00000000  00089d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f9d5  00000000  00000000  0008bb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003555b  00000000  00000000  000bb540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001072b2  00000000  00000000  000f0a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00005b50  00000000  00000000  001f7d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006e  00000000  00000000  001fd8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001d0 <__do_global_dtors_aux>:
900001d0:	b510      	push	{r4, lr}
900001d2:	4c05      	ldr	r4, [pc, #20]	; (900001e8 <__do_global_dtors_aux+0x18>)
900001d4:	7823      	ldrb	r3, [r4, #0]
900001d6:	b933      	cbnz	r3, 900001e6 <__do_global_dtors_aux+0x16>
900001d8:	4b04      	ldr	r3, [pc, #16]	; (900001ec <__do_global_dtors_aux+0x1c>)
900001da:	b113      	cbz	r3, 900001e2 <__do_global_dtors_aux+0x12>
900001dc:	4804      	ldr	r0, [pc, #16]	; (900001f0 <__do_global_dtors_aux+0x20>)
900001de:	f3af 8000 	nop.w
900001e2:	2301      	movs	r3, #1
900001e4:	7023      	strb	r3, [r4, #0]
900001e6:	bd10      	pop	{r4, pc}
900001e8:	20000160 	.word	0x20000160
900001ec:	00000000 	.word	0x00000000
900001f0:	9000cbbc 	.word	0x9000cbbc

900001f4 <frame_dummy>:
900001f4:	b508      	push	{r3, lr}
900001f6:	4b03      	ldr	r3, [pc, #12]	; (90000204 <frame_dummy+0x10>)
900001f8:	b11b      	cbz	r3, 90000202 <frame_dummy+0xe>
900001fa:	4903      	ldr	r1, [pc, #12]	; (90000208 <frame_dummy+0x14>)
900001fc:	4803      	ldr	r0, [pc, #12]	; (9000020c <frame_dummy+0x18>)
900001fe:	f3af 8000 	nop.w
90000202:	bd08      	pop	{r3, pc}
90000204:	00000000 	.word	0x00000000
90000208:	20000164 	.word	0x20000164
9000020c:	9000cbbc 	.word	0x9000cbbc

90000210 <memchr>:
90000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000214:	2a10      	cmp	r2, #16
90000216:	db2b      	blt.n	90000270 <memchr+0x60>
90000218:	f010 0f07 	tst.w	r0, #7
9000021c:	d008      	beq.n	90000230 <memchr+0x20>
9000021e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000222:	3a01      	subs	r2, #1
90000224:	428b      	cmp	r3, r1
90000226:	d02d      	beq.n	90000284 <memchr+0x74>
90000228:	f010 0f07 	tst.w	r0, #7
9000022c:	b342      	cbz	r2, 90000280 <memchr+0x70>
9000022e:	d1f6      	bne.n	9000021e <memchr+0xe>
90000230:	b4f0      	push	{r4, r5, r6, r7}
90000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000023a:	f022 0407 	bic.w	r4, r2, #7
9000023e:	f07f 0700 	mvns.w	r7, #0
90000242:	2300      	movs	r3, #0
90000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000248:	3c08      	subs	r4, #8
9000024a:	ea85 0501 	eor.w	r5, r5, r1
9000024e:	ea86 0601 	eor.w	r6, r6, r1
90000252:	fa85 f547 	uadd8	r5, r5, r7
90000256:	faa3 f587 	sel	r5, r3, r7
9000025a:	fa86 f647 	uadd8	r6, r6, r7
9000025e:	faa5 f687 	sel	r6, r5, r7
90000262:	b98e      	cbnz	r6, 90000288 <memchr+0x78>
90000264:	d1ee      	bne.n	90000244 <memchr+0x34>
90000266:	bcf0      	pop	{r4, r5, r6, r7}
90000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000026c:	f002 0207 	and.w	r2, r2, #7
90000270:	b132      	cbz	r2, 90000280 <memchr+0x70>
90000272:	f810 3b01 	ldrb.w	r3, [r0], #1
90000276:	3a01      	subs	r2, #1
90000278:	ea83 0301 	eor.w	r3, r3, r1
9000027c:	b113      	cbz	r3, 90000284 <memchr+0x74>
9000027e:	d1f8      	bne.n	90000272 <memchr+0x62>
90000280:	2000      	movs	r0, #0
90000282:	4770      	bx	lr
90000284:	3801      	subs	r0, #1
90000286:	4770      	bx	lr
90000288:	2d00      	cmp	r5, #0
9000028a:	bf06      	itte	eq
9000028c:	4635      	moveq	r5, r6
9000028e:	3803      	subeq	r0, #3
90000290:	3807      	subne	r0, #7
90000292:	f015 0f01 	tst.w	r5, #1
90000296:	d107      	bne.n	900002a8 <memchr+0x98>
90000298:	3001      	adds	r0, #1
9000029a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000029e:	bf02      	ittt	eq
900002a0:	3001      	addeq	r0, #1
900002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900002a6:	3001      	addeq	r0, #1
900002a8:	bcf0      	pop	{r4, r5, r6, r7}
900002aa:	3801      	subs	r0, #1
900002ac:	4770      	bx	lr
900002ae:	bf00      	nop

900002b0 <__aeabi_uldivmod>:
900002b0:	b953      	cbnz	r3, 900002c8 <__aeabi_uldivmod+0x18>
900002b2:	b94a      	cbnz	r2, 900002c8 <__aeabi_uldivmod+0x18>
900002b4:	2900      	cmp	r1, #0
900002b6:	bf08      	it	eq
900002b8:	2800      	cmpeq	r0, #0
900002ba:	bf1c      	itt	ne
900002bc:	f04f 31ff 	movne.w	r1, #4294967295
900002c0:	f04f 30ff 	movne.w	r0, #4294967295
900002c4:	f000 b970 	b.w	900005a8 <__aeabi_idiv0>
900002c8:	f1ad 0c08 	sub.w	ip, sp, #8
900002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900002d0:	f000 f806 	bl	900002e0 <__udivmoddi4>
900002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
900002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900002dc:	b004      	add	sp, #16
900002de:	4770      	bx	lr

900002e0 <__udivmoddi4>:
900002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900002e4:	9e08      	ldr	r6, [sp, #32]
900002e6:	460d      	mov	r5, r1
900002e8:	4604      	mov	r4, r0
900002ea:	460f      	mov	r7, r1
900002ec:	2b00      	cmp	r3, #0
900002ee:	d14a      	bne.n	90000386 <__udivmoddi4+0xa6>
900002f0:	428a      	cmp	r2, r1
900002f2:	4694      	mov	ip, r2
900002f4:	d965      	bls.n	900003c2 <__udivmoddi4+0xe2>
900002f6:	fab2 f382 	clz	r3, r2
900002fa:	b143      	cbz	r3, 9000030e <__udivmoddi4+0x2e>
900002fc:	fa02 fc03 	lsl.w	ip, r2, r3
90000300:	f1c3 0220 	rsb	r2, r3, #32
90000304:	409f      	lsls	r7, r3
90000306:	fa20 f202 	lsr.w	r2, r0, r2
9000030a:	4317      	orrs	r7, r2
9000030c:	409c      	lsls	r4, r3
9000030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
90000312:	fa1f f58c 	uxth.w	r5, ip
90000316:	fbb7 f1fe 	udiv	r1, r7, lr
9000031a:	0c22      	lsrs	r2, r4, #16
9000031c:	fb0e 7711 	mls	r7, lr, r1, r7
90000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
90000324:	fb01 f005 	mul.w	r0, r1, r5
90000328:	4290      	cmp	r0, r2
9000032a:	d90a      	bls.n	90000342 <__udivmoddi4+0x62>
9000032c:	eb1c 0202 	adds.w	r2, ip, r2
90000330:	f101 37ff 	add.w	r7, r1, #4294967295
90000334:	f080 811c 	bcs.w	90000570 <__udivmoddi4+0x290>
90000338:	4290      	cmp	r0, r2
9000033a:	f240 8119 	bls.w	90000570 <__udivmoddi4+0x290>
9000033e:	3902      	subs	r1, #2
90000340:	4462      	add	r2, ip
90000342:	1a12      	subs	r2, r2, r0
90000344:	b2a4      	uxth	r4, r4
90000346:	fbb2 f0fe 	udiv	r0, r2, lr
9000034a:	fb0e 2210 	mls	r2, lr, r0, r2
9000034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
90000352:	fb00 f505 	mul.w	r5, r0, r5
90000356:	42a5      	cmp	r5, r4
90000358:	d90a      	bls.n	90000370 <__udivmoddi4+0x90>
9000035a:	eb1c 0404 	adds.w	r4, ip, r4
9000035e:	f100 32ff 	add.w	r2, r0, #4294967295
90000362:	f080 8107 	bcs.w	90000574 <__udivmoddi4+0x294>
90000366:	42a5      	cmp	r5, r4
90000368:	f240 8104 	bls.w	90000574 <__udivmoddi4+0x294>
9000036c:	4464      	add	r4, ip
9000036e:	3802      	subs	r0, #2
90000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000374:	1b64      	subs	r4, r4, r5
90000376:	2100      	movs	r1, #0
90000378:	b11e      	cbz	r6, 90000382 <__udivmoddi4+0xa2>
9000037a:	40dc      	lsrs	r4, r3
9000037c:	2300      	movs	r3, #0
9000037e:	e9c6 4300 	strd	r4, r3, [r6]
90000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000386:	428b      	cmp	r3, r1
90000388:	d908      	bls.n	9000039c <__udivmoddi4+0xbc>
9000038a:	2e00      	cmp	r6, #0
9000038c:	f000 80ed 	beq.w	9000056a <__udivmoddi4+0x28a>
90000390:	2100      	movs	r1, #0
90000392:	e9c6 0500 	strd	r0, r5, [r6]
90000396:	4608      	mov	r0, r1
90000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000039c:	fab3 f183 	clz	r1, r3
900003a0:	2900      	cmp	r1, #0
900003a2:	d149      	bne.n	90000438 <__udivmoddi4+0x158>
900003a4:	42ab      	cmp	r3, r5
900003a6:	d302      	bcc.n	900003ae <__udivmoddi4+0xce>
900003a8:	4282      	cmp	r2, r0
900003aa:	f200 80f8 	bhi.w	9000059e <__udivmoddi4+0x2be>
900003ae:	1a84      	subs	r4, r0, r2
900003b0:	eb65 0203 	sbc.w	r2, r5, r3
900003b4:	2001      	movs	r0, #1
900003b6:	4617      	mov	r7, r2
900003b8:	2e00      	cmp	r6, #0
900003ba:	d0e2      	beq.n	90000382 <__udivmoddi4+0xa2>
900003bc:	e9c6 4700 	strd	r4, r7, [r6]
900003c0:	e7df      	b.n	90000382 <__udivmoddi4+0xa2>
900003c2:	b902      	cbnz	r2, 900003c6 <__udivmoddi4+0xe6>
900003c4:	deff      	udf	#255	; 0xff
900003c6:	fab2 f382 	clz	r3, r2
900003ca:	2b00      	cmp	r3, #0
900003cc:	f040 8090 	bne.w	900004f0 <__udivmoddi4+0x210>
900003d0:	1a8a      	subs	r2, r1, r2
900003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
900003d6:	fa1f fe8c 	uxth.w	lr, ip
900003da:	2101      	movs	r1, #1
900003dc:	fbb2 f5f7 	udiv	r5, r2, r7
900003e0:	fb07 2015 	mls	r0, r7, r5, r2
900003e4:	0c22      	lsrs	r2, r4, #16
900003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900003ea:	fb0e f005 	mul.w	r0, lr, r5
900003ee:	4290      	cmp	r0, r2
900003f0:	d908      	bls.n	90000404 <__udivmoddi4+0x124>
900003f2:	eb1c 0202 	adds.w	r2, ip, r2
900003f6:	f105 38ff 	add.w	r8, r5, #4294967295
900003fa:	d202      	bcs.n	90000402 <__udivmoddi4+0x122>
900003fc:	4290      	cmp	r0, r2
900003fe:	f200 80cb 	bhi.w	90000598 <__udivmoddi4+0x2b8>
90000402:	4645      	mov	r5, r8
90000404:	1a12      	subs	r2, r2, r0
90000406:	b2a4      	uxth	r4, r4
90000408:	fbb2 f0f7 	udiv	r0, r2, r7
9000040c:	fb07 2210 	mls	r2, r7, r0, r2
90000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
90000414:	fb0e fe00 	mul.w	lr, lr, r0
90000418:	45a6      	cmp	lr, r4
9000041a:	d908      	bls.n	9000042e <__udivmoddi4+0x14e>
9000041c:	eb1c 0404 	adds.w	r4, ip, r4
90000420:	f100 32ff 	add.w	r2, r0, #4294967295
90000424:	d202      	bcs.n	9000042c <__udivmoddi4+0x14c>
90000426:	45a6      	cmp	lr, r4
90000428:	f200 80bb 	bhi.w	900005a2 <__udivmoddi4+0x2c2>
9000042c:	4610      	mov	r0, r2
9000042e:	eba4 040e 	sub.w	r4, r4, lr
90000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
90000436:	e79f      	b.n	90000378 <__udivmoddi4+0x98>
90000438:	f1c1 0720 	rsb	r7, r1, #32
9000043c:	408b      	lsls	r3, r1
9000043e:	fa22 fc07 	lsr.w	ip, r2, r7
90000442:	ea4c 0c03 	orr.w	ip, ip, r3
90000446:	fa05 f401 	lsl.w	r4, r5, r1
9000044a:	fa20 f307 	lsr.w	r3, r0, r7
9000044e:	40fd      	lsrs	r5, r7
90000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
90000454:	4323      	orrs	r3, r4
90000456:	fbb5 f8f9 	udiv	r8, r5, r9
9000045a:	fa1f fe8c 	uxth.w	lr, ip
9000045e:	fb09 5518 	mls	r5, r9, r8, r5
90000462:	0c1c      	lsrs	r4, r3, #16
90000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
90000468:	fb08 f50e 	mul.w	r5, r8, lr
9000046c:	42a5      	cmp	r5, r4
9000046e:	fa02 f201 	lsl.w	r2, r2, r1
90000472:	fa00 f001 	lsl.w	r0, r0, r1
90000476:	d90b      	bls.n	90000490 <__udivmoddi4+0x1b0>
90000478:	eb1c 0404 	adds.w	r4, ip, r4
9000047c:	f108 3aff 	add.w	sl, r8, #4294967295
90000480:	f080 8088 	bcs.w	90000594 <__udivmoddi4+0x2b4>
90000484:	42a5      	cmp	r5, r4
90000486:	f240 8085 	bls.w	90000594 <__udivmoddi4+0x2b4>
9000048a:	f1a8 0802 	sub.w	r8, r8, #2
9000048e:	4464      	add	r4, ip
90000490:	1b64      	subs	r4, r4, r5
90000492:	b29d      	uxth	r5, r3
90000494:	fbb4 f3f9 	udiv	r3, r4, r9
90000498:	fb09 4413 	mls	r4, r9, r3, r4
9000049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
900004a0:	fb03 fe0e 	mul.w	lr, r3, lr
900004a4:	45a6      	cmp	lr, r4
900004a6:	d908      	bls.n	900004ba <__udivmoddi4+0x1da>
900004a8:	eb1c 0404 	adds.w	r4, ip, r4
900004ac:	f103 35ff 	add.w	r5, r3, #4294967295
900004b0:	d26c      	bcs.n	9000058c <__udivmoddi4+0x2ac>
900004b2:	45a6      	cmp	lr, r4
900004b4:	d96a      	bls.n	9000058c <__udivmoddi4+0x2ac>
900004b6:	3b02      	subs	r3, #2
900004b8:	4464      	add	r4, ip
900004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900004be:	fba3 9502 	umull	r9, r5, r3, r2
900004c2:	eba4 040e 	sub.w	r4, r4, lr
900004c6:	42ac      	cmp	r4, r5
900004c8:	46c8      	mov	r8, r9
900004ca:	46ae      	mov	lr, r5
900004cc:	d356      	bcc.n	9000057c <__udivmoddi4+0x29c>
900004ce:	d053      	beq.n	90000578 <__udivmoddi4+0x298>
900004d0:	b156      	cbz	r6, 900004e8 <__udivmoddi4+0x208>
900004d2:	ebb0 0208 	subs.w	r2, r0, r8
900004d6:	eb64 040e 	sbc.w	r4, r4, lr
900004da:	fa04 f707 	lsl.w	r7, r4, r7
900004de:	40ca      	lsrs	r2, r1
900004e0:	40cc      	lsrs	r4, r1
900004e2:	4317      	orrs	r7, r2
900004e4:	e9c6 7400 	strd	r7, r4, [r6]
900004e8:	4618      	mov	r0, r3
900004ea:	2100      	movs	r1, #0
900004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900004f0:	f1c3 0120 	rsb	r1, r3, #32
900004f4:	fa02 fc03 	lsl.w	ip, r2, r3
900004f8:	fa20 f201 	lsr.w	r2, r0, r1
900004fc:	fa25 f101 	lsr.w	r1, r5, r1
90000500:	409d      	lsls	r5, r3
90000502:	432a      	orrs	r2, r5
90000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000508:	fa1f fe8c 	uxth.w	lr, ip
9000050c:	fbb1 f0f7 	udiv	r0, r1, r7
90000510:	fb07 1510 	mls	r5, r7, r0, r1
90000514:	0c11      	lsrs	r1, r2, #16
90000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
9000051a:	fb00 f50e 	mul.w	r5, r0, lr
9000051e:	428d      	cmp	r5, r1
90000520:	fa04 f403 	lsl.w	r4, r4, r3
90000524:	d908      	bls.n	90000538 <__udivmoddi4+0x258>
90000526:	eb1c 0101 	adds.w	r1, ip, r1
9000052a:	f100 38ff 	add.w	r8, r0, #4294967295
9000052e:	d22f      	bcs.n	90000590 <__udivmoddi4+0x2b0>
90000530:	428d      	cmp	r5, r1
90000532:	d92d      	bls.n	90000590 <__udivmoddi4+0x2b0>
90000534:	3802      	subs	r0, #2
90000536:	4461      	add	r1, ip
90000538:	1b49      	subs	r1, r1, r5
9000053a:	b292      	uxth	r2, r2
9000053c:	fbb1 f5f7 	udiv	r5, r1, r7
90000540:	fb07 1115 	mls	r1, r7, r5, r1
90000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90000548:	fb05 f10e 	mul.w	r1, r5, lr
9000054c:	4291      	cmp	r1, r2
9000054e:	d908      	bls.n	90000562 <__udivmoddi4+0x282>
90000550:	eb1c 0202 	adds.w	r2, ip, r2
90000554:	f105 38ff 	add.w	r8, r5, #4294967295
90000558:	d216      	bcs.n	90000588 <__udivmoddi4+0x2a8>
9000055a:	4291      	cmp	r1, r2
9000055c:	d914      	bls.n	90000588 <__udivmoddi4+0x2a8>
9000055e:	3d02      	subs	r5, #2
90000560:	4462      	add	r2, ip
90000562:	1a52      	subs	r2, r2, r1
90000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
90000568:	e738      	b.n	900003dc <__udivmoddi4+0xfc>
9000056a:	4631      	mov	r1, r6
9000056c:	4630      	mov	r0, r6
9000056e:	e708      	b.n	90000382 <__udivmoddi4+0xa2>
90000570:	4639      	mov	r1, r7
90000572:	e6e6      	b.n	90000342 <__udivmoddi4+0x62>
90000574:	4610      	mov	r0, r2
90000576:	e6fb      	b.n	90000370 <__udivmoddi4+0x90>
90000578:	4548      	cmp	r0, r9
9000057a:	d2a9      	bcs.n	900004d0 <__udivmoddi4+0x1f0>
9000057c:	ebb9 0802 	subs.w	r8, r9, r2
90000580:	eb65 0e0c 	sbc.w	lr, r5, ip
90000584:	3b01      	subs	r3, #1
90000586:	e7a3      	b.n	900004d0 <__udivmoddi4+0x1f0>
90000588:	4645      	mov	r5, r8
9000058a:	e7ea      	b.n	90000562 <__udivmoddi4+0x282>
9000058c:	462b      	mov	r3, r5
9000058e:	e794      	b.n	900004ba <__udivmoddi4+0x1da>
90000590:	4640      	mov	r0, r8
90000592:	e7d1      	b.n	90000538 <__udivmoddi4+0x258>
90000594:	46d0      	mov	r8, sl
90000596:	e77b      	b.n	90000490 <__udivmoddi4+0x1b0>
90000598:	3d02      	subs	r5, #2
9000059a:	4462      	add	r2, ip
9000059c:	e732      	b.n	90000404 <__udivmoddi4+0x124>
9000059e:	4608      	mov	r0, r1
900005a0:	e70a      	b.n	900003b8 <__udivmoddi4+0xd8>
900005a2:	4464      	add	r4, ip
900005a4:	3802      	subs	r0, #2
900005a6:	e742      	b.n	9000042e <__udivmoddi4+0x14e>

900005a8 <__aeabi_idiv0>:
900005a8:	4770      	bx	lr
900005aa:	bf00      	nop

900005ac <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
900005ac:	4770      	bx	lr

900005ae <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
900005ae:	2000      	movs	r0, #0
900005b0:	4770      	bx	lr
	...

900005b4 <ft5336_Init>:
{
900005b4:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
900005b6:	4c05      	ldr	r4, [pc, #20]	; (900005cc <ft5336_Init+0x18>)
  TS_IO_Delay(200);
900005b8:	20c8      	movs	r0, #200	; 0xc8
900005ba:	f001 fffd 	bl	900025b8 <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
900005be:	7823      	ldrb	r3, [r4, #0]
900005c0:	b91b      	cbnz	r3, 900005ca <ft5336_Init+0x16>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
900005c2:	f001 ffcf 	bl	90002564 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
900005c6:	2301      	movs	r3, #1
900005c8:	7023      	strb	r3, [r4, #0]
}
900005ca:	bd10      	pop	{r4, pc}
900005cc:	2000017c 	.word	0x2000017c

900005d0 <ft5336_TS_DetectTouch>:
{
900005d0:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
900005d2:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
900005d4:	2102      	movs	r1, #2
900005d6:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
900005d8:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
900005dc:	f001 ffd6 	bl	9000258c <TS_IO_Read>
900005e0:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
900005e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
900005e8:	f003 030f 	and.w	r3, r3, #15
900005ec:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
900005f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
900005f4:	2b05      	cmp	r3, #5
900005f6:	d901      	bls.n	900005fc <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
900005f8:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
900005fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
90000600:	4b03      	ldr	r3, [pc, #12]	; (90000610 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
90000602:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
90000606:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
90000608:	2200      	movs	r2, #0
9000060a:	709a      	strb	r2, [r3, #2]
}
9000060c:	b002      	add	sp, #8
9000060e:	bd10      	pop	{r4, pc}
90000610:	2000017c 	.word	0x2000017c

90000614 <ft5336_TS_GetXY>:
{
90000614:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90000618:	4c2b      	ldr	r4, [pc, #172]	; (900006c8 <ft5336_TS_GetXY+0xb4>)
{
9000061a:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
9000061c:	f04f 0800 	mov.w	r8, #0
{
90000620:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90000622:	78a3      	ldrb	r3, [r4, #2]
90000624:	7862      	ldrb	r2, [r4, #1]
  volatile uint8_t ucReadData = 0;
90000626:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
9000062a:	429a      	cmp	r2, r3
9000062c:	d945      	bls.n	900006ba <ft5336_TS_GetXY+0xa6>
    switch(ft5336_handle.currActiveTouchIdx)
9000062e:	2b09      	cmp	r3, #9
90000630:	d846      	bhi.n	900006c0 <ft5336_TS_GetXY+0xac>
90000632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
90000636:	005b      	lsls	r3, r3, #1
90000638:	b2db      	uxtb	r3, r3
9000063a:	1d19      	adds	r1, r3, #4
9000063c:	f103 0a03 	add.w	sl, r3, #3
90000640:	f103 0906 	add.w	r9, r3, #6
90000644:	3305      	adds	r3, #5
90000646:	b2c9      	uxtb	r1, r1
90000648:	fa5f fa8a 	uxtb.w	sl, sl
9000064c:	fa5f f989 	uxtb.w	r9, r9
90000650:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
90000654:	b2c6      	uxtb	r6, r0
90000656:	4630      	mov	r0, r6
90000658:	f001 ff98 	bl	9000258c <TS_IO_Read>
9000065c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000660:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
90000664:	4651      	mov	r1, sl
90000666:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000668:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
9000066a:	f001 ff8f 	bl	9000258c <TS_IO_Read>
9000066e:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000672:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000674:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000678:	4630      	mov	r0, r6
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
9000067a:	88a2      	ldrh	r2, [r4, #4]
9000067c:	021b      	lsls	r3, r3, #8
9000067e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90000682:	4313      	orrs	r3, r2
    *X = coord;
90000684:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000686:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000688:	f001 ff80 	bl	9000258c <TS_IO_Read>
9000068c:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
90000690:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000692:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
90000696:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000698:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
9000069a:	f001 ff77 	bl	9000258c <TS_IO_Read>
9000069e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
900006a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
900006a6:	88a2      	ldrh	r2, [r4, #4]
900006a8:	021b      	lsls	r3, r3, #8
900006aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
900006ae:	4313      	orrs	r3, r2
900006b0:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
900006b2:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
900006b4:	78a3      	ldrb	r3, [r4, #2]
900006b6:	3301      	adds	r3, #1
900006b8:	70a3      	strb	r3, [r4, #2]
}
900006ba:	b002      	add	sp, #8
900006bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
900006c0:	46c1      	mov	r9, r8
900006c2:	46c2      	mov	sl, r8
900006c4:	4641      	mov	r1, r8
900006c6:	e7c5      	b.n	90000654 <ft5336_TS_GetXY+0x40>
900006c8:	2000017c 	.word	0x2000017c

900006cc <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
900006cc:	2201      	movs	r2, #1
900006ce:	21a4      	movs	r1, #164	; 0xa4
900006d0:	b2c0      	uxtb	r0, r0
900006d2:	f001 bf49 	b.w	90002568 <TS_IO_Write>

900006d6 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
900006d6:	2200      	movs	r2, #0
900006d8:	21a4      	movs	r1, #164	; 0xa4
900006da:	b2c0      	uxtb	r0, r0
900006dc:	f001 bf44 	b.w	90002568 <TS_IO_Write>

900006e0 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
900006e0:	f7ff bff9 	b.w	900006d6 <ft5336_TS_DisableIT>

900006e4 <ft5336_TS_ClearIT>:
900006e4:	4770      	bx	lr
	...

900006e8 <ft5336_ReadID>:
{
900006e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
900006ea:	2300      	movs	r3, #0
  return(ft5336_handle.i2cInitialized);
900006ec:	4c0f      	ldr	r4, [pc, #60]	; (9000072c <ft5336_ReadID+0x44>)
{
900006ee:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
900006f0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
900006f4:	7823      	ldrb	r3, [r4, #0]
900006f6:	b91b      	cbnz	r3, 90000700 <ft5336_ReadID+0x18>
    TS_IO_Init();
900006f8:	f001 ff34 	bl	90002564 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
900006fc:	2301      	movs	r3, #1
900006fe:	7023      	strb	r3, [r4, #0]
{
90000700:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000702:	b2ed      	uxtb	r5, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
90000704:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000706:	21a8      	movs	r1, #168	; 0xa8
90000708:	4628      	mov	r0, r5
9000070a:	f001 ff3f 	bl	9000258c <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
9000070e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000712:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
90000716:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000071a:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
9000071c:	d103      	bne.n	90000726 <ft5336_ReadID+0x3e>
  return (ucReadId);
9000071e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
90000722:	b003      	add	sp, #12
90000724:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
90000726:	2b51      	cmp	r3, #81	; 0x51
90000728:	d1ec      	bne.n	90000704 <ft5336_ReadID+0x1c>
9000072a:	e7f8      	b.n	9000071e <ft5336_ReadID+0x36>
9000072c:	2000017c 	.word	0x2000017c

90000730 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
90000730:	2300      	movs	r3, #0
{
90000732:	b513      	push	{r0, r1, r4, lr}
90000734:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
90000736:	b2c0      	uxtb	r0, r0
90000738:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
9000073a:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
9000073e:	f001 ff25 	bl	9000258c <TS_IO_Read>
90000742:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
90000746:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000074a:	6023      	str	r3, [r4, #0]
}
9000074c:	b002      	add	sp, #8
9000074e:	bd10      	pop	{r4, pc}

90000750 <ft5336_TS_GetTouchInfo>:
{
90000750:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90000754:	461d      	mov	r5, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
90000756:	4b1d      	ldr	r3, [pc, #116]	; (900007cc <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
90000758:	2400      	movs	r4, #0
{
9000075a:	4616      	mov	r6, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
9000075c:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
9000075e:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
90000762:	428b      	cmp	r3, r1
90000764:	d92c      	bls.n	900007c0 <ft5336_TS_GetTouchInfo+0x70>
    switch(touchIdx)
90000766:	2909      	cmp	r1, #9
90000768:	d82d      	bhi.n	900007c6 <ft5336_TS_GetTouchInfo+0x76>
9000076a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000076e:	004c      	lsls	r4, r1, #1
90000770:	b2e4      	uxtb	r4, r4
90000772:	1ce1      	adds	r1, r4, #3
90000774:	1de7      	adds	r7, r4, #7
90000776:	3408      	adds	r4, #8
90000778:	b2c9      	uxtb	r1, r1
9000077a:	b2ff      	uxtb	r7, r7
9000077c:	b2e4      	uxtb	r4, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
9000077e:	fa5f f880 	uxtb.w	r8, r0
90000782:	4640      	mov	r0, r8
90000784:	f001 ff02 	bl	9000258c <TS_IO_Read>
90000788:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
9000078c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
90000790:	4639      	mov	r1, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
90000792:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
90000794:	4640      	mov	r0, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
90000796:	099b      	lsrs	r3, r3, #6
90000798:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
9000079a:	f001 fef7 	bl	9000258c <TS_IO_Read>
9000079e:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
900007a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
900007a6:	4621      	mov	r1, r4
900007a8:	4640      	mov	r0, r8
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
900007aa:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
900007ac:	f001 feee 	bl	9000258c <TS_IO_Read>
900007b0:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
900007b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
900007b8:	0912      	lsrs	r2, r2, #4
900007ba:	f002 0204 	and.w	r2, r2, #4
900007be:	602a      	str	r2, [r5, #0]
}
900007c0:	b002      	add	sp, #8
900007c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
900007c6:	4627      	mov	r7, r4
900007c8:	4621      	mov	r1, r4
900007ca:	e7d8      	b.n	9000077e <ft5336_TS_GetTouchInfo+0x2e>
900007cc:	2000017c 	.word	0x2000017c

900007d0 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
900007d0:	2901      	cmp	r1, #1
{
900007d2:	b507      	push	{r0, r1, r2, lr}
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
900007d4:	b2c0      	uxtb	r0, r0
  switch (Output) 
900007d6:	d00f      	beq.n	900007f8 <wm8994_SetOutputMode+0x28>
900007d8:	2903      	cmp	r1, #3
900007da:	d12f      	bne.n	9000083c <wm8994_SetOutputMode+0x6c>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
900007dc:	f640 720f 	movw	r2, #3855	; 0xf0f
900007e0:	2105      	movs	r1, #5
900007e2:	9001      	str	r0, [sp, #4]
900007e4:	f001 fe90 	bl	90002508 <AUDIO_IO_Write>
900007e8:	2201      	movs	r2, #1
900007ea:	f240 6101 	movw	r1, #1537	; 0x601
900007ee:	9801      	ldr	r0, [sp, #4]
900007f0:	f001 fe8a 	bl	90002508 <AUDIO_IO_Write>
900007f4:	2201      	movs	r2, #1
900007f6:	e00c      	b.n	90000812 <wm8994_SetOutputMode+0x42>
900007f8:	f640 420c 	movw	r2, #3084	; 0xc0c
900007fc:	2105      	movs	r1, #5
900007fe:	9001      	str	r0, [sp, #4]
90000800:	f001 fe82 	bl	90002508 <AUDIO_IO_Write>
90000804:	2200      	movs	r2, #0
90000806:	f240 6101 	movw	r1, #1537	; 0x601
9000080a:	9801      	ldr	r0, [sp, #4]
9000080c:	f001 fe7c 	bl	90002508 <AUDIO_IO_Write>
90000810:	2200      	movs	r2, #0
90000812:	f240 6102 	movw	r1, #1538	; 0x602
90000816:	9801      	ldr	r0, [sp, #4]
90000818:	f001 fe76 	bl	90002508 <AUDIO_IO_Write>
9000081c:	2202      	movs	r2, #2
9000081e:	f240 6104 	movw	r1, #1540	; 0x604
90000822:	9801      	ldr	r0, [sp, #4]
90000824:	f001 fe70 	bl	90002508 <AUDIO_IO_Write>
90000828:	2202      	movs	r2, #2
9000082a:	9801      	ldr	r0, [sp, #4]
9000082c:	f240 6105 	movw	r1, #1541	; 0x605
90000830:	f001 fe6a 	bl	90002508 <AUDIO_IO_Write>
}
90000834:	2000      	movs	r0, #0
90000836:	b003      	add	sp, #12
90000838:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
9000083c:	f240 3203 	movw	r2, #771	; 0x303
90000840:	2105      	movs	r1, #5
90000842:	9001      	str	r0, [sp, #4]
90000844:	f001 fe60 	bl	90002508 <AUDIO_IO_Write>
90000848:	2201      	movs	r2, #1
9000084a:	f240 6101 	movw	r1, #1537	; 0x601
9000084e:	9801      	ldr	r0, [sp, #4]
90000850:	f001 fe5a 	bl	90002508 <AUDIO_IO_Write>
90000854:	2201      	movs	r2, #1
90000856:	f240 6102 	movw	r1, #1538	; 0x602
9000085a:	9801      	ldr	r0, [sp, #4]
9000085c:	f001 fe54 	bl	90002508 <AUDIO_IO_Write>
90000860:	2200      	movs	r2, #0
90000862:	f240 6104 	movw	r1, #1540	; 0x604
90000866:	9801      	ldr	r0, [sp, #4]
90000868:	f001 fe4e 	bl	90002508 <AUDIO_IO_Write>
9000086c:	2200      	movs	r2, #0
9000086e:	e7dc      	b.n	9000082a <wm8994_SetOutputMode+0x5a>

90000870 <wm8994_SetFrequency>:
{
90000870:	b508      	push	{r3, lr}
  switch (AudioFreq)
90000872:	f245 6322 	movw	r3, #22050	; 0x5622
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
90000876:	b2c0      	uxtb	r0, r0
  switch (AudioFreq)
90000878:	4299      	cmp	r1, r3
9000087a:	d025      	beq.n	900008c8 <wm8994_SetFrequency+0x58>
9000087c:	d80b      	bhi.n	90000896 <wm8994_SetFrequency+0x26>
9000087e:	f642 3311 	movw	r3, #11025	; 0x2b11
90000882:	4299      	cmp	r1, r3
90000884:	d01e      	beq.n	900008c4 <wm8994_SetFrequency+0x54>
90000886:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
9000088a:	d017      	beq.n	900008bc <wm8994_SetFrequency+0x4c>
9000088c:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
90000890:	d00d      	beq.n	900008ae <wm8994_SetFrequency+0x3e>
 AUDIO_IO_Write(Addr, Reg, Value);
90000892:	2283      	movs	r2, #131	; 0x83
90000894:	e00c      	b.n	900008b0 <wm8994_SetFrequency+0x40>
  switch (AudioFreq)
90000896:	f64a 4344 	movw	r3, #44100	; 0xac44
9000089a:	4299      	cmp	r1, r3
9000089c:	d016      	beq.n	900008cc <wm8994_SetFrequency+0x5c>
9000089e:	4b0c      	ldr	r3, [pc, #48]	; (900008d0 <wm8994_SetFrequency+0x60>)
900008a0:	4299      	cmp	r1, r3
900008a2:	d00d      	beq.n	900008c0 <wm8994_SetFrequency+0x50>
900008a4:	f5b1 4ffa 	cmp.w	r1, #32000	; 0x7d00
900008a8:	d1f3      	bne.n	90000892 <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
900008aa:	2263      	movs	r2, #99	; 0x63
900008ac:	e000      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008ae:	2203      	movs	r2, #3
900008b0:	f44f 7104 	mov.w	r1, #528	; 0x210
900008b4:	f001 fe28 	bl	90002508 <AUDIO_IO_Write>
}
900008b8:	2000      	movs	r0, #0
900008ba:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
900008bc:	2233      	movs	r2, #51	; 0x33
900008be:	e7f7      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c0:	22a3      	movs	r2, #163	; 0xa3
900008c2:	e7f5      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c4:	2213      	movs	r2, #19
900008c6:	e7f3      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c8:	2243      	movs	r2, #67	; 0x43
900008ca:	e7f1      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008cc:	2273      	movs	r2, #115	; 0x73
900008ce:	e7ef      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008d0:	00017700 	.word	0x00017700

900008d4 <wm8994_Reset>:
900008d4:	2200      	movs	r2, #0
900008d6:	b2c0      	uxtb	r0, r0
{
900008d8:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
900008da:	4611      	mov	r1, r2
900008dc:	f001 fe14 	bl	90002508 <AUDIO_IO_Write>
  outputEnabled = 0;
900008e0:	4b02      	ldr	r3, [pc, #8]	; (900008ec <wm8994_Reset+0x18>)
900008e2:	2000      	movs	r0, #0
  inputEnabled=0;
900008e4:	e9c3 0000 	strd	r0, r0, [r3]
}
900008e8:	bd08      	pop	{r3, pc}
900008ea:	bf00      	nop
900008ec:	20000184 	.word	0x20000184

900008f0 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
900008f0:	f001 be08 	b.w	90002504 <AUDIO_IO_DeInit>

900008f4 <wm8994_ReadID>:
{
900008f4:	b510      	push	{r4, lr}
900008f6:	4604      	mov	r4, r0
  AUDIO_IO_Init();
900008f8:	f001 fdfe 	bl	900024f8 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
900008fc:	2100      	movs	r1, #0
900008fe:	b2e0      	uxtb	r0, r4
90000900:	f001 fe16 	bl	90002530 <AUDIO_IO_Read>
}
90000904:	bd10      	pop	{r4, pc}
	...

90000908 <wm8994_SetMute>:
  if (outputEnabled != 0)
90000908:	4b10      	ldr	r3, [pc, #64]	; (9000094c <wm8994_SetMute+0x44>)
9000090a:	681b      	ldr	r3, [r3, #0]
{
9000090c:	b507      	push	{r0, r1, r2, lr}
  if (outputEnabled != 0)
9000090e:	b183      	cbz	r3, 90000932 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
90000910:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
90000912:	b2c0      	uxtb	r0, r0
    if(Cmd == AUDIO_MUTE_ON)
90000914:	d111      	bne.n	9000093a <wm8994_SetMute+0x32>
 AUDIO_IO_Write(Addr, Reg, Value);
90000916:	f44f 7200 	mov.w	r2, #512	; 0x200
9000091a:	f44f 6184 	mov.w	r1, #1056	; 0x420
9000091e:	9001      	str	r0, [sp, #4]
90000920:	f001 fdf2 	bl	90002508 <AUDIO_IO_Write>
90000924:	f44f 7200 	mov.w	r2, #512	; 0x200
90000928:	f240 4122 	movw	r1, #1058	; 0x422
9000092c:	9801      	ldr	r0, [sp, #4]
9000092e:	f001 fdeb 	bl	90002508 <AUDIO_IO_Write>
}
90000932:	2000      	movs	r0, #0
90000934:	b003      	add	sp, #12
90000936:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
9000093a:	2210      	movs	r2, #16
9000093c:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000940:	9001      	str	r0, [sp, #4]
90000942:	f001 fde1 	bl	90002508 <AUDIO_IO_Write>
90000946:	2210      	movs	r2, #16
90000948:	e7ee      	b.n	90000928 <wm8994_SetMute+0x20>
9000094a:	bf00      	nop
9000094c:	20000184 	.word	0x20000184

90000950 <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000950:	2100      	movs	r1, #0
90000952:	f7ff bfd9 	b.w	90000908 <wm8994_SetMute>

90000956 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000956:	2100      	movs	r1, #0
90000958:	f7ff bfd6 	b.w	90000908 <wm8994_SetMute>

9000095c <wm8994_Pause>:
{  
9000095c:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
9000095e:	2101      	movs	r1, #1
{  
90000960:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000962:	f7ff ffd1 	bl	90000908 <wm8994_SetMute>
90000966:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
90000968:	2201      	movs	r2, #1
9000096a:	b2e8      	uxtb	r0, r5
9000096c:	2102      	movs	r1, #2
9000096e:	f001 fdcb 	bl	90002508 <AUDIO_IO_Write>
}
90000972:	4620      	mov	r0, r4
90000974:	bd38      	pop	{r3, r4, r5, pc}
	...

90000978 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000978:	2964      	cmp	r1, #100	; 0x64
9000097a:	f04f 0264 	mov.w	r2, #100	; 0x64
9000097e:	bf98      	it	ls
90000980:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
{
90000984:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000988:	bf98      	it	ls
9000098a:	fbb3 f3f2 	udivls	r3, r3, r2
  if (outputEnabled != 0)
9000098e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 90000a7c <wm8994_SetVolume+0x104>
{
90000992:	4605      	mov	r5, r0
90000994:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000996:	bf98      	it	ls
90000998:	b2df      	uxtbls	r7, r3
  if (outputEnabled != 0)
9000099a:	f8d8 6000 	ldr.w	r6, [r8]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
9000099e:	bf88      	it	hi
900009a0:	4617      	movhi	r7, r2
  if (outputEnabled != 0)
900009a2:	b32e      	cbz	r6, 900009f0 <wm8994_SetVolume+0x78>
    if(convertedvol > 0x3E)
900009a4:	2f3e      	cmp	r7, #62	; 0x3e
900009a6:	d91d      	bls.n	900009e4 <wm8994_SetVolume+0x6c>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
900009a8:	2100      	movs	r1, #0
900009aa:	f7ff ffad 	bl	90000908 <wm8994_SetMute>
900009ae:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
900009b0:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
900009b2:	f240 127f 	movw	r2, #383	; 0x17f
900009b6:	211c      	movs	r1, #28
900009b8:	9000      	str	r0, [sp, #0]
900009ba:	f001 fda5 	bl	90002508 <AUDIO_IO_Write>
900009be:	f240 127f 	movw	r2, #383	; 0x17f
900009c2:	211d      	movs	r1, #29
900009c4:	9800      	ldr	r0, [sp, #0]
900009c6:	f001 fd9f 	bl	90002508 <AUDIO_IO_Write>
900009ca:	f240 127f 	movw	r2, #383	; 0x17f
900009ce:	2126      	movs	r1, #38	; 0x26
900009d0:	9800      	ldr	r0, [sp, #0]
900009d2:	f001 fd99 	bl	90002508 <AUDIO_IO_Write>
900009d6:	f240 127f 	movw	r2, #383	; 0x17f
900009da:	2127      	movs	r1, #39	; 0x27
900009dc:	9800      	ldr	r0, [sp, #0]
900009de:	f001 fd93 	bl	90002508 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
900009e2:	e005      	b.n	900009f0 <wm8994_SetVolume+0x78>
    else if (Volume == 0)
900009e4:	2900      	cmp	r1, #0
900009e6:	d130      	bne.n	90000a4a <wm8994_SetVolume+0xd2>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
900009e8:	2101      	movs	r1, #1
900009ea:	f7ff ff8d 	bl	90000908 <wm8994_SetMute>
900009ee:	4606      	mov	r6, r0
  if (inputEnabled != 0)
900009f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
900009f4:	b32b      	cbz	r3, 90000a42 <wm8994_SetVolume+0xca>
    convertedvol = VOLUME_IN_CONVERT(Volume);
900009f6:	2c63      	cmp	r4, #99	; 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
900009f8:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
900009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
900009fe:	bf9a      	itte	ls
90000a00:	ebc4 1204 	rsbls	r2, r4, r4, lsl #4
90000a04:	2364      	movls	r3, #100	; 0x64
90000a06:	22ef      	movhi	r2, #239	; 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
90000a08:	9000      	str	r0, [sp, #0]
    convertedvol = VOLUME_IN_CONVERT(Volume);
90000a0a:	bf9e      	ittt	ls
90000a0c:	0112      	lslls	r2, r2, #4
90000a0e:	fbb2 f2f3 	udivls	r2, r2, r3
90000a12:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
90000a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
90000a18:	9201      	str	r2, [sp, #4]
90000a1a:	f001 fd75 	bl	90002508 <AUDIO_IO_Write>
90000a1e:	9a01      	ldr	r2, [sp, #4]
90000a20:	f240 4101 	movw	r1, #1025	; 0x401
90000a24:	9800      	ldr	r0, [sp, #0]
90000a26:	f001 fd6f 	bl	90002508 <AUDIO_IO_Write>
90000a2a:	9a01      	ldr	r2, [sp, #4]
90000a2c:	f240 4104 	movw	r1, #1028	; 0x404
90000a30:	9800      	ldr	r0, [sp, #0]
90000a32:	f001 fd69 	bl	90002508 <AUDIO_IO_Write>
90000a36:	9a01      	ldr	r2, [sp, #4]
90000a38:	f240 4105 	movw	r1, #1029	; 0x405
90000a3c:	9800      	ldr	r0, [sp, #0]
90000a3e:	f001 fd63 	bl	90002508 <AUDIO_IO_Write>
}
90000a42:	4630      	mov	r0, r6
90000a44:	b002      	add	sp, #8
90000a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000a4a:	2100      	movs	r1, #0
90000a4c:	f7ff ff5c 	bl	90000908 <wm8994_SetMute>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
90000a50:	f447 72a0 	orr.w	r2, r7, #320	; 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000a54:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
90000a56:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
90000a58:	211c      	movs	r1, #28
90000a5a:	9201      	str	r2, [sp, #4]
90000a5c:	9000      	str	r0, [sp, #0]
90000a5e:	f001 fd53 	bl	90002508 <AUDIO_IO_Write>
90000a62:	9a01      	ldr	r2, [sp, #4]
90000a64:	211d      	movs	r1, #29
90000a66:	9800      	ldr	r0, [sp, #0]
90000a68:	f001 fd4e 	bl	90002508 <AUDIO_IO_Write>
90000a6c:	9a01      	ldr	r2, [sp, #4]
90000a6e:	2126      	movs	r1, #38	; 0x26
90000a70:	9800      	ldr	r0, [sp, #0]
90000a72:	f001 fd49 	bl	90002508 <AUDIO_IO_Write>
90000a76:	9a01      	ldr	r2, [sp, #4]
90000a78:	e7af      	b.n	900009da <wm8994_SetVolume+0x62>
90000a7a:	bf00      	nop
90000a7c:	20000184 	.word	0x20000184

90000a80 <wm8994_Init>:
{
90000a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000a84:	4681      	mov	r9, r0
90000a86:	4698      	mov	r8, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
90000a88:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
{
90000a8c:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
90000a8e:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
90000a92:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
90000a94:	f001 fd30 	bl	900024f8 <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
90000a98:	2203      	movs	r2, #3
90000a9a:	f44f 7181 	mov.w	r1, #258	; 0x102
90000a9e:	4620      	mov	r0, r4
90000aa0:	f001 fd32 	bl	90002508 <AUDIO_IO_Write>
90000aa4:	2200      	movs	r2, #0
90000aa6:	f640 0117 	movw	r1, #2071	; 0x817
90000aaa:	4620      	mov	r0, r4
90000aac:	f001 fd2c 	bl	90002508 <AUDIO_IO_Write>
90000ab0:	2200      	movs	r2, #0
90000ab2:	f44f 7181 	mov.w	r1, #258	; 0x102
90000ab6:	4620      	mov	r0, r4
90000ab8:	f001 fd26 	bl	90002508 <AUDIO_IO_Write>
90000abc:	226c      	movs	r2, #108	; 0x6c
90000abe:	2139      	movs	r1, #57	; 0x39
90000ac0:	4620      	mov	r0, r4
90000ac2:	f001 fd21 	bl	90002508 <AUDIO_IO_Write>
  if (input_device > 0)
90000ac6:	b3c5      	cbz	r5, 90000b3a <wm8994_Init+0xba>
 AUDIO_IO_Write(Addr, Reg, Value);
90000ac8:	2213      	movs	r2, #19
90000aca:	2101      	movs	r1, #1
90000acc:	4620      	mov	r0, r4
90000ace:	f001 fd1b 	bl	90002508 <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
90000ad2:	2032      	movs	r0, #50	; 0x32
90000ad4:	f8df b4ec 	ldr.w	fp, [pc, #1260]	; 90000fc4 <wm8994_Init+0x544>
90000ad8:	f001 fd42 	bl	90002560 <AUDIO_IO_Delay>
  if (output_device > 0)
90000adc:	2e00      	cmp	r6, #0
90000ade:	f000 809a 	beq.w	90000c16 <wm8994_Init+0x196>
    outputEnabled = 1;
90000ae2:	2701      	movs	r7, #1
    switch (output_device)
90000ae4:	2e02      	cmp	r6, #2
    outputEnabled = 1;
90000ae6:	f8cb 7000 	str.w	r7, [fp]
    switch (output_device)
90000aea:	d07a      	beq.n	90000be2 <wm8994_Init+0x162>
90000aec:	2e03      	cmp	r6, #3
90000aee:	d026      	beq.n	90000b3e <wm8994_Init+0xbe>
90000af0:	42be      	cmp	r6, r7
90000af2:	d176      	bne.n	90000be2 <wm8994_Init+0x162>
 AUDIO_IO_Write(Addr, Reg, Value);
90000af4:	f640 420c 	movw	r2, #3084	; 0xc0c
90000af8:	2105      	movs	r1, #5
90000afa:	4620      	mov	r0, r4
90000afc:	f001 fd04 	bl	90002508 <AUDIO_IO_Write>
90000b00:	2200      	movs	r2, #0
90000b02:	f240 6101 	movw	r1, #1537	; 0x601
90000b06:	4620      	mov	r0, r4
90000b08:	f001 fcfe 	bl	90002508 <AUDIO_IO_Write>
90000b0c:	2200      	movs	r2, #0
90000b0e:	f240 6102 	movw	r1, #1538	; 0x602
90000b12:	4620      	mov	r0, r4
90000b14:	f001 fcf8 	bl	90002508 <AUDIO_IO_Write>
90000b18:	2202      	movs	r2, #2
90000b1a:	f240 6104 	movw	r1, #1540	; 0x604
90000b1e:	4620      	mov	r0, r4
90000b20:	f001 fcf2 	bl	90002508 <AUDIO_IO_Write>
90000b24:	2202      	movs	r2, #2
90000b26:	f240 6105 	movw	r1, #1541	; 0x605
90000b2a:	4620      	mov	r0, r4
90000b2c:	f001 fcec 	bl	90002508 <AUDIO_IO_Write>
  if (input_device > 0)
90000b30:	bb3d      	cbnz	r5, 90000b82 <wm8994_Init+0x102>
    inputEnabled = 0;
90000b32:	462f      	mov	r7, r5
90000b34:	f8cb 5004 	str.w	r5, [fp, #4]
90000b38:	e032      	b.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000b3a:	2203      	movs	r2, #3
90000b3c:	e7c5      	b.n	90000aca <wm8994_Init+0x4a>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000b3e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000b42:	f640 720f 	movw	r2, #3855	; 0xf0f
90000b46:	f04f 0105 	mov.w	r1, #5
90000b4a:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000b4c:	d13f      	bne.n	90000bce <wm8994_Init+0x14e>
 AUDIO_IO_Write(Addr, Reg, Value);
90000b4e:	f001 fcdb 	bl	90002508 <AUDIO_IO_Write>
90000b52:	4632      	mov	r2, r6
90000b54:	f240 6101 	movw	r1, #1537	; 0x601
90000b58:	4620      	mov	r0, r4
90000b5a:	f001 fcd5 	bl	90002508 <AUDIO_IO_Write>
90000b5e:	4632      	mov	r2, r6
90000b60:	f240 6102 	movw	r1, #1538	; 0x602
90000b64:	4620      	mov	r0, r4
90000b66:	f001 fccf 	bl	90002508 <AUDIO_IO_Write>
90000b6a:	4632      	mov	r2, r6
90000b6c:	f240 6104 	movw	r1, #1540	; 0x604
90000b70:	4620      	mov	r0, r4
90000b72:	f001 fcc9 	bl	90002508 <AUDIO_IO_Write>
90000b76:	4632      	mov	r2, r6
90000b78:	f240 6105 	movw	r1, #1541	; 0x605
90000b7c:	4620      	mov	r0, r4
90000b7e:	f001 fcc3 	bl	90002508 <AUDIO_IO_Write>
    inputEnabled = 1;
90000b82:	2701      	movs	r7, #1
    switch (input_device)
90000b84:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    inputEnabled = 1;
90000b88:	f8cb 7004 	str.w	r7, [fp, #4]
    switch (input_device)
90000b8c:	f000 809d 	beq.w	90000cca <wm8994_Init+0x24a>
90000b90:	d844      	bhi.n	90000c1c <wm8994_Init+0x19c>
90000b92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90000b96:	f000 80c7 	beq.w	90000d28 <wm8994_Init+0x2a8>
90000b9a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
90000b9e:	d06e      	beq.n	90000c7e <wm8994_Init+0x1fe>
  switch (AudioFreq)
90000ba0:	f5b8 4ffa 	cmp.w	r8, #32000	; 0x7d00
90000ba4:	f000 81cd 	beq.w	90000f42 <wm8994_Init+0x4c2>
90000ba8:	f200 80c8 	bhi.w	90000d3c <wm8994_Init+0x2bc>
90000bac:	f5b8 5f7a 	cmp.w	r8, #16000	; 0x3e80
90000bb0:	f000 81c5 	beq.w	90000f3e <wm8994_Init+0x4be>
90000bb4:	f200 80bb 	bhi.w	90000d2e <wm8994_Init+0x2ae>
90000bb8:	f5b8 5ffa 	cmp.w	r8, #8000	; 0x1f40
90000bbc:	f000 80ce 	beq.w	90000d5c <wm8994_Init+0x2dc>
90000bc0:	f642 3311 	movw	r3, #11025	; 0x2b11
90000bc4:	4598      	cmp	r8, r3
90000bc6:	f000 81c0 	beq.w	90000f4a <wm8994_Init+0x4ca>
 AUDIO_IO_Write(Addr, Reg, Value);
90000bca:	2283      	movs	r2, #131	; 0x83
90000bcc:	e0c7      	b.n	90000d5e <wm8994_Init+0x2de>
90000bce:	f001 fc9b 	bl	90002508 <AUDIO_IO_Write>
90000bd2:	463a      	mov	r2, r7
90000bd4:	f240 6101 	movw	r1, #1537	; 0x601
90000bd8:	4620      	mov	r0, r4
90000bda:	f001 fc95 	bl	90002508 <AUDIO_IO_Write>
90000bde:	463a      	mov	r2, r7
90000be0:	e795      	b.n	90000b0e <wm8994_Init+0x8e>
90000be2:	f240 3203 	movw	r2, #771	; 0x303
90000be6:	2105      	movs	r1, #5
90000be8:	4620      	mov	r0, r4
90000bea:	f001 fc8d 	bl	90002508 <AUDIO_IO_Write>
90000bee:	463a      	mov	r2, r7
90000bf0:	f240 6101 	movw	r1, #1537	; 0x601
90000bf4:	4620      	mov	r0, r4
90000bf6:	f001 fc87 	bl	90002508 <AUDIO_IO_Write>
90000bfa:	463a      	mov	r2, r7
90000bfc:	f240 6102 	movw	r1, #1538	; 0x602
90000c00:	4620      	mov	r0, r4
90000c02:	f001 fc81 	bl	90002508 <AUDIO_IO_Write>
90000c06:	2200      	movs	r2, #0
90000c08:	f240 6104 	movw	r1, #1540	; 0x604
90000c0c:	4620      	mov	r0, r4
90000c0e:	f001 fc7b 	bl	90002508 <AUDIO_IO_Write>
90000c12:	2200      	movs	r2, #0
90000c14:	e787      	b.n	90000b26 <wm8994_Init+0xa6>
    outputEnabled = 0;
90000c16:	f8cb 6000 	str.w	r6, [fp]
90000c1a:	e789      	b.n	90000b30 <wm8994_Init+0xb0>
    switch (input_device)
90000c1c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
90000c20:	d1be      	bne.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000c22:	f640 723c 	movw	r2, #3900	; 0xf3c
90000c26:	2104      	movs	r1, #4
90000c28:	4620      	mov	r0, r4
90000c2a:	f001 fc6d 	bl	90002508 <AUDIO_IO_Write>
90000c2e:	22db      	movs	r2, #219	; 0xdb
90000c30:	f44f 618a 	mov.w	r1, #1104	; 0x450
90000c34:	4620      	mov	r0, r4
90000c36:	f001 fc67 	bl	90002508 <AUDIO_IO_Write>
90000c3a:	22db      	movs	r2, #219	; 0xdb
90000c3c:	f44f 6188 	mov.w	r1, #1088	; 0x440
90000c40:	4620      	mov	r0, r4
90000c42:	f001 fc61 	bl	90002508 <AUDIO_IO_Write>
90000c46:	f246 32a0 	movw	r2, #25504	; 0x63a0
90000c4a:	2102      	movs	r1, #2
90000c4c:	4620      	mov	r0, r4
90000c4e:	f001 fc5b 	bl	90002508 <AUDIO_IO_Write>
90000c52:	2202      	movs	r2, #2
90000c54:	f240 6106 	movw	r1, #1542	; 0x606
90000c58:	4620      	mov	r0, r4
90000c5a:	f001 fc55 	bl	90002508 <AUDIO_IO_Write>
90000c5e:	2202      	movs	r2, #2
90000c60:	f240 6107 	movw	r1, #1543	; 0x607
90000c64:	4620      	mov	r0, r4
90000c66:	f001 fc4f 	bl	90002508 <AUDIO_IO_Write>
90000c6a:	2202      	movs	r2, #2
90000c6c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
90000c70:	4620      	mov	r0, r4
90000c72:	f001 fc49 	bl	90002508 <AUDIO_IO_Write>
90000c76:	2202      	movs	r2, #2
90000c78:	f240 6109 	movw	r1, #1545	; 0x609
90000c7c:	e04f      	b.n	90000d1e <wm8994_Init+0x29e>
90000c7e:	f44f 6243 	mov.w	r2, #3120	; 0xc30
90000c82:	2104      	movs	r1, #4
90000c84:	4620      	mov	r0, r4
90000c86:	f001 fc3f 	bl	90002508 <AUDIO_IO_Write>
90000c8a:	22db      	movs	r2, #219	; 0xdb
90000c8c:	f44f 618a 	mov.w	r1, #1104	; 0x450
90000c90:	4620      	mov	r0, r4
90000c92:	f001 fc39 	bl	90002508 <AUDIO_IO_Write>
90000c96:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
90000c9a:	2102      	movs	r1, #2
90000c9c:	4620      	mov	r0, r4
90000c9e:	f001 fc33 	bl	90002508 <AUDIO_IO_Write>
90000ca2:	2202      	movs	r2, #2
90000ca4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
90000ca8:	4620      	mov	r0, r4
90000caa:	f001 fc2d 	bl	90002508 <AUDIO_IO_Write>
90000cae:	2202      	movs	r2, #2
90000cb0:	f240 6109 	movw	r1, #1545	; 0x609
90000cb4:	4620      	mov	r0, r4
90000cb6:	f001 fc27 	bl	90002508 <AUDIO_IO_Write>
90000cba:	220e      	movs	r2, #14
90000cbc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
90000cc0:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
90000cc2:	2700      	movs	r7, #0
 AUDIO_IO_Write(Addr, Reg, Value);
90000cc4:	f001 fc20 	bl	90002508 <AUDIO_IO_Write>
      break; 
90000cc8:	e76a      	b.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000cca:	2211      	movs	r2, #17
90000ccc:	2128      	movs	r1, #40	; 0x28
90000cce:	4620      	mov	r0, r4
90000cd0:	f001 fc1a 	bl	90002508 <AUDIO_IO_Write>
90000cd4:	2235      	movs	r2, #53	; 0x35
90000cd6:	2129      	movs	r1, #41	; 0x29
90000cd8:	4620      	mov	r0, r4
90000cda:	f001 fc15 	bl	90002508 <AUDIO_IO_Write>
90000cde:	2235      	movs	r2, #53	; 0x35
90000ce0:	212a      	movs	r1, #42	; 0x2a
90000ce2:	4620      	mov	r0, r4
90000ce4:	f001 fc10 	bl	90002508 <AUDIO_IO_Write>
90000ce8:	f240 3203 	movw	r2, #771	; 0x303
90000cec:	2104      	movs	r1, #4
90000cee:	4620      	mov	r0, r4
90000cf0:	f001 fc0a 	bl	90002508 <AUDIO_IO_Write>
90000cf4:	22db      	movs	r2, #219	; 0xdb
90000cf6:	f44f 6188 	mov.w	r1, #1088	; 0x440
90000cfa:	4620      	mov	r0, r4
90000cfc:	f001 fc04 	bl	90002508 <AUDIO_IO_Write>
90000d00:	f246 3250 	movw	r2, #25424	; 0x6350
90000d04:	2102      	movs	r1, #2
90000d06:	4620      	mov	r0, r4
90000d08:	f001 fbfe 	bl	90002508 <AUDIO_IO_Write>
90000d0c:	2202      	movs	r2, #2
90000d0e:	f240 6106 	movw	r1, #1542	; 0x606
90000d12:	4620      	mov	r0, r4
90000d14:	f001 fbf8 	bl	90002508 <AUDIO_IO_Write>
90000d18:	2202      	movs	r2, #2
90000d1a:	f240 6107 	movw	r1, #1543	; 0x607
90000d1e:	4620      	mov	r0, r4
90000d20:	f001 fbf2 	bl	90002508 <AUDIO_IO_Write>
90000d24:	220d      	movs	r2, #13
90000d26:	e7c9      	b.n	90000cbc <wm8994_Init+0x23c>
90000d28:	f44f 7243 	mov.w	r2, #780	; 0x30c
90000d2c:	e7de      	b.n	90000cec <wm8994_Init+0x26c>
  switch (AudioFreq)
90000d2e:	f245 6322 	movw	r3, #22050	; 0x5622
90000d32:	4598      	cmp	r8, r3
90000d34:	f47f af49 	bne.w	90000bca <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
90000d38:	2243      	movs	r2, #67	; 0x43
90000d3a:	e010      	b.n	90000d5e <wm8994_Init+0x2de>
  switch (AudioFreq)
90000d3c:	f64b 3380 	movw	r3, #48000	; 0xbb80
90000d40:	4598      	cmp	r8, r3
90000d42:	f43f af42 	beq.w	90000bca <wm8994_Init+0x14a>
90000d46:	4b9d      	ldr	r3, [pc, #628]	; (90000fbc <wm8994_Init+0x53c>)
90000d48:	4598      	cmp	r8, r3
90000d4a:	f000 80fc 	beq.w	90000f46 <wm8994_Init+0x4c6>
90000d4e:	f64a 4344 	movw	r3, #44100	; 0xac44
90000d52:	4598      	cmp	r8, r3
90000d54:	f47f af39 	bne.w	90000bca <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
90000d58:	2273      	movs	r2, #115	; 0x73
90000d5a:	e000      	b.n	90000d5e <wm8994_Init+0x2de>
90000d5c:	2203      	movs	r2, #3
90000d5e:	f44f 7104 	mov.w	r1, #528	; 0x210
90000d62:	4620      	mov	r0, r4
90000d64:	f001 fbd0 	bl	90002508 <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000d68:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000d6c:	f44f 7140 	mov.w	r1, #768	; 0x300
90000d70:	4620      	mov	r0, r4
90000d72:	bf0c      	ite	eq
90000d74:	f244 0218 	movweq	r2, #16408	; 0x4018
90000d78:	f244 0210 	movwne	r2, #16400	; 0x4010
90000d7c:	f001 fbc4 	bl	90002508 <AUDIO_IO_Write>
90000d80:	2200      	movs	r2, #0
90000d82:	f240 3102 	movw	r1, #770	; 0x302
90000d86:	4620      	mov	r0, r4
90000d88:	f001 fbbe 	bl	90002508 <AUDIO_IO_Write>
90000d8c:	220a      	movs	r2, #10
90000d8e:	f44f 7102 	mov.w	r1, #520	; 0x208
90000d92:	4620      	mov	r0, r4
90000d94:	f001 fbb8 	bl	90002508 <AUDIO_IO_Write>
90000d98:	2201      	movs	r2, #1
90000d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
90000d9e:	4620      	mov	r0, r4
90000da0:	f001 fbb2 	bl	90002508 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
90000da4:	2e00      	cmp	r6, #0
90000da6:	f000 80a9 	beq.w	90000efc <wm8994_Init+0x47c>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
90000daa:	2e02      	cmp	r6, #2
90000dac:	d123      	bne.n	90000df6 <wm8994_Init+0x376>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dae:	f44f 7280 	mov.w	r2, #256	; 0x100
90000db2:	212d      	movs	r1, #45	; 0x2d
90000db4:	4620      	mov	r0, r4
      if(ColdStartup)
90000db6:	4e82      	ldr	r6, [pc, #520]	; (90000fc0 <wm8994_Init+0x540>)
 AUDIO_IO_Write(Addr, Reg, Value);
90000db8:	f001 fba6 	bl	90002508 <AUDIO_IO_Write>
90000dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
90000dc0:	212e      	movs	r1, #46	; 0x2e
90000dc2:	4620      	mov	r0, r4
90000dc4:	f001 fba0 	bl	90002508 <AUDIO_IO_Write>
      if(ColdStartup)
90000dc8:	7833      	ldrb	r3, [r6, #0]
90000dca:	2b00      	cmp	r3, #0
90000dcc:	f000 80bf 	beq.w	90000f4e <wm8994_Init+0x4ce>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dd0:	4620      	mov	r0, r4
90000dd2:	f44f 4201 	mov.w	r2, #33024	; 0x8100
90000dd6:	f44f 7188 	mov.w	r1, #272	; 0x110
90000dda:	f001 fb95 	bl	90002508 <AUDIO_IO_Write>
        ColdStartup=0;
90000dde:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
90000de0:	f44f 7096 	mov.w	r0, #300	; 0x12c
        ColdStartup=0;
90000de4:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
90000de6:	f001 fbbb 	bl	90002560 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dea:	2200      	movs	r2, #0
90000dec:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000df0:	4620      	mov	r0, r4
90000df2:	f001 fb89 	bl	90002508 <AUDIO_IO_Write>
90000df6:	f44f 7240 	mov.w	r2, #768	; 0x300
90000dfa:	2103      	movs	r1, #3
90000dfc:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
90000dfe:	f243 3603 	movw	r6, #13059	; 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
90000e02:	f001 fb81 	bl	90002508 <AUDIO_IO_Write>
90000e06:	2200      	movs	r2, #0
90000e08:	2122      	movs	r1, #34	; 0x22
90000e0a:	4620      	mov	r0, r4
90000e0c:	f001 fb7c 	bl	90002508 <AUDIO_IO_Write>
90000e10:	2200      	movs	r2, #0
90000e12:	2123      	movs	r1, #35	; 0x23
90000e14:	4620      	mov	r0, r4
90000e16:	f001 fb77 	bl	90002508 <AUDIO_IO_Write>
90000e1a:	f44f 7240 	mov.w	r2, #768	; 0x300
90000e1e:	2136      	movs	r1, #54	; 0x36
90000e20:	4620      	mov	r0, r4
90000e22:	f001 fb71 	bl	90002508 <AUDIO_IO_Write>
90000e26:	f243 0203 	movw	r2, #12291	; 0x3003
90000e2a:	2101      	movs	r1, #1
90000e2c:	4620      	mov	r0, r4
90000e2e:	f001 fb6b 	bl	90002508 <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000e32:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000e36:	f04f 0151 	mov.w	r1, #81	; 0x51
90000e3a:	4620      	mov	r0, r4
90000e3c:	bf0c      	ite	eq
90000e3e:	f240 2205 	movweq	r2, #517	; 0x205
90000e42:	2205      	movne	r2, #5
90000e44:	f001 fb60 	bl	90002508 <AUDIO_IO_Write>
90000e48:	f243 3203 	movw	r2, #13059	; 0x3303
90000e4c:	2101      	movs	r1, #1
90000e4e:	4620      	mov	r0, r4
90000e50:	f001 fb5a 	bl	90002508 <AUDIO_IO_Write>
90000e54:	2222      	movs	r2, #34	; 0x22
90000e56:	2160      	movs	r1, #96	; 0x60
90000e58:	4620      	mov	r0, r4
90000e5a:	f001 fb55 	bl	90002508 <AUDIO_IO_Write>
90000e5e:	f649 7225 	movw	r2, #40741	; 0x9f25
90000e62:	214c      	movs	r1, #76	; 0x4c
90000e64:	4620      	mov	r0, r4
90000e66:	f001 fb4f 	bl	90002508 <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
90000e6a:	200f      	movs	r0, #15
90000e6c:	f001 fb78 	bl	90002560 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000e70:	2201      	movs	r2, #1
90000e72:	212d      	movs	r1, #45	; 0x2d
90000e74:	4620      	mov	r0, r4
90000e76:	f001 fb47 	bl	90002508 <AUDIO_IO_Write>
90000e7a:	2201      	movs	r2, #1
90000e7c:	212e      	movs	r1, #46	; 0x2e
90000e7e:	4620      	mov	r0, r4
90000e80:	f001 fb42 	bl	90002508 <AUDIO_IO_Write>
90000e84:	f44f 724c 	mov.w	r2, #816	; 0x330
90000e88:	2103      	movs	r1, #3
90000e8a:	4620      	mov	r0, r4
90000e8c:	f001 fb3c 	bl	90002508 <AUDIO_IO_Write>
90000e90:	2233      	movs	r2, #51	; 0x33
90000e92:	2154      	movs	r1, #84	; 0x54
90000e94:	4620      	mov	r0, r4
90000e96:	f001 fb37 	bl	90002508 <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
90000e9a:	f240 1001 	movw	r0, #257	; 0x101
90000e9e:	f001 fb5f 	bl	90002560 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000ea2:	22ee      	movs	r2, #238	; 0xee
90000ea4:	2160      	movs	r1, #96	; 0x60
90000ea6:	4620      	mov	r0, r4
90000ea8:	f001 fb2e 	bl	90002508 <AUDIO_IO_Write>
90000eac:	22c0      	movs	r2, #192	; 0xc0
90000eae:	f44f 61c2 	mov.w	r1, #1552	; 0x610
90000eb2:	4620      	mov	r0, r4
90000eb4:	f001 fb28 	bl	90002508 <AUDIO_IO_Write>
90000eb8:	22c0      	movs	r2, #192	; 0xc0
90000eba:	f240 6111 	movw	r1, #1553	; 0x611
90000ebe:	4620      	mov	r0, r4
90000ec0:	f001 fb22 	bl	90002508 <AUDIO_IO_Write>
90000ec4:	2210      	movs	r2, #16
90000ec6:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000eca:	4620      	mov	r0, r4
90000ecc:	f001 fb1c 	bl	90002508 <AUDIO_IO_Write>
90000ed0:	22c0      	movs	r2, #192	; 0xc0
90000ed2:	f240 6112 	movw	r1, #1554	; 0x612
90000ed6:	4620      	mov	r0, r4
90000ed8:	f001 fb16 	bl	90002508 <AUDIO_IO_Write>
90000edc:	22c0      	movs	r2, #192	; 0xc0
90000ede:	f240 6113 	movw	r1, #1555	; 0x613
90000ee2:	4620      	mov	r0, r4
90000ee4:	f001 fb10 	bl	90002508 <AUDIO_IO_Write>
90000ee8:	2210      	movs	r2, #16
90000eea:	f240 4122 	movw	r1, #1058	; 0x422
90000eee:	4620      	mov	r0, r4
90000ef0:	f001 fb0a 	bl	90002508 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
90000ef4:	4651      	mov	r1, sl
90000ef6:	4648      	mov	r0, r9
90000ef8:	f7ff fd3e 	bl	90000978 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
90000efc:	b1e5      	cbz	r5, 90000f38 <wm8994_Init+0x4b8>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
90000efe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90000f02:	d002      	beq.n	90000f0a <wm8994_Init+0x48a>
90000f04:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
90000f08:	d12a      	bne.n	90000f60 <wm8994_Init+0x4e0>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f0a:	f046 0213 	orr.w	r2, r6, #19
90000f0e:	2101      	movs	r1, #1
90000f10:	4620      	mov	r0, r4
90000f12:	f001 faf9 	bl	90002508 <AUDIO_IO_Write>
90000f16:	2202      	movs	r2, #2
90000f18:	f44f 61c4 	mov.w	r1, #1568	; 0x620
90000f1c:	4620      	mov	r0, r4
90000f1e:	f001 faf3 	bl	90002508 <AUDIO_IO_Write>
90000f22:	f44f 5260 	mov.w	r2, #14336	; 0x3800
90000f26:	f240 4111 	movw	r1, #1041	; 0x411
90000f2a:	4620      	mov	r0, r4
90000f2c:	f001 faec 	bl	90002508 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
90000f30:	4651      	mov	r1, sl
90000f32:	4648      	mov	r0, r9
90000f34:	f7ff fd20 	bl	90000978 <wm8994_SetVolume>
}
90000f38:	4638      	mov	r0, r7
90000f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
90000f3e:	2233      	movs	r2, #51	; 0x33
90000f40:	e70d      	b.n	90000d5e <wm8994_Init+0x2de>
90000f42:	2263      	movs	r2, #99	; 0x63
90000f44:	e70b      	b.n	90000d5e <wm8994_Init+0x2de>
90000f46:	22a3      	movs	r2, #163	; 0xa3
90000f48:	e709      	b.n	90000d5e <wm8994_Init+0x2de>
90000f4a:	2213      	movs	r2, #19
90000f4c:	e707      	b.n	90000d5e <wm8994_Init+0x2de>
90000f4e:	4620      	mov	r0, r4
90000f50:	f248 1208 	movw	r2, #33032	; 0x8108
90000f54:	f44f 7188 	mov.w	r1, #272	; 0x110
90000f58:	f001 fad6 	bl	90002508 <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
90000f5c:	2032      	movs	r0, #50	; 0x32
90000f5e:	e742      	b.n	90000de6 <wm8994_Init+0x366>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000f60:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
90000f64:	d115      	bne.n	90000f92 <wm8994_Init+0x512>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f66:	f046 0213 	orr.w	r2, r6, #19
90000f6a:	2101      	movs	r1, #1
90000f6c:	4620      	mov	r0, r4
90000f6e:	f001 facb 	bl	90002508 <AUDIO_IO_Write>
90000f72:	2202      	movs	r2, #2
90000f74:	f44f 61c4 	mov.w	r1, #1568	; 0x620
90000f78:	4620      	mov	r0, r4
90000f7a:	f001 fac5 	bl	90002508 <AUDIO_IO_Write>
90000f7e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000f82:	f44f 6182 	mov.w	r1, #1040	; 0x410
90000f86:	4620      	mov	r0, r4
90000f88:	f001 fabe 	bl	90002508 <AUDIO_IO_Write>
90000f8c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000f90:	e7c9      	b.n	90000f26 <wm8994_Init+0x4a6>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
90000f92:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
90000f96:	d002      	beq.n	90000f9e <wm8994_Init+0x51e>
90000f98:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
90000f9c:	d1c8      	bne.n	90000f30 <wm8994_Init+0x4b0>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f9e:	220b      	movs	r2, #11
90000fa0:	2118      	movs	r1, #24
90000fa2:	4620      	mov	r0, r4
90000fa4:	f001 fab0 	bl	90002508 <AUDIO_IO_Write>
90000fa8:	220b      	movs	r2, #11
90000faa:	211a      	movs	r1, #26
90000fac:	4620      	mov	r0, r4
90000fae:	f001 faab 	bl	90002508 <AUDIO_IO_Write>
90000fb2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000fb6:	f44f 6182 	mov.w	r1, #1040	; 0x410
90000fba:	e7b6      	b.n	90000f2a <wm8994_Init+0x4aa>
90000fbc:	00017700 	.word	0x00017700
90000fc0:	20000028 	.word	0x20000028
90000fc4:	20000184 	.word	0x20000184

90000fc8 <wm8994_Stop>:
{
90000fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
90000fca:	4f19      	ldr	r7, [pc, #100]	; (90001030 <wm8994_Stop+0x68>)
{
90000fcc:	4604      	mov	r4, r0
90000fce:	460e      	mov	r6, r1
  if (outputEnabled != 0)
90000fd0:	683d      	ldr	r5, [r7, #0]
90000fd2:	b355      	cbz	r5, 9000102a <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000fd4:	2101      	movs	r1, #1
90000fd6:	f7ff fc97 	bl	90000908 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
90000fda:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000fdc:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
90000fde:	d024      	beq.n	9000102a <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
90000fe0:	b2e0      	uxtb	r0, r4
 AUDIO_IO_Write(Addr, Reg, Value);
90000fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
90000fe6:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000fea:	9001      	str	r0, [sp, #4]
90000fec:	f001 fa8c 	bl	90002508 <AUDIO_IO_Write>
90000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
90000ff4:	f240 4122 	movw	r1, #1058	; 0x422
90000ff8:	9801      	ldr	r0, [sp, #4]
90000ffa:	f001 fa85 	bl	90002508 <AUDIO_IO_Write>
90000ffe:	2200      	movs	r2, #0
90001000:	212d      	movs	r1, #45	; 0x2d
90001002:	9801      	ldr	r0, [sp, #4]
90001004:	f001 fa80 	bl	90002508 <AUDIO_IO_Write>
90001008:	2200      	movs	r2, #0
9000100a:	212e      	movs	r1, #46	; 0x2e
9000100c:	9801      	ldr	r0, [sp, #4]
9000100e:	f001 fa7b 	bl	90002508 <AUDIO_IO_Write>
90001012:	2200      	movs	r2, #0
90001014:	2105      	movs	r1, #5
90001016:	9801      	ldr	r0, [sp, #4]
90001018:	f001 fa76 	bl	90002508 <AUDIO_IO_Write>
9000101c:	2200      	movs	r2, #0
9000101e:	9801      	ldr	r0, [sp, #4]
90001020:	4611      	mov	r1, r2
90001022:	f001 fa71 	bl	90002508 <AUDIO_IO_Write>
      outputEnabled = 0;
90001026:	2300      	movs	r3, #0
90001028:	603b      	str	r3, [r7, #0]
}
9000102a:	4628      	mov	r0, r5
9000102c:	b003      	add	sp, #12
9000102e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90001030:	20000184 	.word	0x20000184

90001034 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001034:	4b04      	ldr	r3, [pc, #16]	; (90001048 <SAIx_Out_DeInit+0x14>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001036:	4a05      	ldr	r2, [pc, #20]	; (9000104c <SAIx_Out_DeInit+0x18>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001038:	4805      	ldr	r0, [pc, #20]	; (90001050 <SAIx_Out_DeInit+0x1c>)
9000103a:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000103c:	6853      	ldr	r3, [r2, #4]
9000103e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001042:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
90001044:	f004 b9f1 	b.w	9000542a <HAL_SAI_DeInit>
90001048:	40015c04 	.word	0x40015c04
9000104c:	40015c00 	.word	0x40015c00
90001050:	2000018c 	.word	0x2000018c

90001054 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
90001054:	4b05      	ldr	r3, [pc, #20]	; (9000106c <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
90001056:	4a06      	ldr	r2, [pc, #24]	; (90001070 <SAIx_In_DeInit+0x1c>)
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
90001058:	4806      	ldr	r0, [pc, #24]	; (90001074 <SAIx_In_DeInit+0x20>)
9000105a:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
9000105e:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001064:	6253      	str	r3, [r2, #36]	; 0x24

  HAL_SAI_DeInit(&haudio_in_sai);
90001066:	f004 b9e0 	b.w	9000542a <HAL_SAI_DeInit>
9000106a:	bf00      	nop
9000106c:	40015c24 	.word	0x40015c24
90001070:	40015c00 	.word	0x40015c00
90001074:	2000018c 	.word	0x2000018c

90001078 <SAIx_In_Init>:
{
90001078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
9000107c:	4b35      	ldr	r3, [pc, #212]	; (90001154 <SAIx_In_Init+0xdc>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
9000107e:	2500      	movs	r5, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001080:	4c35      	ldr	r4, [pc, #212]	; (90001158 <SAIx_In_Init+0xe0>)
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
90001082:	2601      	movs	r6, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001084:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 90001160 <SAIx_In_Init+0xe8>
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
90001088:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
9000108c:	6023      	str	r3, [r4, #0]
{
9000108e:	4617      	mov	r7, r2
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001090:	f8d8 3004 	ldr.w	r3, [r8, #4]
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
90001094:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  haudio_out_sai.SlotInit.SlotNumber = 4;
90001098:	f04f 0904 	mov.w	r9, #4
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000109c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900010a0:	f8c8 3004 	str.w	r3, [r8, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
900010a4:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
900010a6:	61e2      	str	r2, [r4, #28]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010a8:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.Init.AudioMode = SaiOutMode;
900010aa:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
900010ac:	4620      	mov	r0, r4
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
900010ae:	9101      	str	r1, [sp, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
900010b0:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
900010b2:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
900010b4:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
900010b6:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
900010b8:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
900010ba:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
900010bc:	e9c4 350d 	strd	r3, r5, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
900010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
900010c4:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010c6:	2320      	movs	r3, #32
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
900010c8:	e9c4 9117 	strd	r9, r1, [r4, #92]	; 0x5c
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010cc:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
900010d0:	e9c4 b512 	strd	fp, r5, [r4, #72]	; 0x48
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
900010d4:	e9c4 a514 	strd	sl, r5, [r4, #80]	; 0x50
  HAL_SAI_Init(&haudio_out_sai);
900010d8:	f004 f8d0 	bl	9000527c <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
900010dc:	481f      	ldr	r0, [pc, #124]	; (9000115c <SAIx_In_Init+0xe4>)
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
900010de:	2380      	movs	r3, #128	; 0x80
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
900010e0:	2240      	movs	r2, #64	; 0x40
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
900010e2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
900010e6:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
900010ea:	9901      	ldr	r1, [sp, #4]
  __HAL_SAI_DISABLE(&haudio_in_sai);
900010ec:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
900010f0:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
900010f4:	2003      	movs	r0, #3
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
900010f6:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
900010fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  HAL_SAI_Init(&haudio_in_sai);
900010fe:	f104 0084 	add.w	r0, r4, #132	; 0x84
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
90001102:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
90001106:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
9000110a:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
9000110e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
90001112:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
90001116:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
9000111a:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
9000111e:	e9c4 352e 	strd	r3, r5, [r4, #184]	; 0xb8
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
90001122:	2320      	movs	r3, #32
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
90001124:	e9c4 b533 	strd	fp, r5, [r4, #204]	; 0xcc
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
90001128:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
9000112c:	e9c4 a535 	strd	sl, r5, [r4, #212]	; 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
90001130:	e9c4 5937 	strd	r5, r9, [r4, #220]	; 0xdc
  HAL_SAI_Init(&haudio_in_sai);
90001134:	f004 f8a2 	bl	9000527c <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
90001138:	6822      	ldr	r2, [r4, #0]
9000113a:	6813      	ldr	r3, [r2, #0]
9000113c:	ea43 030b 	orr.w	r3, r3, fp
90001140:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
90001142:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
90001146:	6813      	ldr	r3, [r2, #0]
90001148:	ea43 030b 	orr.w	r3, r3, fp
9000114c:	6013      	str	r3, [r2, #0]
}
9000114e:	b003      	add	sp, #12
90001150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001154:	40015c04 	.word	0x40015c04
90001158:	2000018c 	.word	0x2000018c
9000115c:	40015c24 	.word	0x40015c24
90001160:	40015c00 	.word	0x40015c00

90001164 <BSP_AUDIO_OUT_Play>:
{
90001164:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
90001166:	4b0d      	ldr	r3, [pc, #52]	; (9000119c <BSP_AUDIO_OUT_Play+0x38>)
{
90001168:	4605      	mov	r5, r0
9000116a:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
9000116c:	b28a      	uxth	r2, r1
9000116e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
90001172:	4601      	mov	r1, r0
90001174:	2034      	movs	r0, #52	; 0x34
90001176:	68db      	ldr	r3, [r3, #12]
90001178:	4798      	blx	r3
9000117a:	b960      	cbnz	r0, 90001196 <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
9000117c:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
90001180:	4629      	mov	r1, r5
90001182:	4806      	ldr	r0, [pc, #24]	; (9000119c <BSP_AUDIO_OUT_Play+0x38>)
90001184:	bf34      	ite	cc
90001186:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
9000118a:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
9000118e:	f004 f9db 	bl	90005548 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
90001192:	2000      	movs	r0, #0
}
90001194:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
90001196:	2001      	movs	r0, #1
90001198:	e7fc      	b.n	90001194 <BSP_AUDIO_OUT_Play+0x30>
9000119a:	bf00      	nop
9000119c:	2000018c 	.word	0x2000018c

900011a0 <BSP_AUDIO_OUT_Pause>:
{    
900011a0:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
900011a2:	4d07      	ldr	r5, [pc, #28]	; (900011c0 <BSP_AUDIO_OUT_Pause+0x20>)
900011a4:	2034      	movs	r0, #52	; 0x34
900011a6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
900011aa:	691b      	ldr	r3, [r3, #16]
900011ac:	4798      	blx	r3
900011ae:	4604      	mov	r4, r0
900011b0:	b920      	cbnz	r0, 900011bc <BSP_AUDIO_OUT_Pause+0x1c>
    HAL_SAI_DMAPause(&haudio_out_sai);
900011b2:	4628      	mov	r0, r5
900011b4:	f004 f957 	bl	90005466 <HAL_SAI_DMAPause>
    return AUDIO_OK;
900011b8:	4620      	mov	r0, r4
}
900011ba:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
900011bc:	2001      	movs	r0, #1
900011be:	e7fc      	b.n	900011ba <BSP_AUDIO_OUT_Pause+0x1a>
900011c0:	2000018c 	.word	0x2000018c

900011c4 <BSP_AUDIO_OUT_Resume>:
{    
900011c4:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
900011c6:	4d07      	ldr	r5, [pc, #28]	; (900011e4 <BSP_AUDIO_OUT_Resume+0x20>)
900011c8:	2034      	movs	r0, #52	; 0x34
900011ca:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
900011ce:	695b      	ldr	r3, [r3, #20]
900011d0:	4798      	blx	r3
900011d2:	4604      	mov	r4, r0
900011d4:	b920      	cbnz	r0, 900011e0 <BSP_AUDIO_OUT_Resume+0x1c>
    HAL_SAI_DMAResume(&haudio_out_sai);
900011d6:	4628      	mov	r0, r5
900011d8:	f004 f955 	bl	90005486 <HAL_SAI_DMAResume>
    return AUDIO_OK;
900011dc:	4620      	mov	r0, r4
}
900011de:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
900011e0:	2001      	movs	r0, #1
900011e2:	e7fc      	b.n	900011de <BSP_AUDIO_OUT_Resume+0x1a>
900011e4:	2000018c 	.word	0x2000018c

900011e8 <BSP_AUDIO_OUT_Stop>:
{
900011e8:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_out_sai);
900011ea:	4c0b      	ldr	r4, [pc, #44]	; (90001218 <BSP_AUDIO_OUT_Stop+0x30>)
{
900011ec:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
900011ee:	4620      	mov	r0, r4
900011f0:	f004 f960 	bl	900054b4 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
900011f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
900011f8:	4629      	mov	r1, r5
900011fa:	2034      	movs	r0, #52	; 0x34
900011fc:	699b      	ldr	r3, [r3, #24]
900011fe:	4798      	blx	r3
90001200:	4604      	mov	r4, r0
90001202:	b930      	cbnz	r0, 90001212 <BSP_AUDIO_OUT_Stop+0x2a>
    if(Option == CODEC_PDWN_HW)
90001204:	2d01      	cmp	r5, #1
90001206:	d102      	bne.n	9000120e <BSP_AUDIO_OUT_Stop+0x26>
      HAL_Delay(1);
90001208:	4628      	mov	r0, r5
9000120a:	f001 fc5f 	bl	90002acc <HAL_Delay>
    return AUDIO_OK;
9000120e:	4620      	mov	r0, r4
90001210:	e000      	b.n	90001214 <BSP_AUDIO_OUT_Stop+0x2c>
    return AUDIO_ERROR;
90001212:	2001      	movs	r0, #1
}
90001214:	bd38      	pop	{r3, r4, r5, pc}
90001216:	bf00      	nop
90001218:	2000018c 	.word	0x2000018c

9000121c <BSP_AUDIO_OUT_SetVolume>:
{
9000121c:	b508      	push	{r3, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
9000121e:	4b05      	ldr	r3, [pc, #20]	; (90001234 <BSP_AUDIO_OUT_SetVolume+0x18>)
{
90001220:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
90001222:	2034      	movs	r0, #52	; 0x34
90001224:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
90001228:	6a1b      	ldr	r3, [r3, #32]
9000122a:	4798      	blx	r3
}
9000122c:	3800      	subs	r0, #0
9000122e:	bf18      	it	ne
90001230:	2001      	movne	r0, #1
90001232:	bd08      	pop	{r3, pc}
90001234:	2000018c 	.word	0x2000018c

90001238 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{ 
90001238:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000123a:	4c08      	ldr	r4, [pc, #32]	; (9000125c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
9000123c:	6822      	ldr	r2, [r4, #0]
9000123e:	6813      	ldr	r3, [r2, #0]
90001240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001244:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
90001246:	6620      	str	r0, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
90001248:	4620      	mov	r0, r4
9000124a:	f004 f817 	bl	9000527c <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
9000124e:	6822      	ldr	r2, [r4, #0]
90001250:	6813      	ldr	r3, [r2, #0]
90001252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001256:	6013      	str	r3, [r2, #0]
}
90001258:	bd10      	pop	{r4, pc}
9000125a:	bf00      	nop
9000125c:	2000018c 	.word	0x2000018c

90001260 <HAL_SAI_TxCpltCallback>:
{
90001260:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
90001262:	f009 fbdf 	bl	9000aa24 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
90001266:	bd08      	pop	{r3, pc}

90001268 <HAL_SAI_TxHalfCpltCallback>:
{
90001268:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
9000126a:	f009 fbe7 	bl	9000aa3c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
9000126e:	bd08      	pop	{r3, pc}

90001270 <BSP_AUDIO_OUT_Error_CallBack>:
90001270:	4770      	bx	lr
	...

90001274 <BSP_AUDIO_OUT_MspInit>:
{ 
90001274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
90001278:	4c4d      	ldr	r4, [pc, #308]	; (900013b0 <BSP_AUDIO_OUT_MspInit+0x13c>)
{ 
9000127a:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
9000127c:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001280:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
90001282:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001284:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
90001286:	f04f 080a 	mov.w	r8, #10
{ 
9000128a:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
9000128c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
90001290:	a905      	add	r1, sp, #20
90001292:	4848      	ldr	r0, [pc, #288]	; (900013b4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
90001294:	f04f 0a40 	mov.w	sl, #64	; 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
90001298:	6463      	str	r3, [r4, #68]	; 0x44
9000129a:	6c63      	ldr	r3, [r4, #68]	; 0x44
9000129c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
900012a0:	9300      	str	r3, [sp, #0]
900012a2:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
900012a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
900012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900012aa:	6323      	str	r3, [r4, #48]	; 0x30
900012ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
900012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
900012b2:	9301      	str	r3, [sp, #4]
900012b4:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
900012b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
900012b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900012bc:	6323      	str	r3, [r4, #48]	; 0x30
900012be:	6b23      	ldr	r3, [r4, #48]	; 0x30
900012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
900012c4:	9302      	str	r3, [sp, #8]
900012c6:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
900012c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
900012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900012ce:	6323      	str	r3, [r4, #48]	; 0x30
900012d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
900012d2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
900012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
900012da:	9303      	str	r3, [sp, #12]
900012dc:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900012de:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
900012e0:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900012e4:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
900012e8:	f001 ffb4 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
900012ec:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
900012ee:	a905      	add	r1, sp, #20
900012f0:	4830      	ldr	r0, [pc, #192]	; (900013b4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
900012f2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900012f6:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
900012fa:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
900012fe:	f001 ffa9 	bl	90003254 <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
90001302:	a905      	add	r1, sp, #20
90001304:	482b      	ldr	r0, [pc, #172]	; (900013b4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
90001306:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
9000130a:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
9000130e:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
90001312:	f001 ff9f 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
90001316:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
90001318:	a905      	add	r1, sp, #20
9000131a:	4826      	ldr	r0, [pc, #152]	; (900013b4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
9000131c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001320:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001324:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
90001328:	f001 ff94 	bl	90003254 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
9000132c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
9000132e:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
90001330:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90001334:	6323      	str	r3, [r4, #48]	; 0x30
90001336:	6b23      	ldr	r3, [r4, #48]	; 0x30
90001338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000133c:	9304      	str	r3, [sp, #16]
9000133e:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
90001340:	4b1d      	ldr	r3, [pc, #116]	; (900013b8 <BSP_AUDIO_OUT_MspInit+0x144>)
90001342:	429a      	cmp	r2, r3
90001344:	d129      	bne.n	9000139a <BSP_AUDIO_OUT_MspInit+0x126>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
90001346:	4b1d      	ldr	r3, [pc, #116]	; (900013bc <BSP_AUDIO_OUT_MspInit+0x148>)
90001348:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
9000134c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
90001350:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
90001354:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
90001358:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
9000135c:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
90001360:	f8c3 6144 	str.w	r6, [r3, #324]	; 0x144
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
90001364:	e9c3 2a44 	strd	r2, sl, [r3, #272]	; 0x110
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
90001368:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000136c:	e9c3 1247 	strd	r1, r2, [r3, #284]	; 0x11c
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
90001370:	f44f 7280 	mov.w	r2, #256	; 0x100
90001374:	e9c3 0249 	strd	r0, r2, [r3, #292]	; 0x124
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
90001378:	2204      	movs	r2, #4
9000137a:	e9c3 424b 	strd	r4, r2, [r3, #300]	; 0x12c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
9000137e:	f503 7486 	add.w	r4, r3, #268	; 0x10c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
90001382:	4a0f      	ldr	r2, [pc, #60]	; (900013c0 <BSP_AUDIO_OUT_MspInit+0x14c>)
    HAL_DMA_DeInit(&hdma_sai_tx);
90001384:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
90001386:	66f4      	str	r4, [r6, #108]	; 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
90001388:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
9000138c:	e9c3 754d 	strd	r7, r5, [r3, #308]	; 0x134
    HAL_DMA_DeInit(&hdma_sai_tx);
90001390:	f001 fca8 	bl	90002ce4 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
90001394:	4620      	mov	r0, r4
90001396:	f001 fc27 	bl	90002be8 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
9000139a:	2200      	movs	r2, #0
9000139c:	210e      	movs	r1, #14
9000139e:	203c      	movs	r0, #60	; 0x3c
900013a0:	f001 fbb8 	bl	90002b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
900013a4:	203c      	movs	r0, #60	; 0x3c
900013a6:	f001 fbe7 	bl	90002b78 <HAL_NVIC_EnableIRQ>
}
900013aa:	b00a      	add	sp, #40	; 0x28
900013ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900013b0:	40023800 	.word	0x40023800
900013b4:	40022000 	.word	0x40022000
900013b8:	40015c04 	.word	0x40015c04
900013bc:	2000018c 	.word	0x2000018c
900013c0:	40026470 	.word	0x40026470

900013c4 <BSP_AUDIO_OUT_Init>:
{ 
900013c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900013c8:	4617      	mov	r7, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
900013ca:	4c2f      	ldr	r4, [pc, #188]	; (90001488 <BSP_AUDIO_OUT_Init+0xc4>)
{ 
900013cc:	4681      	mov	r9, r0
900013ce:	468a      	mov	sl, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
900013d0:	4d2e      	ldr	r5, [pc, #184]	; (9000148c <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
900013d2:	f7ff fe2f 	bl	90001034 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
900013d6:	4639      	mov	r1, r7
900013d8:	2200      	movs	r2, #0
900013da:	4620      	mov	r0, r4
900013dc:	f008 fb12 	bl	90009a04 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
900013e0:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
900013e2:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
900013e4:	f004 f9b2 	bl	9000574c <HAL_SAI_GetState>
900013e8:	4601      	mov	r1, r0
900013ea:	b910      	cbnz	r0, 900013f2 <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
900013ec:	4620      	mov	r0, r4
900013ee:	f7ff ff41 	bl	90001274 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
900013f2:	4a27      	ldr	r2, [pc, #156]	; (90001490 <BSP_AUDIO_OUT_Init+0xcc>)
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
900013f4:	2104      	movs	r1, #4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
900013f6:	6025      	str	r5, [r4, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
900013f8:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
900013fa:	6853      	ldr	r3, [r2, #4]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
900013fc:	2601      	movs	r6, #1
  HAL_SAI_Init(&haudio_out_sai);
900013fe:	4822      	ldr	r0, [pc, #136]	; (90001488 <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
90001404:	f8df 808c 	ldr.w	r8, [pc, #140]	; 90001494 <BSP_AUDIO_OUT_Init+0xd0>
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001408:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
9000140a:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
9000140c:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
9000140e:	61e7      	str	r7, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
90001410:	6065      	str	r5, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
90001412:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
90001414:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
90001416:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
90001418:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
9000141a:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
9000141c:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
9000141e:	e9c4 350d 	strd	r3, r5, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
90001422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90001426:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
90001428:	2320      	movs	r3, #32
9000142a:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
9000142e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
90001432:	e9c4 3512 	strd	r3, r5, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
90001436:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
9000143a:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
9000143e:	230f      	movs	r3, #15
90001440:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  HAL_SAI_Init(&haudio_out_sai);
90001444:	f003 ff1a 	bl	9000527c <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
90001448:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
9000144a:	2034      	movs	r0, #52	; 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
9000144c:	6813      	ldr	r3, [r2, #0]
9000144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001452:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
90001454:	f8d8 3008 	ldr.w	r3, [r8, #8]
90001458:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
9000145a:	f648 1394 	movw	r3, #35220	; 0x8994
9000145e:	4298      	cmp	r0, r3
90001460:	d10f      	bne.n	90001482 <BSP_AUDIO_OUT_Init+0xbe>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
90001462:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
90001466:	2034      	movs	r0, #52	; 0x34
90001468:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
9000146a:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
9000146e:	463b      	mov	r3, r7
90001470:	f8d8 4000 	ldr.w	r4, [r8]
90001474:	4652      	mov	r2, sl
90001476:	4649      	mov	r1, r9
90001478:	2034      	movs	r0, #52	; 0x34
9000147a:	47a0      	blx	r4
    ret = AUDIO_OK;
9000147c:	4628      	mov	r0, r5
}
9000147e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = AUDIO_ERROR;
90001482:	4630      	mov	r0, r6
90001484:	e7fb      	b.n	9000147e <BSP_AUDIO_OUT_Init+0xba>
90001486:	bf00      	nop
90001488:	2000018c 	.word	0x2000018c
9000148c:	40015c04 	.word	0x40015c04
90001490:	40015c00 	.word	0x40015c00
90001494:	2000002c 	.word	0x2000002c

90001498 <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
90001498:	b28a      	uxth	r2, r1
9000149a:	4601      	mov	r1, r0
9000149c:	4802      	ldr	r0, [pc, #8]	; (900014a8 <BSP_AUDIO_IN_Record+0x10>)
{
9000149e:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
900014a0:	f004 f8a2 	bl	900055e8 <HAL_SAI_Receive_DMA>
}
900014a4:	2000      	movs	r0, #0
900014a6:	bd08      	pop	{r3, pc}
900014a8:	20000210 	.word	0x20000210

900014ac <BSP_AUDIO_IN_Stop>:
{
900014ac:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_in_sai);
900014ae:	4c0b      	ldr	r4, [pc, #44]	; (900014dc <BSP_AUDIO_IN_Stop+0x30>)
{
900014b0:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_in_sai);
900014b2:	f104 0084 	add.w	r0, r4, #132	; 0x84
900014b6:	f003 fffd 	bl	900054b4 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
900014ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
900014be:	4629      	mov	r1, r5
900014c0:	2034      	movs	r0, #52	; 0x34
900014c2:	699b      	ldr	r3, [r3, #24]
900014c4:	4798      	blx	r3
900014c6:	4604      	mov	r4, r0
900014c8:	b930      	cbnz	r0, 900014d8 <BSP_AUDIO_IN_Stop+0x2c>
    if(Option == CODEC_PDWN_HW)
900014ca:	2d01      	cmp	r5, #1
900014cc:	d102      	bne.n	900014d4 <BSP_AUDIO_IN_Stop+0x28>
      HAL_Delay(1);
900014ce:	4628      	mov	r0, r5
900014d0:	f001 fafc 	bl	90002acc <HAL_Delay>
    return AUDIO_OK;
900014d4:	4620      	mov	r0, r4
900014d6:	e000      	b.n	900014da <BSP_AUDIO_IN_Stop+0x2e>
    return AUDIO_ERROR;
900014d8:	2001      	movs	r0, #1
}
900014da:	bd38      	pop	{r3, r4, r5, pc}
900014dc:	2000018c 	.word	0x2000018c

900014e0 <BSP_AUDIO_IN_Pause>:
{    
900014e0:	b508      	push	{r3, lr}
  HAL_SAI_DMAPause(&haudio_in_sai);
900014e2:	4802      	ldr	r0, [pc, #8]	; (900014ec <BSP_AUDIO_IN_Pause+0xc>)
900014e4:	f003 ffbf 	bl	90005466 <HAL_SAI_DMAPause>
}
900014e8:	2000      	movs	r0, #0
900014ea:	bd08      	pop	{r3, pc}
900014ec:	20000210 	.word	0x20000210

900014f0 <BSP_AUDIO_IN_Resume>:
{    
900014f0:	b508      	push	{r3, lr}
  HAL_SAI_DMAResume(&haudio_in_sai);
900014f2:	4802      	ldr	r0, [pc, #8]	; (900014fc <BSP_AUDIO_IN_Resume+0xc>)
900014f4:	f003 ffc7 	bl	90005486 <HAL_SAI_DMAResume>
}
900014f8:	2000      	movs	r0, #0
900014fa:	bd08      	pop	{r3, pc}
900014fc:	20000210 	.word	0x20000210

90001500 <BSP_AUDIO_IN_SetVolume>:
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
90001500:	4b07      	ldr	r3, [pc, #28]	; (90001520 <BSP_AUDIO_IN_SetVolume+0x20>)
90001502:	4601      	mov	r1, r0
90001504:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
{
90001508:	b510      	push	{r4, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
9000150a:	6a1b      	ldr	r3, [r3, #32]
{
9000150c:	4604      	mov	r4, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
9000150e:	2034      	movs	r0, #52	; 0x34
90001510:	4798      	blx	r3
90001512:	b918      	cbnz	r0, 9000151c <BSP_AUDIO_IN_SetVolume+0x1c>
    AudioInVolume = Volume;
90001514:	b2a4      	uxth	r4, r4
90001516:	4b03      	ldr	r3, [pc, #12]	; (90001524 <BSP_AUDIO_IN_SetVolume+0x24>)
90001518:	801c      	strh	r4, [r3, #0]
}
9000151a:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
9000151c:	2001      	movs	r0, #1
9000151e:	e7fc      	b.n	9000151a <BSP_AUDIO_IN_SetVolume+0x1a>
90001520:	2000018c 	.word	0x2000018c
90001524:	2000005c 	.word	0x2000005c

90001528 <HAL_SAI_RxCpltCallback>:
{
90001528:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
9000152a:	f00a f8bd 	bl	9000b6a8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
9000152e:	bd08      	pop	{r3, pc}

90001530 <HAL_SAI_RxHalfCpltCallback>:
{
90001530:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
90001532:	f00a f8db 	bl	9000b6ec <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
90001536:	bd08      	pop	{r3, pc}

90001538 <BSP_AUDIO_IN_Error_CallBack>:
90001538:	4770      	bx	lr
	...

9000153c <HAL_SAI_ErrorCallback>:
{
9000153c:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
9000153e:	480a      	ldr	r0, [pc, #40]	; (90001568 <HAL_SAI_ErrorCallback+0x2c>)
90001540:	f004 f904 	bl	9000574c <HAL_SAI_GetState>
90001544:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
90001546:	4809      	ldr	r0, [pc, #36]	; (9000156c <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
90001548:	f005 05ef 	and.w	r5, r5, #239	; 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
9000154c:	f004 f8fe 	bl	9000574c <HAL_SAI_GetState>
90001550:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
90001552:	2d02      	cmp	r5, #2
90001554:	d101      	bne.n	9000155a <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
90001556:	f7ff fe8b 	bl	90001270 <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
9000155a:	f004 04df 	and.w	r4, r4, #223	; 0xdf
9000155e:	2c02      	cmp	r4, #2
90001560:	d101      	bne.n	90001566 <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
90001562:	f7ff ffe9 	bl	90001538 <BSP_AUDIO_IN_Error_CallBack>
}
90001566:	bd38      	pop	{r3, r4, r5, pc}
90001568:	2000018c 	.word	0x2000018c
9000156c:	20000210 	.word	0x20000210

90001570 <BSP_AUDIO_IN_MspInit>:
{
90001570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
90001574:	4c3d      	ldr	r4, [pc, #244]	; (9000166c <BSP_AUDIO_IN_MspInit+0xfc>)
{
90001576:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001578:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
9000157a:	2500      	movs	r5, #0
  AUDIO_IN_SAIx_CLK_ENABLE();
9000157c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
9000157e:	f44f 6880 	mov.w	r8, #1024	; 0x400
{
90001582:	4606      	mov	r6, r0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
90001584:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
90001586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
9000158a:	4839      	ldr	r0, [pc, #228]	; (90001670 <BSP_AUDIO_IN_MspInit+0x100>)
  AUDIO_IN_SAIx_CLK_ENABLE();
9000158c:	6463      	str	r3, [r4, #68]	; 0x44
9000158e:	6c63      	ldr	r3, [r4, #68]	; 0x44
90001590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90001594:	9301      	str	r3, [sp, #4]
90001596:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
90001598:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000159a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000159e:	6323      	str	r3, [r4, #48]	; 0x30
900015a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
900015a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
900015a6:	9302      	str	r3, [sp, #8]
900015a8:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
900015aa:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900015ac:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
900015b0:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
900015b2:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
900015b6:	f001 fe4d 	bl	90003254 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
900015ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
900015bc:	a905      	add	r1, sp, #20
900015be:	482d      	ldr	r0, [pc, #180]	; (90001674 <BSP_AUDIO_IN_MspInit+0x104>)
  AUDIO_IN_INT_GPIO_ENABLE();
900015c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900015c4:	6323      	str	r3, [r4, #48]	; 0x30
900015c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
900015c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
900015cc:	9303      	str	r3, [sp, #12]
900015ce:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
900015d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
900015d4:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
900015d8:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
900015dc:	f001 fe3a 	bl	90003254 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
900015e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
900015e2:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
900015e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
900015e8:	6323      	str	r3, [r4, #48]	; 0x30
900015ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
900015ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900015f0:	9304      	str	r3, [sp, #16]
900015f2:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
900015f4:	4b20      	ldr	r3, [pc, #128]	; (90001678 <BSP_AUDIO_IN_MspInit+0x108>)
900015f6:	429a      	cmp	r2, r3
900015f8:	d125      	bne.n	90001646 <BSP_AUDIO_IN_MspInit+0xd6>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
900015fa:	4b20      	ldr	r3, [pc, #128]	; (9000167c <BSP_AUDIO_IN_MspInit+0x10c>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
900015fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
90001600:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
90001604:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
90001608:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
9000160c:	f8c3 5190 	str.w	r5, [r3, #400]	; 0x190
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
90001610:	f8c3 519c 	str.w	r5, [r3, #412]	; 0x19c
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
90001614:	6734      	str	r4, [r6, #112]	; 0x70
90001616:	f8c3 61a4 	str.w	r6, [r3, #420]	; 0x1a4
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
9000161a:	e9c3 1260 	strd	r1, r2, [r3, #384]	; 0x180
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
9000161e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
90001622:	e9c3 0262 	strd	r0, r2, [r3, #392]	; 0x188
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
90001626:	2203      	movs	r2, #3
    HAL_DMA_DeInit(&hdma_sai_rx);
90001628:	4620      	mov	r0, r4
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
9000162a:	e9c3 2565 	strd	r2, r5, [r3, #404]	; 0x194
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
9000162e:	4a14      	ldr	r2, [pc, #80]	; (90001680 <BSP_AUDIO_IN_MspInit+0x110>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
90001630:	e9c3 555c 	strd	r5, r5, [r3, #368]	; 0x170
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
90001634:	e9c3 585e 	strd	r5, r8, [r3, #376]	; 0x178
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
90001638:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    HAL_DMA_DeInit(&hdma_sai_rx);
9000163c:	f001 fb52 	bl	90002ce4 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
90001640:	4620      	mov	r0, r4
90001642:	f001 fad1 	bl	90002be8 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
90001646:	2200      	movs	r2, #0
90001648:	210f      	movs	r1, #15
9000164a:	2046      	movs	r0, #70	; 0x46
9000164c:	f001 fa62 	bl	90002b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
90001650:	2046      	movs	r0, #70	; 0x46
90001652:	f001 fa91 	bl	90002b78 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
90001656:	2200      	movs	r2, #0
90001658:	210f      	movs	r1, #15
9000165a:	2028      	movs	r0, #40	; 0x28
9000165c:	f001 fa5a 	bl	90002b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
90001660:	2028      	movs	r0, #40	; 0x28
90001662:	f001 fa89 	bl	90002b78 <HAL_NVIC_EnableIRQ>
}
90001666:	b00a      	add	sp, #40	; 0x28
90001668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000166c:	40023800 	.word	0x40023800
90001670:	40021800 	.word	0x40021800
90001674:	40021c00 	.word	0x40021c00
90001678:	40015c24 	.word	0x40015c24
9000167c:	2000018c 	.word	0x2000018c
90001680:	400264b8 	.word	0x400264b8

90001684 <BSP_AUDIO_IN_InitEx.part.0>:
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
90001684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90001686:	460c      	mov	r4, r1
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
90001688:	4d1e      	ldr	r5, [pc, #120]	; (90001704 <BSP_AUDIO_IN_InitEx.part.0+0x80>)
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
9000168a:	4606      	mov	r6, r0
    SAIx_In_DeInit();
9000168c:	f7ff fce2 	bl	90001054 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
90001690:	4621      	mov	r1, r4
90001692:	2200      	movs	r2, #0
90001694:	f105 0084 	add.w	r0, r5, #132	; 0x84
90001698:	f008 f9b4 	bl	90009a04 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
9000169c:	4628      	mov	r0, r5
9000169e:	4b1a      	ldr	r3, [pc, #104]	; (90001708 <BSP_AUDIO_IN_InitEx.part.0+0x84>)
900016a0:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
900016a4:	f004 f852 	bl	9000574c <HAL_SAI_GetState>
900016a8:	4601      	mov	r1, r0
900016aa:	b948      	cbnz	r0, 900016c0 <BSP_AUDIO_IN_InitEx.part.0+0x3c>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
900016ac:	9001      	str	r0, [sp, #4]
900016ae:	f105 0084 	add.w	r0, r5, #132	; 0x84
900016b2:	f7ff fddf 	bl	90001274 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
900016b6:	9901      	ldr	r1, [sp, #4]
900016b8:	f105 0084 	add.w	r0, r5, #132	; 0x84
900016bc:	f7ff ff58 	bl	90001570 <BSP_AUDIO_IN_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
900016c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
900016c4:	4f11      	ldr	r7, [pc, #68]	; (9000170c <BSP_AUDIO_IN_InitEx.part.0+0x88>)
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
900016c6:	4622      	mov	r2, r4
900016c8:	f04f 0001 	mov.w	r0, #1
900016cc:	bf0c      	ite	eq
900016ce:	210a      	moveq	r1, #10
900016d0:	2105      	movne	r1, #5
900016d2:	f7ff fcd1 	bl	90001078 <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
900016d6:	68bb      	ldr	r3, [r7, #8]
900016d8:	2034      	movs	r0, #52	; 0x34
900016da:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
900016dc:	f648 1394 	movw	r3, #35220	; 0x8994
900016e0:	4298      	cmp	r0, r3
900016e2:	d10d      	bne.n	90001700 <BSP_AUDIO_IN_InitEx.part.0+0x7c>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
900016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900016e6:	2034      	movs	r0, #52	; 0x34
900016e8:	4798      	blx	r3
      audio_drv = &wm8994_drv;
900016ea:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
900016ee:	4623      	mov	r3, r4
900016f0:	683d      	ldr	r5, [r7, #0]
900016f2:	2264      	movs	r2, #100	; 0x64
900016f4:	4631      	mov	r1, r6
900016f6:	2034      	movs	r0, #52	; 0x34
900016f8:	47a8      	blx	r5
      ret = AUDIO_OK;
900016fa:	2000      	movs	r0, #0
}
900016fc:	b003      	add	sp, #12
900016fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = AUDIO_ERROR;
90001700:	2001      	movs	r0, #1
90001702:	e7fb      	b.n	900016fc <BSP_AUDIO_IN_InitEx.part.0+0x78>
90001704:	2000018c 	.word	0x2000018c
90001708:	40015c24 	.word	0x40015c24
9000170c:	2000002c 	.word	0x2000002c

90001710 <BSP_AUDIO_IN_Init>:
{
90001710:	4601      	mov	r1, r0
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
90001712:	f44f 7000 	mov.w	r0, #512	; 0x200
90001716:	f7ff bfb5 	b.w	90001684 <BSP_AUDIO_IN_InitEx.part.0>
	...

9000171c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
9000171c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
90001720:	4c1a      	ldr	r4, [pc, #104]	; (9000178c <LL_FillBuffer+0x70>)
{
90001722:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
90001724:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
90001728:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000172a:	2234      	movs	r2, #52	; 0x34
{
9000172c:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
9000172e:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
90001730:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001732:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
{
90001736:	460e      	mov	r6, r1
90001738:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000173c:	fb02 4303 	mla	r3, r2, r3, r4
90001740:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
90001744:	1eab      	subs	r3, r5, #2
90001746:	425d      	negs	r5, r3
90001748:	415d      	adcs	r5, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
9000174a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000174c:	006d      	lsls	r5, r5, #1
  hDma2dHandler.Init.OutputOffset = OffLine;      
9000174e:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
90001750:	4b0f      	ldr	r3, [pc, #60]	; (90001790 <LL_FillBuffer+0x74>)
90001752:	60a5      	str	r5, [r4, #8]
90001754:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
90001756:	f001 fc72 	bl	9000303e <HAL_DMA2D_Init>
9000175a:	b9a0      	cbnz	r0, 90001786 <LL_FillBuffer+0x6a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
9000175c:	4649      	mov	r1, r9
9000175e:	4620      	mov	r0, r4
90001760:	f001 fd30 	bl	900031c4 <HAL_DMA2D_ConfigLayer>
90001764:	b978      	cbnz	r0, 90001786 <LL_FillBuffer+0x6a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90001766:	463b      	mov	r3, r7
90001768:	4632      	mov	r2, r6
9000176a:	4651      	mov	r1, sl
9000176c:	4620      	mov	r0, r4
9000176e:	f8cd 8000 	str.w	r8, [sp]
90001772:	f001 fc90 	bl	90003096 <HAL_DMA2D_Start>
90001776:	b930      	cbnz	r0, 90001786 <LL_FillBuffer+0x6a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90001778:	210a      	movs	r1, #10
9000177a:	4620      	mov	r0, r4
      }
    }
  } 
}
9000177c:	b002      	add	sp, #8
9000177e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90001782:	f001 bca2 	b.w	900030ca <HAL_DMA2D_PollForTransfer>
}
90001786:	b002      	add	sp, #8
90001788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000178c:	200003f8 	.word	0x200003f8
90001790:	4002b000 	.word	0x4002b000

90001794 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90001794:	4b04      	ldr	r3, [pc, #16]	; (900017a8 <BSP_LCD_GetXSize+0x14>)
90001796:	2134      	movs	r1, #52	; 0x34
90001798:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
9000179c:	fb01 3302 	mla	r3, r1, r2, r3
}
900017a0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
900017a4:	4770      	bx	lr
900017a6:	bf00      	nop
900017a8:	200003f8 	.word	0x200003f8

900017ac <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
900017ac:	4b04      	ldr	r3, [pc, #16]	; (900017c0 <BSP_LCD_GetYSize+0x14>)
900017ae:	2134      	movs	r1, #52	; 0x34
900017b0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
900017b4:	fb01 3302 	mla	r3, r1, r2, r3
}
900017b8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
900017bc:	4770      	bx	lr
900017be:	bf00      	nop
900017c0:	200003f8 	.word	0x200003f8

900017c4 <BSP_LCD_LayerDefaultInit>:
{     
900017c4:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
900017c6:	2400      	movs	r4, #0
{     
900017c8:	b08e      	sub	sp, #56	; 0x38
900017ca:	460e      	mov	r6, r1
900017cc:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
900017ce:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
900017d0:	f7ff ffe0 	bl	90001794 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
900017d4:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
900017d8:	f7ff ffe8 	bl	900017ac <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
900017dc:	23ff      	movs	r3, #255	; 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900017de:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  layer_cfg.Backcolor.Blue = 0;
900017e2:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
900017e6:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.FBStartAdress = FB_Address;
900017ea:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha0 = 0;
900017ec:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
900017f0:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900017f4:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
900017f6:	4c0f      	ldr	r4, [pc, #60]	; (90001834 <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900017f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
900017fc:	f7ff ffca 	bl	90001794 <BSP_LCD_GetXSize>
90001800:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90001802:	f7ff ffd3 	bl	900017ac <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90001806:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90001808:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
9000180a:	a901      	add	r1, sp, #4
9000180c:	f104 0040 	add.w	r0, r4, #64	; 0x40
90001810:	f002 fe74 	bl	900044fc <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
90001814:	230c      	movs	r3, #12
90001816:	fb03 4005 	mla	r0, r3, r5, r4
9000181a:	f04f 33ff 	mov.w	r3, #4294967295
9000181e:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
90001822:	4b05      	ldr	r3, [pc, #20]	; (90001838 <BSP_LCD_LayerDefaultInit+0x74>)
90001824:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
90001828:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000182c:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
}
90001830:	b00e      	add	sp, #56	; 0x38
90001832:	bd70      	pop	{r4, r5, r6, pc}
90001834:	200003f8 	.word	0x200003f8
90001838:	20000060 	.word	0x20000060

9000183c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
9000183c:	4b01      	ldr	r3, [pc, #4]	; (90001844 <BSP_LCD_SelectLayer+0x8>)
9000183e:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
} 
90001842:	4770      	bx	lr
90001844:	200003f8 	.word	0x200003f8

90001848 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
90001848:	4b04      	ldr	r3, [pc, #16]	; (9000185c <BSP_LCD_SetTextColor+0x14>)
9000184a:	210c      	movs	r1, #12
9000184c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001850:	fb01 3302 	mla	r3, r1, r2, r3
90001854:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
90001858:	4770      	bx	lr
9000185a:	bf00      	nop
9000185c:	200003f8 	.word	0x200003f8

90001860 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
90001860:	4b04      	ldr	r3, [pc, #16]	; (90001874 <BSP_LCD_SetBackColor+0x14>)
90001862:	210c      	movs	r1, #12
90001864:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001868:	fb01 3302 	mla	r3, r1, r2, r3
9000186c:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
90001870:	4770      	bx	lr
90001872:	bf00      	nop
90001874:	200003f8 	.word	0x200003f8

90001878 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
90001878:	4b04      	ldr	r3, [pc, #16]	; (9000188c <BSP_LCD_SetFont+0x14>)
9000187a:	210c      	movs	r1, #12
9000187c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001880:	fb01 3302 	mla	r3, r1, r2, r3
90001884:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
90001888:	4770      	bx	lr
9000188a:	bf00      	nop
9000188c:	200003f8 	.word	0x200003f8

90001890 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
90001890:	4b04      	ldr	r3, [pc, #16]	; (900018a4 <BSP_LCD_GetFont+0x14>)
90001892:	210c      	movs	r1, #12
90001894:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001898:	fb01 3302 	mla	r3, r1, r2, r3
}
9000189c:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
900018a0:	4770      	bx	lr
900018a2:	bf00      	nop
900018a4:	200003f8 	.word	0x200003f8

900018a8 <BSP_LCD_Clear>:
{ 
900018a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
900018aa:	4c0c      	ldr	r4, [pc, #48]	; (900018dc <BSP_LCD_Clear+0x34>)
{ 
900018ac:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
900018ae:	f7ff ff71 	bl	90001794 <BSP_LCD_GetXSize>
900018b2:	9003      	str	r0, [sp, #12]
900018b4:	f8d4 60e8 	ldr.w	r6, [r4, #232]	; 0xe8
900018b8:	f7ff ff78 	bl	900017ac <BSP_LCD_GetYSize>
900018bc:	2134      	movs	r1, #52	; 0x34
900018be:	4603      	mov	r3, r0
900018c0:	9501      	str	r5, [sp, #4]
900018c2:	4630      	mov	r0, r6
900018c4:	fb01 4406 	mla	r4, r1, r6, r4
900018c8:	2100      	movs	r1, #0
900018ca:	9a03      	ldr	r2, [sp, #12]
900018cc:	9100      	str	r1, [sp, #0]
900018ce:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
900018d2:	f7ff ff23 	bl	9000171c <LL_FillBuffer>
}
900018d6:	b004      	add	sp, #16
900018d8:	bd70      	pop	{r4, r5, r6, pc}
900018da:	bf00      	nop
900018dc:	200003f8 	.word	0x200003f8

900018e0 <BSP_LCD_DrawHLine>:
{
900018e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900018e4:	4e14      	ldr	r6, [pc, #80]	; (90001938 <BSP_LCD_DrawHLine+0x58>)
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
900018e6:	2734      	movs	r7, #52	; 0x34
{
900018e8:	b085      	sub	sp, #20
900018ea:	4689      	mov	r9, r1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900018ec:	f8d6 80e8 	ldr.w	r8, [r6, #232]	; 0xe8
{
900018f0:	4605      	mov	r5, r0
900018f2:	9203      	str	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
900018f4:	f7ff ff4e 	bl	90001794 <BSP_LCD_GetXSize>
900018f8:	fb07 6708 	mla	r7, r7, r8, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900018fc:	9a03      	ldr	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
900018fe:	fb00 5009 	mla	r0, r0, r9, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001902:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001906:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000190a:	2b02      	cmp	r3, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
9000190c:	f04f 030c 	mov.w	r3, #12
90001910:	fb03 6308 	mla	r3, r3, r8, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001914:	bf0c      	ite	eq
90001916:	eb04 0140 	addeq.w	r1, r4, r0, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
9000191a:	eb04 0180 	addne.w	r1, r4, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
9000191e:	4640      	mov	r0, r8
90001920:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
90001924:	9301      	str	r3, [sp, #4]
90001926:	2300      	movs	r3, #0
90001928:	9300      	str	r3, [sp, #0]
9000192a:	2301      	movs	r3, #1
9000192c:	f7ff fef6 	bl	9000171c <LL_FillBuffer>
}
90001930:	b005      	add	sp, #20
90001932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90001936:	bf00      	nop
90001938:	200003f8 	.word	0x200003f8

9000193c <BSP_LCD_DrawVLine>:
{
9000193c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001940:	4d14      	ldr	r5, [pc, #80]	; (90001994 <BSP_LCD_DrawVLine+0x58>)
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001942:	f04f 0834 	mov.w	r8, #52	; 0x34
{
90001946:	b085      	sub	sp, #20
90001948:	4607      	mov	r7, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000194a:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
{
9000194e:	4689      	mov	r9, r1
90001950:	9203      	str	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001952:	f7ff ff1f 	bl	90001794 <BSP_LCD_GetXSize>
90001956:	fb08 5806 	mla	r8, r8, r6, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000195a:	9b03      	ldr	r3, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
9000195c:	fb00 7109 	mla	r1, r0, r9, r7
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
90001960:	3801      	subs	r0, #1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001962:	f8d8 2088 	ldr.w	r2, [r8, #136]	; 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001966:	f8d8 409c 	ldr.w	r4, [r8, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000196a:	2a02      	cmp	r2, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
9000196c:	f04f 020c 	mov.w	r2, #12
90001970:	fb02 5506 	mla	r5, r2, r6, r5
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001974:	bf0c      	ite	eq
90001976:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
9000197a:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
9000197e:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
90001982:	9000      	str	r0, [sp, #0]
90001984:	4630      	mov	r0, r6
90001986:	9201      	str	r2, [sp, #4]
90001988:	2201      	movs	r2, #1
9000198a:	f7ff fec7 	bl	9000171c <LL_FillBuffer>
}
9000198e:	b005      	add	sp, #20
90001990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90001994:	200003f8 	.word	0x200003f8

90001998 <BSP_LCD_DrawRect>:
{
90001998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000199a:	461e      	mov	r6, r3
9000199c:	460d      	mov	r5, r1
9000199e:	4604      	mov	r4, r0
900019a0:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
900019a2:	f7ff ff9d 	bl	900018e0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
900019a6:	19a9      	adds	r1, r5, r6
900019a8:	463a      	mov	r2, r7
900019aa:	4620      	mov	r0, r4
900019ac:	b289      	uxth	r1, r1
900019ae:	f7ff ff97 	bl	900018e0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
900019b2:	4632      	mov	r2, r6
900019b4:	4629      	mov	r1, r5
900019b6:	4620      	mov	r0, r4
900019b8:	f7ff ffc0 	bl	9000193c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
900019bc:	19e0      	adds	r0, r4, r7
900019be:	4632      	mov	r2, r6
900019c0:	4629      	mov	r1, r5
900019c2:	b280      	uxth	r0, r0
}
900019c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
900019c8:	f7ff bfb8 	b.w	9000193c <BSP_LCD_DrawVLine>

900019cc <BSP_LCD_DrawPixel>:
{
900019cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900019d0:	4d0d      	ldr	r5, [pc, #52]	; (90001a08 <BSP_LCD_DrawPixel+0x3c>)
{
900019d2:	4614      	mov	r4, r2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
900019d4:	2234      	movs	r2, #52	; 0x34
{
900019d6:	4606      	mov	r6, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900019d8:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
{
900019dc:	460f      	mov	r7, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
900019de:	fb02 5503 	mla	r5, r2, r3, r5
900019e2:	f7ff fed7 	bl	90001794 <BSP_LCD_GetXSize>
900019e6:	fb00 6007 	mla	r0, r0, r7, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900019ea:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
900019ee:	f8d5 809c 	ldr.w	r8, [r5, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900019f2:	2b02      	cmp	r3, #2
900019f4:	d104      	bne.n	90001a00 <BSP_LCD_DrawPixel+0x34>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
900019f6:	b2a4      	uxth	r4, r4
900019f8:	f828 4010 	strh.w	r4, [r8, r0, lsl #1]
}
900019fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
90001a00:	f848 4020 	str.w	r4, [r8, r0, lsl #2]
}
90001a04:	e7fa      	b.n	900019fc <BSP_LCD_DrawPixel+0x30>
90001a06:	bf00      	nop
90001a08:	200003f8 	.word	0x200003f8

90001a0c <BSP_LCD_DisplayChar>:
{
90001a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90001a10:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90001a12:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
90001a14:	f04f 0800 	mov.w	r8, #0
{
90001a18:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90001a1c:	4929      	ldr	r1, [pc, #164]	; (90001ac4 <BSP_LCD_DisplayChar+0xb8>)
90001a1e:	200c      	movs	r0, #12
90001a20:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	; 0xe8
90001a24:	fb00 110b 	mla	r1, r0, fp, r1
90001a28:	f8d1 10f4 	ldr.w	r1, [r1, #244]	; 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90001a2c:	f8b1 9004 	ldrh.w	r9, [r1, #4]
90001a30:	f8b1 a006 	ldrh.w	sl, [r1, #6]
90001a34:	f109 0607 	add.w	r6, r9, #7
90001a38:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90001a3a:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90001a3e:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
90001a40:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
90001a44:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
90001a48:	f109 32ff 	add.w	r2, r9, #4294967295
90001a4c:	fa52 f380 	uxtab	r3, r2, r0
90001a50:	9302      	str	r3, [sp, #8]
90001a52:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
90001a54:	45d0      	cmp	r8, sl
90001a56:	eb03 0108 	add.w	r1, r3, r8
90001a5a:	b289      	uxth	r1, r1
90001a5c:	d302      	bcc.n	90001a64 <BSP_LCD_DisplayChar+0x58>
}
90001a5e:	b005      	add	sp, #20
90001a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
90001a64:	2e01      	cmp	r6, #1
      line =  pchar[0];      
90001a66:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
90001a68:	d004      	beq.n	90001a74 <BSP_LCD_DisplayChar+0x68>
90001a6a:	2e02      	cmp	r6, #2
90001a6c:	d109      	bne.n	90001a82 <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
90001a6e:	882c      	ldrh	r4, [r5, #0]
90001a70:	ba64      	rev16	r4, r4
90001a72:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
90001a74:	2700      	movs	r7, #0
90001a76:	45b9      	cmp	r9, r7
90001a78:	d80a      	bhi.n	90001a90 <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
90001a7a:	f108 0801 	add.w	r8, r8, #1
90001a7e:	4435      	add	r5, r6
90001a80:	e7e7      	b.n	90001a52 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
90001a82:	786a      	ldrb	r2, [r5, #1]
90001a84:	0424      	lsls	r4, r4, #16
90001a86:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
90001a8a:	78aa      	ldrb	r2, [r5, #2]
90001a8c:	4314      	orrs	r4, r2
      break;
90001a8e:	e7f1      	b.n	90001a74 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
90001a90:	9b00      	ldr	r3, [sp, #0]
90001a92:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
90001a94:	9103      	str	r1, [sp, #12]
90001a96:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
90001a98:	9b02      	ldr	r3, [sp, #8]
90001a9a:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
90001a9e:	4b09      	ldr	r3, [pc, #36]	; (90001ac4 <BSP_LCD_DisplayChar+0xb8>)
90001aa0:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
90001aa2:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
90001aa4:	fa02 f20c 	lsl.w	r2, r2, ip
90001aa8:	4222      	tst	r2, r4
90001aaa:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
90001aae:	fb02 320b 	mla	r2, r2, fp, r3
90001ab2:	bf14      	ite	ne
90001ab4:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
90001ab8:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
90001abc:	f7ff ff86 	bl	900019cc <BSP_LCD_DrawPixel>
90001ac0:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
90001ac2:	e7d8      	b.n	90001a76 <BSP_LCD_DisplayChar+0x6a>
90001ac4:	200003f8 	.word	0x200003f8

90001ac8 <BSP_LCD_DisplayStringAt>:
{
90001ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90001acc:	4699      	mov	r9, r3
90001ace:	4605      	mov	r5, r0
90001ad0:	460f      	mov	r7, r1
90001ad2:	4616      	mov	r6, r2
  uint8_t  *ptr = Text;
90001ad4:	4613      	mov	r3, r2
90001ad6:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
90001ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
90001adc:	2a00      	cmp	r2, #0
90001ade:	d1fa      	bne.n	90001ad6 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90001ae0:	f7ff fe58 	bl	90001794 <BSP_LCD_GetXSize>
90001ae4:	4b22      	ldr	r3, [pc, #136]	; (90001b70 <BSP_LCD_DisplayStringAt+0xa8>)
90001ae6:	210c      	movs	r1, #12
  switch (Mode)
90001ae8:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90001aec:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001af0:	fb01 3302 	mla	r3, r1, r2, r3
90001af4:	f8d3 80f4 	ldr.w	r8, [r3, #244]	; 0xf4
90001af8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
90001afc:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
90001b00:	d01d      	beq.n	90001b3e <BSP_LCD_DisplayStringAt+0x76>
90001b02:	f1b9 0f02 	cmp.w	r9, #2
90001b06:	d021      	beq.n	90001b4c <BSP_LCD_DisplayStringAt+0x84>
  if ((ref_column < 1) || (ref_column >= 0x8000))
90001b08:	b22b      	sxth	r3, r5
    ref_column = 1;
90001b0a:	2400      	movs	r4, #0
90001b0c:	2b00      	cmp	r3, #0
90001b0e:	bfd8      	it	le
90001b10:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
90001b12:	f7ff fe3f 	bl	90001794 <BSP_LCD_GetXSize>
90001b16:	f8b8 3004 	ldrh.w	r3, [r8, #4]
90001b1a:	b2a2      	uxth	r2, r4
90001b1c:	f816 9004 	ldrb.w	r9, [r6, r4]
90001b20:	3401      	adds	r4, #1
90001b22:	fb03 0012 	mls	r0, r3, r2, r0
90001b26:	b280      	uxth	r0, r0
90001b28:	4298      	cmp	r0, r3
90001b2a:	bf34      	ite	cc
90001b2c:	2000      	movcc	r0, #0
90001b2e:	2001      	movcs	r0, #1
90001b30:	f1b9 0f00 	cmp.w	r9, #0
90001b34:	bf08      	it	eq
90001b36:	2000      	moveq	r0, #0
90001b38:	b978      	cbnz	r0, 90001b5a <BSP_LCD_DisplayStringAt+0x92>
}
90001b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
90001b3e:	1b34      	subs	r4, r6, r4
90001b40:	4404      	add	r4, r0
90001b42:	435c      	muls	r4, r3
90001b44:	eb05 0454 	add.w	r4, r5, r4, lsr #1
90001b48:	b2a5      	uxth	r5, r4
      break;
90001b4a:	e7dd      	b.n	90001b08 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
90001b4c:	1b34      	subs	r4, r6, r4
90001b4e:	4404      	add	r4, r0
90001b50:	fb14 f403 	smulbb	r4, r4, r3
90001b54:	1b60      	subs	r0, r4, r5
90001b56:	b285      	uxth	r5, r0
      break;
90001b58:	e7d6      	b.n	90001b08 <BSP_LCD_DisplayStringAt+0x40>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
90001b5a:	4628      	mov	r0, r5
90001b5c:	464a      	mov	r2, r9
90001b5e:	4639      	mov	r1, r7
90001b60:	f7ff ff54 	bl	90001a0c <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
90001b64:	f8b8 3004 	ldrh.w	r3, [r8, #4]
90001b68:	442b      	add	r3, r5
90001b6a:	b29d      	uxth	r5, r3
    i++;
90001b6c:	e7d1      	b.n	90001b12 <BSP_LCD_DisplayStringAt+0x4a>
90001b6e:	bf00      	nop
90001b70:	200003f8 	.word	0x200003f8

90001b74 <BSP_LCD_DisplayStringAtLine>:
{  
90001b74:	b513      	push	{r0, r1, r4, lr}
90001b76:	4604      	mov	r4, r0
90001b78:	9101      	str	r1, [sp, #4]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
90001b7a:	f7ff fe89 	bl	90001890 <BSP_LCD_GetFont>
90001b7e:	88c3      	ldrh	r3, [r0, #6]
90001b80:	9a01      	ldr	r2, [sp, #4]
90001b82:	2000      	movs	r0, #0
90001b84:	fb13 f104 	smulbb	r1, r3, r4
90001b88:	2303      	movs	r3, #3
90001b8a:	b289      	uxth	r1, r1
}
90001b8c:	b002      	add	sp, #8
90001b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
90001b92:	f7ff bf99 	b.w	90001ac8 <BSP_LCD_DisplayStringAt>
	...

90001b98 <BSP_LCD_DrawLine>:
{
90001b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001b9c:	1a14      	subs	r4, r2, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001b9e:	1a5e      	subs	r6, r3, r1
{
90001ba0:	b085      	sub	sp, #20
  x = x1;                       /* Start x off at the first pixel */
90001ba2:	fa0f f980 	sxth.w	r9, r0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001ba6:	2c00      	cmp	r4, #0
  y = y1;                       /* Start y off at the first pixel */
90001ba8:	fa0f fa81 	sxth.w	sl, r1
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001bac:	bfb8      	it	lt
90001bae:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001bb0:	2e00      	cmp	r6, #0
90001bb2:	bfb8      	it	lt
90001bb4:	4276      	neglt	r6, r6
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001bb6:	b224      	sxth	r4, r4
    xinc1 = -1;
90001bb8:	4282      	cmp	r2, r0
90001bba:	bf2c      	ite	cs
90001bbc:	2701      	movcs	r7, #1
90001bbe:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
90001bc2:	428b      	cmp	r3, r1
90001bc4:	bf2c      	ite	cs
90001bc6:	f04f 0801 	movcs.w	r8, #1
90001bca:	f04f 38ff 	movcc.w	r8, #4294967295
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001bce:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
90001bd0:	42b4      	cmp	r4, r6
90001bd2:	db0f      	blt.n	90001bf4 <BSP_LCD_DrawLine+0x5c>
    num = deltax / 2;
90001bd4:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
90001bd8:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
90001bda:	2700      	movs	r7, #0
    num = deltax / 2;
90001bdc:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
90001bde:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
90001be0:	f04f 0b00 	mov.w	fp, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
90001be4:	4b20      	ldr	r3, [pc, #128]	; (90001c68 <BSP_LCD_DrawLine+0xd0>)
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
90001be6:	fa0f f28b 	sxth.w	r2, fp
90001bea:	4294      	cmp	r4, r2
90001bec:	da10      	bge.n	90001c10 <BSP_LCD_DrawLine+0x78>
}
90001bee:	b005      	add	sp, #20
90001bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
90001bf4:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
90001bf8:	4623      	mov	r3, r4
90001bfa:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
90001bfe:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
90001c02:	4634      	mov	r4, r6
90001c04:	f345 054f 	sbfx	r5, r5, #1, #16
90001c08:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
90001c0a:	f8cd 8000 	str.w	r8, [sp]
90001c0e:	e7e7      	b.n	90001be0 <BSP_LCD_DrawLine+0x48>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
90001c10:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001c14:	f04f 0c0c 	mov.w	ip, #12
90001c18:	fa1f f089 	uxth.w	r0, r9
    num += num_add;                            /* Increase the numerator by the top of the fraction */
90001c1c:	4435      	add	r5, r6
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
90001c1e:	fb0c 3202 	mla	r2, ip, r2, r3
90001c22:	fa1f f18a 	uxth.w	r1, sl
90001c26:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
90001c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
90001c2e:	f7ff fecd 	bl	900019cc <BSP_LCD_DrawPixel>
    if (num >= den)                           /* Check if numerator >= denominator */
90001c32:	4b0d      	ldr	r3, [pc, #52]	; (90001c68 <BSP_LCD_DrawLine+0xd0>)
    num += num_add;                            /* Increase the numerator by the top of the fraction */
90001c34:	b2aa      	uxth	r2, r5
90001c36:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
90001c38:	42ac      	cmp	r4, r5
90001c3a:	dc09      	bgt.n	90001c50 <BSP_LCD_DrawLine+0xb8>
      x += xinc1;                             /* Change the x as appropriate */
90001c3c:	9802      	ldr	r0, [sp, #8]
      num -= den;                             /* Calculate the new numerator value */
90001c3e:	1b12      	subs	r2, r2, r4
      y += yinc1;                             /* Change the y as appropriate */
90001c40:	9903      	ldr	r1, [sp, #12]
      x += xinc1;                             /* Change the x as appropriate */
90001c42:	4438      	add	r0, r7
      num -= den;                             /* Calculate the new numerator value */
90001c44:	b215      	sxth	r5, r2
      y += yinc1;                             /* Change the y as appropriate */
90001c46:	4441      	add	r1, r8
      x += xinc1;                             /* Change the x as appropriate */
90001c48:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;                             /* Change the y as appropriate */
90001c4c:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                               /* Change the x as appropriate */
90001c50:	9a00      	ldr	r2, [sp, #0]
90001c52:	f10b 0b01 	add.w	fp, fp, #1
90001c56:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
90001c58:	9a01      	ldr	r2, [sp, #4]
90001c5a:	4492      	add	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
90001c5c:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
90001c60:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
90001c64:	e7bf      	b.n	90001be6 <BSP_LCD_DrawLine+0x4e>
90001c66:	bf00      	nop
90001c68:	200003f8 	.word	0x200003f8

90001c6c <FillTriangle>:
{ 
90001c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90001c70:	b087      	sub	sp, #28
90001c72:	461d      	mov	r5, r3
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001c74:	1a0c      	subs	r4, r1, r0
  x = x1;                       /* Start x off at the first pixel */
90001c76:	fa0f f980 	sxth.w	r9, r0
{ 
90001c7a:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
  y = y1;                       /* Start y off at the first pixel */
90001c7e:	fa0f fa85 	sxth.w	sl, r5
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001c82:	2c00      	cmp	r4, #0
{ 
90001c84:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001c88:	eba8 0605 	sub.w	r6, r8, r5
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001c8c:	bfb8      	it	lt
90001c8e:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001c90:	2e00      	cmp	r6, #0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001c92:	b224      	sxth	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001c94:	bfb8      	it	lt
90001c96:	4276      	neglt	r6, r6
    xinc1 = -1;
90001c98:	4281      	cmp	r1, r0
90001c9a:	bf2c      	ite	cs
90001c9c:	2701      	movcs	r7, #1
90001c9e:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
90001ca2:	45a8      	cmp	r8, r5
90001ca4:	bf2c      	ite	cs
90001ca6:	f04f 0801 	movcs.w	r8, #1
90001caa:	f04f 38ff 	movcc.w	r8, #4294967295
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001cae:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
90001cb0:	42b4      	cmp	r4, r6
90001cb2:	db0e      	blt.n	90001cd2 <FillTriangle+0x66>
    num = deltax / 2;
90001cb4:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
90001cb8:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
90001cba:	2700      	movs	r7, #0
    num = deltax / 2;
90001cbc:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
90001cbe:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
90001cc0:	f04f 0b00 	mov.w	fp, #0
90001cc4:	fa0f f18b 	sxth.w	r1, fp
90001cc8:	428c      	cmp	r4, r1
90001cca:	da10      	bge.n	90001cee <FillTriangle+0x82>
}
90001ccc:	b007      	add	sp, #28
90001cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
90001cd2:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
90001cd6:	4621      	mov	r1, r4
90001cd8:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
90001cdc:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
90001ce0:	4634      	mov	r4, r6
90001ce2:	f345 054f 	sbfx	r5, r5, #1, #16
90001ce6:	460e      	mov	r6, r1
    xinc2 = 0;                  /* Don't change the x for every iteration */
90001ce8:	f8cd 8000 	str.w	r8, [sp]
90001cec:	e7e8      	b.n	90001cc0 <FillTriangle+0x54>
    BSP_LCD_DrawLine(x, y, x3, y3);
90001cee:	fa1f f089 	uxth.w	r0, r9
    num += num_add;              /* Increase the numerator by the top of the fraction */
90001cf2:	4435      	add	r5, r6
    BSP_LCD_DrawLine(x, y, x3, y3);
90001cf4:	fa1f f18a 	uxth.w	r1, sl
90001cf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
90001cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
90001d00:	f7ff ff4a 	bl	90001b98 <BSP_LCD_DrawLine>
    num += num_add;              /* Increase the numerator by the top of the fraction */
90001d04:	fa1f fc85 	uxth.w	ip, r5
90001d08:	b22d      	sxth	r5, r5
    if (num >= den)             /* Check if numerator >= denominator */
90001d0a:	42ac      	cmp	r4, r5
90001d0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
90001d10:	dc0a      	bgt.n	90001d28 <FillTriangle+0xbc>
      x += xinc1;               /* Change the x as appropriate */
90001d12:	9802      	ldr	r0, [sp, #8]
      num -= den;               /* Calculate the new numerator value */
90001d14:	ebac 0504 	sub.w	r5, ip, r4
      y += yinc1;               /* Change the y as appropriate */
90001d18:	9903      	ldr	r1, [sp, #12]
      x += xinc1;               /* Change the x as appropriate */
90001d1a:	4438      	add	r0, r7
      num -= den;               /* Calculate the new numerator value */
90001d1c:	b22d      	sxth	r5, r5
      y += yinc1;               /* Change the y as appropriate */
90001d1e:	4441      	add	r1, r8
      x += xinc1;               /* Change the x as appropriate */
90001d20:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;               /* Change the y as appropriate */
90001d24:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
90001d28:	9900      	ldr	r1, [sp, #0]
90001d2a:	f10b 0b01 	add.w	fp, fp, #1
90001d2e:	4489      	add	r9, r1
    y += yinc2;                 /* Change the y as appropriate */
90001d30:	9901      	ldr	r1, [sp, #4]
90001d32:	448a      	add	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
90001d34:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                 /* Change the y as appropriate */
90001d38:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
90001d3c:	e7c2      	b.n	90001cc4 <FillTriangle+0x58>
	...

90001d40 <BSP_LCD_DrawCircle>:
{
90001d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
90001d44:	0054      	lsls	r4, r2, #1
{
90001d46:	b087      	sub	sp, #28
90001d48:	4688      	mov	r8, r1
  current_y = Radius;
90001d4a:	4615      	mov	r5, r2
  decision = 3 - (Radius << 1);
90001d4c:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
90001d50:	2700      	movs	r7, #0
{
90001d52:	9001      	str	r0, [sp, #4]
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
90001d54:	4835      	ldr	r0, [pc, #212]	; (90001e2c <BSP_LCD_DrawCircle+0xec>)
90001d56:	f04f 0c0c 	mov.w	ip, #12
90001d5a:	9b01      	ldr	r3, [sp, #4]
90001d5c:	b2ae      	uxth	r6, r5
90001d5e:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
90001d62:	fa1f f987 	uxth.w	r9, r7
90001d66:	fa13 f387 	uxtah	r3, r3, r7
90001d6a:	eba8 0106 	sub.w	r1, r8, r6
90001d6e:	fb0c 0202 	mla	r2, ip, r2, r0
90001d72:	b29b      	uxth	r3, r3
90001d74:	b289      	uxth	r1, r1
90001d76:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
90001d7a:	4618      	mov	r0, r3
90001d7c:	9305      	str	r3, [sp, #20]
90001d7e:	e9cd 2103 	strd	r2, r1, [sp, #12]
90001d82:	f7ff fe23 	bl	900019cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
90001d86:	9b01      	ldr	r3, [sp, #4]
90001d88:	f8cd 9008 	str.w	r9, [sp, #8]
90001d8c:	eba3 0b09 	sub.w	fp, r3, r9
90001d90:	fa1f fb8b 	uxth.w	fp, fp
90001d94:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90001d98:	4658      	mov	r0, fp
90001d9a:	f7ff fe17 	bl	900019cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90001d9e:	9b01      	ldr	r3, [sp, #4]
90001da0:	9a03      	ldr	r2, [sp, #12]
90001da2:	eb06 0a03 	add.w	sl, r6, r3
90001da6:	9b02      	ldr	r3, [sp, #8]
90001da8:	eba8 0103 	sub.w	r1, r8, r3
90001dac:	fa1f fa8a 	uxth.w	sl, sl
90001db0:	b289      	uxth	r1, r1
90001db2:	4650      	mov	r0, sl
90001db4:	9104      	str	r1, [sp, #16]
90001db6:	f7ff fe09 	bl	900019cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90001dba:	9b01      	ldr	r3, [sp, #4]
90001dbc:	eba3 0906 	sub.w	r9, r3, r6
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90001dc0:	4446      	add	r6, r8
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90001dc2:	fa1f f989 	uxth.w	r9, r9
90001dc6:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90001dca:	4648      	mov	r0, r9
90001dcc:	f7ff fdfe 	bl	900019cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90001dd0:	9b05      	ldr	r3, [sp, #20]
90001dd2:	b2b1      	uxth	r1, r6
90001dd4:	9a03      	ldr	r2, [sp, #12]
90001dd6:	4618      	mov	r0, r3
90001dd8:	9104      	str	r1, [sp, #16]
90001dda:	f7ff fdf7 	bl	900019cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90001dde:	4658      	mov	r0, fp
90001de0:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90001de4:	f7ff fdf2 	bl	900019cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
90001de8:	9b02      	ldr	r3, [sp, #8]
90001dea:	9a03      	ldr	r2, [sp, #12]
90001dec:	4650      	mov	r0, sl
90001dee:	eb03 0108 	add.w	r1, r3, r8
90001df2:	b289      	uxth	r1, r1
90001df4:	9102      	str	r1, [sp, #8]
90001df6:	f7ff fde9 	bl	900019cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
90001dfa:	4648      	mov	r0, r9
90001dfc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90001e00:	f7ff fde4 	bl	900019cc <BSP_LCD_DrawPixel>
    if (decision < 0)
90001e04:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
90001e06:	bfb1      	iteee	lt
90001e08:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
90001e0a:	1b7b      	subge	r3, r7, r5
90001e0c:	340a      	addge	r4, #10
      current_y--;
90001e0e:	f105 35ff 	addge.w	r5, r5, #4294967295
      decision += (current_x << 2) + 6;
90001e12:	bfb8      	it	lt
90001e14:	eb04 0487 	addlt.w	r4, r4, r7, lsl #2
    current_x++;
90001e18:	f107 0701 	add.w	r7, r7, #1
      decision += ((current_x - current_y) << 2) + 10;
90001e1c:	bfa8      	it	ge
90001e1e:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
90001e22:	42bd      	cmp	r5, r7
90001e24:	d296      	bcs.n	90001d54 <BSP_LCD_DrawCircle+0x14>
}
90001e26:	b007      	add	sp, #28
90001e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001e2c:	200003f8 	.word	0x200003f8

90001e30 <BSP_LCD_FillRect>:
{
90001e30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001e34:	4d1b      	ldr	r5, [pc, #108]	; (90001ea4 <BSP_LCD_FillRect+0x74>)
{
90001e36:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001e38:	230c      	movs	r3, #12
{
90001e3a:	4604      	mov	r4, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001e3c:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
{
90001e40:	4617      	mov	r7, r2
90001e42:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001e44:	fb03 5306 	mla	r3, r3, r6, r5
90001e48:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
90001e4c:	f7ff fcfc 	bl	90001848 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001e50:	2334      	movs	r3, #52	; 0x34
90001e52:	fb03 5306 	mla	r3, r3, r6, r5
90001e56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
90001e5a:	f8d3 a09c 	ldr.w	sl, [r3, #156]	; 0x9c
90001e5e:	2a02      	cmp	r2, #2
90001e60:	d118      	bne.n	90001e94 <BSP_LCD_FillRect+0x64>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001e62:	f7ff fc97 	bl	90001794 <BSP_LCD_GetXSize>
90001e66:	fb00 4009 	mla	r0, r0, r9, r4
90001e6a:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
90001e6e:	f7ff fc91 	bl	90001794 <BSP_LCD_GetXSize>
90001e72:	230c      	movs	r3, #12
90001e74:	1bc0      	subs	r0, r0, r7
90001e76:	463a      	mov	r2, r7
90001e78:	fb03 5106 	mla	r1, r3, r6, r5
90001e7c:	f8d1 30ec 	ldr.w	r3, [r1, #236]	; 0xec
90001e80:	4651      	mov	r1, sl
90001e82:	9000      	str	r0, [sp, #0]
90001e84:	4630      	mov	r0, r6
90001e86:	9301      	str	r3, [sp, #4]
90001e88:	4643      	mov	r3, r8
90001e8a:	f7ff fc47 	bl	9000171c <LL_FillBuffer>
}
90001e8e:	b002      	add	sp, #8
90001e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001e94:	f7ff fc7e 	bl	90001794 <BSP_LCD_GetXSize>
90001e98:	fb00 4109 	mla	r1, r0, r9, r4
90001e9c:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
90001ea0:	e7e5      	b.n	90001e6e <BSP_LCD_FillRect+0x3e>
90001ea2:	bf00      	nop
90001ea4:	200003f8 	.word	0x200003f8

90001ea8 <BSP_LCD_ClearStringLine>:
{
90001ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
90001eaa:	4c12      	ldr	r4, [pc, #72]	; (90001ef4 <BSP_LCD_ClearStringLine+0x4c>)
90001eac:	260c      	movs	r6, #12
90001eae:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
90001eb2:	fb06 4303 	mla	r3, r6, r3, r4
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
90001eb6:	e9d3 523b 	ldrd	r5, r2, [r3, #236]	; 0xec
90001eba:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
90001ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001ec2:	88df      	ldrh	r7, [r3, #6]
90001ec4:	fb10 f007 	smulbb	r0, r0, r7
90001ec8:	b281      	uxth	r1, r0
90001eca:	9101      	str	r1, [sp, #4]
90001ecc:	f7ff fc62 	bl	90001794 <BSP_LCD_GetXSize>
90001ed0:	463b      	mov	r3, r7
90001ed2:	b282      	uxth	r2, r0
90001ed4:	9901      	ldr	r1, [sp, #4]
90001ed6:	2000      	movs	r0, #0
90001ed8:	f7ff ffaa 	bl	90001e30 <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = color_backup;
90001edc:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
90001ee0:	4628      	mov	r0, r5
  DrawProp[ActiveLayer].TextColor = color_backup;
90001ee2:	fb06 4403 	mla	r4, r6, r3, r4
90001ee6:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
90001eea:	b003      	add	sp, #12
90001eec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
90001ef0:	f7ff bcaa 	b.w	90001848 <BSP_LCD_SetTextColor>
90001ef4:	200003f8 	.word	0x200003f8

90001ef8 <BSP_LCD_FillCircle>:
{
90001ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001efc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 90001fc4 <BSP_LCD_FillCircle+0xcc>
  decision = 3 - (Radius << 1);
90001f00:	0054      	lsls	r4, r2, #1
{
90001f02:	4691      	mov	r9, r2
  current_y = Radius;
90001f04:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001f06:	f8da 30e8 	ldr.w	r3, [sl, #232]	; 0xe8
90001f0a:	220c      	movs	r2, #12
  decision = 3 - (Radius << 1);
90001f0c:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
90001f10:	2500      	movs	r5, #0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001f12:	fb02 a303 	mla	r3, r2, r3, sl
{
90001f16:	4680      	mov	r8, r0
90001f18:	460e      	mov	r6, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001f1a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
90001f1e:	f7ff fc93 	bl	90001848 <BSP_LCD_SetTextColor>
    if(current_y > 0) 
90001f22:	b1af      	cbz	r7, 90001f50 <BSP_LCD_FillCircle+0x58>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
90001f24:	b2ba      	uxth	r2, r7
90001f26:	fa16 f185 	uxtah	r1, r6, r5
90001f2a:	fa1f fb85 	uxth.w	fp, r5
90001f2e:	eba8 0002 	sub.w	r0, r8, r2
90001f32:	0052      	lsls	r2, r2, #1
90001f34:	b289      	uxth	r1, r1
90001f36:	b280      	uxth	r0, r0
90001f38:	b292      	uxth	r2, r2
90001f3a:	9000      	str	r0, [sp, #0]
90001f3c:	9201      	str	r2, [sp, #4]
90001f3e:	f7ff fccf 	bl	900018e0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
90001f42:	eba6 010b 	sub.w	r1, r6, fp
90001f46:	9a01      	ldr	r2, [sp, #4]
90001f48:	9800      	ldr	r0, [sp, #0]
90001f4a:	b289      	uxth	r1, r1
90001f4c:	f7ff fcc8 	bl	900018e0 <BSP_LCD_DrawHLine>
    if(current_x > 0) 
90001f50:	b1ad      	cbz	r5, 90001f7e <BSP_LCD_FillCircle+0x86>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
90001f52:	b2aa      	uxth	r2, r5
90001f54:	fa1f fb87 	uxth.w	fp, r7
90001f58:	eba8 0002 	sub.w	r0, r8, r2
90001f5c:	0052      	lsls	r2, r2, #1
90001f5e:	eba6 010b 	sub.w	r1, r6, fp
90001f62:	b280      	uxth	r0, r0
90001f64:	b292      	uxth	r2, r2
90001f66:	b289      	uxth	r1, r1
90001f68:	9000      	str	r0, [sp, #0]
90001f6a:	9201      	str	r2, [sp, #4]
90001f6c:	f7ff fcb8 	bl	900018e0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
90001f70:	eb0b 0106 	add.w	r1, fp, r6
90001f74:	9a01      	ldr	r2, [sp, #4]
90001f76:	9800      	ldr	r0, [sp, #0]
90001f78:	b289      	uxth	r1, r1
90001f7a:	f7ff fcb1 	bl	900018e0 <BSP_LCD_DrawHLine>
    if (decision < 0)
90001f7e:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
90001f80:	bfb1      	iteee	lt
90001f82:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
90001f84:	1beb      	subge	r3, r5, r7
90001f86:	340a      	addge	r4, #10
      current_y--;
90001f88:	f107 37ff 	addge.w	r7, r7, #4294967295
      decision += (current_x << 2) + 6;
90001f8c:	bfb8      	it	lt
90001f8e:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
    current_x++;
90001f92:	f105 0501 	add.w	r5, r5, #1
      decision += ((current_x - current_y) << 2) + 10;
90001f96:	bfa8      	it	ge
90001f98:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
90001f9c:	42af      	cmp	r7, r5
90001f9e:	d2c0      	bcs.n	90001f22 <BSP_LCD_FillCircle+0x2a>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001fa0:	f8da 30e8 	ldr.w	r3, [sl, #232]	; 0xe8
90001fa4:	220c      	movs	r2, #12
90001fa6:	fb02 aa03 	mla	sl, r2, r3, sl
90001faa:	f8da 00ec 	ldr.w	r0, [sl, #236]	; 0xec
90001fae:	f7ff fc4b 	bl	90001848 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
90001fb2:	464a      	mov	r2, r9
90001fb4:	4631      	mov	r1, r6
90001fb6:	4640      	mov	r0, r8
}
90001fb8:	b003      	add	sp, #12
90001fba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
90001fbe:	f7ff bebf 	b.w	90001d40 <BSP_LCD_DrawCircle>
90001fc2:	bf00      	nop
90001fc4:	200003f8 	.word	0x200003f8

90001fc8 <BSP_LCD_FillPolygon>:
{
90001fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  image_left = image_right = Points->X;
90001fcc:	f8b0 8000 	ldrh.w	r8, [r0]
{
90001fd0:	460f      	mov	r7, r1
  image_top= image_bottom = Points->Y;
90001fd2:	f8b0 9002 	ldrh.w	r9, [r0, #2]
{
90001fd6:	b087      	sub	sp, #28
  image_left = image_right = Points->X;
90001fd8:	4644      	mov	r4, r8
90001fda:	4645      	mov	r5, r8
  image_top= image_bottom = Points->Y;
90001fdc:	464e      	mov	r6, r9
90001fde:	4649      	mov	r1, r9
  for(counter = 1; counter < PointCount; counter++)
90001fe0:	2301      	movs	r3, #1
90001fe2:	42bb      	cmp	r3, r7
90001fe4:	db2f      	blt.n	90002046 <BSP_LCD_FillPolygon+0x7e>
  if(PointCount < 2)
90001fe6:	2f01      	cmp	r7, #1
90001fe8:	d92a      	bls.n	90002040 <BSP_LCD_FillPolygon+0x78>
  X_center = (image_left + image_right)/2;
90001fea:	4425      	add	r5, r4
  Y_center = (image_bottom + image_top)/2;
90001fec:	440e      	add	r6, r1
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
90001fee:	f04f 0b00 	mov.w	fp, #0
90001ff2:	1d04      	adds	r4, r0, #4
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
90001ff4:	f3c5 054f 	ubfx	r5, r5, #1, #16
90001ff8:	f3c6 064f 	ubfx	r6, r6, #1, #16
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
90001ffc:	f8cd b00c 	str.w	fp, [sp, #12]
  while(--PointCount)
90002000:	3f01      	subs	r7, #1
90002002:	3404      	adds	r4, #4
90002004:	b2bf      	uxth	r7, r7
90002006:	bb9f      	cbnz	r7, 90002070 <BSP_LCD_FillPolygon+0xa8>
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
90002008:	f8bd 700c 	ldrh.w	r7, [sp, #12]
9000200c:	fa1f f48b 	uxth.w	r4, fp
90002010:	464b      	mov	r3, r9
90002012:	462a      	mov	r2, r5
90002014:	4639      	mov	r1, r7
90002016:	4640      	mov	r0, r8
90002018:	e9cd 4600 	strd	r4, r6, [sp]
9000201c:	f7ff fe26 	bl	90001c6c <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
90002020:	464b      	mov	r3, r9
90002022:	463a      	mov	r2, r7
90002024:	4629      	mov	r1, r5
90002026:	4640      	mov	r0, r8
90002028:	e9cd 6400 	strd	r6, r4, [sp]
9000202c:	f7ff fe1e 	bl	90001c6c <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
90002030:	4633      	mov	r3, r6
90002032:	4642      	mov	r2, r8
90002034:	4639      	mov	r1, r7
90002036:	4628      	mov	r0, r5
90002038:	e9cd 4900 	strd	r4, r9, [sp]
9000203c:	f7ff fe16 	bl	90001c6c <FillTriangle>
}
90002040:	b007      	add	sp, #28
90002042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pixelX = POLY_X(counter);
90002046:	f930 2023 	ldrsh.w	r2, [r0, r3, lsl #2]
9000204a:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
9000204e:	3301      	adds	r3, #1
    if(pixelX < image_left)
90002050:	42aa      	cmp	r2, r5
      image_left = pixelX;
90002052:	b21b      	sxth	r3, r3
90002054:	bfb8      	it	lt
90002056:	b295      	uxthlt	r5, r2
    if(pixelX > image_right)
90002058:	42a2      	cmp	r2, r4
      image_right = pixelX;
9000205a:	bfc8      	it	gt
9000205c:	b294      	uxthgt	r4, r2
    pixelY = POLY_Y(counter);
9000205e:	f9bc 2002 	ldrsh.w	r2, [ip, #2]
    if(pixelY < image_top)
90002062:	428a      	cmp	r2, r1
      image_top = pixelY;
90002064:	bfb8      	it	lt
90002066:	b291      	uxthlt	r1, r2
    if(pixelY > image_bottom)
90002068:	42b2      	cmp	r2, r6
      image_bottom = pixelY;
9000206a:	bfc8      	it	gt
9000206c:	b296      	uxthgt	r6, r2
  for(counter = 1; counter < PointCount; counter++)
9000206e:	e7b8      	b.n	90001fe2 <BSP_LCD_FillPolygon+0x1a>
    X2 = Points->X;
90002070:	f934 3c04 	ldrsh.w	r3, [r4, #-4]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
90002074:	f834 ac04 	ldrh.w	sl, [r4, #-4]
90002078:	f834 2c02 	ldrh.w	r2, [r4, #-2]
9000207c:	f834 0c08 	ldrh.w	r0, [r4, #-8]
90002080:	4651      	mov	r1, sl
    X2 = Points->X;
90002082:	9303      	str	r3, [sp, #12]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
90002084:	f834 3c06 	ldrh.w	r3, [r4, #-6]
    Y2 = Points->Y;    
90002088:	f934 bc02 	ldrsh.w	fp, [r4, #-2]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
9000208c:	9200      	str	r2, [sp, #0]
9000208e:	9305      	str	r3, [sp, #20]
90002090:	9004      	str	r0, [sp, #16]
90002092:	e9cd 6201 	strd	r6, r2, [sp, #4]
90002096:	462a      	mov	r2, r5
90002098:	f7ff fde8 	bl	90001c6c <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
9000209c:	9b02      	ldr	r3, [sp, #8]
9000209e:	4652      	mov	r2, sl
900020a0:	4629      	mov	r1, r5
900020a2:	9804      	ldr	r0, [sp, #16]
900020a4:	e9cd 6300 	strd	r6, r3, [sp]
900020a8:	9b05      	ldr	r3, [sp, #20]
900020aa:	f7ff fddf 	bl	90001c6c <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
900020ae:	9b05      	ldr	r3, [sp, #20]
900020b0:	9804      	ldr	r0, [sp, #16]
900020b2:	4651      	mov	r1, sl
900020b4:	9301      	str	r3, [sp, #4]
900020b6:	9b02      	ldr	r3, [sp, #8]
900020b8:	4602      	mov	r2, r0
900020ba:	4628      	mov	r0, r5
900020bc:	9300      	str	r3, [sp, #0]
900020be:	4633      	mov	r3, r6
900020c0:	f7ff fdd4 	bl	90001c6c <FillTriangle>
900020c4:	e79c      	b.n	90002000 <BSP_LCD_FillPolygon+0x38>
	...

900020c8 <BSP_LCD_DisplayOn>:
{
900020c8:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
900020ca:	4b09      	ldr	r3, [pc, #36]	; (900020f0 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
900020cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
900020d0:	4808      	ldr	r0, [pc, #32]	; (900020f4 <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
900020d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900020d4:	6993      	ldr	r3, [r2, #24]
900020d6:	f043 0301 	orr.w	r3, r3, #1
900020da:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
900020dc:	2201      	movs	r2, #1
900020de:	f001 f99b 	bl	90003418 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
900020e2:	2201      	movs	r2, #1
900020e4:	2108      	movs	r1, #8
900020e6:	4804      	ldr	r0, [pc, #16]	; (900020f8 <BSP_LCD_DisplayOn+0x30>)
}
900020e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
900020ec:	f001 b994 	b.w	90003418 <HAL_GPIO_WritePin>
900020f0:	200003f8 	.word	0x200003f8
900020f4:	40022000 	.word	0x40022000
900020f8:	40022800 	.word	0x40022800

900020fc <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
900020fc:	4b4b      	ldr	r3, [pc, #300]	; (9000222c <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900020fe:	484c      	ldr	r0, [pc, #304]	; (90002230 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
90002100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90002102:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
90002106:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
90002108:	645a      	str	r2, [r3, #68]	; 0x44
{
9000210a:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
9000210c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
9000210e:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
90002110:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002112:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
90002114:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
90002118:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
9000211c:	4e45      	ldr	r6, [pc, #276]	; (90002234 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
9000211e:	9200      	str	r2, [sp, #0]
90002120:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
90002122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002124:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
90002128:	631a      	str	r2, [r3, #48]	; 0x30
9000212a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000212c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
90002130:	9201      	str	r2, [sp, #4]
90002132:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002136:	f042 0210 	orr.w	r2, r2, #16
9000213a:	631a      	str	r2, [r3, #48]	; 0x30
9000213c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000213e:	f002 0210 	and.w	r2, r2, #16
90002142:	9202      	str	r2, [sp, #8]
90002144:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000214c:	631a      	str	r2, [r3, #48]	; 0x30
9000214e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002150:	f002 0240 	and.w	r2, r2, #64	; 0x40
90002154:	9203      	str	r2, [sp, #12]
90002156:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90002158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000215a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
9000215e:	631a      	str	r2, [r3, #48]	; 0x30
90002160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002162:	f402 7280 	and.w	r2, r2, #256	; 0x100
90002166:	9204      	str	r2, [sp, #16]
90002168:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
9000216a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000216c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90002170:	631a      	str	r2, [r3, #48]	; 0x30
90002172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002174:	f402 7200 	and.w	r2, r2, #512	; 0x200
90002178:	9205      	str	r2, [sp, #20]
9000217a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
9000217c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000217e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90002182:	631a      	str	r2, [r3, #48]	; 0x30
90002184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002186:	f402 6280 	and.w	r2, r2, #1024	; 0x400
9000218a:	9206      	str	r2, [sp, #24]
9000218c:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
9000218e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90002194:	631a      	str	r2, [r3, #48]	; 0x30
90002196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002198:	f402 7280 	and.w	r2, r2, #256	; 0x100
9000219c:	9207      	str	r2, [sp, #28]
9000219e:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
900021a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900021a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
900021a6:	631a      	str	r2, [r3, #48]	; 0x30
900021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
900021aa:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
900021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900021b0:	9308      	str	r3, [sp, #32]
900021b2:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900021b4:	2310      	movs	r3, #16
900021b6:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
900021ba:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
900021bc:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900021c0:	f001 f848 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
900021c4:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900021c6:	a909      	add	r1, sp, #36	; 0x24
900021c8:	481b      	ldr	r0, [pc, #108]	; (90002238 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
900021ca:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900021cc:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900021d0:	f001 f840 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
900021d4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
900021d8:	a909      	add	r1, sp, #36	; 0x24
900021da:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900021dc:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900021de:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
900021e2:	f001 f837 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
900021e6:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
900021ea:	a909      	add	r1, sp, #36	; 0x24
900021ec:	4813      	ldr	r0, [pc, #76]	; (9000223c <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900021ee:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900021f0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
900021f4:	f001 f82e 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
900021f8:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
900021fa:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900021fc:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
900021fe:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002200:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002204:	4c0e      	ldr	r4, [pc, #56]	; (90002240 <BSP_LCD_MspInit+0x144>)
90002206:	4620      	mov	r0, r4
90002208:	f001 f824 	bl	90003254 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
9000220c:	a909      	add	r1, sp, #36	; 0x24
9000220e:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
90002210:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90002212:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90002214:	f001 f81e 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
90002218:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
9000221a:	a909      	add	r1, sp, #36	; 0x24
9000221c:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
9000221e:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90002222:	f001 f817 	bl	90003254 <HAL_GPIO_Init>
}
90002226:	b00f      	add	sp, #60	; 0x3c
90002228:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000222a:	bf00      	nop
9000222c:	40023800 	.word	0x40023800
90002230:	40021000 	.word	0x40021000
90002234:	40022000 	.word	0x40022000
90002238:	40021800 	.word	0x40021800
9000223c:	40022400 	.word	0x40022400
90002240:	40022800 	.word	0x40022800

90002244 <BSP_LCD_Init>:
{    
90002244:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90002246:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
90002248:	4c24      	ldr	r4, [pc, #144]	; (900022dc <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
9000224a:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
9000224c:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
9000224e:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90002252:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90002256:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
9000225a:	230b      	movs	r3, #11
9000225c:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90002260:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90002264:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90002266:	e9c4 3019 	strd	r3, r0, [r4, #100]	; 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
9000226a:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
9000226e:	f104 0040 	add.w	r0, r4, #64	; 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90002272:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	; 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90002276:	f007 fbfb 	bl	90009a70 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
9000227a:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
9000227e:	f44f 7388 	mov.w	r3, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
90002282:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90002284:	e9c4 e328 	strd	lr, r3, [r4, #160]	; 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
90002288:	2300      	movs	r3, #0
9000228a:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
9000228e:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
90002292:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90002296:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hLtdcHandler.Instance = LTDC;
9000229a:	4b11      	ldr	r3, [pc, #68]	; (900022e0 <BSP_LCD_Init+0x9c>)
9000229c:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
900022a0:	f002 f959 	bl	90004556 <HAL_LTDC_GetState>
900022a4:	4601      	mov	r1, r0
900022a6:	b918      	cbnz	r0, 900022b0 <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
900022a8:	f104 0040 	add.w	r0, r4, #64	; 0x40
900022ac:	f7ff ff26 	bl	900020fc <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
900022b0:	480c      	ldr	r0, [pc, #48]	; (900022e4 <BSP_LCD_Init+0xa0>)
900022b2:	f002 f8b7 	bl	90004424 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
900022b6:	2201      	movs	r2, #1
900022b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
900022bc:	480a      	ldr	r0, [pc, #40]	; (900022e8 <BSP_LCD_Init+0xa4>)
900022be:	f001 f8ab 	bl	90003418 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
900022c2:	2201      	movs	r2, #1
900022c4:	2108      	movs	r1, #8
900022c6:	4809      	ldr	r0, [pc, #36]	; (900022ec <BSP_LCD_Init+0xa8>)
900022c8:	f001 f8a6 	bl	90003418 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
900022cc:	f000 fa7c 	bl	900027c8 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
900022d0:	4807      	ldr	r0, [pc, #28]	; (900022f0 <BSP_LCD_Init+0xac>)
900022d2:	f7ff fad1 	bl	90001878 <BSP_LCD_SetFont>
}
900022d6:	2000      	movs	r0, #0
900022d8:	bd10      	pop	{r4, pc}
900022da:	bf00      	nop
900022dc:	200003f8 	.word	0x200003f8
900022e0:	40016800 	.word	0x40016800
900022e4:	20000438 	.word	0x20000438
900022e8:	40022000 	.word	0x40022000
900022ec:	40022800 	.word	0x40022800
900022f0:	20000060 	.word	0x20000060

900022f4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
900022f4:	b570      	push	{r4, r5, r6, lr}
900022f6:	b08a      	sub	sp, #40	; 0x28
900022f8:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
900022fa:	f002 f80b 	bl	90004314 <HAL_I2C_GetState>
900022fe:	2800      	cmp	r0, #0
90002300:	f040 8096 	bne.w	90002430 <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90002304:	4b4b      	ldr	r3, [pc, #300]	; (90002434 <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
90002306:	2600      	movs	r6, #0
90002308:	4c4b      	ldr	r4, [pc, #300]	; (90002438 <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
9000230a:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
9000230c:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
9000230e:	bf0c      	ite	eq
90002310:	4a4a      	ldreq	r2, [pc, #296]	; (9000243c <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
90002312:	4a4b      	ldrne	r2, [pc, #300]	; (90002440 <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90002314:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
90002316:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
90002318:	4a4a      	ldr	r2, [pc, #296]	; (90002444 <I2Cx_Init+0x150>)
9000231a:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
9000231e:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90002322:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90002326:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
9000232a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
9000232c:	d143      	bne.n	900023b6 <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
9000232e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90002332:	2080      	movs	r0, #128	; 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90002334:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90002338:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
9000233a:	6323      	str	r3, [r4, #48]	; 0x30
9000233c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
9000233e:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90002340:	f003 0380 	and.w	r3, r3, #128	; 0x80
90002344:	9301      	str	r3, [sp, #4]
90002346:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90002348:	2312      	movs	r3, #18
9000234a:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
9000234e:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90002350:	483d      	ldr	r0, [pc, #244]	; (90002448 <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90002352:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90002356:	f000 ff7d 	bl	90003254 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
9000235a:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
9000235e:	a905      	add	r1, sp, #20
90002360:	4839      	ldr	r0, [pc, #228]	; (90002448 <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
90002362:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90002364:	f000 ff76 	bl	90003254 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
90002368:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
9000236a:	4632      	mov	r2, r6
9000236c:	210f      	movs	r1, #15
9000236e:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
90002370:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90002374:	6423      	str	r3, [r4, #64]	; 0x40
90002376:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002378:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000237c:	9302      	str	r3, [sp, #8]
9000237e:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
90002380:	6a23      	ldr	r3, [r4, #32]
90002382:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90002386:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
90002388:	6a23      	ldr	r3, [r4, #32]
9000238a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
9000238e:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
90002390:	f000 fbc0 	bl	90002b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
90002394:	2048      	movs	r0, #72	; 0x48
90002396:	f000 fbef 	bl	90002b78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
9000239a:	2049      	movs	r0, #73	; 0x49
9000239c:	4632      	mov	r2, r6
9000239e:	210f      	movs	r1, #15
900023a0:	f000 fbb8 	bl	90002b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
900023a4:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
900023a6:	f000 fbe7 	bl	90002b78 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
900023aa:	4628      	mov	r0, r5
  }
}
900023ac:	b00a      	add	sp, #40	; 0x28
900023ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
900023b2:	f001 bdd1 	b.w	90003f58 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900023b6:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
900023ba:	f44f 7280 	mov.w	r2, #256	; 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
900023be:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900023c0:	4822      	ldr	r0, [pc, #136]	; (9000244c <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900023c2:	6323      	str	r3, [r4, #48]	; 0x30
900023c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
900023c6:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900023c8:	f003 0302 	and.w	r3, r3, #2
900023cc:	9303      	str	r3, [sp, #12]
900023ce:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
900023d0:	2312      	movs	r3, #18
900023d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
900023d6:	2304      	movs	r3, #4
900023d8:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900023dc:	a905      	add	r1, sp, #20
900023de:	f000 ff39 	bl	90003254 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
900023e2:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900023e6:	a905      	add	r1, sp, #20
900023e8:	4818      	ldr	r0, [pc, #96]	; (9000244c <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
900023ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900023ec:	f000 ff32 	bl	90003254 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
900023f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
900023f2:	4632      	mov	r2, r6
900023f4:	210f      	movs	r1, #15
900023f6:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
900023f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
900023fc:	6423      	str	r3, [r4, #64]	; 0x40
900023fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90002404:	9304      	str	r3, [sp, #16]
90002406:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
90002408:	6a23      	ldr	r3, [r4, #32]
9000240a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
9000240e:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
90002410:	6a23      	ldr	r3, [r4, #32]
90002412:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
90002416:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
90002418:	f000 fb7c 	bl	90002b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
9000241c:	201f      	movs	r0, #31
9000241e:	f000 fbab 	bl	90002b78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
90002422:	2020      	movs	r0, #32
90002424:	4632      	mov	r2, r6
90002426:	210f      	movs	r1, #15
90002428:	f000 fb74 	bl	90002b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
9000242c:	2020      	movs	r0, #32
9000242e:	e7ba      	b.n	900023a6 <I2Cx_Init+0xb2>
}
90002430:	b00a      	add	sp, #40	; 0x28
90002432:	bd70      	pop	{r4, r5, r6, pc}
90002434:	20000580 	.word	0x20000580
90002438:	40023800 	.word	0x40023800
9000243c:	40005c00 	.word	0x40005c00
90002440:	40005400 	.word	0x40005400
90002444:	40912732 	.word	0x40912732
90002448:	40021c00 	.word	0x40021c00
9000244c:	40020400 	.word	0x40020400

90002450 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
90002450:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90002452:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
90002456:	b085      	sub	sp, #20
90002458:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
9000245a:	9402      	str	r4, [sp, #8]
9000245c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
90002460:	9401      	str	r4, [sp, #4]
90002462:	9c08      	ldr	r4, [sp, #32]
90002464:	9400      	str	r4, [sp, #0]
90002466:	f001 fde2 	bl	9000402e <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
9000246a:	4604      	mov	r4, r0
9000246c:	b128      	cbz	r0, 9000247a <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
9000246e:	4628      	mov	r0, r5
90002470:	f001 fdc4 	bl	90003ffc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
90002474:	4628      	mov	r0, r5
90002476:	f7ff ff3d 	bl	900022f4 <I2Cx_Init>
}
9000247a:	4620      	mov	r0, r4
9000247c:	b005      	add	sp, #20
9000247e:	bd30      	pop	{r4, r5, pc}

90002480 <I2Cx_ReadMultiple>:
{
90002480:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90002482:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
90002486:	b085      	sub	sp, #20
90002488:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
9000248a:	9402      	str	r4, [sp, #8]
9000248c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
90002490:	9401      	str	r4, [sp, #4]
90002492:	9c08      	ldr	r4, [sp, #32]
90002494:	9400      	str	r4, [sp, #0]
90002496:	f001 fe81 	bl	9000419c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
9000249a:	4604      	mov	r4, r0
9000249c:	b128      	cbz	r0, 900024aa <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
9000249e:	4628      	mov	r0, r5
900024a0:	f001 fdac 	bl	90003ffc <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
900024a4:	4628      	mov	r0, r5
900024a6:	f7ff ff25 	bl	900022f4 <I2Cx_Init>
}
900024aa:	4620      	mov	r0, r4
900024ac:	b005      	add	sp, #20
900024ae:	bd30      	pop	{r4, r5, pc}

900024b0 <BSP_LED_Init>:
{
900024b0:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
900024b2:	4604      	mov	r4, r0
{
900024b4:	b087      	sub	sp, #28
  if (Led == LED1)
900024b6:	b9c8      	cbnz	r0, 900024ec <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
900024b8:	4b0d      	ldr	r3, [pc, #52]	; (900024f0 <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
900024ba:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
900024bc:	a901      	add	r1, sp, #4
900024be:	480d      	ldr	r0, [pc, #52]	; (900024f4 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
900024c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900024c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
900024c6:	631a      	str	r2, [r3, #48]	; 0x30
900024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
900024ce:	9300      	str	r3, [sp, #0]
900024d0:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
900024d2:	2301      	movs	r3, #1
900024d4:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
900024d8:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
900024da:	2303      	movs	r3, #3
900024dc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
900024de:	f000 feb9 	bl	90003254 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
900024e2:	4622      	mov	r2, r4
900024e4:	4629      	mov	r1, r5
900024e6:	4803      	ldr	r0, [pc, #12]	; (900024f4 <BSP_LED_Init+0x44>)
900024e8:	f000 ff96 	bl	90003418 <HAL_GPIO_WritePin>
}
900024ec:	b007      	add	sp, #28
900024ee:	bd30      	pop	{r4, r5, pc}
900024f0:	40023800 	.word	0x40023800
900024f4:	40022000 	.word	0x40022000

900024f8 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
900024f8:	4801      	ldr	r0, [pc, #4]	; (90002500 <AUDIO_IO_Init+0x8>)
900024fa:	f7ff befb 	b.w	900022f4 <I2Cx_Init>
900024fe:	bf00      	nop
90002500:	20000580 	.word	0x20000580

90002504 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
90002504:	4770      	bx	lr
	...

90002508 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
90002508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
9000250a:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
9000250c:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
9000250e:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
90002512:	f10d 020e 	add.w	r2, sp, #14
90002516:	9301      	str	r3, [sp, #4]
90002518:	9200      	str	r2, [sp, #0]
9000251a:	460a      	mov	r2, r1
9000251c:	4601      	mov	r1, r0
9000251e:	4803      	ldr	r0, [pc, #12]	; (9000252c <AUDIO_IO_Write+0x24>)
90002520:	f7ff ff96 	bl	90002450 <I2Cx_WriteMultiple>
}
90002524:	b005      	add	sp, #20
90002526:	f85d fb04 	ldr.w	pc, [sp], #4
9000252a:	bf00      	nop
9000252c:	20000580 	.word	0x20000580

90002530 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
90002530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
90002532:	2300      	movs	r3, #0
{
90002534:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
90002536:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
9000253a:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
9000253e:	2302      	movs	r3, #2
90002540:	9100      	str	r1, [sp, #0]
90002542:	4601      	mov	r1, r0
90002544:	9301      	str	r3, [sp, #4]
90002546:	4805      	ldr	r0, [pc, #20]	; (9000255c <AUDIO_IO_Read+0x2c>)
90002548:	f7ff ff9a 	bl	90002480 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
9000254c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
90002550:	ba40      	rev16	r0, r0
  
  read_value = tmp;
  
  return read_value;
}
90002552:	b280      	uxth	r0, r0
90002554:	b005      	add	sp, #20
90002556:	f85d fb04 	ldr.w	pc, [sp], #4
9000255a:	bf00      	nop
9000255c:	20000580 	.word	0x20000580

90002560 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
90002560:	f000 bab4 	b.w	90002acc <HAL_Delay>

90002564 <TS_IO_Init>:
90002564:	f7ff bfc8 	b.w	900024f8 <AUDIO_IO_Init>

90002568 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
90002568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9000256a:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
9000256e:	f10d 020f 	add.w	r2, sp, #15
90002572:	2301      	movs	r3, #1
90002574:	9200      	str	r2, [sp, #0]
90002576:	460a      	mov	r2, r1
90002578:	4601      	mov	r1, r0
9000257a:	9301      	str	r3, [sp, #4]
9000257c:	4802      	ldr	r0, [pc, #8]	; (90002588 <TS_IO_Write+0x20>)
9000257e:	f7ff ff67 	bl	90002450 <I2Cx_WriteMultiple>
}
90002582:	b005      	add	sp, #20
90002584:	f85d fb04 	ldr.w	pc, [sp], #4
90002588:	20000580 	.word	0x20000580

9000258c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
9000258c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
9000258e:	2300      	movs	r3, #0
{
90002590:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
90002592:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
90002596:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
9000259a:	2301      	movs	r3, #1
9000259c:	9100      	str	r1, [sp, #0]
9000259e:	4601      	mov	r1, r0
900025a0:	9301      	str	r3, [sp, #4]
900025a2:	4804      	ldr	r0, [pc, #16]	; (900025b4 <TS_IO_Read+0x28>)
900025a4:	f7ff ff6c 	bl	90002480 <I2Cx_ReadMultiple>

  return read_value;
}
900025a8:	f89d 000f 	ldrb.w	r0, [sp, #15]
900025ac:	b005      	add	sp, #20
900025ae:	f85d fb04 	ldr.w	pc, [sp], #4
900025b2:	bf00      	nop
900025b4:	20000580 	.word	0x20000580

900025b8 <TS_IO_Delay>:
900025b8:	f000 ba88 	b.w	90002acc <HAL_Delay>

900025bc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
900025bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
900025c0:	4c21      	ldr	r4, [pc, #132]	; (90002648 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900025c2:	2710      	movs	r7, #16
900025c4:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
900025c6:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900025ca:	19e5      	adds	r5, r4, r7
900025cc:	4621      	mov	r1, r4
{
900025ce:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900025d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
900025d4:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
900025d6:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900025da:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
900025de:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900025e2:	f003 f8d7 	bl	90005794 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
900025e6:	4630      	mov	r0, r6
900025e8:	f000 fa70 	bl	90002acc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
900025ec:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
900025ee:	4621      	mov	r1, r4
900025f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
900025f4:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900025f6:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
900025fa:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
900025fe:	f003 f8c9 	bl	90005794 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
90002602:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90002604:	4621      	mov	r1, r4
90002606:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000260a:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
9000260c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
90002610:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
90002612:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90002616:	f003 f8bd 	bl	90005794 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
9000261a:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
9000261e:	4621      	mov	r1, r4
90002620:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90002624:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
90002626:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90002628:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
9000262a:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
9000262c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
90002630:	9b01      	ldr	r3, [sp, #4]
90002632:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90002634:	f003 f8ae 	bl	90005794 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90002638:	4649      	mov	r1, r9
9000263a:	4628      	mov	r0, r5
}
9000263c:	b003      	add	sp, #12
9000263e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90002642:	f003 b8be 	b.w	900057c2 <HAL_SDRAM_ProgramRefreshRate>
90002646:	bf00      	nop
90002648:	20000618 	.word	0x20000618

9000264c <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
9000264c:	4b55      	ldr	r3, [pc, #340]	; (900027a4 <BSP_SDRAM_MspInit+0x158>)
9000264e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90002650:	f042 0201 	orr.w	r2, r2, #1
{  
90002654:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90002656:	639a      	str	r2, [r3, #56]	; 0x38
{  
90002658:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
9000265a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
9000265c:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
9000265e:	a909      	add	r1, sp, #36	; 0x24
90002660:	4851      	ldr	r0, [pc, #324]	; (900027a8 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
90002662:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90002666:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
90002668:	9201      	str	r2, [sp, #4]
9000266a:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
9000266c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000266e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
90002672:	631a      	str	r2, [r3, #48]	; 0x30
90002674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002676:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
9000267a:	9202      	str	r2, [sp, #8]
9000267c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
9000267e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002680:	f042 0204 	orr.w	r2, r2, #4
90002684:	631a      	str	r2, [r3, #48]	; 0x30
90002686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002688:	f002 0204 	and.w	r2, r2, #4
9000268c:	9203      	str	r2, [sp, #12]
9000268e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002692:	f042 0208 	orr.w	r2, r2, #8
90002696:	631a      	str	r2, [r3, #48]	; 0x30
90002698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000269a:	f002 0208 	and.w	r2, r2, #8
9000269e:	9204      	str	r2, [sp, #16]
900026a0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900026a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026a4:	f042 0210 	orr.w	r2, r2, #16
900026a8:	631a      	str	r2, [r3, #48]	; 0x30
900026aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026ac:	f002 0210 	and.w	r2, r2, #16
900026b0:	9205      	str	r2, [sp, #20]
900026b2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900026b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026b6:	f042 0220 	orr.w	r2, r2, #32
900026ba:	631a      	str	r2, [r3, #48]	; 0x30
900026bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026be:	f002 0220 	and.w	r2, r2, #32
900026c2:	9206      	str	r2, [sp, #24]
900026c4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900026c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900026cc:	631a      	str	r2, [r3, #48]	; 0x30
900026ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026d0:	f002 0240 	and.w	r2, r2, #64	; 0x40
900026d4:	9207      	str	r2, [sp, #28]
900026d6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900026d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900026de:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
900026e0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
900026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
900026e8:	9308      	str	r3, [sp, #32]
900026ea:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
900026ec:	2302      	movs	r3, #2
900026ee:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
900026f2:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
900026f4:	230c      	movs	r3, #12
900026f6:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
900026f8:	2308      	movs	r3, #8
900026fa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
900026fc:	f000 fdaa 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90002700:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002704:	a909      	add	r1, sp, #36	; 0x24
90002706:	4829      	ldr	r0, [pc, #164]	; (900027ac <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90002708:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
9000270a:	f000 fda3 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
9000270e:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002712:	a909      	add	r1, sp, #36	; 0x24
90002714:	4826      	ldr	r0, [pc, #152]	; (900027b0 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002716:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002718:	f000 fd9c 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
9000271c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002720:	a909      	add	r1, sp, #36	; 0x24
90002722:	4824      	ldr	r0, [pc, #144]	; (900027b4 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002724:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002726:	f000 fd95 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
9000272a:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000272e:	a909      	add	r1, sp, #36	; 0x24
90002730:	4821      	ldr	r0, [pc, #132]	; (900027b8 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90002732:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002734:	f000 fd8e 	bl	90003254 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90002738:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
9000273a:	a909      	add	r1, sp, #36	; 0x24
9000273c:	481f      	ldr	r0, [pc, #124]	; (900027bc <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
9000273e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90002740:	f000 fd88 	bl	90003254 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
90002744:	4b1e      	ldr	r3, [pc, #120]	; (900027c0 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90002746:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90002748:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
9000274c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90002750:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
90002752:	675c      	str	r4, [r3, #116]	; 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
90002754:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90002756:	e9c3 4212 	strd	r4, r2, [r3, #72]	; 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
9000275a:	f44f 6280 	mov.w	r2, #1024	; 0x400
9000275e:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90002762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
90002766:	e9c3 0216 	strd	r0, r2, [r3, #88]	; 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
9000276a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
9000276e:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
90002772:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
90002774:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90002778:	4a12      	ldr	r2, [pc, #72]	; (900027c4 <BSP_SDRAM_MspInit+0x178>)
9000277a:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
9000277e:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
90002780:	6335      	str	r5, [r6, #48]	; 0x30
90002782:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dma_handle);
90002784:	f000 faae 	bl	90002ce4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
90002788:	4628      	mov	r0, r5
9000278a:	f000 fa2d 	bl	90002be8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
9000278e:	4622      	mov	r2, r4
90002790:	210f      	movs	r1, #15
90002792:	2038      	movs	r0, #56	; 0x38
90002794:	f000 f9be 	bl	90002b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
90002798:	2038      	movs	r0, #56	; 0x38
9000279a:	f000 f9ed 	bl	90002b78 <HAL_NVIC_EnableIRQ>
}
9000279e:	b00e      	add	sp, #56	; 0x38
900027a0:	bd70      	pop	{r4, r5, r6, pc}
900027a2:	bf00      	nop
900027a4:	40023800 	.word	0x40023800
900027a8:	40020800 	.word	0x40020800
900027ac:	40020c00 	.word	0x40020c00
900027b0:	40021000 	.word	0x40021000
900027b4:	40021400 	.word	0x40021400
900027b8:	40021800 	.word	0x40021800
900027bc:	40021c00 	.word	0x40021c00
900027c0:	20000618 	.word	0x20000618
900027c4:	40026410 	.word	0x40026410

900027c8 <BSP_SDRAM_Init>:
{ 
900027c8:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900027ca:	4b1b      	ldr	r3, [pc, #108]	; (90002838 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
900027cc:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900027ce:	4c1b      	ldr	r4, [pc, #108]	; (9000283c <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
900027d0:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900027d2:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900027d4:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900027d8:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
900027da:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
900027dc:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
900027de:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  Timing.ExitSelfRefreshDelay = 7;
900027e2:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
900027e6:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900027ea:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
900027ec:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900027f0:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
900027f4:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
900027f6:	f44f 7380 	mov.w	r3, #256	; 0x100
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
900027fa:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
900027fe:	63a1      	str	r1, [r4, #56]	; 0x38
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002800:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002808:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
9000280c:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90002810:	f7ff ff1c 	bl	9000264c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
90002814:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
90002818:	4c09      	ldr	r4, [pc, #36]	; (90002840 <BSP_SDRAM_Init+0x78>)
9000281a:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
9000281e:	f002 ff99 	bl	90005754 <HAL_SDRAM_Init>
90002822:	3800      	subs	r0, #0
90002824:	bf18      	it	ne
90002826:	2001      	movne	r0, #1
90002828:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
9000282a:	f240 6003 	movw	r0, #1539	; 0x603
9000282e:	f7ff fec5 	bl	900025bc <BSP_SDRAM_Initialization_sequence>
}
90002832:	7820      	ldrb	r0, [r4, #0]
90002834:	bd10      	pop	{r4, pc}
90002836:	bf00      	nop
90002838:	a0000140 	.word	0xa0000140
9000283c:	20000618 	.word	0x20000618
90002840:	20000088 	.word	0x20000088

90002844 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
90002844:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
90002846:	4c0b      	ldr	r4, [pc, #44]	; (90002874 <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90002848:	4d0b      	ldr	r5, [pc, #44]	; (90002878 <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
9000284a:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
9000284c:	2070      	movs	r0, #112	; 0x70
9000284e:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
90002850:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90002852:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
90002854:	686b      	ldr	r3, [r5, #4]
90002856:	2070      	movs	r0, #112	; 0x70
90002858:	4798      	blx	r3
9000285a:	2851      	cmp	r0, #81	; 0x51
9000285c:	d108      	bne.n	90002870 <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
9000285e:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
90002860:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
90002862:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
90002864:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
90002866:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
90002868:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
9000286a:	4798      	blx	r3
  uint8_t status = TS_OK;
9000286c:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
9000286e:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
90002870:	2003      	movs	r0, #3
90002872:	e7fc      	b.n	9000286e <BSP_TS_Init+0x2a>
90002874:	20000738 	.word	0x20000738
90002878:	20000000 	.word	0x20000000

9000287c <BSP_TS_Get_GestureId>:
{
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
9000287c:	4b15      	ldr	r3, [pc, #84]	; (900028d4 <BSP_TS_Get_GestureId+0x58>)
{
9000287e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
90002880:	2400      	movs	r4, #0
{
90002882:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
90002884:	a901      	add	r1, sp, #4
90002886:	7a18      	ldrb	r0, [r3, #8]
  uint32_t gestureId = 0;
90002888:	9401      	str	r4, [sp, #4]
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
9000288a:	f7fd ff51 	bl	90000730 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
9000288e:	9b01      	ldr	r3, [sp, #4]
90002890:	2b18      	cmp	r3, #24
90002892:	d019      	beq.n	900028c8 <BSP_TS_Get_GestureId+0x4c>
90002894:	d808      	bhi.n	900028a8 <BSP_TS_Get_GestureId+0x2c>
90002896:	2b10      	cmp	r3, #16
90002898:	d011      	beq.n	900028be <BSP_TS_Get_GestureId+0x42>
9000289a:	2b14      	cmp	r3, #20
9000289c:	d012      	beq.n	900028c4 <BSP_TS_Get_GestureId+0x48>
9000289e:	b15b      	cbz	r3, 900028b8 <BSP_TS_Get_GestureId+0x3c>
900028a0:	2401      	movs	r4, #1
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
900028a2:	4620      	mov	r0, r4
900028a4:	b003      	add	sp, #12
900028a6:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
900028a8:	2b40      	cmp	r3, #64	; 0x40
900028aa:	d00f      	beq.n	900028cc <BSP_TS_Get_GestureId+0x50>
900028ac:	2b49      	cmp	r3, #73	; 0x49
900028ae:	d00f      	beq.n	900028d0 <BSP_TS_Get_GestureId+0x54>
900028b0:	2b1c      	cmp	r3, #28
900028b2:	d1f5      	bne.n	900028a0 <BSP_TS_Get_GestureId+0x24>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
900028b4:	2304      	movs	r3, #4
900028b6:	e003      	b.n	900028c0 <BSP_TS_Get_GestureId+0x44>
  uint8_t  ts_status = TS_OK;
900028b8:	461c      	mov	r4, r3
      TS_State->gestureId = GEST_ID_NO_GESTURE;
900028ba:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
900028bc:	e7f1      	b.n	900028a2 <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_UP;
900028be:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
900028c0:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
900028c2:	e7ee      	b.n	900028a2 <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
900028c4:	2302      	movs	r3, #2
900028c6:	e7fb      	b.n	900028c0 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
900028c8:	2303      	movs	r3, #3
900028ca:	e7f9      	b.n	900028c0 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
900028cc:	2305      	movs	r3, #5
900028ce:	e7f7      	b.n	900028c0 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
900028d0:	2306      	movs	r3, #6
900028d2:	e7f5      	b.n	900028c0 <BSP_TS_Get_GestureId+0x44>
900028d4:	20000738 	.word	0x20000738

900028d8 <BSP_TS_GetState>:
{
900028d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
900028dc:	4c56      	ldr	r4, [pc, #344]	; (90002a38 <BSP_TS_GetState+0x160>)
{
900028de:	b097      	sub	sp, #92	; 0x5c
  uint32_t weight = 0;
900028e0:	2300      	movs	r3, #0
{
900028e2:	4605      	mov	r5, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
900028e4:	6862      	ldr	r2, [r4, #4]
900028e6:	7a20      	ldrb	r0, [r4, #8]
900028e8:	6912      	ldr	r2, [r2, #16]
  uint32_t event = 0;
900028ea:	9309      	str	r3, [sp, #36]	; 0x24
  uint32_t area = 0;
900028ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
900028f0:	4790      	blx	r2
900028f2:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
900028f4:	b1b8      	cbz	r0, 90002926 <BSP_TS_GetState+0x4e>
900028f6:	ab0d      	add	r3, sp, #52	; 0x34
900028f8:	f105 0615 	add.w	r6, r5, #21
900028fc:	f105 0b02 	add.w	fp, r5, #2
90002900:	f104 090c 	add.w	r9, r4, #12
90002904:	9304      	str	r3, [sp, #16]
90002906:	ab0a      	add	r3, sp, #40	; 0x28
90002908:	f104 0a20 	add.w	sl, r4, #32
9000290c:	af10      	add	r7, sp, #64	; 0x40
9000290e:	9303      	str	r3, [sp, #12]
90002910:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
    for(index=0; index < TS_State->touchDetected; index++)
90002914:	2300      	movs	r3, #0
90002916:	9305      	str	r3, [sp, #20]
90002918:	782b      	ldrb	r3, [r5, #0]
9000291a:	9a05      	ldr	r2, [sp, #20]
9000291c:	4293      	cmp	r3, r2
9000291e:	d805      	bhi.n	9000292c <BSP_TS_GetState+0x54>
    ts_status = BSP_TS_Get_GestureId(TS_State);
90002920:	4628      	mov	r0, r5
90002922:	f7ff ffab 	bl	9000287c <BSP_TS_Get_GestureId>
}
90002926:	b017      	add	sp, #92	; 0x5c
90002928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
9000292c:	6863      	ldr	r3, [r4, #4]
9000292e:	4642      	mov	r2, r8
90002930:	4639      	mov	r1, r7
90002932:	7a20      	ldrb	r0, [r4, #8]
90002934:	695b      	ldr	r3, [r3, #20]
90002936:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
90002938:	7a63      	ldrb	r3, [r4, #9]
9000293a:	2b01      	cmp	r3, #1
9000293c:	d14a      	bne.n	900029d4 <BSP_TS_GetState+0xfc>
        x[index] = brute_x[index];
9000293e:	883a      	ldrh	r2, [r7, #0]
90002940:	9903      	ldr	r1, [sp, #12]
90002942:	800a      	strh	r2, [r1, #0]
        y[index] = brute_y[index];
90002944:	f8b8 2000 	ldrh.w	r2, [r8]
        y[index] = 4096 - brute_y[index];
90002948:	9904      	ldr	r1, [sp, #16]
9000294a:	800a      	strh	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_XY)
9000294c:	071b      	lsls	r3, r3, #28
9000294e:	d506      	bpl.n	9000295e <BSP_TS_GetState+0x86>
        y[index] = brute_x[index];
90002950:	883b      	ldrh	r3, [r7, #0]
90002952:	9a04      	ldr	r2, [sp, #16]
90002954:	8013      	strh	r3, [r2, #0]
        x[index] = brute_y[index];
90002956:	f8b8 3000 	ldrh.w	r3, [r8]
9000295a:	9a03      	ldr	r2, [sp, #12]
9000295c:	8013      	strh	r3, [r2, #0]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
9000295e:	9b03      	ldr	r3, [sp, #12]
90002960:	f8d9 2000 	ldr.w	r2, [r9]
90002964:	f833 cb02 	ldrh.w	ip, [r3], #2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002968:	9904      	ldr	r1, [sp, #16]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
9000296a:	4594      	cmp	ip, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
9000296c:	f8da 0000 	ldr.w	r0, [sl]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90002970:	9303      	str	r3, [sp, #12]
90002972:	b293      	uxth	r3, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002974:	f831 2b02 	ldrh.w	r2, [r1], #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90002978:	bf8c      	ite	hi
9000297a:	ebac 0303 	subhi.w	r3, ip, r3
9000297e:	eba3 030c 	subls.w	r3, r3, ip
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002982:	9104      	str	r1, [sp, #16]
90002984:	4282      	cmp	r2, r0
90002986:	b281      	uxth	r1, r0
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
90002988:	7a20      	ldrb	r0, [r4, #8]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
9000298a:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
9000298c:	bf8c      	ite	hi
9000298e:	1a51      	subhi	r1, r2, r1
90002990:	1a89      	subls	r1, r1, r2
90002992:	b289      	uxth	r1, r1
      if ((x_diff + y_diff) > 5)
90002994:	440b      	add	r3, r1
90002996:	2b05      	cmp	r3, #5
        _x[index] = x[index];
90002998:	bfc4      	itt	gt
9000299a:	f8c9 c000 	strgt.w	ip, [r9]
        _y[index] = y[index];
9000299e:	f8ca 2000 	strgt.w	r2, [sl]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
900029a2:	2870      	cmp	r0, #112	; 0x70
900029a4:	d124      	bne.n	900029f0 <BSP_TS_GetState+0x118>
        TS_State->touchX[index] = x[index];
900029a6:	f8ab c000 	strh.w	ip, [fp]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
900029aa:	ab09      	add	r3, sp, #36	; 0x24
        TS_State->touchY[index] = y[index];
900029ac:	f8ab 200a 	strh.w	r2, [fp, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
900029b0:	9905      	ldr	r1, [sp, #20]
900029b2:	aa07      	add	r2, sp, #28
900029b4:	9300      	str	r3, [sp, #0]
900029b6:	ab08      	add	r3, sp, #32
900029b8:	f7fd feca 	bl	90000750 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
900029bc:	9b07      	ldr	r3, [sp, #28]
900029be:	f806 3f01 	strb.w	r3, [r6, #1]!
      TS_State->touchArea[index]   = area;
900029c2:	9b08      	ldr	r3, [sp, #32]
900029c4:	72b3      	strb	r3, [r6, #10]
      switch(event)
900029c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900029c8:	2b03      	cmp	r3, #3
900029ca:	d821      	bhi.n	90002a10 <BSP_TS_GetState+0x138>
900029cc:	e8df f003 	tbb	[pc, r3]
900029d0:	312f2d1e 	.word	0x312f2d1e
      if(tsOrientation & TS_SWAP_X)
900029d4:	0799      	lsls	r1, r3, #30
        x[index] = 4096 - brute_x[index];
900029d6:	bf41      	itttt	mi
900029d8:	883a      	ldrhmi	r2, [r7, #0]
900029da:	9903      	ldrmi	r1, [sp, #12]
900029dc:	f5c2 5280 	rsbmi	r2, r2, #4096	; 0x1000
900029e0:	800a      	strhmi	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_Y)
900029e2:	075a      	lsls	r2, r3, #29
900029e4:	d5b2      	bpl.n	9000294c <BSP_TS_GetState+0x74>
        y[index] = 4096 - brute_y[index];
900029e6:	f8b8 2000 	ldrh.w	r2, [r8]
900029ea:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
900029ee:	e7ab      	b.n	90002948 <BSP_TS_GetState+0x70>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
900029f0:	f8d9 2000 	ldr.w	r2, [r9]
900029f4:	8823      	ldrh	r3, [r4, #0]
900029f6:	4353      	muls	r3, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
900029f8:	8862      	ldrh	r2, [r4, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
900029fa:	0b1b      	lsrs	r3, r3, #12
900029fc:	f8ab 3000 	strh.w	r3, [fp]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
90002a00:	f8da 3000 	ldr.w	r3, [sl]
90002a04:	435a      	muls	r2, r3
90002a06:	f3c2 320f 	ubfx	r2, r2, #12, #16
90002a0a:	e7ce      	b.n	900029aa <BSP_TS_GetState+0xd2>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
90002a0c:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
90002a0e:	7173      	strb	r3, [r6, #5]
    for(index=0; index < TS_State->touchDetected; index++)
90002a10:	9b05      	ldr	r3, [sp, #20]
90002a12:	f10b 0b02 	add.w	fp, fp, #2
90002a16:	f109 0904 	add.w	r9, r9, #4
90002a1a:	f10a 0a04 	add.w	sl, sl, #4
90002a1e:	3301      	adds	r3, #1
90002a20:	3702      	adds	r7, #2
90002a22:	f108 0802 	add.w	r8, r8, #2
90002a26:	9305      	str	r3, [sp, #20]
90002a28:	e776      	b.n	90002918 <BSP_TS_GetState+0x40>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
90002a2a:	2302      	movs	r3, #2
90002a2c:	e7ef      	b.n	90002a0e <BSP_TS_GetState+0x136>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
90002a2e:	2303      	movs	r3, #3
90002a30:	e7ed      	b.n	90002a0e <BSP_TS_GetState+0x136>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
90002a32:	2300      	movs	r3, #0
90002a34:	e7eb      	b.n	90002a0e <BSP_TS_GetState+0x136>
90002a36:	bf00      	nop
90002a38:	20000738 	.word	0x20000738

90002a3c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90002a3c:	4770      	bx	lr
	...

90002a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90002a40:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90002a42:	4e0e      	ldr	r6, [pc, #56]	; (90002a7c <HAL_InitTick+0x3c>)
90002a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
90002a48:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90002a4a:	7832      	ldrb	r2, [r6, #0]
90002a4c:	fbb3 f3f2 	udiv	r3, r3, r2
90002a50:	4a0b      	ldr	r2, [pc, #44]	; (90002a80 <HAL_InitTick+0x40>)
90002a52:	6810      	ldr	r0, [r2, #0]
90002a54:	fbb0 f0f3 	udiv	r0, r0, r3
90002a58:	f000 f89c 	bl	90002b94 <HAL_SYSTICK_Config>
90002a5c:	4604      	mov	r4, r0
90002a5e:	b950      	cbnz	r0, 90002a76 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90002a60:	2d0f      	cmp	r5, #15
90002a62:	d808      	bhi.n	90002a76 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90002a64:	4602      	mov	r2, r0
90002a66:	4629      	mov	r1, r5
90002a68:	f04f 30ff 	mov.w	r0, #4294967295
90002a6c:	f000 f852 	bl	90002b14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90002a70:	4620      	mov	r0, r4
90002a72:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
90002a74:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90002a76:	2001      	movs	r0, #1
90002a78:	e7fc      	b.n	90002a74 <HAL_InitTick+0x34>
90002a7a:	bf00      	nop
90002a7c:	2000008c 	.word	0x2000008c
90002a80:	200000b4 	.word	0x200000b4

90002a84 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
90002a84:	4a07      	ldr	r2, [pc, #28]	; (90002aa4 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90002a86:	2003      	movs	r0, #3
{
90002a88:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
90002a8a:	6813      	ldr	r3, [r2, #0]
90002a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90002a90:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90002a92:	f000 f82d 	bl	90002af0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
90002a96:	200f      	movs	r0, #15
90002a98:	f7ff ffd2 	bl	90002a40 <HAL_InitTick>
  HAL_MspInit();
90002a9c:	f7ff ffce 	bl	90002a3c <HAL_MspInit>
}
90002aa0:	2000      	movs	r0, #0
90002aa2:	bd08      	pop	{r3, pc}
90002aa4:	40023c00 	.word	0x40023c00

90002aa8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
90002aa8:	4a03      	ldr	r2, [pc, #12]	; (90002ab8 <HAL_IncTick+0x10>)
90002aaa:	4b04      	ldr	r3, [pc, #16]	; (90002abc <HAL_IncTick+0x14>)
90002aac:	6811      	ldr	r1, [r2, #0]
90002aae:	781b      	ldrb	r3, [r3, #0]
90002ab0:	440b      	add	r3, r1
90002ab2:	6013      	str	r3, [r2, #0]
}
90002ab4:	4770      	bx	lr
90002ab6:	bf00      	nop
90002ab8:	2000076c 	.word	0x2000076c
90002abc:	2000008c 	.word	0x2000008c

90002ac0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90002ac0:	4b01      	ldr	r3, [pc, #4]	; (90002ac8 <HAL_GetTick+0x8>)
90002ac2:	6818      	ldr	r0, [r3, #0]
}
90002ac4:	4770      	bx	lr
90002ac6:	bf00      	nop
90002ac8:	2000076c 	.word	0x2000076c

90002acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90002acc:	b538      	push	{r3, r4, r5, lr}
90002ace:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90002ad0:	f7ff fff6 	bl	90002ac0 <HAL_GetTick>
90002ad4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90002ad6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
90002ad8:	bf1e      	ittt	ne
90002ada:	4b04      	ldrne	r3, [pc, #16]	; (90002aec <HAL_Delay+0x20>)
90002adc:	781b      	ldrbne	r3, [r3, #0]
90002ade:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
90002ae0:	f7ff ffee 	bl	90002ac0 <HAL_GetTick>
90002ae4:	1b43      	subs	r3, r0, r5
90002ae6:	42a3      	cmp	r3, r4
90002ae8:	d3fa      	bcc.n	90002ae0 <HAL_Delay+0x14>
  {
  }
}
90002aea:	bd38      	pop	{r3, r4, r5, pc}
90002aec:	2000008c 	.word	0x2000008c

90002af0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90002af0:	4907      	ldr	r1, [pc, #28]	; (90002b10 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90002af2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90002af4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90002af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90002afa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
90002afe:	0412      	lsls	r2, r2, #16
90002b00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90002b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
90002b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
90002b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
90002b0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
90002b0e:	4770      	bx	lr
90002b10:	e000ed00 	.word	0xe000ed00

90002b14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90002b14:	4b16      	ldr	r3, [pc, #88]	; (90002b70 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
90002b16:	b530      	push	{r4, r5, lr}
90002b18:	68dc      	ldr	r4, [r3, #12]
90002b1a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002b1e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002b22:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002b24:	2b04      	cmp	r3, #4
90002b26:	bf28      	it	cs
90002b28:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002b2a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002b2c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002b30:	bf8c      	ite	hi
90002b32:	3c03      	subhi	r4, #3
90002b34:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002b36:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
90002b3a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002b3c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002b40:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002b44:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002b48:	fa03 f304 	lsl.w	r3, r3, r4
90002b4c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002b50:	ea4f 1303 	mov.w	r3, r3, lsl #4
90002b54:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
90002b56:	db06      	blt.n	90002b66 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002b58:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
90002b5c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
90002b60:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90002b64:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002b66:	f000 000f 	and.w	r0, r0, #15
90002b6a:	4a02      	ldr	r2, [pc, #8]	; (90002b74 <HAL_NVIC_SetPriority+0x60>)
90002b6c:	5413      	strb	r3, [r2, r0]
90002b6e:	e7f9      	b.n	90002b64 <HAL_NVIC_SetPriority+0x50>
90002b70:	e000ed00 	.word	0xe000ed00
90002b74:	e000ed14 	.word	0xe000ed14

90002b78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90002b78:	2800      	cmp	r0, #0
90002b7a:	db07      	blt.n	90002b8c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002b7c:	0941      	lsrs	r1, r0, #5
90002b7e:	2301      	movs	r3, #1
90002b80:	f000 001f 	and.w	r0, r0, #31
90002b84:	4a02      	ldr	r2, [pc, #8]	; (90002b90 <HAL_NVIC_EnableIRQ+0x18>)
90002b86:	4083      	lsls	r3, r0
90002b88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90002b8c:	4770      	bx	lr
90002b8e:	bf00      	nop
90002b90:	e000e100 	.word	0xe000e100

90002b94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90002b94:	3801      	subs	r0, #1
90002b96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
90002b9a:	d20b      	bcs.n	90002bb4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90002b9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002ba0:	4a05      	ldr	r2, [pc, #20]	; (90002bb8 <HAL_SYSTICK_Config+0x24>)
90002ba2:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90002ba4:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90002ba6:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002ba8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90002bac:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90002bae:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90002bb0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90002bb2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
90002bb4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
90002bb6:	4770      	bx	lr
90002bb8:	e000ed00 	.word	0xe000ed00

90002bbc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90002bbc:	6803      	ldr	r3, [r0, #0]
90002bbe:	2118      	movs	r1, #24
90002bc0:	b2da      	uxtb	r2, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
90002bc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90002bc6:	3a10      	subs	r2, #16
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
90002bc8:	f023 0303 	bic.w	r3, r3, #3
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90002bcc:	fbb2 f1f1 	udiv	r1, r2, r1
{
90002bd0:	b510      	push	{r4, lr}
  if (stream_number > 3U)
90002bd2:	2a5f      	cmp	r2, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90002bd4:	4c03      	ldr	r4, [pc, #12]	; (90002be4 <DMA_CalcBaseAndBitshift+0x28>)
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
90002bd6:	bf88      	it	hi
90002bd8:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90002bda:	5c61      	ldrb	r1, [r4, r1]
90002bdc:	6583      	str	r3, [r0, #88]	; 0x58
90002bde:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
90002be0:	4618      	mov	r0, r3
90002be2:	bd10      	pop	{r4, pc}
90002be4:	900108b0 	.word	0x900108b0

90002be8 <HAL_DMA_Init>:
{
90002be8:	b570      	push	{r4, r5, r6, lr}
90002bea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90002bec:	f7ff ff68 	bl	90002ac0 <HAL_GetTick>
90002bf0:	4605      	mov	r5, r0
  if(hdma == NULL)
90002bf2:	2c00      	cmp	r4, #0
90002bf4:	d071      	beq.n	90002cda <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
90002bf6:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
90002bf8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
90002bfa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
90002bfe:	2302      	movs	r3, #2
90002c00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
90002c04:	6813      	ldr	r3, [r2, #0]
90002c06:	f023 0301 	bic.w	r3, r3, #1
90002c0a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
90002c0c:	6822      	ldr	r2, [r4, #0]
90002c0e:	6813      	ldr	r3, [r2, #0]
90002c10:	07d8      	lsls	r0, r3, #31
90002c12:	d42e      	bmi.n	90002c72 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
90002c14:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
90002c16:	4832      	ldr	r0, [pc, #200]	; (90002ce0 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90002c18:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
90002c1a:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90002c1c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
90002c20:	432b      	orrs	r3, r5
90002c22:	68e5      	ldr	r5, [r4, #12]
90002c24:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
90002c26:	6925      	ldr	r5, [r4, #16]
90002c28:	432b      	orrs	r3, r5
90002c2a:	6965      	ldr	r5, [r4, #20]
90002c2c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90002c2e:	69e5      	ldr	r5, [r4, #28]
90002c30:	430b      	orrs	r3, r1
90002c32:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
90002c34:	6a25      	ldr	r5, [r4, #32]
90002c36:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90002c38:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90002c3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
90002c3c:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
90002c3e:	bf02      	ittt	eq
90002c40:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
90002c44:	4335      	orreq	r5, r6
90002c46:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90002c48:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
90002c4a:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
90002c4c:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
90002c4e:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
90002c52:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90002c56:	d132      	bne.n	90002cbe <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
90002c58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90002c5a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
90002c5c:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90002c5e:	b375      	cbz	r5, 90002cbe <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
90002c60:	b991      	cbnz	r1, 90002c88 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
90002c62:	2801      	cmp	r0, #1
90002c64:	d020      	beq.n	90002ca8 <HAL_DMA_Init+0xc0>
90002c66:	f030 0102 	bics.w	r1, r0, #2
90002c6a:	d128      	bne.n	90002cbe <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90002c6c:	01e9      	lsls	r1, r5, #7
90002c6e:	d526      	bpl.n	90002cbe <HAL_DMA_Init+0xd6>
90002c70:	e01d      	b.n	90002cae <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90002c72:	f7ff ff25 	bl	90002ac0 <HAL_GetTick>
90002c76:	1b40      	subs	r0, r0, r5
90002c78:	2805      	cmp	r0, #5
90002c7a:	d9c7      	bls.n	90002c0c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002c7c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
90002c7e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002c80:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
90002c82:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
90002c86:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
90002c88:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
90002c8c:	d113      	bne.n	90002cb6 <HAL_DMA_Init+0xce>
    switch (tmp)
90002c8e:	2803      	cmp	r0, #3
90002c90:	d815      	bhi.n	90002cbe <HAL_DMA_Init+0xd6>
90002c92:	a101      	add	r1, pc, #4	; (adr r1, 90002c98 <HAL_DMA_Init+0xb0>)
90002c94:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
90002c98:	90002caf 	.word	0x90002caf
90002c9c:	90002c6d 	.word	0x90002c6d
90002ca0:	90002caf 	.word	0x90002caf
90002ca4:	90002ca9 	.word	0x90002ca9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90002ca8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
90002cac:	d107      	bne.n	90002cbe <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90002cae:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
90002cb0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90002cb2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
90002cb4:	e7e5      	b.n	90002c82 <HAL_DMA_Init+0x9a>
    switch (tmp)
90002cb6:	2802      	cmp	r0, #2
90002cb8:	d9f9      	bls.n	90002cae <HAL_DMA_Init+0xc6>
90002cba:	2803      	cmp	r0, #3
90002cbc:	d0d6      	beq.n	90002c6c <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
90002cbe:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90002cc0:	4620      	mov	r0, r4
90002cc2:	f7ff ff7b 	bl	90002bbc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90002cc6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
90002cc8:	233f      	movs	r3, #63	; 0x3f
90002cca:	4093      	lsls	r3, r2
90002ccc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002cce:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
90002cd0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002cd2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
90002cd4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
90002cd8:	e7d5      	b.n	90002c86 <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
90002cda:	2001      	movs	r0, #1
90002cdc:	e7d3      	b.n	90002c86 <HAL_DMA_Init+0x9e>
90002cde:	bf00      	nop
90002ce0:	f010803f 	.word	0xf010803f

90002ce4 <HAL_DMA_DeInit>:
{
90002ce4:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
90002ce6:	4605      	mov	r5, r0
90002ce8:	b320      	cbz	r0, 90002d34 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
90002cea:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
90002cee:	2b02      	cmp	r3, #2
90002cf0:	b2dc      	uxtb	r4, r3
90002cf2:	d01d      	beq.n	90002d30 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
90002cf4:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
90002cf6:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
90002cf8:	681a      	ldr	r2, [r3, #0]
90002cfa:	f022 0201 	bic.w	r2, r2, #1
90002cfe:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
90002d00:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
90002d02:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
90002d04:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
90002d06:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
90002d08:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
90002d0a:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
90002d0c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90002d0e:	f7ff ff55 	bl	90002bbc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90002d12:	6dea      	ldr	r2, [r5, #92]	; 0x5c
90002d14:	233f      	movs	r3, #63	; 0x3f
90002d16:	4093      	lsls	r3, r2
90002d18:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002d1a:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
90002d1c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
90002d20:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
90002d24:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
90002d28:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
90002d2c:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
90002d30:	4620      	mov	r0, r4
90002d32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90002d34:	2401      	movs	r4, #1
90002d36:	e7fb      	b.n	90002d30 <HAL_DMA_DeInit+0x4c>

90002d38 <HAL_DMA_Start_IT>:
{
90002d38:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
90002d3a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90002d3e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
90002d40:	2c01      	cmp	r4, #1
90002d42:	d034      	beq.n	90002dae <HAL_DMA_Start_IT+0x76>
90002d44:	2401      	movs	r4, #1
90002d46:	2500      	movs	r5, #0
90002d48:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
90002d4c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
90002d50:	2c01      	cmp	r4, #1
90002d52:	f04f 0402 	mov.w	r4, #2
90002d56:	d128      	bne.n	90002daa <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
90002d58:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
90002d5c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002d5e:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
90002d60:	6825      	ldr	r5, [r4, #0]
90002d62:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
90002d66:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
90002d68:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
90002d6a:	6883      	ldr	r3, [r0, #8]
90002d6c:	2b40      	cmp	r3, #64	; 0x40
90002d6e:	d119      	bne.n	90002da4 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
90002d70:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
90002d72:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
90002d74:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
90002d76:	233f      	movs	r3, #63	; 0x3f
90002d78:	4093      	lsls	r3, r2
90002d7a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
90002d7c:	6823      	ldr	r3, [r4, #0]
90002d7e:	f043 0316 	orr.w	r3, r3, #22
90002d82:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
90002d84:	6963      	ldr	r3, [r4, #20]
90002d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90002d8a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
90002d8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
90002d8e:	b11b      	cbz	r3, 90002d98 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
90002d90:	6823      	ldr	r3, [r4, #0]
90002d92:	f043 0308 	orr.w	r3, r3, #8
90002d96:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
90002d98:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
90002d9a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
90002d9c:	f043 0301 	orr.w	r3, r3, #1
90002da0:	6023      	str	r3, [r4, #0]
}
90002da2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
90002da4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
90002da6:	60e2      	str	r2, [r4, #12]
90002da8:	e7e4      	b.n	90002d74 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
90002daa:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
90002dae:	2002      	movs	r0, #2
90002db0:	e7f7      	b.n	90002da2 <HAL_DMA_Start_IT+0x6a>

90002db2 <HAL_DMA_Abort>:
{
90002db2:	b570      	push	{r4, r5, r6, lr}
90002db4:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90002db6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
90002db8:	f7ff fe82 	bl	90002ac0 <HAL_GetTick>
90002dbc:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
90002dbe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
90002dc2:	2b02      	cmp	r3, #2
90002dc4:	d006      	beq.n	90002dd4 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90002dc6:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
90002dc8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90002dca:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
90002dcc:	2300      	movs	r3, #0
90002dce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
90002dd2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90002dd4:	6823      	ldr	r3, [r4, #0]
90002dd6:	681a      	ldr	r2, [r3, #0]
90002dd8:	f022 0216 	bic.w	r2, r2, #22
90002ddc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
90002dde:	695a      	ldr	r2, [r3, #20]
90002de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90002de4:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
90002de6:	6c22      	ldr	r2, [r4, #64]	; 0x40
90002de8:	b90a      	cbnz	r2, 90002dee <HAL_DMA_Abort+0x3c>
90002dea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
90002dec:	b11a      	cbz	r2, 90002df6 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
90002dee:	681a      	ldr	r2, [r3, #0]
90002df0:	f022 0208 	bic.w	r2, r2, #8
90002df4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
90002df6:	681a      	ldr	r2, [r3, #0]
90002df8:	f022 0201 	bic.w	r2, r2, #1
90002dfc:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
90002dfe:	6823      	ldr	r3, [r4, #0]
90002e00:	681b      	ldr	r3, [r3, #0]
90002e02:	f013 0301 	ands.w	r3, r3, #1
90002e06:	d10a      	bne.n	90002e1e <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
90002e08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90002e0a:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
90002e0c:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
90002e0e:	408a      	lsls	r2, r1
90002e10:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
90002e12:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
90002e14:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
90002e18:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
90002e1c:	e7d9      	b.n	90002dd2 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90002e1e:	f7ff fe4f 	bl	90002ac0 <HAL_GetTick>
90002e22:	1b40      	subs	r0, r0, r5
90002e24:	2805      	cmp	r0, #5
90002e26:	d9ea      	bls.n	90002dfe <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002e28:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
90002e2a:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002e2c:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
90002e2e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
90002e30:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
90002e34:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
90002e38:	e7cb      	b.n	90002dd2 <HAL_DMA_Abort+0x20>
	...

90002e3c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
90002e3c:	2300      	movs	r3, #0
{
90002e3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
90002e40:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90002e42:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
90002e44:	4b5b      	ldr	r3, [pc, #364]	; (90002fb4 <HAL_DMA_IRQHandler+0x178>)
{
90002e46:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90002e48:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
90002e4a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90002e4c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
90002e4e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90002e50:	409a      	lsls	r2, r3
90002e52:	4232      	tst	r2, r6
90002e54:	d00c      	beq.n	90002e70 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
90002e56:	6801      	ldr	r1, [r0, #0]
90002e58:	6808      	ldr	r0, [r1, #0]
90002e5a:	0740      	lsls	r0, r0, #29
90002e5c:	d508      	bpl.n	90002e70 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
90002e5e:	6808      	ldr	r0, [r1, #0]
90002e60:	f020 0004 	bic.w	r0, r0, #4
90002e64:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
90002e66:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
90002e68:	6d62      	ldr	r2, [r4, #84]	; 0x54
90002e6a:	f042 0201 	orr.w	r2, r2, #1
90002e6e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
90002e70:	2201      	movs	r2, #1
90002e72:	409a      	lsls	r2, r3
90002e74:	4232      	tst	r2, r6
90002e76:	d008      	beq.n	90002e8a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
90002e78:	6821      	ldr	r1, [r4, #0]
90002e7a:	6949      	ldr	r1, [r1, #20]
90002e7c:	0609      	lsls	r1, r1, #24
90002e7e:	d504      	bpl.n	90002e8a <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
90002e80:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
90002e82:	6d62      	ldr	r2, [r4, #84]	; 0x54
90002e84:	f042 0202 	orr.w	r2, r2, #2
90002e88:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
90002e8a:	2204      	movs	r2, #4
90002e8c:	409a      	lsls	r2, r3
90002e8e:	4232      	tst	r2, r6
90002e90:	d008      	beq.n	90002ea4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
90002e92:	6821      	ldr	r1, [r4, #0]
90002e94:	6809      	ldr	r1, [r1, #0]
90002e96:	0788      	lsls	r0, r1, #30
90002e98:	d504      	bpl.n	90002ea4 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
90002e9a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
90002e9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
90002e9e:	f042 0204 	orr.w	r2, r2, #4
90002ea2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
90002ea4:	2210      	movs	r2, #16
90002ea6:	409a      	lsls	r2, r3
90002ea8:	4232      	tst	r2, r6
90002eaa:	d010      	beq.n	90002ece <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
90002eac:	6823      	ldr	r3, [r4, #0]
90002eae:	6819      	ldr	r1, [r3, #0]
90002eb0:	0709      	lsls	r1, r1, #28
90002eb2:	d50c      	bpl.n	90002ece <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
90002eb4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
90002eb6:	681a      	ldr	r2, [r3, #0]
90002eb8:	0350      	lsls	r0, r2, #13
90002eba:	d537      	bpl.n	90002f2c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
90002ebc:	681b      	ldr	r3, [r3, #0]
90002ebe:	0319      	lsls	r1, r3, #12
90002ec0:	d401      	bmi.n	90002ec6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
90002ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002ec4:	e000      	b.n	90002ec8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
90002ec6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
90002ec8:	b10b      	cbz	r3, 90002ece <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
90002eca:	4620      	mov	r0, r4
90002ecc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
90002ece:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90002ed0:	2220      	movs	r2, #32
90002ed2:	408a      	lsls	r2, r1
90002ed4:	4232      	tst	r2, r6
90002ed6:	d03a      	beq.n	90002f4e <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
90002ed8:	6823      	ldr	r3, [r4, #0]
90002eda:	6818      	ldr	r0, [r3, #0]
90002edc:	06c6      	lsls	r6, r0, #27
90002ede:	d536      	bpl.n	90002f4e <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
90002ee0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
90002ee2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
90002ee6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90002ee8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
90002eea:	d127      	bne.n	90002f3c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90002eec:	f022 0216 	bic.w	r2, r2, #22
90002ef0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
90002ef2:	695a      	ldr	r2, [r3, #20]
90002ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90002ef8:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
90002efa:	6c22      	ldr	r2, [r4, #64]	; 0x40
90002efc:	b90a      	cbnz	r2, 90002f02 <HAL_DMA_IRQHandler+0xc6>
90002efe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
90002f00:	b11a      	cbz	r2, 90002f0a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
90002f02:	681a      	ldr	r2, [r3, #0]
90002f04:	f022 0208 	bic.w	r2, r2, #8
90002f08:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
90002f0a:	233f      	movs	r3, #63	; 0x3f
90002f0c:	408b      	lsls	r3, r1
90002f0e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
90002f10:	2300      	movs	r3, #0
90002f12:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
90002f16:	2301      	movs	r3, #1
90002f18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
90002f1c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
90002f1e:	2b00      	cmp	r3, #0
90002f20:	d045      	beq.n	90002fae <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
90002f22:	4620      	mov	r0, r4
}
90002f24:	b003      	add	sp, #12
90002f26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
90002f2a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
90002f2c:	681a      	ldr	r2, [r3, #0]
90002f2e:	05d2      	lsls	r2, r2, #23
90002f30:	d4c7      	bmi.n	90002ec2 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
90002f32:	681a      	ldr	r2, [r3, #0]
90002f34:	f022 0208 	bic.w	r2, r2, #8
90002f38:	601a      	str	r2, [r3, #0]
90002f3a:	e7c2      	b.n	90002ec2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
90002f3c:	0350      	lsls	r0, r2, #13
90002f3e:	d527      	bpl.n	90002f90 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
90002f40:	681b      	ldr	r3, [r3, #0]
90002f42:	0319      	lsls	r1, r3, #12
90002f44:	d431      	bmi.n	90002faa <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
90002f46:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
90002f48:	b10b      	cbz	r3, 90002f4e <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
90002f4a:	4620      	mov	r0, r4
90002f4c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
90002f4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
90002f50:	b36b      	cbz	r3, 90002fae <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
90002f52:	6d63      	ldr	r3, [r4, #84]	; 0x54
90002f54:	07da      	lsls	r2, r3, #31
90002f56:	d519      	bpl.n	90002f8c <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
90002f58:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
90002f5c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
90002f5e:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
90002f62:	2305      	movs	r3, #5
90002f64:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
90002f68:	6813      	ldr	r3, [r2, #0]
90002f6a:	f023 0301 	bic.w	r3, r3, #1
90002f6e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
90002f70:	9b01      	ldr	r3, [sp, #4]
90002f72:	3301      	adds	r3, #1
90002f74:	42bb      	cmp	r3, r7
90002f76:	9301      	str	r3, [sp, #4]
90002f78:	d802      	bhi.n	90002f80 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
90002f7a:	6813      	ldr	r3, [r2, #0]
90002f7c:	07db      	lsls	r3, r3, #31
90002f7e:	d4f7      	bmi.n	90002f70 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
90002f80:	2300      	movs	r3, #0
90002f82:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
90002f86:	2301      	movs	r3, #1
90002f88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
90002f8c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
90002f8e:	e7c6      	b.n	90002f1e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
90002f90:	681a      	ldr	r2, [r3, #0]
90002f92:	f412 7280 	ands.w	r2, r2, #256	; 0x100
90002f96:	d108      	bne.n	90002faa <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
90002f98:	6819      	ldr	r1, [r3, #0]
90002f9a:	f021 0110 	bic.w	r1, r1, #16
90002f9e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
90002fa0:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
90002fa2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
90002fa6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
90002faa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90002fac:	e7cc      	b.n	90002f48 <HAL_DMA_IRQHandler+0x10c>
}
90002fae:	b003      	add	sp, #12
90002fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
90002fb2:	bf00      	nop
90002fb4:	200000b4 	.word	0x200000b4

90002fb8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
90002fb8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
90002fba:	6804      	ldr	r4, [r0, #0]
90002fbc:	9d04      	ldr	r5, [sp, #16]
90002fbe:	6c66      	ldr	r6, [r4, #68]	; 0x44
90002fc0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
90002fc4:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
90002fc8:	4333      	orrs	r3, r6
90002fca:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90002fcc:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90002fce:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
90002fd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90002fd4:	d130      	bne.n	90003038 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90002fd6:	6885      	ldr	r5, [r0, #8]
90002fd8:	b11d      	cbz	r5, 90002fe2 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90002fda:	2d01      	cmp	r5, #1
90002fdc:	d103      	bne.n	90002fe6 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90002fde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90002fe2:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90002fe4:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90002fe6:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90002fe8:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90002fec:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90002ff0:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90002ff2:	d107      	bne.n	90003004 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
90002ff4:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
90002ff6:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90002ff8:	02c9      	lsls	r1, r1, #11
90002ffa:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
90002ffe:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
90003002:	e7ee      	b.n	90002fe2 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003004:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003006:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
9000300a:	d10a      	bne.n	90003022 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
9000300c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
9000300e:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003010:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
90003012:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003014:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
90003018:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
9000301c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
90003020:	e7df      	b.n	90002fe2 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
90003022:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
90003024:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003026:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
90003028:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
9000302a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
9000302e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
90003032:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
90003036:	e7d4      	b.n	90002fe2 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003038:	60e1      	str	r1, [r4, #12]
}
9000303a:	e7d3      	b.n	90002fe4 <DMA2D_SetConfig+0x2c>

9000303c <HAL_DMA2D_MspInit>:
}
9000303c:	4770      	bx	lr

9000303e <HAL_DMA2D_Init>:
{
9000303e:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
90003040:	4604      	mov	r4, r0
90003042:	b330      	cbz	r0, 90003092 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
90003044:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
90003048:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000304c:	b91b      	cbnz	r3, 90003056 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
9000304e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
90003052:	f7ff fff3 	bl	9000303c <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90003056:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003058:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
9000305a:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000305c:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000305e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90003062:	6813      	ldr	r3, [r2, #0]
90003064:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
90003068:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
9000306a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
9000306c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
9000306e:	6b53      	ldr	r3, [r2, #52]	; 0x34
90003070:	f023 0307 	bic.w	r3, r3, #7
90003074:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90003076:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90003078:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000307a:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000307c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
90003080:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
90003084:	430b      	orrs	r3, r1
90003086:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003088:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000308a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000308c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
90003090:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
90003092:	2001      	movs	r0, #1
90003094:	e7fc      	b.n	90003090 <HAL_DMA2D_Init+0x52>

90003096 <HAL_DMA2D_Start>:
{
90003096:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
90003098:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
9000309c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
9000309e:	2d01      	cmp	r5, #1
900030a0:	f04f 0502 	mov.w	r5, #2
900030a4:	d00f      	beq.n	900030c6 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900030a6:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
900030aa:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
900030ac:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
900030ae:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
900030b2:	9500      	str	r5, [sp, #0]
900030b4:	f7ff ff80 	bl	90002fb8 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
900030b8:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
900030ba:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
900030bc:	6813      	ldr	r3, [r2, #0]
900030be:	4333      	orrs	r3, r6
900030c0:	6013      	str	r3, [r2, #0]
}
900030c2:	b002      	add	sp, #8
900030c4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
900030c6:	4628      	mov	r0, r5
900030c8:	e7fb      	b.n	900030c2 <HAL_DMA2D_Start+0x2c>

900030ca <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
900030ca:	2300      	movs	r3, #0
{
900030cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
900030ce:	9301      	str	r3, [sp, #4]
{
900030d0:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900030d2:	6803      	ldr	r3, [r0, #0]
{
900030d4:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900030d6:	681b      	ldr	r3, [r3, #0]
900030d8:	07db      	lsls	r3, r3, #31
900030da:	d418      	bmi.n	9000310e <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
900030dc:	6822      	ldr	r2, [r4, #0]
900030de:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
900030e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
900030e2:	4313      	orrs	r3, r2
  if (layer_start != 0U)
900030e4:	069e      	lsls	r6, r3, #26
900030e6:	d506      	bpl.n	900030f6 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
900030e8:	f7ff fcea 	bl	90002ac0 <HAL_GetTick>
900030ec:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900030ee:	6823      	ldr	r3, [r4, #0]
900030f0:	685a      	ldr	r2, [r3, #4]
900030f2:	06d2      	lsls	r2, r2, #27
900030f4:	d53e      	bpl.n	90003174 <HAL_DMA2D_PollForTransfer+0xaa>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
900030f6:	6823      	ldr	r3, [r4, #0]
900030f8:	2212      	movs	r2, #18
  return HAL_OK;
900030fa:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
900030fc:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
900030fe:	2301      	movs	r3, #1
90003100:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
90003104:	2300      	movs	r3, #0
90003106:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
9000310a:	b002      	add	sp, #8
9000310c:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
9000310e:	f7ff fcd7 	bl	90002ac0 <HAL_GetTick>
90003112:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003114:	6823      	ldr	r3, [r4, #0]
90003116:	685a      	ldr	r2, [r3, #4]
90003118:	0792      	lsls	r2, r2, #30
9000311a:	d4df      	bmi.n	900030dc <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
9000311c:	685a      	ldr	r2, [r3, #4]
9000311e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
90003120:	9a01      	ldr	r2, [sp, #4]
90003122:	f012 0f21 	tst.w	r2, #33	; 0x21
90003126:	d014      	beq.n	90003152 <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003128:	9a01      	ldr	r2, [sp, #4]
9000312a:	0695      	lsls	r5, r2, #26
9000312c:	d503      	bpl.n	90003136 <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
9000312e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90003130:	f042 0202 	orr.w	r2, r2, #2
90003134:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003136:	9a01      	ldr	r2, [sp, #4]
90003138:	07d0      	lsls	r0, r2, #31
9000313a:	d503      	bpl.n	90003144 <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
9000313c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000313e:	f042 0201 	orr.w	r2, r2, #1
90003142:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003144:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003146:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
90003148:	2304      	movs	r3, #4
        return HAL_ERROR;
9000314a:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
9000314c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        return HAL_ERROR;
90003150:	e7d8      	b.n	90003104 <HAL_DMA2D_PollForTransfer+0x3a>
      if(Timeout != HAL_MAX_DELAY)
90003152:	1c69      	adds	r1, r5, #1
90003154:	d0df      	beq.n	90003116 <HAL_DMA2D_PollForTransfer+0x4c>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
90003156:	f7ff fcb3 	bl	90002ac0 <HAL_GetTick>
9000315a:	1b80      	subs	r0, r0, r6
9000315c:	42a8      	cmp	r0, r5
9000315e:	d801      	bhi.n	90003164 <HAL_DMA2D_PollForTransfer+0x9a>
90003160:	2d00      	cmp	r5, #0
90003162:	d1d7      	bne.n	90003114 <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003164:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
90003166:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003168:	f043 0320 	orr.w	r3, r3, #32
9000316c:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
9000316e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
90003172:	e7c7      	b.n	90003104 <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003174:	685a      	ldr	r2, [r3, #4]
90003176:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
90003178:	9a01      	ldr	r2, [sp, #4]
9000317a:	f012 0f29 	tst.w	r2, #41	; 0x29
9000317e:	d016      	beq.n	900031ae <HAL_DMA2D_PollForTransfer+0xe4>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90003180:	9a01      	ldr	r2, [sp, #4]
90003182:	0716      	lsls	r6, r2, #28
90003184:	d503      	bpl.n	9000318e <HAL_DMA2D_PollForTransfer+0xc4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90003186:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90003188:	f042 0204 	orr.w	r2, r2, #4
9000318c:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
9000318e:	9a01      	ldr	r2, [sp, #4]
90003190:	0695      	lsls	r5, r2, #26
90003192:	d503      	bpl.n	9000319c <HAL_DMA2D_PollForTransfer+0xd2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003194:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90003196:	f042 0202 	orr.w	r2, r2, #2
9000319a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000319c:	9a01      	ldr	r2, [sp, #4]
9000319e:	07d0      	lsls	r0, r2, #31
900031a0:	d503      	bpl.n	900031aa <HAL_DMA2D_PollForTransfer+0xe0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900031a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
900031a4:	f042 0201 	orr.w	r2, r2, #1
900031a8:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900031aa:	2229      	movs	r2, #41	; 0x29
900031ac:	e7cb      	b.n	90003146 <HAL_DMA2D_PollForTransfer+0x7c>
      if(Timeout != HAL_MAX_DELAY)
900031ae:	1c69      	adds	r1, r5, #1
900031b0:	d09e      	beq.n	900030f0 <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
900031b2:	f7ff fc85 	bl	90002ac0 <HAL_GetTick>
900031b6:	1b80      	subs	r0, r0, r6
900031b8:	42a8      	cmp	r0, r5
900031ba:	d8d3      	bhi.n	90003164 <HAL_DMA2D_PollForTransfer+0x9a>
900031bc:	2d00      	cmp	r5, #0
900031be:	d196      	bne.n	900030ee <HAL_DMA2D_PollForTransfer+0x24>
900031c0:	e7d0      	b.n	90003164 <HAL_DMA2D_PollForTransfer+0x9a>
	...

900031c4 <HAL_DMA2D_ConfigLayer>:
{
900031c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
900031c6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
900031ca:	2b01      	cmp	r3, #1
900031cc:	f04f 0302 	mov.w	r3, #2
900031d0:	d02b      	beq.n	9000322a <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900031d2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
900031d6:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
900031d8:	eb00 1301 	add.w	r3, r0, r1, lsl #4
900031dc:	4f1c      	ldr	r7, [pc, #112]	; (90003250 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
900031de:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
900031e2:	010e      	lsls	r6, r1, #4
900031e4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
900031e6:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
900031ea:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900031ee:	3c09      	subs	r4, #9
900031f0:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900031f2:	bf96      	itet	ls
900031f4:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900031f8:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900031fc:	431a      	orrls	r2, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900031fe:	6803      	ldr	r3, [r0, #0]
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
90003200:	b9a9      	cbnz	r1, 9000322e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003202:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003204:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003206:	ea01 0107 	and.w	r1, r1, r7
9000320a:	ea42 0201 	orr.w	r2, r2, r1
9000320e:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003210:	6982      	ldr	r2, [r0, #24]
90003212:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003214:	d803      	bhi.n	9000321e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
90003216:	6a42      	ldr	r2, [r0, #36]	; 0x24
90003218:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
9000321c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000321e:	2301      	movs	r3, #1
90003220:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
90003224:	2300      	movs	r3, #0
90003226:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
9000322a:	4618      	mov	r0, r3
}
9000322c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000322e:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003230:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003232:	ea01 0107 	and.w	r1, r1, r7
90003236:	ea42 0201 	orr.w	r2, r2, r1
9000323a:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000323c:	eb00 0206 	add.w	r2, r0, r6
90003240:	6992      	ldr	r2, [r2, #24]
90003242:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003244:	d8eb      	bhi.n	9000321e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
90003246:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
9000324a:	621d      	str	r5, [r3, #32]
9000324c:	e7e7      	b.n	9000321e <HAL_DMA2D_ConfigLayer+0x5a>
9000324e:	bf00      	nop
90003250:	00fcfff0 	.word	0x00fcfff0

90003254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90003254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90003258:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000325a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 90003410 <HAL_GPIO_Init+0x1bc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
9000325e:	4a6a      	ldr	r2, [pc, #424]	; (90003408 <HAL_GPIO_Init+0x1b4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90003260:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 90003414 <HAL_GPIO_Init+0x1c0>
    ioposition = ((uint32_t)0x01) << position;
90003264:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90003266:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
90003268:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
9000326a:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
9000326e:	43ac      	bics	r4, r5
90003270:	f040 80b1 	bne.w	900033d6 <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90003274:	684c      	ldr	r4, [r1, #4]
90003276:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
9000327a:	2503      	movs	r5, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
9000327c:	f024 0c10 	bic.w	ip, r4, #16
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90003280:	fa05 f50e 	lsl.w	r5, r5, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90003284:	f10c 37ff 	add.w	r7, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90003288:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
9000328a:	2f01      	cmp	r7, #1
9000328c:	d810      	bhi.n	900032b0 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
9000328e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90003290:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
90003294:	68cf      	ldr	r7, [r1, #12]
90003296:	fa07 f70e 	lsl.w	r7, r7, lr
9000329a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
9000329e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
900032a0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
900032a2:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
900032a6:	0927      	lsrs	r7, r4, #4
900032a8:	409f      	lsls	r7, r3
900032aa:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
900032ae:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
900032b0:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
900032b2:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
900032b6:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
900032ba:	688f      	ldr	r7, [r1, #8]
900032bc:	fa07 f70e 	lsl.w	r7, r7, lr
900032c0:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
900032c4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
900032c6:	d116      	bne.n	900032f6 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
900032c8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
900032cc:	f003 0b07 	and.w	fp, r3, #7
900032d0:	f04f 0c0f 	mov.w	ip, #15
900032d4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
900032d8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
900032dc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
900032e0:	fa0c fc0b 	lsl.w	ip, ip, fp
900032e4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
900032e8:	690f      	ldr	r7, [r1, #16]
900032ea:	fa07 f70b 	lsl.w	r7, r7, fp
900032ee:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
900032f2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
900032f6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
900032f8:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
900032fa:	f004 0503 	and.w	r5, r4, #3
900032fe:	fa05 f50e 	lsl.w	r5, r5, lr
90003302:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
90003304:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
90003306:	00e5      	lsls	r5, r4, #3
90003308:	d565      	bpl.n	900033d6 <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000330a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
9000330e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90003312:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003316:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
9000331a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
9000331e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003322:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
90003326:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
9000332a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
9000332e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
90003332:	9501      	str	r5, [sp, #4]
90003334:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90003336:	250f      	movs	r5, #15
        temp = SYSCFG->EXTICR[position >> 2];
90003338:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
9000333c:	fa05 f50c 	lsl.w	r5, r5, ip
90003340:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90003344:	4d31      	ldr	r5, [pc, #196]	; (9000340c <HAL_GPIO_Init+0x1b8>)
90003346:	42a8      	cmp	r0, r5
90003348:	d04c      	beq.n	900033e4 <HAL_GPIO_Init+0x190>
9000334a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000334e:	42a8      	cmp	r0, r5
90003350:	d04a      	beq.n	900033e8 <HAL_GPIO_Init+0x194>
90003352:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90003356:	42a8      	cmp	r0, r5
90003358:	d048      	beq.n	900033ec <HAL_GPIO_Init+0x198>
9000335a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000335e:	42a8      	cmp	r0, r5
90003360:	d046      	beq.n	900033f0 <HAL_GPIO_Init+0x19c>
90003362:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90003366:	42a8      	cmp	r0, r5
90003368:	d044      	beq.n	900033f4 <HAL_GPIO_Init+0x1a0>
9000336a:	4548      	cmp	r0, r9
9000336c:	d044      	beq.n	900033f8 <HAL_GPIO_Init+0x1a4>
9000336e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
90003372:	42a8      	cmp	r0, r5
90003374:	d042      	beq.n	900033fc <HAL_GPIO_Init+0x1a8>
90003376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000337a:	42a8      	cmp	r0, r5
9000337c:	d040      	beq.n	90003400 <HAL_GPIO_Init+0x1ac>
9000337e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90003382:	42a8      	cmp	r0, r5
90003384:	d03e      	beq.n	90003404 <HAL_GPIO_Init+0x1b0>
90003386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000338a:	42a8      	cmp	r0, r5
9000338c:	bf0c      	ite	eq
9000338e:	2509      	moveq	r5, #9
90003390:	250a      	movne	r5, #10
90003392:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
90003396:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
9000339a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
9000339e:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
900033a0:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
900033a4:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
900033a6:	bf0c      	ite	eq
900033a8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
900033aa:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
900033ac:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
900033b0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
900033b2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
900033b4:	bf0c      	ite	eq
900033b6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
900033b8:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
900033ba:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
900033be:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
900033c0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
900033c2:	bf0c      	ite	eq
900033c4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
900033c6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
900033c8:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
900033ca:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
900033cc:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
900033ce:	bf54      	ite	pl
900033d0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
900033d2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
900033d4:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
900033d6:	3301      	adds	r3, #1
900033d8:	2b10      	cmp	r3, #16
900033da:	f47f af43 	bne.w	90003264 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
900033de:	b003      	add	sp, #12
900033e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
900033e4:	2500      	movs	r5, #0
900033e6:	e7d4      	b.n	90003392 <HAL_GPIO_Init+0x13e>
900033e8:	2501      	movs	r5, #1
900033ea:	e7d2      	b.n	90003392 <HAL_GPIO_Init+0x13e>
900033ec:	2502      	movs	r5, #2
900033ee:	e7d0      	b.n	90003392 <HAL_GPIO_Init+0x13e>
900033f0:	2503      	movs	r5, #3
900033f2:	e7ce      	b.n	90003392 <HAL_GPIO_Init+0x13e>
900033f4:	2504      	movs	r5, #4
900033f6:	e7cc      	b.n	90003392 <HAL_GPIO_Init+0x13e>
900033f8:	2505      	movs	r5, #5
900033fa:	e7ca      	b.n	90003392 <HAL_GPIO_Init+0x13e>
900033fc:	2506      	movs	r5, #6
900033fe:	e7c8      	b.n	90003392 <HAL_GPIO_Init+0x13e>
90003400:	2507      	movs	r5, #7
90003402:	e7c6      	b.n	90003392 <HAL_GPIO_Init+0x13e>
90003404:	2508      	movs	r5, #8
90003406:	e7c4      	b.n	90003392 <HAL_GPIO_Init+0x13e>
90003408:	40013c00 	.word	0x40013c00
9000340c:	40020000 	.word	0x40020000
90003410:	40023800 	.word	0x40023800
90003414:	40021400 	.word	0x40021400

90003418 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
90003418:	b10a      	cbz	r2, 9000341e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
9000341a:	6181      	str	r1, [r0, #24]
  }
}
9000341c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
9000341e:	0409      	lsls	r1, r1, #16
90003420:	e7fb      	b.n	9000341a <HAL_GPIO_WritePin+0x2>

90003422 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
90003422:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90003426:	4605      	mov	r5, r0
90003428:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
9000342a:	f895 42b8 	ldrb.w	r4, [r5, #696]	; 0x2b8
{
9000342e:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
90003432:	2c01      	cmp	r4, #1
{
90003434:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
90003438:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
9000343c:	d025      	beq.n	9000348a <HAL_HCD_HC_Init+0x68>
9000343e:	2401      	movs	r4, #1
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
90003440:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
90003442:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
90003444:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  __HAL_LOCK(hhcd);
90003448:	f885 42b8 	strb.w	r4, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
9000344c:	2428      	movs	r4, #40	; 0x28
9000344e:	fb04 5401 	mla	r4, r4, r1, r5
90003452:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
90003456:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
9000345a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
9000345e:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
90003462:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
90003466:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
9000346a:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
9000346e:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
90003472:	6828      	ldr	r0, [r5, #0]
90003474:	f8cd e000 	str.w	lr, [sp]
90003478:	e9cd 8901 	strd	r8, r9, [sp, #4]
9000347c:	f002 fbdc 	bl	90005c38 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
90003480:	f885 72b8 	strb.w	r7, [r5, #696]	; 0x2b8

  return status;
}
90003484:	b005      	add	sp, #20
90003486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
9000348a:	2002      	movs	r0, #2
9000348c:	e7fa      	b.n	90003484 <HAL_HCD_HC_Init+0x62>

9000348e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
9000348e:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
90003490:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
90003494:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
90003496:	2b01      	cmp	r3, #1
90003498:	d009      	beq.n	900034ae <HAL_HCD_HC_Halt+0x20>
9000349a:	2301      	movs	r3, #1
9000349c:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900034a0:	6800      	ldr	r0, [r0, #0]
900034a2:	f002 fc42 	bl	90005d2a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
900034a6:	2000      	movs	r0, #0
900034a8:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
900034ac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
900034ae:	2002      	movs	r0, #2
900034b0:	e7fc      	b.n	900034ac <HAL_HCD_HC_Halt+0x1e>

900034b2 <HAL_HCD_Init>:
{
900034b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
900034b6:	4606      	mov	r6, r0
{
900034b8:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
900034ba:	2800      	cmp	r0, #0
900034bc:	d043      	beq.n	90003546 <HAL_HCD_Init+0x94>
  if (hhcd->State == HAL_HCD_STATE_RESET)
900034be:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
900034c2:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
900034c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900034c8:	b91b      	cbnz	r3, 900034d2 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
900034ca:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
900034ce:	f007 fac1 	bl	9000aa54 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
900034d2:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
900034d4:	466d      	mov	r5, sp
900034d6:	f106 0804 	add.w	r8, r6, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
900034da:	4637      	mov	r7, r6
  hhcd->State = HAL_HCD_STATE_BUSY;
900034dc:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
900034e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
900034e2:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
900034e4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
900034e8:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
900034ec:	bf08      	it	eq
900034ee:	6133      	streq	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
900034f0:	f002 fa67 	bl	900059c2 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
900034f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
900034f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
900034f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
900034fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
900034fc:	e894 0003 	ldmia.w	r4, {r0, r1}
90003500:	e885 0003 	stmia.w	r5, {r0, r1}
90003504:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
90003508:	6830      	ldr	r0, [r6, #0]
9000350a:	f002 fa19 	bl	90005940 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
9000350e:	f857 0b10 	ldr.w	r0, [r7], #16
90003512:	2101      	movs	r1, #1
90003514:	f002 fa5b 	bl	900059ce <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
90003518:	46ec      	mov	ip, sp
9000351a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9000351c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90003520:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90003522:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90003526:	e894 0003 	ldmia.w	r4, {r0, r1}
9000352a:	e885 0003 	stmia.w	r5, {r0, r1}
9000352e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
90003532:	6830      	ldr	r0, [r6, #0]
90003534:	f002 fb08 	bl	90005b48 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
90003538:	2301      	movs	r3, #1
  return HAL_OK;
9000353a:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
9000353c:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
}
90003540:	b00a      	add	sp, #40	; 0x28
90003542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
90003546:	2001      	movs	r0, #1
90003548:	e7fa      	b.n	90003540 <HAL_HCD_Init+0x8e>
	...

9000354c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
9000354c:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
9000354e:	2628      	movs	r6, #40	; 0x28
{
90003550:	f89d 7010 	ldrb.w	r7, [sp, #16]
90003554:	9d05      	ldr	r5, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
90003556:	fb06 0601 	mla	r6, r6, r1, r0
{
9000355a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
9000355e:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
90003562:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
90003566:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f

  if (token == 0U)
9000356a:	b97f      	cbnz	r7, 9000358c <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
9000356c:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
9000356e:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
90003570:	f886 c03d 	strb.w	ip, [r6, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
90003574:	f886 7042 	strb.w	r7, [r6, #66]	; 0x42
  switch (ep_type)
90003578:	d03c      	beq.n	900035f4 <HAL_HCD_HC_SubmitRequest+0xa8>
9000357a:	42bb      	cmp	r3, r7
9000357c:	d03a      	beq.n	900035f4 <HAL_HCD_HC_SubmitRequest+0xa8>
9000357e:	2b01      	cmp	r3, #1
90003580:	d11f      	bne.n	900035c2 <HAL_HCD_HC_SubmitRequest+0x76>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
90003582:	2328      	movs	r3, #40	; 0x28
90003584:	2200      	movs	r2, #0
90003586:	fb03 0301 	mla	r3, r3, r1, r0
9000358a:	e030      	b.n	900035ee <HAL_HCD_HC_SubmitRequest+0xa2>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
9000358c:	f04f 0c02 	mov.w	ip, #2
90003590:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch (ep_type)
90003594:	2b03      	cmp	r3, #3
90003596:	d814      	bhi.n	900035c2 <HAL_HCD_HC_SubmitRequest+0x76>
90003598:	a601      	add	r6, pc, #4	; (adr r6, 900035a0 <HAL_HCD_HC_SubmitRequest+0x54>)
9000359a:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
9000359e:	bf00      	nop
900035a0:	900035b1 	.word	0x900035b1
900035a4:	90003583 	.word	0x90003583
900035a8:	900035f5 	.word	0x900035f5
900035ac:	900035f5 	.word	0x900035f5
      if ((token == 1U) && (direction == 0U)) /*send data */
900035b0:	2f01      	cmp	r7, #1
900035b2:	d106      	bne.n	900035c2 <HAL_HCD_HC_SubmitRequest+0x76>
900035b4:	b92a      	cbnz	r2, 900035c2 <HAL_HCD_HC_SubmitRequest+0x76>
        if (length == 0U)
900035b6:	2328      	movs	r3, #40	; 0x28
          hhcd->hc[ch_num].toggle_out = 1U;
900035b8:	fb03 0301 	mla	r3, r3, r1, r0
        if (length == 0U)
900035bc:	b99c      	cbnz	r4, 900035e6 <HAL_HCD_HC_SubmitRequest+0x9a>
          hhcd->hc[ch_num].toggle_out = 1U;
900035be:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
900035c2:	2228      	movs	r2, #40	; 0x28
900035c4:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
900035c8:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900035cc:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
900035ce:	e9c3 5411 	strd	r5, r4, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_count = 0U;
900035d2:	2400      	movs	r4, #0
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900035d4:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
900035d6:	f8a3 405c 	strh.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
900035da:	64dc      	str	r4, [r3, #76]	; 0x4c
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900035dc:	7c02      	ldrb	r2, [r0, #16]
900035de:	6800      	ldr	r0, [r0, #0]
}
900035e0:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900035e2:	f002 bc07 	b.w	90005df4 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
900035e6:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
900035ea:	2e00      	cmp	r6, #0
900035ec:	d1e9      	bne.n	900035c2 <HAL_HCD_HC_SubmitRequest+0x76>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
900035ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
900035f2:	e7e6      	b.n	900035c2 <HAL_HCD_HC_SubmitRequest+0x76>
      if (direction == 0U)
900035f4:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
900035f6:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
900035fa:	b92a      	cbnz	r2, 90003608 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
900035fc:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
90003600:	2e00      	cmp	r6, #0
90003602:	d0f4      	beq.n	900035ee <HAL_HCD_HC_SubmitRequest+0xa2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90003604:	2202      	movs	r2, #2
90003606:	e7f2      	b.n	900035ee <HAL_HCD_HC_SubmitRequest+0xa2>
        if (hhcd->hc[ch_num].toggle_in == 0U)
90003608:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
9000360c:	2a00      	cmp	r2, #0
9000360e:	d1f9      	bne.n	90003604 <HAL_HCD_HC_SubmitRequest+0xb8>
90003610:	e7ed      	b.n	900035ee <HAL_HCD_HC_SubmitRequest+0xa2>
90003612:	bf00      	nop

90003614 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90003614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003618:	6806      	ldr	r6, [r0, #0]
{
9000361a:	b085      	sub	sp, #20
9000361c:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
9000361e:	4630      	mov	r0, r6
90003620:	f002 fa33 	bl	90005a8a <USB_GetMode>
90003624:	2801      	cmp	r0, #1
90003626:	f040 80e1 	bne.w	900037ec <HAL_HCD_IRQHandler+0x1d8>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
9000362a:	6828      	ldr	r0, [r5, #0]
9000362c:	f002 fa29 	bl	90005a82 <USB_ReadInterrupts>
90003630:	2800      	cmp	r0, #0
90003632:	f000 80db 	beq.w	900037ec <HAL_HCD_IRQHandler+0x1d8>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90003636:	6828      	ldr	r0, [r5, #0]
90003638:	f002 fa23 	bl	90005a82 <USB_ReadInterrupts>
9000363c:	0284      	lsls	r4, r0, #10
9000363e:	d503      	bpl.n	90003648 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90003640:	682b      	ldr	r3, [r5, #0]
90003642:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
90003646:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90003648:	6828      	ldr	r0, [r5, #0]
9000364a:	f002 fa1a 	bl	90005a82 <USB_ReadInterrupts>
9000364e:	02c0      	lsls	r0, r0, #11
90003650:	d503      	bpl.n	9000365a <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90003652:	682b      	ldr	r3, [r5, #0]
90003654:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
90003658:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
9000365a:	6828      	ldr	r0, [r5, #0]
9000365c:	f002 fa11 	bl	90005a82 <USB_ReadInterrupts>
90003660:	0141      	lsls	r1, r0, #5
90003662:	d503      	bpl.n	9000366c <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90003664:	682b      	ldr	r3, [r5, #0]
90003666:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
9000366a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
9000366c:	6828      	ldr	r0, [r5, #0]
9000366e:	f002 fa08 	bl	90005a82 <USB_ReadInterrupts>
90003672:	0782      	lsls	r2, r0, #30
90003674:	d502      	bpl.n	9000367c <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90003676:	682b      	ldr	r3, [r5, #0]
90003678:	2202      	movs	r2, #2
9000367a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
9000367c:	6828      	ldr	r0, [r5, #0]
9000367e:	f002 fa00 	bl	90005a82 <USB_ReadInterrupts>
90003682:	0083      	lsls	r3, r0, #2
90003684:	d50e      	bpl.n	900036a4 <HAL_HCD_IRQHandler+0x90>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
90003686:	682b      	ldr	r3, [r5, #0]
90003688:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
9000368c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
9000368e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
90003692:	07df      	lsls	r7, r3, #31
90003694:	d406      	bmi.n	900036a4 <HAL_HCD_IRQHandler+0x90>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90003696:	4628      	mov	r0, r5
90003698:	f007 fac0 	bl	9000ac1c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
9000369c:	2101      	movs	r1, #1
9000369e:	6828      	ldr	r0, [r5, #0]
900036a0:	f002 f9f7 	bl	90005a92 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
900036a4:	6828      	ldr	r0, [r5, #0]
900036a6:	f002 f9ec 	bl	90005a82 <USB_ReadInterrupts>
900036aa:	01c4      	lsls	r4, r0, #7
900036ac:	d53c      	bpl.n	90003728 <HAL_HCD_IRQHandler+0x114>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
900036ae:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
900036b0:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
900036b4:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
900036b6:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
900036ba:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
900036bc:	9b03      	ldr	r3, [sp, #12]
900036be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
900036c2:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
900036c4:	9b02      	ldr	r3, [sp, #8]
900036c6:	0798      	lsls	r0, r3, #30
900036c8:	d509      	bpl.n	900036de <HAL_HCD_IRQHandler+0xca>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
900036ca:	9b02      	ldr	r3, [sp, #8]
900036cc:	07d9      	lsls	r1, r3, #31
900036ce:	d502      	bpl.n	900036d6 <HAL_HCD_IRQHandler+0xc2>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
900036d0:	4628      	mov	r0, r5
900036d2:	f007 fa9f 	bl	9000ac14 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
900036d6:	9b03      	ldr	r3, [sp, #12]
900036d8:	f043 0302 	orr.w	r3, r3, #2
900036dc:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
900036de:	9b02      	ldr	r3, [sp, #8]
900036e0:	071a      	lsls	r2, r3, #28
900036e2:	d517      	bpl.n	90003714 <HAL_HCD_IRQHandler+0x100>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
900036e4:	9b03      	ldr	r3, [sp, #12]
900036e6:	f043 0308 	orr.w	r3, r3, #8
900036ea:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
900036ec:	9b02      	ldr	r3, [sp, #8]
900036ee:	075b      	lsls	r3, r3, #29
900036f0:	f140 8087 	bpl.w	90003802 <HAL_HCD_IRQHandler+0x1ee>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
900036f4:	69a9      	ldr	r1, [r5, #24]
900036f6:	2902      	cmp	r1, #2
900036f8:	d17b      	bne.n	900037f2 <HAL_HCD_IRQHandler+0x1de>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
900036fa:	9b02      	ldr	r3, [sp, #8]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
900036fc:	6828      	ldr	r0, [r5, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
900036fe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
90003702:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90003706:	bf18      	it	ne
90003708:	2101      	movne	r1, #1
9000370a:	f002 f9c2 	bl	90005a92 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
9000370e:	4628      	mov	r0, r5
90003710:	f007 fa88 	bl	9000ac24 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90003714:	9b02      	ldr	r3, [sp, #8]
90003716:	069f      	lsls	r7, r3, #26
90003718:	d503      	bpl.n	90003722 <HAL_HCD_IRQHandler+0x10e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
9000371a:	9b03      	ldr	r3, [sp, #12]
9000371c:	f043 0320 	orr.w	r3, r3, #32
90003720:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90003722:	9b03      	ldr	r3, [sp, #12]
90003724:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90003728:	6828      	ldr	r0, [r5, #0]
9000372a:	f002 f9aa 	bl	90005a82 <USB_ReadInterrupts>
9000372e:	0704      	lsls	r4, r0, #28
90003730:	d505      	bpl.n	9000373e <HAL_HCD_IRQHandler+0x12a>
      HAL_HCD_SOF_Callback(hhcd);
90003732:	4628      	mov	r0, r5
90003734:	f007 fa6a 	bl	9000ac0c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
90003738:	682b      	ldr	r3, [r5, #0]
9000373a:	2208      	movs	r2, #8
9000373c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
9000373e:	6828      	ldr	r0, [r5, #0]
90003740:	f002 f99f 	bl	90005a82 <USB_ReadInterrupts>
90003744:	0180      	lsls	r0, r0, #6
90003746:	d512      	bpl.n	9000376e <HAL_HCD_IRQHandler+0x15a>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90003748:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
9000374a:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
9000374e:	f002 fae7 	bl	90005d20 <USB_HC_ReadInterrupt>
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003752:	2728      	movs	r7, #40	; 0x28
90003754:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
90003758:	f04f 0902 	mov.w	r9, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
9000375c:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
9000375e:	9300      	str	r3, [sp, #0]
90003760:	68ab      	ldr	r3, [r5, #8]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003762:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003764:	4553      	cmp	r3, sl
90003766:	d850      	bhi.n	9000380a <HAL_HCD_IRQHandler+0x1f6>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
90003768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
9000376c:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
9000376e:	6828      	ldr	r0, [r5, #0]
90003770:	f002 f987 	bl	90005a82 <USB_ReadInterrupts>
90003774:	06c3      	lsls	r3, r0, #27
90003776:	d539      	bpl.n	900037ec <HAL_HCD_IRQHandler+0x1d8>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90003778:	682e      	ldr	r6, [r5, #0]
9000377a:	69b3      	ldr	r3, [r6, #24]
9000377c:	f023 0310 	bic.w	r3, r3, #16
90003780:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
90003782:	6a37      	ldr	r7, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90003784:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
90003788:	2b02      	cmp	r3, #2
9000378a:	d12a      	bne.n	900037e2 <HAL_HCD_IRQHandler+0x1ce>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
9000378c:	f3c7 180a 	ubfx	r8, r7, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
90003790:	f1b8 0f00 	cmp.w	r8, #0
90003794:	d025      	beq.n	900037e2 <HAL_HCD_IRQHandler+0x1ce>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
90003796:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
9000379a:	2428      	movs	r4, #40	; 0x28
9000379c:	fb04 5407 	mla	r4, r4, r7, r5
900037a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
900037a2:	b1f1      	cbz	r1, 900037e2 <HAL_HCD_IRQHandler+0x1ce>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
900037a4:	4642      	mov	r2, r8
900037a6:	4630      	mov	r0, r6
900037a8:	f002 f95d 	bl	90005a66 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
900037ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
900037ae:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
900037b2:	017a      	lsls	r2, r7, #5
        hhcd->hc[ch_num].xfer_buff += pktcnt;
900037b4:	4443      	add	r3, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
900037b6:	eb06 1747 	add.w	r7, r6, r7, lsl #5
        hhcd->hc[ch_num].xfer_buff += pktcnt;
900037ba:	6463      	str	r3, [r4, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
900037bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
900037be:	6939      	ldr	r1, [r7, #16]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
900037c0:	4443      	add	r3, r8
900037c2:	64e3      	str	r3, [r4, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
900037c4:	4bb0      	ldr	r3, [pc, #704]	; (90003a88 <HAL_HCD_IRQHandler+0x474>)
900037c6:	400b      	ands	r3, r1
900037c8:	b15b      	cbz	r3, 900037e2 <HAL_HCD_IRQHandler+0x1ce>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
900037ca:	58b3      	ldr	r3, [r6, r2]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900037cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900037d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
900037d4:	50b3      	str	r3, [r6, r2]
          hhcd->hc[ch_num].toggle_in ^= 1U;
900037d6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
900037da:	f083 0301 	eor.w	r3, r3, #1
900037de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900037e2:	682a      	ldr	r2, [r5, #0]
900037e4:	6993      	ldr	r3, [r2, #24]
900037e6:	f043 0310 	orr.w	r3, r3, #16
900037ea:	6193      	str	r3, [r2, #24]
}
900037ec:	b005      	add	sp, #20
900037ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
900037f2:	68eb      	ldr	r3, [r5, #12]
900037f4:	2b01      	cmp	r3, #1
900037f6:	d18a      	bne.n	9000370e <HAL_HCD_IRQHandler+0xfa>
          USBx_HOST->HFIR = 60000U;
900037f8:	f64e 2260 	movw	r2, #60000	; 0xea60
900037fc:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
90003800:	e785      	b.n	9000370e <HAL_HCD_IRQHandler+0xfa>
      HAL_HCD_PortDisabled_Callback(hhcd);
90003802:	4628      	mov	r0, r5
90003804:	f007 fa12 	bl	9000ac2c <HAL_HCD_PortDisabled_Callback>
90003808:	e784      	b.n	90003714 <HAL_HCD_IRQHandler+0x100>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
9000380a:	f00a 030f 	and.w	r3, sl, #15
9000380e:	9a01      	ldr	r2, [sp, #4]
90003810:	fa22 f303 	lsr.w	r3, r2, r3
90003814:	07d9      	lsls	r1, r3, #31
90003816:	f140 8093 	bpl.w	90003940 <HAL_HCD_IRQHandler+0x32c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
9000381a:	9b00      	ldr	r3, [sp, #0]
9000381c:	fa5f f68a 	uxtb.w	r6, sl
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
90003820:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90003824:	6819      	ldr	r1, [r3, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
90003826:	ea4f 1b46 	mov.w	fp, r6, lsl #5
9000382a:	eb08 1446 	add.w	r4, r8, r6, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
9000382e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
90003832:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90003834:	f000 811d 	beq.w	90003a72 <HAL_HCD_IRQHandler+0x45e>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
90003838:	074a      	lsls	r2, r1, #29
9000383a:	d513      	bpl.n	90003864 <HAL_HCD_IRQHandler+0x250>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
9000383c:	2104      	movs	r1, #4
9000383e:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003840:	68e1      	ldr	r1, [r4, #12]
90003842:	f041 0102 	orr.w	r1, r1, #2
90003846:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
90003848:	68a1      	ldr	r1, [r4, #8]
9000384a:	0588      	lsls	r0, r1, #22
9000384c:	d54a      	bpl.n	900038e4 <HAL_HCD_IRQHandler+0x2d0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000384e:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003850:	4631      	mov	r1, r6
90003852:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003854:	f043 0302 	orr.w	r3, r3, #2
90003858:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000385a:	f002 fa66 	bl	90005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
9000385e:	f44f 7300 	mov.w	r3, #512	; 0x200
90003862:	e0f9      	b.n	90003a58 <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
90003864:	68a1      	ldr	r1, [r4, #8]
90003866:	05cb      	lsls	r3, r1, #23
90003868:	d510      	bpl.n	9000388c <HAL_HCD_IRQHandler+0x278>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
9000386a:	f44f 7180 	mov.w	r1, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
9000386e:	f04f 0c07 	mov.w	ip, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
90003872:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
90003874:	fb07 5106 	mla	r1, r7, r6, r5
90003878:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000387c:	68e1      	ldr	r1, [r4, #12]
9000387e:	f041 0102 	orr.w	r1, r1, #2
90003882:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003884:	4631      	mov	r1, r6
90003886:	f002 fa50 	bl	90005d2a <USB_HC_Halt>
9000388a:	e7dd      	b.n	90003848 <HAL_HCD_IRQHandler+0x234>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
9000388c:	68a1      	ldr	r1, [r4, #8]
9000388e:	0689      	lsls	r1, r1, #26
90003890:	d502      	bpl.n	90003898 <HAL_HCD_IRQHandler+0x284>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
90003892:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
90003894:	60a1      	str	r1, [r4, #8]
90003896:	e7d7      	b.n	90003848 <HAL_HCD_IRQHandler+0x234>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
90003898:	68a1      	ldr	r1, [r4, #8]
9000389a:	070a      	lsls	r2, r1, #28
9000389c:	d50e      	bpl.n	900038bc <HAL_HCD_IRQHandler+0x2a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000389e:	68e1      	ldr	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
900038a0:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900038a4:	f041 0102 	orr.w	r1, r1, #2
900038a8:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
900038aa:	fb07 5106 	mla	r1, r7, r6, r5
900038ae:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
900038b2:	2110      	movs	r1, #16
900038b4:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
900038b6:	2108      	movs	r1, #8
900038b8:	60a1      	str	r1, [r4, #8]
900038ba:	e7e3      	b.n	90003884 <HAL_HCD_IRQHandler+0x270>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
900038bc:	68a1      	ldr	r1, [r4, #8]
900038be:	054b      	lsls	r3, r1, #21
900038c0:	d5c2      	bpl.n	90003848 <HAL_HCD_IRQHandler+0x234>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900038c2:	68e1      	ldr	r1, [r4, #12]
900038c4:	f041 0102 	orr.w	r1, r1, #2
900038c8:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900038ca:	4631      	mov	r1, r6
900038cc:	f002 fa2d 	bl	90005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
900038d0:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
900038d2:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
900038d4:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
900038d6:	fb07 5106 	mla	r1, r7, r6, r5
900038da:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
900038de:	f44f 6180 	mov.w	r1, #1024	; 0x400
900038e2:	e7d7      	b.n	90003894 <HAL_HCD_IRQHandler+0x280>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
900038e4:	68a1      	ldr	r1, [r4, #8]
900038e6:	07c9      	lsls	r1, r1, #31
900038e8:	d54b      	bpl.n	90003982 <HAL_HCD_IRQHandler+0x36e>
    if (hhcd->Init.dma_enable != 0U)
900038ea:	6929      	ldr	r1, [r5, #16]
900038ec:	b149      	cbz	r1, 90003902 <HAL_HCD_IRQHandler+0x2ee>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900038ee:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
900038f0:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900038f4:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
900038f8:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
900038fc:	1a09      	subs	r1, r1, r0
900038fe:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
90003902:	fb07 5106 	mla	r1, r7, r6, r5
90003906:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
90003908:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
9000390a:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
9000390e:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
90003910:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
90003912:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
90003916:	f012 0ffd 	tst.w	r2, #253	; 0xfd
9000391a:	d117      	bne.n	9000394c <HAL_HCD_IRQHandler+0x338>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000391c:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000391e:	4631      	mov	r1, r6
90003920:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003922:	f043 0302 	orr.w	r3, r3, #2
90003926:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003928:	f002 f9ff 	bl	90005d2a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
9000392c:	2310      	movs	r3, #16
9000392e:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
90003930:	fb07 5606 	mla	r6, r7, r6, r5
90003934:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
90003938:	f083 0301 	eor.w	r3, r3, #1
9000393c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003940:	9b00      	ldr	r3, [sp, #0]
90003942:	f10a 0a01 	add.w	sl, sl, #1
90003946:	3320      	adds	r3, #32
90003948:	9300      	str	r3, [sp, #0]
9000394a:	e709      	b.n	90003760 <HAL_HCD_IRQHandler+0x14c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
9000394c:	2a03      	cmp	r2, #3
9000394e:	d10d      	bne.n	9000396c <HAL_HCD_IRQHandler+0x358>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
90003950:	f858 000b 	ldr.w	r0, [r8, fp]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
90003954:	461a      	mov	r2, r3
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
90003956:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
9000395a:	f848 000b 	str.w	r0, [r8, fp]
      hhcd->hc[ch_num].urb_state = URB_DONE;
9000395e:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
90003962:	4631      	mov	r1, r6
90003964:	4628      	mov	r0, r5
90003966:	f007 f965 	bl	9000ac34 <HAL_HCD_HC_NotifyURBChange_Callback>
9000396a:	e7e1      	b.n	90003930 <HAL_HCD_IRQHandler+0x31c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
9000396c:	2a01      	cmp	r2, #1
9000396e:	d1df      	bne.n	90003930 <HAL_HCD_IRQHandler+0x31c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
90003970:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
90003974:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
90003978:	f083 0301 	eor.w	r3, r3, #1
9000397c:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
90003980:	e7ef      	b.n	90003962 <HAL_HCD_IRQHandler+0x34e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
90003982:	68a1      	ldr	r1, [r4, #8]
90003984:	078a      	lsls	r2, r1, #30
90003986:	d53f      	bpl.n	90003a08 <HAL_HCD_IRQHandler+0x3f4>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
90003988:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
9000398a:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
9000398e:	f021 0102 	bic.w	r1, r1, #2
90003992:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003994:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
90003998:	2901      	cmp	r1, #1
9000399a:	d10c      	bne.n	900039b6 <HAL_HCD_IRQHandler+0x3a2>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
9000399c:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
900039a0:	fb07 5306 	mla	r3, r7, r6, r5
900039a4:	4631      	mov	r1, r6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
900039a6:	f8c4 9008 	str.w	r9, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
900039aa:	4628      	mov	r0, r5
900039ac:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
900039b0:	f007 f940 	bl	9000ac34 <HAL_HCD_HC_NotifyURBChange_Callback>
900039b4:	e7c4      	b.n	90003940 <HAL_HCD_IRQHandler+0x32c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
900039b6:	3903      	subs	r1, #3
900039b8:	2905      	cmp	r1, #5
900039ba:	d8f1      	bhi.n	900039a0 <HAL_HCD_IRQHandler+0x38c>
900039bc:	a001      	add	r0, pc, #4	; (adr r0, 900039c4 <HAL_HCD_IRQHandler+0x3b0>)
900039be:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
900039c2:	bf00      	nop
900039c4:	900039dd 	.word	0x900039dd
900039c8:	900039a1 	.word	0x900039a1
900039cc:	90003c27 	.word	0x90003c27
900039d0:	90003c33 	.word	0x90003c33
900039d4:	900039f7 	.word	0x900039f7
900039d8:	90003c33 	.word	0x90003c33
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
900039dc:	fb07 5106 	mla	r1, r7, r6, r5
900039e0:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
900039e4:	f858 100b 	ldr.w	r1, [r8, fp]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900039e8:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
900039ec:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
900039f0:	f848 100b 	str.w	r1, [r8, fp]
900039f4:	e7d4      	b.n	900039a0 <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].ErrCnt++;
900039f6:	fb07 5206 	mla	r2, r7, r6, r5
900039fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
900039fc:	3301      	adds	r3, #1
900039fe:	6593      	str	r3, [r2, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
90003a00:	2304      	movs	r3, #4
90003a02:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
90003a06:	e7cb      	b.n	900039a0 <HAL_HCD_IRQHandler+0x38c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
90003a08:	68a1      	ldr	r1, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003a0a:	6828      	ldr	r0, [r5, #0]
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
90003a0c:	f011 0180 	ands.w	r1, r1, #128	; 0x80
90003a10:	d010      	beq.n	90003a34 <HAL_HCD_IRQHandler+0x420>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003a12:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
90003a14:	fb07 5206 	mla	r2, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003a18:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003a1a:	f043 0302 	orr.w	r3, r3, #2
90003a1e:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
90003a20:	6d93      	ldr	r3, [r2, #88]	; 0x58
90003a22:	3301      	adds	r3, #1
90003a24:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
90003a26:	2306      	movs	r3, #6
90003a28:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003a2c:	f002 f97d 	bl	90005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
90003a30:	2380      	movs	r3, #128	; 0x80
90003a32:	e011      	b.n	90003a58 <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
90003a34:	68a3      	ldr	r3, [r4, #8]
90003a36:	06db      	lsls	r3, r3, #27
90003a38:	d582      	bpl.n	90003940 <HAL_HCD_IRQHandler+0x32c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
90003a3a:	fb07 5206 	mla	r2, r7, r6, r5
90003a3e:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
90003a42:	2b03      	cmp	r3, #3
90003a44:	d10a      	bne.n	90003a5c <HAL_HCD_IRQHandler+0x448>
      hhcd->hc[ch_num].ErrCnt = 0U;
90003a46:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003a48:	68e3      	ldr	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003a4a:	4631      	mov	r1, r6
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003a4c:	f043 0302 	orr.w	r3, r3, #2
90003a50:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003a52:	f002 f96a 	bl	90005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
90003a56:	2310      	movs	r3, #16
90003a58:	60a3      	str	r3, [r4, #8]
90003a5a:	e771      	b.n	90003940 <HAL_HCD_IRQHandler+0x32c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
90003a5c:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
90003a60:	d1f9      	bne.n	90003a56 <HAL_HCD_IRQHandler+0x442>
      hhcd->hc[ch_num].ErrCnt = 0U;
90003a62:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
90003a64:	692b      	ldr	r3, [r5, #16]
90003a66:	2b00      	cmp	r3, #0
90003a68:	d1f5      	bne.n	90003a56 <HAL_HCD_IRQHandler+0x442>
        hhcd->hc[ch_num].state = HC_NAK;
90003a6a:	2303      	movs	r3, #3
90003a6c:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
90003a70:	e7ea      	b.n	90003a48 <HAL_HCD_IRQHandler+0x434>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
90003a72:	f011 0c04 	ands.w	ip, r1, #4
90003a76:	d009      	beq.n	90003a8c <HAL_HCD_IRQHandler+0x478>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
90003a78:	2304      	movs	r3, #4
90003a7a:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003a7c:	68e3      	ldr	r3, [r4, #12]
90003a7e:	f043 0302 	orr.w	r3, r3, #2
90003a82:	60e3      	str	r3, [r4, #12]
90003a84:	e75c      	b.n	90003940 <HAL_HCD_IRQHandler+0x32c>
90003a86:	bf00      	nop
90003a88:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
90003a8c:	68a1      	ldr	r1, [r4, #8]
90003a8e:	f011 0120 	ands.w	r1, r1, #32
90003a92:	d014      	beq.n	90003abe <HAL_HCD_IRQHandler+0x4aa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
90003a94:	2320      	movs	r3, #32
90003a96:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
90003a98:	fb07 5306 	mla	r3, r7, r6, r5
90003a9c:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
90003aa0:	2a01      	cmp	r2, #1
90003aa2:	f47f af4d 	bne.w	90003940 <HAL_HCD_IRQHandler+0x32c>
      hhcd->hc[ch_num].do_ping = 0U;
90003aa6:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003aaa:	4631      	mov	r1, r6
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
90003aac:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003ab0:	68e3      	ldr	r3, [r4, #12]
90003ab2:	f043 0302 	orr.w	r3, r3, #2
90003ab6:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003ab8:	f002 f937 	bl	90005d2a <USB_HC_Halt>
90003abc:	e740      	b.n	90003940 <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
90003abe:	68a3      	ldr	r3, [r4, #8]
90003ac0:	065a      	lsls	r2, r3, #25
90003ac2:	d511      	bpl.n	90003ae8 <HAL_HCD_IRQHandler+0x4d4>
    hhcd->hc[ch_num].state = HC_NYET;
90003ac4:	fb07 5306 	mla	r3, r7, r6, r5
90003ac8:	2204      	movs	r2, #4
90003aca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
90003ace:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
90003ad0:	6599      	str	r1, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003ad2:	4631      	mov	r1, r6
    hhcd->hc[ch_num].do_ping = 1U;
90003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003ad8:	68e3      	ldr	r3, [r4, #12]
90003ada:	f043 0302 	orr.w	r3, r3, #2
90003ade:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003ae0:	f002 f923 	bl	90005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
90003ae4:	2340      	movs	r3, #64	; 0x40
90003ae6:	e7b7      	b.n	90003a58 <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
90003ae8:	68a1      	ldr	r1, [r4, #8]
90003aea:	f411 7100 	ands.w	r1, r1, #512	; 0x200
90003aee:	d005      	beq.n	90003afc <HAL_HCD_IRQHandler+0x4e8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003af0:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003af2:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003af4:	f043 0302 	orr.w	r3, r3, #2
90003af8:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003afa:	e6ae      	b.n	9000385a <HAL_HCD_IRQHandler+0x246>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
90003afc:	68a3      	ldr	r3, [r4, #8]
90003afe:	07db      	lsls	r3, r3, #31
90003b00:	d50f      	bpl.n	90003b22 <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b02:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
90003b04:	fb07 5806 	mla	r8, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b08:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
90003b0c:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b10:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b12:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b14:	f002 f909 	bl	90005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
90003b18:	2201      	movs	r2, #1
90003b1a:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
90003b1c:	f888 205d 	strb.w	r2, [r8, #93]	; 0x5d
90003b20:	e70e      	b.n	90003940 <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
90003b22:	68a1      	ldr	r1, [r4, #8]
90003b24:	0709      	lsls	r1, r1, #28
90003b26:	d50e      	bpl.n	90003b46 <HAL_HCD_IRQHandler+0x532>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
90003b28:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b2a:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_STALL;
90003b2c:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
90003b30:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b32:	68e3      	ldr	r3, [r4, #12]
90003b34:	f043 0302 	orr.w	r3, r3, #2
90003b38:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b3a:	f002 f8f6 	bl	90005d2a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
90003b3e:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
90003b40:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
90003b44:	e6fc      	b.n	90003940 <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
90003b46:	68a1      	ldr	r1, [r4, #8]
90003b48:	06ca      	lsls	r2, r1, #27
90003b4a:	d514      	bpl.n	90003b76 <HAL_HCD_IRQHandler+0x562>
    hhcd->hc[ch_num].ErrCnt = 0U;
90003b4c:	fb07 5306 	mla	r3, r7, r6, r5
90003b50:	2200      	movs	r2, #0
90003b52:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
90003b54:	2203      	movs	r2, #3
90003b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
90003b5a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
90003b5e:	2a00      	cmp	r2, #0
90003b60:	f47f af72 	bne.w	90003a48 <HAL_HCD_IRQHandler+0x434>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
90003b64:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
90003b68:	2a00      	cmp	r2, #0
90003b6a:	f47f af6d 	bne.w	90003a48 <HAL_HCD_IRQHandler+0x434>
        hhcd->hc[ch_num].do_ping = 1U;
90003b6e:	2201      	movs	r2, #1
90003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b74:	e768      	b.n	90003a48 <HAL_HCD_IRQHandler+0x434>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
90003b76:	68a1      	ldr	r1, [r4, #8]
90003b78:	060b      	lsls	r3, r1, #24
90003b7a:	d50c      	bpl.n	90003b96 <HAL_HCD_IRQHandler+0x582>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b7c:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b7e:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
90003b80:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b84:	f043 0302 	orr.w	r3, r3, #2
90003b88:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b8a:	f002 f8ce 	bl	90005d2a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
90003b8e:	2306      	movs	r3, #6
90003b90:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
90003b94:	e74c      	b.n	90003a30 <HAL_HCD_IRQHandler+0x41c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
90003b96:	68a1      	ldr	r1, [r4, #8]
90003b98:	0549      	lsls	r1, r1, #21
90003b9a:	d50f      	bpl.n	90003bbc <HAL_HCD_IRQHandler+0x5a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b9c:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b9e:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_DATATGLERR;
90003ba0:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003ba4:	f043 0302 	orr.w	r3, r3, #2
90003ba8:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003baa:	f002 f8be 	bl	90005d2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
90003bae:	2310      	movs	r3, #16
90003bb0:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
90003bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
90003bb6:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
90003bb8:	2308      	movs	r3, #8
90003bba:	e7c1      	b.n	90003b40 <HAL_HCD_IRQHandler+0x52c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
90003bbc:	68a1      	ldr	r1, [r4, #8]
90003bbe:	078a      	lsls	r2, r1, #30
90003bc0:	f57f aebe 	bpl.w	90003940 <HAL_HCD_IRQHandler+0x32c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
90003bc4:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003bc6:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
90003bca:	f021 0102 	bic.w	r1, r1, #2
90003bce:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003bd0:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
90003bd4:	2901      	cmp	r1, #1
90003bd6:	d10e      	bne.n	90003bf6 <HAL_HCD_IRQHandler+0x5e2>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
90003bd8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
90003bdc:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
90003be0:	3b02      	subs	r3, #2
90003be2:	2b01      	cmp	r3, #1
90003be4:	f63f aedc 	bhi.w	900039a0 <HAL_HCD_IRQHandler+0x38c>
        hhcd->hc[ch_num].toggle_out ^= 1U;
90003be8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
90003bec:	f083 0301 	eor.w	r3, r3, #1
90003bf0:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
90003bf4:	e6d4      	b.n	900039a0 <HAL_HCD_IRQHandler+0x38c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
90003bf6:	3903      	subs	r1, #3
90003bf8:	2905      	cmp	r1, #5
90003bfa:	f63f aed1 	bhi.w	900039a0 <HAL_HCD_IRQHandler+0x38c>
90003bfe:	a001      	add	r0, pc, #4	; (adr r0, 90003c04 <HAL_HCD_IRQHandler+0x5f0>)
90003c00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
90003c04:	90003c1d 	.word	0x90003c1d
90003c08:	90003c1d 	.word	0x90003c1d
90003c0c:	90003c27 	.word	0x90003c27
90003c10:	90003c33 	.word	0x90003c33
90003c14:	900039a1 	.word	0x900039a1
90003c18:	90003c33 	.word	0x90003c33
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
90003c1c:	fb07 5306 	mla	r3, r7, r6, r5
90003c20:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
90003c24:	e6bc      	b.n	900039a0 <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
90003c26:	fb07 5306 	mla	r3, r7, r6, r5
90003c2a:	2205      	movs	r2, #5
90003c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
90003c30:	e6b6      	b.n	900039a0 <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].ErrCnt++;
90003c32:	fb07 5006 	mla	r0, r7, r6, r5
90003c36:	6d81      	ldr	r1, [r0, #88]	; 0x58
90003c38:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
90003c3a:	2903      	cmp	r1, #3
        hhcd->hc[ch_num].ErrCnt = 0U;
90003c3c:	bf8d      	iteet	hi
90003c3e:	2100      	movhi	r1, #0
      hhcd->hc[ch_num].ErrCnt++;
90003c40:	6581      	strls	r1, [r0, #88]	; 0x58
90003c42:	2102      	movls	r1, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
90003c44:	6581      	strhi	r1, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
90003c46:	bf88      	it	hi
90003c48:	2104      	movhi	r1, #4
        hhcd->hc[ch_num].urb_state = URB_ERROR;
90003c4a:	fb07 5006 	mla	r0, r7, r6, r5
90003c4e:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
90003c52:	e6c7      	b.n	900039e4 <HAL_HCD_IRQHandler+0x3d0>

90003c54 <HAL_HCD_Start>:
{
90003c54:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
90003c56:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
90003c5a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
90003c5c:	2b01      	cmp	r3, #1
90003c5e:	d00d      	beq.n	90003c7c <HAL_HCD_Start+0x28>
90003c60:	2501      	movs	r5, #1
90003c62:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
90003c66:	6800      	ldr	r0, [r0, #0]
90003c68:	f001 fea5 	bl	900059b6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
90003c6c:	4629      	mov	r1, r5
90003c6e:	6820      	ldr	r0, [r4, #0]
90003c70:	f001 ff4a 	bl	90005b08 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
90003c74:	2000      	movs	r0, #0
90003c76:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
90003c7a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
90003c7c:	2002      	movs	r0, #2
90003c7e:	e7fc      	b.n	90003c7a <HAL_HCD_Start+0x26>

90003c80 <HAL_HCD_Stop>:
{
90003c80:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
90003c82:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
90003c86:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
90003c88:	2b01      	cmp	r3, #1
90003c8a:	d009      	beq.n	90003ca0 <HAL_HCD_Stop+0x20>
90003c8c:	2301      	movs	r3, #1
90003c8e:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
90003c92:	6800      	ldr	r0, [r0, #0]
90003c94:	f002 f95c 	bl	90005f50 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
90003c98:	2000      	movs	r0, #0
90003c9a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
90003c9e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
90003ca0:	2002      	movs	r0, #2
90003ca2:	e7fc      	b.n	90003c9e <HAL_HCD_Stop+0x1e>

90003ca4 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
90003ca4:	6800      	ldr	r0, [r0, #0]
90003ca6:	f001 bf11 	b.w	90005acc <USB_ResetPort>

90003caa <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
90003caa:	2328      	movs	r3, #40	; 0x28
90003cac:	fb03 0101 	mla	r1, r3, r1, r0
}
90003cb0:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
90003cb4:	4770      	bx	lr

90003cb6 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
90003cb6:	2328      	movs	r3, #40	; 0x28
90003cb8:	fb03 0101 	mla	r1, r3, r1, r0
}
90003cbc:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
90003cbe:	4770      	bx	lr

90003cc0 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
90003cc0:	6800      	ldr	r0, [r0, #0]
90003cc2:	f001 bfb4 	b.w	90005c2e <USB_GetCurrentFrame>

90003cc6 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
90003cc6:	6800      	ldr	r0, [r0, #0]
90003cc8:	f001 bfa6 	b.w	90005c18 <USB_GetHostSpeed>

90003ccc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90003ccc:	6803      	ldr	r3, [r0, #0]
90003cce:	699a      	ldr	r2, [r3, #24]
90003cd0:	0791      	lsls	r1, r2, #30
90003cd2:	d501      	bpl.n	90003cd8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
90003cd4:	2200      	movs	r2, #0
90003cd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90003cd8:	699a      	ldr	r2, [r3, #24]
90003cda:	07d2      	lsls	r2, r2, #31
90003cdc:	d403      	bmi.n	90003ce6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90003cde:	699a      	ldr	r2, [r3, #24]
90003ce0:	f042 0201 	orr.w	r2, r2, #1
90003ce4:	619a      	str	r2, [r3, #24]
  }
}
90003ce6:	4770      	bx	lr

90003ce8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
90003ce8:	b530      	push	{r4, r5, lr}
90003cea:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
90003cec:	f3c1 0109 	ubfx	r1, r1, #0, #10
90003cf0:	6804      	ldr	r4, [r0, #0]
90003cf2:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
90003cf6:	6860      	ldr	r0, [r4, #4]
90003cf8:	431a      	orrs	r2, r3
90003cfa:	4b04      	ldr	r3, [pc, #16]	; (90003d0c <I2C_TransferConfig+0x24>)
90003cfc:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
90003d00:	430a      	orrs	r2, r1
90003d02:	ea20 0003 	bic.w	r0, r0, r3
90003d06:	4302      	orrs	r2, r0
90003d08:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
90003d0a:	bd30      	pop	{r4, r5, pc}
90003d0c:	03ff63ff 	.word	0x03ff63ff

90003d10 <I2C_IsAcknowledgeFailed>:
{
90003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
90003d12:	6803      	ldr	r3, [r0, #0]
{
90003d14:	4604      	mov	r4, r0
90003d16:	460e      	mov	r6, r1
90003d18:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
90003d1a:	6998      	ldr	r0, [r3, #24]
90003d1c:	f010 0010 	ands.w	r0, r0, #16
90003d20:	d116      	bne.n	90003d50 <I2C_IsAcknowledgeFailed+0x40>
}
90003d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
90003d24:	1c72      	adds	r2, r6, #1
90003d26:	d014      	beq.n	90003d52 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003d28:	f7fe feca 	bl	90002ac0 <HAL_GetTick>
90003d2c:	1bc0      	subs	r0, r0, r7
90003d2e:	4286      	cmp	r6, r0
90003d30:	d300      	bcc.n	90003d34 <I2C_IsAcknowledgeFailed+0x24>
90003d32:	b96e      	cbnz	r6, 90003d50 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003d34:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003d36:	f043 0320 	orr.w	r3, r3, #32
90003d3a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90003d3c:	2320      	movs	r3, #32
90003d3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90003d42:	2300      	movs	r3, #0
90003d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
90003d48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
90003d4c:	2001      	movs	r0, #1
90003d4e:	e7e8      	b.n	90003d22 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90003d50:	6825      	ldr	r5, [r4, #0]
90003d52:	69ab      	ldr	r3, [r5, #24]
90003d54:	069b      	lsls	r3, r3, #26
90003d56:	d5e5      	bpl.n	90003d24 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90003d58:	2310      	movs	r3, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003d5a:	2620      	movs	r6, #32
    I2C_Flush_TXDR(hi2c);
90003d5c:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90003d5e:	61eb      	str	r3, [r5, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003d60:	61ee      	str	r6, [r5, #28]
    I2C_Flush_TXDR(hi2c);
90003d62:	f7ff ffb3 	bl	90003ccc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
90003d66:	686b      	ldr	r3, [r5, #4]
90003d68:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
90003d6c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
90003d70:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
90003d74:	f023 0301 	bic.w	r3, r3, #1
90003d78:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
90003d7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003d7c:	f043 0304 	orr.w	r3, r3, #4
90003d80:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
90003d82:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
90003d84:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90003d88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
90003d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
90003d90:	e7dc      	b.n	90003d4c <I2C_IsAcknowledgeFailed+0x3c>

90003d92 <I2C_WaitOnTXISFlagUntilTimeout>:
{
90003d92:	b570      	push	{r4, r5, r6, lr}
90003d94:	4604      	mov	r4, r0
90003d96:	460d      	mov	r5, r1
90003d98:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90003d9a:	6823      	ldr	r3, [r4, #0]
90003d9c:	699b      	ldr	r3, [r3, #24]
90003d9e:	079b      	lsls	r3, r3, #30
90003da0:	d501      	bpl.n	90003da6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
90003da2:	2000      	movs	r0, #0
}
90003da4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
90003da6:	4632      	mov	r2, r6
90003da8:	4629      	mov	r1, r5
90003daa:	4620      	mov	r0, r4
90003dac:	f7ff ffb0 	bl	90003d10 <I2C_IsAcknowledgeFailed>
90003db0:	b9a0      	cbnz	r0, 90003ddc <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
90003db2:	1c6a      	adds	r2, r5, #1
90003db4:	d0f1      	beq.n	90003d9a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003db6:	f7fe fe83 	bl	90002ac0 <HAL_GetTick>
90003dba:	1b80      	subs	r0, r0, r6
90003dbc:	42a8      	cmp	r0, r5
90003dbe:	d801      	bhi.n	90003dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
90003dc0:	2d00      	cmp	r5, #0
90003dc2:	d1ea      	bne.n	90003d9a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003dc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003dc6:	f043 0320 	orr.w	r3, r3, #32
90003dca:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003dcc:	2320      	movs	r3, #32
90003dce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90003dd2:	2300      	movs	r3, #0
90003dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
90003dd8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90003ddc:	2001      	movs	r0, #1
90003dde:	e7e1      	b.n	90003da4 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

90003de0 <I2C_WaitOnFlagUntilTimeout>:
{
90003de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90003de4:	9f06      	ldr	r7, [sp, #24]
90003de6:	4604      	mov	r4, r0
90003de8:	4688      	mov	r8, r1
90003dea:	4616      	mov	r6, r2
90003dec:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90003dee:	6822      	ldr	r2, [r4, #0]
90003df0:	6993      	ldr	r3, [r2, #24]
90003df2:	ea38 0303 	bics.w	r3, r8, r3
90003df6:	bf0c      	ite	eq
90003df8:	2301      	moveq	r3, #1
90003dfa:	2300      	movne	r3, #0
90003dfc:	42b3      	cmp	r3, r6
90003dfe:	d001      	beq.n	90003e04 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
90003e00:	2000      	movs	r0, #0
90003e02:	e015      	b.n	90003e30 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
90003e04:	1c6b      	adds	r3, r5, #1
90003e06:	d0f3      	beq.n	90003df0 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003e08:	f7fe fe5a 	bl	90002ac0 <HAL_GetTick>
90003e0c:	1bc0      	subs	r0, r0, r7
90003e0e:	42a8      	cmp	r0, r5
90003e10:	d801      	bhi.n	90003e16 <I2C_WaitOnFlagUntilTimeout+0x36>
90003e12:	2d00      	cmp	r5, #0
90003e14:	d1eb      	bne.n	90003dee <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003e16:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
90003e18:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003e1a:	f043 0320 	orr.w	r3, r3, #32
90003e1e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003e20:	2320      	movs	r3, #32
90003e22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90003e26:	2300      	movs	r3, #0
90003e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
90003e2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
90003e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90003e34 <I2C_RequestMemoryWrite>:
{
90003e34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90003e38:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90003e3a:	4b18      	ldr	r3, [pc, #96]	; (90003e9c <I2C_RequestMemoryWrite+0x68>)
{
90003e3c:	4605      	mov	r5, r0
90003e3e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90003e40:	9300      	str	r3, [sp, #0]
90003e42:	b2f2      	uxtb	r2, r6
90003e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
90003e48:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90003e4c:	f7ff ff4c 	bl	90003ce8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003e50:	4628      	mov	r0, r5
90003e52:	4642      	mov	r2, r8
90003e54:	4639      	mov	r1, r7
90003e56:	f7ff ff9c 	bl	90003d92 <I2C_WaitOnTXISFlagUntilTimeout>
90003e5a:	b118      	cbz	r0, 90003e64 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
90003e5c:	2001      	movs	r0, #1
}
90003e5e:	b002      	add	sp, #8
90003e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003e64:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003e66:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003e68:	d10d      	bne.n	90003e86 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003e6a:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90003e6c:	2200      	movs	r2, #0
90003e6e:	2180      	movs	r1, #128	; 0x80
90003e70:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003e72:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90003e74:	463b      	mov	r3, r7
90003e76:	f8cd 8000 	str.w	r8, [sp]
90003e7a:	f7ff ffb1 	bl	90003de0 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
90003e7e:	3800      	subs	r0, #0
90003e80:	bf18      	it	ne
90003e82:	2001      	movne	r0, #1
90003e84:	e7eb      	b.n	90003e5e <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003e86:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003e88:	4639      	mov	r1, r7
90003e8a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003e8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003e8e:	4642      	mov	r2, r8
90003e90:	f7ff ff7f 	bl	90003d92 <I2C_WaitOnTXISFlagUntilTimeout>
90003e94:	2800      	cmp	r0, #0
90003e96:	d1e1      	bne.n	90003e5c <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003e98:	682b      	ldr	r3, [r5, #0]
90003e9a:	e7e6      	b.n	90003e6a <I2C_RequestMemoryWrite+0x36>
90003e9c:	80002000 	.word	0x80002000

90003ea0 <I2C_RequestMemoryRead>:
{
90003ea0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90003ea4:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003ea6:	4b18      	ldr	r3, [pc, #96]	; (90003f08 <I2C_RequestMemoryRead+0x68>)
{
90003ea8:	4605      	mov	r5, r0
90003eaa:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003eac:	9300      	str	r3, [sp, #0]
90003eae:	b2f2      	uxtb	r2, r6
90003eb0:	2300      	movs	r3, #0
{
90003eb2:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003eb6:	f7ff ff17 	bl	90003ce8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003eba:	4628      	mov	r0, r5
90003ebc:	4642      	mov	r2, r8
90003ebe:	4639      	mov	r1, r7
90003ec0:	f7ff ff67 	bl	90003d92 <I2C_WaitOnTXISFlagUntilTimeout>
90003ec4:	b118      	cbz	r0, 90003ece <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
90003ec6:	2001      	movs	r0, #1
}
90003ec8:	b002      	add	sp, #8
90003eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003ece:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003ed0:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003ed2:	d10d      	bne.n	90003ef0 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003ed4:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90003ed6:	2200      	movs	r2, #0
90003ed8:	2140      	movs	r1, #64	; 0x40
90003eda:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003edc:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90003ede:	463b      	mov	r3, r7
90003ee0:	f8cd 8000 	str.w	r8, [sp]
90003ee4:	f7ff ff7c 	bl	90003de0 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
90003ee8:	3800      	subs	r0, #0
90003eea:	bf18      	it	ne
90003eec:	2001      	movne	r0, #1
90003eee:	e7eb      	b.n	90003ec8 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003ef0:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003ef2:	4639      	mov	r1, r7
90003ef4:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003ef6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003ef8:	4642      	mov	r2, r8
90003efa:	f7ff ff4a 	bl	90003d92 <I2C_WaitOnTXISFlagUntilTimeout>
90003efe:	2800      	cmp	r0, #0
90003f00:	d1e1      	bne.n	90003ec6 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003f02:	682b      	ldr	r3, [r5, #0]
90003f04:	e7e6      	b.n	90003ed4 <I2C_RequestMemoryRead+0x34>
90003f06:	bf00      	nop
90003f08:	80002000 	.word	0x80002000

90003f0c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
90003f0c:	b570      	push	{r4, r5, r6, lr}
90003f0e:	4604      	mov	r4, r0
90003f10:	460d      	mov	r5, r1
90003f12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90003f14:	6823      	ldr	r3, [r4, #0]
90003f16:	699b      	ldr	r3, [r3, #24]
90003f18:	069b      	lsls	r3, r3, #26
90003f1a:	d501      	bpl.n	90003f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
90003f1c:	2000      	movs	r0, #0
}
90003f1e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
90003f20:	4632      	mov	r2, r6
90003f22:	4629      	mov	r1, r5
90003f24:	4620      	mov	r0, r4
90003f26:	f7ff fef3 	bl	90003d10 <I2C_IsAcknowledgeFailed>
90003f2a:	b990      	cbnz	r0, 90003f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003f2c:	f7fe fdc8 	bl	90002ac0 <HAL_GetTick>
90003f30:	1b80      	subs	r0, r0, r6
90003f32:	42a8      	cmp	r0, r5
90003f34:	d801      	bhi.n	90003f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
90003f36:	2d00      	cmp	r5, #0
90003f38:	d1ec      	bne.n	90003f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003f3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003f3c:	f043 0320 	orr.w	r3, r3, #32
90003f40:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003f42:	2320      	movs	r3, #32
90003f44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90003f48:	2300      	movs	r3, #0
90003f4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
90003f4e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90003f52:	2001      	movs	r0, #1
90003f54:	e7e3      	b.n	90003f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

90003f56 <HAL_I2C_MspInit>:
}
90003f56:	4770      	bx	lr

90003f58 <HAL_I2C_Init>:
{
90003f58:	b510      	push	{r4, lr}
  if (hi2c == NULL)
90003f5a:	4604      	mov	r4, r0
90003f5c:	2800      	cmp	r0, #0
90003f5e:	d04a      	beq.n	90003ff6 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
90003f60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90003f64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90003f68:	b91b      	cbnz	r3, 90003f72 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
90003f6a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
90003f6e:	f7ff fff2 	bl	90003f56 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
90003f72:	2324      	movs	r3, #36	; 0x24
90003f74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90003f78:	6823      	ldr	r3, [r4, #0]
90003f7a:	681a      	ldr	r2, [r3, #0]
90003f7c:	f022 0201 	bic.w	r2, r2, #1
90003f80:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90003f82:	6862      	ldr	r2, [r4, #4]
90003f84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
90003f88:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90003f8a:	689a      	ldr	r2, [r3, #8]
90003f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90003f90:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90003f92:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90003f96:	2901      	cmp	r1, #1
90003f98:	d124      	bne.n	90003fe4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90003f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90003f9e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90003fa0:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003fa2:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90003fa4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
90003fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90003fac:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90003fae:	68da      	ldr	r2, [r3, #12]
90003fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90003fb4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
90003fb6:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
90003fba:	430a      	orrs	r2, r1
90003fbc:	69a1      	ldr	r1, [r4, #24]
90003fbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90003fc2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90003fc4:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
90003fc8:	430a      	orrs	r2, r1
90003fca:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
90003fcc:	681a      	ldr	r2, [r3, #0]
90003fce:	f042 0201 	orr.w	r2, r2, #1
90003fd2:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
90003fd4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003fd6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90003fd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90003fdc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90003fde:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
90003fe2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90003fe4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90003fe8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90003fea:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90003fec:	d1d8      	bne.n	90003fa0 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
90003fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
90003ff2:	605a      	str	r2, [r3, #4]
90003ff4:	e7d4      	b.n	90003fa0 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
90003ff6:	2001      	movs	r0, #1
90003ff8:	e7f3      	b.n	90003fe2 <HAL_I2C_Init+0x8a>

90003ffa <HAL_I2C_MspDeInit>:
90003ffa:	4770      	bx	lr

90003ffc <HAL_I2C_DeInit>:
{
90003ffc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
90003ffe:	4604      	mov	r4, r0
90004000:	b198      	cbz	r0, 9000402a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
90004002:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90004004:	2324      	movs	r3, #36	; 0x24
90004006:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
9000400a:	6813      	ldr	r3, [r2, #0]
9000400c:	f023 0301 	bic.w	r3, r3, #1
90004010:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
90004012:	f7ff fff2 	bl	90003ffa <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90004016:	2000      	movs	r0, #0
90004018:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
9000401a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
9000401e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90004022:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90004024:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
90004028:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
9000402a:	2001      	movs	r0, #1
9000402c:	e7fc      	b.n	90004028 <HAL_I2C_DeInit+0x2c>

9000402e <HAL_I2C_Mem_Write>:
{
9000402e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004032:	b085      	sub	sp, #20
90004034:	469b      	mov	fp, r3
90004036:	4604      	mov	r4, r0
90004038:	460f      	mov	r7, r1
9000403a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
9000403e:	4692      	mov	sl, r2
90004040:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
90004044:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
90004046:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
9000404a:	2b20      	cmp	r3, #32
9000404c:	f040 80a3 	bne.w	90004196 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
90004050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90004052:	b10b      	cbz	r3, 90004058 <HAL_I2C_Mem_Write+0x2a>
90004054:	9b03      	ldr	r3, [sp, #12]
90004056:	b933      	cbnz	r3, 90004066 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90004058:	f44f 7300 	mov.w	r3, #512	; 0x200
9000405c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
9000405e:	2001      	movs	r0, #1
}
90004060:	b005      	add	sp, #20
90004062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
90004066:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000406a:	2b01      	cmp	r3, #1
9000406c:	f000 8093 	beq.w	90004196 <HAL_I2C_Mem_Write+0x168>
90004070:	2501      	movs	r5, #1
90004072:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90004076:	f7fe fd23 	bl	90002ac0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
9000407a:	2319      	movs	r3, #25
9000407c:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
9000407e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90004080:	462a      	mov	r2, r5
90004082:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90004086:	4620      	mov	r0, r4
90004088:	f7ff feaa 	bl	90003de0 <I2C_WaitOnFlagUntilTimeout>
9000408c:	4680      	mov	r8, r0
9000408e:	2800      	cmp	r0, #0
90004090:	d1e5      	bne.n	9000405e <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90004092:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
90004094:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90004096:	4652      	mov	r2, sl
90004098:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000409a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000409e:	2340      	movs	r3, #64	; 0x40
900040a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
900040a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900040a6:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900040a8:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
900040aa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
900040ac:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900040ae:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
900040b2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900040b4:	465b      	mov	r3, fp
900040b6:	f7ff febd 	bl	90003e34 <I2C_RequestMemoryWrite>
900040ba:	b110      	cbz	r0, 900040c2 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
900040bc:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
900040c0:	e7cd      	b.n	9000405e <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900040c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900040c4:	b29b      	uxth	r3, r3
900040c6:	2bff      	cmp	r3, #255	; 0xff
900040c8:	d955      	bls.n	90004176 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
900040ca:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
900040cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900040d0:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
900040d2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900040d4:	4639      	mov	r1, r7
900040d6:	4620      	mov	r0, r4
900040d8:	f7ff fe06 	bl	90003ce8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900040dc:	4632      	mov	r2, r6
900040de:	4649      	mov	r1, r9
900040e0:	4620      	mov	r0, r4
900040e2:	f7ff fe56 	bl	90003d92 <I2C_WaitOnTXISFlagUntilTimeout>
900040e6:	2800      	cmp	r0, #0
900040e8:	d1b9      	bne.n	9000405e <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
900040ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
900040ec:	6822      	ldr	r2, [r4, #0]
900040ee:	f813 1b01 	ldrb.w	r1, [r3], #1
900040f2:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
900040f4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
900040f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
900040f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
900040fa:	3b01      	subs	r3, #1
      hi2c->XferSize--;
900040fc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
900040fe:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
90004100:	b292      	uxth	r2, r2
      hi2c->XferCount--;
90004102:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90004104:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90004106:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90004108:	b29b      	uxth	r3, r3
9000410a:	b1ab      	cbz	r3, 90004138 <HAL_I2C_Mem_Write+0x10a>
9000410c:	b9a2      	cbnz	r2, 90004138 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
9000410e:	464b      	mov	r3, r9
90004110:	2180      	movs	r1, #128	; 0x80
90004112:	4620      	mov	r0, r4
90004114:	9600      	str	r6, [sp, #0]
90004116:	f7ff fe63 	bl	90003de0 <I2C_WaitOnFlagUntilTimeout>
9000411a:	2800      	cmp	r0, #0
9000411c:	d19f      	bne.n	9000405e <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000411e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90004120:	b29b      	uxth	r3, r3
90004122:	2bff      	cmp	r3, #255	; 0xff
90004124:	d92f      	bls.n	90004186 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90004126:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90004128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
9000412c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000412e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90004130:	4639      	mov	r1, r7
90004132:	4620      	mov	r0, r4
90004134:	f7ff fdd8 	bl	90003ce8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
90004138:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000413a:	b29b      	uxth	r3, r3
9000413c:	2b00      	cmp	r3, #0
9000413e:	d1cd      	bne.n	900040dc <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90004140:	4632      	mov	r2, r6
90004142:	4649      	mov	r1, r9
90004144:	4620      	mov	r0, r4
90004146:	f7ff fee1 	bl	90003f0c <I2C_WaitOnSTOPFlagUntilTimeout>
9000414a:	2800      	cmp	r0, #0
9000414c:	d187      	bne.n	9000405e <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000414e:	6823      	ldr	r3, [r4, #0]
90004150:	2120      	movs	r1, #32
90004152:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90004154:	685a      	ldr	r2, [r3, #4]
90004156:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
9000415a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
9000415e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
90004162:	f022 0201 	bic.w	r2, r2, #1
90004166:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90004168:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000416c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90004170:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
90004174:	e774      	b.n	90004060 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
90004176:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90004178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
9000417c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
9000417e:	b292      	uxth	r2, r2
90004180:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90004182:	b2d2      	uxtb	r2, r2
90004184:	e7a6      	b.n	900040d4 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
90004186:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90004188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
9000418c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
9000418e:	b292      	uxth	r2, r2
90004190:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90004192:	b2d2      	uxtb	r2, r2
90004194:	e7cc      	b.n	90004130 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
90004196:	2002      	movs	r0, #2
90004198:	e762      	b.n	90004060 <HAL_I2C_Mem_Write+0x32>
	...

9000419c <HAL_I2C_Mem_Read>:
{
9000419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900041a0:	b085      	sub	sp, #20
900041a2:	469b      	mov	fp, r3
900041a4:	4604      	mov	r4, r0
900041a6:	460f      	mov	r7, r1
900041a8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
900041ac:	4692      	mov	sl, r2
900041ae:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
900041b2:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
900041b4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
900041b8:	2b20      	cmp	r3, #32
900041ba:	f040 80a7 	bne.w	9000430c <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
900041be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900041c0:	b10b      	cbz	r3, 900041c6 <HAL_I2C_Mem_Read+0x2a>
900041c2:	9b03      	ldr	r3, [sp, #12]
900041c4:	b933      	cbnz	r3, 900041d4 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900041c6:	f44f 7300 	mov.w	r3, #512	; 0x200
900041ca:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
900041cc:	2001      	movs	r0, #1
}
900041ce:	b005      	add	sp, #20
900041d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
900041d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
900041d8:	2b01      	cmp	r3, #1
900041da:	f000 8097 	beq.w	9000430c <HAL_I2C_Mem_Read+0x170>
900041de:	2501      	movs	r5, #1
900041e0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
900041e4:	f7fe fc6c 	bl	90002ac0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
900041e8:	2319      	movs	r3, #25
900041ea:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
900041ec:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
900041ee:	462a      	mov	r2, r5
900041f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
900041f4:	4620      	mov	r0, r4
900041f6:	f7ff fdf3 	bl	90003de0 <I2C_WaitOnFlagUntilTimeout>
900041fa:	4680      	mov	r8, r0
900041fc:	2800      	cmp	r0, #0
900041fe:	d1e5      	bne.n	900041cc <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90004200:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
90004202:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90004204:	4652      	mov	r2, sl
90004206:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90004208:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000420c:	2340      	movs	r3, #64	; 0x40
9000420e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
90004212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90004214:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90004216:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
90004218:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
9000421a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
9000421c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
90004220:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90004222:	465b      	mov	r3, fp
90004224:	f7ff fe3c 	bl	90003ea0 <I2C_RequestMemoryRead>
90004228:	b110      	cbz	r0, 90004230 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
9000422a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
9000422e:	e7cd      	b.n	900041cc <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90004230:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90004232:	b29b      	uxth	r3, r3
90004234:	2bff      	cmp	r3, #255	; 0xff
90004236:	4b36      	ldr	r3, [pc, #216]	; (90004310 <HAL_I2C_Mem_Read+0x174>)
90004238:	d958      	bls.n	900042ec <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000423a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
9000423c:	9300      	str	r3, [sp, #0]
9000423e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
90004242:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90004244:	4639      	mov	r1, r7
90004246:	4620      	mov	r0, r4
90004248:	f7ff fd4e 	bl	90003ce8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
9000424c:	464b      	mov	r3, r9
9000424e:	2200      	movs	r2, #0
90004250:	2104      	movs	r1, #4
90004252:	4620      	mov	r0, r4
90004254:	9600      	str	r6, [sp, #0]
90004256:	f7ff fdc3 	bl	90003de0 <I2C_WaitOnFlagUntilTimeout>
9000425a:	2800      	cmp	r0, #0
9000425c:	d1b6      	bne.n	900041cc <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000425e:	6823      	ldr	r3, [r4, #0]
90004260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90004262:	6a63      	ldr	r3, [r4, #36]	; 0x24
90004264:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
90004266:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
90004268:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
9000426a:	3301      	adds	r3, #1
      hi2c->XferSize--;
9000426c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
9000426e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
90004270:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90004272:	b292      	uxth	r2, r2
      hi2c->XferCount--;
90004274:	3b01      	subs	r3, #1
      hi2c->XferSize--;
90004276:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
90004278:	b29b      	uxth	r3, r3
9000427a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000427c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000427e:	b29b      	uxth	r3, r3
90004280:	b1ab      	cbz	r3, 900042ae <HAL_I2C_Mem_Read+0x112>
90004282:	b9a2      	cbnz	r2, 900042ae <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90004284:	464b      	mov	r3, r9
90004286:	2180      	movs	r1, #128	; 0x80
90004288:	4620      	mov	r0, r4
9000428a:	9600      	str	r6, [sp, #0]
9000428c:	f7ff fda8 	bl	90003de0 <I2C_WaitOnFlagUntilTimeout>
90004290:	2800      	cmp	r0, #0
90004292:	d19b      	bne.n	900041cc <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90004294:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90004296:	b29b      	uxth	r3, r3
90004298:	2bff      	cmp	r3, #255	; 0xff
9000429a:	d92f      	bls.n	900042fc <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000429c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
9000429e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900042a2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
900042a4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900042a6:	4639      	mov	r1, r7
900042a8:	4620      	mov	r0, r4
900042aa:	f7ff fd1d 	bl	90003ce8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
900042ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900042b0:	b29b      	uxth	r3, r3
900042b2:	2b00      	cmp	r3, #0
900042b4:	d1ca      	bne.n	9000424c <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900042b6:	4632      	mov	r2, r6
900042b8:	4649      	mov	r1, r9
900042ba:	4620      	mov	r0, r4
900042bc:	f7ff fe26 	bl	90003f0c <I2C_WaitOnSTOPFlagUntilTimeout>
900042c0:	2800      	cmp	r0, #0
900042c2:	d183      	bne.n	900041cc <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900042c4:	6823      	ldr	r3, [r4, #0]
900042c6:	2120      	movs	r1, #32
900042c8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
900042ca:	685a      	ldr	r2, [r3, #4]
900042cc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
900042d0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
900042d4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
900042d8:	f022 0201 	bic.w	r2, r2, #1
900042dc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
900042de:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
900042e2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900042e6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
900042ea:	e770      	b.n	900041ce <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
900042ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
900042ee:	9300      	str	r3, [sp, #0]
900042f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
900042f4:	b292      	uxth	r2, r2
900042f6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
900042f8:	b2d2      	uxtb	r2, r2
900042fa:	e7a3      	b.n	90004244 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
900042fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900042fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90004302:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
90004304:	b292      	uxth	r2, r2
90004306:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90004308:	b2d2      	uxtb	r2, r2
9000430a:	e7cc      	b.n	900042a6 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
9000430c:	2002      	movs	r0, #2
9000430e:	e75e      	b.n	900041ce <HAL_I2C_Mem_Read+0x32>
90004310:	80002400 	.word	0x80002400

90004314 <HAL_I2C_GetState>:
  return hi2c->State;
90004314:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90004318:	4770      	bx	lr
	...

9000431c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000431c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000431e:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90004320:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90004324:	3284      	adds	r2, #132	; 0x84
90004326:	1883      	adds	r3, r0, r2
{
90004328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000432c:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000432e:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90004332:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90004334:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90004338:	684c      	ldr	r4, [r1, #4]
9000433a:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000433e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90004342:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90004346:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90004348:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000434a:	68c5      	ldr	r5, [r0, #12]
9000434c:	f3c5 450b 	ubfx	r5, r5, #16, #12
90004350:	443d      	add	r5, r7
90004352:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
90004356:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90004358:	68c6      	ldr	r6, [r0, #12]
9000435a:	68cd      	ldr	r5, [r1, #12]
9000435c:	f3c6 060a 	ubfx	r6, r6, #0, #11
90004360:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90004362:	689d      	ldr	r5, [r3, #8]
90004364:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
90004368:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000436a:	688d      	ldr	r5, [r1, #8]
9000436c:	68c7      	ldr	r7, [r0, #12]
9000436e:	3501      	adds	r5, #1
90004370:	f3c7 070a 	ubfx	r7, r7, #0, #11
90004374:	443d      	add	r5, r7
90004376:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000437a:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000437c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000437e:	691d      	ldr	r5, [r3, #16]
90004380:	f025 0507 	bic.w	r5, r5, #7
90004384:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90004386:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90004388:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000438a:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000438e:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90004392:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
90004396:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
9000439a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
9000439e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
900043a2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
900043a6:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
900043a8:	695d      	ldr	r5, [r3, #20]
900043aa:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
900043ae:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
900043b0:	694d      	ldr	r5, [r1, #20]
900043b2:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900043b4:	69dd      	ldr	r5, [r3, #28]
900043b6:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
900043ba:	f025 0507 	bic.w	r5, r5, #7
900043be:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900043c0:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
900043c4:	433d      	orrs	r5, r7
900043c6:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900043c8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900043ca:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900043cc:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900043d0:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900043d2:	b1fe      	cbz	r6, 90004414 <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900043d4:	3e01      	subs	r6, #1
900043d6:	2e06      	cmp	r6, #6
900043d8:	d81e      	bhi.n	90004418 <LTDC_SetConfig+0xfc>
900043da:	4d10      	ldr	r5, [pc, #64]	; (9000441c <LTDC_SetConfig+0x100>)
900043dc:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900043de:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900043e0:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900043e4:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900043e8:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900043ea:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900043ec:	3403      	adds	r4, #3
900043ee:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900043f0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900043f2:	436e      	muls	r6, r5
900043f4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
900043f8:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900043fa:	6b1c      	ldr	r4, [r3, #48]	; 0x30
900043fc:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
90004400:	f024 0407 	bic.w	r4, r4, #7
90004404:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90004406:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90004408:	5883      	ldr	r3, [r0, r2]
9000440a:	f043 0301 	orr.w	r3, r3, #1
9000440e:	5083      	str	r3, [r0, r2]
}
90004410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
90004414:	2504      	movs	r5, #4
90004416:	e7e2      	b.n	900043de <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90004418:	2501      	movs	r5, #1
9000441a:	e7e0      	b.n	900043de <LTDC_SetConfig+0xc2>
9000441c:	900108b8 	.word	0x900108b8

90004420 <HAL_LTDC_MspInit>:
}
90004420:	4770      	bx	lr
	...

90004424 <HAL_LTDC_Init>:
{
90004424:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
90004426:	4604      	mov	r4, r0
90004428:	2800      	cmp	r0, #0
9000442a:	d063      	beq.n	900044f4 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000442c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
90004430:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90004434:	b91b      	cbnz	r3, 9000443e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
90004436:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
9000443a:	f7ff fff1 	bl	90004420 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000443e:	2302      	movs	r3, #2
90004440:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90004444:	6823      	ldr	r3, [r4, #0]
90004446:	699a      	ldr	r2, [r3, #24]
90004448:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
9000444c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000444e:	6999      	ldr	r1, [r3, #24]
90004450:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
90004454:	4302      	orrs	r2, r0
90004456:	68e0      	ldr	r0, [r4, #12]
90004458:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000445a:	6920      	ldr	r0, [r4, #16]
9000445c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000445e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004460:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90004462:	4925      	ldr	r1, [pc, #148]	; (900044f8 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004464:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90004466:	689a      	ldr	r2, [r3, #8]
90004468:	400a      	ands	r2, r1
9000446a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000446c:	689a      	ldr	r2, [r3, #8]
9000446e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90004472:	69a0      	ldr	r0, [r4, #24]
90004474:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90004476:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90004478:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000447a:	68da      	ldr	r2, [r3, #12]
9000447c:	400a      	ands	r2, r1
9000447e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90004480:	68da      	ldr	r2, [r3, #12]
90004482:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90004486:	6a20      	ldr	r0, [r4, #32]
90004488:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000448a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000448c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000448e:	691a      	ldr	r2, [r3, #16]
90004490:	400a      	ands	r2, r1
90004492:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90004494:	691a      	ldr	r2, [r3, #16]
90004496:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000449a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000449c:	4302      	orrs	r2, r0
9000449e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900044a0:	695a      	ldr	r2, [r3, #20]
900044a2:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
900044a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900044a6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
900044a8:	695a      	ldr	r2, [r3, #20]
900044aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
900044ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
900044b0:	430a      	orrs	r2, r1
900044b2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900044b6:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900044ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900044be:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900044c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900044c4:	6add      	ldr	r5, [r3, #44]	; 0x2c
900044c6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
900044ca:	432a      	orrs	r2, r5
900044cc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900044d0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900044d2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
900044d6:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900044d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900044da:	f042 0206 	orr.w	r2, r2, #6
900044de:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
900044e0:	699a      	ldr	r2, [r3, #24]
900044e2:	f042 0201 	orr.w	r2, r2, #1
900044e6:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
900044e8:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900044ea:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
900044ee:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
900044f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
900044f4:	2001      	movs	r0, #1
900044f6:	e7fc      	b.n	900044f2 <HAL_LTDC_Init+0xce>
900044f8:	f000f800 	.word	0xf000f800

900044fc <HAL_LTDC_ConfigLayer>:
{
900044fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
90004500:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
90004504:	4606      	mov	r6, r0
90004506:	460f      	mov	r7, r1
90004508:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
9000450a:	2b01      	cmp	r3, #1
9000450c:	f04f 0002 	mov.w	r0, #2
90004510:	d01f      	beq.n	90004552 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90004512:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
90004514:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90004518:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000451a:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000451e:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
90004522:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90004526:	3438      	adds	r4, #56	; 0x38
90004528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000452a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000452c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000452e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90004530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90004532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90004534:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90004536:	4630      	mov	r0, r6
90004538:	4662      	mov	r2, ip
9000453a:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000453c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
9000453e:	f7ff feed 	bl	9000431c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90004542:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
90004544:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90004546:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
9000454a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
9000454e:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
90004552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90004556 <HAL_LTDC_GetState>:
  return hltdc->State;
90004556:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
9000455a:	4770      	bx	lr

9000455c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
9000455c:	4b19      	ldr	r3, [pc, #100]	; (900045c4 <HAL_PWREx_EnableOverDrive+0x68>)
{
9000455e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
90004560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
90004562:	4c19      	ldr	r4, [pc, #100]	; (900045c8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
90004564:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90004568:	641a      	str	r2, [r3, #64]	; 0x40
9000456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000456c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90004570:	9301      	str	r3, [sp, #4]
90004572:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
90004574:	6823      	ldr	r3, [r4, #0]
90004576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000457a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
9000457c:	f7fe faa0 	bl	90002ac0 <HAL_GetTick>
90004580:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90004582:	6863      	ldr	r3, [r4, #4]
90004584:	03da      	lsls	r2, r3, #15
90004586:	d50c      	bpl.n	900045a2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90004588:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
9000458a:	4d0f      	ldr	r5, [pc, #60]	; (900045c8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
9000458c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90004590:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
90004592:	f7fe fa95 	bl	90002ac0 <HAL_GetTick>
90004596:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90004598:	686b      	ldr	r3, [r5, #4]
9000459a:	039b      	lsls	r3, r3, #14
9000459c:	d50a      	bpl.n	900045b4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
9000459e:	2000      	movs	r0, #0
900045a0:	e006      	b.n	900045b0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900045a2:	f7fe fa8d 	bl	90002ac0 <HAL_GetTick>
900045a6:	1b40      	subs	r0, r0, r5
900045a8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
900045ac:	d9e9      	bls.n	90004582 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
900045ae:	2003      	movs	r0, #3
}
900045b0:	b003      	add	sp, #12
900045b2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900045b4:	f7fe fa84 	bl	90002ac0 <HAL_GetTick>
900045b8:	1b00      	subs	r0, r0, r4
900045ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
900045be:	d9eb      	bls.n	90004598 <HAL_PWREx_EnableOverDrive+0x3c>
900045c0:	e7f5      	b.n	900045ae <HAL_PWREx_EnableOverDrive+0x52>
900045c2:	bf00      	nop
900045c4:	40023800 	.word	0x40023800
900045c8:	40007000 	.word	0x40007000

900045cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900045cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
900045d0:	4604      	mov	r4, r0
900045d2:	b340      	cbz	r0, 90004626 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900045d4:	6803      	ldr	r3, [r0, #0]
900045d6:	07db      	lsls	r3, r3, #31
900045d8:	d410      	bmi.n	900045fc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900045da:	6823      	ldr	r3, [r4, #0]
900045dc:	079f      	lsls	r7, r3, #30
900045de:	d461      	bmi.n	900046a4 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900045e0:	6823      	ldr	r3, [r4, #0]
900045e2:	0719      	lsls	r1, r3, #28
900045e4:	f100 80a6 	bmi.w	90004734 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
900045e8:	6823      	ldr	r3, [r4, #0]
900045ea:	075a      	lsls	r2, r3, #29
900045ec:	f100 80c7 	bmi.w	9000477e <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
900045f0:	69a2      	ldr	r2, [r4, #24]
900045f2:	2a00      	cmp	r2, #0
900045f4:	f040 8130 	bne.w	90004858 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
900045f8:	2000      	movs	r0, #0
900045fa:	e02c      	b.n	90004656 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
900045fc:	4b94      	ldr	r3, [pc, #592]	; (90004850 <HAL_RCC_OscConfig+0x284>)
900045fe:	689a      	ldr	r2, [r3, #8]
90004600:	f002 020c 	and.w	r2, r2, #12
90004604:	2a04      	cmp	r2, #4
90004606:	d007      	beq.n	90004618 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90004608:	689a      	ldr	r2, [r3, #8]
9000460a:	f002 020c 	and.w	r2, r2, #12
9000460e:	2a08      	cmp	r2, #8
90004610:	d10b      	bne.n	9000462a <HAL_RCC_OscConfig+0x5e>
90004612:	685b      	ldr	r3, [r3, #4]
90004614:	025e      	lsls	r6, r3, #9
90004616:	d508      	bpl.n	9000462a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90004618:	4b8d      	ldr	r3, [pc, #564]	; (90004850 <HAL_RCC_OscConfig+0x284>)
9000461a:	681b      	ldr	r3, [r3, #0]
9000461c:	039d      	lsls	r5, r3, #14
9000461e:	d5dc      	bpl.n	900045da <HAL_RCC_OscConfig+0xe>
90004620:	6863      	ldr	r3, [r4, #4]
90004622:	2b00      	cmp	r3, #0
90004624:	d1d9      	bne.n	900045da <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
90004626:	2001      	movs	r0, #1
90004628:	e015      	b.n	90004656 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000462a:	6863      	ldr	r3, [r4, #4]
9000462c:	4d88      	ldr	r5, [pc, #544]	; (90004850 <HAL_RCC_OscConfig+0x284>)
9000462e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90004632:	d113      	bne.n	9000465c <HAL_RCC_OscConfig+0x90>
90004634:	682b      	ldr	r3, [r5, #0]
90004636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000463a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000463c:	f7fe fa40 	bl	90002ac0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004640:	4e83      	ldr	r6, [pc, #524]	; (90004850 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
90004642:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004644:	6833      	ldr	r3, [r6, #0]
90004646:	0398      	lsls	r0, r3, #14
90004648:	d4c7      	bmi.n	900045da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000464a:	f7fe fa39 	bl	90002ac0 <HAL_GetTick>
9000464e:	1b40      	subs	r0, r0, r5
90004650:	2864      	cmp	r0, #100	; 0x64
90004652:	d9f7      	bls.n	90004644 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
90004654:	2003      	movs	r0, #3
}
90004656:	b002      	add	sp, #8
90004658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000465c:	b99b      	cbnz	r3, 90004686 <HAL_RCC_OscConfig+0xba>
9000465e:	682b      	ldr	r3, [r5, #0]
90004660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90004664:	602b      	str	r3, [r5, #0]
90004666:	682b      	ldr	r3, [r5, #0]
90004668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000466c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000466e:	f7fe fa27 	bl	90002ac0 <HAL_GetTick>
90004672:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90004674:	682b      	ldr	r3, [r5, #0]
90004676:	0399      	lsls	r1, r3, #14
90004678:	d5af      	bpl.n	900045da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000467a:	f7fe fa21 	bl	90002ac0 <HAL_GetTick>
9000467e:	1b80      	subs	r0, r0, r6
90004680:	2864      	cmp	r0, #100	; 0x64
90004682:	d9f7      	bls.n	90004674 <HAL_RCC_OscConfig+0xa8>
90004684:	e7e6      	b.n	90004654 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90004686:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000468a:	682b      	ldr	r3, [r5, #0]
9000468c:	d103      	bne.n	90004696 <HAL_RCC_OscConfig+0xca>
9000468e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90004692:	602b      	str	r3, [r5, #0]
90004694:	e7ce      	b.n	90004634 <HAL_RCC_OscConfig+0x68>
90004696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000469a:	602b      	str	r3, [r5, #0]
9000469c:	682b      	ldr	r3, [r5, #0]
9000469e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900046a2:	e7ca      	b.n	9000463a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
900046a4:	4b6a      	ldr	r3, [pc, #424]	; (90004850 <HAL_RCC_OscConfig+0x284>)
900046a6:	689a      	ldr	r2, [r3, #8]
900046a8:	f012 0f0c 	tst.w	r2, #12
900046ac:	d007      	beq.n	900046be <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
900046ae:	689a      	ldr	r2, [r3, #8]
900046b0:	f002 020c 	and.w	r2, r2, #12
900046b4:	2a08      	cmp	r2, #8
900046b6:	d111      	bne.n	900046dc <HAL_RCC_OscConfig+0x110>
900046b8:	685b      	ldr	r3, [r3, #4]
900046ba:	025a      	lsls	r2, r3, #9
900046bc:	d40e      	bmi.n	900046dc <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900046be:	4a64      	ldr	r2, [pc, #400]	; (90004850 <HAL_RCC_OscConfig+0x284>)
900046c0:	6813      	ldr	r3, [r2, #0]
900046c2:	079b      	lsls	r3, r3, #30
900046c4:	d502      	bpl.n	900046cc <HAL_RCC_OscConfig+0x100>
900046c6:	68e3      	ldr	r3, [r4, #12]
900046c8:	2b01      	cmp	r3, #1
900046ca:	d1ac      	bne.n	90004626 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900046cc:	6813      	ldr	r3, [r2, #0]
900046ce:	6921      	ldr	r1, [r4, #16]
900046d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
900046d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
900046d8:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900046da:	e781      	b.n	900045e0 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
900046dc:	68e3      	ldr	r3, [r4, #12]
900046de:	4d5c      	ldr	r5, [pc, #368]	; (90004850 <HAL_RCC_OscConfig+0x284>)
900046e0:	b1bb      	cbz	r3, 90004712 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
900046e2:	682b      	ldr	r3, [r5, #0]
900046e4:	f043 0301 	orr.w	r3, r3, #1
900046e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
900046ea:	f7fe f9e9 	bl	90002ac0 <HAL_GetTick>
900046ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
900046f0:	682b      	ldr	r3, [r5, #0]
900046f2:	079f      	lsls	r7, r3, #30
900046f4:	d507      	bpl.n	90004706 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900046f6:	682b      	ldr	r3, [r5, #0]
900046f8:	6922      	ldr	r2, [r4, #16]
900046fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
900046fe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
90004702:	602b      	str	r3, [r5, #0]
90004704:	e76c      	b.n	900045e0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90004706:	f7fe f9db 	bl	90002ac0 <HAL_GetTick>
9000470a:	1b80      	subs	r0, r0, r6
9000470c:	2802      	cmp	r0, #2
9000470e:	d9ef      	bls.n	900046f0 <HAL_RCC_OscConfig+0x124>
90004710:	e7a0      	b.n	90004654 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
90004712:	682b      	ldr	r3, [r5, #0]
90004714:	f023 0301 	bic.w	r3, r3, #1
90004718:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000471a:	f7fe f9d1 	bl	90002ac0 <HAL_GetTick>
9000471e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90004720:	682b      	ldr	r3, [r5, #0]
90004722:	0798      	lsls	r0, r3, #30
90004724:	f57f af5c 	bpl.w	900045e0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90004728:	f7fe f9ca 	bl	90002ac0 <HAL_GetTick>
9000472c:	1b80      	subs	r0, r0, r6
9000472e:	2802      	cmp	r0, #2
90004730:	d9f6      	bls.n	90004720 <HAL_RCC_OscConfig+0x154>
90004732:	e78f      	b.n	90004654 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90004734:	6963      	ldr	r3, [r4, #20]
90004736:	4d46      	ldr	r5, [pc, #280]	; (90004850 <HAL_RCC_OscConfig+0x284>)
90004738:	b183      	cbz	r3, 9000475c <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
9000473a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000473c:	f043 0301 	orr.w	r3, r3, #1
90004740:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90004742:	f7fe f9bd 	bl	90002ac0 <HAL_GetTick>
90004746:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90004748:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000474a:	079b      	lsls	r3, r3, #30
9000474c:	f53f af4c 	bmi.w	900045e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90004750:	f7fe f9b6 	bl	90002ac0 <HAL_GetTick>
90004754:	1b80      	subs	r0, r0, r6
90004756:	2802      	cmp	r0, #2
90004758:	d9f6      	bls.n	90004748 <HAL_RCC_OscConfig+0x17c>
9000475a:	e77b      	b.n	90004654 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
9000475c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000475e:	f023 0301 	bic.w	r3, r3, #1
90004762:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90004764:	f7fe f9ac 	bl	90002ac0 <HAL_GetTick>
90004768:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
9000476a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000476c:	079f      	lsls	r7, r3, #30
9000476e:	f57f af3b 	bpl.w	900045e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90004772:	f7fe f9a5 	bl	90002ac0 <HAL_GetTick>
90004776:	1b80      	subs	r0, r0, r6
90004778:	2802      	cmp	r0, #2
9000477a:	d9f6      	bls.n	9000476a <HAL_RCC_OscConfig+0x19e>
9000477c:	e76a      	b.n	90004654 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
9000477e:	4b34      	ldr	r3, [pc, #208]	; (90004850 <HAL_RCC_OscConfig+0x284>)
90004780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90004782:	00d0      	lsls	r0, r2, #3
90004784:	d427      	bmi.n	900047d6 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
90004786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
90004788:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
9000478a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
9000478e:	641a      	str	r2, [r3, #64]	; 0x40
90004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90004796:	9301      	str	r3, [sp, #4]
90004798:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
9000479a:	4d2e      	ldr	r5, [pc, #184]	; (90004854 <HAL_RCC_OscConfig+0x288>)
9000479c:	682b      	ldr	r3, [r5, #0]
9000479e:	05d9      	lsls	r1, r3, #23
900047a0:	d51b      	bpl.n	900047da <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900047a2:	68a3      	ldr	r3, [r4, #8]
900047a4:	4d2a      	ldr	r5, [pc, #168]	; (90004850 <HAL_RCC_OscConfig+0x284>)
900047a6:	2b01      	cmp	r3, #1
900047a8:	d127      	bne.n	900047fa <HAL_RCC_OscConfig+0x22e>
900047aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
900047ac:	f043 0301 	orr.w	r3, r3, #1
900047b0:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900047b2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
900047b6:	f7fe f983 	bl	90002ac0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900047ba:	4e25      	ldr	r6, [pc, #148]	; (90004850 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
900047bc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900047be:	6f33      	ldr	r3, [r6, #112]	; 0x70
900047c0:	079b      	lsls	r3, r3, #30
900047c2:	d53f      	bpl.n	90004844 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
900047c4:	2f00      	cmp	r7, #0
900047c6:	f43f af13 	beq.w	900045f0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
900047ca:	4a21      	ldr	r2, [pc, #132]	; (90004850 <HAL_RCC_OscConfig+0x284>)
900047cc:	6c13      	ldr	r3, [r2, #64]	; 0x40
900047ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
900047d2:	6413      	str	r3, [r2, #64]	; 0x40
900047d4:	e70c      	b.n	900045f0 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
900047d6:	2700      	movs	r7, #0
900047d8:	e7df      	b.n	9000479a <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
900047da:	682b      	ldr	r3, [r5, #0]
900047dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900047e0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
900047e2:	f7fe f96d 	bl	90002ac0 <HAL_GetTick>
900047e6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
900047e8:	682b      	ldr	r3, [r5, #0]
900047ea:	05da      	lsls	r2, r3, #23
900047ec:	d4d9      	bmi.n	900047a2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900047ee:	f7fe f967 	bl	90002ac0 <HAL_GetTick>
900047f2:	1b80      	subs	r0, r0, r6
900047f4:	2864      	cmp	r0, #100	; 0x64
900047f6:	d9f7      	bls.n	900047e8 <HAL_RCC_OscConfig+0x21c>
900047f8:	e72c      	b.n	90004654 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900047fa:	b9ab      	cbnz	r3, 90004828 <HAL_RCC_OscConfig+0x25c>
900047fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900047fe:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90004802:	f023 0301 	bic.w	r3, r3, #1
90004806:	672b      	str	r3, [r5, #112]	; 0x70
90004808:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000480a:	f023 0304 	bic.w	r3, r3, #4
9000480e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
90004810:	f7fe f956 	bl	90002ac0 <HAL_GetTick>
90004814:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90004816:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90004818:	0798      	lsls	r0, r3, #30
9000481a:	d5d3      	bpl.n	900047c4 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000481c:	f7fe f950 	bl	90002ac0 <HAL_GetTick>
90004820:	1b80      	subs	r0, r0, r6
90004822:	4540      	cmp	r0, r8
90004824:	d9f7      	bls.n	90004816 <HAL_RCC_OscConfig+0x24a>
90004826:	e715      	b.n	90004654 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90004828:	2b05      	cmp	r3, #5
9000482a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000482c:	d103      	bne.n	90004836 <HAL_RCC_OscConfig+0x26a>
9000482e:	f043 0304 	orr.w	r3, r3, #4
90004832:	672b      	str	r3, [r5, #112]	; 0x70
90004834:	e7b9      	b.n	900047aa <HAL_RCC_OscConfig+0x1de>
90004836:	f023 0301 	bic.w	r3, r3, #1
9000483a:	672b      	str	r3, [r5, #112]	; 0x70
9000483c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000483e:	f023 0304 	bic.w	r3, r3, #4
90004842:	e7b5      	b.n	900047b0 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90004844:	f7fe f93c 	bl	90002ac0 <HAL_GetTick>
90004848:	1b40      	subs	r0, r0, r5
9000484a:	4540      	cmp	r0, r8
9000484c:	d9b7      	bls.n	900047be <HAL_RCC_OscConfig+0x1f2>
9000484e:	e701      	b.n	90004654 <HAL_RCC_OscConfig+0x88>
90004850:	40023800 	.word	0x40023800
90004854:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
90004858:	4d38      	ldr	r5, [pc, #224]	; (9000493c <HAL_RCC_OscConfig+0x370>)
9000485a:	68ab      	ldr	r3, [r5, #8]
9000485c:	f003 030c 	and.w	r3, r3, #12
90004860:	2b08      	cmp	r3, #8
90004862:	d041      	beq.n	900048e8 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
90004864:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90004866:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
90004868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000486c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000486e:	d12e      	bne.n	900048ce <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
90004870:	f7fe f926 	bl	90002ac0 <HAL_GetTick>
90004874:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90004876:	682b      	ldr	r3, [r5, #0]
90004878:	0199      	lsls	r1, r3, #6
9000487a:	d422      	bmi.n	900048c2 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000487c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000487e:	085b      	lsrs	r3, r3, #1
90004880:	1e5a      	subs	r2, r3, #1
90004882:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
90004886:	430b      	orrs	r3, r1
90004888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000488c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000488e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90004892:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90004894:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90004898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
9000489c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
9000489e:	682b      	ldr	r3, [r5, #0]
900048a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
900048a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
900048a6:	f7fe f90b 	bl	90002ac0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900048aa:	4d24      	ldr	r5, [pc, #144]	; (9000493c <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
900048ac:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900048ae:	682b      	ldr	r3, [r5, #0]
900048b0:	019a      	lsls	r2, r3, #6
900048b2:	f53f aea1 	bmi.w	900045f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900048b6:	f7fe f903 	bl	90002ac0 <HAL_GetTick>
900048ba:	1b00      	subs	r0, r0, r4
900048bc:	2802      	cmp	r0, #2
900048be:	d9f6      	bls.n	900048ae <HAL_RCC_OscConfig+0x2e2>
900048c0:	e6c8      	b.n	90004654 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900048c2:	f7fe f8fd 	bl	90002ac0 <HAL_GetTick>
900048c6:	1b80      	subs	r0, r0, r6
900048c8:	2802      	cmp	r0, #2
900048ca:	d9d4      	bls.n	90004876 <HAL_RCC_OscConfig+0x2aa>
900048cc:	e6c2      	b.n	90004654 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
900048ce:	f7fe f8f7 	bl	90002ac0 <HAL_GetTick>
900048d2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
900048d4:	682b      	ldr	r3, [r5, #0]
900048d6:	019b      	lsls	r3, r3, #6
900048d8:	f57f ae8e 	bpl.w	900045f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900048dc:	f7fe f8f0 	bl	90002ac0 <HAL_GetTick>
900048e0:	1b00      	subs	r0, r0, r4
900048e2:	2802      	cmp	r0, #2
900048e4:	d9f6      	bls.n	900048d4 <HAL_RCC_OscConfig+0x308>
900048e6:	e6b5      	b.n	90004654 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900048e8:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
900048ea:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900048ec:	f43f ae9b 	beq.w	90004626 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900048f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900048f4:	69e1      	ldr	r1, [r4, #28]
900048f6:	428a      	cmp	r2, r1
900048f8:	f47f ae95 	bne.w	90004626 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
900048fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90004900:	6a21      	ldr	r1, [r4, #32]
90004902:	428a      	cmp	r2, r1
90004904:	f47f ae8f 	bne.w	90004626 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90004908:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
9000490c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
9000490e:	401a      	ands	r2, r3
90004910:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
90004914:	f47f ae87 	bne.w	90004626 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90004918:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000491a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
9000491e:	0852      	lsrs	r2, r2, #1
90004920:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90004922:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
90004926:	f47f ae7e 	bne.w	90004626 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
9000492a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
9000492e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90004930:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
90004934:	f43f ae60 	beq.w	900045f8 <HAL_RCC_OscConfig+0x2c>
90004938:	e675      	b.n	90004626 <HAL_RCC_OscConfig+0x5a>
9000493a:	bf00      	nop
9000493c:	40023800 	.word	0x40023800

90004940 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
90004940:	4913      	ldr	r1, [pc, #76]	; (90004990 <HAL_RCC_GetSysClockFreq+0x50>)
{
90004942:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
90004944:	688b      	ldr	r3, [r1, #8]
90004946:	f003 030c 	and.w	r3, r3, #12
9000494a:	2b04      	cmp	r3, #4
9000494c:	d01b      	beq.n	90004986 <HAL_RCC_GetSysClockFreq+0x46>
9000494e:	2b08      	cmp	r3, #8
90004950:	d11b      	bne.n	9000498a <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90004952:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90004954:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90004956:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90004958:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
9000495c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90004960:	f3c1 1188 	ubfx	r1, r1, #6, #9
90004964:	bf1a      	itte	ne
90004966:	480b      	ldrne	r0, [pc, #44]	; (90004994 <HAL_RCC_GetSysClockFreq+0x54>)
90004968:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
9000496a:	480b      	ldreq	r0, [pc, #44]	; (90004998 <HAL_RCC_GetSysClockFreq+0x58>)
9000496c:	fba1 0100 	umull	r0, r1, r1, r0
90004970:	f7fb fc9e 	bl	900002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
90004974:	4b06      	ldr	r3, [pc, #24]	; (90004990 <HAL_RCC_GetSysClockFreq+0x50>)
90004976:	685b      	ldr	r3, [r3, #4]
90004978:	f3c3 4301 	ubfx	r3, r3, #16, #2
9000497c:	3301      	adds	r3, #1
9000497e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
90004980:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
90004984:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
90004986:	4803      	ldr	r0, [pc, #12]	; (90004994 <HAL_RCC_GetSysClockFreq+0x54>)
90004988:	e7fc      	b.n	90004984 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
9000498a:	4803      	ldr	r0, [pc, #12]	; (90004998 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
9000498c:	e7fa      	b.n	90004984 <HAL_RCC_GetSysClockFreq+0x44>
9000498e:	bf00      	nop
90004990:	40023800 	.word	0x40023800
90004994:	017d7840 	.word	0x017d7840
90004998:	00f42400 	.word	0x00f42400

9000499c <HAL_RCC_ClockConfig>:
{
9000499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900049a0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
900049a2:	4604      	mov	r4, r0
900049a4:	b910      	cbnz	r0, 900049ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
900049a6:	2001      	movs	r0, #1
}
900049a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900049ac:	4a45      	ldr	r2, [pc, #276]	; (90004ac4 <HAL_RCC_ClockConfig+0x128>)
900049ae:	6813      	ldr	r3, [r2, #0]
900049b0:	f003 030f 	and.w	r3, r3, #15
900049b4:	428b      	cmp	r3, r1
900049b6:	d328      	bcc.n	90004a0a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900049b8:	6821      	ldr	r1, [r4, #0]
900049ba:	078f      	lsls	r7, r1, #30
900049bc:	d430      	bmi.n	90004a20 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
900049be:	07c8      	lsls	r0, r1, #31
900049c0:	d443      	bmi.n	90004a4a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900049c2:	4a40      	ldr	r2, [pc, #256]	; (90004ac4 <HAL_RCC_ClockConfig+0x128>)
900049c4:	6813      	ldr	r3, [r2, #0]
900049c6:	f003 030f 	and.w	r3, r3, #15
900049ca:	42ab      	cmp	r3, r5
900049cc:	d866      	bhi.n	90004a9c <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900049ce:	6822      	ldr	r2, [r4, #0]
900049d0:	0751      	lsls	r1, r2, #29
900049d2:	d46f      	bmi.n	90004ab4 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900049d4:	0713      	lsls	r3, r2, #28
900049d6:	d507      	bpl.n	900049e8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
900049d8:	4a3b      	ldr	r2, [pc, #236]	; (90004ac8 <HAL_RCC_ClockConfig+0x12c>)
900049da:	6921      	ldr	r1, [r4, #16]
900049dc:	6893      	ldr	r3, [r2, #8]
900049de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
900049e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
900049e6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
900049e8:	f7ff ffaa 	bl	90004940 <HAL_RCC_GetSysClockFreq>
900049ec:	4b36      	ldr	r3, [pc, #216]	; (90004ac8 <HAL_RCC_ClockConfig+0x12c>)
900049ee:	4a37      	ldr	r2, [pc, #220]	; (90004acc <HAL_RCC_ClockConfig+0x130>)
900049f0:	689b      	ldr	r3, [r3, #8]
900049f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
900049f6:	5cd3      	ldrb	r3, [r2, r3]
900049f8:	40d8      	lsrs	r0, r3
900049fa:	4b35      	ldr	r3, [pc, #212]	; (90004ad0 <HAL_RCC_ClockConfig+0x134>)
900049fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
900049fe:	4b35      	ldr	r3, [pc, #212]	; (90004ad4 <HAL_RCC_ClockConfig+0x138>)
90004a00:	6818      	ldr	r0, [r3, #0]
90004a02:	f7fe f81d 	bl	90002a40 <HAL_InitTick>
  return HAL_OK;
90004a06:	2000      	movs	r0, #0
90004a08:	e7ce      	b.n	900049a8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
90004a0a:	6813      	ldr	r3, [r2, #0]
90004a0c:	f023 030f 	bic.w	r3, r3, #15
90004a10:	430b      	orrs	r3, r1
90004a12:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90004a14:	6813      	ldr	r3, [r2, #0]
90004a16:	f003 030f 	and.w	r3, r3, #15
90004a1a:	428b      	cmp	r3, r1
90004a1c:	d1c3      	bne.n	900049a6 <HAL_RCC_ClockConfig+0xa>
90004a1e:	e7cb      	b.n	900049b8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90004a20:	f011 0f04 	tst.w	r1, #4
90004a24:	4b28      	ldr	r3, [pc, #160]	; (90004ac8 <HAL_RCC_ClockConfig+0x12c>)
90004a26:	d003      	beq.n	90004a30 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90004a28:	689a      	ldr	r2, [r3, #8]
90004a2a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
90004a2e:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004a30:	070e      	lsls	r6, r1, #28
90004a32:	d503      	bpl.n	90004a3c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90004a34:	689a      	ldr	r2, [r3, #8]
90004a36:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
90004a3a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90004a3c:	689a      	ldr	r2, [r3, #8]
90004a3e:	68a0      	ldr	r0, [r4, #8]
90004a40:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
90004a44:	4302      	orrs	r2, r0
90004a46:	609a      	str	r2, [r3, #8]
90004a48:	e7b9      	b.n	900049be <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90004a4a:	6861      	ldr	r1, [r4, #4]
90004a4c:	4b1e      	ldr	r3, [pc, #120]	; (90004ac8 <HAL_RCC_ClockConfig+0x12c>)
90004a4e:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004a50:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90004a52:	d11b      	bne.n	90004a8c <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004a54:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90004a58:	d0a5      	beq.n	900049a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90004a5a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90004a5c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004a60:	4f19      	ldr	r7, [pc, #100]	; (90004ac8 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90004a62:	f022 0203 	bic.w	r2, r2, #3
90004a66:	430a      	orrs	r2, r1
90004a68:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
90004a6a:	f7fe f829 	bl	90002ac0 <HAL_GetTick>
90004a6e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004a70:	68bb      	ldr	r3, [r7, #8]
90004a72:	6862      	ldr	r2, [r4, #4]
90004a74:	f003 030c 	and.w	r3, r3, #12
90004a78:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
90004a7c:	d0a1      	beq.n	900049c2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90004a7e:	f7fe f81f 	bl	90002ac0 <HAL_GetTick>
90004a82:	1b80      	subs	r0, r0, r6
90004a84:	4540      	cmp	r0, r8
90004a86:	d9f3      	bls.n	90004a70 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
90004a88:	2003      	movs	r0, #3
90004a8a:	e78d      	b.n	900049a8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90004a8c:	2902      	cmp	r1, #2
90004a8e:	d102      	bne.n	90004a96 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90004a90:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
90004a94:	e7e0      	b.n	90004a58 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90004a96:	f012 0f02 	tst.w	r2, #2
90004a9a:	e7dd      	b.n	90004a58 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
90004a9c:	6813      	ldr	r3, [r2, #0]
90004a9e:	f023 030f 	bic.w	r3, r3, #15
90004aa2:	432b      	orrs	r3, r5
90004aa4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90004aa6:	6813      	ldr	r3, [r2, #0]
90004aa8:	f003 030f 	and.w	r3, r3, #15
90004aac:	42ab      	cmp	r3, r5
90004aae:	f47f af7a 	bne.w	900049a6 <HAL_RCC_ClockConfig+0xa>
90004ab2:	e78c      	b.n	900049ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90004ab4:	4904      	ldr	r1, [pc, #16]	; (90004ac8 <HAL_RCC_ClockConfig+0x12c>)
90004ab6:	68e0      	ldr	r0, [r4, #12]
90004ab8:	688b      	ldr	r3, [r1, #8]
90004aba:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
90004abe:	4303      	orrs	r3, r0
90004ac0:	608b      	str	r3, [r1, #8]
90004ac2:	e787      	b.n	900049d4 <HAL_RCC_ClockConfig+0x38>
90004ac4:	40023c00 	.word	0x40023c00
90004ac8:	40023800 	.word	0x40023800
90004acc:	90010d18 	.word	0x90010d18
90004ad0:	200000b4 	.word	0x200000b4
90004ad4:	20000090 	.word	0x20000090

90004ad8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90004ad8:	6803      	ldr	r3, [r0, #0]
{
90004ada:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90004ade:	f013 0601 	ands.w	r6, r3, #1
{
90004ae2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90004ae4:	d00b      	beq.n	90004afe <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90004ae6:	4aad      	ldr	r2, [pc, #692]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004ae8:	6891      	ldr	r1, [r2, #8]
90004aea:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
90004aee:	6091      	str	r1, [r2, #8]
90004af0:	6b46      	ldr	r6, [r0, #52]	; 0x34
90004af2:	6891      	ldr	r1, [r2, #8]
90004af4:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
90004af6:	fab6 f686 	clz	r6, r6
90004afa:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90004afc:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
90004afe:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
90004b02:	d012      	beq.n	90004b2a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90004b04:	49a5      	ldr	r1, [pc, #660]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004b06:	6be5      	ldr	r5, [r4, #60]	; 0x3c
90004b08:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
90004b0c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90004b10:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
90004b14:	bf08      	it	eq
90004b16:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90004b18:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90004b1c:	bf16      	itet	ne
90004b1e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
90004b22:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90004b24:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90004b26:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
90004b2a:	02d9      	lsls	r1, r3, #11
90004b2c:	d510      	bpl.n	90004b50 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90004b2e:	489b      	ldr	r0, [pc, #620]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004b30:	6c21      	ldr	r1, [r4, #64]	; 0x40
90004b32:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
90004b36:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90004b3a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
90004b3e:	ea42 0201 	orr.w	r2, r2, r1
90004b42:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
90004b46:	f000 8186 	beq.w	90004e56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
90004b4a:	2900      	cmp	r1, #0
90004b4c:	bf08      	it	eq
90004b4e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
90004b50:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
90004b54:	bf18      	it	ne
90004b56:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
90004b58:	069a      	lsls	r2, r3, #26
90004b5a:	d532      	bpl.n	90004bc2 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
90004b5c:	4b8f      	ldr	r3, [pc, #572]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90004b5e:	4f90      	ldr	r7, [pc, #576]	; (90004da0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
90004b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90004b62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90004b66:	641a      	str	r2, [r3, #64]	; 0x40
90004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90004b6e:	9301      	str	r3, [sp, #4]
90004b70:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
90004b72:	683b      	ldr	r3, [r7, #0]
90004b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90004b78:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004b7a:	f7fd ffa1 	bl	90002ac0 <HAL_GetTick>
90004b7e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90004b80:	683b      	ldr	r3, [r7, #0]
90004b82:	05db      	lsls	r3, r3, #23
90004b84:	f140 8169 	bpl.w	90004e5a <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90004b88:	4f84      	ldr	r7, [pc, #528]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90004b8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90004b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90004b8e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
90004b92:	f040 816d 	bne.w	90004e70 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90004b96:	6b23      	ldr	r3, [r4, #48]	; 0x30
90004b98:	f403 7240 	and.w	r2, r3, #768	; 0x300
90004b9c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
90004ba0:	4a7e      	ldr	r2, [pc, #504]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004ba2:	f040 818a 	bne.w	90004eba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
90004ba6:	6891      	ldr	r1, [r2, #8]
90004ba8:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
90004bac:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
90004bb0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
90004bb4:	4301      	orrs	r1, r0
90004bb6:	6091      	str	r1, [r2, #8]
90004bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
90004bbc:	6f11      	ldr	r1, [r2, #112]	; 0x70
90004bbe:	430b      	orrs	r3, r1
90004bc0:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
90004bc2:	6823      	ldr	r3, [r4, #0]
90004bc4:	06da      	lsls	r2, r3, #27
90004bc6:	d50c      	bpl.n	90004be2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90004bc8:	4a74      	ldr	r2, [pc, #464]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004bca:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
90004bce:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
90004bd2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
90004bd6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
90004bda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
90004bdc:	4301      	orrs	r1, r0
90004bde:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
90004be2:	045f      	lsls	r7, r3, #17
90004be4:	d508      	bpl.n	90004bf8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
90004be6:	496d      	ldr	r1, [pc, #436]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004be8:	6e60      	ldr	r0, [r4, #100]	; 0x64
90004bea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004bee:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
90004bf2:	4302      	orrs	r2, r0
90004bf4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
90004bf8:	0418      	lsls	r0, r3, #16
90004bfa:	d508      	bpl.n	90004c0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
90004bfc:	4967      	ldr	r1, [pc, #412]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004bfe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
90004c00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c04:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
90004c08:	4302      	orrs	r2, r0
90004c0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
90004c0e:	03d9      	lsls	r1, r3, #15
90004c10:	d508      	bpl.n	90004c24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
90004c12:	4962      	ldr	r1, [pc, #392]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c14:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
90004c16:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c1a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
90004c1e:	4302      	orrs	r2, r0
90004c20:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90004c24:	039a      	lsls	r2, r3, #14
90004c26:	d508      	bpl.n	90004c3a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90004c28:	495c      	ldr	r1, [pc, #368]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c2a:	6f20      	ldr	r0, [r4, #112]	; 0x70
90004c2c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c30:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
90004c34:	4302      	orrs	r2, r0
90004c36:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
90004c3a:	065f      	lsls	r7, r3, #25
90004c3c:	d508      	bpl.n	90004c50 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
90004c3e:	4957      	ldr	r1, [pc, #348]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c40:	6c60      	ldr	r0, [r4, #68]	; 0x44
90004c42:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c46:	f022 0203 	bic.w	r2, r2, #3
90004c4a:	4302      	orrs	r2, r0
90004c4c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
90004c50:	0618      	lsls	r0, r3, #24
90004c52:	d508      	bpl.n	90004c66 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
90004c54:	4951      	ldr	r1, [pc, #324]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c56:	6ca0      	ldr	r0, [r4, #72]	; 0x48
90004c58:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c5c:	f022 020c 	bic.w	r2, r2, #12
90004c60:	4302      	orrs	r2, r0
90004c62:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
90004c66:	05d9      	lsls	r1, r3, #23
90004c68:	d508      	bpl.n	90004c7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
90004c6a:	494c      	ldr	r1, [pc, #304]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c6c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90004c6e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c72:	f022 0230 	bic.w	r2, r2, #48	; 0x30
90004c76:	4302      	orrs	r2, r0
90004c78:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
90004c7c:	059a      	lsls	r2, r3, #22
90004c7e:	d508      	bpl.n	90004c92 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
90004c80:	4946      	ldr	r1, [pc, #280]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c82:	6d20      	ldr	r0, [r4, #80]	; 0x50
90004c84:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c88:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
90004c8c:	4302      	orrs	r2, r0
90004c8e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
90004c92:	055f      	lsls	r7, r3, #21
90004c94:	d508      	bpl.n	90004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
90004c96:	4941      	ldr	r1, [pc, #260]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c98:	6d60      	ldr	r0, [r4, #84]	; 0x54
90004c9a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
90004ca2:	4302      	orrs	r2, r0
90004ca4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
90004ca8:	0518      	lsls	r0, r3, #20
90004caa:	d508      	bpl.n	90004cbe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
90004cac:	493b      	ldr	r1, [pc, #236]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004cae:	6da0      	ldr	r0, [r4, #88]	; 0x58
90004cb0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004cb4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
90004cb8:	4302      	orrs	r2, r0
90004cba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
90004cbe:	04d9      	lsls	r1, r3, #19
90004cc0:	d508      	bpl.n	90004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
90004cc2:	4936      	ldr	r1, [pc, #216]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004cc4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
90004cc6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004cca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
90004cce:	4302      	orrs	r2, r0
90004cd0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
90004cd4:	049a      	lsls	r2, r3, #18
90004cd6:	d508      	bpl.n	90004cea <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
90004cd8:	4930      	ldr	r1, [pc, #192]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004cda:	6e20      	ldr	r0, [r4, #96]	; 0x60
90004cdc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004ce0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
90004ce4:	4302      	orrs	r2, r0
90004ce6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90004cea:	025f      	lsls	r7, r3, #9
90004cec:	d508      	bpl.n	90004d00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90004cee:	492b      	ldr	r1, [pc, #172]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004cf0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
90004cf2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004cf6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
90004cfa:	4302      	orrs	r2, r0
90004cfc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
90004d00:	0298      	lsls	r0, r3, #10
90004d02:	d50c      	bpl.n	90004d1e <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90004d04:	4825      	ldr	r0, [pc, #148]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004d06:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
90004d08:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
90004d0c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90004d10:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
90004d14:	bf08      	it	eq
90004d16:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90004d18:	430a      	orrs	r2, r1
90004d1a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
90004d1e:	f013 0f08 	tst.w	r3, #8
90004d22:	bf18      	it	ne
90004d24:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90004d26:	0359      	lsls	r1, r3, #13
90004d28:	d508      	bpl.n	90004d3c <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90004d2a:	491c      	ldr	r1, [pc, #112]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004d2c:	6f60      	ldr	r0, [r4, #116]	; 0x74
90004d2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004d32:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
90004d36:	4302      	orrs	r2, r0
90004d38:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
90004d3c:	021a      	lsls	r2, r3, #8
90004d3e:	d509      	bpl.n	90004d54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
90004d40:	4916      	ldr	r1, [pc, #88]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004d42:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
90004d46:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004d4a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
90004d4e:	4302      	orrs	r2, r0
90004d50:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
90004d54:	2e01      	cmp	r6, #1
90004d56:	f000 80b4 	beq.w	90004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
90004d5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90004d5e:	f000 80b0 	beq.w	90004ec2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
90004d62:	2d01      	cmp	r5, #1
90004d64:	d175      	bne.n	90004e52 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
90004d66:	4d0d      	ldr	r5, [pc, #52]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004d68:	682b      	ldr	r3, [r5, #0]
90004d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90004d6e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004d70:	f7fd fea6 	bl	90002ac0 <HAL_GetTick>
90004d74:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90004d76:	682b      	ldr	r3, [r5, #0]
90004d78:	009f      	lsls	r7, r3, #2
90004d7a:	f100 8126 	bmi.w	90004fca <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90004d7e:	6821      	ldr	r1, [r4, #0]
90004d80:	030e      	lsls	r6, r1, #12
90004d82:	d501      	bpl.n	90004d88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90004d84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90004d86:	b11b      	cbz	r3, 90004d90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
90004d88:	02cd      	lsls	r5, r1, #11
90004d8a:	d522      	bpl.n	90004dd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
90004d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
90004d8e:	bb03      	cbnz	r3, 90004dd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90004d90:	4a02      	ldr	r2, [pc, #8]	; (90004d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004d92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90004d96:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
90004d9a:	e003      	b.n	90004da4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
90004d9c:	40023800 	.word	0x40023800
90004da0:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
90004da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004da8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004dac:	4303      	orrs	r3, r0
90004dae:	6960      	ldr	r0, [r4, #20]
90004db0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004db4:	69a0      	ldr	r0, [r4, #24]
90004db6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
90004dba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
90004dbe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90004dc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90004dc4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
90004dc8:	3801      	subs	r0, #1
90004dca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
90004dce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
90004dd2:	0288      	lsls	r0, r1, #10
90004dd4:	d515      	bpl.n	90004e02 <HAL_RCCEx_PeriphCLKConfig+0x32a>
90004dd6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
90004dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90004ddc:	d111      	bne.n	90004e02 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90004dde:	4a82      	ldr	r2, [pc, #520]	; (90004fe8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004de0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90004de4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
90004de8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90004dec:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004df0:	4303      	orrs	r3, r0
90004df2:	6960      	ldr	r0, [r4, #20]
90004df4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004df8:	6a20      	ldr	r0, [r4, #32]
90004dfa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90004dfe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
90004e02:	070a      	lsls	r2, r1, #28
90004e04:	d519      	bpl.n	90004e3a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90004e06:	4a78      	ldr	r2, [pc, #480]	; (90004fe8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004e08:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90004e0c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
90004e10:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
90004e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004e18:	430b      	orrs	r3, r1
90004e1a:	6961      	ldr	r1, [r4, #20]
90004e1c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90004e20:	69e1      	ldr	r1, [r4, #28]
90004e22:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
90004e26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
90004e2a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90004e2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90004e30:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
90004e34:	430b      	orrs	r3, r1
90004e36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
90004e3a:	4c6b      	ldr	r4, [pc, #428]	; (90004fe8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004e3c:	6823      	ldr	r3, [r4, #0]
90004e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90004e42:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004e44:	f7fd fe3c 	bl	90002ac0 <HAL_GetTick>
90004e48:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
90004e4a:	6823      	ldr	r3, [r4, #0]
90004e4c:	009b      	lsls	r3, r3, #2
90004e4e:	f140 80c3 	bpl.w	90004fd8 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
90004e52:	2000      	movs	r0, #0
90004e54:	e009      	b.n	90004e6a <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
90004e56:	2601      	movs	r6, #1
90004e58:	e67a      	b.n	90004b50 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90004e5a:	f7fd fe31 	bl	90002ac0 <HAL_GetTick>
90004e5e:	eba0 0008 	sub.w	r0, r0, r8
90004e62:	2864      	cmp	r0, #100	; 0x64
90004e64:	f67f ae8c 	bls.w	90004b80 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
90004e68:	2003      	movs	r0, #3
}
90004e6a:	b003      	add	sp, #12
90004e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90004e70:	f402 7240 	and.w	r2, r2, #768	; 0x300
90004e74:	429a      	cmp	r2, r3
90004e76:	f43f ae8e 	beq.w	90004b96 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90004e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
90004e7c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90004e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
90004e82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90004e86:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
90004e88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
90004e8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90004e8e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
90004e90:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
90004e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90004e94:	07d8      	lsls	r0, r3, #31
90004e96:	f57f ae7e 	bpl.w	90004b96 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
90004e9a:	f7fd fe11 	bl	90002ac0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90004e9e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
90004ea2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90004ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90004ea6:	0799      	lsls	r1, r3, #30
90004ea8:	f53f ae75 	bmi.w	90004b96 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90004eac:	f7fd fe08 	bl	90002ac0 <HAL_GetTick>
90004eb0:	eba0 0008 	sub.w	r0, r0, r8
90004eb4:	4548      	cmp	r0, r9
90004eb6:	d9f5      	bls.n	90004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
90004eb8:	e7d6      	b.n	90004e68 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90004eba:	6891      	ldr	r1, [r2, #8]
90004ebc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
90004ec0:	e679      	b.n	90004bb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
90004ec2:	4e49      	ldr	r6, [pc, #292]	; (90004fe8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004ec4:	6833      	ldr	r3, [r6, #0]
90004ec6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90004eca:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90004ecc:	f7fd fdf8 	bl	90002ac0 <HAL_GetTick>
90004ed0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
90004ed2:	6833      	ldr	r3, [r6, #0]
90004ed4:	011b      	lsls	r3, r3, #4
90004ed6:	d472      	bmi.n	90004fbe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
90004ed8:	6822      	ldr	r2, [r4, #0]
90004eda:	07d7      	lsls	r7, r2, #31
90004edc:	d512      	bpl.n	90004f04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
90004ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
90004ee0:	b983      	cbnz	r3, 90004f04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004ee2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90004ee6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
90004eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004eee:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
90004ef2:	430b      	orrs	r3, r1
90004ef4:	6861      	ldr	r1, [r4, #4]
90004ef6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90004efa:	68a1      	ldr	r1, [r4, #8]
90004efc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
90004f00:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
90004f04:	0316      	lsls	r6, r2, #12
90004f06:	d503      	bpl.n	90004f10 <HAL_RCCEx_PeriphCLKConfig+0x438>
90004f08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90004f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90004f0e:	d005      	beq.n	90004f1c <HAL_RCCEx_PeriphCLKConfig+0x444>
90004f10:	02d0      	lsls	r0, r2, #11
90004f12:	d51e      	bpl.n	90004f52 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
90004f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
90004f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90004f1a:	d11a      	bne.n	90004f52 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004f1c:	4932      	ldr	r1, [pc, #200]	; (90004fe8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004f1e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90004f22:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
90004f26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004f2a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004f2e:	4303      	orrs	r3, r0
90004f30:	6860      	ldr	r0, [r4, #4]
90004f32:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004f36:	68e0      	ldr	r0, [r4, #12]
90004f38:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
90004f3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
90004f40:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
90004f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
90004f46:	f020 001f 	bic.w	r0, r0, #31
90004f4a:	3b01      	subs	r3, #1
90004f4c:	4303      	orrs	r3, r0
90004f4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90004f52:	01d1      	lsls	r1, r2, #7
90004f54:	d511      	bpl.n	90004f7a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90004f56:	4924      	ldr	r1, [pc, #144]	; (90004fe8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004f58:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90004f5c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
90004f60:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90004f64:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004f68:	4303      	orrs	r3, r0
90004f6a:	6860      	ldr	r0, [r4, #4]
90004f6c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004f70:	6920      	ldr	r0, [r4, #16]
90004f72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90004f76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
90004f7a:	0192      	lsls	r2, r2, #6
90004f7c:	d50d      	bpl.n	90004f9a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
90004f7e:	6923      	ldr	r3, [r4, #16]
90004f80:	6862      	ldr	r2, [r4, #4]
90004f82:	041b      	lsls	r3, r3, #16
90004f84:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90004f88:	68e2      	ldr	r2, [r4, #12]
90004f8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90004f8e:	68a2      	ldr	r2, [r4, #8]
90004f90:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
90004f94:	4a14      	ldr	r2, [pc, #80]	; (90004fe8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004f96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
90004f9a:	4e13      	ldr	r6, [pc, #76]	; (90004fe8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004f9c:	6833      	ldr	r3, [r6, #0]
90004f9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90004fa2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90004fa4:	f7fd fd8c 	bl	90002ac0 <HAL_GetTick>
90004fa8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
90004faa:	6833      	ldr	r3, [r6, #0]
90004fac:	011b      	lsls	r3, r3, #4
90004fae:	f53f aed8 	bmi.w	90004d62 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90004fb2:	f7fd fd85 	bl	90002ac0 <HAL_GetTick>
90004fb6:	1bc0      	subs	r0, r0, r7
90004fb8:	2864      	cmp	r0, #100	; 0x64
90004fba:	d9f6      	bls.n	90004faa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90004fbc:	e754      	b.n	90004e68 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90004fbe:	f7fd fd7f 	bl	90002ac0 <HAL_GetTick>
90004fc2:	1bc0      	subs	r0, r0, r7
90004fc4:	2864      	cmp	r0, #100	; 0x64
90004fc6:	d984      	bls.n	90004ed2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
90004fc8:	e74e      	b.n	90004e68 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90004fca:	f7fd fd79 	bl	90002ac0 <HAL_GetTick>
90004fce:	1b80      	subs	r0, r0, r6
90004fd0:	2864      	cmp	r0, #100	; 0x64
90004fd2:	f67f aed0 	bls.w	90004d76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
90004fd6:	e747      	b.n	90004e68 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90004fd8:	f7fd fd72 	bl	90002ac0 <HAL_GetTick>
90004fdc:	1b40      	subs	r0, r0, r5
90004fde:	2864      	cmp	r0, #100	; 0x64
90004fe0:	f67f af33 	bls.w	90004e4a <HAL_RCCEx_PeriphCLKConfig+0x372>
90004fe4:	e740      	b.n	90004e68 <HAL_RCCEx_PeriphCLKConfig+0x390>
90004fe6:	bf00      	nop
90004fe8:	40023800 	.word	0x40023800

90004fec <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
90004fec:	4b53      	ldr	r3, [pc, #332]	; (9000513c <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
90004fee:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
90004ff0:	4b53      	ldr	r3, [pc, #332]	; (90005140 <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
90004ff2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90004ff6:	f3c2 1288 	ubfx	r2, r2, #6, #9
90004ffa:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004ffc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90005000:	f3c2 4201 	ubfx	r2, r2, #16, #2
90005004:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90005006:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
9000500a:	f3c2 6203 	ubfx	r2, r2, #24, #4
9000500e:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90005010:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90005014:	f3c2 7202 	ubfx	r2, r2, #28, #3
90005018:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
9000501a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
9000501e:	f3c2 1288 	ubfx	r2, r2, #6, #9
90005022:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90005024:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
90005028:	f3c2 4201 	ubfx	r2, r2, #16, #2
9000502c:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
9000502e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
90005032:	f3c2 6203 	ubfx	r2, r2, #24, #4
90005036:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90005038:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
9000503c:	f3c2 7202 	ubfx	r2, r2, #28, #3
90005040:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
90005042:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90005046:	f002 021f 	and.w	r2, r2, #31
9000504a:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
9000504c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90005050:	f3c2 2204 	ubfx	r2, r2, #8, #5
90005054:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
90005056:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
9000505a:	f3c2 4201 	ubfx	r2, r2, #16, #2
9000505e:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
90005060:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90005064:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
90005068:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
9000506a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
9000506e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
90005072:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
90005074:	689a      	ldr	r2, [r3, #8]
90005076:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
9000507a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
9000507c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90005080:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
90005084:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
90005086:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000508a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
9000508e:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
90005090:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90005094:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
90005098:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
9000509a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000509e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
900050a2:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
900050a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050a8:	f002 0203 	and.w	r2, r2, #3
900050ac:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
900050ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050b2:	f002 020c 	and.w	r2, r2, #12
900050b6:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
900050b8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050bc:	f002 0230 	and.w	r2, r2, #48	; 0x30
900050c0:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
900050c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050c6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
900050ca:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
900050cc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050d0:	f402 7240 	and.w	r2, r2, #768	; 0x300
900050d4:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
900050d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050da:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
900050de:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
900050e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050e4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
900050e8:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
900050ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050ee:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
900050f2:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
900050f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050f8:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
900050fc:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
900050fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90005102:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
90005106:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
90005108:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000510c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
90005110:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
90005112:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90005116:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
9000511a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
9000511e:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
90005120:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
90005122:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
90005126:	f402 7240 	and.w	r2, r2, #768	; 0x300
9000512a:	430a      	orrs	r2, r1
9000512c:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
9000512e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90005136:	6383      	str	r3, [r0, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
90005138:	4770      	bx	lr
9000513a:	bf00      	nop
9000513c:	00fffff1 	.word	0x00fffff1
90005140:	40023800 	.word	0x40023800

90005144 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
90005144:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
90005148:	d140      	bne.n	900051cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  {
    saiclocksource = RCC->DCKCFGR1;
9000514a:	4b2e      	ldr	r3, [pc, #184]	; (90005204 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
9000514c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
90005150:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
90005154:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
90005158:	d046      	beq.n	900051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
9000515a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
9000515e:	d04c      	beq.n	900051fa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
90005160:	2a00      	cmp	r2, #0
90005162:	d14c      	bne.n	900051fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
90005164:	685a      	ldr	r2, [r3, #4]
90005166:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
9000516a:	685a      	ldr	r2, [r3, #4]
9000516c:	bf08      	it	eq
9000516e:	4b26      	ldreq	r3, [pc, #152]	; (90005208 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
90005170:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
90005174:	bf18      	it	ne
90005176:	4b25      	ldrne	r3, [pc, #148]	; (9000520c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
90005178:	fbb3 f3f2 	udiv	r3, r3, r2
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
9000517c:	4a21      	ldr	r2, [pc, #132]	; (90005204 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
9000517e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
90005182:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
90005186:	f3c0 1088 	ubfx	r0, r0, #6, #9
9000518a:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
9000518c:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
90005190:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
90005194:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90005198:	f3c3 2304 	ubfx	r3, r3, #8, #5
9000519c:	e012      	b.n	900051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
9000519e:	4b1b      	ldr	r3, [pc, #108]	; (9000520c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
900051a0:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
900051a4:	4a17      	ldr	r2, [pc, #92]	; (90005204 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
900051a6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
900051aa:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
900051ae:	f3c0 1088 	ubfx	r0, r0, #6, #9
900051b2:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
900051b4:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
900051b8:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
900051bc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
900051c0:	f003 031f 	and.w	r3, r3, #31
900051c4:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
900051c6:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
900051ca:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
900051cc:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
900051d0:	d115      	bne.n	900051fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    saiclocksource = RCC->DCKCFGR1;
900051d2:	4b0c      	ldr	r3, [pc, #48]	; (90005204 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
900051d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
900051d8:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
900051dc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
900051e0:	d002      	beq.n	900051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
900051e2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
900051e6:	e7ba      	b.n	9000515e <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
900051e8:	685a      	ldr	r2, [r3, #4]
900051ea:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
900051ee:	685a      	ldr	r2, [r3, #4]
900051f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
900051f4:	d1d3      	bne.n	9000519e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
900051f6:	4b04      	ldr	r3, [pc, #16]	; (90005208 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
900051f8:	e7d2      	b.n	900051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = frequency/(tmpreg);
        break;
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
900051fa:	4805      	ldr	r0, [pc, #20]	; (90005210 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
900051fc:	4770      	bx	lr
    switch (saiclocksource)
900051fe:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
90005200:	4770      	bx	lr
90005202:	bf00      	nop
90005204:	40023800 	.word	0x40023800
90005208:	00f42400 	.word	0x00f42400
9000520c:	017d7840 	.word	0x017d7840
90005210:	00bb8000 	.word	0x00bb8000

90005214 <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
  {
    tmpIT|= SAI_IT_FREQ;
90005214:	2901      	cmp	r1, #1
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
90005216:	6b01      	ldr	r1, [r0, #48]	; 0x30
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
90005218:	6842      	ldr	r2, [r0, #4]
    tmpIT|= SAI_IT_FREQ;
9000521a:	bf14      	ite	ne
9000521c:	2301      	movne	r3, #1
9000521e:	2309      	moveq	r3, #9
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
90005220:	2908      	cmp	r1, #8
90005222:	d105      	bne.n	90005230 <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
90005224:	f022 0102 	bic.w	r1, r2, #2
90005228:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
9000522a:	bf08      	it	eq
9000522c:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
90005230:	3a02      	subs	r2, #2
90005232:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
90005234:	bf94      	ite	ls
90005236:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
9000523a:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
9000523e:	4770      	bx	lr

90005240 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
90005240:	4b0c      	ldr	r3, [pc, #48]	; (90005274 <SAI_Disable.isra.0+0x34>)
90005242:	f641 3258 	movw	r2, #7000	; 0x1b58
90005246:	681b      	ldr	r3, [r3, #0]
90005248:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
9000524c:	6802      	ldr	r2, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
9000524e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
90005250:	6811      	ldr	r1, [r2, #0]
90005252:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
90005256:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
90005258:	3b01      	subs	r3, #1
9000525a:	d206      	bcs.n	9000526a <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
9000525c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
90005260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90005264:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
90005268:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
9000526a:	6811      	ldr	r1, [r2, #0]
9000526c:	03c9      	lsls	r1, r1, #15
9000526e:	d4f3      	bmi.n	90005258 <SAI_Disable.isra.0+0x18>

  return status;
}
90005270:	4770      	bx	lr
90005272:	bf00      	nop
90005274:	200000b4 	.word	0x200000b4

90005278 <HAL_SAI_MspInit>:
}
90005278:	4770      	bx	lr
	...

9000527c <HAL_SAI_Init>:
{
9000527c:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
9000527e:	4604      	mov	r4, r0
90005280:	2800      	cmp	r0, #0
90005282:	f000 80c3 	beq.w	9000540c <HAL_SAI_Init+0x190>
  if(hsai->State == HAL_SAI_STATE_RESET)
90005286:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
9000528a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000528e:	b91b      	cbnz	r3, 90005298 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
90005290:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
90005294:	f7ff fff0 	bl	90005278 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
90005298:	2302      	movs	r3, #2
  SAI_Disable(hsai);
9000529a:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
9000529c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
900052a0:	f7ff ffce 	bl	90005240 <SAI_Disable.isra.0>
  switch(hsai->Init.SynchroExt)
900052a4:	68e3      	ldr	r3, [r4, #12]
900052a6:	2b01      	cmp	r3, #1
900052a8:	f000 80a0 	beq.w	900053ec <HAL_SAI_Init+0x170>
900052ac:	1e98      	subs	r0, r3, #2
900052ae:	4243      	negs	r3, r0
900052b0:	4143      	adcs	r3, r0
900052b2:	015b      	lsls	r3, r3, #5
  switch(hsai->Init.Synchro)
900052b4:	68a5      	ldr	r5, [r4, #8]
900052b6:	2d02      	cmp	r5, #2
900052b8:	f000 809c 	beq.w	900053f4 <HAL_SAI_Init+0x178>
900052bc:	2d03      	cmp	r5, #3
900052be:	f000 8097 	beq.w	900053f0 <HAL_SAI_Init+0x174>
900052c2:	1e69      	subs	r1, r5, #1
900052c4:	424d      	negs	r5, r1
900052c6:	414d      	adcs	r5, r1
900052c8:	02ad      	lsls	r5, r5, #10
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
900052ca:	6822      	ldr	r2, [r4, #0]
900052cc:	4950      	ldr	r1, [pc, #320]	; (90005410 <HAL_SAI_Init+0x194>)
900052ce:	4851      	ldr	r0, [pc, #324]	; (90005414 <HAL_SAI_Init+0x198>)
900052d0:	428a      	cmp	r2, r1
900052d2:	d003      	beq.n	900052dc <HAL_SAI_Init+0x60>
900052d4:	4e50      	ldr	r6, [pc, #320]	; (90005418 <HAL_SAI_Init+0x19c>)
900052d6:	42b2      	cmp	r2, r6
900052d8:	f040 808f 	bne.w	900053fa <HAL_SAI_Init+0x17e>
    SAI1->GCR = tmpregisterGCR;
900052dc:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
900052e0:	69e3      	ldr	r3, [r4, #28]
900052e2:	b313      	cbz	r3, 9000532a <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
900052e4:	428a      	cmp	r2, r1
900052e6:	d003      	beq.n	900052f0 <HAL_SAI_Init+0x74>
900052e8:	4b4b      	ldr	r3, [pc, #300]	; (90005418 <HAL_SAI_Init+0x19c>)
900052ea:	429a      	cmp	r2, r3
900052ec:	f040 8088 	bne.w	90005400 <HAL_SAI_Init+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
900052f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
900052f4:	f7ff ff26 	bl	90005144 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
900052f8:	6823      	ldr	r3, [r4, #0]
900052fa:	4a48      	ldr	r2, [pc, #288]	; (9000541c <HAL_SAI_Init+0x1a0>)
900052fc:	4293      	cmp	r3, r2
900052fe:	d002      	beq.n	90005306 <HAL_SAI_Init+0x8a>
90005300:	3220      	adds	r2, #32
90005302:	4293      	cmp	r3, r2
90005304:	d103      	bne.n	9000530e <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
90005306:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
9000530a:	f7ff ff1b 	bl	90005144 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
9000530e:	220a      	movs	r2, #10
90005310:	69e3      	ldr	r3, [r4, #28]
90005312:	4350      	muls	r0, r2
90005314:	025b      	lsls	r3, r3, #9
90005316:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
9000531a:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
9000531e:	fb02 0013 	mls	r0, r2, r3, r0
90005322:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
90005324:	bf08      	it	eq
90005326:	3301      	addeq	r3, #1
90005328:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
9000532a:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
9000532c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
9000532e:	f033 0202 	bics.w	r2, r3, #2
90005332:	d167      	bne.n	90005404 <HAL_SAI_Init+0x188>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
90005334:	3901      	subs	r1, #1
90005336:	bf18      	it	ne
90005338:	2101      	movne	r1, #1
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
9000533a:	6822      	ldr	r2, [r4, #0]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
9000533c:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
9000533e:	4838      	ldr	r0, [pc, #224]	; (90005420 <HAL_SAI_Init+0x1a4>)
90005340:	6816      	ldr	r6, [r2, #0]
90005342:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
90005344:	6b26      	ldr	r6, [r4, #48]	; 0x30
90005346:	4333      	orrs	r3, r6
90005348:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
9000534a:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
9000534c:	4333      	orrs	r3, r6
9000534e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
90005350:	6810      	ldr	r0, [r2, #0]
90005352:	4333      	orrs	r3, r6
90005354:	6a66      	ldr	r6, [r4, #36]	; 0x24
90005356:	4333      	orrs	r3, r6
90005358:	6926      	ldr	r6, [r4, #16]
9000535a:	4333      	orrs	r3, r6
9000535c:	6966      	ldr	r6, [r4, #20]
9000535e:	4333      	orrs	r3, r6
90005360:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
90005362:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
90005364:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
90005368:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
9000536a:	432b      	orrs	r3, r5
9000536c:	430b      	orrs	r3, r1
9000536e:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
90005370:	6853      	ldr	r3, [r2, #4]
90005372:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
90005376:	f023 030f 	bic.w	r3, r3, #15
9000537a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
9000537c:	69a3      	ldr	r3, [r4, #24]
9000537e:	6851      	ldr	r1, [r2, #4]
90005380:	4303      	orrs	r3, r0
90005382:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90005384:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
90005386:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
90005388:	430b      	orrs	r3, r1
9000538a:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
9000538c:	4b25      	ldr	r3, [pc, #148]	; (90005424 <HAL_SAI_Init+0x1a8>)
9000538e:	6891      	ldr	r1, [r2, #8]
90005390:	400b      	ands	r3, r1
90005392:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
90005394:	6d23      	ldr	r3, [r4, #80]	; 0x50
90005396:	6891      	ldr	r1, [r2, #8]
90005398:	4303      	orrs	r3, r0
9000539a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000539c:	4303      	orrs	r3, r0
9000539e:	430b      	orrs	r3, r1
900053a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
900053a2:	3901      	subs	r1, #1
900053a4:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
900053a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
900053a8:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
900053aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
900053ae:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
900053b0:	68d3      	ldr	r3, [r2, #12]
900053b2:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
900053b6:	f023 030f 	bic.w	r3, r3, #15
900053ba:	041b      	lsls	r3, r3, #16
900053bc:	0c1b      	lsrs	r3, r3, #16
900053be:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
900053c0:	68d1      	ldr	r1, [r2, #12]
900053c2:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
900053c6:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
900053c8:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
900053ca:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
900053cc:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
900053ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
900053d2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
900053d4:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
900053d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
900053da:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
900053dc:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
900053de:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
900053e2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
900053e6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
900053ea:	bd70      	pop	{r4, r5, r6, pc}
  switch(hsai->Init.SynchroExt)
900053ec:	2310      	movs	r3, #16
900053ee:	e761      	b.n	900052b4 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
900053f0:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
900053f4:	f44f 6500 	mov.w	r5, #2048	; 0x800
900053f8:	e767      	b.n	900052ca <HAL_SAI_Init+0x4e>
    SAI2->GCR = tmpregisterGCR;
900053fa:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
900053fe:	e76f      	b.n	900052e0 <HAL_SAI_Init+0x64>
    uint32_t freq = 0;
90005400:	2000      	movs	r0, #0
90005402:	e779      	b.n	900052f8 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
90005404:	1e4a      	subs	r2, r1, #1
90005406:	4251      	negs	r1, r2
90005408:	4151      	adcs	r1, r2
9000540a:	e796      	b.n	9000533a <HAL_SAI_Init+0xbe>
    return HAL_ERROR;
9000540c:	2001      	movs	r0, #1
9000540e:	e7ec      	b.n	900053ea <HAL_SAI_Init+0x16e>
90005410:	40015804 	.word	0x40015804
90005414:	40015000 	.word	0x40015000
90005418:	40015824 	.word	0x40015824
9000541c:	40015c04 	.word	0x40015c04
90005420:	ff05c010 	.word	0xff05c010
90005424:	fff88000 	.word	0xfff88000

90005428 <HAL_SAI_MspDeInit>:
90005428:	4770      	bx	lr

9000542a <HAL_SAI_DeInit>:
{
9000542a:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
9000542c:	4605      	mov	r5, r0
9000542e:	b1c0      	cbz	r0, 90005462 <HAL_SAI_DeInit+0x38>
  hsai->State = HAL_SAI_STATE_BUSY;
90005430:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
90005432:	6806      	ldr	r6, [r0, #0]
90005434:	2400      	movs	r4, #0
  hsai->State = HAL_SAI_STATE_BUSY;
90005436:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
9000543a:	f04f 33ff 	mov.w	r3, #4294967295
  hsai->Instance->IMR = 0;
9000543e:	6134      	str	r4, [r6, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
90005440:	61b3      	str	r3, [r6, #24]
  SAI_Disable(hsai);
90005442:	f7ff fefd 	bl	90005240 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
90005446:	6873      	ldr	r3, [r6, #4]
90005448:	f043 0308 	orr.w	r3, r3, #8
9000544c:	6073      	str	r3, [r6, #4]
  HAL_SAI_MspDeInit(hsai);
9000544e:	f7ff ffeb 	bl	90005428 <HAL_SAI_MspDeInit>
  return HAL_OK;
90005452:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90005454:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  __HAL_UNLOCK(hsai);
90005458:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
9000545c:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d
}
90005460:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90005462:	2001      	movs	r0, #1
90005464:	e7fc      	b.n	90005460 <HAL_SAI_DeInit+0x36>

90005466 <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
90005466:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
9000546a:	2b01      	cmp	r3, #1
9000546c:	d009      	beq.n	90005482 <HAL_SAI_DMAPause+0x1c>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
9000546e:	6802      	ldr	r2, [r0, #0]
90005470:	6813      	ldr	r3, [r2, #0]
90005472:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
90005476:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hsai);
90005478:	2300      	movs	r3, #0
9000547a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
9000547e:	4618      	mov	r0, r3
90005480:	4770      	bx	lr
  __HAL_LOCK(hsai);
90005482:	2002      	movs	r0, #2
}
90005484:	4770      	bx	lr

90005486 <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
90005486:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
9000548a:	2b01      	cmp	r3, #1
9000548c:	d010      	beq.n	900054b0 <HAL_SAI_DMAResume+0x2a>
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
9000548e:	6803      	ldr	r3, [r0, #0]
90005490:	681a      	ldr	r2, [r3, #0]
90005492:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90005496:	601a      	str	r2, [r3, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
90005498:	681a      	ldr	r2, [r3, #0]
9000549a:	03d2      	lsls	r2, r2, #15
9000549c:	d403      	bmi.n	900054a6 <HAL_SAI_DMAResume+0x20>
    __HAL_SAI_ENABLE(hsai);
9000549e:	681a      	ldr	r2, [r3, #0]
900054a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
900054a4:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hsai);
900054a6:	2300      	movs	r3, #0
900054a8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
900054ac:	4618      	mov	r0, r3
900054ae:	4770      	bx	lr
  __HAL_LOCK(hsai);
900054b0:	2002      	movs	r0, #2
}
900054b2:	4770      	bx	lr

900054b4 <HAL_SAI_DMAStop>:
{
900054b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
900054b6:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
900054ba:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
900054bc:	2b01      	cmp	r3, #1
900054be:	d041      	beq.n	90005544 <HAL_SAI_DMAStop+0x90>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
900054c0:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
900054c2:	2501      	movs	r5, #1
900054c4:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
900054c8:	6813      	ldr	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
900054ca:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
900054cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
900054d0:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
900054d2:	bb20      	cbnz	r0, 9000551e <HAL_SAI_DMAStop+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
900054d4:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
900054d6:	6f20      	ldr	r0, [r4, #112]	; 0x70
900054d8:	b188      	cbz	r0, 900054fe <HAL_SAI_DMAStop+0x4a>
900054da:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
900054de:	2b22      	cmp	r3, #34	; 0x22
900054e0:	d10d      	bne.n	900054fe <HAL_SAI_DMAStop+0x4a>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
900054e2:	f7fd fc66 	bl	90002db2 <HAL_DMA_Abort>
900054e6:	b150      	cbz	r0, 900054fe <HAL_SAI_DMAStop+0x4a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
900054e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
900054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900054ec:	2b80      	cmp	r3, #128	; 0x80
900054ee:	d006      	beq.n	900054fe <HAL_SAI_DMAStop+0x4a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
900054f0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
900054f4:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
900054f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900054fa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  SAI_Disable(hsai);
900054fe:	4620      	mov	r0, r4
90005500:	f7ff fe9e 	bl	90005240 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
90005504:	6822      	ldr	r2, [r4, #0]
90005506:	6853      	ldr	r3, [r2, #4]
90005508:	f043 0308 	orr.w	r3, r3, #8
9000550c:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
9000550e:	2301      	movs	r3, #1
90005510:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
90005514:	2300      	movs	r3, #0
90005516:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
9000551a:	4628      	mov	r0, r5
9000551c:	bd38      	pop	{r3, r4, r5, pc}
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
9000551e:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
90005522:	2b12      	cmp	r3, #18
90005524:	d1d6      	bne.n	900054d4 <HAL_SAI_DMAStop+0x20>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
90005526:	f7fd fc44 	bl	90002db2 <HAL_DMA_Abort>
9000552a:	2800      	cmp	r0, #0
9000552c:	d0d2      	beq.n	900054d4 <HAL_SAI_DMAStop+0x20>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
9000552e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90005530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005532:	2b80      	cmp	r3, #128	; 0x80
90005534:	d0ce      	beq.n	900054d4 <HAL_SAI_DMAStop+0x20>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
90005536:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
9000553a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000553e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
90005542:	e7c8      	b.n	900054d6 <HAL_SAI_DMAStop+0x22>
  __HAL_LOCK(hsai);
90005544:	2502      	movs	r5, #2
90005546:	e7e8      	b.n	9000551a <HAL_SAI_DMAStop+0x66>

90005548 <HAL_SAI_Transmit_DMA>:
{
90005548:	b570      	push	{r4, r5, r6, lr}
9000554a:	4613      	mov	r3, r2
9000554c:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
9000554e:	2900      	cmp	r1, #0
90005550:	d03f      	beq.n	900055d2 <HAL_SAI_Transmit_DMA+0x8a>
90005552:	2b00      	cmp	r3, #0
90005554:	d03d      	beq.n	900055d2 <HAL_SAI_Transmit_DMA+0x8a>
  if(hsai->State == HAL_SAI_STATE_READY)
90005556:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
9000555a:	2801      	cmp	r0, #1
9000555c:	b2c5      	uxtb	r5, r0
9000555e:	d13a      	bne.n	900055d6 <HAL_SAI_Transmit_DMA+0x8e>
    __HAL_LOCK(hsai);
90005560:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
90005564:	2801      	cmp	r0, #1
90005566:	d036      	beq.n	900055d6 <HAL_SAI_Transmit_DMA+0x8e>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90005568:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
9000556a:	2212      	movs	r2, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
9000556c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
9000556e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
90005572:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
90005576:	4a19      	ldr	r2, [pc, #100]	; (900055dc <HAL_SAI_Transmit_DMA+0x94>)
    __HAL_LOCK(hsai);
90005578:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
9000557c:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
9000557e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
90005582:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
90005586:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
90005588:	4a15      	ldr	r2, [pc, #84]	; (900055e0 <HAL_SAI_Transmit_DMA+0x98>)
9000558a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
9000558c:	4a15      	ldr	r2, [pc, #84]	; (900055e4 <HAL_SAI_Transmit_DMA+0x9c>)
    hsai->hdmatx->XferAbortCallback = NULL;
9000558e:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
90005592:	6822      	ldr	r2, [r4, #0]
90005594:	321c      	adds	r2, #28
90005596:	f7fd fbcf 	bl	90002d38 <HAL_DMA_Start_IT>
9000559a:	b118      	cbz	r0, 900055a4 <HAL_SAI_Transmit_DMA+0x5c>
      __HAL_UNLOCK(hsai);
9000559c:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
900055a0:	4628      	mov	r0, r5
900055a2:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
900055a4:	6825      	ldr	r5, [r4, #0]
900055a6:	682b      	ldr	r3, [r5, #0]
900055a8:	03db      	lsls	r3, r3, #15
900055aa:	d403      	bmi.n	900055b4 <HAL_SAI_Transmit_DMA+0x6c>
      __HAL_SAI_ENABLE(hsai);
900055ac:	682b      	ldr	r3, [r5, #0]
900055ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900055b2:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900055b4:	2100      	movs	r1, #0
900055b6:	4620      	mov	r0, r4
900055b8:	f7ff fe2c 	bl	90005214 <SAI_InterruptFlag>
900055bc:	692b      	ldr	r3, [r5, #16]
900055be:	4318      	orrs	r0, r3
900055c0:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
900055c2:	682b      	ldr	r3, [r5, #0]
900055c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900055c8:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
900055ca:	2500      	movs	r5, #0
900055cc:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
900055d0:	e7e6      	b.n	900055a0 <HAL_SAI_Transmit_DMA+0x58>
    return  HAL_ERROR;
900055d2:	2501      	movs	r5, #1
900055d4:	e7e4      	b.n	900055a0 <HAL_SAI_Transmit_DMA+0x58>
    return HAL_BUSY;
900055d6:	2502      	movs	r5, #2
900055d8:	e7e2      	b.n	900055a0 <HAL_SAI_Transmit_DMA+0x58>
900055da:	bf00      	nop
900055dc:	900056c1 	.word	0x900056c1
900055e0:	90005689 	.word	0x90005689
900055e4:	9000570d 	.word	0x9000570d

900055e8 <HAL_SAI_Receive_DMA>:
{
900055e8:	4613      	mov	r3, r2
  if((pData == NULL) || (Size == 0))
900055ea:	460a      	mov	r2, r1
{
900055ec:	b570      	push	{r4, r5, r6, lr}
900055ee:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
900055f0:	2900      	cmp	r1, #0
900055f2:	d03f      	beq.n	90005674 <HAL_SAI_Receive_DMA+0x8c>
900055f4:	2b00      	cmp	r3, #0
900055f6:	d03d      	beq.n	90005674 <HAL_SAI_Receive_DMA+0x8c>
  if(hsai->State == HAL_SAI_STATE_READY)
900055f8:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
900055fc:	2901      	cmp	r1, #1
900055fe:	b2cd      	uxtb	r5, r1
90005600:	d13a      	bne.n	90005678 <HAL_SAI_Receive_DMA+0x90>
    __HAL_LOCK(hsai);
90005602:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
90005606:	2901      	cmp	r1, #1
90005608:	d036      	beq.n	90005678 <HAL_SAI_Receive_DMA+0x90>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
9000560a:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
9000560c:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
9000560e:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90005612:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    hsai->pBuffPtr = pData;
90005616:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_RX;
90005618:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    hsai->XferSize = Size;
9000561c:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
90005620:	4916      	ldr	r1, [pc, #88]	; (9000567c <HAL_SAI_Receive_DMA+0x94>)
    hsai->XferCount = Size;
90005622:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
90005626:	6f00      	ldr	r0, [r0, #112]	; 0x70
90005628:	6401      	str	r1, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
9000562a:	4915      	ldr	r1, [pc, #84]	; (90005680 <HAL_SAI_Receive_DMA+0x98>)
9000562c:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
9000562e:	4915      	ldr	r1, [pc, #84]	; (90005684 <HAL_SAI_Receive_DMA+0x9c>)
    hsai->hdmarx->XferAbortCallback = NULL;
90005630:	e9c0 1613 	strd	r1, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
90005634:	6821      	ldr	r1, [r4, #0]
90005636:	311c      	adds	r1, #28
90005638:	f7fd fb7e 	bl	90002d38 <HAL_DMA_Start_IT>
9000563c:	b118      	cbz	r0, 90005646 <HAL_SAI_Receive_DMA+0x5e>
      __HAL_UNLOCK(hsai);
9000563e:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
90005642:	4628      	mov	r0, r5
90005644:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
90005646:	6825      	ldr	r5, [r4, #0]
90005648:	682b      	ldr	r3, [r5, #0]
9000564a:	03db      	lsls	r3, r3, #15
9000564c:	d403      	bmi.n	90005656 <HAL_SAI_Receive_DMA+0x6e>
      __HAL_SAI_ENABLE(hsai);
9000564e:	682b      	ldr	r3, [r5, #0]
90005650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90005654:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
90005656:	2100      	movs	r1, #0
90005658:	4620      	mov	r0, r4
9000565a:	f7ff fddb 	bl	90005214 <SAI_InterruptFlag>
9000565e:	692b      	ldr	r3, [r5, #16]
90005660:	4318      	orrs	r0, r3
90005662:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
90005664:	682b      	ldr	r3, [r5, #0]
90005666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000566a:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
9000566c:	2500      	movs	r5, #0
9000566e:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
90005672:	e7e6      	b.n	90005642 <HAL_SAI_Receive_DMA+0x5a>
    return  HAL_ERROR;
90005674:	2501      	movs	r5, #1
90005676:	e7e4      	b.n	90005642 <HAL_SAI_Receive_DMA+0x5a>
    return HAL_BUSY;
90005678:	2502      	movs	r5, #2
9000567a:	e7e2      	b.n	90005642 <HAL_SAI_Receive_DMA+0x5a>
9000567c:	90005703 	.word	0x90005703
90005680:	900056cb 	.word	0x900056cb
90005684:	9000570d 	.word	0x9000570d

90005688 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
90005688:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
9000568a:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
9000568c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
9000568e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005692:	d011      	beq.n	900056b8 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
90005694:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
90005696:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
90005698:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
9000569a:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
9000569c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
900056a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
900056a4:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900056a6:	f7ff fdb5 	bl	90005214 <SAI_InterruptFlag>
900056aa:	692b      	ldr	r3, [r5, #16]
900056ac:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State= HAL_SAI_STATE_READY;
900056b0:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900056b2:	6128      	str	r0, [r5, #16]
    hsai->State= HAL_SAI_STATE_READY;
900056b4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
900056b8:	4620      	mov	r0, r4
900056ba:	f7fb fdd1 	bl	90001260 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
900056be:	bd38      	pop	{r3, r4, r5, pc}

900056c0 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
900056c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
900056c2:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
900056c4:	f7fb fdd0 	bl	90001268 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
900056c8:	bd08      	pop	{r3, pc}

900056ca <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
900056ca:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
900056cc:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
900056ce:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
900056d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900056d4:	d011      	beq.n	900056fa <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
900056d6:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
900056d8:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900056da:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
900056dc:	682b      	ldr	r3, [r5, #0]
900056de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
900056e2:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
900056e4:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900056e8:	f7ff fd94 	bl	90005214 <SAI_InterruptFlag>
900056ec:	692b      	ldr	r3, [r5, #16]
900056ee:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
900056f2:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900056f4:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
900056f6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
900056fa:	4620      	mov	r0, r4
900056fc:	f7fb ff14 	bl	90001528 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
90005700:	bd38      	pop	{r3, r4, r5, pc}

90005702 <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
90005702:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
90005704:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
90005706:	f7fb ff13 	bl	90001530 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
9000570a:	bd08      	pop	{r3, pc}

9000570c <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
9000570c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
9000570e:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
90005710:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
90005714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90005718:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
9000571c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
9000571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005720:	2b01      	cmp	r3, #1
90005722:	d003      	beq.n	9000572c <SAI_DMAError+0x20>
90005724:	6f03      	ldr	r3, [r0, #112]	; 0x70
90005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005728:	2b01      	cmp	r3, #1
9000572a:	d10c      	bne.n	90005746 <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
9000572c:	6802      	ldr	r2, [r0, #0]
9000572e:	6813      	ldr	r3, [r2, #0]
90005730:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
90005734:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
90005736:	f7ff fd83 	bl	90005240 <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
9000573a:	2301      	movs	r3, #1
9000573c:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
90005740:	2300      	movs	r3, #0
90005742:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
90005746:	f7fb fef9 	bl	9000153c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
9000574a:	bd08      	pop	{r3, pc}

9000574c <HAL_SAI_GetState>:
  return hsai->State;
9000574c:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
90005750:	4770      	bx	lr

90005752 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
90005752:	4770      	bx	lr

90005754 <HAL_SDRAM_Init>:
{   
90005754:	b538      	push	{r3, r4, r5, lr}
90005756:	460d      	mov	r5, r1
  if(hsdram == NULL)
90005758:	4604      	mov	r4, r0
9000575a:	b1c8      	cbz	r0, 90005790 <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
9000575c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90005760:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90005764:	b91b      	cbnz	r3, 9000576e <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
90005766:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000576a:	f7ff fff2 	bl	90005752 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000576e:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90005770:	1d21      	adds	r1, r4, #4
90005772:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90005774:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90005778:	f000 f836 	bl	900057e8 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
9000577c:	6862      	ldr	r2, [r4, #4]
9000577e:	4629      	mov	r1, r5
90005780:	6820      	ldr	r0, [r4, #0]
90005782:	f000 f869 	bl	90005858 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
90005786:	2301      	movs	r3, #1
  return HAL_OK;
90005788:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
9000578a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000578e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90005790:	2001      	movs	r0, #1
90005792:	e7fc      	b.n	9000578e <HAL_SDRAM_Init+0x3a>

90005794 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
90005794:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90005796:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000579a:	4604      	mov	r4, r0
9000579c:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
9000579e:	2b02      	cmp	r3, #2
900057a0:	b2d8      	uxtb	r0, r3
900057a2:	d00d      	beq.n	900057c0 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900057a4:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900057a6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900057a8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900057ac:	f000 f896 	bl	900058dc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
900057b0:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
900057b2:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
900057b4:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
900057b6:	bf0c      	ite	eq
900057b8:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
900057ba:	2301      	movne	r3, #1
900057bc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
900057c0:	bd38      	pop	{r3, r4, r5, pc}

900057c2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
900057c2:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
900057c4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
900057c8:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
900057ca:	2b02      	cmp	r3, #2
900057cc:	b2d8      	uxtb	r0, r3
900057ce:	d009      	beq.n	900057e4 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900057d0:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
900057d2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900057d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
900057d8:	f000 f893 	bl	90005902 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
900057dc:	2301      	movs	r3, #1
  
  return HAL_OK;   
900057de:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
900057e0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
900057e4:	bd10      	pop	{r4, pc}
	...

900057e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
900057e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
                        Init->RowBitsNumber      |\
900057ec:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
                        Init->MemoryDataWidth    |\
                        Init->InternalBankNumber |\
                        Init->CASLatency         |\
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
900057f0:	e9d1 3907 	ldrd	r3, r9, [r1, #28]
                        Init->ReadPipeDelay
900057f4:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
900057f8:	f8df e058 	ldr.w	lr, [pc, #88]	; 90005854 <FMC_SDRAM_Init+0x6c>
900057fc:	ea43 0309 	orr.w	r3, r3, r9
                        Init->InternalBankNumber |\
90005800:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
                        Init->WriteProtection    |\
90005804:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
90005808:	6809      	ldr	r1, [r1, #0]
9000580a:	2901      	cmp	r1, #1
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
9000580c:	6801      	ldr	r1, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
9000580e:	d00f      	beq.n	90005830 <FMC_SDRAM_Init+0x48>
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005810:	ea43 0308 	orr.w	r3, r3, r8
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90005814:	ea01 010e 	and.w	r1, r1, lr
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005818:	4313      	orrs	r3, r2
9000581a:	ea43 030c 	orr.w	r3, r3, ip
9000581e:	433b      	orrs	r3, r7
90005820:	4333      	orrs	r3, r6
90005822:	432b      	orrs	r3, r5
90005824:	4323      	orrs	r3, r4
90005826:	430b      	orrs	r3, r1
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90005828:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
9000582a:	2000      	movs	r0, #0
9000582c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005830:	ea42 020c 	orr.w	r2, r2, ip
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
90005834:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
90005838:	ea43 0308 	orr.w	r3, r3, r8
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000583c:	433a      	orrs	r2, r7
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
9000583e:	430b      	orrs	r3, r1
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
90005840:	6841      	ldr	r1, [r0, #4]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005842:	4332      	orrs	r2, r6
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90005844:	ea01 010e 	and.w	r1, r1, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90005848:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000584a:	432a      	orrs	r2, r5
9000584c:	4322      	orrs	r2, r4
9000584e:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
90005850:	6042      	str	r2, [r0, #4]
90005852:	e7ea      	b.n	9000582a <FMC_SDRAM_Init+0x42>
90005854:	ffff8000 	.word	0xffff8000

90005858 <FMC_SDRAM_Timing_Init>:
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
90005858:	68cb      	ldr	r3, [r1, #12]
  if (Bank != FMC_SDRAM_BANK2) 
9000585a:	2a01      	cmp	r2, #1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
9000585c:	6882      	ldr	r2, [r0, #8]
                       (((Timing->RowCycleDelay)-1) << 12)       |\
9000585e:	f103 3cff 	add.w	ip, r3, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
90005862:	694b      	ldr	r3, [r1, #20]
{
90005864:	b5f0      	push	{r4, r5, r6, r7, lr}
                       (((Timing->RPDelay)-1) << 20)             |\
90005866:	f103 33ff 	add.w	r3, r3, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000586a:	680f      	ldr	r7, [r1, #0]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
9000586c:	684c      	ldr	r4, [r1, #4]
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
9000586e:	688e      	ldr	r6, [r1, #8]
                       (((Timing->RPDelay)-1) << 20)             |\
90005870:	ea4f 5303 	mov.w	r3, r3, lsl #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
90005874:	690d      	ldr	r5, [r1, #16]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
90005876:	f104 34ff 	add.w	r4, r4, #4294967295
                       (((Timing->RCDDelay)-1) << 24));
9000587a:	6989      	ldr	r1, [r1, #24]
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
9000587c:	f106 36ff 	add.w	r6, r6, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
90005880:	f105 35ff 	add.w	r5, r5, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90005884:	f107 37ff 	add.w	r7, r7, #4294967295
                       (((Timing->RCDDelay)-1) << 24));
90005888:	f101 31ff 	add.w	r1, r1, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
9000588c:	ea4f 1404 	mov.w	r4, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
90005890:	ea4f 2606 	mov.w	r6, r6, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
90005894:	ea4f 4505 	mov.w	r5, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));
90005898:	ea4f 6101 	mov.w	r1, r1, lsl #24
9000589c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
900058a0:	d00a      	beq.n	900058b8 <FMC_SDRAM_Timing_Init+0x60>
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900058a2:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
900058a4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900058a8:	4323      	orrs	r3, r4
900058aa:	4333      	orrs	r3, r6
900058ac:	432b      	orrs	r3, r5
900058ae:	430b      	orrs	r3, r1
900058b0:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
900058b2:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
900058b4:	2000      	movs	r0, #0
900058b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
900058b8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
900058bc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
900058c0:	4313      	orrs	r3, r2
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
900058c2:	68c2      	ldr	r2, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
900058c4:	f002 4c70 	and.w	ip, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900058c8:	ea44 0206 	orr.w	r2, r4, r6
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
900058cc:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900058ce:	433a      	orrs	r2, r7
900058d0:	432a      	orrs	r2, r5
900058d2:	430a      	orrs	r2, r1
900058d4:	ea42 020c 	orr.w	r2, r2, ip
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
900058d8:	60c2      	str	r2, [r0, #12]
900058da:	e7eb      	b.n	900058b4 <FMC_SDRAM_Timing_Init+0x5c>

900058dc <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900058dc:	e9d1 3200 	ldrd	r3, r2, [r1]
{
900058e0:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900058e2:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
900058e4:	68ca      	ldr	r2, [r1, #12]
  __IO uint32_t tmpr = 0;
900058e6:	2400      	movs	r4, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900058e8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
900058ec:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
900058ee:	9401      	str	r4, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
900058f0:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900058f2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
900058f6:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
900058f8:	9b01      	ldr	r3, [sp, #4]
900058fa:	6103      	str	r3, [r0, #16]
  
  return HAL_OK;  
}
900058fc:	4620      	mov	r0, r4
900058fe:	b002      	add	sp, #8
90005900:	bd10      	pop	{r4, pc}

90005902 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
90005902:	6943      	ldr	r3, [r0, #20]
90005904:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
90005908:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
9000590a:	2000      	movs	r0, #0
9000590c:	4770      	bx	lr
	...

90005910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
90005910:	4b0a      	ldr	r3, [pc, #40]	; (9000593c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
90005912:	3b01      	subs	r3, #1
90005914:	d00f      	beq.n	90005936 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90005916:	6902      	ldr	r2, [r0, #16]
90005918:	2a00      	cmp	r2, #0
9000591a:	dafa      	bge.n	90005912 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
9000591c:	6903      	ldr	r3, [r0, #16]
9000591e:	4a07      	ldr	r2, [pc, #28]	; (9000593c <USB_CoreReset+0x2c>)
90005920:	f043 0301 	orr.w	r3, r3, #1
90005924:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
90005926:	3a01      	subs	r2, #1
90005928:	d005      	beq.n	90005936 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
9000592a:	6903      	ldr	r3, [r0, #16]
9000592c:	f013 0301 	ands.w	r3, r3, #1
90005930:	d1f9      	bne.n	90005926 <USB_CoreReset+0x16>

  return HAL_OK;
90005932:	4618      	mov	r0, r3
90005934:	4770      	bx	lr
      return HAL_TIMEOUT;
90005936:	2003      	movs	r0, #3
}
90005938:	4770      	bx	lr
9000593a:	bf00      	nop
9000593c:	00030d41 	.word	0x00030d41

90005940 <USB_CoreInit>:
{
90005940:	b084      	sub	sp, #16
90005942:	b538      	push	{r3, r4, r5, lr}
90005944:	ad05      	add	r5, sp, #20
90005946:	4604      	mov	r4, r0
90005948:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
9000594c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9000594e:	2b01      	cmp	r3, #1
90005950:	d126      	bne.n	900059a0 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
90005952:	6b83      	ldr	r3, [r0, #56]	; 0x38
90005954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90005958:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
9000595a:	68c3      	ldr	r3, [r0, #12]
9000595c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
90005960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
90005964:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
90005966:	68c3      	ldr	r3, [r0, #12]
90005968:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
9000596c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
9000596e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90005970:	2b01      	cmp	r3, #1
90005972:	d103      	bne.n	9000597c <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
90005974:	68c3      	ldr	r3, [r0, #12]
90005976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
9000597a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
9000597c:	4620      	mov	r0, r4
9000597e:	f7ff ffc7 	bl	90005910 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
90005982:	9b08      	ldr	r3, [sp, #32]
90005984:	2b01      	cmp	r3, #1
90005986:	d107      	bne.n	90005998 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
90005988:	68a3      	ldr	r3, [r4, #8]
9000598a:	f043 0306 	orr.w	r3, r3, #6
9000598e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
90005990:	68a3      	ldr	r3, [r4, #8]
90005992:	f043 0320 	orr.w	r3, r3, #32
90005996:	60a3      	str	r3, [r4, #8]
}
90005998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000599c:	b004      	add	sp, #16
9000599e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
900059a0:	68c3      	ldr	r3, [r0, #12]
900059a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900059a6:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
900059a8:	f7ff ffb2 	bl	90005910 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
900059ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
900059ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900059b2:	63a3      	str	r3, [r4, #56]	; 0x38
900059b4:	e7e5      	b.n	90005982 <USB_CoreInit+0x42>

900059b6 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
900059b6:	6883      	ldr	r3, [r0, #8]
900059b8:	f043 0301 	orr.w	r3, r3, #1
900059bc:	6083      	str	r3, [r0, #8]
}
900059be:	2000      	movs	r0, #0
900059c0:	4770      	bx	lr

900059c2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
900059c2:	6883      	ldr	r3, [r0, #8]
900059c4:	f023 0301 	bic.w	r3, r3, #1
900059c8:	6083      	str	r3, [r0, #8]
}
900059ca:	2000      	movs	r0, #0
900059cc:	4770      	bx	lr

900059ce <USB_SetCurrentMode>:
{
900059ce:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
900059d0:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
900059d2:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
900059d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
900059d8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
900059da:	d108      	bne.n	900059ee <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
900059dc:	68c3      	ldr	r3, [r0, #12]
900059de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
900059e2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
900059e4:	2032      	movs	r0, #50	; 0x32
900059e6:	f7fd f871 	bl	90002acc <HAL_Delay>
  return HAL_OK;
900059ea:	2000      	movs	r0, #0
}
900059ec:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
900059ee:	b919      	cbnz	r1, 900059f8 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
900059f0:	68c3      	ldr	r3, [r0, #12]
900059f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
900059f6:	e7f4      	b.n	900059e2 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
900059f8:	2001      	movs	r0, #1
900059fa:	e7f7      	b.n	900059ec <USB_SetCurrentMode+0x1e>

900059fc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
900059fc:	0189      	lsls	r1, r1, #6
900059fe:	4a07      	ldr	r2, [pc, #28]	; (90005a1c <USB_FlushTxFifo+0x20>)
90005a00:	f041 0120 	orr.w	r1, r1, #32
90005a04:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
90005a06:	3a01      	subs	r2, #1
90005a08:	d005      	beq.n	90005a16 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
90005a0a:	6903      	ldr	r3, [r0, #16]
90005a0c:	f013 0320 	ands.w	r3, r3, #32
90005a10:	d1f9      	bne.n	90005a06 <USB_FlushTxFifo+0xa>
  return HAL_OK;
90005a12:	4618      	mov	r0, r3
90005a14:	4770      	bx	lr
      return HAL_TIMEOUT;
90005a16:	2003      	movs	r0, #3
}
90005a18:	4770      	bx	lr
90005a1a:	bf00      	nop
90005a1c:	00030d41 	.word	0x00030d41

90005a20 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
90005a20:	2310      	movs	r3, #16
90005a22:	4a06      	ldr	r2, [pc, #24]	; (90005a3c <USB_FlushRxFifo+0x1c>)
90005a24:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
90005a26:	3a01      	subs	r2, #1
90005a28:	d005      	beq.n	90005a36 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
90005a2a:	6903      	ldr	r3, [r0, #16]
90005a2c:	f013 0310 	ands.w	r3, r3, #16
90005a30:	d1f9      	bne.n	90005a26 <USB_FlushRxFifo+0x6>
  return HAL_OK;
90005a32:	4618      	mov	r0, r3
90005a34:	4770      	bx	lr
      return HAL_TIMEOUT;
90005a36:	2003      	movs	r0, #3
}
90005a38:	4770      	bx	lr
90005a3a:	bf00      	nop
90005a3c:	00030d41 	.word	0x00030d41

90005a40 <USB_WritePacket>:
{
90005a40:	b510      	push	{r4, lr}
90005a42:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
90005a46:	b944      	cbnz	r4, 90005a5a <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
90005a48:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
90005a4a:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
90005a4c:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
90005a4e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
90005a52:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
90005a56:	428b      	cmp	r3, r1
90005a58:	d101      	bne.n	90005a5e <USB_WritePacket+0x1e>
}
90005a5a:	2000      	movs	r0, #0
90005a5c:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
90005a5e:	f851 2b04 	ldr.w	r2, [r1], #4
90005a62:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
90005a64:	e7f7      	b.n	90005a56 <USB_WritePacket+0x16>

90005a66 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
90005a66:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
90005a68:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
90005a6c:	0892      	lsrs	r2, r2, #2
90005a6e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
90005a72:	4291      	cmp	r1, r2
90005a74:	d101      	bne.n	90005a7a <USB_ReadPacket+0x14>
}
90005a76:	4608      	mov	r0, r1
90005a78:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
90005a7a:	6803      	ldr	r3, [r0, #0]
90005a7c:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
90005a80:	e7f7      	b.n	90005a72 <USB_ReadPacket+0xc>

90005a82 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
90005a82:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
90005a84:	6980      	ldr	r0, [r0, #24]
}
90005a86:	4010      	ands	r0, r2
90005a88:	4770      	bx	lr

90005a8a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
90005a8a:	6940      	ldr	r0, [r0, #20]
}
90005a8c:	f000 0001 	and.w	r0, r0, #1
90005a90:	4770      	bx	lr

90005a92 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90005a92:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
90005a96:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90005a98:	f500 6280 	add.w	r2, r0, #1024	; 0x400
90005a9c:	f023 0303 	bic.w	r3, r3, #3
{
90005aa0:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90005aa2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
90005aa6:	f001 0303 	and.w	r3, r1, #3
90005aaa:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
90005aae:	ea43 0304 	orr.w	r3, r3, r4
90005ab2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
90005ab6:	d104      	bne.n	90005ac2 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
90005ab8:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
90005abc:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
90005abe:	2000      	movs	r0, #0
90005ac0:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
90005ac2:	2902      	cmp	r1, #2
90005ac4:	d1fb      	bne.n	90005abe <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
90005ac6:	f241 7370 	movw	r3, #6000	; 0x1770
90005aca:	e7f7      	b.n	90005abc <USB_InitFSLSPClkSel+0x2a>

90005acc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
90005acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
90005ace:	2500      	movs	r5, #0
{
90005ad0:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
90005ad2:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
90005ad4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
90005ad8:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
90005ada:	9b01      	ldr	r3, [sp, #4]
90005adc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
90005ae0:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
90005ae2:	9b01      	ldr	r3, [sp, #4]
90005ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90005ae8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
90005aec:	2064      	movs	r0, #100	; 0x64
90005aee:	f7fc ffed 	bl	90002acc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
90005af2:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
90005af4:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
90005af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90005afa:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
90005afe:	f7fc ffe5 	bl	90002acc <HAL_Delay>

  return HAL_OK;
}
90005b02:	4628      	mov	r0, r5
90005b04:	b003      	add	sp, #12
90005b06:	bd30      	pop	{r4, r5, pc}

90005b08 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
90005b08:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
90005b0a:	2300      	movs	r3, #0
90005b0c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
90005b0e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
90005b12:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
90005b14:	9b01      	ldr	r3, [sp, #4]
90005b16:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
90005b1a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
90005b1c:	9b01      	ldr	r3, [sp, #4]
90005b1e:	04da      	lsls	r2, r3, #19
90005b20:	d406      	bmi.n	90005b30 <USB_DriveVbus+0x28>
90005b22:	2901      	cmp	r1, #1
90005b24:	d104      	bne.n	90005b30 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
90005b26:	9b01      	ldr	r3, [sp, #4]
90005b28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90005b2c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
90005b30:	9b01      	ldr	r3, [sp, #4]
90005b32:	04db      	lsls	r3, r3, #19
90005b34:	d505      	bpl.n	90005b42 <USB_DriveVbus+0x3a>
90005b36:	b921      	cbnz	r1, 90005b42 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
90005b38:	9b01      	ldr	r3, [sp, #4]
90005b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90005b3e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
90005b42:	2000      	movs	r0, #0
90005b44:	b002      	add	sp, #8
90005b46:	4770      	bx	lr

90005b48 <USB_HostInit>:
{
90005b48:	b084      	sub	sp, #16
90005b4a:	b538      	push	{r3, r4, r5, lr}
90005b4c:	4604      	mov	r4, r0
90005b4e:	a805      	add	r0, sp, #20
90005b50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
90005b54:	2300      	movs	r3, #0
90005b56:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
90005b5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90005b5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
90005b60:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
90005b62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90005b64:	05da      	lsls	r2, r3, #23
90005b66:	d53f      	bpl.n	90005be8 <USB_HostInit+0xa0>
    if (cfg.speed == USBH_FSLS_SPEED)
90005b68:	9b07      	ldr	r3, [sp, #28]
90005b6a:	2b01      	cmp	r3, #1
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
90005b6c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
90005b70:	d13c      	bne.n	90005bec <USB_HostInit+0xa4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
90005b72:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
90005b76:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
90005b7a:	2110      	movs	r1, #16
90005b7c:	4620      	mov	r0, r4
90005b7e:	f7ff ff3d 	bl	900059fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
90005b82:	4620      	mov	r0, r4
90005b84:	f7ff ff4c 	bl	90005a20 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
90005b88:	2300      	movs	r3, #0
90005b8a:	9906      	ldr	r1, [sp, #24]
90005b8c:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
90005b90:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
90005b94:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
90005b96:	4299      	cmp	r1, r3
90005b98:	d12b      	bne.n	90005bf2 <USB_HostInit+0xaa>
  (void)USB_DriveVbus(USBx, 1U);
90005b9a:	2101      	movs	r1, #1
90005b9c:	4620      	mov	r0, r4
90005b9e:	f7ff ffb3 	bl	90005b08 <USB_DriveVbus>
  HAL_Delay(200U);
90005ba2:	20c8      	movs	r0, #200	; 0xc8
90005ba4:	f7fc ff92 	bl	90002acc <HAL_Delay>
  USBx->GINTMSK = 0U;
90005ba8:	2300      	movs	r3, #0
90005baa:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
90005bac:	f04f 33ff 	mov.w	r3, #4294967295
90005bb0:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
90005bb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90005bb4:	05db      	lsls	r3, r3, #23
90005bb6:	d521      	bpl.n	90005bfc <USB_HostInit+0xb4>
    USBx->GRXFSIZ  = 0x200U;
90005bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
90005bbc:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
90005bbe:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
90005bc2:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
90005bc4:	4b11      	ldr	r3, [pc, #68]	; (90005c0c <USB_HostInit+0xc4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
90005bc6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
90005bca:	9b08      	ldr	r3, [sp, #32]
90005bcc:	b91b      	cbnz	r3, 90005bd6 <USB_HostInit+0x8e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
90005bce:	69a3      	ldr	r3, [r4, #24]
90005bd0:	f043 0310 	orr.w	r3, r3, #16
90005bd4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
90005bd6:	69a2      	ldr	r2, [r4, #24]
}
90005bd8:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
90005bda:	4b0d      	ldr	r3, [pc, #52]	; (90005c10 <USB_HostInit+0xc8>)
90005bdc:	4313      	orrs	r3, r2
90005bde:	61a3      	str	r3, [r4, #24]
}
90005be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90005be4:	b004      	add	sp, #16
90005be6:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
90005be8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
90005bec:	f023 0304 	bic.w	r3, r3, #4
90005bf0:	e7c1      	b.n	90005b76 <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
90005bf2:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
90005bf4:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
90005bf6:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
90005bf8:	3220      	adds	r2, #32
90005bfa:	e7cc      	b.n	90005b96 <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x80U;
90005bfc:	2380      	movs	r3, #128	; 0x80
90005bfe:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
90005c00:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
90005c04:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
90005c06:	4b03      	ldr	r3, [pc, #12]	; (90005c14 <USB_HostInit+0xcc>)
90005c08:	e7dd      	b.n	90005bc6 <USB_HostInit+0x7e>
90005c0a:	bf00      	nop
90005c0c:	00e00300 	.word	0x00e00300
90005c10:	a3200008 	.word	0xa3200008
90005c14:	004000e0 	.word	0x004000e0

90005c18 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
90005c18:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
90005c1a:	2300      	movs	r3, #0
90005c1c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
90005c1e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
90005c22:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
90005c24:	9801      	ldr	r0, [sp, #4]
}
90005c26:	f3c0 4041 	ubfx	r0, r0, #17, #2
90005c2a:	b002      	add	sp, #8
90005c2c:	4770      	bx	lr

90005c2e <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
90005c2e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
90005c32:	6880      	ldr	r0, [r0, #8]
}
90005c34:	b280      	uxth	r0, r0
90005c36:	4770      	bx	lr

90005c38 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
90005c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
90005c3c:	eb00 1641 	add.w	r6, r0, r1, lsl #5
{
90005c40:	4605      	mov	r5, r0
90005c42:	f89d 701c 	ldrb.w	r7, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
90005c46:	f04f 30ff 	mov.w	r0, #4294967295
90005c4a:	f506 64a0 	add.w	r4, r6, #1280	; 0x500
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
90005c4e:	fa4f fc82 	sxtb.w	ip, r2
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
90005c52:	60a0      	str	r0, [r4, #8]
  switch (ep_type)
90005c54:	2f03      	cmp	r7, #3
90005c56:	d861      	bhi.n	90005d1c <USB_HC_Init+0xe4>
90005c58:	e8df f007 	tbb	[pc, r7]
90005c5c:	4f025602 	.word	0x4f025602
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005c60:	f240 409d 	movw	r0, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
90005c64:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005c68:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
90005c6a:	da03      	bge.n	90005c74 <USB_HC_Init+0x3c>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
90005c6c:	68e0      	ldr	r0, [r4, #12]
90005c6e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
90005c72:	e040      	b.n	90005cf6 <USB_HC_Init+0xbe>
        if ((USBx->CID & (0x1U << 8)) != 0U)
90005c74:	6be8      	ldr	r0, [r5, #60]	; 0x3c
90005c76:	05c0      	lsls	r0, r0, #23
90005c78:	d43a      	bmi.n	90005cf0 <USB_HC_Init+0xb8>
  HAL_StatusTypeDef ret = HAL_OK;
90005c7a:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
90005c7c:	f001 040f 	and.w	r4, r1, #15
90005c80:	2101      	movs	r1, #1
90005c82:	f8d5 8418 	ldr.w	r8, [r5, #1048]	; 0x418
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
90005c86:	059b      	lsls	r3, r3, #22
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
90005c88:	40a1      	lsls	r1, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
90005c8a:	02d2      	lsls	r2, r2, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
90005c8c:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
90005c90:	f505 6e80 	add.w	lr, r5, #1024	; 0x400
90005c94:	ea41 0108 	orr.w	r1, r1, r8
90005c98:	f8c5 1418 	str.w	r1, [r5, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
90005c9c:	69a9      	ldr	r1, [r5, #24]
90005c9e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
90005ca2:	61a9      	str	r1, [r5, #24]
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
90005ca4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
90005ca8:	f3c1 010a 	ubfx	r1, r1, #0, #11
90005cac:	430b      	orrs	r3, r1
  if (speed == HPRT0_PRTSPD_LOW_SPEED)
90005cae:	f89d 1018 	ldrb.w	r1, [sp, #24]
90005cb2:	1e8c      	subs	r4, r1, #2
90005cb4:	4261      	negs	r1, r4
90005cb6:	4161      	adcs	r1, r4

  if (ep_type == EP_TYPE_INTR)
90005cb8:	2f03      	cmp	r7, #3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
90005cba:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
90005cbe:	f402 41f0 	and.w	r1, r2, #30720	; 0x7800
  if ((epnum & 0x80U) == 0x80U)
90005cc2:	ea4f 72dc 	mov.w	r2, ip, lsr #31
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
90005cc6:	ea43 0301 	orr.w	r3, r3, r1
90005cca:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
90005cce:	ea4f 4287 	mov.w	r2, r7, lsl #18
90005cd2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
90005cd6:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
90005cda:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
90005cde:	d105      	bne.n	90005cec <USB_HC_Init+0xb4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
90005ce0:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
90005ce4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
90005ce8:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  }

  return ret;
}
90005cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
90005cf0:	68e0      	ldr	r0, [r4, #12]
90005cf2:	f040 0060 	orr.w	r0, r0, #96	; 0x60
90005cf6:	60e0      	str	r0, [r4, #12]
90005cf8:	e7bf      	b.n	90005c7a <USB_HC_Init+0x42>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005cfa:	f240 609d 	movw	r0, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
90005cfe:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005d02:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
90005d04:	dab9      	bge.n	90005c7a <USB_HC_Init+0x42>
90005d06:	e7b1      	b.n	90005c6c <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005d08:	f240 2025 	movw	r0, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
90005d0c:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005d10:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
90005d12:	dab2      	bge.n	90005c7a <USB_HC_Init+0x42>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
90005d14:	68e0      	ldr	r0, [r4, #12]
90005d16:	f440 70c0 	orr.w	r0, r0, #384	; 0x180
90005d1a:	e7ec      	b.n	90005cf6 <USB_HC_Init+0xbe>
  switch (ep_type)
90005d1c:	2001      	movs	r0, #1
90005d1e:	e7ad      	b.n	90005c7c <USB_HC_Init+0x44>

90005d20 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
90005d20:	f500 6080 	add.w	r0, r0, #1024	; 0x400
90005d24:	6940      	ldr	r0, [r0, #20]
}
90005d26:	b280      	uxth	r0, r0
90005d28:	4770      	bx	lr

90005d2a <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
90005d2a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
90005d2e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005d32:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
90005d36:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
90005d3a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005d3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90005d42:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
90005d46:	d11e      	bne.n	90005d86 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
90005d48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90005d4a:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005d4e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
90005d52:	d137      	bne.n	90005dc4 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90005d58:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90005d5c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90005d64:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
90005d68:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005d6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90005d70:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
90005d74:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
90005d78:	3b01      	subs	r3, #1
90005d7a:	d002      	beq.n	90005d82 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90005d7c:	6811      	ldr	r1, [r2, #0]
90005d7e:	2900      	cmp	r1, #0
90005d80:	dbfa      	blt.n	90005d78 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
90005d82:	2000      	movs	r0, #0
90005d84:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
90005d86:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
90005d8a:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005d8e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
90005d92:	d117      	bne.n	90005dc4 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90005d98:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90005d9c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90005da4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
90005da8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005dac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90005db0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
90005db4:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
90005db8:	3b01      	subs	r3, #1
90005dba:	d0e2      	beq.n	90005d82 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90005dbc:	6811      	ldr	r1, [r2, #0]
90005dbe:	2900      	cmp	r1, #0
90005dc0:	dbfa      	blt.n	90005db8 <USB_HC_Halt+0x8e>
90005dc2:	e7de      	b.n	90005d82 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90005dc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90005dc8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
90005dcc:	e7d9      	b.n	90005d82 <USB_HC_Halt+0x58>
	...

90005dd0 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
90005dd0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
90005dd4:	4a06      	ldr	r2, [pc, #24]	; (90005df0 <USB_DoPing+0x20>)
90005dd6:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
90005dda:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005dde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
90005de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
90005de6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

  return HAL_OK;
}
90005dea:	2000      	movs	r0, #0
90005dec:	4770      	bx	lr
90005dee:	bf00      	nop
90005df0:	80080000 	.word	0x80080000

90005df4 <USB_HC_StartXfer>:
{
90005df4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90005df8:	4613      	mov	r3, r2
90005dfa:	460c      	mov	r4, r1
  uint32_t ch_num = (uint32_t)hc->ch_num;
90005dfc:	784a      	ldrb	r2, [r1, #1]
{
90005dfe:	4606      	mov	r6, r0
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
90005e00:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90005e02:	05c9      	lsls	r1, r1, #23
90005e04:	d517      	bpl.n	90005e36 <USB_HC_StartXfer+0x42>
90005e06:	7925      	ldrb	r5, [r4, #4]
90005e08:	b9ad      	cbnz	r5, 90005e36 <USB_HC_StartXfer+0x42>
    if ((dma == 0U) && (hc->do_ping == 1U))
90005e0a:	b94b      	cbnz	r3, 90005e20 <USB_HC_StartXfer+0x2c>
90005e0c:	7961      	ldrb	r1, [r4, #5]
90005e0e:	2901      	cmp	r1, #1
90005e10:	d111      	bne.n	90005e36 <USB_HC_StartXfer+0x42>
      (void)USB_DoPing(USBx, hc->ch_num);
90005e12:	4611      	mov	r1, r2
90005e14:	f7ff ffdc 	bl	90005dd0 <USB_DoPing>
}
90005e18:	2000      	movs	r0, #0
90005e1a:	b002      	add	sp, #8
90005e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
90005e20:	2b01      	cmp	r3, #1
90005e22:	d108      	bne.n	90005e36 <USB_HC_StartXfer+0x42>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
90005e24:	eb00 1142 	add.w	r1, r0, r2, lsl #5
90005e28:	f8d1 050c 	ldr.w	r0, [r1, #1292]	; 0x50c
90005e2c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90005e30:	f8c1 050c 	str.w	r0, [r1, #1292]	; 0x50c
      hc->do_ping = 0U;
90005e34:	7165      	strb	r5, [r4, #5]
  if (hc->xfer_len > 0U)
90005e36:	6925      	ldr	r5, [r4, #16]
90005e38:	2d00      	cmp	r5, #0
90005e3a:	d064      	beq.n	90005f06 <USB_HC_StartXfer+0x112>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
90005e3c:	8921      	ldrh	r1, [r4, #8]
90005e3e:	3d01      	subs	r5, #1
90005e40:	440d      	add	r5, r1
90005e42:	fbb5 f5f1 	udiv	r5, r5, r1
90005e46:	b2ad      	uxth	r5, r5
    if (num_packets > max_hc_pkt_count)
90005e48:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90005e4c:	d903      	bls.n	90005e56 <USB_HC_StartXfer+0x62>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
90005e4e:	0209      	lsls	r1, r1, #8
      num_packets = max_hc_pkt_count;
90005e50:	f44f 7580 	mov.w	r5, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
90005e54:	6121      	str	r1, [r4, #16]
  if (hc->ep_is_in != 0U)
90005e56:	f894 c003 	ldrb.w	ip, [r4, #3]
90005e5a:	f1bc 0f00 	cmp.w	ip, #0
90005e5e:	d002      	beq.n	90005e66 <USB_HC_StartXfer+0x72>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
90005e60:	8921      	ldrh	r1, [r4, #8]
90005e62:	4369      	muls	r1, r5
90005e64:	6121      	str	r1, [r4, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
90005e66:	7aa0      	ldrb	r0, [r4, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005e68:	eb06 1742 	add.w	r7, r6, r2, lsl #5
90005e6c:	6921      	ldr	r1, [r4, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
90005e6e:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005e70:	f3c1 0812 	ubfx	r8, r1, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
90005e74:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
90005e78:	ea40 0008 	orr.w	r0, r0, r8
90005e7c:	ea40 40c5 	orr.w	r0, r0, r5, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005e80:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510
  if (dma != 0U)
90005e84:	b113      	cbz	r3, 90005e8c <USB_HC_StartXfer+0x98>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
90005e86:	68e0      	ldr	r0, [r4, #12]
90005e88:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
90005e8c:	f8d6 0408 	ldr.w	r0, [r6, #1032]	; 0x408
90005e90:	f506 6580 	add.w	r5, r6, #1024	; 0x400
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
90005e94:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
90005e98:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
90005e9a:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
90005e9e:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
90005ea0:	f8c7 e500 	str.w	lr, [r7, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
90005ea4:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
90005ea8:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
90005eac:	ea40 000e 	orr.w	r0, r0, lr
90005eb0:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
90005eb4:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
90005eb8:	4824      	ldr	r0, [pc, #144]	; (90005f4c <USB_HC_StartXfer+0x158>)
90005eba:	f8c0 e000 	str.w	lr, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005ebe:	f8d0 e000 	ldr.w	lr, [r0]
90005ec2:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
90005ec6:	f8c0 e000 	str.w	lr, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
90005eca:	f8d0 e000 	ldr.w	lr, [r0]
  if (hc->ep_is_in != 0U)
90005ece:	f1bc 0f00 	cmp.w	ip, #0
90005ed2:	d01a      	beq.n	90005f0a <USB_HC_StartXfer+0x116>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
90005ed4:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
90005ed8:	f8c0 e000 	str.w	lr, [r0]
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
90005edc:	ea5c 0c03 	orrs.w	ip, ip, r3
  tmpreg |= USB_OTG_HCCHAR_CHENA;
90005ee0:	f8d0 e000 	ldr.w	lr, [r0]
90005ee4:	f04e 4e00 	orr.w	lr, lr, #2147483648	; 0x80000000
90005ee8:	f8c0 e000 	str.w	lr, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
90005eec:	6800      	ldr	r0, [r0, #0]
90005eee:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
90005ef2:	d191      	bne.n	90005e18 <USB_HC_StartXfer+0x24>
90005ef4:	2900      	cmp	r1, #0
90005ef6:	d08f      	beq.n	90005e18 <USB_HC_StartXfer+0x24>
      switch (hc->ep_type)
90005ef8:	79e3      	ldrb	r3, [r4, #7]
90005efa:	2b03      	cmp	r3, #3
90005efc:	d813      	bhi.n	90005f26 <USB_HC_StartXfer+0x132>
90005efe:	e8df f003 	tbb	[pc, r3]
90005f02:	1a07      	.short	0x1a07
90005f04:	1a07      	.short	0x1a07
    num_packets = 1U;
90005f06:	2501      	movs	r5, #1
90005f08:	e7a5      	b.n	90005e56 <USB_HC_StartXfer+0x62>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
90005f0a:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
90005f0e:	e7e3      	b.n	90005ed8 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
90005f10:	6af0      	ldr	r0, [r6, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
90005f12:	1ccb      	adds	r3, r1, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
90005f14:	b280      	uxth	r0, r0
90005f16:	f3c3 038f 	ubfx	r3, r3, #2, #16
90005f1a:	4298      	cmp	r0, r3
90005f1c:	d203      	bcs.n	90005f26 <USB_HC_StartXfer+0x132>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
90005f1e:	69b3      	ldr	r3, [r6, #24]
90005f20:	f043 0320 	orr.w	r3, r3, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
90005f24:	61b3      	str	r3, [r6, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
90005f26:	2300      	movs	r3, #0
90005f28:	4630      	mov	r0, r6
90005f2a:	9300      	str	r3, [sp, #0]
90005f2c:	b28b      	uxth	r3, r1
90005f2e:	68e1      	ldr	r1, [r4, #12]
90005f30:	f7ff fd86 	bl	90005a40 <USB_WritePacket>
90005f34:	e770      	b.n	90005e18 <USB_HC_StartXfer+0x24>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
90005f36:	6928      	ldr	r0, [r5, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
90005f38:	1ccb      	adds	r3, r1, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
90005f3a:	b280      	uxth	r0, r0
90005f3c:	f3c3 038f 	ubfx	r3, r3, #2, #16
90005f40:	4298      	cmp	r0, r3
90005f42:	d2f0      	bcs.n	90005f26 <USB_HC_StartXfer+0x132>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
90005f44:	69b3      	ldr	r3, [r6, #24]
90005f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90005f4a:	e7eb      	b.n	90005f24 <USB_HC_StartXfer+0x130>
90005f4c:	20000770 	.word	0x20000770

90005f50 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005f50:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
90005f52:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005f54:	f023 0301 	bic.w	r3, r3, #1
{
90005f58:	b510      	push	{r4, lr}
90005f5a:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005f5c:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
90005f5e:	f7ff fd4d 	bl	900059fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
90005f62:	4620      	mov	r0, r4
90005f64:	f7ff fd5c 	bl	90005a20 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
90005f68:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
90005f6c:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);
90005f70:	4619      	mov	r1, r3
  {
    value = USBx_HC(i)->HCCHAR;
90005f72:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
90005f74:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
90005f78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
90005f7c:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
90005f80:	4281      	cmp	r1, r0
90005f82:	d1f6      	bne.n	90005f72 <USB_StopHost+0x22>
  uint32_t count = 0U;
90005f84:	2100      	movs	r1, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
90005f86:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
90005f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90005f8c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
90005f90:	601a      	str	r2, [r3, #0]

    do
    {
      if (++count > 1000U)
90005f92:	3101      	adds	r1, #1
90005f94:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
90005f98:	d802      	bhi.n	90005fa0 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90005f9a:	681a      	ldr	r2, [r3, #0]
90005f9c:	2a00      	cmp	r2, #0
90005f9e:	dbf8      	blt.n	90005f92 <USB_StopHost+0x42>
  for (i = 0U; i <= 15U; i++)
90005fa0:	3320      	adds	r3, #32
90005fa2:	4283      	cmp	r3, r0
90005fa4:	d1ef      	bne.n	90005f86 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
90005fa6:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
90005faa:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
90005fac:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
90005fb0:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
90005fb2:	68a3      	ldr	r3, [r4, #8]
90005fb4:	f043 0301 	orr.w	r3, r3, #1
90005fb8:	60a3      	str	r3, [r4, #8]
}
90005fba:	bd10      	pop	{r4, pc}

90005fbc <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
90005fbc:	2000      	movs	r0, #0
90005fbe:	4770      	bx	lr

90005fc0 <USBH_MSC_Process>:
{
90005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005fc2:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90005fc6:	4607      	mov	r7, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005fc8:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->state)
90005fca:	7b23      	ldrb	r3, [r4, #12]
90005fcc:	b123      	cbz	r3, 90005fd8 <USBH_MSC_Process+0x18>
90005fce:	2b01      	cmp	r3, #1
90005fd0:	f000 816d 	beq.w	900062ae <USBH_MSC_Process+0x2ee>
  USBH_StatusTypeDef error = USBH_BUSY;
90005fd4:	2001      	movs	r0, #1
            break;
90005fd6:	e0fb      	b.n	900061d0 <USBH_MSC_Process+0x210>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
90005fd8:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
90005fdc:	2501      	movs	r5, #1
90005fde:	7822      	ldrb	r2, [r4, #0]
90005fe0:	428a      	cmp	r2, r1
90005fe2:	f240 815c 	bls.w	9000629e <USBH_MSC_Process+0x2de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
90005fe6:	2634      	movs	r6, #52	; 0x34
90005fe8:	fb06 4301 	mla	r3, r6, r1, r4
90005fec:	f883 5091 	strb.w	r5, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
90005ff0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
90005ff4:	2b08      	cmp	r3, #8
90005ff6:	d8ed      	bhi.n	90005fd4 <USBH_MSC_Process+0x14>
90005ff8:	a201      	add	r2, pc, #4	; (adr r2, 90006000 <USBH_MSC_Process+0x40>)
90005ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005ffe:	bf00      	nop
90006000:	90006025 	.word	0x90006025
90006004:	90005fd5 	.word	0x90005fd5
90006008:	900060af 	.word	0x900060af
9000600c:	90006157 	.word	0x90006157
90006010:	9000604b 	.word	0x9000604b
90006014:	900061e3 	.word	0x900061e3
90006018:	90005fd5 	.word	0x90005fd5
9000601c:	90005fd5 	.word	0x90005fd5
90006020:	90006297 	.word	0x90006297
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
90006024:	48a3      	ldr	r0, [pc, #652]	; (900062b4 <USBH_MSC_Process+0x2f4>)
90006026:	f005 fd3d 	bl	9000baa4 <iprintf>
9000602a:	200a      	movs	r0, #10
9000602c:	f005 fd4c 	bl	9000bac8 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
90006030:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006034:	2234      	movs	r2, #52	; 0x34
90006036:	fb02 4303 	mla	r3, r2, r3, r4
9000603a:	2204      	movs	r2, #4
9000603c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
90006040:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
90006044:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
            break;
90006048:	e7c4      	b.n	90005fd4 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
9000604a:	fb06 4201 	mla	r2, r6, r1, r4
9000604e:	b2c9      	uxtb	r1, r1
90006050:	329f      	adds	r2, #159	; 0x9f
90006052:	f000 fc9b 	bl	9000698c <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
90006056:	2800      	cmp	r0, #0
90006058:	f040 80bb 	bne.w	900061d2 <USBH_MSC_Process+0x212>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
9000605c:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
90006060:	4895      	ldr	r0, [pc, #596]	; (900062b8 <USBH_MSC_Process+0x2f8>)
90006062:	fb06 4101 	mla	r1, r6, r1, r4
90006066:	31a2      	adds	r1, #162	; 0xa2
90006068:	f005 fd1c 	bl	9000baa4 <iprintf>
9000606c:	200a      	movs	r0, #10
9000606e:	f005 fd2b 	bl	9000bac8 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
90006072:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
90006076:	4891      	ldr	r0, [pc, #580]	; (900062bc <USBH_MSC_Process+0x2fc>)
90006078:	fb06 4101 	mla	r1, r6, r1, r4
9000607c:	31ab      	adds	r1, #171	; 0xab
9000607e:	f005 fd11 	bl	9000baa4 <iprintf>
90006082:	200a      	movs	r0, #10
90006084:	f005 fd20 	bl	9000bac8 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
90006088:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
9000608c:	488c      	ldr	r0, [pc, #560]	; (900062c0 <USBH_MSC_Process+0x300>)
9000608e:	fb06 4101 	mla	r1, r6, r1, r4
90006092:	31bc      	adds	r1, #188	; 0xbc
90006094:	f005 fd06 	bl	9000baa4 <iprintf>
90006098:	200a      	movs	r0, #10
9000609a:	f005 fd15 	bl	9000bac8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
9000609e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900060a2:	2202      	movs	r2, #2
900060a4:	fb06 4303 	mla	r3, r6, r3, r4
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
900060a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
900060ac:	e792      	b.n	90005fd4 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
900060ae:	b2c9      	uxtb	r1, r1
900060b0:	f000 fc14 	bl	900068dc <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
900060b4:	b9f8      	cbnz	r0, 900060f6 <USBH_MSC_Process+0x136>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
900060b6:	2234      	movs	r2, #52	; 0x34
900060b8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900060bc:	fb02 4303 	mla	r3, r2, r3, r4
900060c0:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
900060c4:	b1a2      	cbz	r2, 900060f0 <USBH_MSC_Process+0x130>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
900060c6:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device ready");
900060c8:	487e      	ldr	r0, [pc, #504]	; (900062c4 <USBH_MSC_Process+0x304>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
900060ca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device ready");
900060ce:	f005 fce9 	bl	9000baa4 <iprintf>
900060d2:	200a      	movs	r0, #10
900060d4:	f005 fcf8 	bl	9000bac8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
900060d8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900060dc:	2234      	movs	r2, #52	; 0x34
900060de:	fb02 4303 	mla	r3, r2, r3, r4
900060e2:	2203      	movs	r2, #3
900060e4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
900060e8:	2200      	movs	r2, #0
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
900060ea:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
900060ee:	e771      	b.n	90005fd4 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
900060f0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
900060f4:	e7f0      	b.n	900060d8 <USBH_MSC_Process+0x118>
            if (ready_status == USBH_FAIL)
900060f6:	2802      	cmp	r0, #2
900060f8:	d120      	bne.n	9000613c <USBH_MSC_Process+0x17c>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
900060fa:	2234      	movs	r2, #52	; 0x34
900060fc:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006100:	fb02 4303 	mla	r3, r2, r3, r4
90006104:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
90006108:	2a02      	cmp	r2, #2
9000610a:	d013      	beq.n	90006134 <USBH_MSC_Process+0x174>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
9000610c:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device NOT ready");
9000610e:	486e      	ldr	r0, [pc, #440]	; (900062c8 <USBH_MSC_Process+0x308>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
90006110:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device NOT ready");
90006114:	f005 fcc6 	bl	9000baa4 <iprintf>
90006118:	200a      	movs	r0, #10
9000611a:	f005 fcd5 	bl	9000bac8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
9000611e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006122:	2234      	movs	r2, #52	; 0x34
90006124:	fb02 4303 	mla	r3, r2, r3, r4
90006128:	f240 1205 	movw	r2, #261	; 0x105
9000612c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
90006130:	2202      	movs	r2, #2
90006132:	e7da      	b.n	900060ea <USBH_MSC_Process+0x12a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
90006134:	2200      	movs	r2, #0
90006136:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
9000613a:	e7f0      	b.n	9000611e <USBH_MSC_Process+0x15e>
              if (ready_status == USBH_UNRECOVERED_ERROR)
9000613c:	2804      	cmp	r0, #4
9000613e:	f47f af49 	bne.w	90005fd4 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90006142:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006146:	2234      	movs	r2, #52	; 0x34
90006148:	fb02 4303 	mla	r3, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
9000614c:	f240 2201 	movw	r2, #513	; 0x201
90006150:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
90006154:	e73e      	b.n	90005fd4 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
90006156:	fb06 4201 	mla	r2, r6, r1, r4
9000615a:	b2c9      	uxtb	r1, r1
9000615c:	3294      	adds	r2, #148	; 0x94
9000615e:	f000 fbe0 	bl	90006922 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
90006162:	bbb0      	cbnz	r0, 900061d2 <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
90006164:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006168:	fb06 4303 	mla	r3, r6, r3, r4
9000616c:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
90006170:	2a01      	cmp	r2, #1
90006172:	d122      	bne.n	900061ba <USBH_MSC_Process+0x1fa>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
90006174:	f8b3 2098 	ldrh.w	r2, [r3, #152]	; 0x98
90006178:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
9000617c:	4853      	ldr	r0, [pc, #332]	; (900062cc <USBH_MSC_Process+0x30c>)
9000617e:	4351      	muls	r1, r2
90006180:	f005 fc90 	bl	9000baa4 <iprintf>
90006184:	200a      	movs	r0, #10
90006186:	f005 fc9f 	bl	9000bac8 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
9000618a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000618e:	4850      	ldr	r0, [pc, #320]	; (900062d0 <USBH_MSC_Process+0x310>)
90006190:	fb06 4303 	mla	r3, r6, r3, r4
90006194:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
90006198:	f005 fc84 	bl	9000baa4 <iprintf>
9000619c:	200a      	movs	r0, #10
9000619e:	f005 fc93 	bl	9000bac8 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
900061a2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900061a6:	484b      	ldr	r0, [pc, #300]	; (900062d4 <USBH_MSC_Process+0x314>)
900061a8:	fb06 4303 	mla	r3, r6, r3, r4
900061ac:	f8b3 1098 	ldrh.w	r1, [r3, #152]	; 0x98
900061b0:	f005 fc78 	bl	9000baa4 <iprintf>
900061b4:	200a      	movs	r0, #10
900061b6:	f005 fc87 	bl	9000bac8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
900061ba:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900061be:	2234      	movs	r2, #52	; 0x34
900061c0:	2001      	movs	r0, #1
900061c2:	fb02 4203 	mla	r2, r2, r3, r4
900061c6:	f8a2 0090 	strh.w	r0, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
900061ca:	4403      	add	r3, r0
900061cc:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
}
900061d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (scsi_status == USBH_FAIL)
900061d2:	2802      	cmp	r0, #2
900061d4:	d157      	bne.n	90006286 <USBH_MSC_Process+0x2c6>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
900061d6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900061da:	2205      	movs	r2, #5
900061dc:	fb06 4303 	mla	r3, r6, r3, r4
900061e0:	e762      	b.n	900060a8 <USBH_MSC_Process+0xe8>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
900061e2:	fb06 4201 	mla	r2, r6, r1, r4
900061e6:	b2c9      	uxtb	r1, r1
900061e8:	329c      	adds	r2, #156	; 0x9c
900061ea:	f000 fc2f 	bl	90006a4c <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
900061ee:	bbe0      	cbnz	r0, 9000626a <USBH_MSC_Process+0x2aa>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
900061f0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900061f4:	fb06 4303 	mla	r3, r6, r3, r4
900061f8:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
900061fc:	f001 00fb 	and.w	r0, r1, #251	; 0xfb
90006200:	2802      	cmp	r0, #2
90006202:	d10b      	bne.n	9000621c <USBH_MSC_Process+0x25c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
90006204:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
90006208:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
9000620c:	1b52      	subs	r2, r2, r5
9000620e:	f242 750f 	movw	r5, #9999	; 0x270f
90006212:	42aa      	cmp	r2, r5
90006214:	d802      	bhi.n	9000621c <USBH_MSC_Process+0x25c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
90006216:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                  break;
9000621a:	e6db      	b.n	90005fd4 <USBH_MSC_Process+0x14>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
9000621c:	482e      	ldr	r0, [pc, #184]	; (900062d8 <USBH_MSC_Process+0x318>)
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
9000621e:	2534      	movs	r5, #52	; 0x34
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
90006220:	f005 fc40 	bl	9000baa4 <iprintf>
90006224:	200a      	movs	r0, #10
90006226:	f005 fc4f 	bl	9000bac8 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
9000622a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000622e:	482b      	ldr	r0, [pc, #172]	; (900062dc <USBH_MSC_Process+0x31c>)
90006230:	fb05 4303 	mla	r3, r5, r3, r4
90006234:	f893 109d 	ldrb.w	r1, [r3, #157]	; 0x9d
90006238:	f005 fc34 	bl	9000baa4 <iprintf>
9000623c:	200a      	movs	r0, #10
9000623e:	f005 fc43 	bl	9000bac8 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
90006242:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006246:	4826      	ldr	r0, [pc, #152]	; (900062e0 <USBH_MSC_Process+0x320>)
90006248:	fb05 4303 	mla	r3, r5, r3, r4
9000624c:	f893 109e 	ldrb.w	r1, [r3, #158]	; 0x9e
90006250:	f005 fc28 	bl	9000baa4 <iprintf>
90006254:	200a      	movs	r0, #10
90006256:	f005 fc37 	bl	9000bac8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
9000625a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000625e:	2001      	movs	r0, #1
90006260:	fb05 4503 	mla	r5, r5, r3, r4
90006264:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
90006268:	e7af      	b.n	900061ca <USBH_MSC_Process+0x20a>
            if (scsi_status == USBH_FAIL)
9000626a:	2802      	cmp	r0, #2
9000626c:	d10b      	bne.n	90006286 <USBH_MSC_Process+0x2c6>
              USBH_UsrLog("MSC Device NOT ready");
9000626e:	4816      	ldr	r0, [pc, #88]	; (900062c8 <USBH_MSC_Process+0x308>)
90006270:	f005 fc18 	bl	9000baa4 <iprintf>
90006274:	200a      	movs	r0, #10
90006276:	f005 fc27 	bl	9000bac8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
9000627a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000627e:	2208      	movs	r2, #8
90006280:	fb06 4303 	mla	r3, r6, r3, r4
90006284:	e710      	b.n	900060a8 <USBH_MSC_Process+0xe8>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
90006286:	2804      	cmp	r0, #4
90006288:	f47f aea4 	bne.w	90005fd4 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
9000628c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006290:	fb06 4303 	mla	r3, r6, r3, r4
90006294:	e75a      	b.n	9000614c <USBH_MSC_Process+0x18c>
            MSC_Handle->current_lun++;
90006296:	3101      	adds	r1, #1
90006298:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
9000629c:	e69a      	b.n	90005fd4 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
9000629e:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
900062a2:	2102      	movs	r1, #2
        MSC_Handle->state = MSC_IDLE;
900062a4:	7325      	strb	r5, [r4, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
900062a6:	f8d0 34c0 	ldr.w	r3, [r0, #1216]	; 0x4c0
900062aa:	4798      	blx	r3
900062ac:	e692      	b.n	90005fd4 <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
900062ae:	2000      	movs	r0, #0
900062b0:	e78e      	b.n	900061d0 <USBH_MSC_Process+0x210>
900062b2:	bf00      	nop
900062b4:	90010d64 	.word	0x90010d64
900062b8:	90010d6e 	.word	0x90010d6e
900062bc:	90010d83 	.word	0x90010d83
900062c0:	90010d98 	.word	0x90010d98
900062c4:	90010dad 	.word	0x90010dad
900062c8:	90010dbe 	.word	0x90010dbe
900062cc:	90010dd3 	.word	0x90010dd3
900062d0:	90010df3 	.word	0x90010df3
900062d4:	90010e06 	.word	0x90010e06
900062d8:	90010e19 	.word	0x90010e19
900062dc:	90010e29 	.word	0x90010e29
900062e0:	90010e44 	.word	0x90010e44

900062e4 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900062e4:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
900062e8:	4603      	mov	r3, r0
900062ea:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900062ec:	69d4      	ldr	r4, [r2, #28]
  switch (MSC_Handle->req_state)
900062ee:	7ba2      	ldrb	r2, [r4, #14]
900062f0:	2a02      	cmp	r2, #2
900062f2:	d002      	beq.n	900062fa <USBH_MSC_ClassRequest+0x16>
900062f4:	2a03      	cmp	r2, #3
900062f6:	d028      	beq.n	9000634a <USBH_MSC_ClassRequest+0x66>
900062f8:	bb6a      	cbnz	r2, 90006356 <USBH_MSC_ClassRequest+0x72>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
900062fa:	4621      	mov	r1, r4
900062fc:	4618      	mov	r0, r3
900062fe:	f000 f9ec 	bl	900066da <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
90006302:	2803      	cmp	r0, #3
90006304:	d11e      	bne.n	90006344 <USBH_MSC_ClassRequest+0x60>
        MSC_Handle->max_lun = 0U;
90006306:	2300      	movs	r3, #0
90006308:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
9000630a:	7821      	ldrb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
9000630c:	4813      	ldr	r0, [pc, #76]	; (9000635c <USBH_MSC_ClassRequest+0x78>)
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
9000630e:	2902      	cmp	r1, #2
90006310:	bf96      	itet	ls
90006312:	3101      	addls	r1, #1
90006314:	2102      	movhi	r1, #2
90006316:	b2c9      	uxtbls	r1, r1
90006318:	7021      	strb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
9000631a:	f005 fbc3 	bl	9000baa4 <iprintf>
9000631e:	200a      	movs	r0, #10
90006320:	f005 fbd2 	bl	9000bac8 <putchar>
        for (i = 0U; i < MSC_Handle->max_lun; i++)
90006324:	7821      	ldrb	r1, [r4, #0]
90006326:	b159      	cbz	r1, 90006340 <USBH_MSC_ClassRequest+0x5c>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
90006328:	2202      	movs	r2, #2
          MSC_Handle->unit[i].state_changed = 0U;
9000632a:	2300      	movs	r3, #0
        for (i = 0U; i < MSC_Handle->max_lun; i++)
9000632c:	2901      	cmp	r1, #1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
9000632e:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
90006332:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
90006336:	bf1c      	itt	ne
90006338:	f884 20c6 	strbne.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
9000633c:	f884 30f5 	strbne.w	r3, [r4, #245]	; 0xf5
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
90006340:	2000      	movs	r0, #0
90006342:	e001      	b.n	90006348 <USBH_MSC_ClassRequest+0x64>
      if (status == USBH_OK)
90006344:	2800      	cmp	r0, #0
90006346:	d0e0      	beq.n	9000630a <USBH_MSC_ClassRequest+0x26>
}
90006348:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
9000634a:	2100      	movs	r1, #0
9000634c:	f001 fa3a 	bl	900077c4 <USBH_ClrFeature>
90006350:	b908      	cbnz	r0, 90006356 <USBH_MSC_ClassRequest+0x72>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
90006352:	7be3      	ldrb	r3, [r4, #15]
90006354:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
90006356:	2001      	movs	r0, #1
90006358:	e7f6      	b.n	90006348 <USBH_MSC_ClassRequest+0x64>
9000635a:	bf00      	nop
9000635c:	90010e68 	.word	0x90010e68

90006360 <USBH_MSC_InterfaceDeInit>:
{
90006360:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006362:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006366:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006368:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
9000636a:	7969      	ldrb	r1, [r5, #5]
9000636c:	b139      	cbz	r1, 9000637e <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
9000636e:	f001 faa3 	bl	900078b8 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
90006372:	7969      	ldrb	r1, [r5, #5]
90006374:	4620      	mov	r0, r4
90006376:	f001 fabc 	bl	900078f2 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
9000637a:	2300      	movs	r3, #0
9000637c:	716b      	strb	r3, [r5, #5]
  if (MSC_Handle->InPipe)
9000637e:	7929      	ldrb	r1, [r5, #4]
90006380:	b141      	cbz	r1, 90006394 <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
90006382:	4620      	mov	r0, r4
90006384:	f001 fa98 	bl	900078b8 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
90006388:	7929      	ldrb	r1, [r5, #4]
9000638a:	4620      	mov	r0, r4
9000638c:	f001 fab1 	bl	900078f2 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
90006390:	2300      	movs	r3, #0
90006392:	712b      	strb	r3, [r5, #4]
  if (phost->pActiveClass->pData)
90006394:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90006398:	69d8      	ldr	r0, [r3, #28]
9000639a:	b128      	cbz	r0, 900063a8 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
9000639c:	f005 fa0c 	bl	9000b7b8 <free>
    phost->pActiveClass->pData = 0U;
900063a0:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
900063a4:	2200      	movs	r2, #0
900063a6:	61da      	str	r2, [r3, #28]
}
900063a8:	2000      	movs	r0, #0
900063aa:	bd38      	pop	{r3, r4, r5, pc}

900063ac <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900063ac:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
900063b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900063b2:	69d2      	ldr	r2, [r2, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
900063b4:	2634      	movs	r6, #52	; 0x34
900063b6:	fb06 2401 	mla	r4, r6, r1, r2
900063ba:	f894 5090 	ldrb.w	r5, [r4, #144]	; 0x90
900063be:	2d06      	cmp	r5, #6
900063c0:	d005      	beq.n	900063ce <USBH_MSC_RdWrProcess+0x22>
900063c2:	2d07      	cmp	r5, #7
900063c4:	d00e      	beq.n	900063e4 <USBH_MSC_RdWrProcess+0x38>
900063c6:	2d05      	cmp	r5, #5
900063c8:	d018      	beq.n	900063fc <USBH_MSC_RdWrProcess+0x50>
  USBH_StatusTypeDef error = USBH_BUSY ;
900063ca:	2001      	movs	r0, #1
900063cc:	e008      	b.n	900063e0 <USBH_MSC_RdWrProcess+0x34>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
900063ce:	2300      	movs	r3, #0
900063d0:	461a      	mov	r2, r3
900063d2:	9300      	str	r3, [sp, #0]
900063d4:	f000 fbb6 	bl	90006b44 <USBH_MSC_SCSI_Read>
      break;

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);

      if (scsi_status == USBH_OK)
900063d8:	b950      	cbnz	r0, 900063f0 <USBH_MSC_RdWrProcess+0x44>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
900063da:	2301      	movs	r3, #1
900063dc:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    default:
      break;

  }
  return error;
}
900063e0:	b002      	add	sp, #8
900063e2:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
900063e4:	2300      	movs	r3, #0
900063e6:	461a      	mov	r2, r3
900063e8:	9300      	str	r3, [sp, #0]
900063ea:	f000 fb6c 	bl	90006ac6 <USBH_MSC_SCSI_Write>
900063ee:	e7f3      	b.n	900063d8 <USBH_MSC_RdWrProcess+0x2c>
      else if (scsi_status == USBH_FAIL)
900063f0:	2802      	cmp	r0, #2
900063f2:	d130      	bne.n	90006456 <USBH_MSC_RdWrProcess+0xaa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
900063f4:	2305      	movs	r3, #5
900063f6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
900063fa:	e7e6      	b.n	900063ca <USBH_MSC_RdWrProcess+0x1e>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
900063fc:	fb06 2201 	mla	r2, r6, r1, r2
90006400:	329c      	adds	r2, #156	; 0x9c
90006402:	f000 fb23 	bl	90006a4c <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
90006406:	b9e8      	cbnz	r0, 90006444 <USBH_MSC_RdWrProcess+0x98>
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
90006408:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
9000640c:	4815      	ldr	r0, [pc, #84]	; (90006464 <USBH_MSC_RdWrProcess+0xb8>)
9000640e:	f005 fb49 	bl	9000baa4 <iprintf>
90006412:	200a      	movs	r0, #10
90006414:	f005 fb58 	bl	9000bac8 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
90006418:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
9000641c:	4812      	ldr	r0, [pc, #72]	; (90006468 <USBH_MSC_RdWrProcess+0xbc>)
9000641e:	f005 fb41 	bl	9000baa4 <iprintf>
90006422:	200a      	movs	r0, #10
90006424:	f005 fb50 	bl	9000bac8 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
90006428:	f894 109e 	ldrb.w	r1, [r4, #158]	; 0x9e
9000642c:	480f      	ldr	r0, [pc, #60]	; (9000646c <USBH_MSC_RdWrProcess+0xc0>)
9000642e:	f005 fb39 	bl	9000baa4 <iprintf>
90006432:	200a      	movs	r0, #10
90006434:	f005 fb48 	bl	9000bac8 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
90006438:	f240 2301 	movw	r3, #513	; 0x201
9000643c:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
90006440:	2002      	movs	r0, #2
90006442:	e7cd      	b.n	900063e0 <USBH_MSC_RdWrProcess+0x34>
      if (scsi_status == USBH_FAIL)
90006444:	2802      	cmp	r0, #2
90006446:	d106      	bne.n	90006456 <USBH_MSC_RdWrProcess+0xaa>
        USBH_UsrLog("MSC Device NOT ready");
90006448:	4809      	ldr	r0, [pc, #36]	; (90006470 <USBH_MSC_RdWrProcess+0xc4>)
9000644a:	f005 fb2b 	bl	9000baa4 <iprintf>
9000644e:	200a      	movs	r0, #10
90006450:	f005 fb3a 	bl	9000bac8 <putchar>
90006454:	e7b9      	b.n	900063ca <USBH_MSC_RdWrProcess+0x1e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
90006456:	2804      	cmp	r0, #4
90006458:	d1b7      	bne.n	900063ca <USBH_MSC_RdWrProcess+0x1e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
9000645a:	2308      	movs	r3, #8
9000645c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
90006460:	e7ee      	b.n	90006440 <USBH_MSC_RdWrProcess+0x94>
90006462:	bf00      	nop
90006464:	90010e19 	.word	0x90010e19
90006468:	90010e29 	.word	0x90010e29
9000646c:	90010e44 	.word	0x90010e44
90006470:	90010dbe 	.word	0x90010dbe

90006474 <USBH_MSC_InterfaceInit>:
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
90006474:	f8d0 1468 	ldr.w	r1, [r0, #1128]	; 0x468
90006478:	2350      	movs	r3, #80	; 0x50
9000647a:	2206      	movs	r2, #6
{
9000647c:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
9000647e:	7909      	ldrb	r1, [r1, #4]
{
90006480:	b085      	sub	sp, #20
90006482:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
90006484:	f000 fc4e 	bl	90006d24 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
90006488:	4601      	mov	r1, r0
9000648a:	b118      	cbz	r0, 90006494 <USBH_MSC_InterfaceInit+0x20>
    return USBH_FAIL;
9000648c:	2602      	movs	r6, #2
}
9000648e:	4630      	mov	r0, r6
90006490:	b005      	add	sp, #20
90006492:	bdf0      	pop	{r4, r5, r6, r7, pc}
  status = USBH_SelectInterface(phost, interface);
90006494:	4628      	mov	r0, r5
90006496:	f000 fc01 	bl	90006c9c <USBH_SelectInterface>
  if (status != USBH_OK)
9000649a:	4606      	mov	r6, r0
9000649c:	2800      	cmp	r0, #0
9000649e:	d1f5      	bne.n	9000648c <USBH_MSC_InterfaceInit+0x18>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
900064a0:	f8d5 7468 	ldr.w	r7, [r5, #1128]	; 0x468
900064a4:	f44f 7080 	mov.w	r0, #256	; 0x100
900064a8:	f005 f97e 	bl	9000b7a8 <malloc>
900064ac:	4604      	mov	r4, r0
900064ae:	61f8      	str	r0, [r7, #28]
  if (MSC_Handle == NULL)
900064b0:	2800      	cmp	r0, #0
900064b2:	d0eb      	beq.n	9000648c <USBH_MSC_InterfaceInit+0x18>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
900064b4:	4631      	mov	r1, r6
900064b6:	f44f 7280 	mov.w	r2, #256	; 0x100
900064ba:	f005 fc61 	bl	9000bd80 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
900064be:	f995 344e 	ldrsb.w	r3, [r5, #1102]	; 0x44e
900064c2:	f895 244e 	ldrb.w	r2, [r5, #1102]	; 0x44e
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
900064c6:	4628      	mov	r0, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
900064c8:	2b00      	cmp	r3, #0
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
900064ca:	f995 1456 	ldrsb.w	r1, [r5, #1110]	; 0x456
900064ce:	f8b5 3450 	ldrh.w	r3, [r5, #1104]	; 0x450
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
900064d2:	f04f 0702 	mov.w	r7, #2
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
900064d6:	bfae      	itee	ge
900064d8:	71a2      	strbge	r2, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
900064da:	71e2      	strblt	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
900064dc:	8163      	strhlt	r3, [r4, #10]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
900064de:	f895 2456 	ldrb.w	r2, [r5, #1110]	; 0x456
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
900064e2:	bfa8      	it	ge
900064e4:	8123      	strhge	r3, [r4, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
900064e6:	2900      	cmp	r1, #0
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
900064e8:	f8b5 3458 	ldrh.w	r3, [r5, #1112]	; 0x458
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
900064ec:	bfa8      	it	ge
900064ee:	71a2      	strbge	r2, [r4, #6]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
900064f0:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
900064f2:	bfba      	itte	lt
900064f4:	71e2      	strblt	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
900064f6:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
900064f8:	8123      	strhge	r3, [r4, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
900064fa:	f001 f9e2 	bl	900078c2 <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
900064fe:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
90006500:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
90006502:	4628      	mov	r0, r5
90006504:	f001 f9dd 	bl	900078c2 <USBH_AllocPipe>
90006508:	7120      	strb	r0, [r4, #4]
  USBH_MSC_BOT_Init(phost);
9000650a:	4628      	mov	r0, r5
9000650c:	f000 f8ee 	bl	900066ec <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
90006510:	8923      	ldrh	r3, [r4, #8]
90006512:	79a2      	ldrb	r2, [r4, #6]
90006514:	4628      	mov	r0, r5
90006516:	9302      	str	r3, [sp, #8]
90006518:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
9000651c:	7961      	ldrb	r1, [r4, #5]
9000651e:	9300      	str	r3, [sp, #0]
90006520:	9701      	str	r7, [sp, #4]
90006522:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
90006526:	f001 f9b8 	bl	9000789a <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
9000652a:	8963      	ldrh	r3, [r4, #10]
9000652c:	79e2      	ldrb	r2, [r4, #7]
9000652e:	4628      	mov	r0, r5
90006530:	7921      	ldrb	r1, [r4, #4]
90006532:	e9cd 7301 	strd	r7, r3, [sp, #4]
90006536:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
9000653a:	9300      	str	r3, [sp, #0]
9000653c:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
90006540:	f001 f9ab 	bl	9000789a <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
90006544:	7921      	ldrb	r1, [r4, #4]
90006546:	2200      	movs	r2, #0
90006548:	4628      	mov	r0, r5
9000654a:	f004 fbfb 	bl	9000ad44 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
9000654e:	2200      	movs	r2, #0
90006550:	7961      	ldrb	r1, [r4, #5]
90006552:	4628      	mov	r0, r5
90006554:	f004 fbf6 	bl	9000ad44 <USBH_LL_SetToggle>
  return USBH_OK;
90006558:	e799      	b.n	9000648e <USBH_MSC_InterfaceInit+0x1a>

9000655a <USBH_MSC_IsReady>:
uint8_t  USBH_MSC_IsReady(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
9000655a:	7803      	ldrb	r3, [r0, #0]
9000655c:	2b0b      	cmp	r3, #11
9000655e:	d107      	bne.n	90006570 <USBH_MSC_IsReady+0x16>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006560:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
90006564:	69db      	ldr	r3, [r3, #28]
90006566:	7b18      	ldrb	r0, [r3, #12]
  {
    res = 1U;
90006568:	1e43      	subs	r3, r0, #1
9000656a:	4258      	negs	r0, r3
9000656c:	4158      	adcs	r0, r3
9000656e:	4770      	bx	lr
  }
  else
  {
    res = 0U;
90006570:	2000      	movs	r0, #0
  }

  return res;
}
90006572:	4770      	bx	lr

90006574 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
90006574:	7803      	ldrb	r3, [r0, #0]
90006576:	2b0b      	cmp	r3, #11
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006578:	bf01      	itttt	eq
9000657a:	f8d0 3468 	ldreq.w	r3, [r0, #1128]	; 0x468
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
9000657e:	2234      	moveq	r2, #52	; 0x34
90006580:	69db      	ldreq	r3, [r3, #28]
90006582:	fb02 3101 	mlaeq	r1, r2, r1, r3
90006586:	bf03      	ittte	eq
90006588:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
9000658c:	fab0 f080 	clzeq	r0, r0
90006590:	0940      	lsreq	r0, r0, #5
  }
  else
  {
    res = 0U;
90006592:	2000      	movne	r0, #0
  }

  return res;
}
90006594:	4770      	bx	lr

90006596 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
90006596:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
90006598:	7803      	ldrb	r3, [r0, #0]
9000659a:	2b0b      	cmp	r3, #11
9000659c:	d111      	bne.n	900065c2 <USBH_MSC_GetLUNInfo+0x2c>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
9000659e:	2334      	movs	r3, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900065a0:	f8d0 0468 	ldr.w	r0, [r0, #1128]	; 0x468
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
900065a4:	2490      	movs	r4, #144	; 0x90
900065a6:	fb13 4101 	smlabb	r1, r3, r1, r4
900065aa:	69c3      	ldr	r3, [r0, #28]
900065ac:	4419      	add	r1, r3
900065ae:	f101 0334 	add.w	r3, r1, #52	; 0x34
900065b2:	f851 0b04 	ldr.w	r0, [r1], #4
900065b6:	4299      	cmp	r1, r3
900065b8:	f842 0b04 	str.w	r0, [r2], #4
900065bc:	d1f9      	bne.n	900065b2 <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
900065be:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
900065c0:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
900065c2:	2002      	movs	r0, #2
900065c4:	e7fc      	b.n	900065c0 <USBH_MSC_GetLUNInfo+0x2a>

900065c6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
900065c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
900065ca:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
900065ce:	4604      	mov	r4, r0
900065d0:	460e      	mov	r6, r1
900065d2:	9f08      	ldr	r7, [sp, #32]
  if ((phost->device.is_connected == 0U) ||
900065d4:	b3b5      	cbz	r5, 90006644 <USBH_MSC_Read+0x7e>
      (phost->gState != HOST_CLASS) ||
900065d6:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
900065d8:	2d0b      	cmp	r5, #11
900065da:	d133      	bne.n	90006644 <USBH_MSC_Read+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900065dc:	f8d0 5468 	ldr.w	r5, [r0, #1128]	; 0x468
      (MSC_Handle->unit[lun].state != MSC_IDLE))
900065e0:	f04f 0c34 	mov.w	ip, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900065e4:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
900065e6:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
900065ea:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
900065ee:	f1be 0f01 	cmp.w	lr, #1
900065f2:	d127      	bne.n	90006644 <USBH_MSC_Read+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
900065f4:	f04f 0e06 	mov.w	lr, #6
900065f8:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
900065fc:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
90006600:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
90006604:	9700      	str	r7, [sp, #0]
90006606:	f000 fa9d 	bl	90006b44 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
9000660a:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
9000660e:	f8d4 84b0 	ldr.w	r8, [r4, #1200]	; 0x4b0
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90006612:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
90006614:	4631      	mov	r1, r6
90006616:	4620      	mov	r0, r4
90006618:	f7ff fec8 	bl	900063ac <USBH_MSC_RdWrProcess>
9000661c:	2801      	cmp	r0, #1
9000661e:	d005      	beq.n	9000662c <USBH_MSC_Read+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
90006620:	2301      	movs	r3, #1

  return USBH_OK;
90006622:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
90006624:	732b      	strb	r3, [r5, #12]
}
90006626:	b002      	add	sp, #8
90006628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
9000662c:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
90006630:	eba3 0308 	sub.w	r3, r3, r8
90006634:	42bb      	cmp	r3, r7
90006636:	d803      	bhi.n	90006640 <USBH_MSC_Read+0x7a>
90006638:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
9000663c:	2b00      	cmp	r3, #0
9000663e:	d1e9      	bne.n	90006614 <USBH_MSC_Read+0x4e>
      MSC_Handle->state = MSC_IDLE;
90006640:	2301      	movs	r3, #1
90006642:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
90006644:	2002      	movs	r0, #2
90006646:	e7ee      	b.n	90006626 <USBH_MSC_Read+0x60>

90006648 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
90006648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
9000664c:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
90006650:	4604      	mov	r4, r0
90006652:	460e      	mov	r6, r1
90006654:	9f08      	ldr	r7, [sp, #32]
  if ((phost->device.is_connected == 0U) ||
90006656:	b3b5      	cbz	r5, 900066c6 <USBH_MSC_Write+0x7e>
      (phost->gState != HOST_CLASS) ||
90006658:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
9000665a:	2d0b      	cmp	r5, #11
9000665c:	d133      	bne.n	900066c6 <USBH_MSC_Write+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000665e:	f8d0 5468 	ldr.w	r5, [r0, #1128]	; 0x468
      (MSC_Handle->unit[lun].state != MSC_IDLE))
90006662:	f04f 0c34 	mov.w	ip, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006666:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
90006668:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
9000666c:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
90006670:	f1be 0f01 	cmp.w	lr, #1
90006674:	d127      	bne.n	900066c6 <USBH_MSC_Write+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
90006676:	f04f 0e07 	mov.w	lr, #7
9000667a:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
9000667e:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
90006682:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
90006686:	9700      	str	r7, [sp, #0]
90006688:	f000 fa1d 	bl	90006ac6 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
9000668c:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
90006690:	f8d4 84b0 	ldr.w	r8, [r4, #1200]	; 0x4b0
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90006694:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
90006696:	4631      	mov	r1, r6
90006698:	4620      	mov	r0, r4
9000669a:	f7ff fe87 	bl	900063ac <USBH_MSC_RdWrProcess>
9000669e:	2801      	cmp	r0, #1
900066a0:	d005      	beq.n	900066ae <USBH_MSC_Write+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
900066a2:	2301      	movs	r3, #1
  return USBH_OK;
900066a4:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
900066a6:	732b      	strb	r3, [r5, #12]
}
900066a8:	b002      	add	sp, #8
900066aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
900066ae:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
900066b2:	eba3 0308 	sub.w	r3, r3, r8
900066b6:	42bb      	cmp	r3, r7
900066b8:	d803      	bhi.n	900066c2 <USBH_MSC_Write+0x7a>
900066ba:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
900066be:	2b00      	cmp	r3, #0
900066c0:	d1e9      	bne.n	90006696 <USBH_MSC_Write+0x4e>
      MSC_Handle->state = MSC_IDLE;
900066c2:	2301      	movs	r3, #1
900066c4:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
900066c6:	2002      	movs	r0, #2
900066c8:	e7ee      	b.n	900066a8 <USBH_MSC_Write+0x60>

900066ca <USBH_MSC_BOT_REQ_Reset>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
900066ca:	f64f 7121 	movw	r1, #65313	; 0xff21
900066ce:	2200      	movs	r2, #0
900066d0:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
900066d4:	4611      	mov	r1, r2
900066d6:	f000 be77 	b.w	900073c8 <USBH_CtlReq>

900066da <USBH_MSC_BOT_REQ_GetMaxLUN>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
900066da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
900066de:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
900066e2:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
900066e6:	2201      	movs	r2, #1
900066e8:	f000 be6e 	b.w	900073c8 <USBH_CtlReq>

900066ec <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900066ec:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
900066f0:	2000      	movs	r0, #0
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
900066f2:	4905      	ldr	r1, [pc, #20]	; (90006708 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900066f4:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
900066f6:	4a05      	ldr	r2, [pc, #20]	; (9000670c <USBH_MSC_BOT_Init+0x20>)
900066f8:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
900066fc:	2201      	movs	r2, #1
900066fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
90006702:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
90006706:	4770      	bx	lr
90006708:	43425355 	.word	0x43425355
9000670c:	20304050 	.word	0x20304050

90006710 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006710:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006714:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006716:	69dc      	ldr	r4, [r3, #28]
{
90006718:	4606      	mov	r6, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
9000671a:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
9000671e:	1e6b      	subs	r3, r5, #1
90006720:	2b0a      	cmp	r3, #10
90006722:	d838      	bhi.n	90006796 <USBH_MSC_BOT_Process+0x86>
90006724:	e8df f003 	tbb	[pc, r3]
90006728:	392e1506 	.word	0x392e1506
9000672c:	89816056 	.word	0x89816056
90006730:	b6ac      	.short	0xb6ac
90006732:	ce          	.byte	0xce
90006733:	00          	.byte	0x00
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
90006734:	2302      	movs	r3, #2
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
90006736:	2201      	movs	r2, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
90006738:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
9000673c:	f104 0154 	add.w	r1, r4, #84	; 0x54
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
90006740:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
90006744:	7963      	ldrb	r3, [r4, #5]
90006746:	9200      	str	r2, [sp, #0]
90006748:	221f      	movs	r2, #31
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
9000674a:	4630      	mov	r0, r6
9000674c:	f001 f87e 	bl	9000784c <USBH_BulkSendData>
90006750:	e015      	b.n	9000677e <USBH_MSC_BOT_Process+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
90006752:	7961      	ldrb	r1, [r4, #5]
90006754:	f004 fae2 	bl	9000ad1c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90006758:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
9000675a:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
9000675c:	d10a      	bne.n	90006774 <USBH_MSC_BOT_Process+0x64>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
9000675e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
90006760:	b36b      	cbz	r3, 900067be <USBH_MSC_BOT_Process+0xae>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
90006762:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
90006766:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
90006768:	bfb4      	ite	lt
9000676a:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
9000676c:	2305      	movge	r3, #5

    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
      if (status == USBH_OK)
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
9000676e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
90006772:	e004      	b.n	9000677e <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_NOTREADY)
90006774:	2802      	cmp	r0, #2
90006776:	d154      	bne.n	90006822 <USBH_MSC_BOT_Process+0x112>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
90006778:	2501      	movs	r5, #1
9000677a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50

    default:
      break;
  }
  return status;
}
9000677e:	4628      	mov	r0, r5
90006780:	b002      	add	sp, #8
90006782:	bd70      	pop	{r4, r5, r6, pc}
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
90006784:	7923      	ldrb	r3, [r4, #4]
90006786:	8962      	ldrh	r2, [r4, #10]
90006788:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
9000678c:	f001 f875 	bl	9000787a <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
90006790:	2304      	movs	r3, #4
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
90006792:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
90006796:	2501      	movs	r5, #1
90006798:	e7f1      	b.n	9000677e <USBH_MSC_BOT_Process+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
9000679a:	7921      	ldrb	r1, [r4, #4]
9000679c:	f004 fabe 	bl	9000ad1c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
900067a0:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
900067a2:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
900067a4:	d112      	bne.n	900067cc <USBH_MSC_BOT_Process+0xbc>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
900067a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
900067a8:	8962      	ldrh	r2, [r4, #10]
900067aa:	4293      	cmp	r3, r2
900067ac:	d932      	bls.n	90006814 <USBH_MSC_BOT_Process+0x104>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
900067ae:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
900067b2:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
900067b4:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
900067b6:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
900067b8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
900067bc:	b90b      	cbnz	r3, 900067c2 <USBH_MSC_BOT_Process+0xb2>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
900067be:	2307      	movs	r3, #7
900067c0:	e7d5      	b.n	9000676e <USBH_MSC_BOT_Process+0x5e>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
900067c2:	7923      	ldrb	r3, [r4, #4]
900067c4:	4630      	mov	r0, r6
900067c6:	f001 f858 	bl	9000787a <USBH_BulkReceiveData>
900067ca:	e7d8      	b.n	9000677e <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_STALL)
900067cc:	2805      	cmp	r0, #5
      else if (URB_Status == USBH_URB_STALL)
900067ce:	d1e2      	bne.n	90006796 <USBH_MSC_BOT_Process+0x86>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
900067d0:	2309      	movs	r3, #9
900067d2:	e7de      	b.n	90006792 <USBH_MSC_BOT_Process+0x82>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
900067d4:	2501      	movs	r5, #1
900067d6:	7963      	ldrb	r3, [r4, #5]
900067d8:	8922      	ldrh	r2, [r4, #8]
900067da:	9500      	str	r5, [sp, #0]
900067dc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
900067e0:	f001 f834 	bl	9000784c <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
900067e4:	2306      	movs	r3, #6
900067e6:	e7c2      	b.n	9000676e <USBH_MSC_BOT_Process+0x5e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
900067e8:	7961      	ldrb	r1, [r4, #5]
900067ea:	f004 fa97 	bl	9000ad1c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
900067ee:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
900067f0:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
900067f2:	d112      	bne.n	9000681a <USBH_MSC_BOT_Process+0x10a>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
900067f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
900067f6:	8922      	ldrh	r2, [r4, #8]
900067f8:	4293      	cmp	r3, r2
900067fa:	d90b      	bls.n	90006814 <USBH_MSC_BOT_Process+0x104>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
900067fc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
90006800:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
90006802:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
90006804:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
90006806:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
9000680a:	2b00      	cmp	r3, #0
9000680c:	d0d7      	beq.n	900067be <USBH_MSC_BOT_Process+0xae>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
9000680e:	7963      	ldrb	r3, [r4, #5]
90006810:	9000      	str	r0, [sp, #0]
90006812:	e79a      	b.n	9000674a <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
90006814:	2300      	movs	r3, #0
90006816:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
90006818:	e7d1      	b.n	900067be <USBH_MSC_BOT_Process+0xae>
      else if (URB_Status == USBH_URB_NOTREADY)
9000681a:	2802      	cmp	r0, #2
9000681c:	d101      	bne.n	90006822 <USBH_MSC_BOT_Process+0x112>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
9000681e:	2305      	movs	r3, #5
90006820:	e7b7      	b.n	90006792 <USBH_MSC_BOT_Process+0x82>
      else if (URB_Status == USBH_URB_STALL)
90006822:	2d05      	cmp	r5, #5
90006824:	d1b7      	bne.n	90006796 <USBH_MSC_BOT_Process+0x86>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
90006826:	230a      	movs	r3, #10
90006828:	e7b3      	b.n	90006792 <USBH_MSC_BOT_Process+0x82>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
9000682a:	7923      	ldrb	r3, [r4, #4]
9000682c:	220d      	movs	r2, #13
9000682e:	f104 0178 	add.w	r1, r4, #120	; 0x78
90006832:	f001 f822 	bl	9000787a <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
90006836:	2308      	movs	r3, #8
90006838:	e7ab      	b.n	90006792 <USBH_MSC_BOT_Process+0x82>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
9000683a:	7921      	ldrb	r1, [r4, #4]
9000683c:	f004 fa6e 	bl	9000ad1c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90006840:	2801      	cmp	r0, #1
90006842:	d11b      	bne.n	9000687c <USBH_MSC_BOT_Process+0x16c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
90006844:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
90006848:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
9000684c:	4630      	mov	r0, r6
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000684e:	f8d6 3468 	ldr.w	r3, [r6, #1128]	; 0x468
90006852:	69dc      	ldr	r4, [r3, #28]
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
90006854:	7921      	ldrb	r1, [r4, #4]
90006856:	f004 fa32 	bl	9000acbe <USBH_LL_GetLastXferSize>
9000685a:	280d      	cmp	r0, #13
9000685c:	d13a      	bne.n	900068d4 <USBH_MSC_BOT_Process+0x1c4>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
9000685e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
90006860:	4b1d      	ldr	r3, [pc, #116]	; (900068d8 <USBH_MSC_BOT_Process+0x1c8>)
90006862:	429a      	cmp	r2, r3
90006864:	d136      	bne.n	900068d4 <USBH_MSC_BOT_Process+0x1c4>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
90006866:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
90006868:	6da3      	ldr	r3, [r4, #88]	; 0x58
9000686a:	429a      	cmp	r2, r3
9000686c:	d132      	bne.n	900068d4 <USBH_MSC_BOT_Process+0x1c4>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
9000686e:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
90006872:	3d00      	subs	r5, #0
90006874:	bf18      	it	ne
90006876:	2501      	movne	r5, #1
90006878:	006d      	lsls	r5, r5, #1
9000687a:	e780      	b.n	9000677e <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_STALL)
9000687c:	2805      	cmp	r0, #5
9000687e:	e7a6      	b.n	900067ce <USBH_MSC_BOT_Process+0xbe>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
90006880:	79e1      	ldrb	r1, [r4, #7]
90006882:	f000 ff9f 	bl	900077c4 <USBH_ClrFeature>
      if (error == USBH_OK)
90006886:	b908      	cbnz	r0, 9000688c <USBH_MSC_BOT_Process+0x17c>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
90006888:	2307      	movs	r3, #7
9000688a:	e782      	b.n	90006792 <USBH_MSC_BOT_Process+0x82>
      else if (error == USBH_UNRECOVERED_ERROR)
9000688c:	2804      	cmp	r0, #4
        if (error == USBH_UNRECOVERED_ERROR)
9000688e:	d182      	bne.n	90006796 <USBH_MSC_BOT_Process+0x86>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
90006890:	230b      	movs	r3, #11
90006892:	e77e      	b.n	90006792 <USBH_MSC_BOT_Process+0x82>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
90006894:	79a1      	ldrb	r1, [r4, #6]
90006896:	f000 ff95 	bl	900077c4 <USBH_ClrFeature>
      if (error == USBH_OK)
9000689a:	4605      	mov	r5, r0
9000689c:	b980      	cbnz	r0, 900068c0 <USBH_MSC_BOT_Process+0x1b0>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
9000689e:	7961      	ldrb	r1, [r4, #5]
900068a0:	4630      	mov	r0, r6
900068a2:	f004 fa5f 	bl	9000ad64 <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
900068a6:	f1c0 0001 	rsb	r0, r0, #1
900068aa:	7961      	ldrb	r1, [r4, #5]
900068ac:	b2c2      	uxtb	r2, r0
900068ae:	4630      	mov	r0, r6
900068b0:	f004 fa48 	bl	9000ad44 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
900068b4:	462a      	mov	r2, r5
900068b6:	7921      	ldrb	r1, [r4, #4]
900068b8:	4630      	mov	r0, r6
900068ba:	f004 fa43 	bl	9000ad44 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
900068be:	e787      	b.n	900067d0 <USBH_MSC_BOT_Process+0xc0>
        if (error == USBH_UNRECOVERED_ERROR)
900068c0:	2804      	cmp	r0, #4
900068c2:	e7e4      	b.n	9000688e <USBH_MSC_BOT_Process+0x17e>
      status = USBH_MSC_BOT_REQ_Reset(phost);
900068c4:	f7ff ff01 	bl	900066ca <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
900068c8:	4605      	mov	r5, r0
900068ca:	2800      	cmp	r0, #0
900068cc:	f47f af57 	bne.w	9000677e <USBH_MSC_BOT_Process+0x6e>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
900068d0:	2301      	movs	r3, #1
900068d2:	e74c      	b.n	9000676e <USBH_MSC_BOT_Process+0x5e>
          status = USBH_FAIL;
900068d4:	2502      	movs	r5, #2
900068d6:	e752      	b.n	9000677e <USBH_MSC_BOT_Process+0x6e>
900068d8:	53425355 	.word	0x53425355

900068dc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
900068dc:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900068de:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
900068e2:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
900068e4:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
900068e8:	2d01      	cmp	r5, #1
900068ea:	d004      	beq.n	900068f6 <USBH_MSC_SCSI_TestUnitReady+0x1a>
900068ec:	2d02      	cmp	r5, #2
900068ee:	d014      	beq.n	9000691a <USBH_MSC_SCSI_TestUnitReady+0x3e>
900068f0:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
900068f2:	4628      	mov	r0, r5
900068f4:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
900068f6:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900068f8:	230a      	movs	r3, #10
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
900068fa:	2210      	movs	r2, #16
900068fc:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006900:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
90006904:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
90006906:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
9000690a:	f005 fa39 	bl	9000bd80 <memset>
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
9000690e:	2302      	movs	r3, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006910:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006914:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
90006918:	e7eb      	b.n	900068f2 <USBH_MSC_SCSI_TestUnitReady+0x16>
}
9000691a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
9000691e:	f7ff bef7 	b.w	90006710 <USBH_MSC_BOT_Process>

90006922 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006922:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006926:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006928:	69dc      	ldr	r4, [r3, #28]
{
9000692a:	4616      	mov	r6, r2

  switch (MSC_Handle->hbot.cmd_state)
9000692c:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
90006930:	2d01      	cmp	r5, #1
90006932:	d004      	beq.n	9000693e <USBH_MSC_SCSI_ReadCapacity+0x1c>
90006934:	2d02      	cmp	r5, #2
90006936:	d01b      	beq.n	90006970 <USBH_MSC_SCSI_ReadCapacity+0x4e>
90006938:	2501      	movs	r5, #1
    default:
      break;
  }

  return error;
}
9000693a:	4628      	mov	r0, r5
9000693c:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
9000693e:	2308      	movs	r3, #8
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006940:	2210      	movs	r2, #16
90006942:	2100      	movs	r1, #0
90006944:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
90006948:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
9000694a:	2380      	movs	r3, #128	; 0x80
9000694c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006950:	f005 fa16 	bl	9000bd80 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006954:	f242 530a 	movw	r3, #9482	; 0x250a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006958:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
9000695c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006960:	2302      	movs	r3, #2
90006962:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90006966:	f104 0310 	add.w	r3, r4, #16
9000696a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
9000696e:	e7e4      	b.n	9000693a <USBH_MSC_SCSI_ReadCapacity+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
90006970:	f7ff fece 	bl	90006710 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
90006974:	4605      	mov	r5, r0
90006976:	2800      	cmp	r0, #0
90006978:	d1df      	bne.n	9000693a <USBH_MSC_SCSI_ReadCapacity+0x18>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
9000697a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
9000697e:	6813      	ldr	r3, [r2, #0]
90006980:	ba1b      	rev	r3, r3
90006982:	6033      	str	r3, [r6, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
90006984:	88d3      	ldrh	r3, [r2, #6]
90006986:	ba5b      	rev16	r3, r3
90006988:	80b3      	strh	r3, [r6, #4]
9000698a:	e7d6      	b.n	9000693a <USBH_MSC_SCSI_ReadCapacity+0x18>

9000698c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
9000698c:	b570      	push	{r4, r5, r6, lr}
9000698e:	4616      	mov	r6, r2
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006990:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
90006994:	460b      	mov	r3, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006996:	69d4      	ldr	r4, [r2, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006998:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
9000699c:	2d01      	cmp	r5, #1
9000699e:	d004      	beq.n	900069aa <USBH_MSC_SCSI_Inquiry+0x1e>
900069a0:	2d02      	cmp	r5, #2
900069a2:	d021      	beq.n	900069e8 <USBH_MSC_SCSI_Inquiry+0x5c>
900069a4:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
900069a6:	4628      	mov	r0, r5
900069a8:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
900069aa:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
900069ac:	015b      	lsls	r3, r3, #5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
900069ae:	2124      	movs	r1, #36	; 0x24
      MSC_Handle->hbot.state = BOT_SEND_CBW;
900069b0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
900069b4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
900069b8:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
900069ba:	65e1      	str	r1, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
900069bc:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
900069c0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
900069c4:	2302      	movs	r3, #2
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
900069c6:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
900069ca:	f8a4 206b 	strh.w	r2, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900069ce:	f241 220a 	movw	r2, #4618	; 0x120a
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
900069d2:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
900069d6:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900069da:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
900069de:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
900069e2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
900069e6:	e7de      	b.n	900069a6 <USBH_MSC_SCSI_Inquiry+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
900069e8:	f7ff fe92 	bl	90006710 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
900069ec:	4605      	mov	r5, r0
900069ee:	2800      	cmp	r0, #0
900069f0:	d1d9      	bne.n	900069a6 <USBH_MSC_SCSI_Inquiry+0x1a>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
900069f2:	4601      	mov	r1, r0
900069f4:	2222      	movs	r2, #34	; 0x22
900069f6:	4630      	mov	r0, r6
900069f8:	f005 f9c2 	bl	9000bd80 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
900069fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
90006a00:	f106 010c 	add.w	r1, r6, #12
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
90006a04:	781a      	ldrb	r2, [r3, #0]
90006a06:	f002 021f 	and.w	r2, r2, #31
90006a0a:	7072      	strb	r2, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
90006a0c:	781a      	ldrb	r2, [r3, #0]
90006a0e:	0952      	lsrs	r2, r2, #5
90006a10:	7032      	strb	r2, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
90006a12:	f993 2001 	ldrsb.w	r2, [r3, #1]
90006a16:	2a00      	cmp	r2, #0
          inquiry->RemovableMedia = 1U;
90006a18:	bfbc      	itt	lt
90006a1a:	2201      	movlt	r2, #1
90006a1c:	70b2      	strblt	r2, [r6, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
90006a1e:	689a      	ldr	r2, [r3, #8]
90006a20:	f8c6 2003 	str.w	r2, [r6, #3]
90006a24:	68da      	ldr	r2, [r3, #12]
90006a26:	f8c6 2007 	str.w	r2, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
90006a2a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
90006a2e:	f103 0210 	add.w	r2, r3, #16
90006a32:	3320      	adds	r3, #32
90006a34:	f852 0b04 	ldr.w	r0, [r2], #4
90006a38:	429a      	cmp	r2, r3
90006a3a:	f841 0b04 	str.w	r0, [r1], #4
90006a3e:	d1f9      	bne.n	90006a34 <USBH_MSC_SCSI_Inquiry+0xa8>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
90006a40:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
90006a44:	6a1b      	ldr	r3, [r3, #32]
90006a46:	f8c6 301d 	str.w	r3, [r6, #29]
90006a4a:	e7ac      	b.n	900069a6 <USBH_MSC_SCSI_Inquiry+0x1a>

90006a4c <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
90006a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006a4e:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006a52:	460f      	mov	r7, r1
90006a54:	4616      	mov	r6, r2
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006a56:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006a58:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
90006a5c:	2d01      	cmp	r5, #1
90006a5e:	d004      	beq.n	90006a6a <USBH_MSC_SCSI_RequestSense+0x1e>
90006a60:	2d02      	cmp	r5, #2
90006a62:	d020      	beq.n	90006aa6 <USBH_MSC_SCSI_RequestSense+0x5a>
90006a64:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
90006a66:	4628      	mov	r0, r5
90006a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006a6a:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
90006a6c:	260e      	movs	r6, #14
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006a6e:	2210      	movs	r2, #16
90006a70:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006a72:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006a76:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
90006a7a:	65e6      	str	r6, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
90006a7c:	017f      	lsls	r7, r7, #5
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006a7e:	f005 f97f 	bl	9000bd80 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006a82:	f240 330a 	movw	r3, #778	; 0x30a
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
90006a86:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006a8a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006a8e:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
90006a90:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006a94:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90006a98:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006a9c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90006aa0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
90006aa4:	e7df      	b.n	90006a66 <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
90006aa6:	f7ff fe33 	bl	90006710 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
90006aaa:	4605      	mov	r5, r0
90006aac:	2800      	cmp	r0, #0
90006aae:	d1da      	bne.n	90006a66 <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
90006ab0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
90006ab4:	789a      	ldrb	r2, [r3, #2]
90006ab6:	f002 020f 	and.w	r2, r2, #15
90006aba:	7032      	strb	r2, [r6, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
90006abc:	7b1a      	ldrb	r2, [r3, #12]
90006abe:	7072      	strb	r2, [r6, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
90006ac0:	7b5b      	ldrb	r3, [r3, #13]
90006ac2:	70b3      	strb	r3, [r6, #2]
90006ac4:	e7cf      	b.n	90006a66 <USBH_MSC_SCSI_RequestSense+0x1a>

90006ac6 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
90006ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006aca:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006acc:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006ad0:	4615      	mov	r5, r2
90006ad2:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006ad4:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006ad6:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
90006ada:	2e01      	cmp	r6, #1
90006adc:	d005      	beq.n	90006aea <USBH_MSC_SCSI_Write+0x24>
90006ade:	2e02      	cmp	r6, #2
90006ae0:	d02c      	beq.n	90006b3c <USBH_MSC_SCSI_Write+0x76>
90006ae2:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
90006ae4:	4630      	mov	r0, r6
90006ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006aea:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
90006aee:	2100      	movs	r1, #0
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006af0:	2210      	movs	r2, #16
90006af2:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006af6:	437b      	muls	r3, r7
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
90006af8:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
90006afa:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006afe:	65e3      	str	r3, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006b00:	f005 f93e 	bl	9000bd80 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006b04:	f642 230a 	movw	r3, #10762	; 0x2a0a
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
90006b08:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006b0c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006b10:	f3c5 6307 	ubfx	r3, r5, #24, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
90006b14:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006b18:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
90006b1c:	f3c5 4307 	ubfx	r3, r5, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006b20:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
90006b24:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006b28:	f3c5 2307 	ubfx	r3, r5, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
90006b2c:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006b30:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006b34:	2302      	movs	r3, #2
90006b36:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
90006b3a:	e7d3      	b.n	90006ae4 <USBH_MSC_SCSI_Write+0x1e>
}
90006b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
90006b40:	f7ff bde6 	b.w	90006710 <USBH_MSC_BOT_Process>

90006b44 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
90006b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006b48:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006b4a:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006b4e:	4615      	mov	r5, r2
90006b50:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006b52:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006b54:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
90006b58:	2e01      	cmp	r6, #1
90006b5a:	d005      	beq.n	90006b68 <USBH_MSC_SCSI_Read+0x24>
90006b5c:	2e02      	cmp	r6, #2
90006b5e:	d02d      	beq.n	90006bbc <USBH_MSC_SCSI_Read+0x78>
90006b60:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
90006b62:	4630      	mov	r0, r6
90006b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006b68:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006b6c:	2210      	movs	r2, #16
90006b6e:	2100      	movs	r1, #0
90006b70:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006b74:	437b      	muls	r3, r7
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
90006b76:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006b78:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006b7a:	2380      	movs	r3, #128	; 0x80
90006b7c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006b80:	f005 f8fe 	bl	9000bd80 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006b84:	f642 030a 	movw	r3, #10250	; 0x280a
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
90006b88:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006b8c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006b90:	f3c5 6307 	ubfx	r3, r5, #24, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
90006b94:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006b98:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
90006b9c:	f3c5 4307 	ubfx	r3, r5, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006ba0:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
90006ba4:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006ba8:	f3c5 2307 	ubfx	r3, r5, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
90006bac:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006bb0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006bb4:	2302      	movs	r3, #2
90006bb6:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
90006bba:	e7d2      	b.n	90006b62 <USBH_MSC_SCSI_Read+0x1e>
}
90006bbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
90006bc0:	f7ff bda6 	b.w	90006710 <USBH_MSC_BOT_Process>

90006bc4 <DeInitStateMachine.isra.0>:
  * @brief  DeInitStateMachine
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
90006bc4:	b510      	push	{r4, lr}
90006bc6:	4604      	mov	r4, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
90006bc8:	223c      	movs	r2, #60	; 0x3c
90006bca:	2100      	movs	r1, #0
90006bcc:	f500 608e 	add.w	r0, r0, #1136	; 0x470
90006bd0:	f005 f8d6 	bl	9000bd80 <memset>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
90006bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
90006bd8:	2100      	movs	r1, #0
90006bda:	f504 7007 	add.w	r0, r4, #540	; 0x21c
90006bde:	f005 f8cf 	bl	9000bd80 <memset>
  }

  phost->gState = HOST_IDLE;
90006be2:	2300      	movs	r3, #0
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
90006be4:	2201      	movs	r2, #1
  phost->gState = HOST_IDLE;
90006be6:	7023      	strb	r3, [r4, #0]
  phost->EnumState = ENUM_IDLE;
90006be8:	7063      	strb	r3, [r4, #1]
  phost->Timer = 0U;
90006bea:	f8c4 34b0 	str.w	r3, [r4, #1200]	; 0x4b0

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
90006bee:	2340      	movs	r3, #64	; 0x40
  phost->RequestState = CMD_SEND;
90006bf0:	70a2      	strb	r2, [r4, #2]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
90006bf2:	71a3      	strb	r3, [r4, #6]
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
90006bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.state = CTRL_SETUP;
90006bf8:	8322      	strh	r2, [r4, #24]
  phost->device.address = USBH_ADDRESS_DEFAULT;
90006bfa:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
  phost->device.speed = USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
90006bfe:	bd10      	pop	{r4, pc}

90006c00 <USBH_Init>:
{
90006c00:	b570      	push	{r4, r5, r6, lr}
90006c02:	460e      	mov	r6, r1
  if (phost == NULL)
90006c04:	4604      	mov	r4, r0
90006c06:	b950      	cbnz	r0, 90006c1e <USBH_Init+0x1e>
    USBH_ErrLog("Invalid Host handle");
90006c08:	4811      	ldr	r0, [pc, #68]	; (90006c50 <USBH_Init+0x50>)
90006c0a:	f004 ff4b 	bl	9000baa4 <iprintf>
90006c0e:	4811      	ldr	r0, [pc, #68]	; (90006c54 <USBH_Init+0x54>)
90006c10:	f004 ff48 	bl	9000baa4 <iprintf>
90006c14:	200a      	movs	r0, #10
90006c16:	f004 ff57 	bl	9000bac8 <putchar>
    return USBH_FAIL;
90006c1a:	2002      	movs	r0, #2
}
90006c1c:	bd70      	pop	{r4, r5, r6, pc}
  phost->pActiveClass = NULL;
90006c1e:	2500      	movs	r5, #0
  phost->id = id;
90006c20:	f880 24b8 	strb.w	r2, [r0, #1208]	; 0x4b8
  phost->pActiveClass = NULL;
90006c24:	f8c0 5468 	str.w	r5, [r0, #1128]	; 0x468
  phost->ClassNumber = 0U;
90006c28:	f8c0 546c 	str.w	r5, [r0, #1132]	; 0x46c
  DeInitStateMachine(phost);
90006c2c:	f7ff ffca 	bl	90006bc4 <DeInitStateMachine.isra.0>
  phost->device.is_connected = 0U;
90006c30:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
90006c34:	f884 5423 	strb.w	r5, [r4, #1059]	; 0x423
  phost->device.is_disconnected = 0U;
90006c38:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
90006c3c:	f884 5422 	strb.w	r5, [r4, #1058]	; 0x422
  if (pUsrFunc != NULL)
90006c40:	b10e      	cbz	r6, 90006c46 <USBH_Init+0x46>
    phost->pUser = pUsrFunc;
90006c42:	f8c4 64c0 	str.w	r6, [r4, #1216]	; 0x4c0
  USBH_LL_Init(phost);
90006c46:	4620      	mov	r0, r4
90006c48:	f003 fff6 	bl	9000ac38 <USBH_LL_Init>
  return USBH_OK;
90006c4c:	2000      	movs	r0, #0
90006c4e:	e7e5      	b.n	90006c1c <USBH_Init+0x1c>
90006c50:	90010e88 	.word	0x90010e88
90006c54:	90010e90 	.word	0x90010e90

90006c58 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
90006c58:	b508      	push	{r3, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
90006c5a:	b1a1      	cbz	r1, 90006c86 <USBH_RegisterClass+0x2e>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
90006c5c:	f8d0 346c 	ldr.w	r3, [r0, #1132]	; 0x46c
90006c60:	b933      	cbnz	r3, 90006c70 <USBH_RegisterClass+0x18>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
90006c62:	2201      	movs	r2, #1
90006c64:	f8c0 1464 	str.w	r1, [r0, #1124]	; 0x464
90006c68:	f8c0 246c 	str.w	r2, [r0, #1132]	; 0x46c
      status = USBH_OK;
90006c6c:	4618      	mov	r0, r3
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
90006c6e:	bd08      	pop	{r3, pc}
      USBH_ErrLog("Max Class Number reached");
90006c70:	4807      	ldr	r0, [pc, #28]	; (90006c90 <USBH_RegisterClass+0x38>)
90006c72:	f004 ff17 	bl	9000baa4 <iprintf>
90006c76:	4807      	ldr	r0, [pc, #28]	; (90006c94 <USBH_RegisterClass+0x3c>)
    USBH_ErrLog("Invalid Class handle");
90006c78:	f004 ff14 	bl	9000baa4 <iprintf>
90006c7c:	200a      	movs	r0, #10
90006c7e:	f004 ff23 	bl	9000bac8 <putchar>
    status = USBH_FAIL;
90006c82:	2002      	movs	r0, #2
90006c84:	e7f3      	b.n	90006c6e <USBH_RegisterClass+0x16>
    USBH_ErrLog("Invalid Class handle");
90006c86:	4802      	ldr	r0, [pc, #8]	; (90006c90 <USBH_RegisterClass+0x38>)
90006c88:	f004 ff0c 	bl	9000baa4 <iprintf>
90006c8c:	4802      	ldr	r0, [pc, #8]	; (90006c98 <USBH_RegisterClass+0x40>)
90006c8e:	e7f3      	b.n	90006c78 <USBH_RegisterClass+0x20>
90006c90:	90010e88 	.word	0x90010e88
90006c94:	90010ea4 	.word	0x90010ea4
90006c98:	90010ebd 	.word	0x90010ebd

90006c9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
90006c9c:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
90006c9e:	f890 343c 	ldrb.w	r3, [r0, #1084]	; 0x43c
{
90006ca2:	4604      	mov	r4, r0
90006ca4:	460d      	mov	r5, r1
  if (interface < phost->device.CfgDesc.bNumInterfaces)
90006ca6:	428b      	cmp	r3, r1
90006ca8:	d924      	bls.n	90006cf4 <USBH_SelectInterface+0x58>
  {
    phost->device.current_interface = interface;
90006caa:	f880 1424 	strb.w	r1, [r0, #1060]	; 0x424
    USBH_UsrLog("Switching to Interface (#%d)", interface);
90006cae:	4817      	ldr	r0, [pc, #92]	; (90006d0c <USBH_SelectInterface+0x70>)
90006cb0:	f004 fef8 	bl	9000baa4 <iprintf>
90006cb4:	200a      	movs	r0, #10
90006cb6:	f004 ff07 	bl	9000bac8 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
90006cba:	2322      	movs	r3, #34	; 0x22
90006cbc:	4814      	ldr	r0, [pc, #80]	; (90006d10 <USBH_SelectInterface+0x74>)
90006cbe:	fb03 4405 	mla	r4, r3, r5, r4
90006cc2:	f894 1447 	ldrb.w	r1, [r4, #1095]	; 0x447
90006cc6:	f004 feed 	bl	9000baa4 <iprintf>
90006cca:	200a      	movs	r0, #10
90006ccc:	f004 fefc 	bl	9000bac8 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
90006cd0:	f894 1448 	ldrb.w	r1, [r4, #1096]	; 0x448
90006cd4:	480f      	ldr	r0, [pc, #60]	; (90006d14 <USBH_SelectInterface+0x78>)
90006cd6:	f004 fee5 	bl	9000baa4 <iprintf>
90006cda:	200a      	movs	r0, #10
90006cdc:	f004 fef4 	bl	9000bac8 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
90006ce0:	f894 1449 	ldrb.w	r1, [r4, #1097]	; 0x449
90006ce4:	480c      	ldr	r0, [pc, #48]	; (90006d18 <USBH_SelectInterface+0x7c>)
90006ce6:	f004 fedd 	bl	9000baa4 <iprintf>
90006cea:	200a      	movs	r0, #10
90006cec:	f004 feec 	bl	9000bac8 <putchar>
  USBH_StatusTypeDef status = USBH_OK;
90006cf0:	2000      	movs	r0, #0
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
  }

  return status;
}
90006cf2:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ErrLog("Cannot Select This Interface.");
90006cf4:	4809      	ldr	r0, [pc, #36]	; (90006d1c <USBH_SelectInterface+0x80>)
90006cf6:	f004 fed5 	bl	9000baa4 <iprintf>
90006cfa:	4809      	ldr	r0, [pc, #36]	; (90006d20 <USBH_SelectInterface+0x84>)
90006cfc:	f004 fed2 	bl	9000baa4 <iprintf>
90006d00:	200a      	movs	r0, #10
90006d02:	f004 fee1 	bl	9000bac8 <putchar>
    status = USBH_FAIL;
90006d06:	2002      	movs	r0, #2
90006d08:	e7f3      	b.n	90006cf2 <USBH_SelectInterface+0x56>
90006d0a:	bf00      	nop
90006d0c:	90010ed2 	.word	0x90010ed2
90006d10:	90010eef 	.word	0x90010eef
90006d14:	90010efe 	.word	0x90010efe
90006d18:	90010f0d 	.word	0x90010f0d
90006d1c:	90010e88 	.word	0x90010e88
90006d20:	90010f1c 	.word	0x90010f1c

90006d24 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
90006d24:	b510      	push	{r4, lr}
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
90006d26:	f890 4447 	ldrb.w	r4, [r0, #1095]	; 0x447
90006d2a:	428c      	cmp	r4, r1
90006d2c:	d001      	beq.n	90006d32 <USBH_FindInterface+0xe>
90006d2e:	29ff      	cmp	r1, #255	; 0xff
90006d30:	d110      	bne.n	90006d54 <USBH_FindInterface+0x30>
90006d32:	f890 1448 	ldrb.w	r1, [r0, #1096]	; 0x448
90006d36:	4291      	cmp	r1, r2
90006d38:	d001      	beq.n	90006d3e <USBH_FindInterface+0x1a>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
90006d3a:	2aff      	cmp	r2, #255	; 0xff
90006d3c:	d10a      	bne.n	90006d54 <USBH_FindInterface+0x30>
90006d3e:	f890 2449 	ldrb.w	r2, [r0, #1097]	; 0x449
90006d42:	429a      	cmp	r2, r3
90006d44:	d008      	beq.n	90006d58 <USBH_FindInterface+0x34>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
90006d46:	f1b3 00ff 	subs.w	r0, r3, #255	; 0xff
90006d4a:	bf18      	it	ne
90006d4c:	f04f 30ff 	movne.w	r0, #4294967295
90006d50:	b2c0      	uxtb	r0, r0
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
}
90006d52:	bd10      	pop	{r4, pc}
  return 0xFFU;
90006d54:	20ff      	movs	r0, #255	; 0xff
90006d56:	e7fc      	b.n	90006d52 <USBH_FindInterface+0x2e>
90006d58:	2000      	movs	r0, #0
90006d5a:	e7fa      	b.n	90006d52 <USBH_FindInterface+0x2e>

90006d5c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
90006d5c:	b510      	push	{r4, lr}
90006d5e:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
90006d60:	f003 ff8e 	bl	9000ac80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
90006d64:	2101      	movs	r1, #1
90006d66:	4620      	mov	r0, r4
90006d68:	f003 ffdc 	bl	9000ad24 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
90006d6c:	2000      	movs	r0, #0
90006d6e:	bd10      	pop	{r4, pc}

90006d70 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
90006d70:	b570      	push	{r4, r5, r6, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
90006d72:	2302      	movs	r3, #2
{
90006d74:	b086      	sub	sp, #24
90006d76:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
90006d78:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
90006d7c:	f890 3421 	ldrb.w	r3, [r0, #1057]	; 0x421
90006d80:	2b01      	cmp	r3, #1
90006d82:	d101      	bne.n	90006d88 <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
90006d84:	2303      	movs	r3, #3
90006d86:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
90006d88:	7823      	ldrb	r3, [r4, #0]
90006d8a:	2b0b      	cmp	r3, #11
90006d8c:	d823      	bhi.n	90006dd6 <USBH_Process+0x66>
90006d8e:	e8df f013 	tbh	[pc, r3, lsl #1]
90006d92:	000c      	.short	0x000c
90006d94:	00530025 	.word	0x00530025
90006d98:	00220295 	.word	0x00220295
90006d9c:	026c0089 	.word	0x026c0089
90006da0:	0217020e 	.word	0x0217020e
90006da4:	02380225 	.word	0x02380225
90006da8:	028c      	.short	0x028c
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
90006daa:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
90006dae:	b193      	cbz	r3, 90006dd6 <USBH_Process+0x66>
      {
        USBH_UsrLog("USB Device Connected");
90006db0:	48b6      	ldr	r0, [pc, #728]	; (9000708c <USBH_Process+0x31c>)
90006db2:	f004 fe77 	bl	9000baa4 <iprintf>
90006db6:	200a      	movs	r0, #10
90006db8:	f004 fe86 	bl	9000bac8 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
90006dbc:	2301      	movs	r3, #1
        USBH_Delay(200U);
90006dbe:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
90006dc0:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
90006dc2:	f003 ffdf 	bl	9000ad84 <USBH_Delay>
        USBH_LL_ResetPort(phost);
90006dc6:	4620      	mov	r0, r4
90006dc8:	f003 ff72 	bl	9000acb0 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
90006dcc:	2300      	movs	r3, #0
90006dce:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
        phost->Timeout = 0U;
90006dd2:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
90006dd6:	2000      	movs	r0, #0
90006dd8:	b006      	add	sp, #24
90006dda:	bd70      	pop	{r4, r5, r6, pc}
      if (phost->device.PortEnabled == 1U)
90006ddc:	f894 3423 	ldrb.w	r3, [r4, #1059]	; 0x423
90006de0:	2b01      	cmp	r3, #1
90006de2:	d10b      	bne.n	90006dfc <USBH_Process+0x8c>
        USBH_UsrLog("USB Device Reset Completed");
90006de4:	48aa      	ldr	r0, [pc, #680]	; (90007090 <USBH_Process+0x320>)
90006de6:	f004 fe5d 	bl	9000baa4 <iprintf>
90006dea:	200a      	movs	r0, #10
90006dec:	f004 fe6c 	bl	9000bac8 <putchar>
        phost->device.RstCnt = 0U;
90006df0:	2300      	movs	r3, #0
90006df2:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
        phost->gState = HOST_DEV_ATTACHED;
90006df6:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
90006df8:	7023      	strb	r3, [r4, #0]
90006dfa:	e7ec      	b.n	90006dd6 <USBH_Process+0x66>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
90006dfc:	f8d4 34b4 	ldr.w	r3, [r4, #1204]	; 0x4b4
90006e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90006e04:	d911      	bls.n	90006e2a <USBH_Process+0xba>
          phost->device.RstCnt++;
90006e06:	f894 341f 	ldrb.w	r3, [r4, #1055]	; 0x41f
90006e0a:	3301      	adds	r3, #1
90006e0c:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
90006e0e:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
90006e10:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
          if (phost->device.RstCnt > 3U)
90006e14:	d907      	bls.n	90006e26 <USBH_Process+0xb6>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
90006e16:	489f      	ldr	r0, [pc, #636]	; (90007094 <USBH_Process+0x324>)
90006e18:	f004 fe44 	bl	9000baa4 <iprintf>
90006e1c:	200a      	movs	r0, #10
90006e1e:	f004 fe53 	bl	9000bac8 <putchar>
            phost->gState = HOST_ABORT_STATE;
90006e22:	230d      	movs	r3, #13
90006e24:	e7e8      	b.n	90006df8 <USBH_Process+0x88>
            phost->gState = HOST_IDLE;
90006e26:	2300      	movs	r3, #0
90006e28:	e7e6      	b.n	90006df8 <USBH_Process+0x88>
          phost->Timeout += 10U;
90006e2a:	330a      	adds	r3, #10
          USBH_Delay(10U);
90006e2c:	200a      	movs	r0, #10
          phost->Timeout += 10U;
90006e2e:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
          USBH_Delay(10U);
90006e32:	f003 ffa7 	bl	9000ad84 <USBH_Delay>
90006e36:	e7ce      	b.n	90006dd6 <USBH_Process+0x66>
      if (phost->pUser != NULL)
90006e38:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
90006e3c:	b113      	cbz	r3, 90006e44 <USBH_Process+0xd4>
        phost->pUser(phost, HOST_USER_CONNECTION);
90006e3e:	2104      	movs	r1, #4
90006e40:	4620      	mov	r0, r4
90006e42:	4798      	blx	r3
      USBH_Delay(100U);
90006e44:	2064      	movs	r0, #100	; 0x64
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90006e46:	2500      	movs	r5, #0
      USBH_Delay(100U);
90006e48:	f003 ff9c 	bl	9000ad84 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
90006e4c:	4620      	mov	r0, r4
90006e4e:	f003 ff25 	bl	9000ac9c <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
90006e52:	2305      	movs	r3, #5
      phost->device.speed = USBH_LL_GetSpeed(phost);
90006e54:	f884 041d 	strb.w	r0, [r4, #1053]	; 0x41d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90006e58:	2100      	movs	r1, #0
      phost->gState = HOST_ENUMERATION;
90006e5a:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90006e5c:	4620      	mov	r0, r4
90006e5e:	f000 fd30 	bl	900078c2 <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
90006e62:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90006e64:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
90006e66:	4620      	mov	r0, r4
90006e68:	f000 fd2b 	bl	900078c2 <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90006e6c:	79a3      	ldrb	r3, [r4, #6]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
90006e6e:	4601      	mov	r1, r0
90006e70:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90006e72:	9302      	str	r3, [sp, #8]
90006e74:	2280      	movs	r2, #128	; 0x80
90006e76:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006e7a:	4620      	mov	r0, r4
90006e7c:	9501      	str	r5, [sp, #4]
90006e7e:	9300      	str	r3, [sp, #0]
90006e80:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006e84:	f000 fd09 	bl	9000789a <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
90006e88:	79a3      	ldrb	r3, [r4, #6]
90006e8a:	462a      	mov	r2, r5
90006e8c:	7961      	ldrb	r1, [r4, #5]
90006e8e:	4620      	mov	r0, r4
90006e90:	e9cd 5301 	strd	r5, r3, [sp, #4]
90006e94:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006e98:	9300      	str	r3, [sp, #0]
90006e9a:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006e9e:	f000 fcfc 	bl	9000789a <USBH_OpenPipe>
      break;
90006ea2:	e798      	b.n	90006dd6 <USBH_Process+0x66>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
90006ea4:	7865      	ldrb	r5, [r4, #1]
90006ea6:	2d07      	cmp	r5, #7
90006ea8:	d830      	bhi.n	90006f0c <USBH_Process+0x19c>
90006eaa:	e8df f015 	tbh	[pc, r5, lsl #1]
90006eae:	0008      	.short	0x0008
90006eb0:	00b10055 	.word	0x00b10055
90006eb4:	00e600df 	.word	0x00e600df
90006eb8:	01440129 	.word	0x01440129
90006ebc:	015f      	.short	0x015f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
90006ebe:	2108      	movs	r1, #8
90006ec0:	4620      	mov	r0, r4
90006ec2:	f000 fb65 	bl	90007590 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
90006ec6:	4606      	mov	r6, r0
90006ec8:	b9f0      	cbnz	r0, 90006f08 <USBH_Process+0x198>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
90006eca:	f894 342d 	ldrb.w	r3, [r4, #1069]	; 0x42d

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
90006ece:	2501      	movs	r5, #1
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
90006ed0:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
90006ed2:	7065      	strb	r5, [r4, #1]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
90006ed4:	7921      	ldrb	r1, [r4, #4]
90006ed6:	2280      	movs	r2, #128	; 0x80
90006ed8:	4620      	mov	r0, r4
90006eda:	e9cd 6301 	strd	r6, r3, [sp, #4]
90006ede:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006ee2:	9300      	str	r3, [sp, #0]
90006ee4:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006ee8:	f000 fcd7 	bl	9000789a <USBH_OpenPipe>
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
90006eec:	79a3      	ldrb	r3, [r4, #6]
90006eee:	4632      	mov	r2, r6
90006ef0:	7961      	ldrb	r1, [r4, #5]
90006ef2:	4620      	mov	r0, r4
90006ef4:	e9cd 6301 	strd	r6, r3, [sp, #4]
90006ef8:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006efc:	9300      	str	r3, [sp, #0]
90006efe:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006f02:	f000 fcca 	bl	9000789a <USBH_OpenPipe>
90006f06:	e03e      	b.n	90006f86 <USBH_Process+0x216>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90006f08:	2803      	cmp	r0, #3
90006f0a:	d001      	beq.n	90006f10 <USBH_Process+0x1a0>
  switch (phost->EnumState)
90006f0c:	2501      	movs	r5, #1
90006f0e:	e03a      	b.n	90006f86 <USBH_Process+0x216>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
90006f10:	4861      	ldr	r0, [pc, #388]	; (90007098 <USBH_Process+0x328>)
90006f12:	f004 fdc7 	bl	9000baa4 <iprintf>
90006f16:	4861      	ldr	r0, [pc, #388]	; (9000709c <USBH_Process+0x32c>)
90006f18:	f004 fdc4 	bl	9000baa4 <iprintf>
90006f1c:	200a      	movs	r0, #10
90006f1e:	f004 fdd3 	bl	9000bac8 <putchar>
        phost->device.EnumCnt++;
90006f22:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
90006f26:	3301      	adds	r3, #1
90006f28:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
90006f2a:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
90006f2c:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
90006f30:	d907      	bls.n	90006f42 <USBH_Process+0x1d2>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
90006f32:	485b      	ldr	r0, [pc, #364]	; (900070a0 <USBH_Process+0x330>)
90006f34:	f004 fdb6 	bl	9000baa4 <iprintf>
90006f38:	200a      	movs	r0, #10
90006f3a:	f004 fdc5 	bl	9000bac8 <putchar>
          phost->gState = HOST_ABORT_STATE;
90006f3e:	230d      	movs	r3, #13
90006f40:	e008      	b.n	90006f54 <USBH_Process+0x1e4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
90006f42:	7961      	ldrb	r1, [r4, #5]
90006f44:	4620      	mov	r0, r4
90006f46:	f000 fcd4 	bl	900078f2 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
90006f4a:	7921      	ldrb	r1, [r4, #4]
90006f4c:	4620      	mov	r0, r4
90006f4e:	f000 fcd0 	bl	900078f2 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
90006f52:	2300      	movs	r3, #0
          USBH_FreePipe(phost, phost->Control.pipe_out);
          USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
90006f54:	7023      	strb	r3, [r4, #0]
90006f56:	e7d9      	b.n	90006f0c <USBH_Process+0x19c>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
90006f58:	2112      	movs	r1, #18
90006f5a:	4620      	mov	r0, r4
90006f5c:	f000 fb18 	bl	90007590 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
90006f60:	bb78      	cbnz	r0, 90006fc2 <USBH_Process+0x252>
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
90006f62:	f8b4 1430 	ldrh.w	r1, [r4, #1072]	; 0x430
90006f66:	484f      	ldr	r0, [pc, #316]	; (900070a4 <USBH_Process+0x334>)
90006f68:	f004 fd9c 	bl	9000baa4 <iprintf>
90006f6c:	200a      	movs	r0, #10
90006f6e:	f004 fdab 	bl	9000bac8 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
90006f72:	f8b4 142e 	ldrh.w	r1, [r4, #1070]	; 0x42e
90006f76:	484c      	ldr	r0, [pc, #304]	; (900070a8 <USBH_Process+0x338>)
90006f78:	f004 fd94 	bl	9000baa4 <iprintf>
90006f7c:	200a      	movs	r0, #10
90006f7e:	f004 fda3 	bl	9000bac8 <putchar>
        phost->EnumState = ENUM_SET_ADDR;
90006f82:	2302      	movs	r3, #2
90006f84:	7063      	strb	r3, [r4, #1]
      status = USBH_HandleEnum(phost);
90006f86:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
90006f8a:	f89d 3017 	ldrb.w	r3, [sp, #23]
90006f8e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
90006f92:	2b00      	cmp	r3, #0
90006f94:	f47f af1f 	bne.w	90006dd6 <USBH_Process+0x66>
        USBH_UsrLog("Enumeration done.");
90006f98:	4844      	ldr	r0, [pc, #272]	; (900070ac <USBH_Process+0x33c>)
90006f9a:	f004 fd83 	bl	9000baa4 <iprintf>
90006f9e:	200a      	movs	r0, #10
90006fa0:	f004 fd92 	bl	9000bac8 <putchar>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
90006fa4:	f894 3437 	ldrb.w	r3, [r4, #1079]	; 0x437
        phost->device.current_interface = 0U;
90006fa8:	f884 5424 	strb.w	r5, [r4, #1060]	; 0x424
        if (phost->device.DevDesc.bNumConfigurations == 1U)
90006fac:	2b01      	cmp	r3, #1
90006fae:	f040 80fc 	bne.w	900071aa <USBH_Process+0x43a>
          USBH_UsrLog("This device has only 1 configuration.");
90006fb2:	483f      	ldr	r0, [pc, #252]	; (900070b0 <USBH_Process+0x340>)
90006fb4:	f004 fd76 	bl	9000baa4 <iprintf>
90006fb8:	200a      	movs	r0, #10
90006fba:	f004 fd85 	bl	9000bac8 <putchar>
        phost->gState = HOST_SET_CONFIGURATION;
90006fbe:	2308      	movs	r3, #8
90006fc0:	e71a      	b.n	90006df8 <USBH_Process+0x88>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90006fc2:	2803      	cmp	r0, #3
90006fc4:	d1a2      	bne.n	90006f0c <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
90006fc6:	4834      	ldr	r0, [pc, #208]	; (90007098 <USBH_Process+0x328>)
90006fc8:	f004 fd6c 	bl	9000baa4 <iprintf>
90006fcc:	4839      	ldr	r0, [pc, #228]	; (900070b4 <USBH_Process+0x344>)
90006fce:	f004 fd69 	bl	9000baa4 <iprintf>
90006fd2:	200a      	movs	r0, #10
90006fd4:	f004 fd78 	bl	9000bac8 <putchar>
        phost->device.EnumCnt++;
90006fd8:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
90006fdc:	3301      	adds	r3, #1
90006fde:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
90006fe0:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
90006fe2:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
90006fe6:	d908      	bls.n	90006ffa <USBH_Process+0x28a>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
90006fe8:	482d      	ldr	r0, [pc, #180]	; (900070a0 <USBH_Process+0x330>)
90006fea:	f004 fd5b 	bl	9000baa4 <iprintf>
90006fee:	200a      	movs	r0, #10
90006ff0:	f004 fd6a 	bl	9000bac8 <putchar>
          phost->gState = HOST_ABORT_STATE;
90006ff4:	230d      	movs	r3, #13
          phost->gState = HOST_IDLE;
90006ff6:	7023      	strb	r3, [r4, #0]
90006ff8:	e7c5      	b.n	90006f86 <USBH_Process+0x216>
          USBH_FreePipe(phost, phost->Control.pipe_out);
90006ffa:	7961      	ldrb	r1, [r4, #5]
90006ffc:	4620      	mov	r0, r4
90006ffe:	f000 fc78 	bl	900078f2 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
90007002:	7921      	ldrb	r1, [r4, #4]
90007004:	4620      	mov	r0, r4
90007006:	f000 fc74 	bl	900078f2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
9000700a:	2300      	movs	r3, #0
9000700c:	7063      	strb	r3, [r4, #1]
9000700e:	e7f2      	b.n	90006ff6 <USBH_Process+0x286>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
90007010:	2101      	movs	r1, #1
90007012:	4620      	mov	r0, r4
90007014:	f000 fbaf 	bl	90007776 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
90007018:	4606      	mov	r6, r0
9000701a:	b980      	cbnz	r0, 9000703e <USBH_Process+0x2ce>
        phost->device.address = USBH_DEVICE_ADDRESS;
9000701c:	2501      	movs	r5, #1
        USBH_Delay(2U);
9000701e:	2002      	movs	r0, #2
90007020:	f003 feb0 	bl	9000ad84 <USBH_Delay>
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
90007024:	4824      	ldr	r0, [pc, #144]	; (900070b8 <USBH_Process+0x348>)
90007026:	4629      	mov	r1, r5
        phost->device.address = USBH_DEVICE_ADDRESS;
90007028:	f884 541c 	strb.w	r5, [r4, #1052]	; 0x41c
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
9000702c:	f004 fd3a 	bl	9000baa4 <iprintf>
90007030:	200a      	movs	r0, #10
90007032:	f004 fd49 	bl	9000bac8 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
90007036:	2303      	movs	r3, #3
90007038:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
9000703a:	79a3      	ldrb	r3, [r4, #6]
9000703c:	e74a      	b.n	90006ed4 <USBH_Process+0x164>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
9000703e:	2803      	cmp	r0, #3
90007040:	f47f af64 	bne.w	90006f0c <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Device Set Address request failed");
90007044:	4814      	ldr	r0, [pc, #80]	; (90007098 <USBH_Process+0x328>)
90007046:	f004 fd2d 	bl	9000baa4 <iprintf>
9000704a:	481c      	ldr	r0, [pc, #112]	; (900070bc <USBH_Process+0x34c>)
9000704c:	f004 fd2a 	bl	9000baa4 <iprintf>
90007050:	200a      	movs	r0, #10
90007052:	f004 fd39 	bl	9000bac8 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
90007056:	4812      	ldr	r0, [pc, #72]	; (900070a0 <USBH_Process+0x330>)
90007058:	f004 fd24 	bl	9000baa4 <iprintf>
9000705c:	200a      	movs	r0, #10
9000705e:	f004 fd33 	bl	9000bac8 <putchar>
        phost->gState = HOST_ABORT_STATE;
90007062:	230d      	movs	r3, #13
90007064:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
90007066:	2300      	movs	r3, #0
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
90007068:	7063      	strb	r3, [r4, #1]
9000706a:	e74f      	b.n	90006f0c <USBH_Process+0x19c>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
9000706c:	2109      	movs	r1, #9
9000706e:	4620      	mov	r0, r4
90007070:	f000 fad6 	bl	90007620 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
90007074:	bb20      	cbnz	r0, 900070c0 <USBH_Process+0x350>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
90007076:	2304      	movs	r3, #4
90007078:	e7f6      	b.n	90007068 <USBH_Process+0x2f8>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
9000707a:	f8b4 143a 	ldrh.w	r1, [r4, #1082]	; 0x43a
9000707e:	4620      	mov	r0, r4
90007080:	f000 face 	bl	90007620 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
90007084:	b9e0      	cbnz	r0, 900070c0 <USBH_Process+0x350>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
90007086:	2305      	movs	r3, #5
90007088:	e7ee      	b.n	90007068 <USBH_Process+0x2f8>
9000708a:	bf00      	nop
9000708c:	90010f3a 	.word	0x90010f3a
90007090:	90010f4f 	.word	0x90010f4f
90007094:	90010f6a 	.word	0x90010f6a
90007098:	90010e88 	.word	0x90010e88
9000709c:	90010f96 	.word	0x90010f96
900070a0:	90010fca 	.word	0x90010fca
900070a4:	90011009 	.word	0x90011009
900070a8:	90011012 	.word	0x90011012
900070ac:	90011139 	.word	0x90011139
900070b0:	9001114b 	.word	0x9001114b
900070b4:	9001101b 	.word	0x9001101b
900070b8:	90011054 	.word	0x90011054
900070bc:	9001106c 	.word	0x9001106c
      else if (ReqStatus == USBH_NOT_SUPPORTED)
900070c0:	2803      	cmp	r0, #3
900070c2:	f47f af23 	bne.w	90006f0c <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
900070c6:	4892      	ldr	r0, [pc, #584]	; (90007310 <USBH_Process+0x5a0>)
900070c8:	f004 fcec 	bl	9000baa4 <iprintf>
900070cc:	4891      	ldr	r0, [pc, #580]	; (90007314 <USBH_Process+0x5a4>)
900070ce:	f004 fce9 	bl	9000baa4 <iprintf>
900070d2:	200a      	movs	r0, #10
900070d4:	f004 fcf8 	bl	9000bac8 <putchar>
        phost->device.EnumCnt++;
900070d8:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
900070dc:	3301      	adds	r3, #1
900070de:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
900070e0:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
900070e2:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
900070e6:	f63f af24 	bhi.w	90006f32 <USBH_Process+0x1c2>
          USBH_FreePipe(phost, phost->Control.pipe_out);
900070ea:	7961      	ldrb	r1, [r4, #5]
900070ec:	4620      	mov	r0, r4
900070ee:	f000 fc00 	bl	900078f2 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
900070f2:	7921      	ldrb	r1, [r4, #4]
900070f4:	4620      	mov	r0, r4
900070f6:	f000 fbfc 	bl	900078f2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
900070fa:	2300      	movs	r3, #0
900070fc:	7063      	strb	r3, [r4, #1]
900070fe:	e729      	b.n	90006f54 <USBH_Process+0x1e4>
      if (phost->device.DevDesc.iManufacturer != 0U)
90007100:	f894 1434 	ldrb.w	r1, [r4, #1076]	; 0x434
90007104:	b199      	cbz	r1, 9000712e <USBH_Process+0x3be>
                                        phost->device.Data, 0xFFU);
90007106:	f504 7507 	add.w	r5, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
9000710a:	23ff      	movs	r3, #255	; 0xff
9000710c:	4620      	mov	r0, r4
9000710e:	462a      	mov	r2, r5
90007110:	f000 fb0a 	bl	90007728 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
90007114:	b940      	cbnz	r0, 90007128 <USBH_Process+0x3b8>
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
90007116:	4629      	mov	r1, r5
90007118:	487f      	ldr	r0, [pc, #508]	; (90007318 <USBH_Process+0x5a8>)
9000711a:	f004 fcc3 	bl	9000baa4 <iprintf>
9000711e:	200a      	movs	r0, #10
90007120:	f004 fcd2 	bl	9000bac8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
90007124:	2306      	movs	r3, #6
90007126:	e79f      	b.n	90007068 <USBH_Process+0x2f8>
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
90007128:	2803      	cmp	r0, #3
9000712a:	f47f aeef 	bne.w	90006f0c <USBH_Process+0x19c>
        {
          USBH_UsrLog("Manufacturer : N/A");
9000712e:	487b      	ldr	r0, [pc, #492]	; (9000731c <USBH_Process+0x5ac>)
90007130:	f004 fcb8 	bl	9000baa4 <iprintf>
90007134:	e7f3      	b.n	9000711e <USBH_Process+0x3ae>
#endif
      }
      break;

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
90007136:	f894 1435 	ldrb.w	r1, [r4, #1077]	; 0x435
9000713a:	b199      	cbz	r1, 90007164 <USBH_Process+0x3f4>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
                                        phost->device.Data, 0xFFU);
9000713c:	f504 7507 	add.w	r5, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
90007140:	23ff      	movs	r3, #255	; 0xff
90007142:	4620      	mov	r0, r4
90007144:	462a      	mov	r2, r5
90007146:	f000 faef 	bl	90007728 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
9000714a:	b940      	cbnz	r0, 9000715e <USBH_Process+0x3ee>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
9000714c:	4629      	mov	r1, r5
9000714e:	4874      	ldr	r0, [pc, #464]	; (90007320 <USBH_Process+0x5b0>)
90007150:	f004 fca8 	bl	9000baa4 <iprintf>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
        {
          USBH_UsrLog("Product : N/A");
90007154:	200a      	movs	r0, #10
90007156:	f004 fcb7 	bl	9000bac8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
9000715a:	2307      	movs	r3, #7
9000715c:	e784      	b.n	90007068 <USBH_Process+0x2f8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
9000715e:	2803      	cmp	r0, #3
90007160:	f47f aed4 	bne.w	90006f0c <USBH_Process+0x19c>
          USBH_UsrLog("Product : N/A");
90007164:	486f      	ldr	r0, [pc, #444]	; (90007324 <USBH_Process+0x5b4>)
90007166:	f004 fc9d 	bl	9000baa4 <iprintf>
9000716a:	e7f3      	b.n	90007154 <USBH_Process+0x3e4>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
9000716c:	f894 1436 	ldrb.w	r1, [r4, #1078]	; 0x436
90007170:	b199      	cbz	r1, 9000719a <USBH_Process+0x42a>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
                                        phost->device.Data, 0xFFU);
90007172:	f504 7607 	add.w	r6, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
90007176:	23ff      	movs	r3, #255	; 0xff
90007178:	4620      	mov	r0, r4
9000717a:	4632      	mov	r2, r6
9000717c:	f000 fad4 	bl	90007728 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
90007180:	4605      	mov	r5, r0
90007182:	b938      	cbnz	r0, 90007194 <USBH_Process+0x424>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
90007184:	4631      	mov	r1, r6
90007186:	4868      	ldr	r0, [pc, #416]	; (90007328 <USBH_Process+0x5b8>)
90007188:	f004 fc8c 	bl	9000baa4 <iprintf>
9000718c:	200a      	movs	r0, #10
9000718e:	f004 fc9b 	bl	9000bac8 <putchar>
          Status = USBH_OK;
90007192:	e6f8      	b.n	90006f86 <USBH_Process+0x216>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
90007194:	2803      	cmp	r0, #3
90007196:	f47f aeb9 	bne.w	90006f0c <USBH_Process+0x19c>
        {
          USBH_UsrLog("Serial Number : N/A");
9000719a:	4864      	ldr	r0, [pc, #400]	; (9000732c <USBH_Process+0x5bc>)
          Status = USBH_OK;
9000719c:	2500      	movs	r5, #0
          USBH_UsrLog("Serial Number : N/A");
9000719e:	f004 fc81 	bl	9000baa4 <iprintf>
900071a2:	200a      	movs	r0, #10
900071a4:	f004 fc90 	bl	9000bac8 <putchar>
          Status = USBH_OK;
900071a8:	e6ed      	b.n	90006f86 <USBH_Process+0x216>
          phost->gState = HOST_INPUT;
900071aa:	2307      	movs	r3, #7
900071ac:	e624      	b.n	90006df8 <USBH_Process+0x88>
      if (phost->pUser != NULL)
900071ae:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
900071b2:	2b00      	cmp	r3, #0
900071b4:	f43f ae0f 	beq.w	90006dd6 <USBH_Process+0x66>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
900071b8:	2101      	movs	r1, #1
900071ba:	4620      	mov	r0, r4
900071bc:	4798      	blx	r3
900071be:	e6fe      	b.n	90006fbe <USBH_Process+0x24e>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
900071c0:	f894 143d 	ldrb.w	r1, [r4, #1085]	; 0x43d
900071c4:	4620      	mov	r0, r4
900071c6:	f000 fae3 	bl	90007790 <USBH_SetCfg>
900071ca:	2800      	cmp	r0, #0
900071cc:	f47f ae03 	bne.w	90006dd6 <USBH_Process+0x66>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
900071d0:	2309      	movs	r3, #9
        USBH_UsrLog("Default configuration set.");
900071d2:	4857      	ldr	r0, [pc, #348]	; (90007330 <USBH_Process+0x5c0>)
        phost->gState = HOST_SET_WAKEUP_FEATURE;
900071d4:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
900071d6:	f004 fc65 	bl	9000baa4 <iprintf>
900071da:	e042      	b.n	90007262 <USBH_Process+0x4f2>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
900071dc:	f894 343f 	ldrb.w	r3, [r4, #1087]	; 0x43f
900071e0:	069b      	lsls	r3, r3, #26
900071e2:	d50c      	bpl.n	900071fe <USBH_Process+0x48e>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
900071e4:	2101      	movs	r1, #1
900071e6:	4620      	mov	r0, r4
900071e8:	f000 fadf 	bl	900077aa <USBH_SetFeature>
900071ec:	2800      	cmp	r0, #0
900071ee:	f47f adf2 	bne.w	90006dd6 <USBH_Process+0x66>
          USBH_UsrLog("Device remote wakeup enabled");
900071f2:	4850      	ldr	r0, [pc, #320]	; (90007334 <USBH_Process+0x5c4>)
900071f4:	f004 fc56 	bl	9000baa4 <iprintf>
900071f8:	200a      	movs	r0, #10
900071fa:	f004 fc65 	bl	9000bac8 <putchar>
        phost->gState = HOST_CHECK_CLASS;
900071fe:	230a      	movs	r3, #10
90007200:	e5fa      	b.n	90006df8 <USBH_Process+0x88>
      if (phost->ClassNumber == 0U)
90007202:	f8d4 346c 	ldr.w	r3, [r4, #1132]	; 0x46c
90007206:	b90b      	cbnz	r3, 9000720c <USBH_Process+0x49c>
        USBH_UsrLog("No Class has been registered.");
90007208:	484b      	ldr	r0, [pc, #300]	; (90007338 <USBH_Process+0x5c8>)
9000720a:	e7e4      	b.n	900071d6 <USBH_Process+0x466>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
9000720c:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
90007210:	f894 2447 	ldrb.w	r2, [r4, #1095]	; 0x447
90007214:	7919      	ldrb	r1, [r3, #4]
90007216:	4291      	cmp	r1, r2
90007218:	d006      	beq.n	90007228 <USBH_Process+0x4b8>
9000721a:	2300      	movs	r3, #0
          USBH_UsrLog("No registered class for this device.");
9000721c:	4847      	ldr	r0, [pc, #284]	; (9000733c <USBH_Process+0x5cc>)
9000721e:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
          phost->gState = HOST_ABORT_STATE;
90007222:	230d      	movs	r3, #13
90007224:	7023      	strb	r3, [r4, #0]
          USBH_UsrLog("No registered class for this device.");
90007226:	e7d6      	b.n	900071d6 <USBH_Process+0x466>
90007228:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
          if (phost->pActiveClass->Init(phost) == USBH_OK)
9000722c:	4620      	mov	r0, r4
9000722e:	689b      	ldr	r3, [r3, #8]
90007230:	4798      	blx	r3
90007232:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90007236:	b970      	cbnz	r0, 90007256 <USBH_Process+0x4e6>
            phost->gState = HOST_CLASS_REQUEST;
90007238:	2206      	movs	r2, #6
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
9000723a:	4841      	ldr	r0, [pc, #260]	; (90007340 <USBH_Process+0x5d0>)
            phost->gState = HOST_CLASS_REQUEST;
9000723c:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
9000723e:	6819      	ldr	r1, [r3, #0]
90007240:	f004 fc30 	bl	9000baa4 <iprintf>
90007244:	200a      	movs	r0, #10
90007246:	f004 fc3f 	bl	9000bac8 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
9000724a:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
9000724e:	2103      	movs	r1, #3
90007250:	4620      	mov	r0, r4
90007252:	4798      	blx	r3
90007254:	e5bf      	b.n	90006dd6 <USBH_Process+0x66>
            phost->gState = HOST_ABORT_STATE;
90007256:	220d      	movs	r2, #13
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
90007258:	483a      	ldr	r0, [pc, #232]	; (90007344 <USBH_Process+0x5d4>)
            phost->gState = HOST_ABORT_STATE;
9000725a:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
9000725c:	6819      	ldr	r1, [r3, #0]
9000725e:	f004 fc21 	bl	9000baa4 <iprintf>
        USBH_ErrLog("Invalid Class Driver.");
90007262:	200a      	movs	r0, #10
90007264:	f004 fc30 	bl	9000bac8 <putchar>
90007268:	e5b5      	b.n	90006dd6 <USBH_Process+0x66>
      if (phost->pActiveClass != NULL)
9000726a:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
9000726e:	b1ab      	cbz	r3, 9000729c <USBH_Process+0x52c>
        status = phost->pActiveClass->Requests(phost);
90007270:	691b      	ldr	r3, [r3, #16]
90007272:	4620      	mov	r0, r4
90007274:	4798      	blx	r3
90007276:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
9000727a:	f89d 3017 	ldrb.w	r3, [sp, #23]
9000727e:	b90b      	cbnz	r3, 90007284 <USBH_Process+0x514>
          phost->gState = HOST_CLASS;
90007280:	230b      	movs	r3, #11
90007282:	e5b9      	b.n	90006df8 <USBH_Process+0x88>
        else if (status == USBH_FAIL)
90007284:	f89d 3017 	ldrb.w	r3, [sp, #23]
90007288:	2b02      	cmp	r3, #2
9000728a:	f47f ada4 	bne.w	90006dd6 <USBH_Process+0x66>
          phost->gState = HOST_ABORT_STATE;
9000728e:	230d      	movs	r3, #13
          USBH_ErrLog("Device not responding Please Unplug.");
90007290:	481f      	ldr	r0, [pc, #124]	; (90007310 <USBH_Process+0x5a0>)
          phost->gState = HOST_ABORT_STATE;
90007292:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
90007294:	f004 fc06 	bl	9000baa4 <iprintf>
90007298:	482b      	ldr	r0, [pc, #172]	; (90007348 <USBH_Process+0x5d8>)
9000729a:	e79c      	b.n	900071d6 <USBH_Process+0x466>
        phost->gState = HOST_ABORT_STATE;
9000729c:	230d      	movs	r3, #13
        USBH_ErrLog("Invalid Class Driver.");
9000729e:	481c      	ldr	r0, [pc, #112]	; (90007310 <USBH_Process+0x5a0>)
        phost->gState = HOST_ABORT_STATE;
900072a0:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
900072a2:	f004 fbff 	bl	9000baa4 <iprintf>
900072a6:	4829      	ldr	r0, [pc, #164]	; (9000734c <USBH_Process+0x5dc>)
900072a8:	e795      	b.n	900071d6 <USBH_Process+0x466>
      if (phost->pActiveClass != NULL)
900072aa:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
900072ae:	2b00      	cmp	r3, #0
900072b0:	f43f ad91 	beq.w	90006dd6 <USBH_Process+0x66>
        phost->pActiveClass->BgndProcess(phost);
900072b4:	695b      	ldr	r3, [r3, #20]
900072b6:	4620      	mov	r0, r4
900072b8:	4798      	blx	r3
900072ba:	e58c      	b.n	90006dd6 <USBH_Process+0x66>
      phost->device.is_disconnected = 0U;
900072bc:	2500      	movs	r5, #0
      DeInitStateMachine(phost);
900072be:	4620      	mov	r0, r4
      phost->device.is_disconnected = 0U;
900072c0:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
      DeInitStateMachine(phost);
900072c4:	f7ff fc7e 	bl	90006bc4 <DeInitStateMachine.isra.0>
      if (phost->pActiveClass != NULL)
900072c8:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
900072cc:	b123      	cbz	r3, 900072d8 <USBH_Process+0x568>
        phost->pActiveClass->DeInit(phost);
900072ce:	68db      	ldr	r3, [r3, #12]
900072d0:	4620      	mov	r0, r4
900072d2:	4798      	blx	r3
        phost->pActiveClass = NULL;
900072d4:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
      if (phost->pUser != NULL)
900072d8:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
900072dc:	b113      	cbz	r3, 900072e4 <USBH_Process+0x574>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
900072de:	2105      	movs	r1, #5
900072e0:	4620      	mov	r0, r4
900072e2:	4798      	blx	r3
      USBH_UsrLog("USB Device disconnected");
900072e4:	481a      	ldr	r0, [pc, #104]	; (90007350 <USBH_Process+0x5e0>)
900072e6:	f004 fbdd 	bl	9000baa4 <iprintf>
900072ea:	200a      	movs	r0, #10
900072ec:	f004 fbec 	bl	9000bac8 <putchar>
      if (phost->device.is_ReEnumerated == 1U)
900072f0:	f894 3422 	ldrb.w	r3, [r4, #1058]	; 0x422
900072f4:	2b01      	cmp	r3, #1
900072f6:	d106      	bne.n	90007306 <USBH_Process+0x596>
        phost->device.is_ReEnumerated = 0U;
900072f8:	2300      	movs	r3, #0
        USBH_Start(phost);
900072fa:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
900072fc:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
        USBH_Start(phost);
90007300:	f7ff fd2c 	bl	90006d5c <USBH_Start>
90007304:	e567      	b.n	90006dd6 <USBH_Process+0x66>
        USBH_LL_Start(phost);
90007306:	4620      	mov	r0, r4
90007308:	f003 fcba 	bl	9000ac80 <USBH_LL_Start>
9000730c:	e563      	b.n	90006dd6 <USBH_Process+0x66>
9000730e:	bf00      	nop
90007310:	90010e88 	.word	0x90010e88
90007314:	9001109d 	.word	0x9001109d
90007318:	900110df 	.word	0x900110df
9000731c:	900110f1 	.word	0x900110f1
90007320:	90010d8b 	.word	0x90010d8b
90007324:	90011104 	.word	0x90011104
90007328:	90011112 	.word	0x90011112
9000732c:	90011125 	.word	0x90011125
90007330:	90011171 	.word	0x90011171
90007334:	9001118c 	.word	0x9001118c
90007338:	900111a9 	.word	0x900111a9
9000733c:	900111c7 	.word	0x900111c7
90007340:	900111ec 	.word	0x900111ec
90007344:	900111fe 	.word	0x900111fe
90007348:	9001121e 	.word	0x9001121e
9000734c:	90011243 	.word	0x90011243
90007350:	90011259 	.word	0x90011259

90007354 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
90007354:	f8c0 14b0 	str.w	r1, [r0, #1200]	; 0x4b0
}
90007358:	4770      	bx	lr

9000735a <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
9000735a:	f8d0 24b0 	ldr.w	r2, [r0, #1200]	; 0x4b0
9000735e:	3201      	adds	r2, #1
90007360:	f8c0 24b0 	str.w	r2, [r0, #1200]	; 0x4b0
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
90007364:	7802      	ldrb	r2, [r0, #0]
90007366:	2a0b      	cmp	r2, #11
90007368:	d104      	bne.n	90007374 <USBH_LL_IncTimer+0x1a>
9000736a:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
9000736e:	b10b      	cbz	r3, 90007374 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
90007370:	699b      	ldr	r3, [r3, #24]
90007372:	4718      	bx	r3
}
90007374:	4770      	bx	lr

90007376 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
90007376:	2301      	movs	r3, #1
90007378:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
9000737c:	4770      	bx	lr

9000737e <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
9000737e:	2300      	movs	r3, #0
90007380:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
90007384:	4770      	bx	lr

90007386 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
90007386:	2301      	movs	r3, #1
90007388:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
9000738c:	2300      	movs	r3, #0
9000738e:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
90007392:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
90007396:	4618      	mov	r0, r3
90007398:	4770      	bx	lr

9000739a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
9000739a:	b538      	push	{r3, r4, r5, lr}
  /* update device connection states */
  phost->device.is_disconnected = 1U;
9000739c:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
9000739e:	2500      	movs	r5, #0
{
900073a0:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
900073a2:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
900073a6:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
900073aa:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  USBH_LL_Stop(phost);
900073ae:	f003 fc6e 	bl	9000ac8e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
900073b2:	7921      	ldrb	r1, [r4, #4]
900073b4:	4620      	mov	r0, r4
900073b6:	f000 fa9c 	bl	900078f2 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
900073ba:	7961      	ldrb	r1, [r4, #5]
900073bc:	4620      	mov	r0, r4
900073be:	f000 fa98 	bl	900078f2 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
900073c2:	4628      	mov	r0, r5
900073c4:	bd38      	pop	{r3, r4, r5, pc}
	...

900073c8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
900073c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
900073ca:	7885      	ldrb	r5, [r0, #2]
{
900073cc:	4604      	mov	r4, r0
  switch (phost->RequestState)
900073ce:	2d01      	cmp	r5, #1
900073d0:	d003      	beq.n	900073da <USBH_CtlReq+0x12>
900073d2:	2d02      	cmp	r5, #2
900073d4:	d007      	beq.n	900073e6 <USBH_CtlReq+0x1e>
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
        {
          phost->Control.state = CTRL_ERROR;
900073d6:	2501      	movs	r5, #1
  return status;
900073d8:	e019      	b.n	9000740e <USBH_CtlReq+0x46>
      phost->RequestState = CMD_WAIT;
900073da:	2302      	movs	r3, #2
      phost->Control.buff = buff;
900073dc:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
900073de:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
900073e0:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
900073e2:	70a3      	strb	r3, [r4, #2]
900073e4:	e013      	b.n	9000740e <USBH_CtlReq+0x46>
  switch (phost->Control.state)
900073e6:	7e06      	ldrb	r6, [r0, #24]
900073e8:	1e73      	subs	r3, r6, #1
900073ea:	2b0a      	cmp	r3, #10
900073ec:	d8f3      	bhi.n	900073d6 <USBH_CtlReq+0xe>
900073ee:	e8df f003 	tbb	[pc, r3]
900073f2:	1106      	.short	0x1106
900073f4:	4e42392f 	.word	0x4e42392f
900073f8:	8478675d 	.word	0x8478675d
900073fc:	8c          	.byte	0x8c
900073fd:	00          	.byte	0x00
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
900073fe:	7942      	ldrb	r2, [r0, #5]
90007400:	f100 0110 	add.w	r1, r0, #16
90007404:	f000 f9eb 	bl	900077de <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
90007408:	4635      	mov	r5, r6
9000740a:	2302      	movs	r3, #2
9000740c:	7623      	strb	r3, [r4, #24]
}
9000740e:	4628      	mov	r0, r5
90007410:	b002      	add	sp, #8
90007412:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90007414:	7941      	ldrb	r1, [r0, #5]
90007416:	f003 fc81 	bl	9000ad1c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
9000741a:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
9000741c:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
9000741e:	d111      	bne.n	90007444 <USBH_CtlReq+0x7c>
        if (phost->Control.setup.b.wLength.w != 0U)
90007420:	8ae2      	ldrh	r2, [r4, #22]
90007422:	f994 3010 	ldrsb.w	r3, [r4, #16]
90007426:	b13a      	cbz	r2, 90007438 <USBH_CtlReq+0x70>
          if (direction == USB_D2H)
90007428:	2b00      	cmp	r3, #0
9000742a:	da02      	bge.n	90007432 <USBH_CtlReq+0x6a>
            phost->Control.state = CTRL_DATA_IN;
9000742c:	2303      	movs	r3, #3
        phost->Control.state = CTRL_IDLE;
9000742e:	7623      	strb	r3, [r4, #24]
90007430:	e7ed      	b.n	9000740e <USBH_CtlReq+0x46>
            phost->Control.state = CTRL_DATA_OUT;
90007432:	2305      	movs	r3, #5
    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_IN_WAIT;
90007434:	7623      	strb	r3, [r4, #24]
      else if (status == USBH_FAIL)
90007436:	e7ce      	b.n	900073d6 <USBH_CtlReq+0xe>
          if (direction == USB_D2H)
90007438:	2b00      	cmp	r3, #0
9000743a:	da01      	bge.n	90007440 <USBH_CtlReq+0x78>
        phost->Control.state = CTRL_STATUS_OUT;
9000743c:	2309      	movs	r3, #9
9000743e:	e7f9      	b.n	90007434 <USBH_CtlReq+0x6c>
            phost->Control.state = CTRL_STATUS_IN;
90007440:	2307      	movs	r3, #7
90007442:	e7f7      	b.n	90007434 <USBH_CtlReq+0x6c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
90007444:	2804      	cmp	r0, #4
90007446:	d001      	beq.n	9000744c <USBH_CtlReq+0x84>
90007448:	2802      	cmp	r0, #2
9000744a:	d1c4      	bne.n	900073d6 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
9000744c:	230b      	movs	r3, #11
9000744e:	e7f1      	b.n	90007434 <USBH_CtlReq+0x6c>
      phost->Control.timer = (uint16_t)phost->Timer;
90007450:	f8d0 34b0 	ldr.w	r3, [r0, #1200]	; 0x4b0
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
90007454:	8982      	ldrh	r2, [r0, #12]
      phost->Control.timer = (uint16_t)phost->Timer;
90007456:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
90007458:	6881      	ldr	r1, [r0, #8]
9000745a:	7903      	ldrb	r3, [r0, #4]
9000745c:	f000 f9e6 	bl	9000782c <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
90007460:	2304      	movs	r3, #4
90007462:	e7e7      	b.n	90007434 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
90007464:	7901      	ldrb	r1, [r0, #4]
90007466:	f003 fc59 	bl	9000ad1c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
9000746a:	2801      	cmp	r0, #1
9000746c:	d0e6      	beq.n	9000743c <USBH_CtlReq+0x74>
      if (URB_Status == USBH_URB_STALL)
9000746e:	2805      	cmp	r0, #5
90007470:	d035      	beq.n	900074de <USBH_CtlReq+0x116>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
90007472:	2804      	cmp	r0, #4
90007474:	e7e9      	b.n	9000744a <USBH_CtlReq+0x82>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
90007476:	2501      	movs	r5, #1
90007478:	9500      	str	r5, [sp, #0]
9000747a:	7943      	ldrb	r3, [r0, #5]
9000747c:	8982      	ldrh	r2, [r0, #12]
9000747e:	6881      	ldr	r1, [r0, #8]
90007480:	f000 f9bd 	bl	900077fe <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
90007484:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
90007488:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
9000748a:	2306      	movs	r3, #6
9000748c:	e7cf      	b.n	9000742e <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
9000748e:	7941      	ldrb	r1, [r0, #5]
90007490:	f003 fc44 	bl	9000ad1c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90007494:	2801      	cmp	r0, #1
90007496:	d0d3      	beq.n	90007440 <USBH_CtlReq+0x78>
      else if (URB_Status == USBH_URB_STALL)
90007498:	2805      	cmp	r0, #5
9000749a:	d020      	beq.n	900074de <USBH_CtlReq+0x116>
      else if (URB_Status == USBH_URB_NOTREADY)
9000749c:	2802      	cmp	r0, #2
9000749e:	d0c8      	beq.n	90007432 <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
900074a0:	2804      	cmp	r0, #4
900074a2:	d198      	bne.n	900073d6 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
900074a4:	230b      	movs	r3, #11
900074a6:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
900074a8:	2301      	movs	r3, #1
900074aa:	e79a      	b.n	900073e2 <USBH_CtlReq+0x1a>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
900074ac:	2200      	movs	r2, #0
900074ae:	7903      	ldrb	r3, [r0, #4]
900074b0:	4611      	mov	r1, r2
900074b2:	f000 f9bb 	bl	9000782c <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
900074b6:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
900074ba:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
900074bc:	2308      	movs	r3, #8
900074be:	e7b9      	b.n	90007434 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
900074c0:	7901      	ldrb	r1, [r0, #4]
900074c2:	f003 fc2b 	bl	9000ad1c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
900074c6:	2801      	cmp	r0, #1
900074c8:	d104      	bne.n	900074d4 <USBH_CtlReq+0x10c>
        status = USBH_OK;
900074ca:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
900074cc:	2301      	movs	r3, #1
900074ce:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
900074d0:	2300      	movs	r3, #0
900074d2:	e7ac      	b.n	9000742e <USBH_CtlReq+0x66>
      else if (URB_Status == USBH_URB_ERROR)
900074d4:	2804      	cmp	r0, #4
900074d6:	d0b9      	beq.n	9000744c <USBH_CtlReq+0x84>
        if (URB_Status == USBH_URB_STALL)
900074d8:	2805      	cmp	r0, #5
900074da:	f47f af7c 	bne.w	900073d6 <USBH_CtlReq+0xe>
        status = USBH_OK;
900074de:	2503      	movs	r5, #3
900074e0:	e7f4      	b.n	900074cc <USBH_CtlReq+0x104>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
900074e2:	2200      	movs	r2, #0
900074e4:	2501      	movs	r5, #1
900074e6:	4611      	mov	r1, r2
900074e8:	9500      	str	r5, [sp, #0]
900074ea:	7943      	ldrb	r3, [r0, #5]
900074ec:	f000 f987 	bl	900077fe <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
900074f0:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
900074f4:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
900074f6:	230a      	movs	r3, #10
900074f8:	e799      	b.n	9000742e <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
900074fa:	7941      	ldrb	r1, [r0, #5]
900074fc:	f003 fc0e 	bl	9000ad1c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90007500:	2801      	cmp	r0, #1
90007502:	d0e2      	beq.n	900074ca <USBH_CtlReq+0x102>
      else if (URB_Status == USBH_URB_NOTREADY)
90007504:	2802      	cmp	r0, #2
90007506:	d1b4      	bne.n	90007472 <USBH_CtlReq+0xaa>
90007508:	e798      	b.n	9000743c <USBH_CtlReq+0x74>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
9000750a:	7e43      	ldrb	r3, [r0, #25]
9000750c:	3301      	adds	r3, #1
9000750e:	b2db      	uxtb	r3, r3
90007510:	2b02      	cmp	r3, #2
90007512:	7643      	strb	r3, [r0, #25]
90007514:	d803      	bhi.n	9000751e <USBH_CtlReq+0x156>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
90007516:	2501      	movs	r5, #1
90007518:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
9000751a:	7085      	strb	r5, [r0, #2]
      else if (status == USBH_FAIL)
9000751c:	e777      	b.n	9000740e <USBH_CtlReq+0x46>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
9000751e:	2600      	movs	r6, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
90007520:	f8d0 34c0 	ldr.w	r3, [r0, #1216]	; 0x4c0
90007524:	2106      	movs	r1, #6
90007526:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");
90007528:	4809      	ldr	r0, [pc, #36]	; (90007550 <USBH_CtlReq+0x188>)
        phost->Control.errorcount = 0U;
9000752a:	7666      	strb	r6, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");
9000752c:	f004 faba 	bl	9000baa4 <iprintf>
90007530:	4808      	ldr	r0, [pc, #32]	; (90007554 <USBH_CtlReq+0x18c>)
90007532:	f004 fab7 	bl	9000baa4 <iprintf>
90007536:	200a      	movs	r0, #10
90007538:	f004 fac6 	bl	9000bac8 <putchar>

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
9000753c:	7961      	ldrb	r1, [r4, #5]
9000753e:	4620      	mov	r0, r4
90007540:	f000 f9d7 	bl	900078f2 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
90007544:	7921      	ldrb	r1, [r4, #4]
90007546:	4620      	mov	r0, r4
90007548:	f000 f9d3 	bl	900078f2 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
9000754c:	7026      	strb	r6, [r4, #0]
      else if (status == USBH_FAIL)
9000754e:	e7ab      	b.n	900074a8 <USBH_CtlReq+0xe0>
90007550:	90010e88 	.word	0x90010e88
90007554:	90011271 	.word	0x90011271

90007558 <USBH_GetDescriptor>:
{
90007558:	b430      	push	{r4, r5}
9000755a:	460c      	mov	r4, r1
9000755c:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
9000755e:	7883      	ldrb	r3, [r0, #2]
{
90007560:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
90007564:	2b01      	cmp	r3, #1
90007566:	d10f      	bne.n	90007588 <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
90007568:	f064 047f 	orn	r4, r4, #127	; 0x7f
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
9000756c:	2306      	movs	r3, #6
    phost->Control.setup.b.wValue.w = value_idx;
9000756e:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
90007570:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
90007572:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
90007576:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
90007578:	f240 4309 	movw	r3, #1033	; 0x409
9000757c:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wLength.w = length;
90007580:	82c5      	strh	r5, [r0, #22]
      phost->Control.setup.b.wIndex.w = 0U;
90007582:	bf18      	it	ne
90007584:	2300      	movne	r3, #0
90007586:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
90007588:	462a      	mov	r2, r5
}
9000758a:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
9000758c:	f7ff bf1c 	b.w	900073c8 <USBH_CtlReq>

90007590 <USBH_Get_DevDesc>:
{
90007590:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((status = USBH_GetDescriptor(phost,
90007592:	f500 7307 	add.w	r3, r0, #540	; 0x21c
90007596:	460d      	mov	r5, r1
90007598:	9100      	str	r1, [sp, #0]
9000759a:	f44f 7280 	mov.w	r2, #256	; 0x100
9000759e:	2100      	movs	r1, #0
{
900075a0:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
900075a2:	f7ff ffd9 	bl	90007558 <USBH_GetDescriptor>
900075a6:	bbc8      	cbnz	r0, 9000761c <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
900075a8:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
  if (length > 8U)
900075ac:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
900075ae:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
900075b2:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
900075b6:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
  dev_desc->bcdUSB             = LE16(buf +  2);
900075ba:	f8b4 321e 	ldrh.w	r3, [r4, #542]	; 0x21e
900075be:	f8a4 3428 	strh.w	r3, [r4, #1064]	; 0x428
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
900075c2:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
900075c6:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
900075ca:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
900075ce:	f884 342b 	strb.w	r3, [r4, #1067]	; 0x42b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
900075d2:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
900075d6:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
900075da:	f894 3223 	ldrb.w	r3, [r4, #547]	; 0x223
900075de:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
  if (length > 8U)
900075e2:	d91b      	bls.n	9000761c <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16(buf +  8);
900075e4:	f8b4 3224 	ldrh.w	r3, [r4, #548]	; 0x224
900075e8:	f8a4 342e 	strh.w	r3, [r4, #1070]	; 0x42e
    dev_desc->idProduct          = LE16(buf + 10);
900075ec:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
900075f0:	f8a4 3430 	strh.w	r3, [r4, #1072]	; 0x430
    dev_desc->bcdDevice          = LE16(buf + 12);
900075f4:	f8b4 3228 	ldrh.w	r3, [r4, #552]	; 0x228
900075f8:	f8a4 3432 	strh.w	r3, [r4, #1074]	; 0x432
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
900075fc:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
90007600:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
90007604:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
90007608:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
9000760c:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
90007610:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
90007614:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
90007618:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
}
9000761c:	b003      	add	sp, #12
9000761e:	bd30      	pop	{r4, r5, pc}

90007620 <USBH_Get_CfgDesc>:
{
90007620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;;
90007622:	f100 051c 	add.w	r5, r0, #28
{
90007626:	460e      	mov	r6, r1
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
90007628:	9100      	str	r1, [sp, #0]
9000762a:	f44f 7200 	mov.w	r2, #512	; 0x200
9000762e:	462b      	mov	r3, r5
90007630:	2100      	movs	r1, #0
{
90007632:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
90007634:	f7ff ff90 	bl	90007558 <USBH_GetDescriptor>
90007638:	b9f0      	cbnz	r0, 90007678 <USBH_Get_CfgDesc+0x58>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
9000763a:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
9000763c:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16(buf + 2);
9000763e:	8be7      	ldrh	r7, [r4, #30]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
90007640:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
90007644:	7f63      	ldrb	r3, [r4, #29]
  cfg_desc->wTotalLength        = LE16(buf + 2);
90007646:	f8a4 743a 	strh.w	r7, [r4, #1082]	; 0x43a
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
9000764a:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
9000764e:	f894 3020 	ldrb.w	r3, [r4, #32]
90007652:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
90007656:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
9000765a:	f884 343d 	strb.w	r3, [r4, #1085]	; 0x43d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
9000765e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
90007662:	f884 343e 	strb.w	r3, [r4, #1086]	; 0x43e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
90007666:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
9000766a:	f884 343f 	strb.w	r3, [r4, #1087]	; 0x43f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
9000766e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
90007672:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
  if (length > USB_CONFIGURATION_DESC_SIZE)
90007676:	d854      	bhi.n	90007722 <USBH_Get_CfgDesc+0x102>
}
90007678:	b003      	add	sp, #12
9000767a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
9000767c:	782a      	ldrb	r2, [r5, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
9000767e:	4415      	add	r5, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90007680:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
90007682:	786a      	ldrb	r2, [r5, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90007684:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
90007686:	2a04      	cmp	r2, #4
90007688:	d123      	bne.n	900076d2 <USBH_Get_CfgDesc+0xb2>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
9000768a:	782a      	ldrb	r2, [r5, #0]
9000768c:	2601      	movs	r6, #1
9000768e:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
90007692:	786a      	ldrb	r2, [r5, #1]
90007694:	f884 2443 	strb.w	r2, [r4, #1091]	; 0x443
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
90007698:	78aa      	ldrb	r2, [r5, #2]
9000769a:	f884 2444 	strb.w	r2, [r4, #1092]	; 0x444
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
9000769e:	78ea      	ldrb	r2, [r5, #3]
900076a0:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
900076a4:	f895 c004 	ldrb.w	ip, [r5, #4]
900076a8:	f884 c446 	strb.w	ip, [r4, #1094]	; 0x446
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
900076ac:	796a      	ldrb	r2, [r5, #5]
900076ae:	f884 2447 	strb.w	r2, [r4, #1095]	; 0x447
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
900076b2:	79aa      	ldrb	r2, [r5, #6]
900076b4:	f884 2448 	strb.w	r2, [r4, #1096]	; 0x448
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
900076b8:	79ea      	ldrb	r2, [r5, #7]
900076ba:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
900076be:	7a2a      	ldrb	r2, [r5, #8]
900076c0:	f884 244a 	strb.w	r2, [r4, #1098]	; 0x44a
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
900076c4:	4561      	cmp	r1, ip
900076c6:	d201      	bcs.n	900076cc <USBH_Get_CfgDesc+0xac>
900076c8:	429f      	cmp	r7, r3
900076ca:	d805      	bhi.n	900076d8 <USBH_Get_CfgDesc+0xb8>
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
900076cc:	4631      	mov	r1, r6
900076ce:	2e00      	cmp	r6, #0
900076d0:	d1d2      	bne.n	90007678 <USBH_Get_CfgDesc+0x58>
900076d2:	429f      	cmp	r7, r3
900076d4:	d8d2      	bhi.n	9000767c <USBH_Get_CfgDesc+0x5c>
900076d6:	e7cf      	b.n	90007678 <USBH_Get_CfgDesc+0x58>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
900076d8:	782a      	ldrb	r2, [r5, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
900076da:	4415      	add	r5, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
900076dc:	4413      	add	r3, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
900076de:	786a      	ldrb	r2, [r5, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
900076e0:	b29b      	uxth	r3, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
900076e2:	2a05      	cmp	r2, #5
900076e4:	d1ee      	bne.n	900076c4 <USBH_Get_CfgDesc+0xa4>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
900076e6:	b20a      	sxth	r2, r1
900076e8:	f895 e000 	ldrb.w	lr, [r5]
            ep_ix++;
900076ec:	3101      	adds	r1, #1
900076ee:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
900076f2:	b2c9      	uxtb	r1, r1
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
900076f4:	f882 e44c 	strb.w	lr, [r2, #1100]	; 0x44c
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
900076f8:	f895 e001 	ldrb.w	lr, [r5, #1]
900076fc:	f882 e44d 	strb.w	lr, [r2, #1101]	; 0x44d
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
90007700:	f895 e002 	ldrb.w	lr, [r5, #2]
90007704:	f882 e44e 	strb.w	lr, [r2, #1102]	; 0x44e
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
90007708:	f895 e003 	ldrb.w	lr, [r5, #3]
9000770c:	f882 e44f 	strb.w	lr, [r2, #1103]	; 0x44f
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
90007710:	f8b5 e004 	ldrh.w	lr, [r5, #4]
90007714:	f8a2 e450 	strh.w	lr, [r2, #1104]	; 0x450
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
90007718:	f895 e006 	ldrb.w	lr, [r5, #6]
9000771c:	f882 e452 	strb.w	lr, [r2, #1106]	; 0x452
            ep_ix++;
90007720:	e7d0      	b.n	900076c4 <USBH_Get_CfgDesc+0xa4>
  uint8_t                      if_ix = 0U;
90007722:	4606      	mov	r6, r0
    ptr = USB_LEN_CFG_DESC;
90007724:	2309      	movs	r3, #9
90007726:	e7d1      	b.n	900076cc <USBH_Get_CfgDesc+0xac>

90007728 <USBH_Get_StringDesc>:
{
90007728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                   phost->device.Data, length)) == USBH_OK)
9000772a:	f500 7607 	add.w	r6, r0, #540	; 0x21c
{
9000772e:	4615      	mov	r5, r2
90007730:	461f      	mov	r7, r3
  if ((status = USBH_GetDescriptor(phost,
90007732:	f441 7240 	orr.w	r2, r1, #768	; 0x300
90007736:	9300      	str	r3, [sp, #0]
90007738:	2100      	movs	r1, #0
9000773a:	4633      	mov	r3, r6
{
9000773c:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
9000773e:	f7ff ff0b 	bl	90007558 <USBH_GetDescriptor>
90007742:	b978      	cbnz	r0, 90007764 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
90007744:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
90007748:	2b03      	cmp	r3, #3
9000774a:	d10b      	bne.n	90007764 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
9000774c:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
    for (idx = 0U; idx < strlength; idx += 2U)
90007750:	4604      	mov	r4, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
90007752:	3902      	subs	r1, #2
90007754:	42b9      	cmp	r1, r7
90007756:	bf28      	it	cs
90007758:	4639      	movcs	r1, r7
9000775a:	b289      	uxth	r1, r1
    for (idx = 0U; idx < strlength; idx += 2U)
9000775c:	42a1      	cmp	r1, r4
9000775e:	d803      	bhi.n	90007768 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
90007760:	2300      	movs	r3, #0
90007762:	702b      	strb	r3, [r5, #0]
}
90007764:	b003      	add	sp, #12
90007766:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
90007768:	1933      	adds	r3, r6, r4
    for (idx = 0U; idx < strlength; idx += 2U)
9000776a:	3402      	adds	r4, #2
      *pdest =  psrc[idx];
9000776c:	789b      	ldrb	r3, [r3, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
9000776e:	b2a4      	uxth	r4, r4
      *pdest =  psrc[idx];
90007770:	f805 3b01 	strb.w	r3, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
90007774:	e7f2      	b.n	9000775c <USBH_Get_StringDesc+0x34>

90007776 <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
90007776:	7883      	ldrb	r3, [r0, #2]
90007778:	2b01      	cmp	r3, #1
9000777a:	d105      	bne.n	90007788 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
9000777c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
90007780:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
90007782:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
90007784:	2300      	movs	r3, #0
90007786:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
90007788:	2200      	movs	r2, #0
9000778a:	4611      	mov	r1, r2
9000778c:	f7ff be1c 	b.w	900073c8 <USBH_CtlReq>

90007790 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
90007790:	7883      	ldrb	r3, [r0, #2]
90007792:	2b01      	cmp	r3, #1
90007794:	d105      	bne.n	900077a2 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
90007796:	f44f 6310 	mov.w	r3, #2304	; 0x900
    phost->Control.setup.b.wValue.w = cfg_idx;
9000779a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
9000779c:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
9000779e:	2300      	movs	r3, #0
900077a0:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
900077a2:	2200      	movs	r2, #0
900077a4:	4611      	mov	r1, r2
900077a6:	f7ff be0f 	b.w	900073c8 <USBH_CtlReq>

900077aa <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
900077aa:	7883      	ldrb	r3, [r0, #2]
900077ac:	2b01      	cmp	r3, #1
900077ae:	d105      	bne.n	900077bc <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
900077b0:	f44f 7340 	mov.w	r3, #768	; 0x300
    phost->Control.setup.b.wValue.w = wValue;
900077b4:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
900077b6:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
900077b8:	2300      	movs	r3, #0
900077ba:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
900077bc:	2200      	movs	r2, #0
900077be:	4611      	mov	r1, r2
900077c0:	f7ff be02 	b.w	900073c8 <USBH_CtlReq>

900077c4 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
900077c4:	7883      	ldrb	r3, [r0, #2]
900077c6:	2b01      	cmp	r3, #1
900077c8:	d105      	bne.n	900077d6 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
900077ca:	f44f 7381 	mov.w	r3, #258	; 0x102
    phost->Control.setup.b.wIndex.w = ep_num;
900077ce:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
900077d0:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
900077d2:	2300      	movs	r3, #0
900077d4:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
900077d6:	2200      	movs	r2, #0
900077d8:	4611      	mov	r1, r2
900077da:	f7ff bdf5 	b.w	900073c8 <USBH_CtlReq>

900077de <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
900077de:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
900077e0:	2400      	movs	r4, #0
{
900077e2:	460b      	mov	r3, r1
900077e4:	4611      	mov	r1, r2
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
900077e6:	2208      	movs	r2, #8
900077e8:	e9cd 4300 	strd	r4, r3, [sp]
900077ec:	e9cd 2402 	strd	r2, r4, [sp, #8]
900077f0:	4623      	mov	r3, r4
900077f2:	4622      	mov	r2, r4
900077f4:	f003 fa7f 	bl	9000acf6 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
900077f8:	4620      	mov	r0, r4
900077fa:	b004      	add	sp, #16
900077fc:	bd10      	pop	{r4, pc}

900077fe <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
900077fe:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
90007800:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
90007804:	b085      	sub	sp, #20
90007806:	460c      	mov	r4, r1
90007808:	4619      	mov	r1, r3
  {
    do_ping = 0U;
9000780a:	2d00      	cmp	r5, #0
{
9000780c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007810:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
90007812:	bf18      	it	ne
90007814:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007816:	e9cd 2302 	strd	r2, r3, [sp, #8]
9000781a:	2301      	movs	r3, #1
9000781c:	9300      	str	r3, [sp, #0]
9000781e:	2300      	movs	r3, #0
90007820:	461a      	mov	r2, r3
90007822:	f003 fa68 	bl	9000acf6 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
90007826:	2000      	movs	r0, #0
90007828:	b005      	add	sp, #20
9000782a:	bd30      	pop	{r4, r5, pc}

9000782c <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
9000782c:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
9000782e:	2400      	movs	r4, #0
{
90007830:	b085      	sub	sp, #20
90007832:	460d      	mov	r5, r1
90007834:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007836:	4623      	mov	r3, r4
90007838:	9501      	str	r5, [sp, #4]
9000783a:	e9cd 2402 	strd	r2, r4, [sp, #8]
9000783e:	2201      	movs	r2, #1
90007840:	9200      	str	r2, [sp, #0]
90007842:	f003 fa58 	bl	9000acf6 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
90007846:	4620      	mov	r0, r4
90007848:	b005      	add	sp, #20
9000784a:	bd30      	pop	{r4, r5, pc}

9000784c <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
9000784c:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
9000784e:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
90007852:	b085      	sub	sp, #20
90007854:	460c      	mov	r4, r1
90007856:	4619      	mov	r1, r3
  {
    do_ping = 0U;
90007858:	2d00      	cmp	r5, #0
{
9000785a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
9000785e:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
90007860:	bf18      	it	ne
90007862:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007864:	e9cd 2302 	strd	r2, r3, [sp, #8]
90007868:	2301      	movs	r3, #1
9000786a:	2200      	movs	r2, #0
9000786c:	9300      	str	r3, [sp, #0]
9000786e:	2302      	movs	r3, #2
90007870:	f003 fa41 	bl	9000acf6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
90007874:	2000      	movs	r0, #0
90007876:	b005      	add	sp, #20
90007878:	bd30      	pop	{r4, r5, pc}

9000787a <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
9000787a:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
9000787c:	2400      	movs	r4, #0
{
9000787e:	b085      	sub	sp, #20
90007880:	460d      	mov	r5, r1
90007882:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007884:	2302      	movs	r3, #2
90007886:	9501      	str	r5, [sp, #4]
90007888:	e9cd 2402 	strd	r2, r4, [sp, #8]
9000788c:	2201      	movs	r2, #1
9000788e:	9200      	str	r2, [sp, #0]
90007890:	f003 fa31 	bl	9000acf6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
90007894:	4620      	mov	r0, r4
90007896:	b005      	add	sp, #20
90007898:	bd30      	pop	{r4, r5, pc}

9000789a <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
9000789a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
9000789c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
900078a0:	9402      	str	r4, [sp, #8]
900078a2:	f89d 401c 	ldrb.w	r4, [sp, #28]
900078a6:	9401      	str	r4, [sp, #4]
900078a8:	f89d 4018 	ldrb.w	r4, [sp, #24]
900078ac:	9400      	str	r4, [sp, #0]
900078ae:	f003 fa0a 	bl	9000acc6 <USBH_LL_OpenPipe>

  return USBH_OK;
}
900078b2:	2000      	movs	r0, #0
900078b4:	b004      	add	sp, #16
900078b6:	bd10      	pop	{r4, pc}

900078b8 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
900078b8:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
900078ba:	f003 fa15 	bl	9000ace8 <USBH_LL_ClosePipe>

  return USBH_OK;
}
900078be:	2000      	movs	r0, #0
900078c0:	bd08      	pop	{r3, pc}

900078c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
900078c2:	b530      	push	{r4, r5, lr}
900078c4:	2300      	movs	r3, #0
900078c6:	f200 446c 	addw	r4, r0, #1132	; 0x46c
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
900078ca:	f854 5f04 	ldr.w	r5, [r4, #4]!
900078ce:	b2da      	uxtb	r2, r3
900078d0:	042d      	lsls	r5, r5, #16
900078d2:	d408      	bmi.n	900078e6 <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
900078d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
900078d8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
900078dc:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
900078de:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
900078e2:	b2d0      	uxtb	r0, r2
900078e4:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U ; idx < 11U ; idx++)
900078e6:	3301      	adds	r3, #1
900078e8:	2b0b      	cmp	r3, #11
900078ea:	d1ee      	bne.n	900078ca <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
900078ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
900078f0:	e7f7      	b.n	900078e2 <USBH_AllocPipe+0x20>

900078f2 <USBH_FreePipe>:
  if (idx < 11U)
900078f2:	290a      	cmp	r1, #10
    phost->Pipes[idx] &= 0x7FFFU;
900078f4:	bf9f      	itttt	ls
900078f6:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
900078fa:	f8d0 3470 	ldrls.w	r3, [r0, #1136]	; 0x470
900078fe:	f3c3 030e 	ubfxls	r3, r3, #0, #15
90007902:	f8c0 3470 	strls.w	r3, [r0, #1136]	; 0x470
}
90007906:	2000      	movs	r0, #0
90007908:	4770      	bx	lr
	...

9000790c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
9000790c:	4b03      	ldr	r3, [pc, #12]	; (9000791c <disk_status+0x10>)
9000790e:	181a      	adds	r2, r3, r0
90007910:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90007914:	6843      	ldr	r3, [r0, #4]
90007916:	7b10      	ldrb	r0, [r2, #12]
90007918:	685b      	ldr	r3, [r3, #4]
9000791a:	4718      	bx	r3
9000791c:	200007a0 	.word	0x200007a0

90007920 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
90007920:	4b06      	ldr	r3, [pc, #24]	; (9000793c <disk_initialize+0x1c>)
90007922:	5c1a      	ldrb	r2, [r3, r0]
90007924:	b942      	cbnz	r2, 90007938 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
90007926:	2201      	movs	r2, #1
90007928:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
9000792a:	181a      	adds	r2, r3, r0
9000792c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90007930:	6843      	ldr	r3, [r0, #4]
90007932:	7b10      	ldrb	r0, [r2, #12]
90007934:	681b      	ldr	r3, [r3, #0]
90007936:	4718      	bx	r3
  }
  return stat;
}
90007938:	2000      	movs	r0, #0
9000793a:	4770      	bx	lr
9000793c:	200007a0 	.word	0x200007a0

90007940 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
90007940:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
90007942:	4c05      	ldr	r4, [pc, #20]	; (90007958 <disk_read+0x18>)
90007944:	1825      	adds	r5, r4, r0
90007946:	eb04 0080 	add.w	r0, r4, r0, lsl #2
9000794a:	6840      	ldr	r0, [r0, #4]
9000794c:	6884      	ldr	r4, [r0, #8]
9000794e:	7b28      	ldrb	r0, [r5, #12]
90007950:	46a4      	mov	ip, r4
  return res;
}
90007952:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
90007954:	4760      	bx	ip
90007956:	bf00      	nop
90007958:	200007a0 	.word	0x200007a0

9000795c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
9000795c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
9000795e:	4c05      	ldr	r4, [pc, #20]	; (90007974 <disk_write+0x18>)
90007960:	1825      	adds	r5, r4, r0
90007962:	eb04 0080 	add.w	r0, r4, r0, lsl #2
90007966:	6840      	ldr	r0, [r0, #4]
90007968:	68c4      	ldr	r4, [r0, #12]
9000796a:	7b28      	ldrb	r0, [r5, #12]
9000796c:	46a4      	mov	ip, r4
  return res;
}
9000796e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
90007970:	4760      	bx	ip
90007972:	bf00      	nop
90007974:	200007a0 	.word	0x200007a0

90007978 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
90007978:	4b05      	ldr	r3, [pc, #20]	; (90007990 <disk_ioctl+0x18>)
{
9000797a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
9000797c:	181c      	adds	r4, r3, r0
9000797e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90007982:	6843      	ldr	r3, [r0, #4]
90007984:	7b20      	ldrb	r0, [r4, #12]
90007986:	691b      	ldr	r3, [r3, #16]
  return res;
}
90007988:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
9000798c:	4718      	bx	r3
9000798e:	bf00      	nop
90007990:	200007a0 	.word	0x200007a0

90007994 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
90007994:	2000      	movs	r0, #0
90007996:	4770      	bx	lr

90007998 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
90007998:	6800      	ldr	r0, [r0, #0]
9000799a:	4770      	bx	lr

9000799c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
9000799c:	0a0b      	lsrs	r3, r1, #8
9000799e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
900079a0:	7043      	strb	r3, [r0, #1]
900079a2:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
900079a4:	0e09      	lsrs	r1, r1, #24
900079a6:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
900079a8:	70c1      	strb	r1, [r0, #3]
}
900079aa:	4770      	bx	lr

900079ac <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
900079ac:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
900079ae:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
900079b2:	4290      	cmp	r0, r2
900079b4:	d1fb      	bne.n	900079ae <mem_set+0x2>
}
900079b6:	4770      	bx	lr

900079b8 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
900079b8:	4a1b      	ldr	r2, [pc, #108]	; (90007a28 <chk_lock+0x70>)
900079ba:	6813      	ldr	r3, [r2, #0]
{
900079bc:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
900079be:	b163      	cbz	r3, 900079da <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
900079c0:	6804      	ldr	r4, [r0, #0]
900079c2:	42a3      	cmp	r3, r4
900079c4:	d107      	bne.n	900079d6 <chk_lock+0x1e>
900079c6:	6884      	ldr	r4, [r0, #8]
900079c8:	6853      	ldr	r3, [r2, #4]
900079ca:	429c      	cmp	r4, r3
900079cc:	d103      	bne.n	900079d6 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
900079ce:	6894      	ldr	r4, [r2, #8]
900079d0:	6943      	ldr	r3, [r0, #20]
900079d2:	429c      	cmp	r4, r3
900079d4:	d020      	beq.n	90007a18 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
900079d6:	2400      	movs	r4, #0
900079d8:	e000      	b.n	900079dc <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
900079da:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
900079dc:	6913      	ldr	r3, [r2, #16]
900079de:	b1cb      	cbz	r3, 90007a14 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
900079e0:	6805      	ldr	r5, [r0, #0]
900079e2:	42ab      	cmp	r3, r5
900079e4:	d107      	bne.n	900079f6 <chk_lock+0x3e>
900079e6:	6955      	ldr	r5, [r2, #20]
900079e8:	6883      	ldr	r3, [r0, #8]
900079ea:	429d      	cmp	r5, r3
900079ec:	d103      	bne.n	900079f6 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
900079ee:	6995      	ldr	r5, [r2, #24]
900079f0:	6943      	ldr	r3, [r0, #20]
900079f2:	429d      	cmp	r5, r3
900079f4:	d015      	beq.n	90007a22 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
900079f6:	b96c      	cbnz	r4, 90007a14 <chk_lock+0x5c>
900079f8:	2902      	cmp	r1, #2
900079fa:	bf0c      	ite	eq
900079fc:	2000      	moveq	r0, #0
900079fe:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
90007a00:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
90007a02:	eb02 1303 	add.w	r3, r2, r3, lsl #4
90007a06:	8998      	ldrh	r0, [r3, #12]
90007a08:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
90007a0c:	4258      	negs	r0, r3
90007a0e:	4158      	adcs	r0, r3
90007a10:	0100      	lsls	r0, r0, #4
90007a12:	e7f5      	b.n	90007a00 <chk_lock+0x48>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
90007a14:	2000      	movs	r0, #0
90007a16:	e7f3      	b.n	90007a00 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
90007a18:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
90007a1a:	2900      	cmp	r1, #0
90007a1c:	d0f1      	beq.n	90007a02 <chk_lock+0x4a>
90007a1e:	2010      	movs	r0, #16
90007a20:	e7ee      	b.n	90007a00 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
90007a22:	2301      	movs	r3, #1
90007a24:	e7f9      	b.n	90007a1a <chk_lock+0x62>
90007a26:	bf00      	nop
90007a28:	20000774 	.word	0x20000774

90007a2c <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
90007a2c:	4a1f      	ldr	r2, [pc, #124]	; (90007aac <inc_lock+0x80>)
{
90007a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
90007a30:	6813      	ldr	r3, [r2, #0]
90007a32:	6806      	ldr	r6, [r0, #0]
90007a34:	429e      	cmp	r6, r3
90007a36:	d107      	bne.n	90007a48 <inc_lock+0x1c>
90007a38:	6885      	ldr	r5, [r0, #8]
90007a3a:	6854      	ldr	r4, [r2, #4]
90007a3c:	42a5      	cmp	r5, r4
90007a3e:	d103      	bne.n	90007a48 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
90007a40:	6895      	ldr	r5, [r2, #8]
90007a42:	6944      	ldr	r4, [r0, #20]
90007a44:	42a5      	cmp	r5, r4
90007a46:	d022      	beq.n	90007a8e <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
90007a48:	6914      	ldr	r4, [r2, #16]
90007a4a:	42b4      	cmp	r4, r6
90007a4c:	d107      	bne.n	90007a5e <inc_lock+0x32>
90007a4e:	6957      	ldr	r7, [r2, #20]
90007a50:	6885      	ldr	r5, [r0, #8]
90007a52:	42af      	cmp	r7, r5
90007a54:	d103      	bne.n	90007a5e <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
90007a56:	6997      	ldr	r7, [r2, #24]
90007a58:	6945      	ldr	r5, [r0, #20]
90007a5a:	42af      	cmp	r7, r5
90007a5c:	d021      	beq.n	90007aa2 <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
90007a5e:	b10b      	cbz	r3, 90007a64 <inc_lock+0x38>
90007a60:	bb0c      	cbnz	r4, 90007aa6 <inc_lock+0x7a>
90007a62:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
90007a64:	011d      	lsls	r5, r3, #4
90007a66:	eb02 1403 	add.w	r4, r2, r3, lsl #4
90007a6a:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
90007a6c:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
90007a6e:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
90007a70:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
90007a72:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
90007a74:	2000      	movs	r0, #0
90007a76:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
90007a78:	b981      	cbnz	r1, 90007a9c <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
90007a7a:	eb02 1103 	add.w	r1, r2, r3, lsl #4
90007a7e:	8989      	ldrh	r1, [r1, #12]
90007a80:	3101      	adds	r1, #1
90007a82:	b289      	uxth	r1, r1
90007a84:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
90007a88:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
90007a8a:	8191      	strh	r1, [r2, #12]
}
90007a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
90007a8e:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
90007a90:	eb02 1003 	add.w	r0, r2, r3, lsl #4
90007a94:	8980      	ldrh	r0, [r0, #12]
90007a96:	2900      	cmp	r1, #0
90007a98:	d0ef      	beq.n	90007a7a <inc_lock+0x4e>
90007a9a:	b920      	cbnz	r0, 90007aa6 <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
90007a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
90007aa0:	e7f0      	b.n	90007a84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
90007aa2:	2301      	movs	r3, #1
90007aa4:	e7f4      	b.n	90007a90 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
90007aa6:	2000      	movs	r0, #0
90007aa8:	e7f0      	b.n	90007a8c <inc_lock+0x60>
90007aaa:	bf00      	nop
90007aac:	20000774 	.word	0x20000774

90007ab0 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
90007ab0:	3801      	subs	r0, #1
90007ab2:	2801      	cmp	r0, #1
90007ab4:	d815      	bhi.n	90007ae2 <dec_lock+0x32>
		n = Files[i].ctr;
90007ab6:	4a0c      	ldr	r2, [pc, #48]	; (90007ae8 <dec_lock+0x38>)
90007ab8:	0101      	lsls	r1, r0, #4
90007aba:	eb02 1000 	add.w	r0, r2, r0, lsl #4
90007abe:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
90007ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90007ac4:	d104      	bne.n	90007ad0 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
90007ac6:	2300      	movs	r3, #0
90007ac8:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
90007aca:	2000      	movs	r0, #0
90007acc:	5050      	str	r0, [r2, r1]
90007ace:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
90007ad0:	2b00      	cmp	r3, #0
90007ad2:	d0fa      	beq.n	90007aca <dec_lock+0x1a>
90007ad4:	3b01      	subs	r3, #1
90007ad6:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
90007ad8:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
90007ada:	2b00      	cmp	r3, #0
90007adc:	d0f5      	beq.n	90007aca <dec_lock+0x1a>
		res = FR_OK;
90007ade:	2000      	movs	r0, #0
90007ae0:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
90007ae2:	2002      	movs	r0, #2
	}
	return res;
}
90007ae4:	4770      	bx	lr
90007ae6:	bf00      	nop
90007ae8:	20000774 	.word	0x20000774

90007aec <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
90007aec:	4b05      	ldr	r3, [pc, #20]	; (90007b04 <clear_lock+0x18>)
90007aee:	681a      	ldr	r2, [r3, #0]
90007af0:	4290      	cmp	r0, r2
90007af2:	bf04      	itt	eq
90007af4:	2200      	moveq	r2, #0
90007af6:	601a      	streq	r2, [r3, #0]
90007af8:	691a      	ldr	r2, [r3, #16]
90007afa:	4290      	cmp	r0, r2
90007afc:	bf04      	itt	eq
90007afe:	2200      	moveq	r2, #0
90007b00:	611a      	streq	r2, [r3, #16]
	}
}
90007b02:	4770      	bx	lr
90007b04:	20000774 	.word	0x20000774

90007b08 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
90007b08:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
90007b0a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
90007b0c:	3b02      	subs	r3, #2
90007b0e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
90007b10:	bf83      	ittte	hi
90007b12:	8943      	ldrhhi	r3, [r0, #10]
90007b14:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
90007b16:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
90007b1a:	2000      	movls	r0, #0
}
90007b1c:	4770      	bx	lr

90007b1e <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
90007b1e:	6802      	ldr	r2, [r0, #0]
90007b20:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
90007b22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
90007b24:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
90007b26:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
90007b28:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
90007b2c:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
90007b2e:	b130      	cbz	r0, 90007b3e <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
90007b30:	4281      	cmp	r1, r0
90007b32:	d302      	bcc.n	90007b3a <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
90007b34:	1a09      	subs	r1, r1, r0
90007b36:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
90007b38:	e7f8      	b.n	90007b2c <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
90007b3a:	6858      	ldr	r0, [r3, #4]
90007b3c:	4408      	add	r0, r1
}
90007b3e:	4770      	bx	lr

90007b40 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
90007b40:	f3c2 2307 	ubfx	r3, r2, #8, #8
90007b44:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
90007b46:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
90007b48:	7803      	ldrb	r3, [r0, #0]
90007b4a:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
90007b4c:	bf01      	itttt	eq
90007b4e:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
90007b50:	750a      	strbeq	r2, [r1, #20]
90007b52:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
90007b54:	754a      	strbeq	r2, [r1, #21]
	}
}
90007b56:	4770      	bx	lr

90007b58 <sum_sfn>:
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
90007b58:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
90007b5c:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
90007b5e:	01d3      	lsls	r3, r2, #7
90007b60:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
90007b64:	f810 2b01 	ldrb.w	r2, [r0], #1
90007b68:	fa52 f383 	uxtab	r3, r2, r3
	} while (--n);
90007b6c:	4288      	cmp	r0, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
90007b6e:	b2da      	uxtb	r2, r3
	} while (--n);
90007b70:	d1f5      	bne.n	90007b5e <sum_sfn+0x6>
	return sum;
}
90007b72:	4610      	mov	r0, r2
90007b74:	4770      	bx	lr

90007b76 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
90007b76:	6803      	ldr	r3, [r0, #0]
{
90007b78:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
90007b7a:	b153      	cbz	r3, 90007b92 <get_ldnumber+0x1c>
90007b7c:	4619      	mov	r1, r3
90007b7e:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
90007b80:	f811 4b01 	ldrb.w	r4, [r1], #1
90007b84:	2c1f      	cmp	r4, #31
90007b86:	d910      	bls.n	90007baa <get_ldnumber+0x34>
90007b88:	2c3a      	cmp	r4, #58	; 0x3a
90007b8a:	d1f8      	bne.n	90007b7e <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
90007b8c:	1c59      	adds	r1, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
90007b8e:	428a      	cmp	r2, r1
90007b90:	d002      	beq.n	90007b98 <get_ldnumber+0x22>
	int vol = -1;
90007b92:	f04f 33ff 	mov.w	r3, #4294967295
90007b96:	e006      	b.n	90007ba6 <get_ldnumber+0x30>
			i = *tp++ - '0';
90007b98:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
90007b9a:	3b30      	subs	r3, #48	; 0x30
90007b9c:	b2d9      	uxtb	r1, r3
90007b9e:	2901      	cmp	r1, #1
90007ba0:	d8f7      	bhi.n	90007b92 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
90007ba2:	3201      	adds	r2, #1
90007ba4:	6002      	str	r2, [r0, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
90007ba6:	4618      	mov	r0, r3
90007ba8:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
90007baa:	2300      	movs	r3, #0
90007bac:	e7fb      	b.n	90007ba6 <get_ldnumber+0x30>

90007bae <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
90007bae:	b538      	push	{r3, r4, r5, lr}
90007bb0:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
90007bb2:	4604      	mov	r4, r0
90007bb4:	b918      	cbnz	r0, 90007bbe <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
90007bb6:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
90007bb8:	2300      	movs	r3, #0
90007bba:	602b      	str	r3, [r5, #0]
	return res;
}
90007bbc:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
90007bbe:	6803      	ldr	r3, [r0, #0]
90007bc0:	2b00      	cmp	r3, #0
90007bc2:	d0f8      	beq.n	90007bb6 <validate+0x8>
90007bc4:	781a      	ldrb	r2, [r3, #0]
90007bc6:	2a00      	cmp	r2, #0
90007bc8:	d0f5      	beq.n	90007bb6 <validate+0x8>
90007bca:	8881      	ldrh	r1, [r0, #4]
90007bcc:	88da      	ldrh	r2, [r3, #6]
90007bce:	4291      	cmp	r1, r2
90007bd0:	d1f1      	bne.n	90007bb6 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
90007bd2:	7858      	ldrb	r0, [r3, #1]
90007bd4:	f7ff fe9a 	bl	9000790c <disk_status>
90007bd8:	f010 0001 	ands.w	r0, r0, #1
90007bdc:	d1eb      	bne.n	90007bb6 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
90007bde:	6823      	ldr	r3, [r4, #0]
90007be0:	e7eb      	b.n	90007bba <validate+0xc>

90007be2 <get_fileinfo>:
{
90007be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
90007be6:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
90007be8:	f8d0 8000 	ldr.w	r8, [r0]
{
90007bec:	4606      	mov	r6, r0
90007bee:	460c      	mov	r4, r1
	fno->fname[0] = 0;		/* Invaidate file info */
90007bf0:	758d      	strb	r5, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
90007bf2:	69c3      	ldr	r3, [r0, #28]
90007bf4:	2b00      	cmp	r3, #0
90007bf6:	d059      	beq.n	90007cac <get_fileinfo+0xca>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
90007bf8:	6b03      	ldr	r3, [r0, #48]	; 0x30
90007bfa:	3301      	adds	r3, #1
90007bfc:	d00a      	beq.n	90007c14 <get_fileinfo+0x32>
90007bfe:	f101 0715 	add.w	r7, r1, #21
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
90007c02:	f8d8 300c 	ldr.w	r3, [r8, #12]
90007c06:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
90007c0a:	2800      	cmp	r0, #0
90007c0c:	d150      	bne.n	90007cb0 <get_fileinfo+0xce>
			fno->fname[i] = 0;	/* Terminate the LFN */
90007c0e:	4425      	add	r5, r4
90007c10:	2300      	movs	r3, #0
90007c12:	75ab      	strb	r3, [r5, #22]
		c = (TCHAR)dp->dir[i++];
90007c14:	6a31      	ldr	r1, [r6, #32]
	i = j = 0;
90007c16:	2300      	movs	r3, #0
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
90007c18:	7da5      	ldrb	r5, [r4, #22]
			fno->altname[j++] = '.';
90007c1a:	272e      	movs	r7, #46	; 0x2e
90007c1c:	1e4e      	subs	r6, r1, #1
	i = j = 0;
90007c1e:	4618      	mov	r0, r3
		c = (TCHAR)dp->dir[i++];
90007c20:	f816 2f01 	ldrb.w	r2, [r6, #1]!
90007c24:	3001      	adds	r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
90007c26:	2a20      	cmp	r2, #32
90007c28:	d026      	beq.n	90007c78 <get_fileinfo+0x96>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
90007c2a:	2a05      	cmp	r2, #5
90007c2c:	bf08      	it	eq
90007c2e:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
90007c30:	2809      	cmp	r0, #9
90007c32:	d107      	bne.n	90007c44 <get_fileinfo+0x62>
			if (!lfv) fno->fname[j] = '.';
90007c34:	eb04 0c03 	add.w	ip, r4, r3
90007c38:	b90d      	cbnz	r5, 90007c3e <get_fileinfo+0x5c>
90007c3a:	f88c 7016 	strb.w	r7, [ip, #22]
			fno->altname[j++] = '.';
90007c3e:	3301      	adds	r3, #1
90007c40:	f88c 7009 	strb.w	r7, [ip, #9]
		fno->altname[j] = c;
90007c44:	eb04 0c03 	add.w	ip, r4, r3
90007c48:	f88c 2009 	strb.w	r2, [ip, #9]
		if (!lfv) {
90007c4c:	b99d      	cbnz	r5, 90007c76 <get_fileinfo+0x94>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
90007c4e:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
90007c52:	f1be 0f19 	cmp.w	lr, #25
90007c56:	d80c      	bhi.n	90007c72 <get_fileinfo+0x90>
90007c58:	2808      	cmp	r0, #8
90007c5a:	f891 800c 	ldrb.w	r8, [r1, #12]
90007c5e:	bf8c      	ite	hi
90007c60:	f04f 0e10 	movhi.w	lr, #16
90007c64:	f04f 0e08 	movls.w	lr, #8
90007c68:	ea18 0f0e 	tst.w	r8, lr
				c += 0x20;			/* To lower */
90007c6c:	bf1c      	itt	ne
90007c6e:	3220      	addne	r2, #32
90007c70:	b2d2      	uxtbne	r2, r2
			fno->fname[j] = c;
90007c72:	f88c 2016 	strb.w	r2, [ip, #22]
		j++;
90007c76:	3301      	adds	r3, #1
	while (i < 11) {		/* Copy name body and extension */
90007c78:	280b      	cmp	r0, #11
90007c7a:	d1d1      	bne.n	90007c20 <get_fileinfo+0x3e>
	if (!lfv) {
90007c7c:	b92d      	cbnz	r5, 90007c8a <get_fileinfo+0xa8>
		fno->fname[j] = 0;
90007c7e:	18e2      	adds	r2, r4, r3
90007c80:	7595      	strb	r5, [r2, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
90007c82:	7b0a      	ldrb	r2, [r1, #12]
90007c84:	2a00      	cmp	r2, #0
90007c86:	bf08      	it	eq
90007c88:	2300      	moveq	r3, #0
	fno->altname[j] = 0;	/* Terminate the SFN */
90007c8a:	4423      	add	r3, r4
90007c8c:	2200      	movs	r2, #0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
90007c8e:	f101 001c 	add.w	r0, r1, #28
	fno->altname[j] = 0;	/* Terminate the SFN */
90007c92:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
90007c94:	7acb      	ldrb	r3, [r1, #11]
90007c96:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
90007c98:	f7ff fe7e 	bl	90007998 <ld_dword>
90007c9c:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
90007c9e:	f101 0016 	add.w	r0, r1, #22
90007ca2:	f7ff fe79 	bl	90007998 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
90007ca6:	80e0      	strh	r0, [r4, #6]
90007ca8:	0c00      	lsrs	r0, r0, #16
90007caa:	80a0      	strh	r0, [r4, #4]
}
90007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				w = ff_convert(w, 0);		/* Unicode -> OEM */
90007cb0:	2100      	movs	r1, #0
90007cb2:	f001 fcd7 	bl	90009664 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
90007cb6:	b130      	cbz	r0, 90007cc6 <get_fileinfo+0xe4>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
90007cb8:	3501      	adds	r5, #1
90007cba:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90007cbe:	d002      	beq.n	90007cc6 <get_fileinfo+0xe4>
				fno->fname[i++] = (TCHAR)w;
90007cc0:	f807 0f01 	strb.w	r0, [r7, #1]!
90007cc4:	e79d      	b.n	90007c02 <get_fileinfo+0x20>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
90007cc6:	2500      	movs	r5, #0
90007cc8:	e7a1      	b.n	90007c0e <get_fileinfo+0x2c>

90007cca <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
90007cca:	3801      	subs	r0, #1
90007ccc:	440a      	add	r2, r1
			*d++ = *s++;
90007cce:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
90007cd2:	4291      	cmp	r1, r2
			*d++ = *s++;
90007cd4:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
90007cd8:	d1f9      	bne.n	90007cce <mem_cpy.part.0+0x4>
}
90007cda:	4770      	bx	lr

90007cdc <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
90007cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
90007ce0:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
90007ce2:	f100 0834 	add.w	r8, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
90007ce6:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
90007ce8:	2301      	movs	r3, #1
90007cea:	4632      	mov	r2, r6
90007cec:	4641      	mov	r1, r8
90007cee:	7840      	ldrb	r0, [r0, #1]
90007cf0:	f7ff fe34 	bl	9000795c <disk_write>
90007cf4:	4605      	mov	r5, r0
90007cf6:	b9a8      	cbnz	r0, 90007d24 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
90007cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
90007cfa:	69e2      	ldr	r2, [r4, #28]
90007cfc:	1af3      	subs	r3, r6, r3
			fs->wflag = 0;
90007cfe:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
90007d00:	4293      	cmp	r3, r2
90007d02:	d202      	bcs.n	90007d0a <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
90007d04:	78a7      	ldrb	r7, [r4, #2]
90007d06:	2f01      	cmp	r7, #1
90007d08:	d802      	bhi.n	90007d10 <sync_window.part.0+0x34>
}
90007d0a:	4628      	mov	r0, r5
90007d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
90007d10:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
90007d12:	4641      	mov	r1, r8
90007d14:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
90007d16:	3f01      	subs	r7, #1
					wsect += fs->fsize;
90007d18:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
90007d1a:	2301      	movs	r3, #1
90007d1c:	4632      	mov	r2, r6
90007d1e:	f7ff fe1d 	bl	9000795c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
90007d22:	e7f0      	b.n	90007d06 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
90007d24:	2501      	movs	r5, #1
90007d26:	e7f0      	b.n	90007d0a <sync_window.part.0+0x2e>

90007d28 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
90007d28:	78c3      	ldrb	r3, [r0, #3]
90007d2a:	b10b      	cbz	r3, 90007d30 <sync_window+0x8>
90007d2c:	f7ff bfd6 	b.w	90007cdc <sync_window.part.0>
}
90007d30:	4618      	mov	r0, r3
90007d32:	4770      	bx	lr

90007d34 <move_window>:
{
90007d34:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
90007d36:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
90007d38:	4605      	mov	r5, r0
90007d3a:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
90007d3c:	428b      	cmp	r3, r1
90007d3e:	d010      	beq.n	90007d62 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
90007d40:	f7ff fff2 	bl	90007d28 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
90007d44:	b960      	cbnz	r0, 90007d60 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
90007d46:	4622      	mov	r2, r4
90007d48:	2301      	movs	r3, #1
90007d4a:	f105 0134 	add.w	r1, r5, #52	; 0x34
90007d4e:	7868      	ldrb	r0, [r5, #1]
90007d50:	f7ff fdf6 	bl	90007940 <disk_read>
				res = FR_DISK_ERR;
90007d54:	2800      	cmp	r0, #0
90007d56:	bf1c      	itt	ne
90007d58:	f04f 34ff 	movne.w	r4, #4294967295
90007d5c:	2001      	movne	r0, #1
			fs->winsect = sector;
90007d5e:	632c      	str	r4, [r5, #48]	; 0x30
}
90007d60:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
90007d62:	2000      	movs	r0, #0
90007d64:	e7fc      	b.n	90007d60 <move_window+0x2c>
	...

90007d68 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
90007d68:	2300      	movs	r3, #0
{
90007d6a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
90007d6c:	70c3      	strb	r3, [r0, #3]
90007d6e:	f04f 33ff 	mov.w	r3, #4294967295
{
90007d72:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
90007d74:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
90007d76:	f7ff ffdd 	bl	90007d34 <move_window>
90007d7a:	4603      	mov	r3, r0
90007d7c:	bb18      	cbnz	r0, 90007dc6 <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
90007d7e:	f8b4 1232 	ldrh.w	r1, [r4, #562]	; 0x232
90007d82:	f64a 2255 	movw	r2, #43605	; 0xaa55
90007d86:	4291      	cmp	r1, r2
90007d88:	d11f      	bne.n	90007dca <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
90007d8a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
90007d8e:	2ae9      	cmp	r2, #233	; 0xe9
90007d90:	d005      	beq.n	90007d9e <check_fs+0x36>
90007d92:	6b62      	ldr	r2, [r4, #52]	; 0x34
90007d94:	490f      	ldr	r1, [pc, #60]	; (90007dd4 <check_fs+0x6c>)
90007d96:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90007d9a:	428a      	cmp	r2, r1
90007d9c:	d117      	bne.n	90007dce <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
90007d9e:	f104 006a 	add.w	r0, r4, #106	; 0x6a
90007da2:	4a0d      	ldr	r2, [pc, #52]	; (90007dd8 <check_fs+0x70>)
90007da4:	f7ff fdf8 	bl	90007998 <ld_dword>
90007da8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
90007dac:	4290      	cmp	r0, r2
90007dae:	d008      	beq.n	90007dc2 <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
90007db0:	4b0a      	ldr	r3, [pc, #40]	; (90007ddc <check_fs+0x74>)
90007db2:	f104 0086 	add.w	r0, r4, #134	; 0x86
90007db6:	f7ff fdef 	bl	90007998 <ld_dword>
90007dba:	1ac0      	subs	r0, r0, r3
90007dbc:	bf18      	it	ne
90007dbe:	2001      	movne	r0, #1
90007dc0:	0043      	lsls	r3, r0, #1
}
90007dc2:	4618      	mov	r0, r3
90007dc4:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
90007dc6:	2304      	movs	r3, #4
90007dc8:	e7fb      	b.n	90007dc2 <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
90007dca:	2303      	movs	r3, #3
90007dcc:	e7f9      	b.n	90007dc2 <check_fs+0x5a>
	return 2;
90007dce:	2302      	movs	r3, #2
90007dd0:	e7f7      	b.n	90007dc2 <check_fs+0x5a>
90007dd2:	bf00      	nop
90007dd4:	009000eb 	.word	0x009000eb
90007dd8:	00544146 	.word	0x00544146
90007ddc:	33544146 	.word	0x33544146

90007de0 <find_volume>:
{
90007de0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
90007de4:	2300      	movs	r3, #0
{
90007de6:	4688      	mov	r8, r1
90007de8:	4615      	mov	r5, r2
	*rfs = 0;
90007dea:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
90007dec:	f7ff fec3 	bl	90007b76 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
90007df0:	1e07      	subs	r7, r0, #0
90007df2:	f2c0 8116 	blt.w	90008022 <find_volume+0x242>
	fs = FatFs[vol];					/* Get pointer to the file system object */
90007df6:	4e8e      	ldr	r6, [pc, #568]	; (90008030 <find_volume+0x250>)
90007df8:	eb06 0387 	add.w	r3, r6, r7, lsl #2
90007dfc:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
90007dfe:	2c00      	cmp	r4, #0
90007e00:	f000 8111 	beq.w	90008026 <find_volume+0x246>
	*rfs = fs;							/* Return pointer to the file system object */
90007e04:	f8c8 4000 	str.w	r4, [r8]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
90007e08:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
90007e0c:	7823      	ldrb	r3, [r4, #0]
90007e0e:	b16b      	cbz	r3, 90007e2c <find_volume+0x4c>
		stat = disk_status(fs->drv);
90007e10:	7860      	ldrb	r0, [r4, #1]
90007e12:	f7ff fd7b 	bl	9000790c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
90007e16:	07c1      	lsls	r1, r0, #31
90007e18:	d408      	bmi.n	90007e2c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
90007e1a:	b11d      	cbz	r5, 90007e24 <find_volume+0x44>
90007e1c:	f010 0504 	ands.w	r5, r0, #4
90007e20:	d000      	beq.n	90007e24 <find_volume+0x44>
				return FR_WRITE_PROTECTED;
90007e22:	250a      	movs	r5, #10
}
90007e24:	4628      	mov	r0, r5
90007e26:	b004      	add	sp, #16
90007e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
90007e2c:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
90007e2e:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
90007e30:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
90007e32:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
90007e34:	f7ff fd74 	bl	90007920 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
90007e38:	07c2      	lsls	r2, r0, #31
90007e3a:	f100 80f6 	bmi.w	9000802a <find_volume+0x24a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
90007e3e:	b10d      	cbz	r5, 90007e44 <find_volume+0x64>
90007e40:	0743      	lsls	r3, r0, #29
90007e42:	d4ee      	bmi.n	90007e22 <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
90007e44:	2100      	movs	r1, #0
90007e46:	4620      	mov	r0, r4
90007e48:	f7ff ff8e 	bl	90007d68 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
90007e4c:	2802      	cmp	r0, #2
90007e4e:	f040 80ce 	bne.w	90007fee <find_volume+0x20e>
90007e52:	466d      	mov	r5, sp
90007e54:	f504 73fd 	add.w	r3, r4, #506	; 0x1fa
90007e58:	f204 213a 	addw	r1, r4, #570	; 0x23a
90007e5c:	462a      	mov	r2, r5
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
90007e5e:	f813 0c04 	ldrb.w	r0, [r3, #-4]
90007e62:	b110      	cbz	r0, 90007e6a <find_volume+0x8a>
90007e64:	4618      	mov	r0, r3
90007e66:	f7ff fd97 	bl	90007998 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
90007e6a:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
90007e6c:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
90007e70:	428b      	cmp	r3, r1
90007e72:	d1f4      	bne.n	90007e5e <find_volume+0x7e>
90007e74:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
90007e78:	f855 7b04 	ldr.w	r7, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
90007e7c:	2f00      	cmp	r7, #0
90007e7e:	f000 80ab 	beq.w	90007fd8 <find_volume+0x1f8>
90007e82:	4639      	mov	r1, r7
90007e84:	4620      	mov	r0, r4
90007e86:	f7ff ff6f 	bl	90007d68 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
90007e8a:	2801      	cmp	r0, #1
90007e8c:	f200 80a5 	bhi.w	90007fda <find_volume+0x1fa>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
90007e90:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
90007e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90007e98:	f040 80ad 	bne.w	90007ff6 <find_volume+0x216>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
90007e9c:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
90007ea0:	b921      	cbnz	r1, 90007eac <find_volume+0xcc>
90007ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
90007ea6:	f7ff fd77 	bl	90007998 <ld_dword>
90007eaa:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
90007eac:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
		fs->fsize = fasize;
90007eb0:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
90007eb2:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
90007eb4:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
90007eb6:	2b01      	cmp	r3, #1
90007eb8:	f200 809d 	bhi.w	90007ff6 <find_volume+0x216>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
90007ebc:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
90007ec0:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
90007ec2:	2d00      	cmp	r5, #0
90007ec4:	f000 8097 	beq.w	90007ff6 <find_volume+0x216>
90007ec8:	1e6b      	subs	r3, r5, #1
90007eca:	422b      	tst	r3, r5
90007ecc:	f040 8093 	bne.w	90007ff6 <find_volume+0x216>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
90007ed0:	f8b4 8045 	ldrh.w	r8, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
90007ed4:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
90007ed8:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
90007edc:	f040 808b 	bne.w	90007ff6 <find_volume+0x216>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
90007ee0:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
90007ee4:	b918      	cbnz	r0, 90007eee <find_volume+0x10e>
90007ee6:	f104 0054 	add.w	r0, r4, #84	; 0x54
90007eea:	f7ff fd55 	bl	90007998 <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
90007eee:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
90007ef2:	2b00      	cmp	r3, #0
90007ef4:	d07f      	beq.n	90007ff6 <find_volume+0x216>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
90007ef6:	fb01 fe02 	mul.w	lr, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
90007efa:	eb03 1c18 	add.w	ip, r3, r8, lsr #4
90007efe:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
90007f00:	4560      	cmp	r0, ip
90007f02:	d378      	bcc.n	90007ff6 <find_volume+0x216>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
90007f04:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
90007f08:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
90007f0a:	fbb0 f2f5 	udiv	r2, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
90007f0e:	d372      	bcc.n	90007ff6 <find_volume+0x216>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
90007f10:	f64f 70f5 	movw	r0, #65525	; 0xfff5
90007f14:	4282      	cmp	r2, r0
90007f16:	d872      	bhi.n	90007ffe <find_volume+0x21e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
90007f18:	f640 75f5 	movw	r5, #4085	; 0xff5
90007f1c:	42aa      	cmp	r2, r5
90007f1e:	bf8c      	ite	hi
90007f20:	2502      	movhi	r5, #2
90007f22:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
90007f24:	3202      	adds	r2, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
90007f26:	443b      	add	r3, r7
		fs->database = bsect + sysect;					/* Data start sector */
90007f28:	eb0c 0007 	add.w	r0, ip, r7
		if (fmt == FS_FAT32) {
90007f2c:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
90007f2e:	61a2      	str	r2, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
90007f30:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
90007f32:	6263      	str	r3, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
90007f34:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
90007f36:	d164      	bne.n	90008002 <find_volume+0x222>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
90007f38:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
90007f3c:	ea58 0303 	orrs.w	r3, r8, r3
90007f40:	d159      	bne.n	90007ff6 <find_volume+0x216>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
90007f42:	0092      	lsls	r2, r2, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
90007f44:	f104 0060 	add.w	r0, r4, #96	; 0x60
90007f48:	f7ff fd26 	bl	90007998 <ld_dword>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
90007f4c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
90007f50:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
90007f52:	ebb1 2f52 	cmp.w	r1, r2, lsr #9
90007f56:	d34e      	bcc.n	90007ff6 <find_volume+0x216>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
90007f58:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
90007f5c:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
90007f5e:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
90007f62:	f04f 0380 	mov.w	r3, #128	; 0x80
90007f66:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
90007f68:	d12b      	bne.n	90007fc2 <find_volume+0x1e2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
90007f6a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
90007f6e:	2b01      	cmp	r3, #1
90007f70:	d127      	bne.n	90007fc2 <find_volume+0x1e2>
			&& move_window(fs, bsect + 1) == FR_OK)
90007f72:	1c79      	adds	r1, r7, #1
90007f74:	4620      	mov	r0, r4
90007f76:	f7ff fedd 	bl	90007d34 <move_window>
90007f7a:	bb10      	cbnz	r0, 90007fc2 <find_volume+0x1e2>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
90007f7c:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
90007f80:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
90007f84:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
90007f86:	429a      	cmp	r2, r3
90007f88:	d11b      	bne.n	90007fc2 <find_volume+0x1e2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
90007f8a:	4b2a      	ldr	r3, [pc, #168]	; (90008034 <find_volume+0x254>)
90007f8c:	f104 0034 	add.w	r0, r4, #52	; 0x34
90007f90:	f7ff fd02 	bl	90007998 <ld_dword>
90007f94:	4298      	cmp	r0, r3
90007f96:	d114      	bne.n	90007fc2 <find_volume+0x1e2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
90007f98:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
90007f9c:	f504 7006 	add.w	r0, r4, #536	; 0x218
90007fa0:	f7ff fcfa 	bl	90007998 <ld_dword>
90007fa4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
90007fa8:	3320      	adds	r3, #32
90007faa:	4298      	cmp	r0, r3
90007fac:	d109      	bne.n	90007fc2 <find_volume+0x1e2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
90007fae:	f504 7007 	add.w	r0, r4, #540	; 0x21c
90007fb2:	f7ff fcf1 	bl	90007998 <ld_dword>
90007fb6:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
90007fb8:	f504 7008 	add.w	r0, r4, #544	; 0x220
90007fbc:	f7ff fcec 	bl	90007998 <ld_dword>
90007fc0:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
90007fc2:	8d33      	ldrh	r3, [r6, #40]	; 0x28
	clear_lock(fs);
90007fc4:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
90007fc6:	7025      	strb	r5, [r4, #0]
	return FR_OK;
90007fc8:	2500      	movs	r5, #0
	fs->id = ++Fsid;		/* File system mount ID */
90007fca:	3301      	adds	r3, #1
90007fcc:	b29b      	uxth	r3, r3
90007fce:	80e3      	strh	r3, [r4, #6]
90007fd0:	8533      	strh	r3, [r6, #40]	; 0x28
	clear_lock(fs);
90007fd2:	f7ff fd8b 	bl	90007aec <clear_lock>
	return FR_OK;
90007fd6:	e725      	b.n	90007e24 <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
90007fd8:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
90007fda:	f108 0801 	add.w	r8, r8, #1
90007fde:	f1b8 0f04 	cmp.w	r8, #4
90007fe2:	f47f af49 	bne.w	90007e78 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
90007fe6:	2804      	cmp	r0, #4
90007fe8:	d105      	bne.n	90007ff6 <find_volume+0x216>
90007fea:	2501      	movs	r5, #1
90007fec:	e71a      	b.n	90007e24 <find_volume+0x44>
90007fee:	2804      	cmp	r0, #4
90007ff0:	d0fb      	beq.n	90007fea <find_volume+0x20a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
90007ff2:	2801      	cmp	r0, #1
90007ff4:	d901      	bls.n	90007ffa <find_volume+0x21a>
90007ff6:	250d      	movs	r5, #13
90007ff8:	e714      	b.n	90007e24 <find_volume+0x44>
	bsect = 0;
90007ffa:	2700      	movs	r7, #0
90007ffc:	e748      	b.n	90007e90 <find_volume+0xb0>
		fmt = FS_FAT32;
90007ffe:	2503      	movs	r5, #3
90008000:	e790      	b.n	90007f24 <find_volume+0x144>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
90008002:	f1b8 0f00 	cmp.w	r8, #0
90008006:	d0f6      	beq.n	90007ff6 <find_volume+0x216>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
90008008:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
9000800a:	eb03 000e 	add.w	r0, r3, lr
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
9000800e:	ea4f 0342 	mov.w	r3, r2, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
90008012:	bf1b      	ittet	ne
90008014:	189b      	addne	r3, r3, r2
90008016:	f002 0201 	andne.w	r2, r2, #1
9000801a:	461a      	moveq	r2, r3
9000801c:	eb02 0253 	addne.w	r2, r2, r3, lsr #1
90008020:	e794      	b.n	90007f4c <find_volume+0x16c>
	if (vol < 0) return FR_INVALID_DRIVE;
90008022:	250b      	movs	r5, #11
90008024:	e6fe      	b.n	90007e24 <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
90008026:	250c      	movs	r5, #12
90008028:	e6fc      	b.n	90007e24 <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
9000802a:	2503      	movs	r5, #3
9000802c:	e6fa      	b.n	90007e24 <find_volume+0x44>
9000802e:	bf00      	nop
90008030:	20000774 	.word	0x20000774
90008034:	41615252 	.word	0x41615252

90008038 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
90008038:	2901      	cmp	r1, #1
{
9000803a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000803e:	4606      	mov	r6, r0
90008040:	460c      	mov	r4, r1
90008042:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
90008044:	d974      	bls.n	90008130 <put_fat+0xf8>
90008046:	6983      	ldr	r3, [r0, #24]
90008048:	428b      	cmp	r3, r1
9000804a:	d971      	bls.n	90008130 <put_fat+0xf8>
		switch (fs->fs_type) {
9000804c:	7803      	ldrb	r3, [r0, #0]
9000804e:	2b02      	cmp	r3, #2
90008050:	d040      	beq.n	900080d4 <put_fat+0x9c>
90008052:	2b03      	cmp	r3, #3
90008054:	d051      	beq.n	900080fa <put_fat+0xc2>
90008056:	2b01      	cmp	r3, #1
90008058:	d16a      	bne.n	90008130 <put_fat+0xf8>
			bc = (UINT)clst; bc += bc / 2;
9000805a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
9000805e:	6a41      	ldr	r1, [r0, #36]	; 0x24
90008060:	eb01 2158 	add.w	r1, r1, r8, lsr #9
90008064:	f7ff fe66 	bl	90007d34 <move_window>
90008068:	4605      	mov	r5, r0
			if (res != FR_OK) break;
9000806a:	bb40      	cbnz	r0, 900080be <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
9000806c:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
90008070:	f106 0934 	add.w	r9, r6, #52	; 0x34
90008074:	f108 0a01 	add.w	sl, r8, #1
90008078:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
9000807c:	bf18      	it	ne
9000807e:	013b      	lslne	r3, r7, #4
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
90008080:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
90008082:	bf17      	itett	ne
90008084:	f819 2008 	ldrbne.w	r2, [r9, r8]
90008088:	b2fb      	uxtbeq	r3, r7
9000808a:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
9000808e:	f002 020f 	andne.w	r2, r2, #15
90008092:	bf18      	it	ne
90008094:	4313      	orrne	r3, r2
90008096:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
9000809a:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
9000809c:	6a71      	ldr	r1, [r6, #36]	; 0x24
			fs->wflag = 1;
9000809e:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
900080a0:	eb01 215a 	add.w	r1, r1, sl, lsr #9
900080a4:	f7ff fe46 	bl	90007d34 <move_window>
			if (res != FR_OK) break;
900080a8:	4605      	mov	r5, r0
900080aa:	b940      	cbnz	r0, 900080be <put_fat+0x86>
			p = fs->win + bc % SS(fs);
900080ac:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
900080b0:	b144      	cbz	r4, 900080c4 <put_fat+0x8c>
900080b2:	f3c7 1707 	ubfx	r7, r7, #4, #8
900080b6:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
900080ba:	2301      	movs	r3, #1
900080bc:	70f3      	strb	r3, [r6, #3]
}
900080be:	4628      	mov	r0, r5
900080c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
900080c4:	f819 300a 	ldrb.w	r3, [r9, sl]
900080c8:	f3c7 2703 	ubfx	r7, r7, #8, #4
900080cc:	f023 030f 	bic.w	r3, r3, #15
900080d0:	431f      	orrs	r7, r3
900080d2:	e7f0      	b.n	900080b6 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
900080d4:	6a41      	ldr	r1, [r0, #36]	; 0x24
900080d6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
900080da:	f7ff fe2b 	bl	90007d34 <move_window>
			if (res != FR_OK) break;
900080de:	4605      	mov	r5, r0
900080e0:	2800      	cmp	r0, #0
900080e2:	d1ec      	bne.n	900080be <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
900080e4:	0064      	lsls	r4, r4, #1
900080e6:	f106 0334 	add.w	r3, r6, #52	; 0x34
900080ea:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
900080ee:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
900080f0:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
900080f2:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
900080f6:	7057      	strb	r7, [r2, #1]
			fs->wflag = 1;
900080f8:	e7df      	b.n	900080ba <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
900080fa:	6a41      	ldr	r1, [r0, #36]	; 0x24
900080fc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
90008100:	f7ff fe18 	bl	90007d34 <move_window>
			if (res != FR_OK) break;
90008104:	4605      	mov	r5, r0
90008106:	2800      	cmp	r0, #0
90008108:	d1d9      	bne.n	900080be <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
9000810a:	00a4      	lsls	r4, r4, #2
9000810c:	f106 0334 	add.w	r3, r6, #52	; 0x34
90008110:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
90008114:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
90008118:	4423      	add	r3, r4
9000811a:	4618      	mov	r0, r3
9000811c:	f7ff fc3c 	bl	90007998 <ld_dword>
90008120:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
90008124:	ea47 0100 	orr.w	r1, r7, r0
90008128:	4618      	mov	r0, r3
9000812a:	f7ff fc37 	bl	9000799c <st_dword>
9000812e:	e7c4      	b.n	900080ba <put_fat+0x82>
		switch (fs->fs_type) {
90008130:	2502      	movs	r5, #2
90008132:	e7c4      	b.n	900080be <put_fat+0x86>

90008134 <sync_fs>:
{
90008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90008136:	4604      	mov	r4, r0
	res = sync_window(fs);
90008138:	f7ff fdf6 	bl	90007d28 <sync_window>
9000813c:	4605      	mov	r5, r0
	if (res == FR_OK) {
9000813e:	2800      	cmp	r0, #0
90008140:	d142      	bne.n	900081c8 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
90008142:	7823      	ldrb	r3, [r4, #0]
90008144:	2b03      	cmp	r3, #3
90008146:	d137      	bne.n	900081b8 <sync_fs+0x84>
90008148:	7927      	ldrb	r7, [r4, #4]
9000814a:	2f01      	cmp	r7, #1
9000814c:	d134      	bne.n	900081b8 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
9000814e:	f104 0634 	add.w	r6, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
90008152:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
90008154:	4601      	mov	r1, r0
90008156:	f44f 7200 	mov.w	r2, #512	; 0x200
9000815a:	4630      	mov	r0, r6
9000815c:	f7ff fc26 	bl	900079ac <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
90008160:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
90008164:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
90008166:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
90008168:	2172      	movs	r1, #114	; 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
9000816a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
9000816e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
90008172:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
90008174:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
90008178:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
9000817c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
90008180:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
90008182:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
90008186:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
9000818a:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
9000818e:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
	*ptr++ = (BYTE)val; val >>= 8;
90008192:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
90008196:	6961      	ldr	r1, [r4, #20]
90008198:	f7ff fc00 	bl	9000799c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
9000819c:	6921      	ldr	r1, [r4, #16]
9000819e:	f504 7008 	add.w	r0, r4, #544	; 0x220
900081a2:	f7ff fbfb 	bl	9000799c <st_dword>
			fs->winsect = fs->volbase + 1;
900081a6:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
900081a8:	463b      	mov	r3, r7
900081aa:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
900081ac:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
900081ae:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
900081b0:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
900081b2:	f7ff fbd3 	bl	9000795c <disk_write>
			fs->fsi_flag = 0;
900081b6:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
900081b8:	2200      	movs	r2, #0
900081ba:	7860      	ldrb	r0, [r4, #1]
900081bc:	4611      	mov	r1, r2
900081be:	f7ff fbdb 	bl	90007978 <disk_ioctl>
900081c2:	3800      	subs	r0, #0
900081c4:	bf18      	it	ne
900081c6:	2001      	movne	r0, #1
}
900081c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

900081ca <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
900081ca:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
900081cc:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
900081ce:	bf04      	itt	eq
900081d0:	8a8a      	ldrheq	r2, [r1, #20]
900081d2:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
900081d6:	4618      	mov	r0, r3
900081d8:	4770      	bx	lr

900081da <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
900081da:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
900081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900081de:	4606      	mov	r6, r0
900081e0:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
900081e2:	d94e      	bls.n	90008282 <get_fat.isra.0+0xa8>
900081e4:	6983      	ldr	r3, [r0, #24]
900081e6:	4299      	cmp	r1, r3
900081e8:	d24b      	bcs.n	90008282 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
900081ea:	7803      	ldrb	r3, [r0, #0]
900081ec:	2b02      	cmp	r3, #2
900081ee:	d029      	beq.n	90008244 <get_fat.isra.0+0x6a>
900081f0:	2b03      	cmp	r3, #3
900081f2:	d034      	beq.n	9000825e <get_fat.isra.0+0x84>
900081f4:	2b01      	cmp	r3, #1
900081f6:	d144      	bne.n	90008282 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
900081f8:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
900081fc:	6a41      	ldr	r1, [r0, #36]	; 0x24
900081fe:	eb01 2155 	add.w	r1, r1, r5, lsr #9
90008202:	f7ff fd97 	bl	90007d34 <move_window>
90008206:	b110      	cbz	r0, 9000820e <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
90008208:	f04f 30ff 	mov.w	r0, #4294967295
}
9000820c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
9000820e:	1c6f      	adds	r7, r5, #1
90008210:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
90008214:	6a71      	ldr	r1, [r6, #36]	; 0x24
90008216:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
90008218:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
9000821a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
9000821e:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
90008222:	f7ff fd87 	bl	90007d34 <move_window>
90008226:	2800      	cmp	r0, #0
90008228:	d1ee      	bne.n	90008208 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
9000822a:	f3c7 0708 	ubfx	r7, r7, #0, #9
9000822e:	4437      	add	r7, r6
90008230:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
90008234:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
90008238:	07e3      	lsls	r3, r4, #31
9000823a:	bf4c      	ite	mi
9000823c:	0900      	lsrmi	r0, r0, #4
9000823e:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
90008242:	e7e3      	b.n	9000820c <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
90008244:	6a41      	ldr	r1, [r0, #36]	; 0x24
90008246:	eb01 2114 	add.w	r1, r1, r4, lsr #8
9000824a:	f7ff fd73 	bl	90007d34 <move_window>
9000824e:	2800      	cmp	r0, #0
90008250:	d1da      	bne.n	90008208 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
90008252:	0064      	lsls	r4, r4, #1
90008254:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
90008258:	4434      	add	r4, r6
9000825a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
			break;
9000825c:	e7d6      	b.n	9000820c <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
9000825e:	6a41      	ldr	r1, [r0, #36]	; 0x24
90008260:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
90008264:	f7ff fd66 	bl	90007d34 <move_window>
90008268:	2800      	cmp	r0, #0
9000826a:	d1cd      	bne.n	90008208 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
9000826c:	00a4      	lsls	r4, r4, #2
9000826e:	f106 0034 	add.w	r0, r6, #52	; 0x34
90008272:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
90008276:	4420      	add	r0, r4
90008278:	f7ff fb8e 	bl	90007998 <ld_dword>
9000827c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
90008280:	e7c4      	b.n	9000820c <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
90008282:	2001      	movs	r0, #1
	return val;
90008284:	e7c2      	b.n	9000820c <get_fat.isra.0+0x32>

90008286 <remove_chain>:
{
90008286:	b573      	push	{r0, r1, r4, r5, r6, lr}
90008288:	460c      	mov	r4, r1
9000828a:	4606      	mov	r6, r0
9000828c:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
9000828e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
90008290:	2c01      	cmp	r4, #1
90008292:	d92c      	bls.n	900082ee <remove_chain+0x68>
90008294:	69ab      	ldr	r3, [r5, #24]
90008296:	42a3      	cmp	r3, r4
90008298:	d929      	bls.n	900082ee <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
9000829a:	b12a      	cbz	r2, 900082a8 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
9000829c:	f04f 32ff 	mov.w	r2, #4294967295
900082a0:	4628      	mov	r0, r5
900082a2:	f7ff fec9 	bl	90008038 <put_fat>
		if (res != FR_OK) return res;
900082a6:	b940      	cbnz	r0, 900082ba <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
900082a8:	4621      	mov	r1, r4
900082aa:	6830      	ldr	r0, [r6, #0]
900082ac:	9401      	str	r4, [sp, #4]
900082ae:	f7ff ff94 	bl	900081da <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
900082b2:	9901      	ldr	r1, [sp, #4]
900082b4:	4604      	mov	r4, r0
900082b6:	b910      	cbnz	r0, 900082be <remove_chain+0x38>
	return FR_OK;
900082b8:	2000      	movs	r0, #0
}
900082ba:	b002      	add	sp, #8
900082bc:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
900082be:	2801      	cmp	r0, #1
900082c0:	d015      	beq.n	900082ee <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
900082c2:	1c43      	adds	r3, r0, #1
900082c4:	d015      	beq.n	900082f2 <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
900082c6:	2200      	movs	r2, #0
900082c8:	4628      	mov	r0, r5
900082ca:	f7ff feb5 	bl	90008038 <put_fat>
			if (res != FR_OK) return res;
900082ce:	2800      	cmp	r0, #0
900082d0:	d1f3      	bne.n	900082ba <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
900082d2:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
900082d6:	1e91      	subs	r1, r2, #2
900082d8:	428b      	cmp	r3, r1
900082da:	d205      	bcs.n	900082e8 <remove_chain+0x62>
			fs->free_clst++;
900082dc:	3301      	adds	r3, #1
900082de:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
900082e0:	792b      	ldrb	r3, [r5, #4]
900082e2:	f043 0301 	orr.w	r3, r3, #1
900082e6:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
900082e8:	42a2      	cmp	r2, r4
900082ea:	d8dd      	bhi.n	900082a8 <remove_chain+0x22>
900082ec:	e7e4      	b.n	900082b8 <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
900082ee:	2002      	movs	r0, #2
900082f0:	e7e3      	b.n	900082ba <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
900082f2:	2001      	movs	r0, #1
900082f4:	e7e1      	b.n	900082ba <remove_chain+0x34>

900082f6 <create_chain>:
{
900082f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900082fa:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
900082fc:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
900082fe:	460f      	mov	r7, r1
90008300:	b971      	cbnz	r1, 90008320 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
90008302:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
90008304:	b1ee      	cbz	r6, 90008342 <create_chain+0x4c>
90008306:	69ab      	ldr	r3, [r5, #24]
90008308:	42b3      	cmp	r3, r6
9000830a:	bf98      	it	ls
9000830c:	2601      	movls	r6, #1
9000830e:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
90008310:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
90008312:	69ab      	ldr	r3, [r5, #24]
90008314:	42a3      	cmp	r3, r4
90008316:	d817      	bhi.n	90008348 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
90008318:	2e01      	cmp	r6, #1
9000831a:	d114      	bne.n	90008346 <create_chain+0x50>
9000831c:	2400      	movs	r4, #0
9000831e:	e006      	b.n	9000832e <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
90008320:	4628      	mov	r0, r5
90008322:	f7ff ff5a 	bl	900081da <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
90008326:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
90008328:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
9000832a:	d803      	bhi.n	90008334 <create_chain+0x3e>
9000832c:	2401      	movs	r4, #1
}
9000832e:	4620      	mov	r0, r4
90008330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
90008334:	1c43      	adds	r3, r0, #1
90008336:	d030      	beq.n	9000839a <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
90008338:	69ab      	ldr	r3, [r5, #24]
9000833a:	4283      	cmp	r3, r0
9000833c:	d8f7      	bhi.n	9000832e <create_chain+0x38>
9000833e:	463e      	mov	r6, r7
90008340:	e7e5      	b.n	9000830e <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
90008342:	2601      	movs	r6, #1
90008344:	e7e3      	b.n	9000830e <create_chain+0x18>
				ncl = 2;
90008346:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
90008348:	4621      	mov	r1, r4
9000834a:	f8d8 0000 	ldr.w	r0, [r8]
9000834e:	f7ff ff44 	bl	900081da <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
90008352:	b130      	cbz	r0, 90008362 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
90008354:	2801      	cmp	r0, #1
90008356:	d0e9      	beq.n	9000832c <create_chain+0x36>
90008358:	3001      	adds	r0, #1
9000835a:	d01e      	beq.n	9000839a <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
9000835c:	42b4      	cmp	r4, r6
9000835e:	d1d7      	bne.n	90008310 <create_chain+0x1a>
90008360:	e7dc      	b.n	9000831c <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
90008362:	f04f 32ff 	mov.w	r2, #4294967295
90008366:	4621      	mov	r1, r4
90008368:	4628      	mov	r0, r5
9000836a:	f7ff fe65 	bl	90008038 <put_fat>
		if (res == FR_OK && clst != 0) {
9000836e:	b990      	cbnz	r0, 90008396 <create_chain+0xa0>
90008370:	b957      	cbnz	r7, 90008388 <create_chain+0x92>
		fs->last_clst = ncl;
90008372:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
90008374:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
90008378:	3a02      	subs	r2, #2
9000837a:	4293      	cmp	r3, r2
9000837c:	d910      	bls.n	900083a0 <create_chain+0xaa>
		fs->fsi_flag |= 1;
9000837e:	792b      	ldrb	r3, [r5, #4]
90008380:	f043 0301 	orr.w	r3, r3, #1
90008384:	712b      	strb	r3, [r5, #4]
90008386:	e7d2      	b.n	9000832e <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
90008388:	4622      	mov	r2, r4
9000838a:	4639      	mov	r1, r7
9000838c:	4628      	mov	r0, r5
9000838e:	f7ff fe53 	bl	90008038 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
90008392:	2800      	cmp	r0, #0
90008394:	d0ed      	beq.n	90008372 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
90008396:	2801      	cmp	r0, #1
90008398:	d1c8      	bne.n	9000832c <create_chain+0x36>
9000839a:	f04f 34ff 	mov.w	r4, #4294967295
9000839e:	e7c6      	b.n	9000832e <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
900083a0:	3b01      	subs	r3, #1
900083a2:	616b      	str	r3, [r5, #20]
900083a4:	e7eb      	b.n	9000837e <create_chain+0x88>

900083a6 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
900083a6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
900083aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900083ac:	4606      	mov	r6, r0
900083ae:	460c      	mov	r4, r1
	FATFS *fs = dp->obj.fs;
900083b0:	6805      	ldr	r5, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
900083b2:	d301      	bcc.n	900083b8 <dir_sdi+0x12>
		return FR_INT_ERR;
900083b4:	2002      	movs	r0, #2
}
900083b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
900083b8:	06ca      	lsls	r2, r1, #27
900083ba:	d1fb      	bne.n	900083b4 <dir_sdi+0xe>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
900083bc:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
900083be:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
900083c0:	b9ba      	cbnz	r2, 900083f2 <dir_sdi+0x4c>
900083c2:	782b      	ldrb	r3, [r5, #0]
900083c4:	2b02      	cmp	r3, #2
900083c6:	d901      	bls.n	900083cc <dir_sdi+0x26>
		clst = fs->dirbase;
900083c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
900083ca:	b99b      	cbnz	r3, 900083f4 <dir_sdi+0x4e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
900083cc:	892b      	ldrh	r3, [r5, #8]
900083ce:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
900083d2:	d9ef      	bls.n	900083b4 <dir_sdi+0xe>
		dp->sect = fs->dirbase;
900083d4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
900083d6:	e9c6 2006 	strd	r2, r0, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
900083da:	2800      	cmp	r0, #0
900083dc:	d0ea      	beq.n	900083b4 <dir_sdi+0xe>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
900083de:	eb00 2054 	add.w	r0, r0, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
900083e2:	3534      	adds	r5, #52	; 0x34
900083e4:	f3c4 0408 	ubfx	r4, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
900083e8:	61f0      	str	r0, [r6, #28]
	return FR_OK;
900083ea:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
900083ec:	4425      	add	r5, r4
900083ee:	6235      	str	r5, [r6, #32]
	return FR_OK;
900083f0:	e7e1      	b.n	900083b6 <dir_sdi+0x10>
900083f2:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
900083f4:	896f      	ldrh	r7, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
900083f6:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
900083f8:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
900083fa:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
900083fc:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
900083fe:	d203      	bcs.n	90008408 <dir_sdi+0x62>
		dp->sect = clust2sect(fs, clst);
90008400:	4628      	mov	r0, r5
90008402:	f7ff fb81 	bl	90007b08 <clust2sect>
90008406:	e7e6      	b.n	900083d6 <dir_sdi+0x30>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
90008408:	6830      	ldr	r0, [r6, #0]
9000840a:	f7ff fee6 	bl	900081da <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
9000840e:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
90008410:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
90008412:	d006      	beq.n	90008422 <dir_sdi+0x7c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
90008414:	2801      	cmp	r0, #1
90008416:	d9cd      	bls.n	900083b4 <dir_sdi+0xe>
90008418:	69ab      	ldr	r3, [r5, #24]
9000841a:	4283      	cmp	r3, r0
9000841c:	d9ca      	bls.n	900083b4 <dir_sdi+0xe>
			ofs -= csz;
9000841e:	1be4      	subs	r4, r4, r7
90008420:	e7eb      	b.n	900083fa <dir_sdi+0x54>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
90008422:	2001      	movs	r0, #1
90008424:	e7c7      	b.n	900083b6 <dir_sdi+0x10>

90008426 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
90008426:	6943      	ldr	r3, [r0, #20]
{
90008428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
9000842c:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
90008430:	69c3      	ldr	r3, [r0, #28]
{
90008432:	4605      	mov	r5, r0
90008434:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
90008436:	b18b      	cbz	r3, 9000845c <dir_next+0x36>
90008438:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
9000843c:	d20e      	bcs.n	9000845c <dir_next+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
9000843e:	f3c8 0708 	ubfx	r7, r8, #0, #9
	FATFS *fs = dp->obj.fs;
90008442:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
90008444:	2f00      	cmp	r7, #0
90008446:	d14f      	bne.n	900084e8 <dir_next+0xc2>
		dp->sect++;				/* Next sector */
90008448:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
9000844a:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
9000844c:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
9000844e:	b939      	cbnz	r1, 90008460 <dir_next+0x3a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
90008450:	8923      	ldrh	r3, [r4, #8]
90008452:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
90008456:	d847      	bhi.n	900084e8 <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
90008458:	2300      	movs	r3, #0
9000845a:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
9000845c:	2004      	movs	r0, #4
9000845e:	e00d      	b.n	9000847c <dir_next+0x56>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
90008460:	f8b4 900a 	ldrh.w	r9, [r4, #10]
90008464:	f109 39ff 	add.w	r9, r9, #4294967295
90008468:	ea19 2958 	ands.w	r9, r9, r8, lsr #9
9000846c:	d13c      	bne.n	900084e8 <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
9000846e:	4620      	mov	r0, r4
90008470:	f7ff feb3 	bl	900081da <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
90008474:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
90008476:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
90008478:	d802      	bhi.n	90008480 <dir_next+0x5a>
9000847a:	2002      	movs	r0, #2
}
9000847c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
90008480:	1c42      	adds	r2, r0, #1
90008482:	d101      	bne.n	90008488 <dir_next+0x62>
90008484:	2001      	movs	r0, #1
90008486:	e7f9      	b.n	9000847c <dir_next+0x56>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
90008488:	69a3      	ldr	r3, [r4, #24]
9000848a:	4283      	cmp	r3, r0
9000848c:	d826      	bhi.n	900084dc <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
9000848e:	f1ba 0f00 	cmp.w	sl, #0
90008492:	d0e1      	beq.n	90008458 <dir_next+0x32>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
90008494:	69a9      	ldr	r1, [r5, #24]
90008496:	4628      	mov	r0, r5
90008498:	f7ff ff2d 	bl	900082f6 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
9000849c:	4606      	mov	r6, r0
9000849e:	2800      	cmp	r0, #0
900084a0:	d035      	beq.n	9000850e <dir_next+0xe8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
900084a2:	2801      	cmp	r0, #1
900084a4:	d0e9      	beq.n	9000847a <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
900084a6:	1c43      	adds	r3, r0, #1
900084a8:	d0ec      	beq.n	90008484 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
900084aa:	4620      	mov	r0, r4
900084ac:	f7ff fc3c 	bl	90007d28 <sync_window>
900084b0:	4601      	mov	r1, r0
900084b2:	2800      	cmp	r0, #0
900084b4:	d1e6      	bne.n	90008484 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
900084b6:	f104 0034 	add.w	r0, r4, #52	; 0x34
900084ba:	f44f 7200 	mov.w	r2, #512	; 0x200
						fs->wflag = 1;
900084be:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
900084c2:	f7ff fa73 	bl	900079ac <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
900084c6:	4631      	mov	r1, r6
900084c8:	4620      	mov	r0, r4
900084ca:	f7ff fb1d 	bl	90007b08 <clust2sect>
900084ce:	8963      	ldrh	r3, [r4, #10]
900084d0:	6320      	str	r0, [r4, #48]	; 0x30
900084d2:	4599      	cmp	r9, r3
900084d4:	d30f      	bcc.n	900084f6 <dir_next+0xd0>
					fs->winsect -= n;							/* Restore window offset */
900084d6:	eba0 0009 	sub.w	r0, r0, r9
900084da:	6320      	str	r0, [r4, #48]	; 0x30
				dp->sect = clust2sect(fs, clst);
900084dc:	4631      	mov	r1, r6
900084de:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
900084e0:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
900084e2:	f7ff fb11 	bl	90007b08 <clust2sect>
900084e6:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
900084e8:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
900084ea:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
900084ec:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
900084f0:	443c      	add	r4, r7
900084f2:	622c      	str	r4, [r5, #32]
	return FR_OK;
900084f4:	e7c2      	b.n	9000847c <dir_next+0x56>
						fs->wflag = 1;
900084f6:	4620      	mov	r0, r4
900084f8:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
900084fc:	f7ff fbee 	bl	90007cdc <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
90008500:	2800      	cmp	r0, #0
90008502:	d1bf      	bne.n	90008484 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
90008504:	6b20      	ldr	r0, [r4, #48]	; 0x30
90008506:	f109 0901 	add.w	r9, r9, #1
9000850a:	3001      	adds	r0, #1
9000850c:	e7df      	b.n	900084ce <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
9000850e:	2007      	movs	r0, #7
90008510:	e7b4      	b.n	9000847c <dir_next+0x56>
	...

90008514 <dir_find>:
{
90008514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
90008518:	2100      	movs	r1, #0
{
9000851a:	b085      	sub	sp, #20
9000851c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
9000851e:	f8d0 b000 	ldr.w	fp, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
90008522:	f7ff ff40 	bl	900083a6 <dir_sdi>
	if (res != FR_OK) return res;
90008526:	4606      	mov	r6, r0
90008528:	2800      	cmp	r0, #0
9000852a:	f040 8098 	bne.w	9000865e <dir_find+0x14a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
9000852e:	f04f 08ff 	mov.w	r8, #255	; 0xff
90008532:	f04f 3aff 	mov.w	sl, #4294967295
90008536:	46c1      	mov	r9, r8
90008538:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
		res = move_window(fs, dp->sect);
9000853c:	69e1      	ldr	r1, [r4, #28]
9000853e:	4658      	mov	r0, fp
90008540:	f7ff fbf8 	bl	90007d34 <move_window>
		if (res != FR_OK) break;
90008544:	4606      	mov	r6, r0
90008546:	2800      	cmp	r0, #0
90008548:	f040 8089 	bne.w	9000865e <dir_find+0x14a>
		c = dp->dir[DIR_Name];
9000854c:	6a25      	ldr	r5, [r4, #32]
9000854e:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
90008550:	2f00      	cmp	r7, #0
90008552:	f000 8088 	beq.w	90008666 <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
90008556:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
90008558:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
9000855a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
9000855e:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
90008560:	d003      	beq.n	9000856a <dir_find+0x56>
90008562:	0710      	lsls	r0, r2, #28
90008564:	d504      	bpl.n	90008570 <dir_find+0x5c>
90008566:	2b0f      	cmp	r3, #15
90008568:	d004      	beq.n	90008574 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
9000856a:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
9000856e:	e050      	b.n	90008612 <dir_find+0xfe>
			if (a == AM_LFN) {			/* An LFN entry is found */
90008570:	2b0f      	cmp	r3, #15
90008572:	d156      	bne.n	90008622 <dir_find+0x10e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
90008574:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
90008578:	0659      	lsls	r1, r3, #25
9000857a:	d440      	bmi.n	900085fe <dir_find+0xea>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
9000857c:	067a      	lsls	r2, r7, #25
9000857e:	d546      	bpl.n	9000860e <dir_find+0xfa>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
90008580:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
90008582:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
90008586:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
9000858a:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000858c:	7b6b      	ldrb	r3, [r5, #13]
9000858e:	4543      	cmp	r3, r8
90008590:	d13f      	bne.n	90008612 <dir_find+0xfe>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
90008592:	8b6b      	ldrh	r3, [r5, #26]
90008594:	2b00      	cmp	r3, #0
90008596:	d13c      	bne.n	90008612 <dir_find+0xfe>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
90008598:	782e      	ldrb	r6, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
9000859a:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000859c:	f8db 300c 	ldr.w	r3, [fp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
900085a0:	f006 063f 	and.w	r6, r6, #63	; 0x3f
900085a4:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 90008670 <dir_find+0x15c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
900085a8:	9300      	str	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
900085aa:	230d      	movs	r3, #13
900085ac:	3e01      	subs	r6, #1
900085ae:	435e      	muls	r6, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
900085b0:	f819 3b01 	ldrb.w	r3, [r9], #1
900085b4:	5aeb      	ldrh	r3, [r5, r3]
		if (wc) {
900085b6:	b37a      	cbz	r2, 90008618 <dir_find+0x104>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
900085b8:	2efe      	cmp	r6, #254	; 0xfe
900085ba:	d82a      	bhi.n	90008612 <dir_find+0xfe>
900085bc:	4618      	mov	r0, r3
900085be:	9303      	str	r3, [sp, #12]
900085c0:	f001 f86c 	bl	9000969c <ff_wtoupper>
900085c4:	9b00      	ldr	r3, [sp, #0]
900085c6:	1c71      	adds	r1, r6, #1
900085c8:	9002      	str	r0, [sp, #8]
900085ca:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
900085ce:	9101      	str	r1, [sp, #4]
900085d0:	f001 f864 	bl	9000969c <ff_wtoupper>
900085d4:	9a02      	ldr	r2, [sp, #8]
900085d6:	4282      	cmp	r2, r0
900085d8:	d11b      	bne.n	90008612 <dir_find+0xfe>
900085da:	9b03      	ldr	r3, [sp, #12]
900085dc:	9901      	ldr	r1, [sp, #4]
900085de:	461a      	mov	r2, r3
900085e0:	460e      	mov	r6, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
900085e2:	4b22      	ldr	r3, [pc, #136]	; (9000866c <dir_find+0x158>)
900085e4:	4599      	cmp	r9, r3
900085e6:	d1e3      	bne.n	900085b0 <dir_find+0x9c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
900085e8:	782b      	ldrb	r3, [r5, #0]
900085ea:	065b      	lsls	r3, r3, #25
900085ec:	d504      	bpl.n	900085f8 <dir_find+0xe4>
900085ee:	b11a      	cbz	r2, 900085f8 <dir_find+0xe4>
900085f0:	9b00      	ldr	r3, [sp, #0]
900085f2:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
900085f6:	b963      	cbnz	r3, 90008612 <dir_find+0xfe>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
900085f8:	3f01      	subs	r7, #1
900085fa:	fa5f f987 	uxtb.w	r9, r7
		res = dir_next(dp, 0);	/* Next entry */
900085fe:	2100      	movs	r1, #0
90008600:	4620      	mov	r0, r4
90008602:	f7ff ff10 	bl	90008426 <dir_next>
	} while (res == FR_OK);
90008606:	4606      	mov	r6, r0
90008608:	2800      	cmp	r0, #0
9000860a:	d097      	beq.n	9000853c <dir_find+0x28>
9000860c:	e027      	b.n	9000865e <dir_find+0x14a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000860e:	45b9      	cmp	r9, r7
90008610:	d0bc      	beq.n	9000858c <dir_find+0x78>
90008612:	f04f 09ff 	mov.w	r9, #255	; 0xff
90008616:	e7f2      	b.n	900085fe <dir_find+0xea>
			if (uc != 0xFFFF) return 0;		/* Check filler */
90008618:	f64f 71ff 	movw	r1, #65535	; 0xffff
9000861c:	428b      	cmp	r3, r1
9000861e:	d0e0      	beq.n	900085e2 <dir_find+0xce>
90008620:	e7f7      	b.n	90008612 <dir_find+0xfe>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
90008622:	f1b9 0f00 	cmp.w	r9, #0
90008626:	d104      	bne.n	90008632 <dir_find+0x11e>
90008628:	4628      	mov	r0, r5
9000862a:	f7ff fa95 	bl	90007b58 <sum_sfn>
9000862e:	4540      	cmp	r0, r8
90008630:	d015      	beq.n	9000865e <dir_find+0x14a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
90008632:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
90008636:	f016 0601 	ands.w	r6, r6, #1
9000863a:	d196      	bne.n	9000856a <dir_find+0x56>
9000863c:	f104 0224 	add.w	r2, r4, #36	; 0x24
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
90008640:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
90008644:	f815 3b01 	ldrb.w	r3, [r5], #1
90008648:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
9000864c:	428d      	cmp	r5, r1
		r = *d++ - *s++;
9000864e:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
90008652:	d002      	beq.n	9000865a <dir_find+0x146>
90008654:	2b00      	cmp	r3, #0
90008656:	d0f5      	beq.n	90008644 <dir_find+0x130>
90008658:	e787      	b.n	9000856a <dir_find+0x56>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
9000865a:	2b00      	cmp	r3, #0
9000865c:	d185      	bne.n	9000856a <dir_find+0x56>
}
9000865e:	4630      	mov	r0, r6
90008660:	b005      	add	sp, #20
90008662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
90008666:	2604      	movs	r6, #4
90008668:	e7f9      	b.n	9000865e <dir_find+0x14a>
9000866a:	bf00      	nop
9000866c:	900108cd 	.word	0x900108cd
90008670:	900108c0 	.word	0x900108c0

90008674 <dir_register>:
{
90008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
90008678:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
{
9000867c:	b089      	sub	sp, #36	; 0x24
9000867e:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
90008680:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
90008684:	f040 808e 	bne.w	900087a4 <dir_register+0x130>
	FATFS *fs = dp->obj.fs;
90008688:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
9000868a:	68f2      	ldr	r2, [r6, #12]
9000868c:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
90008690:	2b00      	cmp	r3, #0
90008692:	d166      	bne.n	90008762 <dir_register+0xee>
	mem_cpy(sn, dp->fn, 12);
90008694:	f104 0724 	add.w	r7, r4, #36	; 0x24
	if (cnt) {
90008698:	220c      	movs	r2, #12
9000869a:	a805      	add	r0, sp, #20
9000869c:	4639      	mov	r1, r7
9000869e:	f7ff fb14 	bl	90007cca <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
900086a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
900086a6:	07db      	lsls	r3, r3, #31
900086a8:	f140 8085 	bpl.w	900087b6 <dir_register+0x142>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
900086ac:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
900086ae:	f04f 0a01 	mov.w	sl, #1
				if (sr & 0x10000) sr ^= 0x11021;
900086b2:	f8df 8234 	ldr.w	r8, [pc, #564]	; 900088e8 <dir_register+0x274>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
900086b6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
900086ba:	220b      	movs	r2, #11
900086bc:	a905      	add	r1, sp, #20
900086be:	4638      	mov	r0, r7
900086c0:	f8d6 900c 	ldr.w	r9, [r6, #12]
	if (cnt) {
900086c4:	f7ff fb01 	bl	90007cca <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
900086c8:	f1ba 0f05 	cmp.w	sl, #5
900086cc:	d959      	bls.n	90008782 <dir_register+0x10e>
900086ce:	f1a9 0102 	sub.w	r1, r9, #2
900086d2:	4653      	mov	r3, sl
		while (*lfn) {	/* Create a CRC */
900086d4:	f831 2f02 	ldrh.w	r2, [r1, #2]!
900086d8:	2a00      	cmp	r2, #0
900086da:	d144      	bne.n	90008766 <dir_register+0xf2>
900086dc:	a805      	add	r0, sp, #20
900086de:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
900086e0:	f003 0c0f 	and.w	ip, r3, #15
		ns[i--] = c;
900086e4:	3a01      	subs	r2, #1
		c = (BYTE)((seq % 16) + '0');
900086e6:	f10c 0130 	add.w	r1, ip, #48	; 0x30
		if (c > '9') c += 7;
900086ea:	2939      	cmp	r1, #57	; 0x39
900086ec:	bf88      	it	hi
900086ee:	f10c 0137 	addhi.w	r1, ip, #55	; 0x37
	} while (seq);
900086f2:	2b0f      	cmp	r3, #15
		ns[i--] = c;
900086f4:	f800 1d01 	strb.w	r1, [r0, #-1]!
		seq /= 16;
900086f8:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
900086fc:	d843      	bhi.n	90008786 <dir_register+0x112>
	ns[i] = '~';
900086fe:	f102 0320 	add.w	r3, r2, #32
90008702:	217e      	movs	r1, #126	; 0x7e
90008704:	446b      	add	r3, sp
90008706:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
9000870a:	f104 0123 	add.w	r1, r4, #35	; 0x23
9000870e:	2300      	movs	r3, #0
90008710:	4608      	mov	r0, r1
90008712:	429a      	cmp	r2, r3
90008714:	d006      	beq.n	90008724 <dir_register+0xb0>
90008716:	f810 cf01 	ldrb.w	ip, [r0, #1]!
9000871a:	f103 0e01 	add.w	lr, r3, #1
9000871e:	f1bc 0f20 	cmp.w	ip, #32
90008722:	d132      	bne.n	9000878a <dir_register+0x116>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
90008724:	2a07      	cmp	r2, #7
90008726:	f103 0301 	add.w	r3, r3, #1
9000872a:	bf97      	itett	ls
9000872c:	f102 0020 	addls.w	r0, r2, #32
90008730:	2020      	movhi	r0, #32
90008732:	3201      	addls	r2, #1
90008734:	4468      	addls	r0, sp
90008736:	bf98      	it	ls
90008738:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
	} while (j < 8);
9000873c:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
9000873e:	54c8      	strb	r0, [r1, r3]
	} while (j < 8);
90008740:	d9f0      	bls.n	90008724 <dir_register+0xb0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
90008742:	4620      	mov	r0, r4
90008744:	f7ff fee6 	bl	90008514 <dir_find>
90008748:	4681      	mov	r9, r0
			if (res != FR_OK) break;
9000874a:	bb70      	cbnz	r0, 900087aa <dir_register+0x136>
		for (n = 1; n < 100; n++) {
9000874c:	f10a 0a01 	add.w	sl, sl, #1
90008750:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
90008754:	d1b1      	bne.n	900086ba <dir_register+0x46>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
90008756:	f04f 0907 	mov.w	r9, #7
}
9000875a:	4648      	mov	r0, r9
9000875c:	b009      	add	sp, #36	; 0x24
9000875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
90008762:	3501      	adds	r5, #1
90008764:	e792      	b.n	9000868c <dir_register+0x18>
90008766:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
90008768:	f002 0c01 	and.w	ip, r2, #1
				wc >>= 1;
9000876c:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
9000876e:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
90008772:	f413 3f80 	tst.w	r3, #65536	; 0x10000
90008776:	bf18      	it	ne
90008778:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
9000877c:	3801      	subs	r0, #1
9000877e:	d1f3      	bne.n	90008768 <dir_register+0xf4>
90008780:	e7a8      	b.n	900086d4 <dir_register+0x60>
90008782:	4653      	mov	r3, sl
90008784:	e7aa      	b.n	900086dc <dir_register+0x68>
		seq /= 16;
90008786:	460b      	mov	r3, r1
90008788:	e7aa      	b.n	900086e0 <dir_register+0x6c>
9000878a:	4673      	mov	r3, lr
9000878c:	e7c1      	b.n	90008712 <dir_register+0x9e>
				n = 0;					/* Not a blank entry. Restart to search */
9000878e:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
90008790:	2101      	movs	r1, #1
90008792:	4620      	mov	r0, r4
90008794:	f7ff fe47 	bl	90008426 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
90008798:	4681      	mov	r9, r0
9000879a:	b308      	cbz	r0, 900087e0 <dir_register+0x16c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
9000879c:	f1b9 0f04 	cmp.w	r9, #4
900087a0:	d0d9      	beq.n	90008756 <dir_register+0xe2>
900087a2:	e7da      	b.n	9000875a <dir_register+0xe6>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
900087a4:	f04f 0906 	mov.w	r9, #6
900087a8:	e7d7      	b.n	9000875a <dir_register+0xe6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
900087aa:	2804      	cmp	r0, #4
900087ac:	d1d5      	bne.n	9000875a <dir_register+0xe6>
		dp->fn[NSFLAG] = sn[NSFLAG];
900087ae:	f89d 301f 	ldrb.w	r3, [sp, #31]
900087b2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
900087b6:	f89d 301f 	ldrb.w	r3, [sp, #31]
	res = dir_sdi(dp, 0);
900087ba:	2100      	movs	r1, #0
900087bc:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
900087be:	f8d4 a000 	ldr.w	sl, [r4]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
900087c2:	079b      	lsls	r3, r3, #30
900087c4:	bf45      	ittet	mi
900087c6:	350c      	addmi	r5, #12
900087c8:	230d      	movmi	r3, #13
900087ca:	2501      	movpl	r5, #1
900087cc:	fbb5 f5f3 	udivmi	r5, r5, r3
900087d0:	bf48      	it	mi
900087d2:	3501      	addmi	r5, #1
	res = dir_sdi(dp, 0);
900087d4:	f7ff fde7 	bl	900083a6 <dir_sdi>
	if (res == FR_OK) {
900087d8:	4681      	mov	r9, r0
900087da:	2800      	cmp	r0, #0
900087dc:	d1de      	bne.n	9000879c <dir_register+0x128>
		n = 0;
900087de:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
900087e0:	69e1      	ldr	r1, [r4, #28]
900087e2:	4650      	mov	r0, sl
900087e4:	f7ff faa6 	bl	90007d34 <move_window>
			if (res != FR_OK) break;
900087e8:	4681      	mov	r9, r0
900087ea:	2800      	cmp	r0, #0
900087ec:	d1d6      	bne.n	9000879c <dir_register+0x128>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
900087ee:	6a23      	ldr	r3, [r4, #32]
900087f0:	781b      	ldrb	r3, [r3, #0]
900087f2:	2be5      	cmp	r3, #229	; 0xe5
900087f4:	d001      	beq.n	900087fa <dir_register+0x186>
900087f6:	2b00      	cmp	r3, #0
900087f8:	d1c9      	bne.n	9000878e <dir_register+0x11a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
900087fa:	f108 0801 	add.w	r8, r8, #1
900087fe:	4545      	cmp	r5, r8
90008800:	d1c6      	bne.n	90008790 <dir_register+0x11c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
90008802:	3d01      	subs	r5, #1
90008804:	d055      	beq.n	900088b2 <dir_register+0x23e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
90008806:	6961      	ldr	r1, [r4, #20]
90008808:	4620      	mov	r0, r4
9000880a:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
9000880e:	f7ff fdca 	bl	900083a6 <dir_sdi>
		if (res == FR_OK) {
90008812:	4681      	mov	r9, r0
90008814:	2800      	cmp	r0, #0
90008816:	d1a0      	bne.n	9000875a <dir_register+0xe6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
90008818:	f64f 78ff 	movw	r8, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
9000881c:	4638      	mov	r0, r7
9000881e:	f7ff f99b 	bl	90007b58 <sum_sfn>
90008822:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
90008824:	69e1      	ldr	r1, [r4, #28]
90008826:	4630      	mov	r0, r6
90008828:	f7ff fa84 	bl	90007d34 <move_window>
9000882c:	4681      	mov	r9, r0
				if (res != FR_OK) break;
9000882e:	2800      	cmp	r0, #0
90008830:	d193      	bne.n	9000875a <dir_register+0xe6>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
90008832:	6a23      	ldr	r3, [r4, #32]
90008834:	b2e9      	uxtb	r1, r5
	dir[LDIR_Chksum] = sum;			/* Set checksum */
90008836:	9a01      	ldr	r2, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
90008838:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
9000883c:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
90008840:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
90008842:	f04f 020f 	mov.w	r2, #15
90008846:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 900088ec <dir_register+0x278>
9000884a:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
9000884c:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
9000884e:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
90008850:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
90008854:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
90008856:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
90008858:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
9000885a:	4540      	cmp	r0, r8
		st_word(dir + LfnOfs[s], wc);		/* Put it */
9000885c:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++s < 13);
90008860:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
90008864:	bf18      	it	ne
90008866:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
9000886a:	eb03 0b09 	add.w	fp, r3, r9
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
9000886e:	bf18      	it	ne
90008870:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
90008872:	f803 0009 	strb.w	r0, [r3, r9]
90008876:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
9000887a:	2800      	cmp	r0, #0
9000887c:	bf08      	it	eq
9000887e:	4640      	moveq	r0, r8
	} while (++s < 13);
90008880:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
90008884:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
90008888:	d1e7      	bne.n	9000885a <dir_register+0x1e6>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
9000888a:	4540      	cmp	r0, r8
9000888c:	d002      	beq.n	90008894 <dir_register+0x220>
9000888e:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
90008892:	b90a      	cbnz	r2, 90008898 <dir_register+0x224>
90008894:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
90008898:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
9000889a:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
9000889c:	2100      	movs	r1, #0
9000889e:	4620      	mov	r0, r4
				fs->wflag = 1;
900088a0:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
900088a2:	f7ff fdc0 	bl	90008426 <dir_next>
			} while (res == FR_OK && --nent);
900088a6:	4681      	mov	r9, r0
900088a8:	2800      	cmp	r0, #0
900088aa:	f47f af56 	bne.w	9000875a <dir_register+0xe6>
900088ae:	3d01      	subs	r5, #1
900088b0:	d1b8      	bne.n	90008824 <dir_register+0x1b0>
		res = move_window(fs, dp->sect);
900088b2:	69e1      	ldr	r1, [r4, #28]
900088b4:	4630      	mov	r0, r6
900088b6:	f7ff fa3d 	bl	90007d34 <move_window>
		if (res == FR_OK) {
900088ba:	4681      	mov	r9, r0
900088bc:	2800      	cmp	r0, #0
900088be:	f47f af4c 	bne.w	9000875a <dir_register+0xe6>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
900088c2:	4601      	mov	r1, r0
900088c4:	2220      	movs	r2, #32
900088c6:	6a20      	ldr	r0, [r4, #32]
900088c8:	f7ff f870 	bl	900079ac <mem_set>
	if (cnt) {
900088cc:	220b      	movs	r2, #11
900088ce:	4639      	mov	r1, r7
900088d0:	6a20      	ldr	r0, [r4, #32]
900088d2:	f7ff f9fa 	bl	90007cca <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
900088d6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
900088da:	6a22      	ldr	r2, [r4, #32]
900088dc:	f003 0318 	and.w	r3, r3, #24
900088e0:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
900088e2:	2301      	movs	r3, #1
900088e4:	70f3      	strb	r3, [r6, #3]
900088e6:	e738      	b.n	9000875a <dir_register+0xe6>
900088e8:	00011021 	.word	0x00011021
900088ec:	900108c0 	.word	0x900108c0

900088f0 <dir_read.constprop.0>:
FRESULT dir_read (
900088f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
900088f4:	27ff      	movs	r7, #255	; 0xff
FRESULT dir_read (
900088f6:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
900088f8:	f8d0 8000 	ldr.w	r8, [r0]
	FRESULT res = FR_NO_FILE;
900088fc:	2504      	movs	r5, #4
	BYTE ord = 0xFF, sum = 0xFF;
900088fe:	463c      	mov	r4, r7
			if (uc != 0xFFFF) return 0;		/* Check filler */
90008900:	f64f 79ff 	movw	r9, #65535	; 0xffff
	while (dp->sect) {
90008904:	69f1      	ldr	r1, [r6, #28]
90008906:	b911      	cbnz	r1, 9000890e <dir_read.constprop.0+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
90008908:	2d00      	cmp	r5, #0
9000890a:	d05f      	beq.n	900089cc <dir_read.constprop.0+0xdc>
9000890c:	e04f      	b.n	900089ae <dir_read.constprop.0+0xbe>
		res = move_window(fs, dp->sect);
9000890e:	4640      	mov	r0, r8
90008910:	f7ff fa10 	bl	90007d34 <move_window>
		if (res != FR_OK) break;
90008914:	4605      	mov	r5, r0
90008916:	2800      	cmp	r0, #0
90008918:	d149      	bne.n	900089ae <dir_read.constprop.0+0xbe>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
9000891a:	6a30      	ldr	r0, [r6, #32]
9000891c:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) {
9000891e:	2b00      	cmp	r3, #0
90008920:	d05c      	beq.n	900089dc <dir_read.constprop.0+0xec>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
90008922:	7ac2      	ldrb	r2, [r0, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
90008924:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
90008926:	f002 023f 	and.w	r2, r2, #63	; 0x3f
9000892a:	71b2      	strb	r2, [r6, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
9000892c:	d044      	beq.n	900089b8 <dir_read.constprop.0+0xc8>
9000892e:	2b2e      	cmp	r3, #46	; 0x2e
90008930:	d042      	beq.n	900089b8 <dir_read.constprop.0+0xc8>
90008932:	f022 0120 	bic.w	r1, r2, #32
90008936:	2908      	cmp	r1, #8
90008938:	d03e      	beq.n	900089b8 <dir_read.constprop.0+0xc8>
				if (a == AM_LFN) {			/* An LFN entry is found */
9000893a:	2a0f      	cmp	r2, #15
9000893c:	d141      	bne.n	900089c2 <dir_read.constprop.0+0xd2>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
9000893e:	0659      	lsls	r1, r3, #25
90008940:	d538      	bpl.n	900089b4 <dir_read.constprop.0+0xc4>
						c &= (BYTE)~LLEF; ord = c;
90008942:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
90008946:	6973      	ldr	r3, [r6, #20]
						sum = dp->dir[LDIR_Chksum];
90008948:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
9000894a:	6333      	str	r3, [r6, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000894c:	7b43      	ldrb	r3, [r0, #13]
9000894e:	42bb      	cmp	r3, r7
90008950:	d132      	bne.n	900089b8 <dir_read.constprop.0+0xc8>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
90008952:	8b42      	ldrh	r2, [r0, #26]
90008954:	bb82      	cbnz	r2, 900089b8 <dir_read.constprop.0+0xc8>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
90008956:	7803      	ldrb	r3, [r0, #0]
90008958:	210d      	movs	r1, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000895a:	f8d8 500c 	ldr.w	r5, [r8, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
9000895e:	f04f 0e01 	mov.w	lr, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
90008962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
90008966:	f8df c078 	ldr.w	ip, [pc, #120]	; 900089e0 <dir_read.constprop.0+0xf0>
9000896a:	3b01      	subs	r3, #1
9000896c:	434b      	muls	r3, r1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
9000896e:	f81c 1b01 	ldrb.w	r1, [ip], #1
90008972:	5a41      	ldrh	r1, [r0, r1]
		if (wc) {
90008974:	f1be 0f00 	cmp.w	lr, #0
90008978:	d020      	beq.n	900089bc <dir_read.constprop.0+0xcc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
9000897a:	2bfe      	cmp	r3, #254	; 0xfe
9000897c:	d81c      	bhi.n	900089b8 <dir_read.constprop.0+0xc8>
			lfnbuf[i++] = wc = uc;			/* Store it */
9000897e:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
90008982:	468e      	mov	lr, r1
90008984:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
90008986:	3201      	adds	r2, #1
90008988:	2a0d      	cmp	r2, #13
9000898a:	d1f0      	bne.n	9000896e <dir_read.constprop.0+0x7e>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
9000898c:	7802      	ldrb	r2, [r0, #0]
9000898e:	0652      	lsls	r2, r2, #25
90008990:	d504      	bpl.n	9000899c <dir_read.constprop.0+0xac>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
90008992:	2bfe      	cmp	r3, #254	; 0xfe
90008994:	d810      	bhi.n	900089b8 <dir_read.constprop.0+0xc8>
		lfnbuf[i] = 0;
90008996:	2200      	movs	r2, #0
90008998:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000899c:	3c01      	subs	r4, #1
9000899e:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
900089a0:	2100      	movs	r1, #0
900089a2:	4630      	mov	r0, r6
900089a4:	f7ff fd3f 	bl	90008426 <dir_next>
		if (res != FR_OK) break;
900089a8:	4605      	mov	r5, r0
900089aa:	2800      	cmp	r0, #0
900089ac:	d0aa      	beq.n	90008904 <dir_read.constprop.0+0x14>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
900089ae:	2300      	movs	r3, #0
900089b0:	61f3      	str	r3, [r6, #28]
900089b2:	e00c      	b.n	900089ce <dir_read.constprop.0+0xde>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
900089b4:	42a3      	cmp	r3, r4
900089b6:	d0c9      	beq.n	9000894c <dir_read.constprop.0+0x5c>
900089b8:	24ff      	movs	r4, #255	; 0xff
900089ba:	e7f1      	b.n	900089a0 <dir_read.constprop.0+0xb0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
900089bc:	4549      	cmp	r1, r9
900089be:	d0e2      	beq.n	90008986 <dir_read.constprop.0+0x96>
900089c0:	e7fa      	b.n	900089b8 <dir_read.constprop.0+0xc8>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
900089c2:	b93c      	cbnz	r4, 900089d4 <dir_read.constprop.0+0xe4>
900089c4:	f7ff f8c8 	bl	90007b58 <sum_sfn>
900089c8:	42b8      	cmp	r0, r7
900089ca:	d103      	bne.n	900089d4 <dir_read.constprop.0+0xe4>
		res = move_window(fs, dp->sect);
900089cc:	2500      	movs	r5, #0
}
900089ce:	4628      	mov	r0, r5
900089d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
900089d4:	f04f 33ff 	mov.w	r3, #4294967295
900089d8:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
900089da:	e7f8      	b.n	900089ce <dir_read.constprop.0+0xde>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
900089dc:	2504      	movs	r5, #4
900089de:	e7e6      	b.n	900089ae <dir_read.constprop.0+0xbe>
900089e0:	900108c0 	.word	0x900108c0

900089e4 <follow_path>:
{
900089e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900089e8:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
900089ea:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
900089ee:	4689      	mov	r9, r1
900089f0:	f811 3b01 	ldrb.w	r3, [r1], #1
900089f4:	2b2f      	cmp	r3, #47	; 0x2f
900089f6:	d0fa      	beq.n	900089ee <follow_path+0xa>
900089f8:	2b5c      	cmp	r3, #92	; 0x5c
900089fa:	d0f8      	beq.n	900089ee <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
900089fc:	2100      	movs	r1, #0
900089fe:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
90008a00:	f899 3000 	ldrb.w	r3, [r9]
90008a04:	2b1f      	cmp	r3, #31
90008a06:	f200 80b2 	bhi.w	90008b6e <follow_path+0x18a>
		dp->fn[NSFLAG] = NS_NONAME;
90008a0a:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
90008a0c:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
90008a0e:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
90008a12:	b003      	add	sp, #12
90008a14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
90008a18:	f7ff bcc5 	b.w	900083a6 <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
90008a1c:	3501      	adds	r5, #1
90008a1e:	e0b9      	b.n	90008b94 <follow_path+0x1b0>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
90008a20:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90008a24:	e9cd 3200 	strd	r3, r2, [sp]
90008a28:	d00e      	beq.n	90008a48 <follow_path+0x64>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
90008a2a:	2101      	movs	r1, #1
90008a2c:	4620      	mov	r0, r4
90008a2e:	f000 fe19 	bl	90009664 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
90008a32:	b148      	cbz	r0, 90008a48 <follow_path+0x64>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
90008a34:	287f      	cmp	r0, #127	; 0x7f
90008a36:	e9dd 3200 	ldrd	r3, r2, [sp]
90008a3a:	d807      	bhi.n	90008a4c <follow_path+0x68>
90008a3c:	4c7f      	ldr	r4, [pc, #508]	; (90008c3c <follow_path+0x258>)
	while (*str && *str != chr) str++;
90008a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
90008a42:	b119      	cbz	r1, 90008a4c <follow_path+0x68>
90008a44:	4288      	cmp	r0, r1
90008a46:	d1fa      	bne.n	90008a3e <follow_path+0x5a>
				cf |= NS_LOSS | NS_LFN; break;
90008a48:	2006      	movs	r0, #6
90008a4a:	e04d      	b.n	90008ae8 <follow_path+0x104>
		w = p[si++];					/* Get a character */
90008a4c:	462f      	mov	r7, r5
		lfn[di++] = w;					/* Store the Unicode character */
90008a4e:	f823 0f02 	strh.w	r0, [r3, #2]!
		w = p[si++];					/* Get a character */
90008a52:	e095      	b.n	90008b80 <follow_path+0x19c>
		w = lfn[di - 1];
90008a54:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
		if (w != ' ' && w != '.') break;
90008a58:	2b20      	cmp	r3, #32
90008a5a:	d002      	beq.n	90008a62 <follow_path+0x7e>
90008a5c:	2b2e      	cmp	r3, #46	; 0x2e
90008a5e:	f040 80a5 	bne.w	90008bac <follow_path+0x1c8>
		di--;
90008a62:	3f01      	subs	r7, #1
90008a64:	e09f      	b.n	90008ba6 <follow_path+0x1c2>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
90008a66:	3101      	adds	r1, #1
90008a68:	e0ad      	b.n	90008bc6 <follow_path+0x1e2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
90008a6a:	4543      	cmp	r3, r8
90008a6c:	d205      	bcs.n	90008a7a <follow_path+0x96>
90008a6e:	42ba      	cmp	r2, r7
90008a70:	d149      	bne.n	90008b06 <follow_path+0x122>
			if (ni == 11) {				/* Long extension */
90008a72:	f1b8 0f0b 	cmp.w	r8, #11
90008a76:	d13f      	bne.n	90008af8 <follow_path+0x114>
90008a78:	e002      	b.n	90008a80 <follow_path+0x9c>
90008a7a:	f1b8 0f0b 	cmp.w	r8, #11
90008a7e:	d136      	bne.n	90008aee <follow_path+0x10a>
				cf |= NS_LOSS | NS_LFN; break;
90008a80:	f044 0403 	orr.w	r4, r4, #3
90008a84:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
90008a88:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
90008a8c:	2be5      	cmp	r3, #229	; 0xe5
90008a8e:	bf04      	itt	eq
90008a90:	2305      	moveq	r3, #5
90008a92:	f886 3024 	strbeq.w	r3, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
90008a96:	f1b8 0f08 	cmp.w	r8, #8
90008a9a:	bf04      	itt	eq
90008a9c:	00ad      	lsleq	r5, r5, #2
90008a9e:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
90008aa0:	f005 030c 	and.w	r3, r5, #12
90008aa4:	2b0c      	cmp	r3, #12
90008aa6:	d003      	beq.n	90008ab0 <follow_path+0xcc>
90008aa8:	f005 0203 	and.w	r2, r5, #3
90008aac:	2a03      	cmp	r2, #3
90008aae:	d101      	bne.n	90008ab4 <follow_path+0xd0>
90008ab0:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
90008ab4:	07a1      	lsls	r1, r4, #30
90008ab6:	d409      	bmi.n	90008acc <follow_path+0xe8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
90008ab8:	f005 0503 	and.w	r5, r5, #3
90008abc:	2d01      	cmp	r5, #1
90008abe:	bf08      	it	eq
90008ac0:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
90008ac4:	2b04      	cmp	r3, #4
90008ac6:	bf08      	it	eq
90008ac8:	f044 0408 	orreq.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
90008acc:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
90008ace:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
90008ad2:	f7ff fd1f 	bl	90008514 <dir_find>
			ns = dp->fn[NSFLAG];
90008ad6:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
90008ada:	b3c0      	cbz	r0, 90008b4e <follow_path+0x16a>
				if (res == FR_NO_FILE) {	/* Object is not found */
90008adc:	2804      	cmp	r0, #4
90008ade:	d103      	bne.n	90008ae8 <follow_path+0x104>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
90008ae0:	f013 0f04 	tst.w	r3, #4
90008ae4:	bf08      	it	eq
90008ae6:	2005      	moveq	r0, #5
}
90008ae8:	b003      	add	sp, #12
90008aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
90008aee:	42ba      	cmp	r2, r7
90008af0:	d002      	beq.n	90008af8 <follow_path+0x114>
90008af2:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
90008af6:	d8c7      	bhi.n	90008a88 <follow_path+0xa4>
			b <<= 2; continue;
90008af8:	00ad      	lsls	r5, r5, #2
90008afa:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11;	/* Enter extension section */
90008afc:	f04f 080b 	mov.w	r8, #11
90008b00:	2308      	movs	r3, #8
			b <<= 2; continue;
90008b02:	b2ed      	uxtb	r5, r5
90008b04:	e089      	b.n	90008c1a <follow_path+0x236>
		if (w >= 0x80) {				/* Non ASCII character */
90008b06:	287f      	cmp	r0, #127	; 0x7f
90008b08:	d90e      	bls.n	90008b28 <follow_path+0x144>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
90008b0a:	2100      	movs	r1, #0
			cf |= NS_LFN;				/* Force create LFN entry */
90008b0c:	f044 0402 	orr.w	r4, r4, #2
90008b10:	e9cd 2300 	strd	r2, r3, [sp]
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
90008b14:	f000 fda6 	bl	90009664 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
90008b18:	e9dd 2300 	ldrd	r2, r3, [sp]
90008b1c:	b160      	cbz	r0, 90008b38 <follow_path+0x154>
90008b1e:	4948      	ldr	r1, [pc, #288]	; (90008c40 <follow_path+0x25c>)
90008b20:	4408      	add	r0, r1
90008b22:	f810 0c73 	ldrb.w	r0, [r0, #-115]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
90008b26:	b138      	cbz	r0, 90008b38 <follow_path+0x154>
	while (*str && *str != chr) str++;
90008b28:	f8df c118 	ldr.w	ip, [pc, #280]	; 90008c44 <follow_path+0x260>
90008b2c:	f81c 1b01 	ldrb.w	r1, [ip], #1
90008b30:	2900      	cmp	r1, #0
90008b32:	d076      	beq.n	90008c22 <follow_path+0x23e>
90008b34:	4281      	cmp	r1, r0
90008b36:	d1f9      	bne.n	90008b2c <follow_path+0x148>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
90008b38:	f044 0403 	orr.w	r4, r4, #3
90008b3c:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
90008b3e:	18f1      	adds	r1, r6, r3
90008b40:	3301      	adds	r3, #1
90008b42:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
90008b46:	e068      	b.n	90008c1a <follow_path+0x236>
					b |= 2;
90008b48:	f045 0502 	orr.w	r5, r5, #2
90008b4c:	e7f7      	b.n	90008b3e <follow_path+0x15a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
90008b4e:	075a      	lsls	r2, r3, #29
90008b50:	d4ca      	bmi.n	90008ae8 <follow_path+0x104>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
90008b52:	79b3      	ldrb	r3, [r6, #6]
90008b54:	06db      	lsls	r3, r3, #27
90008b56:	d562      	bpl.n	90008c1e <follow_path+0x23a>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
90008b58:	6973      	ldr	r3, [r6, #20]
90008b5a:	f10b 0134 	add.w	r1, fp, #52	; 0x34
90008b5e:	f89b 0000 	ldrb.w	r0, [fp]
90008b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008b66:	4419      	add	r1, r3
90008b68:	f7ff fb2f 	bl	900081ca <ld_clust.isra.0>
90008b6c:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
90008b6e:	6833      	ldr	r3, [r6, #0]
90008b70:	f109 32ff 	add.w	r2, r9, #4294967295
90008b74:	2700      	movs	r7, #0
90008b76:	f8d3 a00c 	ldr.w	sl, [r3, #12]
90008b7a:	f1aa 0802 	sub.w	r8, sl, #2
90008b7e:	4643      	mov	r3, r8
		w = p[si++];					/* Get a character */
90008b80:	f812 4f01 	ldrb.w	r4, [r2, #1]!
90008b84:	1c7d      	adds	r5, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
90008b86:	2c1f      	cmp	r4, #31
90008b88:	d90c      	bls.n	90008ba4 <follow_path+0x1c0>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
90008b8a:	2c2f      	cmp	r4, #47	; 0x2f
90008b8c:	d002      	beq.n	90008b94 <follow_path+0x1b0>
90008b8e:	2c5c      	cmp	r4, #92	; 0x5c
90008b90:	f47f af46 	bne.w	90008a20 <follow_path+0x3c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
90008b94:	f819 3005 	ldrb.w	r3, [r9, r5]
90008b98:	2b2f      	cmp	r3, #47	; 0x2f
90008b9a:	f43f af3f 	beq.w	90008a1c <follow_path+0x38>
90008b9e:	2b5c      	cmp	r3, #92	; 0x5c
90008ba0:	f43f af3c 	beq.w	90008a1c <follow_path+0x38>
	*path = &p[si];						/* Return pointer to the next segment */
90008ba4:	44a9      	add	r9, r5
	while (di) {						/* Snip off trailing spaces and dots if exist */
90008ba6:	2f00      	cmp	r7, #0
90008ba8:	f47f af54 	bne.w	90008a54 <follow_path+0x70>
	lfn[di] = 0;						/* LFN is created */
90008bac:	2300      	movs	r3, #0
90008bae:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
90008bb2:	2f00      	cmp	r7, #0
90008bb4:	f43f af48 	beq.w	90008a48 <follow_path+0x64>
	mem_set(dp->fn, ' ', 11);
90008bb8:	2120      	movs	r1, #32
90008bba:	220b      	movs	r2, #11
90008bbc:	f106 0024 	add.w	r0, r6, #36	; 0x24
90008bc0:	f7fe fef4 	bl	900079ac <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
90008bc4:	4619      	mov	r1, r3
90008bc6:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
90008bca:	2b20      	cmp	r3, #32
90008bcc:	f43f af4b 	beq.w	90008a66 <follow_path+0x82>
90008bd0:	2b2e      	cmp	r3, #46	; 0x2e
90008bd2:	f43f af48 	beq.w	90008a66 <follow_path+0x82>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
90008bd6:	2c1f      	cmp	r4, #31
90008bd8:	bf8c      	ite	hi
90008bda:	2400      	movhi	r4, #0
90008bdc:	2401      	movls	r4, #1
90008bde:	00a4      	lsls	r4, r4, #2
	if (si) cf |= NS_LOSS | NS_LFN;
90008be0:	b109      	cbz	r1, 90008be6 <follow_path+0x202>
90008be2:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
90008be6:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
90008bea:	2b2e      	cmp	r3, #46	; 0x2e
90008bec:	d001      	beq.n	90008bf2 <follow_path+0x20e>
90008bee:	3f01      	subs	r7, #1
90008bf0:	d1f9      	bne.n	90008be6 <follow_path+0x202>
		dp->fn[i++] = (BYTE)w;
90008bf2:	2300      	movs	r3, #0
90008bf4:	f04f 0808 	mov.w	r8, #8
90008bf8:	461d      	mov	r5, r3
		w = lfn[si++];					/* Get an LFN character */
90008bfa:	f83a 0011 	ldrh.w	r0, [sl, r1, lsl #1]
90008bfe:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
90008c00:	2800      	cmp	r0, #0
90008c02:	f43f af41 	beq.w	90008a88 <follow_path+0xa4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
90008c06:	2820      	cmp	r0, #32
90008c08:	d005      	beq.n	90008c16 <follow_path+0x232>
90008c0a:	282e      	cmp	r0, #46	; 0x2e
90008c0c:	f47f af2d 	bne.w	90008a6a <follow_path+0x86>
90008c10:	42ba      	cmp	r2, r7
90008c12:	f43f af2e 	beq.w	90008a72 <follow_path+0x8e>
			cf |= NS_LOSS | NS_LFN; continue;
90008c16:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
90008c1a:	4611      	mov	r1, r2
90008c1c:	e7ed      	b.n	90008bfa <follow_path+0x216>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
90008c1e:	2005      	movs	r0, #5
	return res;
90008c20:	e762      	b.n	90008ae8 <follow_path+0x104>
				if (IsUpper(w)) {		/* ASCII large capital */
90008c22:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
90008c26:	2919      	cmp	r1, #25
90008c28:	d98e      	bls.n	90008b48 <follow_path+0x164>
					if (IsLower(w)) {	/* ASCII small capital */
90008c2a:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
90008c2e:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
90008c30:	bf9e      	ittt	ls
90008c32:	3820      	subls	r0, #32
90008c34:	f045 0501 	orrls.w	r5, r5, #1
90008c38:	b280      	uxthls	r0, r0
90008c3a:	e780      	b.n	90008b3e <follow_path+0x15a>
90008c3c:	90011296 	.word	0x90011296
90008c40:	900108c0 	.word	0x900108c0
90008c44:	9001129f 	.word	0x9001129f

90008c48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
90008c48:	b530      	push	{r4, r5, lr}
90008c4a:	b085      	sub	sp, #20
90008c4c:	4614      	mov	r4, r2
90008c4e:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
90008c52:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
90008c54:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
90008c56:	f7fe ff8e 	bl	90007b76 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
90008c5a:	2800      	cmp	r0, #0
90008c5c:	db19      	blt.n	90008c92 <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
90008c5e:	490f      	ldr	r1, [pc, #60]	; (90008c9c <f_mount+0x54>)
90008c60:	0085      	lsls	r5, r0, #2
90008c62:	eb01 0080 	add.w	r0, r1, r0, lsl #2
90008c66:	6a00      	ldr	r0, [r0, #32]

	if (cfs) {
90008c68:	b118      	cbz	r0, 90008c72 <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
90008c6a:	f7fe ff3f 	bl	90007aec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
90008c6e:	2300      	movs	r3, #0
90008c70:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
90008c72:	9801      	ldr	r0, [sp, #4]
90008c74:	b108      	cbz	r0, 90008c7a <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
90008c76:	2300      	movs	r3, #0
90008c78:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
90008c7a:	4429      	add	r1, r5
90008c7c:	6208      	str	r0, [r1, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
90008c7e:	b130      	cbz	r0, 90008c8e <f_mount+0x46>
90008c80:	2c01      	cmp	r4, #1
90008c82:	d108      	bne.n	90008c96 <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
90008c84:	2200      	movs	r2, #0
90008c86:	a901      	add	r1, sp, #4
90008c88:	4668      	mov	r0, sp
90008c8a:	f7ff f8a9 	bl	90007de0 <find_volume>
	LEAVE_FF(fs, res);
}
90008c8e:	b005      	add	sp, #20
90008c90:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
90008c92:	200b      	movs	r0, #11
90008c94:	e7fb      	b.n	90008c8e <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
90008c96:	2000      	movs	r0, #0
90008c98:	e7f9      	b.n	90008c8e <f_mount+0x46>
90008c9a:	bf00      	nop
90008c9c:	20000774 	.word	0x20000774

90008ca0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
90008ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90008ca4:	b090      	sub	sp, #64	; 0x40
90008ca6:	4691      	mov	r9, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
90008ca8:	4605      	mov	r5, r0
{
90008caa:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
90008cac:	2800      	cmp	r0, #0
90008cae:	f000 8100 	beq.w	90008eb2 <f_open+0x212>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
90008cb2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
90008cb6:	a902      	add	r1, sp, #8
90008cb8:	a801      	add	r0, sp, #4
90008cba:	463a      	mov	r2, r7
90008cbc:	f7ff f890 	bl	90007de0 <find_volume>
	if (res == FR_OK) {
90008cc0:	2800      	cmp	r0, #0
90008cc2:	f040 80f4 	bne.w	90008eae <f_open+0x20e>
		dj.obj.fs = fs;
90008cc6:	9e02      	ldr	r6, [sp, #8]
		INIT_NAMBUF(fs);
90008cc8:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
90008ccc:	9603      	str	r6, [sp, #12]
		INIT_NAMBUF(fs);
90008cce:	f000 fcc4 	bl	9000965a <ff_memalloc>
90008cd2:	4680      	mov	r8, r0
90008cd4:	2800      	cmp	r0, #0
90008cd6:	f000 80ee 	beq.w	90008eb6 <f_open+0x216>
90008cda:	60f0      	str	r0, [r6, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
90008cdc:	a803      	add	r0, sp, #12
90008cde:	9901      	ldr	r1, [sp, #4]
90008ce0:	f7ff fe80 	bl	900089e4 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
90008ce4:	4604      	mov	r4, r0
90008ce6:	b960      	cbnz	r0, 90008d02 <f_open+0x62>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
90008ce8:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
90008cec:	2b00      	cmp	r3, #0
90008cee:	db5d      	blt.n	90008dac <f_open+0x10c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
90008cf0:	f017 0f3e 	tst.w	r7, #62	; 0x3e
90008cf4:	a803      	add	r0, sp, #12
90008cf6:	bf14      	ite	ne
90008cf8:	2101      	movne	r1, #1
90008cfa:	2100      	moveq	r1, #0
90008cfc:	f7fe fe5c 	bl	900079b8 <chk_lock>
90008d00:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
90008d02:	f019 0f1c 	tst.w	r9, #28
90008d06:	d072      	beq.n	90008dee <f_open+0x14e>
			if (res != FR_OK) {					/* No file, create new */
90008d08:	2c00      	cmp	r4, #0
90008d0a:	d051      	beq.n	90008db0 <f_open+0x110>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
90008d0c:	2c04      	cmp	r4, #4
90008d0e:	d143      	bne.n	90008d98 <f_open+0xf8>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
90008d10:	4b6a      	ldr	r3, [pc, #424]	; (90008ebc <f_open+0x21c>)
90008d12:	681a      	ldr	r2, [r3, #0]
90008d14:	b11a      	cbz	r2, 90008d1e <f_open+0x7e>
90008d16:	691b      	ldr	r3, [r3, #16]
90008d18:	2b00      	cmp	r3, #0
90008d1a:	f040 80c2 	bne.w	90008ea2 <f_open+0x202>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
90008d1e:	a803      	add	r0, sp, #12
90008d20:	f7ff fca8 	bl	90008674 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
90008d24:	4604      	mov	r4, r0
90008d26:	2800      	cmp	r0, #0
90008d28:	d136      	bne.n	90008d98 <f_open+0xf8>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
90008d2a:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
90008d2e:	f7fe fe31 	bl	90007994 <get_fattime>
90008d32:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
90008d34:	9000      	str	r0, [sp, #0]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
90008d36:	2220      	movs	r2, #32
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
90008d38:	980b      	ldr	r0, [sp, #44]	; 0x2c
90008d3a:	300e      	adds	r0, #14
90008d3c:	f7fe fe2e 	bl	9000799c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
90008d40:	980b      	ldr	r0, [sp, #44]	; 0x2c
90008d42:	9900      	ldr	r1, [sp, #0]
90008d44:	3016      	adds	r0, #22
90008d46:	f7fe fe29 	bl	9000799c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
90008d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90008d4c:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
90008d4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
90008d50:	7830      	ldrb	r0, [r6, #0]
90008d52:	f7ff fa3a 	bl	900081ca <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
90008d56:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
90008d58:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
90008d5a:	4630      	mov	r0, r6
90008d5c:	f7fe fef0 	bl	90007b40 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
90008d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
90008d62:	2200      	movs	r2, #0
90008d64:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
90008d66:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
90008d68:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
90008d6a:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
90008d6c:	2301      	movs	r3, #1
90008d6e:	70f3      	strb	r3, [r6, #3]

					if (cl) {							/* Remove the cluster chain if exist */
90008d70:	f1b9 0f00 	cmp.w	r9, #0
90008d74:	d027      	beq.n	90008dc6 <f_open+0x126>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
90008d76:	4649      	mov	r1, r9
90008d78:	a803      	add	r0, sp, #12
						dw = fs->winsect;
90008d7a:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
90008d7e:	f7ff fa82 	bl	90008286 <remove_chain>
						if (res == FR_OK) {
90008d82:	4604      	mov	r4, r0
90008d84:	b940      	cbnz	r0, 90008d98 <f_open+0xf8>
							res = move_window(fs, dw);
90008d86:	4651      	mov	r1, sl
90008d88:	4630      	mov	r0, r6
90008d8a:	f7fe ffd3 	bl	90007d34 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
90008d8e:	f109 31ff 	add.w	r1, r9, #4294967295
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
90008d92:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
90008d94:	6131      	str	r1, [r6, #16]
		if (res == FR_OK) {
90008d96:	b1b0      	cbz	r0, 90008dc6 <f_open+0x126>
				}
			}
#endif
		}

		FREE_NAMBUF();
90008d98:	4640      	mov	r0, r8
90008d9a:	f000 fc60 	bl	9000965e <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
90008d9e:	b10c      	cbz	r4, 90008da4 <f_open+0x104>
90008da0:	2300      	movs	r3, #0
90008da2:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
90008da4:	4620      	mov	r0, r4
90008da6:	b010      	add	sp, #64	; 0x40
90008da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
90008dac:	2406      	movs	r4, #6
90008dae:	e7a8      	b.n	90008d02 <f_open+0x62>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
90008db0:	f89d 3012 	ldrb.w	r3, [sp, #18]
90008db4:	f013 0f11 	tst.w	r3, #17
90008db8:	d124      	bne.n	90008e04 <f_open+0x164>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008dba:	f019 0f04 	tst.w	r9, #4
90008dbe:	d172      	bne.n	90008ea6 <f_open+0x206>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
90008dc0:	f019 0f08 	tst.w	r9, #8
90008dc4:	d1b3      	bne.n	90008d2e <f_open+0x8e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
90008dc6:	0738      	lsls	r0, r7, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
90008dc8:	6b33      	ldr	r3, [r6, #48]	; 0x30
			fp->dir_ptr = dj.dir;
90008dca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
90008dcc:	a803      	add	r0, sp, #12
				mode |= FA_MODIFIED;
90008dce:	bf48      	it	mi
90008dd0:	f047 0740 	orrmi.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
90008dd4:	626b      	str	r3, [r5, #36]	; 0x24
			fp->dir_ptr = dj.dir;
90008dd6:	62ac      	str	r4, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
90008dd8:	f017 0ffe 	tst.w	r7, #254	; 0xfe
90008ddc:	bf14      	ite	ne
90008dde:	2101      	movne	r1, #1
90008de0:	2100      	moveq	r1, #0
90008de2:	f7fe fe23 	bl	90007a2c <inc_lock>
90008de6:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
90008de8:	b970      	cbnz	r0, 90008e08 <f_open+0x168>
90008dea:	2402      	movs	r4, #2
90008dec:	e7d4      	b.n	90008d98 <f_open+0xf8>
			if (res == FR_OK) {					/* Following succeeded */
90008dee:	2c00      	cmp	r4, #0
90008df0:	d1d2      	bne.n	90008d98 <f_open+0xf8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
90008df2:	f89d 3012 	ldrb.w	r3, [sp, #18]
90008df6:	06da      	lsls	r2, r3, #27
90008df8:	d457      	bmi.n	90008eaa <f_open+0x20a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
90008dfa:	f019 0f02 	tst.w	r9, #2
90008dfe:	d0e2      	beq.n	90008dc6 <f_open+0x126>
90008e00:	07dc      	lsls	r4, r3, #31
90008e02:	d5e0      	bpl.n	90008dc6 <f_open+0x126>
					res = FR_DENIED;
90008e04:	2407      	movs	r4, #7
90008e06:	e7c7      	b.n	90008d98 <f_open+0xf8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
90008e08:	7830      	ldrb	r0, [r6, #0]
90008e0a:	4621      	mov	r1, r4
90008e0c:	f7ff f9dd 	bl	900081ca <ld_clust.isra.0>
90008e10:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
90008e12:	f104 001c 	add.w	r0, r4, #28
			fp->cltbl = 0;			/* Disable fast seek mode */
90008e16:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
90008e18:	f7fe fdbe 	bl	90007998 <ld_dword>
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008e1c:	f105 0930 	add.w	r9, r5, #48	; 0x30
			fp->obj.id = fs->id;
90008e20:	88f3      	ldrh	r3, [r6, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008e22:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
90008e26:	60e8      	str	r0, [r5, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008e28:	4648      	mov	r0, r9
			fp->cltbl = 0;			/* Disable fast seek mode */
90008e2a:	62e9      	str	r1, [r5, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
90008e2c:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
90008e2e:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
90008e30:	752f      	strb	r7, [r5, #20]
			fp->err = 0;			/* Clear error flag */
90008e32:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
90008e34:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
90008e36:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008e38:	f7fe fdb8 	bl	900079ac <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
90008e3c:	06ba      	lsls	r2, r7, #26
90008e3e:	d401      	bmi.n	90008e44 <f_open+0x1a4>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008e40:	2400      	movs	r4, #0
90008e42:	e7a9      	b.n	90008d98 <f_open+0xf8>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
90008e44:	68ef      	ldr	r7, [r5, #12]
90008e46:	2f00      	cmp	r7, #0
90008e48:	d0fa      	beq.n	90008e40 <f_open+0x1a0>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
90008e4a:	8974      	ldrh	r4, [r6, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
90008e4c:	68a9      	ldr	r1, [r5, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
90008e4e:	0264      	lsls	r4, r4, #9
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
90008e50:	61af      	str	r7, [r5, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
90008e52:	42bc      	cmp	r4, r7
90008e54:	d318      	bcc.n	90008e88 <f_open+0x1e8>
90008e56:	2400      	movs	r4, #0
				fp->clust = clst;
90008e58:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
90008e5a:	2c00      	cmp	r4, #0
90008e5c:	d19c      	bne.n	90008d98 <f_open+0xf8>
90008e5e:	f3c7 0308 	ubfx	r3, r7, #0, #9
90008e62:	2b00      	cmp	r3, #0
90008e64:	d0ec      	beq.n	90008e40 <f_open+0x1a0>
					if ((sc = clust2sect(fs, clst)) == 0) {
90008e66:	4630      	mov	r0, r6
90008e68:	f7fe fe4e 	bl	90007b08 <clust2sect>
90008e6c:	2800      	cmp	r0, #0
90008e6e:	d0bc      	beq.n	90008dea <f_open+0x14a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
90008e70:	eb00 2257 	add.w	r2, r0, r7, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
90008e74:	2301      	movs	r3, #1
90008e76:	4649      	mov	r1, r9
						fp->sect = sc + (DWORD)(ofs / SS(fs));
90008e78:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
90008e7a:	7870      	ldrb	r0, [r6, #1]
90008e7c:	f7fe fd60 	bl	90007940 <disk_read>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008e80:	1e04      	subs	r4, r0, #0
90008e82:	bf18      	it	ne
90008e84:	2401      	movne	r4, #1
90008e86:	e787      	b.n	90008d98 <f_open+0xf8>
					clst = get_fat(&fp->obj, clst);
90008e88:	6828      	ldr	r0, [r5, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
90008e8a:	1b3f      	subs	r7, r7, r4
					clst = get_fat(&fp->obj, clst);
90008e8c:	f7ff f9a5 	bl	900081da <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
90008e90:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
90008e92:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
90008e94:	d903      	bls.n	90008e9e <f_open+0x1fe>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
90008e96:	1c43      	adds	r3, r0, #1
90008e98:	d1db      	bne.n	90008e52 <f_open+0x1b2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
90008e9a:	2401      	movs	r4, #1
90008e9c:	e7dc      	b.n	90008e58 <f_open+0x1b8>
					if (clst <= 1) res = FR_INT_ERR;
90008e9e:	2402      	movs	r4, #2
90008ea0:	e7da      	b.n	90008e58 <f_open+0x1b8>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
90008ea2:	2412      	movs	r4, #18
90008ea4:	e778      	b.n	90008d98 <f_open+0xf8>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008ea6:	2408      	movs	r4, #8
90008ea8:	e776      	b.n	90008d98 <f_open+0xf8>
					res = FR_NO_FILE;
90008eaa:	2404      	movs	r4, #4
90008eac:	e774      	b.n	90008d98 <f_open+0xf8>
90008eae:	4604      	mov	r4, r0
90008eb0:	e776      	b.n	90008da0 <f_open+0x100>
	if (!fp) return FR_INVALID_OBJECT;
90008eb2:	2409      	movs	r4, #9
90008eb4:	e776      	b.n	90008da4 <f_open+0x104>
		INIT_NAMBUF(fs);
90008eb6:	2411      	movs	r4, #17
90008eb8:	e774      	b.n	90008da4 <f_open+0x104>
90008eba:	bf00      	nop
90008ebc:	20000774 	.word	0x20000774

90008ec0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
90008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008ec4:	b087      	sub	sp, #28
90008ec6:	4617      	mov	r7, r2
90008ec8:	4689      	mov	r9, r1
90008eca:	4604      	mov	r4, r0
90008ecc:	9301      	str	r3, [sp, #4]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
90008ece:	2300      	movs	r3, #0
90008ed0:	9a01      	ldr	r2, [sp, #4]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
90008ed2:	a905      	add	r1, sp, #20
	*br = 0;	/* Clear read byte counter */
90008ed4:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
90008ed6:	f7fe fe6a 	bl	90007bae <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
90008eda:	4605      	mov	r5, r0
90008edc:	bb20      	cbnz	r0, 90008f28 <f_read+0x68>
90008ede:	7d65      	ldrb	r5, [r4, #21]
90008ee0:	bb15      	cbnz	r5, 90008f28 <f_read+0x68>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
90008ee2:	7d23      	ldrb	r3, [r4, #20]
90008ee4:	f013 0301 	ands.w	r3, r3, #1
90008ee8:	9302      	str	r3, [sp, #8]
90008eea:	f000 8098 	beq.w	9000901e <f_read+0x15e>
	remain = fp->obj.objsize - fp->fptr;
90008eee:	68e6      	ldr	r6, [r4, #12]
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
90008ef0:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	remain = fp->obj.objsize - fp->fptr;
90008ef4:	69a3      	ldr	r3, [r4, #24]
90008ef6:	1af6      	subs	r6, r6, r3
90008ef8:	42be      	cmp	r6, r7
90008efa:	bf28      	it	cs
90008efc:	463e      	movcs	r6, r7
	for ( ;  btr;								/* Repeat until all data read */
90008efe:	b19e      	cbz	r6, 90008f28 <f_read+0x68>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
90008f00:	69a1      	ldr	r1, [r4, #24]
90008f02:	f3c1 0308 	ubfx	r3, r1, #0, #9
90008f06:	2b00      	cmp	r3, #0
90008f08:	d17b      	bne.n	90009002 <f_read+0x142>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
90008f0a:	f8dd a014 	ldr.w	sl, [sp, #20]
90008f0e:	f8ba 800a 	ldrh.w	r8, [sl, #10]
90008f12:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
90008f16:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
90008f1a:	d11b      	bne.n	90008f54 <f_read+0x94>
				if (fp->fptr == 0) {			/* On the top of the file? */
90008f1c:	b941      	cbnz	r1, 90008f30 <f_read+0x70>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
90008f1e:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
90008f20:	2801      	cmp	r0, #1
90008f22:	d810      	bhi.n	90008f46 <f_read+0x86>
90008f24:	2502      	movs	r5, #2
90008f26:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
90008f28:	4628      	mov	r0, r5
90008f2a:	b007      	add	sp, #28
90008f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
90008f30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008f32:	b11b      	cbz	r3, 90008f3c <f_read+0x7c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
90008f34:	4620      	mov	r0, r4
90008f36:	f7fe fdf2 	bl	90007b1e <clmt_clust>
90008f3a:	e7f1      	b.n	90008f20 <f_read+0x60>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
90008f3c:	69e1      	ldr	r1, [r4, #28]
90008f3e:	6820      	ldr	r0, [r4, #0]
90008f40:	f7ff f94b 	bl	900081da <get_fat.isra.0>
90008f44:	e7ec      	b.n	90008f20 <f_read+0x60>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90008f46:	1c43      	adds	r3, r0, #1
90008f48:	d103      	bne.n	90008f52 <f_read+0x92>
90008f4a:	2301      	movs	r3, #1
90008f4c:	9d02      	ldr	r5, [sp, #8]
90008f4e:	7563      	strb	r3, [r4, #21]
90008f50:	e7ea      	b.n	90008f28 <f_read+0x68>
				fp->clust = clst;				/* Update current cluster */
90008f52:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
90008f54:	69e1      	ldr	r1, [r4, #28]
90008f56:	4650      	mov	r0, sl
90008f58:	f7fe fdd6 	bl	90007b08 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
90008f5c:	2800      	cmp	r0, #0
90008f5e:	d0e1      	beq.n	90008f24 <f_read+0x64>
			if (cc) {							/* Read maximum contiguous sectors directly */
90008f60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
90008f64:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
90008f68:	d32e      	bcc.n	90008fc8 <f_read+0x108>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90008f6a:	f8ba 200a 	ldrh.w	r2, [sl, #10]
90008f6e:	eb08 2156 	add.w	r1, r8, r6, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
90008f72:	0a73      	lsrs	r3, r6, #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008f74:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90008f78:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008f7a:	4649      	mov	r1, r9
					cc = fs->csize - csect;
90008f7c:	bf88      	it	hi
90008f7e:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008f82:	463a      	mov	r2, r7
90008f84:	9303      	str	r3, [sp, #12]
90008f86:	f7fe fcdb 	bl	90007940 <disk_read>
90008f8a:	2800      	cmp	r0, #0
90008f8c:	d1dd      	bne.n	90008f4a <f_read+0x8a>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
90008f8e:	f994 2014 	ldrsb.w	r2, [r4, #20]
90008f92:	9b03      	ldr	r3, [sp, #12]
90008f94:	2a00      	cmp	r2, #0
90008f96:	da0b      	bge.n	90008fb0 <f_read+0xf0>
90008f98:	6a20      	ldr	r0, [r4, #32]
90008f9a:	1bc0      	subs	r0, r0, r7
90008f9c:	4298      	cmp	r0, r3
90008f9e:	d207      	bcs.n	90008fb0 <f_read+0xf0>
	if (cnt) {
90008fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
90008fa4:	4659      	mov	r1, fp
90008fa6:	eb09 2040 	add.w	r0, r9, r0, lsl #9
90008faa:	f7fe fe8e 	bl	90007cca <mem_cpy.part.0>
90008fae:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
90008fb0:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
90008fb2:	69a3      	ldr	r3, [r4, #24]
90008fb4:	44b9      	add	r9, r7
90008fb6:	9a01      	ldr	r2, [sp, #4]
90008fb8:	1bf6      	subs	r6, r6, r7
90008fba:	443b      	add	r3, r7
90008fbc:	61a3      	str	r3, [r4, #24]
90008fbe:	9b01      	ldr	r3, [sp, #4]
90008fc0:	681b      	ldr	r3, [r3, #0]
90008fc2:	443b      	add	r3, r7
90008fc4:	6013      	str	r3, [r2, #0]
90008fc6:	e79a      	b.n	90008efe <f_read+0x3e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
90008fc8:	6a22      	ldr	r2, [r4, #32]
90008fca:	42ba      	cmp	r2, r7
90008fcc:	d018      	beq.n	90009000 <f_read+0x140>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
90008fce:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008fd2:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
90008fd6:	2b00      	cmp	r3, #0
90008fd8:	da09      	bge.n	90008fee <f_read+0x12e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008fda:	2301      	movs	r3, #1
90008fdc:	4659      	mov	r1, fp
90008fde:	f7fe fcbd 	bl	9000795c <disk_write>
90008fe2:	2800      	cmp	r0, #0
90008fe4:	d1b1      	bne.n	90008f4a <f_read+0x8a>
					fp->flag &= (BYTE)~FA_DIRTY;
90008fe6:	7d23      	ldrb	r3, [r4, #20]
90008fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90008fec:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
90008fee:	2301      	movs	r3, #1
90008ff0:	463a      	mov	r2, r7
90008ff2:	4659      	mov	r1, fp
90008ff4:	f89a 0001 	ldrb.w	r0, [sl, #1]
90008ff8:	f7fe fca2 	bl	90007940 <disk_read>
90008ffc:	2800      	cmp	r0, #0
90008ffe:	d1a4      	bne.n	90008f4a <f_read+0x8a>
			fp->sect = sect;
90009000:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
90009002:	69a1      	ldr	r1, [r4, #24]
90009004:	4648      	mov	r0, r9
90009006:	f3c1 0108 	ubfx	r1, r1, #0, #9
9000900a:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
9000900e:	4459      	add	r1, fp
90009010:	42b7      	cmp	r7, r6
90009012:	bf28      	it	cs
90009014:	4637      	movcs	r7, r6
	if (cnt) {
90009016:	463a      	mov	r2, r7
90009018:	f7fe fe57 	bl	90007cca <mem_cpy.part.0>
}
9000901c:	e7c9      	b.n	90008fb2 <f_read+0xf2>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
9000901e:	2507      	movs	r5, #7
90009020:	e782      	b.n	90008f28 <f_read+0x68>

90009022 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
90009022:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90009026:	469a      	mov	sl, r3
90009028:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
9000902a:	2300      	movs	r3, #0
{
9000902c:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
9000902e:	a903      	add	r1, sp, #12
{
90009030:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
90009032:	f8ca 3000 	str.w	r3, [sl]
{
90009036:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
90009038:	f7fe fdb9 	bl	90007bae <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
9000903c:	4605      	mov	r5, r0
9000903e:	bb60      	cbnz	r0, 9000909a <f_write+0x78>
90009040:	7d65      	ldrb	r5, [r4, #21]
90009042:	bb55      	cbnz	r5, 9000909a <f_write+0x78>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
90009044:	7d23      	ldrb	r3, [r4, #20]
90009046:	079a      	lsls	r2, r3, #30
90009048:	f140 80af 	bpl.w	900091aa <f_write+0x188>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
9000904c:	69a3      	ldr	r3, [r4, #24]
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
9000904e:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
90009052:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
90009054:	bf28      	it	cs
90009056:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
90009058:	b1de      	cbz	r6, 90009092 <f_write+0x70>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
9000905a:	69a1      	ldr	r1, [r4, #24]
9000905c:	f3c1 0308 	ubfx	r3, r1, #0, #9
90009060:	2b00      	cmp	r3, #0
90009062:	f040 8090 	bne.w	90009186 <f_write+0x164>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
90009066:	f8dd 900c 	ldr.w	r9, [sp, #12]
9000906a:	f8b9 700a 	ldrh.w	r7, [r9, #10]
9000906e:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
90009070:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
90009074:	d124      	bne.n	900090c0 <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
90009076:	b931      	cbnz	r1, 90009086 <f_write+0x64>
					clst = fp->obj.sclust;	/* Follow from the origin */
90009078:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
9000907a:	b9a0      	cbnz	r0, 900090a6 <f_write+0x84>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
9000907c:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
9000907e:	4620      	mov	r0, r4
90009080:	f7ff f939 	bl	900082f6 <create_chain>
90009084:	e004      	b.n	90009090 <f_write+0x6e>
					if (fp->cltbl) {
90009086:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90009088:	b15b      	cbz	r3, 900090a2 <f_write+0x80>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
9000908a:	4620      	mov	r0, r4
9000908c:	f7fe fd47 	bl	90007b1e <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
90009090:	b948      	cbnz	r0, 900090a6 <f_write+0x84>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
90009092:	7d23      	ldrb	r3, [r4, #20]
90009094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90009098:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
9000909a:	4628      	mov	r0, r5
9000909c:	b005      	add	sp, #20
9000909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
900090a2:	69e1      	ldr	r1, [r4, #28]
900090a4:	e7eb      	b.n	9000907e <f_write+0x5c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
900090a6:	2801      	cmp	r0, #1
900090a8:	d102      	bne.n	900090b0 <f_write+0x8e>
900090aa:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
900090ac:	7565      	strb	r5, [r4, #21]
900090ae:	e7f4      	b.n	9000909a <f_write+0x78>
900090b0:	1c43      	adds	r3, r0, #1
900090b2:	d101      	bne.n	900090b8 <f_write+0x96>
900090b4:	2501      	movs	r5, #1
900090b6:	e7f9      	b.n	900090ac <f_write+0x8a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
900090b8:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
900090ba:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
900090bc:	b903      	cbnz	r3, 900090c0 <f_write+0x9e>
900090be:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
900090c0:	f994 3014 	ldrsb.w	r3, [r4, #20]
900090c4:	2b00      	cmp	r3, #0
900090c6:	da0c      	bge.n	900090e2 <f_write+0xc0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
900090c8:	2301      	movs	r3, #1
900090ca:	6a22      	ldr	r2, [r4, #32]
900090cc:	4659      	mov	r1, fp
900090ce:	f899 0001 	ldrb.w	r0, [r9, #1]
900090d2:	f7fe fc43 	bl	9000795c <disk_write>
900090d6:	2800      	cmp	r0, #0
900090d8:	d1ec      	bne.n	900090b4 <f_write+0x92>
				fp->flag &= (BYTE)~FA_DIRTY;
900090da:	7d23      	ldrb	r3, [r4, #20]
900090dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900090e0:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
900090e2:	69e1      	ldr	r1, [r4, #28]
900090e4:	4648      	mov	r0, r9
900090e6:	f7fe fd0f 	bl	90007b08 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
900090ea:	2800      	cmp	r0, #0
900090ec:	d0dd      	beq.n	900090aa <f_write+0x88>
			if (cc) {						/* Write maximum contiguous sectors directly */
900090ee:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
900090f2:	eb07 0200 	add.w	r2, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
900090f6:	d334      	bcc.n	90009162 <f_write+0x140>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
900090f8:	f8b9 100a 	ldrh.w	r1, [r9, #10]
900090fc:	eb07 2056 	add.w	r0, r7, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
90009100:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90009102:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90009104:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
90009108:	bf88      	it	hi
9000910a:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
9000910c:	4641      	mov	r1, r8
9000910e:	e9cd 2300 	strd	r2, r3, [sp]
90009112:	f7fe fc23 	bl	9000795c <disk_write>
90009116:	2800      	cmp	r0, #0
90009118:	d1cc      	bne.n	900090b4 <f_write+0x92>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
9000911a:	6a21      	ldr	r1, [r4, #32]
9000911c:	9a00      	ldr	r2, [sp, #0]
9000911e:	9b01      	ldr	r3, [sp, #4]
90009120:	1a89      	subs	r1, r1, r2
90009122:	4299      	cmp	r1, r3
90009124:	d20c      	bcs.n	90009140 <f_write+0x11e>
90009126:	f44f 7200 	mov.w	r2, #512	; 0x200
9000912a:	eb08 2141 	add.w	r1, r8, r1, lsl #9
9000912e:	4658      	mov	r0, fp
90009130:	9300      	str	r3, [sp, #0]
	if (cnt) {
90009132:	f7fe fdca 	bl	90007cca <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
90009136:	7d22      	ldrb	r2, [r4, #20]
90009138:	9b00      	ldr	r3, [sp, #0]
9000913a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
9000913e:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
90009140:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
90009142:	69a3      	ldr	r3, [r4, #24]
90009144:	44b8      	add	r8, r7
90009146:	68e2      	ldr	r2, [r4, #12]
90009148:	1bf6      	subs	r6, r6, r7
9000914a:	443b      	add	r3, r7
9000914c:	61a3      	str	r3, [r4, #24]
9000914e:	429a      	cmp	r2, r3
90009150:	bf2c      	ite	cs
90009152:	60e2      	strcs	r2, [r4, #12]
90009154:	60e3      	strcc	r3, [r4, #12]
90009156:	f8da 3000 	ldr.w	r3, [sl]
9000915a:	443b      	add	r3, r7
9000915c:	f8ca 3000 	str.w	r3, [sl]
90009160:	e77a      	b.n	90009058 <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
90009162:	6a21      	ldr	r1, [r4, #32]
				fp->fptr < fp->obj.objsize &&
90009164:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
90009166:	4291      	cmp	r1, r2
90009168:	d00c      	beq.n	90009184 <f_write+0x162>
9000916a:	68e1      	ldr	r1, [r4, #12]
9000916c:	4299      	cmp	r1, r3
9000916e:	d909      	bls.n	90009184 <f_write+0x162>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
90009170:	2301      	movs	r3, #1
90009172:	4659      	mov	r1, fp
90009174:	f899 0001 	ldrb.w	r0, [r9, #1]
90009178:	9200      	str	r2, [sp, #0]
9000917a:	f7fe fbe1 	bl	90007940 <disk_read>
				fp->fptr < fp->obj.objsize &&
9000917e:	9a00      	ldr	r2, [sp, #0]
90009180:	2800      	cmp	r0, #0
90009182:	d197      	bne.n	900090b4 <f_write+0x92>
			fp->sect = sect;
90009184:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
90009186:	69a0      	ldr	r0, [r4, #24]
90009188:	4641      	mov	r1, r8
9000918a:	f3c0 0008 	ubfx	r0, r0, #0, #9
9000918e:	f5c0 7700 	rsb	r7, r0, #512	; 0x200
90009192:	4458      	add	r0, fp
90009194:	42b7      	cmp	r7, r6
90009196:	bf28      	it	cs
90009198:	4637      	movcs	r7, r6
	if (cnt) {
9000919a:	463a      	mov	r2, r7
9000919c:	f7fe fd95 	bl	90007cca <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
900091a0:	7d23      	ldrb	r3, [r4, #20]
900091a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
900091a6:	7523      	strb	r3, [r4, #20]
900091a8:	e7cb      	b.n	90009142 <f_write+0x120>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
900091aa:	2507      	movs	r5, #7
900091ac:	e775      	b.n	9000909a <f_write+0x78>

900091ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
900091ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
900091b2:	a901      	add	r1, sp, #4
{
900091b4:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
900091b6:	f7fe fcfa 	bl	90007bae <validate>
	if (res == FR_OK) {
900091ba:	4604      	mov	r4, r0
900091bc:	2800      	cmp	r0, #0
900091be:	d13b      	bne.n	90009238 <f_sync+0x8a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
900091c0:	7d2b      	ldrb	r3, [r5, #20]
900091c2:	f013 0440 	ands.w	r4, r3, #64	; 0x40
900091c6:	d037      	beq.n	90009238 <f_sync+0x8a>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
900091c8:	061b      	lsls	r3, r3, #24
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
900091ca:	9f01      	ldr	r7, [sp, #4]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
900091cc:	d50b      	bpl.n	900091e6 <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
900091ce:	2301      	movs	r3, #1
900091d0:	6a2a      	ldr	r2, [r5, #32]
900091d2:	f105 0130 	add.w	r1, r5, #48	; 0x30
900091d6:	7878      	ldrb	r0, [r7, #1]
900091d8:	f7fe fbc0 	bl	9000795c <disk_write>
900091dc:	bb80      	cbnz	r0, 90009240 <f_sync+0x92>
				fp->flag &= (BYTE)~FA_DIRTY;
900091de:	7d2b      	ldrb	r3, [r5, #20]
900091e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900091e4:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
900091e6:	f7fe fbd5 	bl	90007994 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
900091ea:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
900091ec:	4680      	mov	r8, r0
				res = move_window(fs, fp->dir_sect);
900091ee:	4638      	mov	r0, r7
900091f0:	f7fe fda0 	bl	90007d34 <move_window>
				if (res == FR_OK) {
900091f4:	4604      	mov	r4, r0
900091f6:	b9f8      	cbnz	r0, 90009238 <f_sync+0x8a>
					dir = fp->dir_ptr;
900091f8:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
900091fa:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
900091fc:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
900091fe:	f043 0320 	orr.w	r3, r3, #32
90009202:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
90009204:	68aa      	ldr	r2, [r5, #8]
90009206:	6828      	ldr	r0, [r5, #0]
90009208:	f7fe fc9a 	bl	90007b40 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
9000920c:	68e9      	ldr	r1, [r5, #12]
9000920e:	f106 001c 	add.w	r0, r6, #28
90009212:	f7fe fbc3 	bl	9000799c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
90009216:	4641      	mov	r1, r8
90009218:	f106 0016 	add.w	r0, r6, #22
9000921c:	f7fe fbbe 	bl	9000799c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
90009220:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
90009222:	74b4      	strb	r4, [r6, #18]
					res = sync_fs(fs);					/* Restore it to the directory */
90009224:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val;
90009226:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
90009228:	70fb      	strb	r3, [r7, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
9000922a:	f7fe ff83 	bl	90008134 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
9000922e:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
90009230:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
90009232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
90009236:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
90009238:	4620      	mov	r0, r4
9000923a:	b002      	add	sp, #8
9000923c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
90009240:	2401      	movs	r4, #1
90009242:	e7f9      	b.n	90009238 <f_sync+0x8a>

90009244 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
90009244:	b513      	push	{r0, r1, r4, lr}
90009246:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
90009248:	f7ff ffb1 	bl	900091ae <f_sync>
	if (res == FR_OK)
9000924c:	b948      	cbnz	r0, 90009262 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
9000924e:	a901      	add	r1, sp, #4
90009250:	4620      	mov	r0, r4
90009252:	f7fe fcac 	bl	90007bae <validate>
		if (res == FR_OK) {
90009256:	b920      	cbnz	r0, 90009262 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
90009258:	6920      	ldr	r0, [r4, #16]
9000925a:	f7fe fc29 	bl	90007ab0 <dec_lock>
			if (res == FR_OK)
9000925e:	b900      	cbnz	r0, 90009262 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
90009260:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
90009262:	b002      	add	sp, #8
90009264:	bd10      	pop	{r4, pc}

90009266 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
90009266:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000926a:	b085      	sub	sp, #20
9000926c:	460d      	mov	r5, r1
9000926e:	4604      	mov	r4, r0
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
90009270:	a903      	add	r1, sp, #12
90009272:	f7fe fc9c 	bl	90007bae <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
90009276:	4606      	mov	r6, r0
90009278:	b9e8      	cbnz	r0, 900092b6 <f_lseek+0x50>
9000927a:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
9000927c:	b9de      	cbnz	r6, 900092b6 <f_lseek+0x50>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
9000927e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90009280:	2b00      	cmp	r3, #0
90009282:	d07c      	beq.n	9000937e <f_lseek+0x118>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
90009284:	1c6a      	adds	r2, r5, #1
90009286:	d139      	bne.n	900092fc <f_lseek+0x96>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
90009288:	461d      	mov	r5, r3
			cl = fp->obj.sclust;		/* Origin of the chain */
9000928a:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
9000928e:	2702      	movs	r7, #2
90009290:	f855 bb04 	ldr.w	fp, [r5], #4
			if (cl) {
90009294:	f1b8 0f00 	cmp.w	r8, #0
90009298:	d028      	beq.n	900092ec <f_lseek+0x86>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
9000929a:	4640      	mov	r0, r8
9000929c:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
900092a0:	4601      	mov	r1, r0
900092a2:	4681      	mov	r9, r0
900092a4:	6820      	ldr	r0, [r4, #0]
						pcl = cl; ncl++;
900092a6:	f10a 0a01 	add.w	sl, sl, #1
						cl = get_fat(&fp->obj, cl);
900092aa:	f7fe ff96 	bl	900081da <get_fat.isra.0>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
900092ae:	2801      	cmp	r0, #1
900092b0:	d807      	bhi.n	900092c2 <f_lseek+0x5c>
900092b2:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
900092b4:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
900092b6:	4630      	mov	r0, r6
900092b8:	b005      	add	sp, #20
900092ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900092be:	4680      	mov	r8, r0
900092c0:	e7eb      	b.n	9000929a <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
900092c2:	1c43      	adds	r3, r0, #1
900092c4:	d101      	bne.n	900092ca <f_lseek+0x64>
900092c6:	2601      	movs	r6, #1
900092c8:	e7f4      	b.n	900092b4 <f_lseek+0x4e>
					} while (cl == pcl + 1);
900092ca:	f109 0901 	add.w	r9, r9, #1
900092ce:	4581      	cmp	r9, r0
900092d0:	d0e6      	beq.n	900092a0 <f_lseek+0x3a>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
900092d2:	3702      	adds	r7, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
900092d4:	45bb      	cmp	fp, r7
						*tbl++ = ncl; *tbl++ = tcl;
900092d6:	bf21      	itttt	cs
900092d8:	462b      	movcs	r3, r5
900092da:	f843 ab08 	strcs.w	sl, [r3], #8
900092de:	f8c5 8004 	strcs.w	r8, [r5, #4]
900092e2:	461d      	movcs	r5, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
900092e4:	9b03      	ldr	r3, [sp, #12]
900092e6:	699b      	ldr	r3, [r3, #24]
900092e8:	4283      	cmp	r3, r0
900092ea:	d8e8      	bhi.n	900092be <f_lseek+0x58>
			*fp->cltbl = ulen;	/* Number of items used */
900092ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
900092ee:	455f      	cmp	r7, fp
			*fp->cltbl = ulen;	/* Number of items used */
900092f0:	601f      	str	r7, [r3, #0]
			if (ulen <= tlen) {
900092f2:	f200 80d3 	bhi.w	9000949c <f_lseek+0x236>
				*tbl = 0;		/* Terminate table */
900092f6:	2300      	movs	r3, #0
900092f8:	602b      	str	r3, [r5, #0]
900092fa:	e7dc      	b.n	900092b6 <f_lseek+0x50>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
900092fc:	68e7      	ldr	r7, [r4, #12]
900092fe:	42af      	cmp	r7, r5
90009300:	bf28      	it	cs
90009302:	462f      	movcs	r7, r5
			fp->fptr = ofs;				/* Set file pointer */
90009304:	61a7      	str	r7, [r4, #24]
			if (ofs) {
90009306:	2f00      	cmp	r7, #0
90009308:	d0d5      	beq.n	900092b6 <f_lseek+0x50>
				fp->clust = clmt_clust(fp, ofs - 1);
9000930a:	f107 39ff 	add.w	r9, r7, #4294967295
9000930e:	4620      	mov	r0, r4
90009310:	4649      	mov	r1, r9
90009312:	f7fe fc04 	bl	90007b1e <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
90009316:	f8dd 800c 	ldr.w	r8, [sp, #12]
				fp->clust = clmt_clust(fp, ofs - 1);
9000931a:	4601      	mov	r1, r0
9000931c:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
9000931e:	4640      	mov	r0, r8
90009320:	f7fe fbf2 	bl	90007b08 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
90009324:	2800      	cmp	r0, #0
90009326:	d0c4      	beq.n	900092b2 <f_lseek+0x4c>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90009328:	f3c7 0708 	ubfx	r7, r7, #0, #9
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
9000932c:	f8b8 500a 	ldrh.w	r5, [r8, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90009330:	2f00      	cmp	r7, #0
90009332:	d0c0      	beq.n	900092b6 <f_lseek+0x50>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
90009334:	3d01      	subs	r5, #1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90009336:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
90009338:	ea05 2559 	and.w	r5, r5, r9, lsr #9
9000933c:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
9000933e:	42aa      	cmp	r2, r5
90009340:	d0b9      	beq.n	900092b6 <f_lseek+0x50>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
90009342:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90009346:	f104 0130 	add.w	r1, r4, #48	; 0x30
9000934a:	f898 0001 	ldrb.w	r0, [r8, #1]
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
9000934e:	2b00      	cmp	r3, #0
90009350:	da0a      	bge.n	90009368 <f_lseek+0x102>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90009352:	2301      	movs	r3, #1
90009354:	9101      	str	r1, [sp, #4]
90009356:	f7fe fb01 	bl	9000795c <disk_write>
9000935a:	2800      	cmp	r0, #0
9000935c:	d1b3      	bne.n	900092c6 <f_lseek+0x60>
						fp->flag &= (BYTE)~FA_DIRTY;
9000935e:	7d23      	ldrb	r3, [r4, #20]
90009360:	9901      	ldr	r1, [sp, #4]
90009362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90009366:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
90009368:	2301      	movs	r3, #1
9000936a:	462a      	mov	r2, r5
9000936c:	f898 0001 	ldrb.w	r0, [r8, #1]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
90009370:	f7fe fae6 	bl	90007940 <disk_read>
90009374:	4606      	mov	r6, r0
90009376:	2800      	cmp	r0, #0
90009378:	d1a5      	bne.n	900092c6 <f_lseek+0x60>
			fp->sect = nsect;
9000937a:	6225      	str	r5, [r4, #32]
9000937c:	e79b      	b.n	900092b6 <f_lseek+0x50>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
9000937e:	68e3      	ldr	r3, [r4, #12]
90009380:	42ab      	cmp	r3, r5
90009382:	d204      	bcs.n	9000938e <f_lseek+0x128>
90009384:	7d22      	ldrb	r2, [r4, #20]
90009386:	f012 0f02 	tst.w	r2, #2
9000938a:	bf08      	it	eq
9000938c:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
9000938e:	2200      	movs	r2, #0
		ifptr = fp->fptr;
90009390:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
90009392:	61a2      	str	r2, [r4, #24]
		if (ofs) {
90009394:	bb55      	cbnz	r5, 900093ec <f_lseek+0x186>
		fp->fptr = nsect = 0;
90009396:	2500      	movs	r5, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
90009398:	68e2      	ldr	r2, [r4, #12]
9000939a:	69a3      	ldr	r3, [r4, #24]
9000939c:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
9000939e:	bf84      	itt	hi
900093a0:	7d22      	ldrbhi	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
900093a2:	60e3      	strhi	r3, [r4, #12]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
900093a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
900093a8:	bf84      	itt	hi
900093aa:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
900093ae:	7522      	strbhi	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
900093b0:	2b00      	cmp	r3, #0
900093b2:	d080      	beq.n	900092b6 <f_lseek+0x50>
900093b4:	6a22      	ldr	r2, [r4, #32]
900093b6:	42aa      	cmp	r2, r5
900093b8:	f43f af7d 	beq.w	900092b6 <f_lseek+0x50>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
900093bc:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
900093c0:	f104 0130 	add.w	r1, r4, #48	; 0x30
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
900093c4:	9e03      	ldr	r6, [sp, #12]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
900093c6:	2b00      	cmp	r3, #0
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
900093c8:	7870      	ldrb	r0, [r6, #1]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
900093ca:	da0b      	bge.n	900093e4 <f_lseek+0x17e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
900093cc:	2301      	movs	r3, #1
900093ce:	9101      	str	r1, [sp, #4]
900093d0:	f7fe fac4 	bl	9000795c <disk_write>
900093d4:	2800      	cmp	r0, #0
900093d6:	f47f af76 	bne.w	900092c6 <f_lseek+0x60>
				fp->flag &= (BYTE)~FA_DIRTY;
900093da:	7d23      	ldrb	r3, [r4, #20]
900093dc:	9901      	ldr	r1, [sp, #4]
900093de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900093e2:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
900093e4:	2301      	movs	r3, #1
900093e6:	462a      	mov	r2, r5
900093e8:	7870      	ldrb	r0, [r6, #1]
900093ea:	e7c1      	b.n	90009370 <f_lseek+0x10a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
900093ec:	9f03      	ldr	r7, [sp, #12]
900093ee:	f8b7 800a 	ldrh.w	r8, [r7, #10]
900093f2:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
900093f6:	b313      	cbz	r3, 9000943e <f_lseek+0x1d8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
900093f8:	3b01      	subs	r3, #1
900093fa:	1e6a      	subs	r2, r5, #1
900093fc:	fbb3 f1f8 	udiv	r1, r3, r8
90009400:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
90009404:	428a      	cmp	r2, r1
90009406:	d31a      	bcc.n	9000943e <f_lseek+0x1d8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
90009408:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
9000940c:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
9000940e:	4013      	ands	r3, r2
				ofs -= fp->fptr;
90009410:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
90009412:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
90009414:	2900      	cmp	r1, #0
90009416:	d0be      	beq.n	90009396 <f_lseek+0x130>
				while (ofs > bcs) {						/* Cluster following loop */
90009418:	4545      	cmp	r5, r8
					ofs -= bcs; fp->fptr += bcs;
9000941a:	69a3      	ldr	r3, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
9000941c:	d81e      	bhi.n	9000945c <f_lseek+0x1f6>
				fp->fptr += ofs;
9000941e:	69a3      	ldr	r3, [r4, #24]
90009420:	442b      	add	r3, r5
90009422:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
90009424:	f3c5 0308 	ubfx	r3, r5, #0, #9
90009428:	2b00      	cmp	r3, #0
9000942a:	d0b4      	beq.n	90009396 <f_lseek+0x130>
					nsect = clust2sect(fs, clst);	/* Current sector */
9000942c:	4638      	mov	r0, r7
9000942e:	f7fe fb6b 	bl	90007b08 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
90009432:	2800      	cmp	r0, #0
90009434:	f43f af3d 	beq.w	900092b2 <f_lseek+0x4c>
					nsect += (DWORD)(ofs / SS(fs));
90009438:	eb00 2555 	add.w	r5, r0, r5, lsr #9
9000943c:	e7ac      	b.n	90009398 <f_lseek+0x132>
				clst = fp->obj.sclust;					/* start from the first cluster */
9000943e:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
90009440:	b951      	cbnz	r1, 90009458 <f_lseek+0x1f2>
					clst = create_chain(&fp->obj, 0);
90009442:	4620      	mov	r0, r4
90009444:	f7fe ff57 	bl	900082f6 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
90009448:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
9000944a:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
9000944c:	f43f af31 	beq.w	900092b2 <f_lseek+0x4c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90009450:	1c48      	adds	r0, r1, #1
90009452:	f43f af38 	beq.w	900092c6 <f_lseek+0x60>
					fp->obj.sclust = clst;
90009456:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
90009458:	61e1      	str	r1, [r4, #28]
9000945a:	e7db      	b.n	90009414 <f_lseek+0x1ae>
					ofs -= bcs; fp->fptr += bcs;
9000945c:	4443      	add	r3, r8
9000945e:	eba5 0908 	sub.w	r9, r5, r8
90009462:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
90009464:	7d23      	ldrb	r3, [r4, #20]
90009466:	079a      	lsls	r2, r3, #30
90009468:	d506      	bpl.n	90009478 <f_lseek+0x212>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
9000946a:	4620      	mov	r0, r4
9000946c:	f7fe ff43 	bl	900082f6 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
90009470:	4605      	mov	r5, r0
90009472:	b928      	cbnz	r0, 90009480 <f_lseek+0x21a>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
90009474:	4601      	mov	r1, r0
90009476:	e7d2      	b.n	9000941e <f_lseek+0x1b8>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
90009478:	6820      	ldr	r0, [r4, #0]
9000947a:	f7fe feae 	bl	900081da <get_fat.isra.0>
9000947e:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90009480:	1c6b      	adds	r3, r5, #1
90009482:	f43f af20 	beq.w	900092c6 <f_lseek+0x60>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
90009486:	2d01      	cmp	r5, #1
90009488:	f67f af13 	bls.w	900092b2 <f_lseek+0x4c>
9000948c:	69bb      	ldr	r3, [r7, #24]
9000948e:	42ab      	cmp	r3, r5
90009490:	f67f af0f 	bls.w	900092b2 <f_lseek+0x4c>
					fp->clust = clst;
90009494:	4629      	mov	r1, r5
90009496:	61e5      	str	r5, [r4, #28]
					ofs -= bcs; fp->fptr += bcs;
90009498:	464d      	mov	r5, r9
9000949a:	e7bd      	b.n	90009418 <f_lseek+0x1b2>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
9000949c:	2611      	movs	r6, #17
9000949e:	e70a      	b.n	900092b6 <f_lseek+0x50>

900094a0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
900094a0:	b5f0      	push	{r4, r5, r6, r7, lr}
900094a2:	b085      	sub	sp, #20
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
900094a4:	4605      	mov	r5, r0
{
900094a6:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
900094a8:	2800      	cmp	r0, #0
900094aa:	d046      	beq.n	9000953a <f_opendir+0x9a>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
900094ac:	2200      	movs	r2, #0
900094ae:	a903      	add	r1, sp, #12
900094b0:	a801      	add	r0, sp, #4
900094b2:	f7fe fc95 	bl	90007de0 <find_volume>
	if (res == FR_OK) {
900094b6:	4604      	mov	r4, r0
900094b8:	2800      	cmp	r0, #0
900094ba:	d133      	bne.n	90009524 <f_opendir+0x84>
		obj->fs = fs;
900094bc:	9f03      	ldr	r7, [sp, #12]
		INIT_NAMBUF(fs);
900094be:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
900094c2:	602f      	str	r7, [r5, #0]
		INIT_NAMBUF(fs);
900094c4:	f000 f8c9 	bl	9000965a <ff_memalloc>
900094c8:	4606      	mov	r6, r0
900094ca:	2800      	cmp	r0, #0
900094cc:	d037      	beq.n	9000953e <f_opendir+0x9e>
900094ce:	60f8      	str	r0, [r7, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
900094d0:	4628      	mov	r0, r5
900094d2:	9901      	ldr	r1, [sp, #4]
900094d4:	f7ff fa86 	bl	900089e4 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
900094d8:	4604      	mov	r4, r0
900094da:	b9e8      	cbnz	r0, 90009518 <f_opendir+0x78>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
900094dc:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
900094e0:	2b00      	cmp	r3, #0
900094e2:	db07      	blt.n	900094f4 <f_opendir+0x54>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
900094e4:	79ab      	ldrb	r3, [r5, #6]
900094e6:	06db      	lsls	r3, r3, #27
900094e8:	d523      	bpl.n	90009532 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
900094ea:	7838      	ldrb	r0, [r7, #0]
900094ec:	6a29      	ldr	r1, [r5, #32]
900094ee:	f7fe fe6c 	bl	900081ca <ld_clust.isra.0>
900094f2:	60a8      	str	r0, [r5, #8]
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
900094f4:	88fb      	ldrh	r3, [r7, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
900094f6:	2100      	movs	r1, #0
900094f8:	4628      	mov	r0, r5
				obj->id = fs->id;
900094fa:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
900094fc:	f7fe ff53 	bl	900083a6 <dir_sdi>
#if _FS_LOCK != 0
				if (res == FR_OK) {
90009500:	4604      	mov	r4, r0
90009502:	b948      	cbnz	r0, 90009518 <f_opendir+0x78>
					if (obj->sclust) {
90009504:	68ab      	ldr	r3, [r5, #8]
90009506:	b193      	cbz	r3, 9000952e <f_opendir+0x8e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
90009508:	4601      	mov	r1, r0
9000950a:	4628      	mov	r0, r5
9000950c:	f7fe fa8e 	bl	90007a2c <inc_lock>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
90009510:	2800      	cmp	r0, #0
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
90009512:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
90009514:	bf08      	it	eq
90009516:	2412      	moveq	r4, #18
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
90009518:	4630      	mov	r0, r6
9000951a:	f000 f8a0 	bl	9000965e <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
9000951e:	2c04      	cmp	r4, #4
90009520:	d009      	beq.n	90009536 <f_opendir+0x96>
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
90009522:	b10c      	cbz	r4, 90009528 <f_opendir+0x88>
90009524:	2300      	movs	r3, #0
90009526:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
90009528:	4620      	mov	r0, r4
9000952a:	b005      	add	sp, #20
9000952c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
9000952e:	6128      	str	r0, [r5, #16]
90009530:	e7f2      	b.n	90009518 <f_opendir+0x78>
					res = FR_NO_PATH;
90009532:	2405      	movs	r4, #5
90009534:	e7f0      	b.n	90009518 <f_opendir+0x78>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
90009536:	2405      	movs	r4, #5
90009538:	e7f4      	b.n	90009524 <f_opendir+0x84>
	if (!dp) return FR_INVALID_OBJECT;
9000953a:	2409      	movs	r4, #9
9000953c:	e7f4      	b.n	90009528 <f_opendir+0x88>
		INIT_NAMBUF(fs);
9000953e:	2411      	movs	r4, #17
90009540:	e7f2      	b.n	90009528 <f_opendir+0x88>

90009542 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
90009542:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
90009544:	a901      	add	r1, sp, #4
{
90009546:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
90009548:	f7fe fb31 	bl	90007bae <validate>
	if (res == FR_OK) {
9000954c:	4604      	mov	r4, r0
9000954e:	b918      	cbnz	r0, 90009558 <f_closedir+0x16>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
90009550:	6928      	ldr	r0, [r5, #16]
90009552:	b920      	cbnz	r0, 9000955e <f_closedir+0x1c>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
90009554:	2300      	movs	r3, #0
90009556:	602b      	str	r3, [r5, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
90009558:	4620      	mov	r0, r4
9000955a:	b003      	add	sp, #12
9000955c:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
9000955e:	f7fe faa7 	bl	90007ab0 <dec_lock>
		if (res == FR_OK)
90009562:	2800      	cmp	r0, #0
90009564:	d0f6      	beq.n	90009554 <f_closedir+0x12>
90009566:	4604      	mov	r4, r0
90009568:	e7f6      	b.n	90009558 <f_closedir+0x16>

9000956a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
9000956a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
9000956e:	460f      	mov	r7, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
90009570:	a901      	add	r1, sp, #4
{
90009572:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
90009574:	f7fe fb1b 	bl	90007bae <validate>
	if (res == FR_OK) {
90009578:	4604      	mov	r4, r0
9000957a:	bb30      	cbnz	r0, 900095ca <f_readdir+0x60>
		if (!fno) {
9000957c:	b937      	cbnz	r7, 9000958c <f_readdir+0x22>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
9000957e:	4639      	mov	r1, r7
90009580:	4628      	mov	r0, r5
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
90009582:	b002      	add	sp, #8
90009584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
90009588:	f7fe bf0d 	b.w	900083a6 <dir_sdi>
			INIT_NAMBUF(fs);
9000958c:	f44f 7000 	mov.w	r0, #512	; 0x200
90009590:	f000 f863 	bl	9000965a <ff_memalloc>
90009594:	4606      	mov	r6, r0
90009596:	b1e0      	cbz	r0, 900095d2 <f_readdir+0x68>
90009598:	9b01      	ldr	r3, [sp, #4]
9000959a:	60d8      	str	r0, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
9000959c:	4628      	mov	r0, r5
9000959e:	f7ff f9a7 	bl	900088f0 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
900095a2:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
900095a6:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
900095a8:	d10c      	bne.n	900095c4 <f_readdir+0x5a>
				get_fileinfo(dp, fno);		/* Get the object information */
900095aa:	4639      	mov	r1, r7
900095ac:	4628      	mov	r0, r5
900095ae:	f7fe fb18 	bl	90007be2 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
900095b2:	4641      	mov	r1, r8
900095b4:	4628      	mov	r0, r5
900095b6:	f7fe ff36 	bl	90008426 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
900095ba:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
900095bc:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
900095be:	bf14      	ite	ne
900095c0:	4604      	movne	r4, r0
900095c2:	2400      	moveq	r4, #0
			FREE_NAMBUF();
900095c4:	4630      	mov	r0, r6
900095c6:	f000 f84a 	bl	9000965e <ff_memfree>
}
900095ca:	4620      	mov	r0, r4
900095cc:	b002      	add	sp, #8
900095ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			INIT_NAMBUF(fs);
900095d2:	2411      	movs	r4, #17
900095d4:	e7f9      	b.n	900095ca <f_readdir+0x60>
	...

900095d8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
900095d8:	4b0f      	ldr	r3, [pc, #60]	; (90009618 <FATFS_LinkDriverEx+0x40>)
{
900095da:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
900095dc:	7b9c      	ldrb	r4, [r3, #14]
900095de:	2c01      	cmp	r4, #1
900095e0:	d817      	bhi.n	90009612 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
900095e2:	7b9d      	ldrb	r5, [r3, #14]
900095e4:	2400      	movs	r4, #0
900095e6:	b2ed      	uxtb	r5, r5
900095e8:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
900095ea:	7b9d      	ldrb	r5, [r3, #14]
900095ec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
900095f0:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
900095f2:	7b98      	ldrb	r0, [r3, #14]
900095f4:	4418      	add	r0, r3
900095f6:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
900095f8:	7b9a      	ldrb	r2, [r3, #14]
900095fa:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
900095fc:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
900095fe:	b2c0      	uxtb	r0, r0
90009600:	7398      	strb	r0, [r3, #14]
    path[1] = ':';
90009602:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
90009604:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
90009606:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
90009608:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
9000960a:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
9000960c:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
9000960e:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
90009610:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
90009612:	2001      	movs	r0, #1
90009614:	e7fc      	b.n	90009610 <FATFS_LinkDriverEx+0x38>
90009616:	bf00      	nop
90009618:	200007a0 	.word	0x200007a0

9000961c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
9000961c:	2200      	movs	r2, #0
9000961e:	f7ff bfdb 	b.w	900095d8 <FATFS_LinkDriverEx>
	...

90009624 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
90009624:	4a0a      	ldr	r2, [pc, #40]	; (90009650 <FATFS_UnLinkDriverEx+0x2c>)
90009626:	7b93      	ldrb	r3, [r2, #14]
90009628:	b17b      	cbz	r3, 9000964a <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
9000962a:	7803      	ldrb	r3, [r0, #0]
9000962c:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
9000962e:	b2db      	uxtb	r3, r3
90009630:	eb02 0183 	add.w	r1, r2, r3, lsl #2
90009634:	6848      	ldr	r0, [r1, #4]
90009636:	b140      	cbz	r0, 9000964a <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
90009638:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
9000963a:	4413      	add	r3, r2
9000963c:	7318      	strb	r0, [r3, #12]
      disk.nbr--;
9000963e:	7b93      	ldrb	r3, [r2, #14]
      disk.drv[DiskNum] = 0;
90009640:	6048      	str	r0, [r1, #4]
      disk.nbr--;
90009642:	3b01      	subs	r3, #1
90009644:	b2db      	uxtb	r3, r3
90009646:	7393      	strb	r3, [r2, #14]
      ret = 0;
90009648:	4770      	bx	lr
  uint8_t ret = 1;
9000964a:	2001      	movs	r0, #1
    }
  }

  return ret;
}
9000964c:	4770      	bx	lr
9000964e:	bf00      	nop
90009650:	200007a0 	.word	0x200007a0

90009654 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
90009654:	2100      	movs	r1, #0
90009656:	f7ff bfe5 	b.w	90009624 <FATFS_UnLinkDriverEx>

9000965a <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
9000965a:	f002 b8a5 	b.w	9000b7a8 <malloc>

9000965e <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
9000965e:	f002 b8ab 	b.w	9000b7b8 <free>
	...

90009664 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
90009664:	287f      	cmp	r0, #127	; 0x7f
{
90009666:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
90009668:	d906      	bls.n	90009678 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
9000966a:	b131      	cbz	r1, 9000967a <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
9000966c:	28ff      	cmp	r0, #255	; 0xff
9000966e:	d811      	bhi.n	90009694 <ff_convert+0x30>
90009670:	3880      	subs	r0, #128	; 0x80
90009672:	4b09      	ldr	r3, [pc, #36]	; (90009698 <ff_convert+0x34>)
90009674:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
90009678:	bd10      	pop	{r4, pc}
9000967a:	4a07      	ldr	r2, [pc, #28]	; (90009698 <ff_convert+0x34>)
				if (chr == Tbl[c]) break;
9000967c:	f832 4b02 	ldrh.w	r4, [r2], #2
90009680:	b28b      	uxth	r3, r1
90009682:	4284      	cmp	r4, r0
90009684:	d003      	beq.n	9000968e <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
90009686:	3101      	adds	r1, #1
90009688:	2980      	cmp	r1, #128	; 0x80
9000968a:	d1f7      	bne.n	9000967c <ff_convert+0x18>
9000968c:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
9000968e:	3380      	adds	r3, #128	; 0x80
90009690:	b2d8      	uxtb	r0, r3
90009692:	e7f1      	b.n	90009678 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
90009694:	2000      	movs	r0, #0
90009696:	e7ef      	b.n	90009678 <ff_convert+0x14>
90009698:	9001096a 	.word	0x9001096a

9000969c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
9000969c:	4b1f      	ldr	r3, [pc, #124]	; (9000971c <ff_wtoupper+0x80>)
9000969e:	f1a3 02bc 	sub.w	r2, r3, #188	; 0xbc
900096a2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
900096a6:	bf28      	it	cs
900096a8:	4613      	movcs	r3, r2
{
900096aa:	b570      	push	{r4, r5, r6, lr}
900096ac:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
900096ae:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
900096b2:	460a      	mov	r2, r1
900096b4:	b1ab      	cbz	r3, 900096e2 <ff_wtoupper+0x46>
900096b6:	4298      	cmp	r0, r3
900096b8:	d313      	bcc.n	900096e2 <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
900096ba:	f831 4c02 	ldrh.w	r4, [r1, #-2]
900096be:	0a25      	lsrs	r5, r4, #8
900096c0:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
900096c2:	fa53 f484 	uxtab	r4, r3, r4
900096c6:	42a0      	cmp	r0, r4
900096c8:	da21      	bge.n	9000970e <ff_wtoupper+0x72>
			switch (cmd) {
900096ca:	2d08      	cmp	r5, #8
900096cc:	d809      	bhi.n	900096e2 <ff_wtoupper+0x46>
900096ce:	e8df f005 	tbb	[pc, r5]
900096d2:	0905      	.short	0x0905
900096d4:	1513110f 	.word	0x1513110f
900096d8:	1917      	.short	0x1917
900096da:	1b          	.byte	0x1b
900096db:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
900096dc:	1ac0      	subs	r0, r0, r3
900096de:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
900096e2:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
900096e4:	1ac3      	subs	r3, r0, r3
900096e6:	f003 0301 	and.w	r3, r3, #1
900096ea:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
900096ec:	b280      	uxth	r0, r0
900096ee:	e7f8      	b.n	900096e2 <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
900096f0:	3810      	subs	r0, #16
900096f2:	e7fb      	b.n	900096ec <ff_wtoupper+0x50>
			case 3:	chr -= 32; break;				/* Shift -32 */
900096f4:	3820      	subs	r0, #32
900096f6:	e7f9      	b.n	900096ec <ff_wtoupper+0x50>
			case 4:	chr -= 48; break;				/* Shift -48 */
900096f8:	3830      	subs	r0, #48	; 0x30
900096fa:	e7f7      	b.n	900096ec <ff_wtoupper+0x50>
			case 5:	chr -= 26; break;				/* Shift -26 */
900096fc:	381a      	subs	r0, #26
900096fe:	e7f5      	b.n	900096ec <ff_wtoupper+0x50>
			case 6:	chr += 8; break;				/* Shift +8 */
90009700:	3008      	adds	r0, #8
90009702:	e7f3      	b.n	900096ec <ff_wtoupper+0x50>
			case 7: chr -= 80; break;				/* Shift -80 */
90009704:	3850      	subs	r0, #80	; 0x50
90009706:	e7f1      	b.n	900096ec <ff_wtoupper+0x50>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
90009708:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
9000970c:	e7ee      	b.n	900096ec <ff_wtoupper+0x50>
		if (!cmd) p += nc;
9000970e:	3104      	adds	r1, #4
90009710:	2d00      	cmp	r5, #0
90009712:	d1cc      	bne.n	900096ae <ff_wtoupper+0x12>
90009714:	eb02 0346 	add.w	r3, r2, r6, lsl #1
90009718:	e7c8      	b.n	900096ac <ff_wtoupper+0x10>
9000971a:	bf00      	nop
9000971c:	90010b26 	.word	0x90010b26

90009720 <AUDIO_StorageParse>:
  * @brief  Copies disk content in the explorer list.
  * @param  None
  * @retval Operation result
  */
FRESULT AUDIO_StorageParse(void)
{
90009720:	b5f0      	push	{r4, r5, r6, r7, lr}
90009722:	b0d5      	sub	sp, #340	; 0x154
  FRESULT res = FR_OK; //Resultado de la operacion
  FILINFO fno; // Informacion del fichero
  DIR dir;
  char *fn;
  
  res = f_opendir(&dir, USBDISKPath);
90009724:	491f      	ldr	r1, [pc, #124]	; (900097a4 <AUDIO_StorageParse+0x84>)
  FileList.ptr = 0;
90009726:	4c20      	ldr	r4, [pc, #128]	; (900097a8 <AUDIO_StorageParse+0x88>)
  res = f_opendir(&dir, USBDISKPath);
90009728:	a801      	add	r0, sp, #4
9000972a:	f7ff feb9 	bl	900094a0 <f_opendir>
  FileList.ptr = 0;
9000972e:	2300      	movs	r3, #0
  
  if(res == FR_OK)
90009730:	4605      	mov	r5, r0
  FileList.ptr = 0;
90009732:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
  if(res == FR_OK)
90009736:	b920      	cbnz	r0, 90009742 <AUDIO_StorageParse+0x22>
  {
    while(USBH_MSC_IsReady(&hUSBHost))
90009738:	4f1c      	ldr	r7, [pc, #112]	; (900097ac <AUDIO_StorageParse+0x8c>)
9000973a:	4638      	mov	r0, r7
9000973c:	f7fc ff0d 	bl	9000655a <USBH_MSC_IsReady>
90009740:	b948      	cbnz	r0, 90009756 <AUDIO_StorageParse+0x36>
          FileList.ptr++;
        }
      }   
    }
  }
  NumObs = FileList.ptr;
90009742:	f8b4 33d8 	ldrh.w	r3, [r4, #984]	; 0x3d8
  f_closedir(&dir);
90009746:	a801      	add	r0, sp, #4
  NumObs = FileList.ptr;
90009748:	f8a4 33da 	strh.w	r3, [r4, #986]	; 0x3da
  f_closedir(&dir);
9000974c:	f7ff fef9 	bl	90009542 <f_closedir>
  return res;
}
90009750:	4628      	mov	r0, r5
90009752:	b055      	add	sp, #340	; 0x154
90009754:	bdf0      	pop	{r4, r5, r6, r7, pc}
      res = f_readdir(&dir, &fno);
90009756:	a90e      	add	r1, sp, #56	; 0x38
90009758:	a801      	add	r0, sp, #4
9000975a:	f7ff ff06 	bl	9000956a <f_readdir>
      if(res != FR_OK || fno.fname[0] == 0)
9000975e:	b9f8      	cbnz	r0, 900097a0 <AUDIO_StorageParse+0x80>
90009760:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
90009764:	2b00      	cmp	r3, #0
90009766:	d0ec      	beq.n	90009742 <AUDIO_StorageParse+0x22>
      if(fno.fname[0] == '.')
90009768:	2b2e      	cmp	r3, #46	; 0x2e
9000976a:	d0e6      	beq.n	9000973a <AUDIO_StorageParse+0x1a>
      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
9000976c:	f8b4 03d8 	ldrh.w	r0, [r4, #984]	; 0x3d8
90009770:	2817      	cmp	r0, #23
90009772:	d8e2      	bhi.n	9000973a <AUDIO_StorageParse+0x1a>
        if((fno.fattrib & AM_DIR) == 0)
90009774:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
90009778:	06db      	lsls	r3, r3, #27
9000977a:	d4de      	bmi.n	9000973a <AUDIO_StorageParse+0x1a>
          strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
9000977c:	2629      	movs	r6, #41	; 0x29
9000977e:	2228      	movs	r2, #40	; 0x28
90009780:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
90009784:	fb06 4000 	mla	r0, r6, r0, r4
90009788:	3001      	adds	r0, #1
9000978a:	f002 fb01 	bl	9000bd90 <strncpy>
          FileList.file[FileList.ptr].type = FILETYPE_FILE;
9000978e:	f8b4 33d8 	ldrh.w	r3, [r4, #984]	; 0x3d8
90009792:	2201      	movs	r2, #1
90009794:	435e      	muls	r6, r3
          FileList.ptr++;
90009796:	4413      	add	r3, r2
          FileList.file[FileList.ptr].type = FILETYPE_FILE;
90009798:	55a2      	strb	r2, [r4, r6]
          FileList.ptr++;
9000979a:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
9000979e:	e7cc      	b.n	9000973a <AUDIO_StorageParse+0x1a>
900097a0:	4605      	mov	r5, r0
900097a2:	e7ce      	b.n	90009742 <AUDIO_StorageParse+0x22>
900097a4:	20000b8d 	.word	0x20000b8d
900097a8:	200007b0 	.word	0x200007b0
900097ac:	20000dc8 	.word	0x20000dc8

900097b0 <AUDIO_GetWavObjectNumber>:
  * @retval None
  */
uint16_t AUDIO_GetWavObjectNumber(void)
{
  return NumObs;
}
900097b0:	4b01      	ldr	r3, [pc, #4]	; (900097b8 <AUDIO_GetWavObjectNumber+0x8>)
900097b2:	f8b3 03da 	ldrh.w	r0, [r3, #986]	; 0x3da
900097b6:	4770      	bx	lr
900097b8:	200007b0 	.word	0x200007b0

900097bc <USBH_UserProcess>:
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{
  switch(id)
900097bc:	2904      	cmp	r1, #4
{
900097be:	460b      	mov	r3, r1
900097c0:	b510      	push	{r4, lr}
  switch(id)
900097c2:	d042      	beq.n	9000984a <USBH_UserProcess+0x8e>
900097c4:	2905      	cmp	r1, #5
900097c6:	d01a      	beq.n	900097fe <USBH_UserProcess+0x42>
900097c8:	2902      	cmp	r1, #2
900097ca:	d13d      	bne.n	90009848 <USBH_UserProcess+0x8c>
      LCD_ErrLog("ERROR : Cannot UnLink FatFS Driver! \n");
    }
    break;

  case HOST_USER_CLASS_ACTIVE:
    appli_state = APPLICATION_READY;
900097cc:	4c21      	ldr	r4, [pc, #132]	; (90009854 <USBH_UserProcess+0x98>)
    /* Link the USB Host disk I/O driver */
    if (FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
900097ce:	4822      	ldr	r0, [pc, #136]	; (90009858 <USBH_UserProcess+0x9c>)
    appli_state = APPLICATION_READY;
900097d0:	4621      	mov	r1, r4
900097d2:	f801 3b01 	strb.w	r3, [r1], #1
    if (FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
900097d6:	f7ff ff21 	bl	9000961c <FATFS_LinkDriver>
900097da:	4602      	mov	r2, r0
900097dc:	2800      	cmp	r0, #0
900097de:	d133      	bne.n	90009848 <USBH_UserProcess+0x8c>
    {
      if (f_mount(&USBH_FatFs, "", 0) != FR_OK)
900097e0:	491e      	ldr	r1, [pc, #120]	; (9000985c <USBH_UserProcess+0xa0>)
900097e2:	f104 0008 	add.w	r0, r4, #8
900097e6:	f7ff fa2f 	bl	90008c48 <f_mount>
900097ea:	2800      	cmp	r0, #0
900097ec:	d02c      	beq.n	90009848 <USBH_UserProcess+0x8c>
      {
        LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
900097ee:	4b1c      	ldr	r3, [pc, #112]	; (90009860 <USBH_UserProcess+0xa4>)
900097f0:	4c1c      	ldr	r4, [pc, #112]	; (90009864 <USBH_UserProcess+0xa8>)
900097f2:	481d      	ldr	r0, [pc, #116]	; (90009868 <USBH_UserProcess+0xac>)
900097f4:	6023      	str	r3, [r4, #0]
900097f6:	f002 f955 	bl	9000baa4 <iprintf>
900097fa:	481c      	ldr	r0, [pc, #112]	; (9000986c <USBH_UserProcess+0xb0>)
900097fc:	e01f      	b.n	9000983e <USBH_UserProcess+0x82>
    appli_state = APPLICATION_DISCONNECT;
900097fe:	2203      	movs	r2, #3
90009800:	4b14      	ldr	r3, [pc, #80]	; (90009854 <USBH_UserProcess+0x98>)
    if (f_mount(NULL, "", 0) != FR_OK)
90009802:	4916      	ldr	r1, [pc, #88]	; (9000985c <USBH_UserProcess+0xa0>)
    appli_state = APPLICATION_DISCONNECT;
90009804:	701a      	strb	r2, [r3, #0]
    if (f_mount(NULL, "", 0) != FR_OK)
90009806:	2200      	movs	r2, #0
90009808:	4610      	mov	r0, r2
9000980a:	f7ff fa1d 	bl	90008c48 <f_mount>
9000980e:	b158      	cbz	r0, 90009828 <USBH_UserProcess+0x6c>
      LCD_ErrLog("ERROR : Cannot DeInitialize FatFs! \n");
90009810:	4b13      	ldr	r3, [pc, #76]	; (90009860 <USBH_UserProcess+0xa4>)
90009812:	4c14      	ldr	r4, [pc, #80]	; (90009864 <USBH_UserProcess+0xa8>)
90009814:	4814      	ldr	r0, [pc, #80]	; (90009868 <USBH_UserProcess+0xac>)
90009816:	6023      	str	r3, [r4, #0]
90009818:	f002 f944 	bl	9000baa4 <iprintf>
9000981c:	4814      	ldr	r0, [pc, #80]	; (90009870 <USBH_UserProcess+0xb4>)
9000981e:	f002 f9af 	bl	9000bb80 <puts>
90009822:	f04f 33ff 	mov.w	r3, #4294967295
90009826:	6023      	str	r3, [r4, #0]
    if (FATFS_UnLinkDriver(USBDISKPath) != 0)
90009828:	4812      	ldr	r0, [pc, #72]	; (90009874 <USBH_UserProcess+0xb8>)
9000982a:	f7ff ff13 	bl	90009654 <FATFS_UnLinkDriver>
9000982e:	b158      	cbz	r0, 90009848 <USBH_UserProcess+0x8c>
      LCD_ErrLog("ERROR : Cannot UnLink FatFS Driver! \n");
90009830:	4b0b      	ldr	r3, [pc, #44]	; (90009860 <USBH_UserProcess+0xa4>)
90009832:	4c0c      	ldr	r4, [pc, #48]	; (90009864 <USBH_UserProcess+0xa8>)
90009834:	480c      	ldr	r0, [pc, #48]	; (90009868 <USBH_UserProcess+0xac>)
90009836:	6023      	str	r3, [r4, #0]
90009838:	f002 f934 	bl	9000baa4 <iprintf>
9000983c:	480e      	ldr	r0, [pc, #56]	; (90009878 <USBH_UserProcess+0xbc>)
        LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
9000983e:	f002 f99f 	bl	9000bb80 <puts>
90009842:	f04f 33ff 	mov.w	r3, #4294967295
90009846:	6023      	str	r3, [r4, #0]
    break;
   
  default:
    break; 
  }
}
90009848:	bd10      	pop	{r4, pc}
    appli_state = APPLICATION_START;
9000984a:	4b02      	ldr	r3, [pc, #8]	; (90009854 <USBH_UserProcess+0x98>)
9000984c:	2201      	movs	r2, #1
9000984e:	701a      	strb	r2, [r3, #0]
}
90009850:	e7fa      	b.n	90009848 <USBH_UserProcess+0x8c>
90009852:	bf00      	nop
90009854:	20000b8c 	.word	0x20000b8c
90009858:	90010d50 	.word	0x90010d50
9000985c:	900112d9 	.word	0x900112d9
90009860:	ffff0000 	.word	0xffff0000
90009864:	2000d1fc 	.word	0x2000d1fc
90009868:	90010e88 	.word	0x90010e88
9000986c:	90011323 	.word	0x90011323
90009870:	900112da 	.word	0x900112da
90009874:	20000b8d 	.word	0x20000b8d
90009878:	900112fe 	.word	0x900112fe

9000987c <main>:
  SCB->VTOR = QSPI_BASE | VECT_TAB_OFFSET;
9000987c:	4b5a      	ldr	r3, [pc, #360]	; (900099e8 <main+0x16c>)
9000987e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
{
90009882:	b500      	push	{lr}
  SCB->VTOR = QSPI_BASE | VECT_TAB_OFFSET;
90009884:	609a      	str	r2, [r3, #8]
{
90009886:	b0b3      	sub	sp, #204	; 0xcc
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90009888:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000988c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90009890:	2100      	movs	r1, #0
90009892:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90009896:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000989a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
9000989e:	695a      	ldr	r2, [r3, #20]
900098a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
900098a4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900098a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900098aa:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
900098ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900098b2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
900098b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900098ba:	f643 70e0 	movw	r0, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900098be:	f3c2 01c9 	ubfx	r1, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900098c2:	f3c2 324e 	ubfx	r2, r2, #13, #15
900098c6:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900098c8:	ea02 0600 	and.w	r6, r2, r0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900098cc:	460c      	mov	r4, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900098ce:	ea46 7584 	orr.w	r5, r6, r4, lsl #30
      } while (ways-- != 0U);
900098d2:	3c01      	subs	r4, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900098d4:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
900098d8:	d2f9      	bcs.n	900098ce <main+0x52>
    } while(sets-- != 0U);
900098da:	3a20      	subs	r2, #32
900098dc:	f112 0f20 	cmn.w	r2, #32
900098e0:	d1f2      	bne.n	900098c8 <main+0x4c>
900098e2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900098e6:	695a      	ldr	r2, [r3, #20]
900098e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
900098ec:	615a      	str	r2, [r3, #20]
900098ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900098f2:	f3bf 8f6f 	isb	sy
  HAL_Init();
900098f6:	f7f9 f8c5 	bl	90002a84 <HAL_Init>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900098fa:	2601      	movs	r6, #1
900098fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90009900:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;  
90009902:	f04f 0e19 	mov.w	lr, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90009906:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
90009908:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
9000990a:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
9000990e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
90009912:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;  
90009916:	f44f 73c8 	mov.w	r3, #400	; 0x190
9000991a:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 8;
9000991e:	2308      	movs	r3, #8
90009920:	9310      	str	r3, [sp, #64]	; 0x40
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90009922:	f7fa fe53 	bl	900045cc <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
90009926:	b100      	cbz	r0, 9000992a <main+0xae>
  {
    while(1) { ; }
90009928:	e7fe      	b.n	90009928 <main+0xac>
  }

  /* Activate the OverDrive to reach the 200 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
9000992a:	f7fa fe17 	bl	9000455c <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
9000992e:	b100      	cbz	r0, 90009932 <main+0xb6>
  {
    while(1) { ; }
90009930:	e7fe      	b.n	90009930 <main+0xb4>
  }

  /* Select PLLSAI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
90009932:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
90009936:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
9000993a:	a811      	add	r0, sp, #68	; 0x44
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
9000993c:	9619      	str	r6, [sp, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
9000993e:	9311      	str	r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
90009940:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
90009944:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
90009946:	2304      	movs	r3, #4
90009948:	e9cd c316 	strd	ip, r3, [sp, #88]	; 0x58
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
9000994c:	f7fb f8c4 	bl	90004ad8 <HAL_RCCEx_PeriphCLKConfig>
  if(ret != HAL_OK)
90009950:	b100      	cbz	r0, 90009954 <main+0xd8>
  {
    while(1) { ; }
90009952:	e7fe      	b.n	90009952 <main+0xd6>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
90009954:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90009956:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
9000995a:	9002      	str	r0, [sp, #8]

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
9000995c:	2106      	movs	r1, #6
9000995e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90009960:	e9cd 3500 	strd	r3, r5, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90009964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90009968:	e9cd 2303 	strd	r2, r3, [sp, #12]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
9000996c:	f7fb f816 	bl	9000499c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
90009970:	4605      	mov	r5, r0
90009972:	b100      	cbz	r0, 90009976 <main+0xfa>
  {
    while(1) { ; }
90009974:	e7fe      	b.n	90009974 <main+0xf8>
  BSP_LED_Init(LED1);
90009976:	f7f8 fd9b 	bl	900024b0 <BSP_LED_Init>
  BSP_LCD_Init();
9000997a:	f7f8 fc63 	bl	90002244 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS); 
9000997e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
90009982:	4630      	mov	r0, r6
90009984:	f7f7 ff1e 	bl	900017c4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
90009988:	4630      	mov	r0, r6
9000998a:	f7f7 ff57 	bl	9000183c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
9000998e:	f7f8 fb9b 	bl	900020c8 <BSP_LCD_DisplayOn>
  LCD_LOG_Init();
90009992:	f001 fec1 	bl	9000b718 <LCD_LOG_Init>
  LCD_UsrLog("USB Host library started.\n"); 
90009996:	4b15      	ldr	r3, [pc, #84]	; (900099ec <main+0x170>)
90009998:	4815      	ldr	r0, [pc, #84]	; (900099f0 <main+0x174>)
9000999a:	601c      	str	r4, [r3, #0]
9000999c:	f002 f8f0 	bl	9000bb80 <puts>
  USBH_UsrLog("Starting Audio Demo");
900099a0:	4814      	ldr	r0, [pc, #80]	; (900099f4 <main+0x178>)
900099a2:	f002 f87f 	bl	9000baa4 <iprintf>
900099a6:	200a      	movs	r0, #10
900099a8:	f002 f88e 	bl	9000bac8 <putchar>
  AUDIO_PLAYER_Init();
900099ac:	f000 fa78 	bl	90009ea0 <AUDIO_PLAYER_Init>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
900099b0:	f7f7 fef0 	bl	90001794 <BSP_LCD_GetXSize>
900099b4:	4604      	mov	r4, r0
900099b6:	f7f7 fef9 	bl	900017ac <BSP_LCD_GetYSize>
900099ba:	b281      	uxth	r1, r0
900099bc:	b2a0      	uxth	r0, r4
    USBH_Process(&hUSBHost);
900099be:	4c0e      	ldr	r4, [pc, #56]	; (900099f8 <main+0x17c>)
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
900099c0:	f7f8 ff40 	bl	90002844 <BSP_TS_Init>
  USBH_Init(&hUSBHost, USBH_UserProcess, 0);
900099c4:	462a      	mov	r2, r5
900099c6:	490d      	ldr	r1, [pc, #52]	; (900099fc <main+0x180>)
900099c8:	480b      	ldr	r0, [pc, #44]	; (900099f8 <main+0x17c>)
900099ca:	f7fd f919 	bl	90006c00 <USBH_Init>
  USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
900099ce:	490c      	ldr	r1, [pc, #48]	; (90009a00 <main+0x184>)
900099d0:	4809      	ldr	r0, [pc, #36]	; (900099f8 <main+0x17c>)
900099d2:	f7fd f941 	bl	90006c58 <USBH_RegisterClass>
  USBH_Start(&hUSBHost);
900099d6:	4808      	ldr	r0, [pc, #32]	; (900099f8 <main+0x17c>)
900099d8:	f7fd f9c0 	bl	90006d5c <USBH_Start>
    USBH_Process(&hUSBHost);
900099dc:	4620      	mov	r0, r4
900099de:	f7fd f9c7 	bl	90006d70 <USBH_Process>
    AUDIO_MenuProcess();
900099e2:	f000 f861 	bl	90009aa8 <AUDIO_MenuProcess>
  while (1)
900099e6:	e7f9      	b.n	900099dc <main+0x160>
900099e8:	e000ed00 	.word	0xe000ed00
900099ec:	2000d1fc 	.word	0x2000d1fc
900099f0:	90011345 	.word	0x90011345
900099f4:	9001135f 	.word	0x9001135f
900099f8:	20000dc8 	.word	0x20000dc8
900099fc:	900097bd 	.word	0x900097bd
90009a00:	20000094 	.word	0x20000094

90009a04 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{
90009a04:	b510      	push	{r4, lr}
90009a06:	b0a2      	sub	sp, #136	; 0x88
90009a08:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
90009a0a:	a801      	add	r0, sp, #4
90009a0c:	f7fb faee 	bl	90004fec <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
90009a10:	f642 3311 	movw	r3, #11025	; 0x2b11
90009a14:	429c      	cmp	r4, r3
90009a16:	d007      	beq.n	90009a28 <BSP_AUDIO_OUT_ClockConfig+0x24>
90009a18:	f245 6322 	movw	r3, #22050	; 0x5622
90009a1c:	429c      	cmp	r4, r3
90009a1e:	d003      	beq.n	90009a28 <BSP_AUDIO_OUT_ClockConfig+0x24>
90009a20:	f64a 4344 	movw	r3, #44100	; 0xac44
90009a24:	429c      	cmp	r4, r3
90009a26:	d113      	bne.n	90009a50 <BSP_AUDIO_OUT_ClockConfig+0x4c>
  {
    /* Configure PLLSAI prescalers */
    /* PLLI2S_VCO: VCO_429M
    SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
90009a28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
90009a2c:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
90009a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
90009a32:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
90009a34:	2308      	movs	r3, #8
90009a36:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
90009a38:	f240 13ad 	movw	r3, #429	; 0x1ad
90009a3c:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
90009a3e:	2302      	movs	r3, #2
90009a40:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
90009a42:	2313      	movs	r3, #19
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
90009a44:	a801      	add	r0, sp, #4
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
90009a46:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
90009a48:	f7fb f846 	bl	90004ad8 <HAL_RCCEx_PeriphCLKConfig>
  }
}
90009a4c:	b022      	add	sp, #136	; 0x88
90009a4e:	bd10      	pop	{r4, pc}
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
90009a50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
90009a54:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
90009a56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
90009a5a:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
90009a5c:	2308      	movs	r3, #8
90009a5e:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;
90009a60:	f44f 73ac 	mov.w	r3, #344	; 0x158
90009a64:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
90009a66:	2307      	movs	r3, #7
90009a68:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
90009a6a:	2301      	movs	r3, #1
90009a6c:	e7ea      	b.n	90009a44 <BSP_AUDIO_OUT_ClockConfig+0x40>
	...

90009a70 <BSP_LCD_ClockConfig>:
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90009a70:	4807      	ldr	r0, [pc, #28]	; (90009a90 <BSP_LCD_ClockConfig+0x20>)
90009a72:	2308      	movs	r3, #8
90009a74:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90009a78:	23c0      	movs	r3, #192	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90009a7a:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90009a7e:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
90009a80:	2305      	movs	r3, #5
90009a82:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
90009a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90009a88:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90009a8a:	f7fb b825 	b.w	90004ad8 <HAL_RCCEx_PeriphCLKConfig>
90009a8e:	bf00      	nop
90009a90:	20000b8c 	.word	0x20000b8c

90009a94 <LCD_ClearTextZone>:
  * @brief  Clears the text zone.
  * @param  None
  * @retval None
  */
static void LCD_ClearTextZone(void)
{
90009a94:	b510      	push	{r4, lr}
90009a96:	2403      	movs	r4, #3
  uint8_t i = 0;
  
  for(i= 0; i < 13; i++)
  {
    BSP_LCD_ClearStringLine(i + 3);
90009a98:	4620      	mov	r0, r4
  for(i= 0; i < 13; i++)
90009a9a:	3401      	adds	r4, #1
    BSP_LCD_ClearStringLine(i + 3);
90009a9c:	f7f8 fa04 	bl	90001ea8 <BSP_LCD_ClearStringLine>
  for(i= 0; i < 13; i++)
90009aa0:	2c10      	cmp	r4, #16
90009aa2:	d1f9      	bne.n	90009a98 <LCD_ClearTextZone+0x4>
  }
}
90009aa4:	bd10      	pop	{r4, pc}
	...

90009aa8 <AUDIO_MenuProcess>:
{
90009aa8:	b570      	push	{r4, r5, r6, lr}
  if(appli_state == APPLICATION_READY)
90009aaa:	4d57      	ldr	r5, [pc, #348]	; (90009c08 <AUDIO_MenuProcess+0x160>)
{
90009aac:	b08c      	sub	sp, #48	; 0x30
  if(appli_state == APPLICATION_READY)
90009aae:	782b      	ldrb	r3, [r5, #0]
90009ab0:	2b02      	cmp	r3, #2
90009ab2:	d134      	bne.n	90009b1e <AUDIO_MenuProcess+0x76>
    switch(AudioDemo.state)
90009ab4:	4c55      	ldr	r4, [pc, #340]	; (90009c0c <AUDIO_MenuProcess+0x164>)
90009ab6:	7823      	ldrb	r3, [r4, #0]
90009ab8:	2b08      	cmp	r3, #8
90009aba:	d830      	bhi.n	90009b1e <AUDIO_MenuProcess+0x76>
90009abc:	e8df f003 	tbb	[pc, r3]
90009ac0:	63793e05 	.word	0x63793e05
90009ac4:	2f2f2f2f 	.word	0x2f2f2f2f
90009ac8:	8b          	.byte	0x8b
90009ac9:	00          	.byte	0x00
      AudioDemo.state = WAIT;
90009aca:	2601      	movs	r6, #1
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
90009acc:	4850      	ldr	r0, [pc, #320]	; (90009c10 <AUDIO_MenuProcess+0x168>)
      AudioDemo.state = WAIT;
90009ace:	7026      	strb	r6, [r4, #0]
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
90009ad0:	f7f7 fec6 	bl	90001860 <BSP_LCD_SetBackColor>
	  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
90009ad4:	484f      	ldr	r0, [pc, #316]	; (90009c14 <AUDIO_MenuProcess+0x16c>)
90009ad6:	f7f7 fecf 	bl	90001878 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009ada:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009ade:	f7f7 feb3 	bl	90001848 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"       ___          ___      __   _      __    ____________  ___");
90009ae2:	494d      	ldr	r1, [pc, #308]	; (90009c18 <AUDIO_MenuProcess+0x170>)
90009ae4:	2002      	movs	r0, #2
90009ae6:	f7f8 f845 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(3, (uint8_t *)"      / _ |__ _____/ (_)__  / /  (_)__  / /__ / __/_  __/  |/  /");
90009aea:	494c      	ldr	r1, [pc, #304]	; (90009c1c <AUDIO_MenuProcess+0x174>)
90009aec:	2003      	movs	r0, #3
90009aee:	f7f8 f841 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"     / __ / // / _  / / _ \\/ /__/ / _ \\/  '_/_\\ \\  / / / /|_/ / ");
90009af2:	494b      	ldr	r1, [pc, #300]	; (90009c20 <AUDIO_MenuProcess+0x178>)
90009af4:	2004      	movs	r0, #4
90009af6:	f7f8 f83d 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    /_/ |_\\_,_/\\_,_/_/\\___/____/_/_//_/_/\\_\\/___/ /_/ /_/  /_/  ");
90009afa:	494a      	ldr	r1, [pc, #296]	; (90009c24 <AUDIO_MenuProcess+0x17c>)
90009afc:	2005      	movs	r0, #5
90009afe:	f7f8 f839 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
90009b02:	4849      	ldr	r0, [pc, #292]	; (90009c28 <AUDIO_MenuProcess+0x180>)
90009b04:	f7f7 feb8 	bl	90001878 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"    >> TRANSMITTER");
90009b08:	4948      	ldr	r1, [pc, #288]	; (90009c2c <AUDIO_MenuProcess+0x184>)
90009b0a:	200a      	movs	r0, #10
90009b0c:	f7f8 f832 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"    >> RECEIVER");
90009b10:	200d      	movs	r0, #13
90009b12:	4947      	ldr	r1, [pc, #284]	; (90009c30 <AUDIO_MenuProcess+0x188>)
90009b14:	f7f8 f82e 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SelectLayer(1);
90009b18:	4630      	mov	r0, r6
90009b1a:	f7f7 fe8f 	bl	9000183c <BSP_LCD_SelectLayer>
  if(appli_state == APPLICATION_DISCONNECT)
90009b1e:	782b      	ldrb	r3, [r5, #0]
90009b20:	2b03      	cmp	r3, #3
90009b22:	d109      	bne.n	90009b38 <AUDIO_MenuProcess+0x90>
    appli_state = APPLICATION_IDLE;     
90009b24:	2300      	movs	r3, #0
90009b26:	702b      	strb	r3, [r5, #0]
    LCD_LOG_UpdateDisplay(); 
90009b28:	f001 fe00 	bl	9000b72c <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
90009b2c:	4b37      	ldr	r3, [pc, #220]	; (90009c0c <AUDIO_MenuProcess+0x164>)
90009b2e:	2206      	movs	r2, #6
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);    
90009b30:	2002      	movs	r0, #2
    AudioDemo.state = AUDIO_DEMO_IDLE; 
90009b32:	701a      	strb	r2, [r3, #0]
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);    
90009b34:	f7f7 fb58 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
}
90009b38:	b00c      	add	sp, #48	; 0x30
90009b3a:	bd70      	pop	{r4, r5, r6, pc}
    	BSP_TS_GetState(&TS_State);
90009b3c:	a801      	add	r0, sp, #4
90009b3e:	f7f8 fecb 	bl	900028d8 <BSP_TS_GetState>
    	if(TS_State.touchDetected == 1)
90009b42:	f89d 3004 	ldrb.w	r3, [sp, #4]
90009b46:	2b01      	cmp	r3, #1
90009b48:	d1e9      	bne.n	90009b1e <AUDIO_MenuProcess+0x76>
    		if ((TS_State.touchX[0] > TOUCH_TRANSMITTER_XMIN) &&
90009b4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90009b4e:	3b29      	subs	r3, #41	; 0x29
90009b50:	b29b      	uxth	r3, r3
90009b52:	2ba8      	cmp	r3, #168	; 0xa8
90009b54:	d809      	bhi.n	90009b6a <AUDIO_MenuProcess+0xc2>
    			(TS_State.touchY[0] > TOUCH_TRANSMITTER_YMIN) &&
90009b56:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    			(TS_State.touchX[0] < TOUCH_TRANSMITTER_XMAX) &&
90009b5a:	f1a3 0297 	sub.w	r2, r3, #151	; 0x97
90009b5e:	2a1c      	cmp	r2, #28
90009b60:	d80b      	bhi.n	90009b7a <AUDIO_MenuProcess+0xd2>
    			AudioDemo.state = TRANSMITTER;
90009b62:	2303      	movs	r3, #3
90009b64:	7023      	strb	r3, [r4, #0]
    			AUDIO_StorageParse();
90009b66:	f7ff fddb 	bl	90009720 <AUDIO_StorageParse>
          BSP_TS_GetState(&TS_State);
90009b6a:	a801      	add	r0, sp, #4
90009b6c:	f7f8 feb4 	bl	900028d8 <BSP_TS_GetState>
        }while(TS_State.touchDetected > 0);
90009b70:	f89d 3004 	ldrb.w	r3, [sp, #4]
90009b74:	2b00      	cmp	r3, #0
90009b76:	d1f8      	bne.n	90009b6a <AUDIO_MenuProcess+0xc2>
90009b78:	e7d1      	b.n	90009b1e <AUDIO_MenuProcess+0x76>
    				 (TS_State.touchX[0] < TOUCH_RECEIVER_XMAX) &&
90009b7a:	3bc9      	subs	r3, #201	; 0xc9
90009b7c:	2b1c      	cmp	r3, #28
90009b7e:	d8f4      	bhi.n	90009b6a <AUDIO_MenuProcess+0xc2>
    			AudioDemo.state = RECEIVER;
90009b80:	2302      	movs	r3, #2
90009b82:	7023      	strb	r3, [r4, #0]
90009b84:	e7f1      	b.n	90009b6a <AUDIO_MenuProcess+0xc2>
    	if(AudioState == AUDIO_STATE_IDLE)
90009b86:	78a3      	ldrb	r3, [r4, #2]
90009b88:	b983      	cbnz	r3, 90009bac <AUDIO_MenuProcess+0x104>
    		BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
90009b8a:	4821      	ldr	r0, [pc, #132]	; (90009c10 <AUDIO_MenuProcess+0x168>)
90009b8c:	f7f7 fe8c 	bl	900018a8 <BSP_LCD_Clear>
    		BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
90009b90:	4825      	ldr	r0, [pc, #148]	; (90009c28 <AUDIO_MenuProcess+0x180>)
90009b92:	f7f7 fe71 	bl	90001878 <BSP_LCD_SetFont>
    		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009b96:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009b9a:	f7f7 fe55 	bl	90001848 <BSP_LCD_SetTextColor>
    		BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >> --TRANSMITTER--");
90009b9e:	4925      	ldr	r1, [pc, #148]	; (90009c34 <AUDIO_MenuProcess+0x18c>)
90009ba0:	2004      	movs	r0, #4
90009ba2:	f7f7 ffe7 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
    		AudioState = AUDIO_STATE_INIT;
90009ba6:	2302      	movs	r3, #2
90009ba8:	70a3      	strb	r3, [r4, #2]
90009baa:	e7b8      	b.n	90009b1e <AUDIO_MenuProcess+0x76>
    		TRANSMITTER_Process();
90009bac:	f000 fb32 	bl	9000a214 <TRANSMITTER_Process>
90009bb0:	e7b5      	b.n	90009b1e <AUDIO_MenuProcess+0x76>
		LCD_ClearTextZone();
90009bb2:	f7ff ff6f 	bl	90009a94 <LCD_ClearTextZone>
		BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
90009bb6:	481c      	ldr	r0, [pc, #112]	; (90009c28 <AUDIO_MenuProcess+0x180>)
90009bb8:	f7f7 fe5e 	bl	90001878 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009bbc:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009bc0:	f7f7 fe42 	bl	90001848 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >> --RECEIVER--");
90009bc4:	491c      	ldr	r1, [pc, #112]	; (90009c38 <AUDIO_MenuProcess+0x190>)
90009bc6:	2004      	movs	r0, #4
90009bc8:	f7f7 ffd4 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    >> Ready to receive...");
90009bcc:	491b      	ldr	r1, [pc, #108]	; (90009c3c <AUDIO_MenuProcess+0x194>)
90009bce:	2005      	movs	r0, #5
90009bd0:	f7f7 ffd0 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		break;
90009bd4:	e7a3      	b.n	90009b1e <AUDIO_MenuProcess+0x76>
        if(AudioState == AUDIO_STATE_IDLE)
90009bd6:	78a3      	ldrb	r3, [r4, #2]
90009bd8:	b96b      	cbnz	r3, 90009bf6 <AUDIO_MenuProcess+0x14e>
          AudioState = AUDIO_STATE_INIT;
90009bda:	2302      	movs	r3, #2
90009bdc:	70a3      	strb	r3, [r4, #2]
          LCD_ClearTextZone();
90009bde:	f7ff ff59 	bl	90009a94 <LCD_ClearTextZone>
          if(AUDIO_REC_Start() == AUDIO_ERROR_IO)
90009be2:	f001 f977 	bl	9000aed4 <AUDIO_REC_Start>
90009be6:	2801      	cmp	r0, #1
90009be8:	d199      	bne.n	90009b1e <AUDIO_MenuProcess+0x76>
    LCD_LOG_UpdateDisplay(); 
90009bea:	f001 fd9f 	bl	9000b72c <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
90009bee:	2306      	movs	r3, #6
90009bf0:	7023      	strb	r3, [r4, #0]
            AudioDemo.state = AUDIO_DEMO_IDLE;
90009bf2:	7023      	strb	r3, [r4, #0]
90009bf4:	e793      	b.n	90009b1e <AUDIO_MenuProcess+0x76>
          status = AUDIO_REC_Process();
90009bf6:	f001 faef 	bl	9000b1d8 <AUDIO_REC_Process>
          if((status == AUDIO_ERROR_IO) || (status == AUDIO_ERROR_EOF))
90009bfa:	3801      	subs	r0, #1
90009bfc:	b2c0      	uxtb	r0, r0
90009bfe:	2801      	cmp	r0, #1
90009c00:	d88d      	bhi.n	90009b1e <AUDIO_MenuProcess+0x76>
            LCD_ClearTextZone();
90009c02:	f7ff ff47 	bl	90009a94 <LCD_ClearTextZone>
90009c06:	e7f0      	b.n	90009bea <AUDIO_MenuProcess+0x142>
90009c08:	20000b8c 	.word	0x20000b8c
90009c0c:	20001310 	.word	0x20001310
90009c10:	ff008000 	.word	0xff008000
90009c14:	20000070 	.word	0x20000070
90009c18:	90011373 	.word	0x90011373
90009c1c:	900113b4 	.word	0x900113b4
90009c20:	900113f5 	.word	0x900113f5
90009c24:	90011436 	.word	0x90011436
90009c28:	20000078 	.word	0x20000078
90009c2c:	90011477 	.word	0x90011477
90009c30:	9001148a 	.word	0x9001148a
90009c34:	9001149a 	.word	0x9001149a
90009c38:	900114b1 	.word	0x900114b1
90009c3c:	900114c5 	.word	0x900114c5

90009c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90009c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 90009c78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90009c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90009c46:	e003      	b.n	90009c50 <LoopCopyDataInit>

90009c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90009c48:	4b0c      	ldr	r3, [pc, #48]	; (90009c7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
90009c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
90009c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
90009c4e:	3104      	adds	r1, #4

90009c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90009c50:	480b      	ldr	r0, [pc, #44]	; (90009c80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90009c52:	4b0c      	ldr	r3, [pc, #48]	; (90009c84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90009c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
90009c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90009c58:	d3f6      	bcc.n	90009c48 <CopyDataInit>
  ldr  r2, =_sbss
90009c5a:	4a0b      	ldr	r2, [pc, #44]	; (90009c88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
90009c5c:	e002      	b.n	90009c64 <LoopFillZerobss>

90009c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
90009c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
90009c60:	f842 3b04 	str.w	r3, [r2], #4

90009c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
90009c64:	4b09      	ldr	r3, [pc, #36]	; (90009c8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
90009c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
90009c68:	d3f9      	bcc.n	90009c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
90009c6a:	f000 f82f 	bl	90009ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
90009c6e:	f002 f8f9 	bl	9000be64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90009c72:	f7ff fe03 	bl	9000987c <main>
  bx  lr    
90009c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90009c78:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
90009c7c:	90011afc 	.word	0x90011afc
  ldr  r0, =_sdata
90009c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
90009c84:	20000160 	.word	0x20000160
  ldr  r2, =_sbss
90009c88:	20000160 	.word	0x20000160
  ldr  r3, = _ebss
90009c8c:	20010c18 	.word	0x20010c18

90009c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90009c90:	e7fe      	b.n	90009c90 <ADC_IRQHandler>

90009c92 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
90009c92:	4770      	bx	lr

90009c94 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90009c94:	e7fe      	b.n	90009c94 <HardFault_Handler>

90009c96 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90009c96:	e7fe      	b.n	90009c96 <MemManage_Handler>

90009c98 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90009c98:	e7fe      	b.n	90009c98 <BusFault_Handler>

90009c9a <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90009c9a:	e7fe      	b.n	90009c9a <UsageFault_Handler>

90009c9c <SVC_Handler>:
90009c9c:	4770      	bx	lr

90009c9e <DebugMon_Handler>:
90009c9e:	4770      	bx	lr

90009ca0 <PendSV_Handler>:
90009ca0:	4770      	bx	lr

90009ca2 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
90009ca2:	f7f8 bf01 	b.w	90002aa8 <HAL_IncTick>
	...

90009ca8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
  HAL_HCD_IRQHandler(&hhcd);
90009ca8:	4801      	ldr	r0, [pc, #4]	; (90009cb0 <OTG_FS_IRQHandler+0x8>)
90009caa:	f7f9 bcb3 	b.w	90003614 <HAL_HCD_IRQHandler>
90009cae:	bf00      	nop
90009cb0:	200086d0 	.word	0x200086d0

90009cb4 <DMA2_Stream4_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
90009cb4:	4b01      	ldr	r3, [pc, #4]	; (90009cbc <DMA2_Stream4_IRQHandler+0x8>)
90009cb6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
90009cb8:	f7f9 b8c0 	b.w	90002e3c <HAL_DMA_IRQHandler>
90009cbc:	2000018c 	.word	0x2000018c

90009cc0 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
90009cc0:	4b01      	ldr	r3, [pc, #4]	; (90009cc8 <DMA2_Stream7_IRQHandler+0x8>)
90009cc2:	6f18      	ldr	r0, [r3, #112]	; 0x70
90009cc4:	f7f9 b8ba 	b.w	90002e3c <HAL_DMA_IRQHandler>
90009cc8:	20000210 	.word	0x20000210

90009ccc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90009ccc:	490f      	ldr	r1, [pc, #60]	; (90009d0c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90009cce:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90009cd0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
90009cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90009cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
90009cdc:	4b0c      	ldr	r3, [pc, #48]	; (90009d10 <SystemInit+0x44>)
90009cde:	681a      	ldr	r2, [r3, #0]
90009ce0:	f042 0201 	orr.w	r2, r2, #1
90009ce4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
90009ce6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
90009ce8:	681a      	ldr	r2, [r3, #0]
90009cea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
90009cee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90009cf2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
90009cf4:	4a07      	ldr	r2, [pc, #28]	; (90009d14 <SystemInit+0x48>)
90009cf6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
90009cf8:	681a      	ldr	r2, [r3, #0]
90009cfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
90009cfe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
90009d00:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
90009d02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
90009d06:	608b      	str	r3, [r1, #8]
#endif
}
90009d08:	4770      	bx	lr
90009d0a:	bf00      	nop
90009d0c:	e000ed00 	.word	0xe000ed00
90009d10:	40023800 	.word	0x40023800
90009d14:	24003010 	.word	0x24003010

90009d18 <InsertarBit>:
/**
 * @brief  Escribe la secuencia en el archivo WAV.
 * @param  byteLeido: byte leido del fichero que txt que se quiere transmitir
 */
static void InsertarBit(uint8_t bit)
{
90009d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t byteswritten = 0;

	if (WaveBuffer.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE)
90009d1a:	4d29      	ldr	r5, [pc, #164]	; (90009dc0 <InsertarBit+0xa8>)
	uint32_t byteswritten = 0;
90009d1c:	2700      	movs	r7, #0
{
90009d1e:	4606      	mov	r6, r0
	if (WaveBuffer.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE)
90009d20:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
90009d24:	f5a5 4480 	sub.w	r4, r5, #16384	; 0x4000
	uint32_t byteswritten = 0;
90009d28:	9701      	str	r7, [sp, #4]
	if (WaveBuffer.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE)
90009d2a:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
90009d2e:	d10e      	bne.n	90009d4e <InsertarBit+0x36>
	{
		// Si se ha llenado el buffer se escribe el buffer en el fichero
		f_write(&MessageWavFile, (uint8_t*)WaveBuffer.pcm_buff, 2*WaveBuffer.pcm_ptr, (void*)&byteswritten);
90009d30:	ab01      	add	r3, sp, #4
90009d32:	f44f 4290 	mov.w	r2, #18432	; 0x4800
90009d36:	4621      	mov	r1, r4
90009d38:	4822      	ldr	r0, [pc, #136]	; (90009dc4 <InsertarBit+0xac>)
90009d3a:	f7ff f972 	bl	90009022 <f_write>
		WaveBuffer.pcm_ptr = 0;
		WaveBuffer.fptr += byteswritten;
90009d3e:	f8d5 380c 	ldr.w	r3, [r5, #2060]	; 0x80c
90009d42:	9a01      	ldr	r2, [sp, #4]
		WaveBuffer.pcm_ptr = 0;
90009d44:	f8c5 7800 	str.w	r7, [r5, #2048]	; 0x800
		WaveBuffer.fptr += byteswritten;
90009d48:	4413      	add	r3, r2
90009d4a:	f8c5 380c 	str.w	r3, [r5, #2060]	; 0x80c
	}

	if (bit == 1)
90009d4e:	2e01      	cmp	r6, #1
90009d50:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
90009d54:	d016      	beq.n	90009d84 <InsertarBit+0x6c>
90009d56:	f103 0140 	add.w	r1, r3, #64	; 0x40
		// En este caso, el bit leido es un cero, por lo que la seal a transmitir es la correspondiente a 5512.5 Hz, y
		// se transmiten todas las muestras del seno. 
		for (uint8_t periodo = 0; periodo < 4; periodo++)
		{
			// Se configura el número de periodos a transmitir, en este caso serian 2 periodos por cada bit.
			for (uint8_t j = 0; j < 8; j++)
90009d5a:	4e1b      	ldr	r6, [pc, #108]	; (90009dc8 <InsertarBit+0xb0>)
90009d5c:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	if (bit == 1)
90009d60:	2000      	movs	r0, #0
			for (uint8_t j = 0; j < 8; j++)
90009d62:	3001      	adds	r0, #1
			{
				// De igual forma qque anteriormente, se insertan las muestras en el bufferm dos veces.
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009d64:	f836 7b02 	ldrh.w	r7, [r6], #2
			for (uint8_t j = 0; j < 8; j++)
90009d68:	3204      	adds	r2, #4
90009d6a:	2808      	cmp	r0, #8
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009d6c:	f822 7c04 	strh.w	r7, [r2, #-4]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
90009d70:	f822 7c02 	strh.w	r7, [r2, #-2]
			for (uint8_t j = 0; j < 8; j++)
90009d74:	d1f5      	bne.n	90009d62 <InsertarBit+0x4a>
				
				// Se actualiza el puntero del buffer.
				WaveBuffer.pcm_ptr += 2;
90009d76:	3310      	adds	r3, #16
		for (uint8_t periodo = 0; periodo < 4; periodo++)
90009d78:	428b      	cmp	r3, r1
90009d7a:	d1ee      	bne.n	90009d5a <InsertarBit+0x42>
90009d7c:	f8c5 1800 	str.w	r1, [r5, #2048]	; 0x800
			}
		}
	}
}
90009d80:	b003      	add	sp, #12
90009d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bit == 1)
90009d84:	2200      	movs	r2, #0
90009d86:	eb04 0143 	add.w	r1, r4, r3, lsl #1
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009d8a:	f647 76ff 	movw	r6, #32767	; 0x7fff
90009d8e:	f248 0401 	movw	r4, #32769	; 0x8001
90009d92:	4610      	mov	r0, r2
		for (uint8_t periodo = 0; periodo < 8; periodo++)
90009d94:	3201      	adds	r2, #1
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009d96:	8008      	strh	r0, [r1, #0]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
90009d98:	8048      	strh	r0, [r1, #2]
		for (uint8_t periodo = 0; periodo < 8; periodo++)
90009d9a:	3110      	adds	r1, #16
90009d9c:	2a08      	cmp	r2, #8
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009d9e:	f821 6c0c 	strh.w	r6, [r1, #-12]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
90009da2:	f821 6c0a 	strh.w	r6, [r1, #-10]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009da6:	f821 0c08 	strh.w	r0, [r1, #-8]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
90009daa:	f821 0c06 	strh.w	r0, [r1, #-6]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009dae:	f821 4c04 	strh.w	r4, [r1, #-4]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
90009db2:	f821 4c02 	strh.w	r4, [r1, #-2]
		for (uint8_t periodo = 0; periodo < 8; periodo++)
90009db6:	d1ed      	bne.n	90009d94 <InsertarBit+0x7c>
				WaveBuffer.pcm_ptr += 2;
90009db8:	f103 0140 	add.w	r1, r3, #64	; 0x40
90009dbc:	e7de      	b.n	90009d7c <InsertarBit+0x64>
90009dbe:	bf00      	nop
90009dc0:	20005eb8 	.word	0x20005eb8
90009dc4:	20001314 	.word	0x20001314
90009dc8:	90010d30 	.word	0x90010d30

90009dcc <AUDIO_AcquireTouchButtons>:
/**
 * @brief  Test touch screen state and modify audio state machine according to that
 * @param  None
 * @retval None
 */
static void AUDIO_AcquireTouchButtons(void) {
90009dcc:	b510      	push	{r4, lr}
	static TS_StateTypeDef TS_State = { 0 };

	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
90009dce:	4c32      	ldr	r4, [pc, #200]	; (90009e98 <AUDIO_AcquireTouchButtons+0xcc>)
90009dd0:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
	{
		BSP_TS_GetState(&TS_State);
90009dd4:	f504 700c 	add.w	r0, r4, #560	; 0x230
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
90009dd8:	2b01      	cmp	r3, #1
90009dda:	d103      	bne.n	90009de4 <AUDIO_AcquireTouchButtons+0x18>
					&& (TS_State.touchY[0] < TOUCH_VOL_PLUS_YMAX)) {
				AudioState = AUDIO_STATE_VOLUME_UP;
			}
		}
	}
}
90009ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BSP_TS_GetState(&TS_State);
90009de0:	f7f8 bd7a 	b.w	900028d8 <BSP_TS_GetState>
		BSP_TS_GetState(&TS_State);
90009de4:	f7f8 fd78 	bl	900028d8 <BSP_TS_GetState>
		if (TS_State.touchDetected == 1) {
90009de8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
90009dec:	2b01      	cmp	r3, #1
90009dee:	d112      	bne.n	90009e16 <AUDIO_AcquireTouchButtons+0x4a>
			if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN)
90009df0:	f8b4 3232 	ldrh.w	r3, [r4, #562]	; 0x232
90009df4:	f1a3 0265 	sub.w	r2, r3, #101	; 0x65
90009df8:	2a16      	cmp	r2, #22
90009dfa:	d80d      	bhi.n	90009e18 <AUDIO_AcquireTouchButtons+0x4c>
					&& (TS_State.touchY[0] > TOUCH_PAUSE_YMIN)
90009dfc:	f8b4 223c 	ldrh.w	r2, [r4, #572]	; 0x23c
90009e00:	3ad5      	subs	r2, #213	; 0xd5
90009e02:	b292      	uxth	r2, r2
90009e04:	2a26      	cmp	r2, #38	; 0x26
90009e06:	d807      	bhi.n	90009e18 <AUDIO_AcquireTouchButtons+0x4c>
				if (AudioState == AUDIO_STATE_PLAY) {
90009e08:	4b24      	ldr	r3, [pc, #144]	; (90009e9c <AUDIO_AcquireTouchButtons+0xd0>)
90009e0a:	781a      	ldrb	r2, [r3, #0]
90009e0c:	2a03      	cmp	r2, #3
					AudioState = AUDIO_STATE_PAUSE;
90009e0e:	bf0c      	ite	eq
90009e10:	220b      	moveq	r2, #11
					AudioState = AUDIO_STATE_RESUME;
90009e12:	220c      	movne	r2, #12
				AudioState = AUDIO_STATE_VOLUME_UP;
90009e14:	701a      	strb	r2, [r3, #0]
}
90009e16:	bd10      	pop	{r4, pc}
					&& (TS_State.touchX[0] < TOUCH_NEXT_XMAX)
90009e18:	f46f 72c9 	mvn.w	r2, #402	; 0x192
90009e1c:	1899      	adds	r1, r3, r2
90009e1e:	b289      	uxth	r1, r1
			} else if ((TS_State.touchX[0] > TOUCH_NEXT_XMIN)
90009e20:	2930      	cmp	r1, #48	; 0x30
90009e22:	d808      	bhi.n	90009e36 <AUDIO_AcquireTouchButtons+0x6a>
					&& (TS_State.touchY[0] > TOUCH_NEXT_YMIN)
90009e24:	f8b4 223c 	ldrh.w	r2, [r4, #572]	; 0x23c
90009e28:	3a54      	subs	r2, #84	; 0x54
90009e2a:	b292      	uxth	r2, r2
90009e2c:	2a29      	cmp	r2, #41	; 0x29
90009e2e:	d81c      	bhi.n	90009e6a <AUDIO_AcquireTouchButtons+0x9e>
				AudioState = AUDIO_STATE_NEXT;
90009e30:	4b1a      	ldr	r3, [pc, #104]	; (90009e9c <AUDIO_AcquireTouchButtons+0xd0>)
90009e32:	2206      	movs	r2, #6
90009e34:	e7ee      	b.n	90009e14 <AUDIO_AcquireTouchButtons+0x48>
			} else if ((TS_State.touchX[0] > TOUCH_PREVIOUS_XMIN)
90009e36:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
90009e3a:	2a71      	cmp	r2, #113	; 0x71
90009e3c:	d808      	bhi.n	90009e50 <AUDIO_AcquireTouchButtons+0x84>
					&& (TS_State.touchY[0] > TOUCH_PREVIOUS_YMIN)
90009e3e:	f8b4 223c 	ldrh.w	r2, [r4, #572]	; 0x23c
90009e42:	3a88      	subs	r2, #136	; 0x88
90009e44:	b292      	uxth	r2, r2
90009e46:	2a21      	cmp	r2, #33	; 0x21
90009e48:	d802      	bhi.n	90009e50 <AUDIO_AcquireTouchButtons+0x84>
				AudioState = AUDIO_STATE_PREVIOUS;
90009e4a:	4b14      	ldr	r3, [pc, #80]	; (90009e9c <AUDIO_AcquireTouchButtons+0xd0>)
90009e4c:	2207      	movs	r2, #7
90009e4e:	e7e1      	b.n	90009e14 <AUDIO_AcquireTouchButtons+0x48>
			} else if ((TS_State.touchX[0] > TOUCH_STOP_XMIN)
90009e50:	f1a3 02ab 	sub.w	r2, r3, #171	; 0xab
90009e54:	2a26      	cmp	r2, #38	; 0x26
90009e56:	d808      	bhi.n	90009e6a <AUDIO_AcquireTouchButtons+0x9e>
					&& (TS_State.touchY[0] > TOUCH_STOP_YMIN)
90009e58:	f8b4 323c 	ldrh.w	r3, [r4, #572]	; 0x23c
90009e5c:	3bd5      	subs	r3, #213	; 0xd5
90009e5e:	b29b      	uxth	r3, r3
90009e60:	2b26      	cmp	r3, #38	; 0x26
90009e62:	d8d8      	bhi.n	90009e16 <AUDIO_AcquireTouchButtons+0x4a>
				AudioState = AUDIO_STATE_STOP;
90009e64:	4b0d      	ldr	r3, [pc, #52]	; (90009e9c <AUDIO_AcquireTouchButtons+0xd0>)
90009e66:	220a      	movs	r2, #10
90009e68:	e7d4      	b.n	90009e14 <AUDIO_AcquireTouchButtons+0x48>
			} else if ((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN)
90009e6a:	3b15      	subs	r3, #21
90009e6c:	2b30      	cmp	r3, #48	; 0x30
90009e6e:	d808      	bhi.n	90009e82 <AUDIO_AcquireTouchButtons+0xb6>
					&& (TS_State.touchY[0] > TOUCH_VOL_MINUS_YMIN)
90009e70:	f8b4 323c 	ldrh.w	r3, [r4, #572]	; 0x23c
90009e74:	3bd5      	subs	r3, #213	; 0xd5
90009e76:	b29b      	uxth	r3, r3
90009e78:	2b26      	cmp	r3, #38	; 0x26
90009e7a:	d8cc      	bhi.n	90009e16 <AUDIO_AcquireTouchButtons+0x4a>
				AudioState = AUDIO_STATE_VOLUME_DOWN;
90009e7c:	4b07      	ldr	r3, [pc, #28]	; (90009e9c <AUDIO_AcquireTouchButtons+0xd0>)
90009e7e:	220e      	movs	r2, #14
90009e80:	e7c8      	b.n	90009e14 <AUDIO_AcquireTouchButtons+0x48>
			} else if ((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN)
90009e82:	2930      	cmp	r1, #48	; 0x30
90009e84:	d8c7      	bhi.n	90009e16 <AUDIO_AcquireTouchButtons+0x4a>
					&& (TS_State.touchY[0] > TOUCH_VOL_PLUS_YMIN)
90009e86:	f8b4 323c 	ldrh.w	r3, [r4, #572]	; 0x23c
90009e8a:	3bd5      	subs	r3, #213	; 0xd5
90009e8c:	b29b      	uxth	r3, r3
90009e8e:	2b26      	cmp	r3, #38	; 0x26
90009e90:	d8c1      	bhi.n	90009e16 <AUDIO_AcquireTouchButtons+0x4a>
				AudioState = AUDIO_STATE_VOLUME_UP;
90009e92:	4b02      	ldr	r3, [pc, #8]	; (90009e9c <AUDIO_AcquireTouchButtons+0xd0>)
90009e94:	220d      	movs	r2, #13
90009e96:	e7bd      	b.n	90009e14 <AUDIO_AcquireTouchButtons+0x48>
90009e98:	20001314 	.word	0x20001314
90009e9c:	20001312 	.word	0x20001312

90009ea0 <AUDIO_PLAYER_Init>:
AUDIO_ErrorTypeDef AUDIO_PLAYER_Init(void) {
90009ea0:	b508      	push	{r3, lr}
	if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, uwVolume, I2S_AUDIOFREQ_44K)
90009ea2:	4b06      	ldr	r3, [pc, #24]	; (90009ebc <AUDIO_PLAYER_Init+0x1c>)
90009ea4:	f64a 4244 	movw	r2, #44100	; 0xac44
90009ea8:	2004      	movs	r0, #4
90009eaa:	6819      	ldr	r1, [r3, #0]
90009eac:	b2c9      	uxtb	r1, r1
90009eae:	f7f7 fa89 	bl	900013c4 <BSP_AUDIO_OUT_Init>
}
90009eb2:	3800      	subs	r0, #0
90009eb4:	bf18      	it	ne
90009eb6:	2001      	movne	r0, #1
90009eb8:	bd08      	pop	{r3, pc}
90009eba:	bf00      	nop
90009ebc:	200000b8 	.word	0x200000b8

90009ec0 <ReadFileIntoBuffer>:
AUDIO_ErrorTypeDef ReadFileIntoBuffer(uint8_t idx) {
90009ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	f_close(&FileHandler);
90009ec2:	4d1e      	ldr	r5, [pc, #120]	; (90009f3c <ReadFileIntoBuffer+0x7c>)
AUDIO_ErrorTypeDef ReadFileIntoBuffer(uint8_t idx) {
90009ec4:	4606      	mov	r6, r0
	if(f_open(&FileHandler, (char*) FileList.file[idx].name, FA_OPEN_EXISTING | FA_READ) == FR_OK)
90009ec6:	2401      	movs	r4, #1
90009ec8:	4f1d      	ldr	r7, [pc, #116]	; (90009f40 <ReadFileIntoBuffer+0x80>)
	f_close(&FileHandler);
90009eca:	f505 7017 	add.w	r0, r5, #604	; 0x25c
90009ece:	f7ff f9b9 	bl	90009244 <f_close>
	if(f_open(&FileHandler, (char*) FileList.file[idx].name, FA_OPEN_EXISTING | FA_READ) == FR_OK)
90009ed2:	2129      	movs	r1, #41	; 0x29
90009ed4:	4622      	mov	r2, r4
90009ed6:	f505 7017 	add.w	r0, r5, #604	; 0x25c
90009eda:	fb11 4106 	smlabb	r1, r1, r6, r4
90009ede:	4439      	add	r1, r7
90009ee0:	f7fe fede 	bl	90008ca0 <f_open>
90009ee4:	4601      	mov	r1, r0
90009ee6:	b9e8      	cbnz	r0, 90009f24 <ReadFileIntoBuffer+0x64>
		if (FileList.ptr > idx)
90009ee8:	f8b7 33d8 	ldrh.w	r3, [r7, #984]	; 0x3d8
90009eec:	42b3      	cmp	r3, r6
90009eee:	d802      	bhi.n	90009ef6 <ReadFileIntoBuffer+0x36>
		return AUDIO_ERROR_IO;
90009ef0:	2001      	movs	r0, #1
}
90009ef2:	b003      	add	sp, #12
90009ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			BufferFile.state = BUFFER_OFFSET_NONE;
90009ef6:	f885 088c 	strb.w	r0, [r5, #2188]	; 0x88c
			f_lseek(&FileHandler, 0);
90009efa:	f505 7017 	add.w	r0, r5, #604	; 0x25c
90009efe:	f7ff f9b2 	bl	90009266 <f_lseek>
			if (f_read(&FileHandler, &BufferFile.buff[0], DATA_FILE_BUFFER_SIZE, (void*) &bytesread) == FR_OK)
90009f02:	ab01      	add	r3, sp, #4
90009f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
90009f08:	f205 418c 	addw	r1, r5, #1164	; 0x48c
90009f0c:	f505 7017 	add.w	r0, r5, #604	; 0x25c
90009f10:	f7fe ffd6 	bl	90008ec0 <f_read>
90009f14:	2800      	cmp	r0, #0
90009f16:	d1eb      	bne.n	90009ef0 <ReadFileIntoBuffer+0x30>
				if (bytesread != 0)
90009f18:	9b01      	ldr	r3, [sp, #4]
90009f1a:	2b00      	cmp	r3, #0
90009f1c:	d0e8      	beq.n	90009ef0 <ReadFileIntoBuffer+0x30>
					BufferFile.fptr = bytesread;
90009f1e:	f8c5 3890 	str.w	r3, [r5, #2192]	; 0x890
					return AUDIO_ERROR_NONE;
90009f22:	e7e6      	b.n	90009ef2 <ReadFileIntoBuffer+0x32>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
90009f24:	4807      	ldr	r0, [pc, #28]	; (90009f44 <ReadFileIntoBuffer+0x84>)
90009f26:	f7f7 fc8f 	bl	90001848 <BSP_LCD_SetTextColor>
		BSP_LCD_ClearStringLine(3);
90009f2a:	2003      	movs	r0, #3
90009f2c:	f7f7 ffbc 	bl	90001ea8 <BSP_LCD_ClearStringLine>
		BSP_LCD_DisplayStringAtLine(3, (uint8_t *)"    >>  FATAL ERROR FETCHING THE INFORMATION OF THE USB");
90009f30:	2003      	movs	r0, #3
90009f32:	4905      	ldr	r1, [pc, #20]	; (90009f48 <ReadFileIntoBuffer+0x88>)
90009f34:	f7f7 fe1e 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		return AUDIO_ERROR_IO;
90009f38:	4620      	mov	r0, r4
90009f3a:	e7da      	b.n	90009ef2 <ReadFileIntoBuffer+0x32>
90009f3c:	20001314 	.word	0x20001314
90009f40:	200007b0 	.word	0x200007b0
90009f44:	ffff0000 	.word	0xffff0000
90009f48:	900114e0 	.word	0x900114e0

90009f4c <AUDIO_PLAYER_Start>:
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx) {
90009f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	f_close(&WavFile);
90009f50:	4c9c      	ldr	r4, [pc, #624]	; (9000a1c4 <AUDIO_PLAYER_Start+0x278>)
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx) {
90009f52:	4607      	mov	r7, r0
90009f54:	b092      	sub	sp, #72	; 0x48
	f_close(&WavFile);
90009f56:	f604 0094 	addw	r0, r4, #2196	; 0x894
90009f5a:	f7ff f973 	bl	90009244 <f_close>
	if (AUDIO_GetWavObjectNumber() > idx) {
90009f5e:	f7ff fc27 	bl	900097b0 <AUDIO_GetWavObjectNumber>
90009f62:	42b8      	cmp	r0, r7
90009f64:	d804      	bhi.n	90009f70 <AUDIO_PLAYER_Start+0x24>
	return AUDIO_ERROR_IO;
90009f66:	2401      	movs	r4, #1
}
90009f68:	4620      	mov	r0, r4
90009f6a:	b012      	add	sp, #72	; 0x48
90009f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (f_open(&WavFile, (char*) FileList.file[file_idx].name,
90009f70:	2201      	movs	r2, #1
90009f72:	2529      	movs	r5, #41	; 0x29
90009f74:	f8df 8298 	ldr.w	r8, [pc, #664]	; 9000a210 <AUDIO_PLAYER_Start+0x2c4>
90009f78:	f604 0094 	addw	r0, r4, #2196	; 0x894
90009f7c:	fb15 2507 	smlabb	r5, r5, r7, r2
90009f80:	4e91      	ldr	r6, [pc, #580]	; (9000a1c8 <AUDIO_PLAYER_Start+0x27c>)
90009f82:	4445      	add	r5, r8
90009f84:	4629      	mov	r1, r5
90009f86:	f7fe fe8b 	bl	90008ca0 <f_open>
90009f8a:	2800      	cmp	r0, #0
90009f8c:	d16e      	bne.n	9000a06c <AUDIO_PLAYER_Start+0x120>
		if (f_read(&WavFile, info, sizeof(WaveFormat), (void*) &bytesread)
90009f8e:	ab02      	add	r3, sp, #8
90009f90:	222c      	movs	r2, #44	; 0x2c
90009f92:	f604 21c4 	addw	r1, r4, #2756	; 0xac4
90009f96:	f604 0094 	addw	r0, r4, #2196	; 0x894
90009f9a:	f7fe ff91 	bl	90008ec0 <f_read>
90009f9e:	2800      	cmp	r0, #0
90009fa0:	f040 810a 	bne.w	9000a1b8 <AUDIO_PLAYER_Start+0x26c>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
90009fa4:	f04f 30ff 	mov.w	r0, #4294967295
90009fa8:	f7f7 fc4e 	bl	90001848 <BSP_LCD_SetTextColor>
			sprintf((char*) str, "Playing file (%d/%d): %s", file_idx + 1,
90009fac:	f8b8 33d8 	ldrh.w	r3, [r8, #984]	; 0x3d8
90009fb0:	1c7a      	adds	r2, r7, #1
90009fb2:	4986      	ldr	r1, [pc, #536]	; (9000a1cc <AUDIO_PLAYER_Start+0x280>)
90009fb4:	a803      	add	r0, sp, #12
90009fb6:	9500      	str	r5, [sp, #0]
90009fb8:	f001 fdea 	bl	9000bb90 <siprintf>
			BSP_LCD_ClearStringLine(4);
90009fbc:	2004      	movs	r0, #4
90009fbe:	f7f7 ff73 	bl	90001ea8 <BSP_LCD_ClearStringLine>
			BSP_LCD_DisplayStringAtLine(4, str);
90009fc2:	a903      	add	r1, sp, #12
90009fc4:	2004      	movs	r0, #4
90009fc6:	f7f7 fdd5 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
90009fca:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
90009fce:	f7f7 fc3b 	bl	90001848 <BSP_LCD_SetTextColor>
			sprintf((char*) str, "Sample rate : %d Hz",
90009fd2:	f8d4 2adc 	ldr.w	r2, [r4, #2780]	; 0xadc
90009fd6:	497e      	ldr	r1, [pc, #504]	; (9000a1d0 <AUDIO_PLAYER_Start+0x284>)
90009fd8:	a803      	add	r0, sp, #12
90009fda:	f001 fdd9 	bl	9000bb90 <siprintf>
			BSP_LCD_ClearStringLine(6);
90009fde:	2006      	movs	r0, #6
90009fe0:	f7f7 ff62 	bl	90001ea8 <BSP_LCD_ClearStringLine>
			BSP_LCD_DisplayStringAtLine(6, str);
90009fe4:	a903      	add	r1, sp, #12
90009fe6:	2006      	movs	r0, #6
90009fe8:	f7f7 fdc4 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
			sprintf((char*) str, "Channels number : %d", info->NbrChannels);
90009fec:	f8b4 2ada 	ldrh.w	r2, [r4, #2778]	; 0xada
90009ff0:	4978      	ldr	r1, [pc, #480]	; (9000a1d4 <AUDIO_PLAYER_Start+0x288>)
90009ff2:	a803      	add	r0, sp, #12
90009ff4:	f001 fdcc 	bl	9000bb90 <siprintf>
			BSP_LCD_ClearStringLine(7);
90009ff8:	2007      	movs	r0, #7
90009ffa:	f7f7 ff55 	bl	90001ea8 <BSP_LCD_ClearStringLine>
			BSP_LCD_DisplayStringAtLine(7, str);
90009ffe:	a903      	add	r1, sp, #12
9000a000:	2007      	movs	r0, #7
9000a002:	f7f7 fdb7 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
			duration = info->FileSize / info->ByteRate;
9000a006:	f8d4 2ac8 	ldr.w	r2, [r4, #2760]	; 0xac8
9000a00a:	f8d4 1ae0 	ldr.w	r1, [r4, #2784]	; 0xae0
					(int) (info->FileSize / 1024), (int) (duration / 60),
9000a00e:	203c      	movs	r0, #60	; 0x3c
			duration = info->FileSize / info->ByteRate;
9000a010:	fbb2 f1f1 	udiv	r1, r2, r1
					(int) (info->FileSize / 1024), (int) (duration / 60),
9000a014:	fbb1 f3f0 	udiv	r3, r1, r0
					(int) (duration % 60));
9000a018:	fb00 1113 	mls	r1, r0, r3, r1
			sprintf((char*) str, "File Size : %d KB [%02d:%02d]",
9000a01c:	0a92      	lsrs	r2, r2, #10
9000a01e:	a803      	add	r0, sp, #12
9000a020:	9100      	str	r1, [sp, #0]
9000a022:	496d      	ldr	r1, [pc, #436]	; (9000a1d8 <AUDIO_PLAYER_Start+0x28c>)
9000a024:	f001 fdb4 	bl	9000bb90 <siprintf>
			BSP_LCD_ClearStringLine(8);
9000a028:	2008      	movs	r0, #8
9000a02a:	f7f7 ff3d 	bl	90001ea8 <BSP_LCD_ClearStringLine>
			BSP_LCD_DisplayStringAtLine(8, str);
9000a02e:	a903      	add	r1, sp, #12
9000a030:	2008      	movs	r0, #8
9000a032:	f7f7 fd9f 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DisplayStringAt(263, LINE(8), (uint8_t*) "[00:00]",
9000a036:	f7f7 fc2b 	bl	90001890 <BSP_LCD_GetFont>
9000a03a:	88c1      	ldrh	r1, [r0, #6]
9000a03c:	2303      	movs	r3, #3
9000a03e:	4a67      	ldr	r2, [pc, #412]	; (9000a1dc <AUDIO_PLAYER_Start+0x290>)
9000a040:	00c9      	lsls	r1, r1, #3
9000a042:	f240 1007 	movw	r0, #263	; 0x107
9000a046:	b289      	uxth	r1, r1
9000a048:	f7f7 fd3e 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
9000a04c:	f04f 30ff 	mov.w	r0, #4294967295
9000a050:	f7f7 fbfa 	bl	90001848 <BSP_LCD_SetTextColor>
			sprintf((char*) str, "Volume : %lu", uwVolume);
9000a054:	4962      	ldr	r1, [pc, #392]	; (9000a1e0 <AUDIO_PLAYER_Start+0x294>)
9000a056:	6832      	ldr	r2, [r6, #0]
9000a058:	a803      	add	r0, sp, #12
9000a05a:	f001 fd99 	bl	9000bb90 <siprintf>
			BSP_LCD_ClearStringLine(9);
9000a05e:	2009      	movs	r0, #9
9000a060:	f7f7 ff22 	bl	90001ea8 <BSP_LCD_ClearStringLine>
			BSP_LCD_DisplayStringAtLine(9, str);
9000a064:	a903      	add	r1, sp, #12
9000a066:	2009      	movs	r0, #9
9000a068:	f7f7 fd84 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
	if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0) {
9000a06c:	6831      	ldr	r1, [r6, #0]
9000a06e:	2003      	movs	r0, #3
9000a070:	f8d4 2adc 	ldr.w	r2, [r4, #2780]	; 0xadc
9000a074:	b2c9      	uxtb	r1, r1
9000a076:	f7f7 f9a5 	bl	900013c4 <BSP_AUDIO_OUT_Init>
9000a07a:	b910      	cbnz	r0, 9000a082 <AUDIO_PLAYER_Start+0x136>
		BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
9000a07c:	2005      	movs	r0, #5
9000a07e:	f7f7 f8db 	bl	90001238 <BSP_AUDIO_OUT_SetAudioFrameSlot>
		BufferCtl.state = BUFFER_OFFSET_NONE;
9000a082:	2100      	movs	r1, #0
9000a084:	4e57      	ldr	r6, [pc, #348]	; (9000a1e4 <AUDIO_PLAYER_Start+0x298>)
		f_lseek(&WavFile, 0);
9000a086:	4858      	ldr	r0, [pc, #352]	; (9000a1e8 <AUDIO_PLAYER_Start+0x29c>)
		BufferCtl.state = BUFFER_OFFSET_NONE;
9000a088:	7031      	strb	r1, [r6, #0]
		f_lseek(&WavFile, 0);
9000a08a:	f7ff f8ec 	bl	90009266 <f_lseek>
		if (f_read(&WavFile, &BufferCtl.buff[0],
9000a08e:	ab03      	add	r3, sp, #12
9000a090:	f44f 5200 	mov.w	r2, #8192	; 0x2000
9000a094:	f5a6 5100 	sub.w	r1, r6, #8192	; 0x2000
9000a098:	4853      	ldr	r0, [pc, #332]	; (9000a1e8 <AUDIO_PLAYER_Start+0x29c>)
9000a09a:	f7fe ff11 	bl	90008ec0 <f_read>
9000a09e:	4604      	mov	r4, r0
9000a0a0:	2800      	cmp	r0, #0
9000a0a2:	f47f af60 	bne.w	90009f66 <AUDIO_PLAYER_Start+0x1a>
			AudioState = AUDIO_STATE_PLAY;
9000a0a6:	4b51      	ldr	r3, [pc, #324]	; (9000a1ec <AUDIO_PLAYER_Start+0x2a0>)
9000a0a8:	2503      	movs	r5, #3
	BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
9000a0aa:	4851      	ldr	r0, [pc, #324]	; (9000a1f0 <AUDIO_PLAYER_Start+0x2a4>)
			AudioState = AUDIO_STATE_PLAY;
9000a0ac:	701d      	strb	r5, [r3, #0]
	BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
9000a0ae:	f7f7 fbe3 	bl	90001878 <BSP_LCD_SetFont>
	BSP_LCD_ClearStringLine(13); /* Clear dedicated zone */
9000a0b2:	200d      	movs	r0, #13
9000a0b4:	f7f7 fef8 	bl	90001ea8 <BSP_LCD_ClearStringLine>
	BSP_LCD_ClearStringLine(14);
9000a0b8:	200e      	movs	r0, #14
9000a0ba:	f7f7 fef5 	bl	90001ea8 <BSP_LCD_ClearStringLine>
	BSP_LCD_ClearStringLine(15);
9000a0be:	200f      	movs	r0, #15
9000a0c0:	f7f7 fef2 	bl	90001ea8 <BSP_LCD_ClearStringLine>
	BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000a0c4:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a0c8:	f7f7 fbbe 	bl	90001848 <BSP_LCD_SetTextColor>
	BSP_LCD_FillPolygon(PreviousPoints, 3); /* Previous track icon */
9000a0cc:	4629      	mov	r1, r5
9000a0ce:	4849      	ldr	r0, [pc, #292]	; (9000a1f4 <AUDIO_PLAYER_Start+0x2a8>)
9000a0d0:	f7f7 ff7a 	bl	90001fc8 <BSP_LCD_FillPolygon>
	BSP_LCD_FillRect(TOUCH_PREVIOUS_XMIN, TOUCH_PREVIOUS_YMIN, 10,
9000a0d4:	2323      	movs	r3, #35	; 0x23
9000a0d6:	220a      	movs	r2, #10
9000a0d8:	2187      	movs	r1, #135	; 0x87
9000a0da:	2050      	movs	r0, #80	; 0x50
9000a0dc:	f7f7 fea8 	bl	90001e30 <BSP_LCD_FillRect>
	BSP_LCD_FillPolygon(NextPoints, 3); /* Next track icon */
9000a0e0:	4629      	mov	r1, r5
9000a0e2:	4845      	ldr	r0, [pc, #276]	; (9000a1f8 <AUDIO_PLAYER_Start+0x2ac>)
9000a0e4:	f7f7 ff70 	bl	90001fc8 <BSP_LCD_FillPolygon>
	BSP_LCD_FillRect(TOUCH_NEXT_XMAX - 9, TOUCH_NEXT_YMIN, 10,
9000a0e8:	232b      	movs	r3, #43	; 0x2b
9000a0ea:	220a      	movs	r2, #10
9000a0ec:	2153      	movs	r1, #83	; 0x53
9000a0ee:	f240 10bb 	movw	r0, #443	; 0x1bb
9000a0f2:	f7f7 fe9d 	bl	90001e30 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN, 15,
9000a0f6:	2328      	movs	r3, #40	; 0x28
9000a0f8:	220f      	movs	r2, #15
9000a0fa:	21d4      	movs	r1, #212	; 0xd4
9000a0fc:	2064      	movs	r0, #100	; 0x64
9000a0fe:	f7f7 fe97 	bl	90001e30 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15,
9000a102:	2328      	movs	r3, #40	; 0x28
9000a104:	220f      	movs	r2, #15
9000a106:	21d4      	movs	r1, #212	; 0xd4
9000a108:	2078      	movs	r0, #120	; 0x78
9000a10a:	f7f7 fe91 	bl	90001e30 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN, /* Stop rectangle */
9000a10e:	2328      	movs	r3, #40	; 0x28
9000a110:	21d4      	movs	r1, #212	; 0xd4
9000a112:	20aa      	movs	r0, #170	; 0xaa
9000a114:	461a      	mov	r2, r3
9000a116:	f7f7 fe8b 	bl	90001e30 <BSP_LCD_FillRect>
	BSP_LCD_DrawRect(TOUCH_VOL_MINUS_XMIN, TOUCH_VOL_MINUS_YMIN, /* VOl- rectangle */
9000a11a:	2328      	movs	r3, #40	; 0x28
9000a11c:	2232      	movs	r2, #50	; 0x32
9000a11e:	21d4      	movs	r1, #212	; 0xd4
9000a120:	2014      	movs	r0, #20
9000a122:	f7f7 fc39 	bl	90001998 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t*) "VOl-", LEFT_MODE);
9000a126:	f7f7 fbb3 	bl	90001890 <BSP_LCD_GetFont>
9000a12a:	88c1      	ldrh	r1, [r0, #6]
9000a12c:	462b      	mov	r3, r5
9000a12e:	4a33      	ldr	r2, [pc, #204]	; (9000a1fc <AUDIO_PLAYER_Start+0x2b0>)
9000a130:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
9000a134:	2018      	movs	r0, #24
9000a136:	0049      	lsls	r1, r1, #1
9000a138:	b289      	uxth	r1, r1
9000a13a:	f7f7 fcc5 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(TOUCH_VOL_PLUS_XMIN, TOUCH_VOL_PLUS_YMIN, /* VOl+ rectangle */
9000a13e:	2328      	movs	r3, #40	; 0x28
9000a140:	2232      	movs	r2, #50	; 0x32
9000a142:	21d4      	movs	r1, #212	; 0xd4
9000a144:	f44f 70c9 	mov.w	r0, #402	; 0x192
9000a148:	f7f7 fc26 	bl	90001998 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t*) "VOl+", RIGHT_MODE);
9000a14c:	f7f7 fba0 	bl	90001890 <BSP_LCD_GetFont>
9000a150:	88c1      	ldrh	r1, [r0, #6]
9000a152:	2302      	movs	r3, #2
9000a154:	4a2a      	ldr	r2, [pc, #168]	; (9000a200 <AUDIO_PLAYER_Start+0x2b4>)
9000a156:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
9000a15a:	2018      	movs	r0, #24
9000a15c:	0049      	lsls	r1, r1, #1
9000a15e:	b289      	uxth	r1, r1
9000a160:	f7f7 fcb2 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
9000a164:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
9000a168:	f7f7 fb6e 	bl	90001848 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000a16c:	4825      	ldr	r0, [pc, #148]	; (9000a204 <AUDIO_PLAYER_Start+0x2b8>)
9000a16e:	f7f7 fb83 	bl	90001878 <BSP_LCD_SetFont>
	BSP_LCD_ClearStringLine(15);
9000a172:	200f      	movs	r0, #15
9000a174:	f7f7 fe98 	bl	90001ea8 <BSP_LCD_ClearStringLine>
	BSP_LCD_DisplayStringAtLine(15, (uint8_t*) "Use stop button to exit");
9000a178:	4923      	ldr	r1, [pc, #140]	; (9000a208 <AUDIO_PLAYER_Start+0x2bc>)
9000a17a:	200f      	movs	r0, #15
9000a17c:	f7f7 fcfa 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000a180:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a184:	f7f7 fb60 	bl	90001848 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t*) "  [PLAY ]",
9000a188:	f7f7 fb82 	bl	90001890 <BSP_LCD_GetFont>
9000a18c:	88c1      	ldrh	r1, [r0, #6]
9000a18e:	462b      	mov	r3, r5
9000a190:	4a1e      	ldr	r2, [pc, #120]	; (9000a20c <AUDIO_PLAYER_Start+0x2c0>)
9000a192:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
9000a196:	20fa      	movs	r0, #250	; 0xfa
9000a198:	b289      	uxth	r1, r1
9000a19a:	f7f7 fc95 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
				if (bytesread != 0) {
9000a19e:	9b03      	ldr	r3, [sp, #12]
9000a1a0:	2b00      	cmp	r3, #0
9000a1a2:	f43f aee0 	beq.w	90009f66 <AUDIO_PLAYER_Start+0x1a>
					BSP_AUDIO_OUT_Play((uint16_t*) &BufferCtl.buff[0],
9000a1a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
9000a1aa:	f5a6 5000 	sub.w	r0, r6, #8192	; 0x2000
9000a1ae:	f7f6 ffd9 	bl	90001164 <BSP_AUDIO_OUT_Play>
					BufferCtl.fptr = bytesread;
9000a1b2:	9b03      	ldr	r3, [sp, #12]
9000a1b4:	6073      	str	r3, [r6, #4]
					return AUDIO_ERROR_NONE;
9000a1b6:	e6d7      	b.n	90009f68 <AUDIO_PLAYER_Start+0x1c>
		f_close(&WavFile);
9000a1b8:	f604 0094 	addw	r0, r4, #2196	; 0x894
9000a1bc:	f7ff f842 	bl	90009244 <f_close>
9000a1c0:	e754      	b.n	9000a06c <AUDIO_PLAYER_Start+0x120>
9000a1c2:	bf00      	nop
9000a1c4:	20001314 	.word	0x20001314
9000a1c8:	200000b8 	.word	0x200000b8
9000a1cc:	90011518 	.word	0x90011518
9000a1d0:	90011531 	.word	0x90011531
9000a1d4:	90011545 	.word	0x90011545
9000a1d8:	9001155a 	.word	0x9001155a
9000a1dc:	90011578 	.word	0x90011578
9000a1e0:	90011580 	.word	0x90011580
9000a1e4:	200086c8 	.word	0x200086c8
9000a1e8:	20001ba8 	.word	0x20001ba8
9000a1ec:	20001312 	.word	0x20001312
9000a1f0:	20000078 	.word	0x20000078
9000a1f4:	200000bc 	.word	0x200000bc
9000a1f8:	200000c8 	.word	0x200000c8
9000a1fc:	9001158d 	.word	0x9001158d
9000a200:	90011592 	.word	0x90011592
9000a204:	20000070 	.word	0x20000070
9000a208:	90011597 	.word	0x90011597
9000a20c:	900115af 	.word	0x900115af
9000a210:	200007b0 	.word	0x200007b0

9000a214 <TRANSMITTER_Process>:
AUDIO_ErrorTypeDef TRANSMITTER_Process(void) {
9000a214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t byteswritten = 0;
9000a218:	2300      	movs	r3, #0
AUDIO_ErrorTypeDef TRANSMITTER_Process(void) {
9000a21a:	b096      	sub	sp, #88	; 0x58
	Point PreviousButtonPoints[] = {{TOUCH_PREVIOUS_XMIN, TOUCH_PREVIOUS_YMIN},
9000a21c:	aa03      	add	r2, sp, #12
	uint32_t byteswritten = 0;
9000a21e:	9302      	str	r3, [sp, #8]
	Point PreviousButtonPoints[] = {{TOUCH_PREVIOUS_XMIN, TOUCH_PREVIOUS_YMIN},
9000a220:	4bb5      	ldr	r3, [pc, #724]	; (9000a4f8 <TRANSMITTER_Process+0x2e4>)
9000a222:	4615      	mov	r5, r2
9000a224:	f103 0610 	add.w	r6, r3, #16
9000a228:	6818      	ldr	r0, [r3, #0]
9000a22a:	3308      	adds	r3, #8
9000a22c:	f853 1c04 	ldr.w	r1, [r3, #-4]
9000a230:	4614      	mov	r4, r2
9000a232:	42b3      	cmp	r3, r6
9000a234:	c403      	stmia	r4!, {r0, r1}
9000a236:	4622      	mov	r2, r4
9000a238:	d1f6      	bne.n	9000a228 <TRANSMITTER_Process+0x14>
	switch (AudioState) {
9000a23a:	4eb0      	ldr	r6, [pc, #704]	; (9000a4fc <TRANSMITTER_Process+0x2e8>)
9000a23c:	7833      	ldrb	r3, [r6, #0]
9000a23e:	3b01      	subs	r3, #1
9000a240:	2b13      	cmp	r3, #19
9000a242:	d866      	bhi.n	9000a312 <TRANSMITTER_Process+0xfe>
9000a244:	e8df f013 	tbh	[pc, r3, lsl #1]
9000a248:	0114014d 	.word	0x0114014d
9000a24c:	00650014 	.word	0x00650014
9000a250:	00770065 	.word	0x00770065
9000a254:	00650096 	.word	0x00650096
9000a258:	00680065 	.word	0x00680065
9000a25c:	00ce00aa 	.word	0x00ce00aa
9000a260:	010d00f4 	.word	0x010d00f4
9000a264:	00650065 	.word	0x00650065
9000a268:	03c101bc 	.word	0x03c101bc
9000a26c:	03cb0065 	.word	0x03cb0065
		if (BufferCtl.fptr >= WaveFormat.FileSize) {
9000a270:	4ca3      	ldr	r4, [pc, #652]	; (9000a500 <TRANSMITTER_Process+0x2ec>)
9000a272:	4da4      	ldr	r5, [pc, #656]	; (9000a504 <TRANSMITTER_Process+0x2f0>)
9000a274:	6862      	ldr	r2, [r4, #4]
9000a276:	f8d5 3ac8 	ldr.w	r3, [r5, #2760]	; 0xac8
9000a27a:	429a      	cmp	r2, r3
9000a27c:	d304      	bcc.n	9000a288 <TRANSMITTER_Process+0x74>
			BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
9000a27e:	2002      	movs	r0, #2
9000a280:	f7f6 ffb2 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
			AudioState = AUDIO_STATE_NEXT;
9000a284:	2306      	movs	r3, #6
9000a286:	7033      	strb	r3, [r6, #0]
		if (BufferCtl.state == BUFFER_OFFSET_HALF) {
9000a288:	7823      	ldrb	r3, [r4, #0]
9000a28a:	2b01      	cmp	r3, #1
9000a28c:	d10f      	bne.n	9000a2ae <TRANSMITTER_Process+0x9a>
			if (f_read(&WavFile, &BufferCtl.buff[0],
9000a28e:	ab01      	add	r3, sp, #4
9000a290:	f44f 5280 	mov.w	r2, #4096	; 0x1000
9000a294:	499c      	ldr	r1, [pc, #624]	; (9000a508 <TRANSMITTER_Process+0x2f4>)
9000a296:	489d      	ldr	r0, [pc, #628]	; (9000a50c <TRANSMITTER_Process+0x2f8>)
9000a298:	f7fe fe12 	bl	90008ec0 <f_read>
9000a29c:	b170      	cbz	r0, 9000a2bc <TRANSMITTER_Process+0xa8>
				BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
9000a29e:	2002      	movs	r0, #2
9000a2a0:	f7f6 ffa2 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
		audio_error = AUDIO_ERROR_IO;
9000a2a4:	2501      	movs	r5, #1
}
9000a2a6:	4628      	mov	r0, r5
9000a2a8:	b016      	add	sp, #88	; 0x58
9000a2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (BufferCtl.state == BUFFER_OFFSET_FULL) {
9000a2ae:	2b02      	cmp	r3, #2
9000a2b0:	d109      	bne.n	9000a2c6 <TRANSMITTER_Process+0xb2>
			if (f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE / 2],
9000a2b2:	ab01      	add	r3, sp, #4
9000a2b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
9000a2b8:	4995      	ldr	r1, [pc, #596]	; (9000a510 <TRANSMITTER_Process+0x2fc>)
9000a2ba:	e7ec      	b.n	9000a296 <TRANSMITTER_Process+0x82>
			BufferCtl.fptr += bytesread;
9000a2bc:	6863      	ldr	r3, [r4, #4]
9000a2be:	9a01      	ldr	r2, [sp, #4]
			BufferCtl.state = BUFFER_OFFSET_NONE;
9000a2c0:	7020      	strb	r0, [r4, #0]
			BufferCtl.fptr += bytesread;
9000a2c2:	4413      	add	r3, r2
9000a2c4:	6063      	str	r3, [r4, #4]
		elapsed_time = BufferCtl.fptr / WaveFormat.ByteRate;
9000a2c6:	f8d5 2ae0 	ldr.w	r2, [r5, #2784]	; 0xae0
9000a2ca:	6863      	ldr	r3, [r4, #4]
9000a2cc:	fbb3 f3f2 	udiv	r3, r3, r2
		if (prev_elapsed_time != elapsed_time) {
9000a2d0:	4a90      	ldr	r2, [pc, #576]	; (9000a514 <TRANSMITTER_Process+0x300>)
9000a2d2:	69d1      	ldr	r1, [r2, #28]
9000a2d4:	4299      	cmp	r1, r3
9000a2d6:	d01c      	beq.n	9000a312 <TRANSMITTER_Process+0xfe>
					(int) (elapsed_time % 60));
9000a2d8:	213c      	movs	r1, #60	; 0x3c
			prev_elapsed_time = elapsed_time;
9000a2da:	61d3      	str	r3, [r2, #28]
			sprintf((char*) str, "[%02d:%02d]", (int) (elapsed_time / 60),
9000a2dc:	a807      	add	r0, sp, #28
					(int) (elapsed_time % 60));
9000a2de:	fbb3 f2f1 	udiv	r2, r3, r1
			sprintf((char*) str, "[%02d:%02d]", (int) (elapsed_time / 60),
9000a2e2:	fb01 3312 	mls	r3, r1, r2, r3
9000a2e6:	498c      	ldr	r1, [pc, #560]	; (9000a518 <TRANSMITTER_Process+0x304>)
9000a2e8:	f001 fc52 	bl	9000bb90 <siprintf>
			BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000a2ec:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a2f0:	f7f7 faaa 	bl	90001848 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(263, LINE(8), str, LEFT_MODE);
9000a2f4:	f7f7 facc 	bl	90001890 <BSP_LCD_GetFont>
9000a2f8:	88c1      	ldrh	r1, [r0, #6]
9000a2fa:	2303      	movs	r3, #3
9000a2fc:	f240 1007 	movw	r0, #263	; 0x107
9000a300:	00c9      	lsls	r1, r1, #3
9000a302:	aa07      	add	r2, sp, #28
9000a304:	b289      	uxth	r1, r1
9000a306:	f7f7 fbdf 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
9000a30a:	f04f 30ff 	mov.w	r0, #4294967295
9000a30e:	f7f7 fa9b 	bl	90001848 <BSP_LCD_SetTextColor>
		AUDIO_AcquireTouchButtons();
9000a312:	f7ff fd5b 	bl	90009dcc <AUDIO_AcquireTouchButtons>
9000a316:	e063      	b.n	9000a3e0 <TRANSMITTER_Process+0x1cc>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a318:	4880      	ldr	r0, [pc, #512]	; (9000a51c <TRANSMITTER_Process+0x308>)
9000a31a:	f7f7 fa95 	bl	90001848 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN, /* Stop rectangle */
9000a31e:	2328      	movs	r3, #40	; 0x28
9000a320:	21d4      	movs	r1, #212	; 0xd4
9000a322:	20aa      	movs	r0, #170	; 0xaa
9000a324:	461a      	mov	r2, r3
9000a326:	f7f7 fd83 	bl	90001e30 <BSP_LCD_FillRect>
		BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
9000a32a:	2002      	movs	r0, #2
9000a32c:	f7f6 ff5c 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
		AudioState = AUDIO_STATE_IDLE;
9000a330:	2300      	movs	r3, #0
9000a332:	7033      	strb	r3, [r6, #0]
9000a334:	e7b6      	b.n	9000a2a4 <TRANSMITTER_Process+0x90>
		if (++FilePos >= AUDIO_GetWavObjectNumber()) {
9000a336:	4d73      	ldr	r5, [pc, #460]	; (9000a504 <TRANSMITTER_Process+0x2f0>)
9000a338:	f8b5 4af0 	ldrh.w	r4, [r5, #2800]	; 0xaf0
9000a33c:	3401      	adds	r4, #1
9000a33e:	b224      	sxth	r4, r4
9000a340:	f8a5 4af0 	strh.w	r4, [r5, #2800]	; 0xaf0
9000a344:	f7ff fa34 	bl	900097b0 <AUDIO_GetWavObjectNumber>
9000a348:	4284      	cmp	r4, r0
		BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
9000a34a:	f04f 0002 	mov.w	r0, #2
			FilePos = 0;
9000a34e:	bfa4      	itt	ge
9000a350:	2300      	movge	r3, #0
9000a352:	f8a5 3af0 	strhge.w	r3, [r5, #2800]	; 0xaf0
		BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
9000a356:	f7f6 ff47 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
		AUDIO_PLAYER_Start(FilePos);
9000a35a:	f895 0af0 	ldrb.w	r0, [r5, #2800]	; 0xaf0
		AUDIO_PLAYER_Start(FilePos);
9000a35e:	f7ff fdf5 	bl	90009f4c <AUDIO_PLAYER_Start>
		if (uwVolume == 0) {
9000a362:	4b6c      	ldr	r3, [pc, #432]	; (9000a514 <TRANSMITTER_Process+0x300>)
9000a364:	681d      	ldr	r5, [r3, #0]
9000a366:	2d00      	cmp	r5, #0
9000a368:	d13a      	bne.n	9000a3e0 <TRANSMITTER_Process+0x1cc>
			BSP_AUDIO_OUT_SetVolume(uwVolume);
9000a36a:	6818      	ldr	r0, [r3, #0]
9000a36c:	b2c0      	uxtb	r0, r0
9000a36e:	f7f6 ff55 	bl	9000121c <BSP_AUDIO_OUT_SetVolume>
9000a372:	e798      	b.n	9000a2a6 <TRANSMITTER_Process+0x92>
		if (--FilePos < 0) {
9000a374:	4c63      	ldr	r4, [pc, #396]	; (9000a504 <TRANSMITTER_Process+0x2f0>)
9000a376:	f8b4 3af0 	ldrh.w	r3, [r4, #2800]	; 0xaf0
9000a37a:	3b01      	subs	r3, #1
9000a37c:	b21b      	sxth	r3, r3
9000a37e:	2b00      	cmp	r3, #0
9000a380:	f8a4 3af0 	strh.w	r3, [r4, #2800]	; 0xaf0
9000a384:	da04      	bge.n	9000a390 <TRANSMITTER_Process+0x17c>
			FilePos = AUDIO_GetWavObjectNumber() - 1;
9000a386:	f7ff fa13 	bl	900097b0 <AUDIO_GetWavObjectNumber>
9000a38a:	3801      	subs	r0, #1
9000a38c:	f8a4 0af0 	strh.w	r0, [r4, #2800]	; 0xaf0
		BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
9000a390:	2002      	movs	r0, #2
9000a392:	f7f6 ff29 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
		AUDIO_PLAYER_Start(FilePos);
9000a396:	f894 0af0 	ldrb.w	r0, [r4, #2800]	; 0xaf0
9000a39a:	e7e0      	b.n	9000a35e <TRANSMITTER_Process+0x14a>
		BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000a39c:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a3a0:	f7f7 fa52 	bl	90001848 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t*) "  [PAUSE]",
9000a3a4:	f7f7 fa74 	bl	90001890 <BSP_LCD_GetFont>
9000a3a8:	88c1      	ldrh	r1, [r0, #6]
9000a3aa:	2303      	movs	r3, #3
9000a3ac:	4a5c      	ldr	r2, [pc, #368]	; (9000a520 <TRANSMITTER_Process+0x30c>)
9000a3ae:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
9000a3b2:	20fa      	movs	r0, #250	; 0xfa
9000a3b4:	b289      	uxth	r1, r1
9000a3b6:	f7f7 fb87 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_RED); /* Display red pause rectangles */
9000a3ba:	4858      	ldr	r0, [pc, #352]	; (9000a51c <TRANSMITTER_Process+0x308>)
9000a3bc:	f7f7 fa44 	bl	90001848 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN, 15,
9000a3c0:	2328      	movs	r3, #40	; 0x28
9000a3c2:	220f      	movs	r2, #15
9000a3c4:	21d4      	movs	r1, #212	; 0xd4
9000a3c6:	2064      	movs	r0, #100	; 0x64
9000a3c8:	f7f7 fd32 	bl	90001e30 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15,
9000a3cc:	2328      	movs	r3, #40	; 0x28
9000a3ce:	220f      	movs	r2, #15
9000a3d0:	21d4      	movs	r1, #212	; 0xd4
9000a3d2:	2078      	movs	r0, #120	; 0x78
9000a3d4:	f7f7 fd2c 	bl	90001e30 <BSP_LCD_FillRect>
		BSP_AUDIO_OUT_Pause();
9000a3d8:	f7f6 fee2 	bl	900011a0 <BSP_AUDIO_OUT_Pause>
		AudioState = AUDIO_STATE_WAIT;
9000a3dc:	2301      	movs	r3, #1
		AudioState = AUDIO_STATE_PLAY;
9000a3de:	7033      	strb	r3, [r6, #0]
	AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
9000a3e0:	2500      	movs	r5, #0
		break;
9000a3e2:	e760      	b.n	9000a2a6 <TRANSMITTER_Process+0x92>
		BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000a3e4:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a3e8:	f7f7 fa2e 	bl	90001848 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t*) "  [PLAY ]",
9000a3ec:	f7f7 fa50 	bl	90001890 <BSP_LCD_GetFont>
9000a3f0:	88c1      	ldrh	r1, [r0, #6]
9000a3f2:	2303      	movs	r3, #3
9000a3f4:	4a4b      	ldr	r2, [pc, #300]	; (9000a524 <TRANSMITTER_Process+0x310>)
9000a3f6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
9000a3fa:	20fa      	movs	r0, #250	; 0xfa
9000a3fc:	b289      	uxth	r1, r1
9000a3fe:	f7f7 fb63 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN, 15,
9000a402:	2328      	movs	r3, #40	; 0x28
9000a404:	220f      	movs	r2, #15
9000a406:	21d4      	movs	r1, #212	; 0xd4
9000a408:	2064      	movs	r0, #100	; 0x64
9000a40a:	f7f7 fd11 	bl	90001e30 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15,
9000a40e:	2328      	movs	r3, #40	; 0x28
9000a410:	220f      	movs	r2, #15
9000a412:	21d4      	movs	r1, #212	; 0xd4
9000a414:	2078      	movs	r0, #120	; 0x78
9000a416:	f7f7 fd0b 	bl	90001e30 <BSP_LCD_FillRect>
		BSP_AUDIO_OUT_Resume();
9000a41a:	f7f6 fed3 	bl	900011c4 <BSP_AUDIO_OUT_Resume>
		if (uwVolume == 0) {
9000a41e:	4b3d      	ldr	r3, [pc, #244]	; (9000a514 <TRANSMITTER_Process+0x300>)
9000a420:	681a      	ldr	r2, [r3, #0]
9000a422:	b91a      	cbnz	r2, 9000a42c <TRANSMITTER_Process+0x218>
			BSP_AUDIO_OUT_SetVolume(uwVolume);
9000a424:	6818      	ldr	r0, [r3, #0]
9000a426:	b2c0      	uxtb	r0, r0
9000a428:	f7f6 fef8 	bl	9000121c <BSP_AUDIO_OUT_SetVolume>
		AudioState = AUDIO_STATE_PLAY;
9000a42c:	2303      	movs	r3, #3
9000a42e:	e7d6      	b.n	9000a3de <TRANSMITTER_Process+0x1ca>
		if (uwVolume <= 90) {
9000a430:	4c38      	ldr	r4, [pc, #224]	; (9000a514 <TRANSMITTER_Process+0x300>)
9000a432:	6823      	ldr	r3, [r4, #0]
9000a434:	2b5a      	cmp	r3, #90	; 0x5a
9000a436:	d802      	bhi.n	9000a43e <TRANSMITTER_Process+0x22a>
			uwVolume += 10;
9000a438:	6823      	ldr	r3, [r4, #0]
9000a43a:	330a      	adds	r3, #10
			uwVolume -= 10;
9000a43c:	6023      	str	r3, [r4, #0]
		BSP_AUDIO_OUT_SetVolume(uwVolume);
9000a43e:	6820      	ldr	r0, [r4, #0]
9000a440:	b2c0      	uxtb	r0, r0
9000a442:	f7f6 feeb 	bl	9000121c <BSP_AUDIO_OUT_SetVolume>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
9000a446:	f04f 30ff 	mov.w	r0, #4294967295
9000a44a:	f7f7 f9fd 	bl	90001848 <BSP_LCD_SetTextColor>
		sprintf((char*) str, "Volume : %lu ", uwVolume);
9000a44e:	6822      	ldr	r2, [r4, #0]
9000a450:	4935      	ldr	r1, [pc, #212]	; (9000a528 <TRANSMITTER_Process+0x314>)
9000a452:	a807      	add	r0, sp, #28
9000a454:	f001 fb9c 	bl	9000bb90 <siprintf>
		BSP_LCD_DisplayStringAtLine(9, str);
9000a458:	a907      	add	r1, sp, #28
9000a45a:	2009      	movs	r0, #9
9000a45c:	f7f7 fb8a 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		AudioState = AUDIO_STATE_PLAY;
9000a460:	e7e4      	b.n	9000a42c <TRANSMITTER_Process+0x218>
		if (uwVolume >= 10) {
9000a462:	4c2c      	ldr	r4, [pc, #176]	; (9000a514 <TRANSMITTER_Process+0x300>)
9000a464:	6823      	ldr	r3, [r4, #0]
9000a466:	2b09      	cmp	r3, #9
9000a468:	d9e9      	bls.n	9000a43e <TRANSMITTER_Process+0x22a>
			uwVolume -= 10;
9000a46a:	6823      	ldr	r3, [r4, #0]
9000a46c:	3b0a      	subs	r3, #10
9000a46e:	e7e5      	b.n	9000a43c <TRANSMITTER_Process+0x228>
		sprintf((char*) strFileName, "    >> Prepared file to TX (%d/%d):", FilePos + 1, FileList.ptr);
9000a470:	4c24      	ldr	r4, [pc, #144]	; (9000a504 <TRANSMITTER_Process+0x2f0>)
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
9000a472:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
9000a476:	f7f7 f9e7 	bl	90001848 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
9000a47a:	482c      	ldr	r0, [pc, #176]	; (9000a52c <TRANSMITTER_Process+0x318>)
9000a47c:	f7f7 f9fc 	bl	90001878 <BSP_LCD_SetFont>
		sprintf((char*) strFileName, "    >> Prepared file to TX (%d/%d):", FilePos + 1, FileList.ptr);
9000a480:	4f2b      	ldr	r7, [pc, #172]	; (9000a530 <TRANSMITTER_Process+0x31c>)
9000a482:	f9b4 2af0 	ldrsh.w	r2, [r4, #2800]	; 0xaf0
9000a486:	a807      	add	r0, sp, #28
9000a488:	f8b7 33d8 	ldrh.w	r3, [r7, #984]	; 0x3d8
9000a48c:	3201      	adds	r2, #1
9000a48e:	4929      	ldr	r1, [pc, #164]	; (9000a534 <TRANSMITTER_Process+0x320>)
9000a490:	f001 fb7e 	bl	9000bb90 <siprintf>
		BSP_LCD_ClearStringLine(6);
9000a494:	2006      	movs	r0, #6
9000a496:	f7f7 fd07 	bl	90001ea8 <BSP_LCD_ClearStringLine>
		BSP_LCD_DisplayStringAtLine(6, strFileName);
9000a49a:	a907      	add	r1, sp, #28
9000a49c:	2006      	movs	r0, #6
9000a49e:	f7f7 fb69 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		sprintf((char*) strFileName, "       %s", (char*) FileList.file[FilePos].name);
9000a4a2:	2329      	movs	r3, #41	; 0x29
9000a4a4:	f8b4 2af0 	ldrh.w	r2, [r4, #2800]	; 0xaf0
9000a4a8:	2401      	movs	r4, #1
9000a4aa:	4923      	ldr	r1, [pc, #140]	; (9000a538 <TRANSMITTER_Process+0x324>)
9000a4ac:	a807      	add	r0, sp, #28
9000a4ae:	fb12 4203 	smlabb	r2, r2, r3, r4
9000a4b2:	443a      	add	r2, r7
9000a4b4:	f001 fb6c 	bl	9000bb90 <siprintf>
		BSP_LCD_ClearStringLine(7);
9000a4b8:	2007      	movs	r0, #7
9000a4ba:	f7f7 fcf5 	bl	90001ea8 <BSP_LCD_ClearStringLine>
		BSP_LCD_DisplayStringAtLine(7, strFileName);
9000a4be:	a907      	add	r1, sp, #28
9000a4c0:	2007      	movs	r0, #7
9000a4c2:	f7f7 fb57 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(9, (uint8_t*) "       (PREVIOUS)  (NEXT)  (RETURN)");
9000a4c6:	491d      	ldr	r1, [pc, #116]	; (9000a53c <TRANSMITTER_Process+0x328>)
9000a4c8:	2009      	movs	r0, #9
9000a4ca:	f7f7 fb53 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(12, (uint8_t*) "                >>  BEGING TRANSMISSION");
9000a4ce:	491c      	ldr	r1, [pc, #112]	; (9000a540 <TRANSMITTER_Process+0x32c>)
9000a4d0:	200c      	movs	r0, #12
9000a4d2:	f7f7 fb4f 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_FillPolygon(PreviousButtonPoints, 4);
9000a4d6:	2104      	movs	r1, #4
9000a4d8:	4628      	mov	r0, r5
9000a4da:	f7f7 fd75 	bl	90001fc8 <BSP_LCD_FillPolygon>
		AudioState = AUDIO_STATE_WAIT;
9000a4de:	7034      	strb	r4, [r6, #0]
		break;
9000a4e0:	e77e      	b.n	9000a3e0 <TRANSMITTER_Process+0x1cc>
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
9000a4e2:	4c08      	ldr	r4, [pc, #32]	; (9000a504 <TRANSMITTER_Process+0x2f0>)
9000a4e4:	f894 3af4 	ldrb.w	r3, [r4, #2804]	; 0xaf4
		BSP_TS_GetState(&TS_State);
9000a4e8:	f604 20f4 	addw	r0, r4, #2804	; 0xaf4
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
9000a4ec:	2b01      	cmp	r3, #1
9000a4ee:	d129      	bne.n	9000a544 <TRANSMITTER_Process+0x330>
		BSP_TS_GetState(&TS_State);
9000a4f0:	f7f8 f9f2 	bl	900028d8 <BSP_TS_GetState>
9000a4f4:	e774      	b.n	9000a3e0 <TRANSMITTER_Process+0x1cc>
9000a4f6:	bf00      	nop
9000a4f8:	90010d40 	.word	0x90010d40
9000a4fc:	20001312 	.word	0x20001312
9000a500:	200086c8 	.word	0x200086c8
9000a504:	20001314 	.word	0x20001314
9000a508:	200066c8 	.word	0x200066c8
9000a50c:	20001ba8 	.word	0x20001ba8
9000a510:	200076c8 	.word	0x200076c8
9000a514:	200000b8 	.word	0x200000b8
9000a518:	9001156c 	.word	0x9001156c
9000a51c:	ffff0000 	.word	0xffff0000
9000a520:	900115b9 	.word	0x900115b9
9000a524:	900115af 	.word	0x900115af
9000a528:	900115c3 	.word	0x900115c3
9000a52c:	20000078 	.word	0x20000078
9000a530:	200007b0 	.word	0x200007b0
9000a534:	900115d1 	.word	0x900115d1
9000a538:	900115f5 	.word	0x900115f5
9000a53c:	900115ff 	.word	0x900115ff
9000a540:	90011623 	.word	0x90011623
		BSP_TS_GetState(&TS_State);
9000a544:	f7f8 f9c8 	bl	900028d8 <BSP_TS_GetState>
		if (TS_State.touchDetected == 1) {
9000a548:	f894 3af4 	ldrb.w	r3, [r4, #2804]	; 0xaf4
9000a54c:	2b01      	cmp	r3, #1
9000a54e:	f47f af47 	bne.w	9000a3e0 <TRANSMITTER_Process+0x1cc>
			if ((TS_State.touchX[0] > TOUCH_PREVIOUS_XMIN) &&
9000a552:	f8b4 3af6 	ldrh.w	r3, [r4, #2806]	; 0xaf6
9000a556:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
9000a55a:	2a71      	cmp	r2, #113	; 0x71
9000a55c:	d807      	bhi.n	9000a56e <TRANSMITTER_Process+0x35a>
				(TS_State.touchX[0] < TOUCH_PREVIOUS_XMAX) &&
9000a55e:	f8b4 2b00 	ldrh.w	r2, [r4, #2816]	; 0xb00
9000a562:	3a88      	subs	r2, #136	; 0x88
9000a564:	b292      	uxth	r2, r2
9000a566:	2a21      	cmp	r2, #33	; 0x21
9000a568:	d813      	bhi.n	9000a592 <TRANSMITTER_Process+0x37e>
				AudioState = AUDIO_STATE_PREVIOUS;
9000a56a:	2307      	movs	r3, #7
9000a56c:	e737      	b.n	9000a3de <TRANSMITTER_Process+0x1ca>
			}else if ((TS_State.touchX[0] > TOUCH_NEXT_XMIN) &&
9000a56e:	f46f 72c9 	mvn.w	r2, #402	; 0x192
9000a572:	189a      	adds	r2, r3, r2
9000a574:	2a30      	cmp	r2, #48	; 0x30
9000a576:	d80c      	bhi.n	9000a592 <TRANSMITTER_Process+0x37e>
					  (TS_State.touchY[0] > TOUCH_NEXT_YMIN) &&
9000a578:	f8b4 2b00 	ldrh.w	r2, [r4, #2816]	; 0xb00
					  (TS_State.touchX[0] < TOUCH_NEXT_XMAX) &&
9000a57c:	f1a2 0154 	sub.w	r1, r2, #84	; 0x54
9000a580:	2929      	cmp	r1, #41	; 0x29
9000a582:	d801      	bhi.n	9000a588 <TRANSMITTER_Process+0x374>
				AudioState = AUDIO_STATE_NEXT;
9000a584:	2306      	movs	r3, #6
9000a586:	e72a      	b.n	9000a3de <TRANSMITTER_Process+0x1ca>
					  (TS_State.touchX[0] < TOUCH_RETURN_XMAX) &&
9000a588:	3a9c      	subs	r2, #156	; 0x9c
9000a58a:	2a16      	cmp	r2, #22
9000a58c:	d801      	bhi.n	9000a592 <TRANSMITTER_Process+0x37e>
				AudioState = AUDIO_STATE_BACKWARD;
9000a58e:	2309      	movs	r3, #9
9000a590:	e725      	b.n	9000a3de <TRANSMITTER_Process+0x1ca>
			}else if((TS_State.touchX[0] > TOUCH_BEGIN_TRANSMISSION_XMIN) &&
9000a592:	3bba      	subs	r3, #186	; 0xba
9000a594:	2bf3      	cmp	r3, #243	; 0xf3
9000a596:	f63f af23 	bhi.w	9000a3e0 <TRANSMITTER_Process+0x1cc>
					 (TS_State.touchX[0] < TOUCH_BEGIN_TRANSMISSION_XMAX) &&
9000a59a:	f8b4 3b00 	ldrh.w	r3, [r4, #2816]	; 0xb00
9000a59e:	3bb5      	subs	r3, #181	; 0xb5
9000a5a0:	b29b      	uxth	r3, r3
9000a5a2:	2b21      	cmp	r3, #33	; 0x21
9000a5a4:	f63f af1c 	bhi.w	9000a3e0 <TRANSMITTER_Process+0x1cc>
				BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
9000a5a8:	48d4      	ldr	r0, [pc, #848]	; (9000a8fc <TRANSMITTER_Process+0x6e8>)
9000a5aa:	f7f7 f97d 	bl	900018a8 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
9000a5ae:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
9000a5b2:	f7f7 f949 	bl	90001848 <BSP_LCD_SetTextColor>
				BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000a5b6:	48d2      	ldr	r0, [pc, #840]	; (9000a900 <TRANSMITTER_Process+0x6ec>)
9000a5b8:	f7f7 f95e 	bl	90001878 <BSP_LCD_SetFont>
				AudioState = AUDIO_STATE_BEGING_TRANSMISSION;
9000a5bc:	2311      	movs	r3, #17
9000a5be:	e70e      	b.n	9000a3de <TRANSMITTER_Process+0x1ca>
		sprintf((char*) strFileName, "          / \\  `.  __..-,O  / \\_/ \\_/ %s", (char*) FileList.file[FilePos].name);
9000a5c0:	4cd0      	ldr	r4, [pc, #832]	; (9000a904 <TRANSMITTER_Process+0x6f0>)
		BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"    >> PREPARING THE TRANSMISSION... CREATING .wav FILE FROM THE SELECTED FILE");
9000a5c2:	2002      	movs	r0, #2
9000a5c4:	49d0      	ldr	r1, [pc, #832]	; (9000a908 <TRANSMITTER_Process+0x6f4>)
		sprintf((char*) strFileName, "          / \\  `.  __..-,O  / \\_/ \\_/ %s", (char*) FileList.file[FilePos].name);
9000a5c6:	2701      	movs	r7, #1
		BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"    >> PREPARING THE TRANSMISSION... CREATING .wav FILE FROM THE SELECTED FILE");
9000a5c8:	f7f7 fad4 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		sprintf((char*) strFileName, "          / \\  `.  __..-,O  / \\_/ \\_/ %s", (char*) FileList.file[FilePos].name);
9000a5cc:	f8b4 3af0 	ldrh.w	r3, [r4, #2800]	; 0xaf0
9000a5d0:	2229      	movs	r2, #41	; 0x29
9000a5d2:	49ce      	ldr	r1, [pc, #824]	; (9000a90c <TRANSMITTER_Process+0x6f8>)
9000a5d4:	a807      	add	r0, sp, #28
9000a5d6:	fb13 7302 	smlabb	r3, r3, r2, r7
9000a5da:	4acd      	ldr	r2, [pc, #820]	; (9000a910 <TRANSMITTER_Process+0x6fc>)
9000a5dc:	441a      	add	r2, r3
9000a5de:	f001 fad7 	bl	9000bb90 <siprintf>
		BSP_LCD_DisplayStringAtLine(6, (uint8_t *)"           ,-.               _   _");
9000a5e2:	49cc      	ldr	r1, [pc, #816]	; (9000a914 <TRANSMITTER_Process+0x700>)
9000a5e4:	2006      	movs	r0, #6
9000a5e6:	f7f7 fac5 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(7, strFileName);
9000a5ea:	a907      	add	r1, sp, #28
9000a5ec:	2007      	movs	r0, #7
9000a5ee:	f7f7 fac1 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(8, (uint8_t *)"         :   \\ --''_..-'.'");
9000a5f2:	49c9      	ldr	r1, [pc, #804]	; (9000a918 <TRANSMITTER_Process+0x704>)
9000a5f4:	2008      	movs	r0, #8
9000a5f6:	f7f7 fabd 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"         |    . .-' `. '.");
9000a5fa:	49c8      	ldr	r1, [pc, #800]	; (9000a91c <TRANSMITTER_Process+0x708>)
9000a5fc:	2009      	movs	r0, #9
9000a5fe:	f7f7 fab9 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"         :     .     .`.'");
9000a602:	49c7      	ldr	r1, [pc, #796]	; (9000a920 <TRANSMITTER_Process+0x70c>)
9000a604:	200a      	movs	r0, #10
9000a606:	f7f7 fab5 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(11, (uint8_t *)"          \\     `.  /  ..");
9000a60a:	49c6      	ldr	r1, [pc, #792]	; (9000a924 <TRANSMITTER_Process+0x710>)
9000a60c:	200b      	movs	r0, #11
9000a60e:	f7f7 fab1 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"           \\      `.   ' .");
9000a612:	49c5      	ldr	r1, [pc, #788]	; (9000a928 <TRANSMITTER_Process+0x714>)
9000a614:	200c      	movs	r0, #12
9000a616:	f7f7 faad 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"            `,       `.   \\");
9000a61a:	49c4      	ldr	r1, [pc, #784]	; (9000a92c <TRANSMITTER_Process+0x718>)
9000a61c:	200d      	movs	r0, #13
9000a61e:	f7f7 faa9 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"           ,|,`.        `-.\\");
9000a622:	49c3      	ldr	r1, [pc, #780]	; (9000a930 <TRANSMITTER_Process+0x71c>)
9000a624:	200e      	movs	r0, #14
9000a626:	f7f7 faa5 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(15, (uint8_t *)"          '.||  ``-...__..-`");
9000a62a:	49c2      	ldr	r1, [pc, #776]	; (9000a934 <TRANSMITTER_Process+0x720>)
9000a62c:	200f      	movs	r0, #15
9000a62e:	f7f7 faa1 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(16, (uint8_t *)"           |  |");
9000a632:	49c1      	ldr	r1, [pc, #772]	; (9000a938 <TRANSMITTER_Process+0x724>)
9000a634:	2010      	movs	r0, #16
9000a636:	f7f7 fa9d 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(17, (uint8_t *)"           |__|");
9000a63a:	49c0      	ldr	r1, [pc, #768]	; (9000a93c <TRANSMITTER_Process+0x728>)
9000a63c:	2011      	movs	r0, #17
9000a63e:	f7f7 fa99 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(18, (uint8_t *)"           /||\\");
9000a642:	49bf      	ldr	r1, [pc, #764]	; (9000a940 <TRANSMITTER_Process+0x72c>)
9000a644:	2012      	movs	r0, #18
9000a646:	f7f7 fa95 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(19, (uint8_t *)"          //||\\\\");
9000a64a:	49be      	ldr	r1, [pc, #760]	; (9000a944 <TRANSMITTER_Process+0x730>)
9000a64c:	2013      	movs	r0, #19
9000a64e:	f7f7 fa91 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(20, (uint8_t *)"         // || \\\\");
9000a652:	49bd      	ldr	r1, [pc, #756]	; (9000a948 <TRANSMITTER_Process+0x734>)
9000a654:	2014      	movs	r0, #20
9000a656:	f7f7 fa8d 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(21, (uint8_t *)"      __//__||__\\\\__");
9000a65a:	49bc      	ldr	r1, [pc, #752]	; (9000a94c <TRANSMITTER_Process+0x738>)
9000a65c:	2015      	movs	r0, #21
9000a65e:	f7f7 fa89 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		ReadFileIntoBuffer(FilePos);
9000a662:	f894 0af0 	ldrb.w	r0, [r4, #2800]	; 0xaf0
9000a666:	f7ff fc2b 	bl	90009ec0 <ReadFileIntoBuffer>
		uint8_t fileCreation = f_open(&MessageWavFile, (char*) "mensajeModulado.wav", FA_CREATE_ALWAYS | FA_WRITE);
9000a66a:	220a      	movs	r2, #10
9000a66c:	49b8      	ldr	r1, [pc, #736]	; (9000a950 <TRANSMITTER_Process+0x73c>)
9000a66e:	4620      	mov	r0, r4
9000a670:	f7fe fb16 	bl	90008ca0 <f_open>
		if(fileCreation == FR_OK)
9000a674:	4605      	mov	r5, r0
9000a676:	2800      	cmp	r0, #0
9000a678:	f040 8113 	bne.w	9000a8a2 <TRANSMITTER_Process+0x68e>
{
  /* Initialize the encoder structure */
  MessageWaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
  MessageWaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
  MessageWaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
  MessageWaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
9000a67c:	4bb5      	ldr	r3, [pc, #724]	; (9000a954 <TRANSMITTER_Process+0x740>)
  MessageWaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
9000a67e:	2102      	movs	r1, #2
  pHeader[17]  = 0x00;
  pHeader[18]  = 0x00;
  pHeader[19]  = 0x00;

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
9000a680:	f884 7b60 	strb.w	r7, [r4, #2912]	; 0xb60
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
  pHeader[23]  = 0x00;

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
9000a684:	2744      	movs	r7, #68	; 0x44
  MessageWaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
9000a686:	f8c4 3b24 	str.w	r3, [r4, #2852]	; 0xb24
  MessageWaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
9000a68a:	f64a 4344 	movw	r3, #44100	; 0xac44
  pHeader[5] = 0x4C;
9000a68e:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
  pHeader[14]  = 't';
9000a692:	f04f 0e74 	mov.w	lr, #116	; 0x74
  MessageWaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
9000a696:	f8c4 3b38 	str.w	r3, [r4, #2872]	; 0xb38
  MessageWaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
9000a69a:	222c      	movs	r2, #44	; 0x2c
  MessageWaveFormat.ByteRate = (MessageWaveFormat.SampleRate * \
9000a69c:	4bae      	ldr	r3, [pc, #696]	; (9000a958 <TRANSMITTER_Process+0x744>)
  pHeader[4] = 0x00;
9000a69e:	f884 0b50 	strb.w	r0, [r4, #2896]	; 0xb50
  pHeader[6] = 0x1D;
9000a6a2:	201d      	movs	r0, #29
  MessageWaveFormat.ByteRate = (MessageWaveFormat.SampleRate * \
9000a6a4:	f8c4 3b3c 	str.w	r3, [r4, #2876]	; 0xb3c
  MessageWaveFormat.BlockAlign = MessageWaveFormat.NbrChannels * \
9000a6a8:	4bac      	ldr	r3, [pc, #688]	; (9000a95c <TRANSMITTER_Process+0x748>)
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
9000a6aa:	f884 7b64 	strb.w	r7, [r4, #2916]	; 0xb64
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
9000a6ae:	27ac      	movs	r7, #172	; 0xac
  MessageWaveFormat.BlockAlign = MessageWaveFormat.NbrChannels * \
9000a6b0:	f8c4 3b40 	str.w	r3, [r4, #2880]	; 0xb40
  pHeader[0] = 'R';
9000a6b4:	2352      	movs	r3, #82	; 0x52
  MessageWaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
9000a6b6:	f8c4 2b30 	str.w	r2, [r4, #2864]	; 0xb30
  pHeader[0] = 'R';
9000a6ba:	f884 3b4c 	strb.w	r3, [r4, #2892]	; 0xb4c
  pHeader[1] = 'I';
9000a6be:	2349      	movs	r3, #73	; 0x49
  MessageWaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
9000a6c0:	f8a4 1b36 	strh.w	r1, [r4, #2870]	; 0xb36
  pHeader[1] = 'I';
9000a6c4:	f884 3b4d 	strb.w	r3, [r4, #2893]	; 0xb4d
  pHeader[2] = 'F';
9000a6c8:	2346      	movs	r3, #70	; 0x46
  pHeader[5] = 0x4C;
9000a6ca:	f884 cb51 	strb.w	ip, [r4, #2897]	; 0xb51
  pHeader[2] = 'F';
9000a6ce:	f884 3b4e 	strb.w	r3, [r4, #2894]	; 0xb4e
  pHeader[3] = 'F';
9000a6d2:	f884 3b4f 	strb.w	r3, [r4, #2895]	; 0xb4f
  pHeader[8]  = 'W';
9000a6d6:	2357      	movs	r3, #87	; 0x57
  pHeader[6] = 0x1D;
9000a6d8:	f884 0b52 	strb.w	r0, [r4, #2898]	; 0xb52
  pHeader[8]  = 'W';
9000a6dc:	f884 3b54 	strb.w	r3, [r4, #2900]	; 0xb54
  pHeader[9]  = 'A';
9000a6e0:	2341      	movs	r3, #65	; 0x41
  pHeader[7] = 0x00;
9000a6e2:	f884 5b53 	strb.w	r5, [r4, #2899]	; 0xb53
  pHeader[9]  = 'A';
9000a6e6:	f884 3b55 	strb.w	r3, [r4, #2901]	; 0xb55
  pHeader[10] = 'V';
9000a6ea:	2356      	movs	r3, #86	; 0x56
  pHeader[14]  = 't';
9000a6ec:	f884 eb5a 	strb.w	lr, [r4, #2906]	; 0xb5a
  pHeader[10] = 'V';
9000a6f0:	f884 3b56 	strb.w	r3, [r4, #2902]	; 0xb56
  pHeader[11] = 'E';
9000a6f4:	2345      	movs	r3, #69	; 0x45
  pHeader[17]  = 0x00;
9000a6f6:	f884 5b5d 	strb.w	r5, [r4, #2909]	; 0xb5d
  pHeader[11] = 'E';
9000a6fa:	f884 3b57 	strb.w	r3, [r4, #2903]	; 0xb57
  pHeader[12]  = 'f';
9000a6fe:	2366      	movs	r3, #102	; 0x66
  pHeader[18]  = 0x00;
9000a700:	f884 5b5e 	strb.w	r5, [r4, #2910]	; 0xb5e
  pHeader[12]  = 'f';
9000a704:	f884 3b58 	strb.w	r3, [r4, #2904]	; 0xb58
  pHeader[13]  = 'm';
9000a708:	236d      	movs	r3, #109	; 0x6d
  pHeader[19]  = 0x00;
9000a70a:	f884 5b5f 	strb.w	r5, [r4, #2911]	; 0xb5f
  pHeader[13]  = 'm';
9000a70e:	f884 3b59 	strb.w	r3, [r4, #2905]	; 0xb59
  pHeader[15]  = ' ';
9000a712:	2320      	movs	r3, #32
  pHeader[21]  = 0x00;
9000a714:	f884 5b61 	strb.w	r5, [r4, #2913]	; 0xb61
  pHeader[15]  = ' ';
9000a718:	f884 3b5b 	strb.w	r3, [r4, #2907]	; 0xb5b
  pHeader[16]  = 0x10;
9000a71c:	2310      	movs	r3, #16
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
9000a71e:	f884 1b62 	strb.w	r1, [r4, #2914]	; 0xb62
  pHeader[16]  = 0x10;
9000a722:	f884 3b5c 	strb.w	r3, [r4, #2908]	; 0xb5c
  pHeader[23]  = 0x00;
9000a726:	f884 5b63 	strb.w	r5, [r4, #2915]	; 0xb63
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
9000a72a:	f884 7b65 	strb.w	r7, [r4, #2917]	; 0xb65
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
9000a72e:	27b1      	movs	r7, #177	; 0xb1
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
9000a730:	f884 5b66 	strb.w	r5, [r4, #2918]	; 0xb66
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
9000a734:	f884 3b68 	strb.w	r3, [r4, #2920]	; 0xb68
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
  pHeader[33]  = 0x00;

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
9000a738:	f884 3b6e 	strb.w	r3, [r4, #2926]	; 0xb6e
  pHeader[35]  = 0x00;

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
9000a73c:	2364      	movs	r3, #100	; 0x64
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
9000a73e:	f884 7b69 	strb.w	r7, [r4, #2921]	; 0xb69
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
9000a742:	2704      	movs	r7, #4
  pHeader[36]  = 'd';
9000a744:	f884 3b70 	strb.w	r3, [r4, #2928]	; 0xb70
  pHeader[37]  = 'a';
9000a748:	2361      	movs	r3, #97	; 0x61
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
9000a74a:	f884 5b67 	strb.w	r5, [r4, #2919]	; 0xb67
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
9000a74e:	f884 1b6a 	strb.w	r1, [r4, #2922]	; 0xb6a
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
9000a752:	f604 314c 	addw	r1, r4, #2892	; 0xb4c
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
9000a756:	f884 5b6b 	strb.w	r5, [r4, #2923]	; 0xb6b
  pHeader[33]  = 0x00;
9000a75a:	f884 5b6d 	strb.w	r5, [r4, #2925]	; 0xb6d
  pHeader[35]  = 0x00;
9000a75e:	f884 5b6f 	strb.w	r5, [r4, #2927]	; 0xb6f
  pHeader[37]  = 'a';
9000a762:	f884 3b71 	strb.w	r3, [r4, #2929]	; 0xb71
  pHeader[38]  = 't';
  pHeader[39]  = 'a';
9000a766:	f884 3b73 	strb.w	r3, [r4, #2931]	; 0xb73
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
9000a76a:	ab02      	add	r3, sp, #8

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
9000a76c:	f884 5b74 	strb.w	r5, [r4, #2932]	; 0xb74
  pHeader[41]  = 0x4C;
  pHeader[42]  = 0x1D;
9000a770:	f884 0b76 	strb.w	r0, [r4, #2934]	; 0xb76
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
9000a774:	4620      	mov	r0, r4
  pHeader[43]  = 0x00;
9000a776:	f884 5b77 	strb.w	r5, [r4, #2935]	; 0xb77
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
9000a77a:	f884 7b6c 	strb.w	r7, [r4, #2924]	; 0xb6c
  pHeader[38]  = 't';
9000a77e:	f884 eb72 	strb.w	lr, [r4, #2930]	; 0xb72
  pHeader[41]  = 0x4C;
9000a782:	f884 cb75 	strb.w	ip, [r4, #2933]	; 0xb75
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
9000a786:	f7fe fc4c 	bl	90009022 <f_write>
			if(headerWrite == FR_OK)
9000a78a:	4605      	mov	r5, r0
9000a78c:	2800      	cmp	r0, #0
9000a78e:	d178      	bne.n	9000a882 <TRANSMITTER_Process+0x66e>
				WaveBuffer.fptr = byteswritten;
9000a790:	4b73      	ldr	r3, [pc, #460]	; (9000a960 <TRANSMITTER_Process+0x74c>)
9000a792:	9a02      	ldr	r2, [sp, #8]
				WaveBuffer.pcm_ptr = 0;
9000a794:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
				WaveBuffer.fptr = byteswritten;
9000a798:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
				WaveBuffer.offset = 0;
9000a79c:	f8c3 0808 	str.w	r0, [r3, #2056]	; 0x808
				WaveBuffer.wr_state = BUFFER_EMPTY;
9000a7a0:	f883 0804 	strb.w	r0, [r3, #2052]	; 0x804
			parity = 0;
9000a7a4:	2700      	movs	r7, #0
		for (uint8_t i = 0; i < BufferFile.fptr; i++)
9000a7a6:	b2fb      	uxtb	r3, r7
9000a7a8:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
9000a7ac:	4293      	cmp	r3, r2
9000a7ae:	f0c0 8081 	bcc.w	9000a8b4 <TRANSMITTER_Process+0x6a0>
		InsertarBit(1); // BIT STOP
9000a7b2:	2001      	movs	r0, #1
		uint8_t fileWriting = f_write(&MessageWavFile, (uint8_t*)WaveBuffer.pcm_buff, 2*WaveBuffer.pcm_ptr, (void*)&byteswritten);
9000a7b4:	4f6a      	ldr	r7, [pc, #424]	; (9000a960 <TRANSMITTER_Process+0x74c>)
		InsertarBit(1); // BIT STOP
9000a7b6:	f7ff faaf 	bl	90009d18 <InsertarBit>
		InsertarBit(1); // BIT FINALIZACION
9000a7ba:	2001      	movs	r0, #1
9000a7bc:	f7ff faac 	bl	90009d18 <InsertarBit>
		uint8_t fileWriting = f_write(&MessageWavFile, (uint8_t*)WaveBuffer.pcm_buff, 2*WaveBuffer.pcm_ptr, (void*)&byteswritten);
9000a7c0:	f8d7 2800 	ldr.w	r2, [r7, #2048]	; 0x800
9000a7c4:	ab02      	add	r3, sp, #8
9000a7c6:	f5a7 4180 	sub.w	r1, r7, #16384	; 0x4000
9000a7ca:	0052      	lsls	r2, r2, #1
9000a7cc:	484d      	ldr	r0, [pc, #308]	; (9000a904 <TRANSMITTER_Process+0x6f0>)
9000a7ce:	f7fe fc28 	bl	90009022 <f_write>
		if(fileWriting == FR_OK)
9000a7d2:	4605      	mov	r5, r0
9000a7d4:	2800      	cmp	r0, #0
9000a7d6:	f040 80ef 	bne.w	9000a9b8 <TRANSMITTER_Process+0x7a4>
			WaveBuffer.fptr += byteswritten;
9000a7da:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
			uint8_t seeker = f_lseek(&MessageWavFile, 0);
9000a7de:	4601      	mov	r1, r0
			WaveBuffer.fptr += byteswritten;
9000a7e0:	9a02      	ldr	r2, [sp, #8]
			uint8_t seeker = f_lseek(&MessageWavFile, 0);
9000a7e2:	4848      	ldr	r0, [pc, #288]	; (9000a904 <TRANSMITTER_Process+0x6f0>)
			WaveBuffer.fptr += byteswritten;
9000a7e4:	4413      	add	r3, r2
9000a7e6:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
			uint8_t seeker = f_lseek(&MessageWavFile, 0);
9000a7ea:	f7fe fd3c 	bl	90009266 <f_lseek>
			if(seeker == FR_OK)
9000a7ee:	4680      	mov	r8, r0
9000a7f0:	2800      	cmp	r0, #0
9000a7f2:	f040 80d1 	bne.w	9000a998 <TRANSMITTER_Process+0x784>
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(WaveBuffer.fptr);
9000a7f6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
9000a7fa:	495a      	ldr	r1, [pc, #360]	; (9000a964 <TRANSMITTER_Process+0x750>)
  pHeader[5] = (uint8_t)(WaveBuffer.fptr >> 8);
9000a7fc:	0a1a      	lsrs	r2, r3, #8
  pHeader[4] = (uint8_t)(WaveBuffer.fptr);
9000a7fe:	f884 3b50 	strb.w	r3, [r4, #2896]	; 0xb50
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
9000a802:	f6a1 304c 	subw	r0, r1, #2892	; 0xb4c
  pHeader[5] = (uint8_t)(WaveBuffer.fptr >> 8);
9000a806:	f884 2b51 	strb.w	r2, [r4, #2897]	; 0xb51
  pHeader[6] = (uint8_t)(WaveBuffer.fptr >> 16);
9000a80a:	0c1a      	lsrs	r2, r3, #16
9000a80c:	f884 2b52 	strb.w	r2, [r4, #2898]	; 0xb52
  pHeader[7] = (uint8_t)(WaveBuffer.fptr >> 24);
9000a810:	0e1a      	lsrs	r2, r3, #24
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  WaveBuffer.fptr -=44;
9000a812:	3b2c      	subs	r3, #44	; 0x2c
  pHeader[7] = (uint8_t)(WaveBuffer.fptr >> 24);
9000a814:	f884 2b53 	strb.w	r2, [r4, #2899]	; 0xb53
  pHeader[40] = (uint8_t)(WaveBuffer.fptr);
  pHeader[41] = (uint8_t)(WaveBuffer.fptr >> 8);
9000a818:	0a1a      	lsrs	r2, r3, #8
  WaveBuffer.fptr -=44;
9000a81a:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
  pHeader[40] = (uint8_t)(WaveBuffer.fptr);
9000a81e:	f884 3b74 	strb.w	r3, [r4, #2932]	; 0xb74
  pHeader[41] = (uint8_t)(WaveBuffer.fptr >> 8);
9000a822:	f884 2b75 	strb.w	r2, [r4, #2933]	; 0xb75
  pHeader[42] = (uint8_t)(WaveBuffer.fptr >> 16);
9000a826:	0c1a      	lsrs	r2, r3, #16
  pHeader[43] = (uint8_t)(WaveBuffer.fptr >> 24);
9000a828:	0e1b      	lsrs	r3, r3, #24
  pHeader[42] = (uint8_t)(WaveBuffer.fptr >> 16);
9000a82a:	f884 2b76 	strb.w	r2, [r4, #2934]	; 0xb76
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
9000a82e:	222c      	movs	r2, #44	; 0x2c
  pHeader[43] = (uint8_t)(WaveBuffer.fptr >> 24);
9000a830:	f884 3b77 	strb.w	r3, [r4, #2935]	; 0xb77
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
9000a834:	ab02      	add	r3, sp, #8
9000a836:	f7fe fbf4 	bl	90009022 <f_write>
				if(updateHeader == FR_OK)
9000a83a:	4605      	mov	r5, r0
9000a83c:	2800      	cmp	r0, #0
9000a83e:	f040 809b 	bne.w	9000a978 <TRANSMITTER_Process+0x764>
					WaveBuffer.fptr += byteswritten;
9000a842:	9a02      	ldr	r2, [sp, #8]
9000a844:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
					f_close(&MessageWavFile);
9000a848:	482e      	ldr	r0, [pc, #184]	; (9000a904 <TRANSMITTER_Process+0x6f0>)
					WaveBuffer.fptr += byteswritten;
9000a84a:	4413      	add	r3, r2
9000a84c:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
					f_close(&MessageWavFile);
9000a850:	f7fe fcf8 	bl	90009244 <f_close>
					BSP_LCD_ClearStringLine(4);
9000a854:	2004      	movs	r0, #4
9000a856:	f7f7 fb27 	bl	90001ea8 <BSP_LCD_ClearStringLine>
					BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >>  .wav FILE CREATED. READY TO TRANSMIT!");
9000a85a:	4943      	ldr	r1, [pc, #268]	; (9000a968 <TRANSMITTER_Process+0x754>)
9000a85c:	2004      	movs	r0, #4
9000a85e:	f7f7 f989 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
					BSP_LCD_ClearStringLine(9);
9000a862:	2009      	movs	r0, #9
9000a864:	f7f7 fb20 	bl	90001ea8 <BSP_LCD_ClearStringLine>
					BSP_LCD_ClearStringLine(11);
9000a868:	200b      	movs	r0, #11
9000a86a:	f7f7 fb1d 	bl	90001ea8 <BSP_LCD_ClearStringLine>
					BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
9000a86e:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
9000a872:	f7f6 ffe9 	bl	90001848 <BSP_LCD_SetTextColor>
					BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000a876:	4822      	ldr	r0, [pc, #136]	; (9000a900 <TRANSMITTER_Process+0x6ec>)
9000a878:	f7f6 fffe 	bl	90001878 <BSP_LCD_SetFont>
					AudioState = AUDIO_STATE_WAV_CREATED;
9000a87c:	2312      	movs	r3, #18
9000a87e:	7033      	strb	r3, [r6, #0]
9000a880:	e511      	b.n	9000a2a6 <TRANSMITTER_Process+0x92>
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a882:	483a      	ldr	r0, [pc, #232]	; (9000a96c <TRANSMITTER_Process+0x758>)
9000a884:	f7f6 ffe0 	bl	90001848 <BSP_LCD_SetTextColor>
				BSP_LCD_ClearStringLine(4);
9000a888:	4638      	mov	r0, r7
9000a88a:	f7f7 fb0d 	bl	90001ea8 <BSP_LCD_ClearStringLine>
				sprintf((char*) strFileName,"    >>  ERROR WRITING THE .wav HEADER. ERROR CODE: %d", headerWrite);
9000a88e:	462a      	mov	r2, r5
9000a890:	4937      	ldr	r1, [pc, #220]	; (9000a970 <TRANSMITTER_Process+0x75c>)
			sprintf((char*) strFileName,"    >>  ERROR CREATING THE .wav FILE. ERROR CODE: %d", fileCreation);
9000a892:	a807      	add	r0, sp, #28
9000a894:	f001 f97c 	bl	9000bb90 <siprintf>
			BSP_LCD_DisplayStringAtLine(4, strFileName);
9000a898:	a907      	add	r1, sp, #28
9000a89a:	2004      	movs	r0, #4
9000a89c:	f7f7 f96a 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
9000a8a0:	e780      	b.n	9000a7a4 <TRANSMITTER_Process+0x590>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a8a2:	4832      	ldr	r0, [pc, #200]	; (9000a96c <TRANSMITTER_Process+0x758>)
9000a8a4:	f7f6 ffd0 	bl	90001848 <BSP_LCD_SetTextColor>
			BSP_LCD_ClearStringLine(4);
9000a8a8:	2004      	movs	r0, #4
9000a8aa:	f7f7 fafd 	bl	90001ea8 <BSP_LCD_ClearStringLine>
			sprintf((char*) strFileName,"    >>  ERROR CREATING THE .wav FILE. ERROR CODE: %d", fileCreation);
9000a8ae:	462a      	mov	r2, r5
9000a8b0:	4930      	ldr	r1, [pc, #192]	; (9000a974 <TRANSMITTER_Process+0x760>)
9000a8b2:	e7ee      	b.n	9000a892 <TRANSMITTER_Process+0x67e>
			byteLeido = BufferFile.buff[i];
9000a8b4:	4423      	add	r3, r4
			InsertarBit(1); // BIT STOP
9000a8b6:	2001      	movs	r0, #1
			InsertarBit(0); // BIT START
9000a8b8:	2507      	movs	r5, #7
			byteLeido = BufferFile.buff[i];
9000a8ba:	f893 848c 	ldrb.w	r8, [r3, #1164]	; 0x48c
			InsertarBit(1); // BIT STOP
9000a8be:	f7ff fa2b 	bl	90009d18 <InsertarBit>
			InsertarBit(1); // BIT STOP 2
9000a8c2:	2001      	movs	r0, #1
9000a8c4:	f7ff fa28 	bl	90009d18 <InsertarBit>
			InsertarBit(0); // BIT START
9000a8c8:	2000      	movs	r0, #0
9000a8ca:	f7ff fa25 	bl	90009d18 <InsertarBit>
				InsertarBit((byteLeido >> j) & 1);
9000a8ce:	fa48 f005 	asr.w	r0, r8, r5
9000a8d2:	f000 0001 	and.w	r0, r0, #1
9000a8d6:	f7ff fa1f 	bl	90009d18 <InsertarBit>
			for (int8_t j = 7; j >= 0; j--)
9000a8da:	3d01      	subs	r5, #1
9000a8dc:	d2f7      	bcs.n	9000a8ce <TRANSMITTER_Process+0x6ba>
9000a8de:	2300      	movs	r3, #0
			parity = 0;
9000a8e0:	4618      	mov	r0, r3
				parity ^= (byteLeido >> i) & 1;
9000a8e2:	fa48 f203 	asr.w	r2, r8, r3
			for (uint8_t i = 0; i < 8; i++) {
9000a8e6:	3301      	adds	r3, #1
				parity ^= (byteLeido >> i) & 1;
9000a8e8:	f002 0201 	and.w	r2, r2, #1
			for (uint8_t i = 0; i < 8; i++) {
9000a8ec:	2b08      	cmp	r3, #8
				parity ^= (byteLeido >> i) & 1;
9000a8ee:	ea80 0002 	eor.w	r0, r0, r2
			for (uint8_t i = 0; i < 8; i++) {
9000a8f2:	d1f6      	bne.n	9000a8e2 <TRANSMITTER_Process+0x6ce>
			InsertarBit(parity);
9000a8f4:	3701      	adds	r7, #1
9000a8f6:	f7ff fa0f 	bl	90009d18 <InsertarBit>
		for (uint8_t i = 0; i < BufferFile.fptr; i++)
9000a8fa:	e754      	b.n	9000a7a6 <TRANSMITTER_Process+0x592>
9000a8fc:	ff008000 	.word	0xff008000
9000a900:	20000070 	.word	0x20000070
9000a904:	20001314 	.word	0x20001314
9000a908:	9001164b 	.word	0x9001164b
9000a90c:	9001169a 	.word	0x9001169a
9000a910:	200007b0 	.word	0x200007b0
9000a914:	900116c3 	.word	0x900116c3
9000a918:	900116e6 	.word	0x900116e6
9000a91c:	90011701 	.word	0x90011701
9000a920:	9001171b 	.word	0x9001171b
9000a924:	90011735 	.word	0x90011735
9000a928:	9001174f 	.word	0x9001174f
9000a92c:	9001176a 	.word	0x9001176a
9000a930:	90011786 	.word	0x90011786
9000a934:	900117a3 	.word	0x900117a3
9000a938:	900117c0 	.word	0x900117c0
9000a93c:	900117d0 	.word	0x900117d0
9000a940:	900117e0 	.word	0x900117e0
9000a944:	900117f0 	.word	0x900117f0
9000a948:	90011801 	.word	0x90011801
9000a94c:	90011813 	.word	0x90011813
9000a950:	90011828 	.word	0x90011828
9000a954:	001d4c00 	.word	0x001d4c00
9000a958:	0002b110 	.word	0x0002b110
9000a95c:	00100004 	.word	0x00100004
9000a960:	20005eb8 	.word	0x20005eb8
9000a964:	20001e60 	.word	0x20001e60
9000a968:	900118a7 	.word	0x900118a7
9000a96c:	ffff0000 	.word	0xffff0000
9000a970:	9001183c 	.word	0x9001183c
9000a974:	90011872 	.word	0x90011872
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a978:	4821      	ldr	r0, [pc, #132]	; (9000aa00 <TRANSMITTER_Process+0x7ec>)
9000a97a:	f7f6 ff65 	bl	90001848 <BSP_LCD_SetTextColor>
					BSP_LCD_ClearStringLine(4);
9000a97e:	2004      	movs	r0, #4
9000a980:	f7f7 fa92 	bl	90001ea8 <BSP_LCD_ClearStringLine>
					sprintf((char*) strFileName,"    >>  ERROR UPDATING THE .wav FILE HEADER. ERROR CODE: %d", updateHeader);
9000a984:	462a      	mov	r2, r5
9000a986:	491f      	ldr	r1, [pc, #124]	; (9000aa04 <TRANSMITTER_Process+0x7f0>)
			sprintf((char*) strFileName,"    >>  ERROR WRITING THE .wav FILE. ERROR CODE: %d", fileWriting);
9000a988:	a807      	add	r0, sp, #28
9000a98a:	f001 f901 	bl	9000bb90 <siprintf>
			BSP_LCD_DisplayStringAtLine(4, strFileName);
9000a98e:	a907      	add	r1, sp, #28
9000a990:	2004      	movs	r0, #4
9000a992:	f7f7 f8ef 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
9000a996:	e523      	b.n	9000a3e0 <TRANSMITTER_Process+0x1cc>
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a998:	4819      	ldr	r0, [pc, #100]	; (9000aa00 <TRANSMITTER_Process+0x7ec>)
9000a99a:	f7f6 ff55 	bl	90001848 <BSP_LCD_SetTextColor>
				BSP_LCD_ClearStringLine(4);
9000a99e:	2004      	movs	r0, #4
9000a9a0:	f7f7 fa82 	bl	90001ea8 <BSP_LCD_ClearStringLine>
				sprintf((char*) strFileName,"    >>  ERROR SEEKING THE .wav FILE. ERROR CODE: %d", seeker);
9000a9a4:	4642      	mov	r2, r8
9000a9a6:	4918      	ldr	r1, [pc, #96]	; (9000aa08 <TRANSMITTER_Process+0x7f4>)
9000a9a8:	a807      	add	r0, sp, #28
9000a9aa:	f001 f8f1 	bl	9000bb90 <siprintf>
				BSP_LCD_DisplayStringAtLine(4, strFileName);
9000a9ae:	a907      	add	r1, sp, #28
9000a9b0:	2004      	movs	r0, #4
9000a9b2:	f7f7 f8df 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
9000a9b6:	e476      	b.n	9000a2a6 <TRANSMITTER_Process+0x92>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a9b8:	4811      	ldr	r0, [pc, #68]	; (9000aa00 <TRANSMITTER_Process+0x7ec>)
9000a9ba:	f7f6 ff45 	bl	90001848 <BSP_LCD_SetTextColor>
			BSP_LCD_ClearStringLine(4);
9000a9be:	2004      	movs	r0, #4
9000a9c0:	f7f7 fa72 	bl	90001ea8 <BSP_LCD_ClearStringLine>
			sprintf((char*) strFileName,"    >>  ERROR WRITING THE .wav FILE. ERROR CODE: %d", fileWriting);
9000a9c4:	462a      	mov	r2, r5
9000a9c6:	4911      	ldr	r1, [pc, #68]	; (9000aa0c <TRANSMITTER_Process+0x7f8>)
9000a9c8:	e7de      	b.n	9000a988 <TRANSMITTER_Process+0x774>
		BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"         |    . .-' `. '.       >>    (BACK TO TX MENU)");
9000a9ca:	4911      	ldr	r1, [pc, #68]	; (9000aa10 <TRANSMITTER_Process+0x7fc>)
9000a9cc:	2009      	movs	r0, #9
9000a9ce:	f7f7 f8d1 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(11, (uint8_t *)"          \\     `.  /  ..     >>    (START TRANSMISSION)");
9000a9d2:	4910      	ldr	r1, [pc, #64]	; (9000aa14 <TRANSMITTER_Process+0x800>)
9000a9d4:	200b      	movs	r0, #11
9000a9d6:	f7f7 f8cd 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
		AudioState = AUDIO_STATE_WAIT_FOR_TRANSMISSION;
9000a9da:	2314      	movs	r3, #20
9000a9dc:	e4ff      	b.n	9000a3de <TRANSMITTER_Process+0x1ca>
		BSP_LCD_FillPolygon(puntos_BTM, 4);
9000a9de:	2104      	movs	r1, #4
9000a9e0:	480d      	ldr	r0, [pc, #52]	; (9000aa18 <TRANSMITTER_Process+0x804>)
9000a9e2:	f7f7 faf1 	bl	90001fc8 <BSP_LCD_FillPolygon>
		BSP_LCD_FillPolygon(puntos_START, 4);
9000a9e6:	480d      	ldr	r0, [pc, #52]	; (9000aa1c <TRANSMITTER_Process+0x808>)
9000a9e8:	2104      	movs	r1, #4
9000a9ea:	f7f7 faed 	bl	90001fc8 <BSP_LCD_FillPolygon>
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
9000a9ee:	480c      	ldr	r0, [pc, #48]	; (9000aa20 <TRANSMITTER_Process+0x80c>)
9000a9f0:	f890 3b78 	ldrb.w	r3, [r0, #2936]	; 0xb78
9000a9f4:	2b01      	cmp	r3, #1
9000a9f6:	f47f acf3 	bne.w	9000a3e0 <TRANSMITTER_Process+0x1cc>
		BSP_TS_GetState(&TS_State);
9000a9fa:	f600 3078 	addw	r0, r0, #2936	; 0xb78
9000a9fe:	e577      	b.n	9000a4f0 <TRANSMITTER_Process+0x2dc>
9000aa00:	ffff0000 	.word	0xffff0000
9000aa04:	900118d5 	.word	0x900118d5
9000aa08:	90011911 	.word	0x90011911
9000aa0c:	90011945 	.word	0x90011945
9000aa10:	90011979 	.word	0x90011979
9000aa14:	900119b1 	.word	0x900119b1
9000aa18:	200000d8 	.word	0x200000d8
9000aa1c:	200000e8 	.word	0x200000e8
9000aa20:	20001314 	.word	0x20001314

9000aa24 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
	if (AudioState == AUDIO_STATE_PLAY) {
9000aa24:	4b03      	ldr	r3, [pc, #12]	; (9000aa34 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
9000aa26:	781b      	ldrb	r3, [r3, #0]
9000aa28:	2b03      	cmp	r3, #3
		BufferCtl.state = BUFFER_OFFSET_FULL;
9000aa2a:	bf02      	ittt	eq
9000aa2c:	4b02      	ldreq	r3, [pc, #8]	; (9000aa38 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
9000aa2e:	2202      	moveq	r2, #2
9000aa30:	701a      	strbeq	r2, [r3, #0]
}
9000aa32:	4770      	bx	lr
9000aa34:	20001312 	.word	0x20001312
9000aa38:	200086c8 	.word	0x200086c8

9000aa3c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
	if (AudioState == AUDIO_STATE_PLAY) {
9000aa3c:	4b03      	ldr	r3, [pc, #12]	; (9000aa4c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x10>)
9000aa3e:	781b      	ldrb	r3, [r3, #0]
9000aa40:	2b03      	cmp	r3, #3
		BufferCtl.state = BUFFER_OFFSET_HALF;
9000aa42:	bf02      	ittt	eq
9000aa44:	4b02      	ldreq	r3, [pc, #8]	; (9000aa50 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
9000aa46:	2201      	moveq	r2, #1
9000aa48:	701a      	strbeq	r2, [r3, #0]
}
9000aa4a:	4770      	bx	lr
9000aa4c:	20001312 	.word	0x20001312
9000aa50:	200086c8 	.word	0x200086c8

9000aa54 <HAL_HCD_MspInit>:
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hhcd->Instance == USB_OTG_FS)
9000aa54:	6803      	ldr	r3, [r0, #0]
9000aa56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
9000aa5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000aa5e:	b090      	sub	sp, #64	; 0x40
  if(hhcd->Instance == USB_OTG_FS)
9000aa60:	d146      	bne.n	9000aaf0 <HAL_HCD_MspInit+0x9c>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000aa62:	4c63      	ldr	r4, [pc, #396]	; (9000abf0 <HAL_HCD_MspInit+0x19c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
    
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000aa64:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000aa66:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000aa68:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000aa6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000aa6c:	4861      	ldr	r0, [pc, #388]	; (9000abf4 <HAL_HCD_MspInit+0x1a0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000aa6e:	f043 0301 	orr.w	r3, r3, #1
9000aa72:	6323      	str	r3, [r4, #48]	; 0x30
9000aa74:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000aa76:	f003 0301 	and.w	r3, r3, #1
9000aa7a:	9301      	str	r3, [sp, #4]
9000aa7c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
9000aa7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000aa80:	f043 0308 	orr.w	r3, r3, #8
9000aa84:	6323      	str	r3, [r4, #48]	; 0x30
9000aa86:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000aa88:	f003 0308 	and.w	r3, r3, #8
9000aa8c:	9302      	str	r3, [sp, #8]
9000aa8e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000aa90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
9000aa94:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000aa98:	2303      	movs	r3, #3
9000aa9a:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
9000aa9e:	230a      	movs	r3, #10
9000aaa0:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000aaa2:	f7f8 fbd7 	bl	90003254 <HAL_GPIO_Init>
    
    /* Configure POWER_SWITCH IO pin */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
9000aaa6:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000aaa8:	a90b      	add	r1, sp, #44	; 0x2c
9000aaaa:	4853      	ldr	r0, [pc, #332]	; (9000abf8 <HAL_HCD_MspInit+0x1a4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000aaac:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000aaae:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000aab2:	f7f8 fbcf 	bl	90003254 <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
9000aab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
9000aab8:	2043      	movs	r0, #67	; 0x43
9000aaba:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
9000aabc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
9000aac0:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
9000aac2:	6363      	str	r3, [r4, #52]	; 0x34
9000aac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000aac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000aaca:	9303      	str	r3, [sp, #12]
9000aacc:	9b03      	ldr	r3, [sp, #12]
9000aace:	6c63      	ldr	r3, [r4, #68]	; 0x44
9000aad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
9000aad4:	6463      	str	r3, [r4, #68]	; 0x44
9000aad6:	6c63      	ldr	r3, [r4, #68]	; 0x44
9000aad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
9000aadc:	9304      	str	r3, [sp, #16]
9000aade:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
9000aae0:	f7f8 f818 	bl	90002b14 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
9000aae4:	2043      	movs	r0, #67	; 0x43
    
    /* Set USBHS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
    
    /* Enable USBHS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
9000aae6:	f7f8 f847 	bl	90002b78 <HAL_NVIC_EnableIRQ>
  }   
}
9000aaea:	b010      	add	sp, #64	; 0x40
9000aaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hhcd->Instance == USB_OTG_HS)
9000aaf0:	4a42      	ldr	r2, [pc, #264]	; (9000abfc <HAL_HCD_MspInit+0x1a8>)
9000aaf2:	4293      	cmp	r3, r2
9000aaf4:	d1f9      	bne.n	9000aaea <HAL_HCD_MspInit+0x96>
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000aaf6:	4c3e      	ldr	r4, [pc, #248]	; (9000abf0 <HAL_HCD_MspInit+0x19c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000aaf8:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000aafa:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000aafc:	260a      	movs	r6, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000aafe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000ab00:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000ab04:	a90b      	add	r1, sp, #44	; 0x2c
9000ab06:	483b      	ldr	r0, [pc, #236]	; (9000abf4 <HAL_HCD_MspInit+0x1a0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000ab08:	f043 0301 	orr.w	r3, r3, #1
9000ab0c:	6323      	str	r3, [r4, #48]	; 0x30
9000ab0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000ab10:	f003 0301 	and.w	r3, r3, #1
9000ab14:	9305      	str	r3, [sp, #20]
9000ab16:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
9000ab18:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000ab1a:	f043 0302 	orr.w	r3, r3, #2
9000ab1e:	6323      	str	r3, [r4, #48]	; 0x30
9000ab20:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000ab22:	f003 0302 	and.w	r3, r3, #2
9000ab26:	9306      	str	r3, [sp, #24]
9000ab28:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
9000ab2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000ab2c:	f043 0304 	orr.w	r3, r3, #4
9000ab30:	6323      	str	r3, [r4, #48]	; 0x30
9000ab32:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000ab34:	f003 0304 	and.w	r3, r3, #4
9000ab38:	9307      	str	r3, [sp, #28]
9000ab3a:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000ab3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000ab3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000ab42:	6323      	str	r3, [r4, #48]	; 0x30
9000ab44:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000ab46:	960f      	str	r6, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000ab48:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000ab4c:	9308      	str	r3, [sp, #32]
9000ab4e:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000ab50:	2320      	movs	r3, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000ab52:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000ab56:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000ab5a:	f7f8 fb7b 	bl	90003254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
9000ab5e:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000ab60:	a90b      	add	r1, sp, #44	; 0x2c
9000ab62:	4824      	ldr	r0, [pc, #144]	; (9000abf4 <HAL_HCD_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000ab64:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000ab66:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000ab6a:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000ab6e:	f7f8 fb71 	bl	90003254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_5 |\
9000ab72:	f643 4323 	movw	r3, #15395	; 0x3c23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
9000ab76:	a90b      	add	r1, sp, #44	; 0x2c
9000ab78:	4821      	ldr	r0, [pc, #132]	; (9000ac00 <HAL_HCD_MspInit+0x1ac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000ab7a:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000ab7c:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000ab7e:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
9000ab82:	f7f8 fb67 	bl	90003254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
9000ab86:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); 
9000ab88:	a90b      	add	r1, sp, #44	; 0x2c
9000ab8a:	481e      	ldr	r0, [pc, #120]	; (9000ac04 <HAL_HCD_MspInit+0x1b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000ab8c:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000ab8e:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000ab90:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); 
9000ab94:	f7f8 fb5e 	bl	90003254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
9000ab98:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000ab9a:	a90b      	add	r1, sp, #44	; 0x2c
9000ab9c:	481a      	ldr	r0, [pc, #104]	; (9000ac08 <HAL_HCD_MspInit+0x1b4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000ab9e:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000aba0:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000aba2:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000aba6:	f7f8 fb55 	bl	90003254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
9000abaa:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000abac:	a90b      	add	r1, sp, #44	; 0x2c
9000abae:	4815      	ldr	r0, [pc, #84]	; (9000ac04 <HAL_HCD_MspInit+0x1b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000abb0:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000abb2:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000abb4:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000abb8:	f7f8 fb4c 	bl	90003254 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000abbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000abbe:	204d      	movs	r0, #77	; 0x4d
9000abc0:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000abc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000abc6:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000abc8:	6323      	str	r3, [r4, #48]	; 0x30
9000abca:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000abcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
9000abd0:	9309      	str	r3, [sp, #36]	; 0x24
9000abd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
9000abd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000abd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
9000abda:	6323      	str	r3, [r4, #48]	; 0x30
9000abdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000abde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
9000abe2:	930a      	str	r3, [sp, #40]	; 0x28
9000abe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000abe6:	f7f7 ff95 	bl	90002b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
9000abea:	204d      	movs	r0, #77	; 0x4d
9000abec:	e77b      	b.n	9000aae6 <HAL_HCD_MspInit+0x92>
9000abee:	bf00      	nop
9000abf0:	40023800 	.word	0x40023800
9000abf4:	40020000 	.word	0x40020000
9000abf8:	40020c00 	.word	0x40020c00
9000abfc:	40040000 	.word	0x40040000
9000ac00:	40020400 	.word	0x40020400
9000ac04:	40020800 	.word	0x40020800
9000ac08:	40021c00 	.word	0x40021c00

9000ac0c <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
9000ac0c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000ac10:	f7fc bba3 	b.w	9000735a <USBH_LL_IncTimer>

9000ac14 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
9000ac14:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000ac18:	f7fc bbb5 	b.w	90007386 <USBH_LL_Connect>

9000ac1c <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
9000ac1c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000ac20:	f7fc bbbb 	b.w	9000739a <USBH_LL_Disconnect>

9000ac24 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
9000ac24:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000ac28:	f7fc bba5 	b.w	90007376 <USBH_LL_PortEnabled>

9000ac2c <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
9000ac2c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000ac30:	f7fc bba5 	b.w	9000737e <USBH_LL_PortDisabled>

9000ac34 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
}
9000ac34:	4770      	bx	lr
	...

9000ac38 <USBH_LL_Init>:
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
9000ac38:	b570      	push	{r4, r5, r6, lr}
#ifdef USE_USB_FS  
  /* Set the LL driver parameters */
  hhcd.Instance = USB_OTG_FS;
9000ac3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
9000ac3e:	4c0f      	ldr	r4, [pc, #60]	; (9000ac7c <USBH_LL_Init+0x44>)
  hhcd.Init.Host_channels = 11; 
  hhcd.Init.dma_enable = 0;
9000ac40:	2500      	movs	r5, #0
{
9000ac42:	4606      	mov	r6, r0
  hhcd.Instance = USB_OTG_FS;
9000ac44:	6023      	str	r3, [r4, #0]
  hhcd.Init.Host_channels = 11; 
9000ac46:	230b      	movs	r3, #11
  hhcd.Init.Sof_enable = 0;
  hhcd.Init.speed = HCD_SPEED_FULL;
  hhcd.Init.vbus_sensing_enable = 0;
  
  /* Link the driver to the stack */
  hhcd.pData = phost;
9000ac48:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hhcd.Init.Host_channels = 11; 
9000ac4c:	60a3      	str	r3, [r4, #8]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED; 
9000ac4e:	2302      	movs	r3, #2
  phost->pData = &hhcd;
9000ac50:	f8c0 44bc 	str.w	r4, [r0, #1212]	; 0x4bc
  
  /* Initialize the LL Driver */
  HAL_HCD_Init(&hhcd);
9000ac54:	4620      	mov	r0, r4
  hhcd.Init.dma_enable = 0;
9000ac56:	6125      	str	r5, [r4, #16]
  hhcd.Init.low_power_enable = 0;
9000ac58:	6225      	str	r5, [r4, #32]
  hhcd.Init.vbus_sensing_enable = 0;
9000ac5a:	62e5      	str	r5, [r4, #44]	; 0x2c
  hhcd.Init.Sof_enable = 0;
9000ac5c:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hhcd.Init.speed = HCD_SPEED_FULL;
9000ac60:	2301      	movs	r3, #1
9000ac62:	60e3      	str	r3, [r4, #12]
  HAL_HCD_Init(&hhcd);
9000ac64:	f7f8 fc25 	bl	900034b2 <HAL_HCD_Init>
  phost->pData = &hhcd;
  /* Initialize the LL driver */
  HAL_HCD_Init(&hhcd);
#endif /*USE_USB_HS*/ 

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd));
9000ac68:	4620      	mov	r0, r4
9000ac6a:	f7f9 f829 	bl	90003cc0 <HAL_HCD_GetCurrentFrame>
9000ac6e:	4601      	mov	r1, r0
9000ac70:	4630      	mov	r0, r6
9000ac72:	f7fc fb6f 	bl	90007354 <USBH_LL_SetTimer>
  
  return USBH_OK;
}
9000ac76:	4628      	mov	r0, r5
9000ac78:	bd70      	pop	{r4, r5, r6, pc}
9000ac7a:	bf00      	nop
9000ac7c:	200086d0 	.word	0x200086d0

9000ac80 <USBH_LL_Start>:
  * @brief  Starts the Low Level portion of the Host driver.   
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
9000ac80:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
9000ac82:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000ac86:	f7f8 ffe5 	bl	90003c54 <HAL_HCD_Start>
  return USBH_OK; 
}
9000ac8a:	2000      	movs	r0, #0
9000ac8c:	bd08      	pop	{r3, pc}

9000ac8e <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
9000ac8e:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
9000ac90:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000ac94:	f7f8 fff4 	bl	90003c80 <HAL_HCD_Stop>
  return USBH_OK; 
}
9000ac98:	2000      	movs	r0, #0
9000ac9a:	bd08      	pop	{r3, pc}

9000ac9c <USBH_LL_GetSpeed>:
  * @brief  Returns the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
9000ac9c:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
  
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
9000ac9e:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000aca2:	f7f9 f810 	bl	90003cc6 <HAL_HCD_GetCurrentSpeed>
9000aca6:	2803      	cmp	r0, #3
9000aca8:	bf28      	it	cs
9000acaa:	2001      	movcs	r0, #1
  default:  
    speed = USBH_SPEED_FULL;    
    break;    
  }
  return speed;
}
9000acac:	b2c0      	uxtb	r0, r0
9000acae:	bd08      	pop	{r3, pc}

9000acb0 <USBH_LL_ResetPort>:
  * @brief  Resets the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
9000acb0:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
9000acb2:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000acb6:	f7f8 fff5 	bl	90003ca4 <HAL_HCD_ResetPort>
  return USBH_OK; 
}
9000acba:	2000      	movs	r0, #0
9000acbc:	bd08      	pop	{r3, pc}

9000acbe <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)  
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
9000acbe:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000acc2:	f7f8 bff8 	b.w	90003cb6 <HAL_HCD_HC_GetXferCount>

9000acc6 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,                                      
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
9000acc6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_Init(phost->pData,
9000acc8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
9000accc:	9402      	str	r4, [sp, #8]
9000acce:	f89d 401c 	ldrb.w	r4, [sp, #28]
9000acd2:	9401      	str	r4, [sp, #4]
9000acd4:	f89d 4018 	ldrb.w	r4, [sp, #24]
9000acd8:	9400      	str	r4, [sp, #0]
9000acda:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000acde:	f7f8 fba0 	bl	90003422 <HAL_HCD_HC_Init>
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
}
9000ace2:	2000      	movs	r0, #0
9000ace4:	b004      	add	sp, #16
9000ace6:	bd10      	pop	{r4, pc}

9000ace8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
9000ace8:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe);
9000acea:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000acee:	f7f8 fbce 	bl	9000348e <HAL_HCD_HC_Halt>
  return USBH_OK; 
}
9000acf2:	2000      	movs	r0, #0
9000acf4:	bd08      	pop	{r3, pc}

9000acf6 <USBH_LL_SubmitURB>:
                                     uint8_t ep_type,  
                                     uint8_t token, 
                                     uint8_t* pbuff, 
                                     uint16_t length,
                                     uint8_t do_ping) 
{
9000acf6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_SubmitRequest(phost->pData,
9000acf8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
9000acfc:	9403      	str	r4, [sp, #12]
9000acfe:	f8bd 4020 	ldrh.w	r4, [sp, #32]
9000ad02:	9402      	str	r4, [sp, #8]
9000ad04:	9c07      	ldr	r4, [sp, #28]
9000ad06:	9401      	str	r4, [sp, #4]
9000ad08:	f89d 4018 	ldrb.w	r4, [sp, #24]
9000ad0c:	9400      	str	r4, [sp, #0]
9000ad0e:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000ad12:	f7f8 fc1b 	bl	9000354c <HAL_HCD_HC_SubmitRequest>
                           token, 
                           pbuff, 
                           length,
                           do_ping);
  return USBH_OK;   
}
9000ad16:	2000      	movs	r0, #0
9000ad18:	b004      	add	sp, #16
9000ad1a:	bd10      	pop	{r4, pc}

9000ad1c <USBH_LL_GetURBState>:
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe) 
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
9000ad1c:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000ad20:	f7f8 bfc3 	b.w	90003caa <HAL_HCD_HC_GetURBState>

9000ad24 <USBH_LL_DriverVBUS>:
  *           0: VBUS Active 
  *           1: VBUS Inactive
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
9000ad24:	b508      	push	{r3, lr}
#ifdef USE_USB_FS
  if(state == 0)
9000ad26:	b949      	cbnz	r1, 9000ad3c <USBH_LL_DriverVBUS+0x18>
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
9000ad28:	2201      	movs	r2, #1
  }
  else
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
9000ad2a:	2120      	movs	r1, #32
9000ad2c:	4804      	ldr	r0, [pc, #16]	; (9000ad40 <USBH_LL_DriverVBUS+0x1c>)
9000ad2e:	f7f8 fb73 	bl	90003418 <HAL_GPIO_WritePin>
  }
  
  HAL_Delay(200);
9000ad32:	20c8      	movs	r0, #200	; 0xc8
9000ad34:	f7f7 feca 	bl	90002acc <HAL_Delay>
#endif /* USE_USB_FS */
  return USBH_OK;  
}
9000ad38:	2000      	movs	r0, #0
9000ad3a:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
9000ad3c:	2200      	movs	r2, #0
9000ad3e:	e7f4      	b.n	9000ad2a <USBH_LL_DriverVBUS+0x6>
9000ad40:	40020c00 	.word	0x40020c00

9000ad44 <USBH_LL_SetToggle>:
  * @param  toggle: toggle (0/1)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
  if(hhcd.hc[pipe].ep_is_in)
9000ad44:	4b06      	ldr	r3, [pc, #24]	; (9000ad60 <USBH_LL_SetToggle+0x1c>)
9000ad46:	2028      	movs	r0, #40	; 0x28
9000ad48:	fb00 3101 	mla	r1, r0, r1, r3
9000ad4c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
9000ad50:	b11b      	cbz	r3, 9000ad5a <USBH_LL_SetToggle+0x16>
  {
    hhcd.hc[pipe].toggle_in = toggle;
9000ad52:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
  }
  return USBH_OK; 
}
9000ad56:	2000      	movs	r0, #0
9000ad58:	4770      	bx	lr
    hhcd.hc[pipe].toggle_out = toggle;
9000ad5a:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
9000ad5e:	e7fa      	b.n	9000ad56 <USBH_LL_SetToggle+0x12>
9000ad60:	200086d0 	.word	0x200086d0

9000ad64 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
  uint8_t toggle = 0;
  
  if(hhcd.hc[pipe].ep_is_in)
9000ad64:	4b06      	ldr	r3, [pc, #24]	; (9000ad80 <USBH_LL_GetToggle+0x1c>)
9000ad66:	2228      	movs	r2, #40	; 0x28
9000ad68:	fb02 3101 	mla	r1, r2, r1, r3
9000ad6c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
9000ad70:	b113      	cbz	r3, 9000ad78 <USBH_LL_GetToggle+0x14>
  {
    toggle = hhcd.hc[pipe].toggle_in;
9000ad72:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
9000ad76:	4770      	bx	lr
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
9000ad78:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle; 
}
9000ad7c:	4770      	bx	lr
9000ad7e:	bf00      	nop
9000ad80:	200086d0 	.word	0x200086d0

9000ad84 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);  
9000ad84:	f7f7 bea2 	b.w	90002acc <HAL_Delay>

9000ad88 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
9000ad88:	2000      	movs	r0, #0
9000ad8a:	4770      	bx	lr

9000ad8c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
9000ad8c:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
9000ad8e:	4804      	ldr	r0, [pc, #16]	; (9000ada0 <USBH_status+0x14>)
{
9000ad90:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
9000ad92:	f7fb fbef 	bl	90006574 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
9000ad96:	fab0 f080 	clz	r0, r0
9000ad9a:	0940      	lsrs	r0, r0, #5
9000ad9c:	bd08      	pop	{r3, pc}
9000ad9e:	bf00      	nop
9000ada0:	20000dc8 	.word	0x20000dc8

9000ada4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
9000ada4:	b510      	push	{r4, lr}
9000ada6:	4603      	mov	r3, r0
9000ada8:	b08e      	sub	sp, #56	; 0x38
9000adaa:	4608      	mov	r0, r1
9000adac:	4614      	mov	r4, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
9000adae:	2903      	cmp	r1, #3
9000adb0:	d803      	bhi.n	9000adba <USBH_ioctl+0x16>
9000adb2:	e8df f001 	tbb	[pc, r1]
9000adb6:	0503      	.short	0x0503
9000adb8:	1a10      	.short	0x1a10
9000adba:	2004      	movs	r0, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
9000adbc:	b00e      	add	sp, #56	; 0x38
9000adbe:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000adc0:	aa01      	add	r2, sp, #4
9000adc2:	4619      	mov	r1, r3
9000adc4:	480e      	ldr	r0, [pc, #56]	; (9000ae00 <USBH_ioctl+0x5c>)
9000adc6:	f7fb fbe6 	bl	90006596 <USBH_MSC_GetLUNInfo>
9000adca:	b108      	cbz	r0, 9000add0 <USBH_ioctl+0x2c>
      res = RES_ERROR;
9000adcc:	2001      	movs	r0, #1
9000adce:	e7f5      	b.n	9000adbc <USBH_ioctl+0x18>
      *(DWORD*)buff = info.capacity.block_nbr;
9000add0:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
9000add2:	6023      	str	r3, [r4, #0]
      res = RES_OK;
9000add4:	e7f2      	b.n	9000adbc <USBH_ioctl+0x18>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000add6:	aa01      	add	r2, sp, #4
9000add8:	4619      	mov	r1, r3
9000adda:	4809      	ldr	r0, [pc, #36]	; (9000ae00 <USBH_ioctl+0x5c>)
9000addc:	f7fb fbdb 	bl	90006596 <USBH_MSC_GetLUNInfo>
9000ade0:	2800      	cmp	r0, #0
9000ade2:	d1f3      	bne.n	9000adcc <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size;
9000ade4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
9000ade8:	e7f3      	b.n	9000add2 <USBH_ioctl+0x2e>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000adea:	aa01      	add	r2, sp, #4
9000adec:	4619      	mov	r1, r3
9000adee:	4804      	ldr	r0, [pc, #16]	; (9000ae00 <USBH_ioctl+0x5c>)
9000adf0:	f7fb fbd1 	bl	90006596 <USBH_MSC_GetLUNInfo>
9000adf4:	2800      	cmp	r0, #0
9000adf6:	d1e9      	bne.n	9000adcc <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
9000adf8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
9000adfc:	0a5b      	lsrs	r3, r3, #9
9000adfe:	e7e8      	b.n	9000add2 <USBH_ioctl+0x2e>
9000ae00:	20000dc8 	.word	0x20000dc8

9000ae04 <USBH_read>:
{
9000ae04:	b510      	push	{r4, lr}
9000ae06:	b090      	sub	sp, #64	; 0x40
9000ae08:	4604      	mov	r4, r0
  if(USBH_MSC_Read(&hUSBHost, lun, sector, buff, count) == USBH_OK)
9000ae0a:	9300      	str	r3, [sp, #0]
9000ae0c:	460b      	mov	r3, r1
9000ae0e:	4601      	mov	r1, r0
9000ae10:	480f      	ldr	r0, [pc, #60]	; (9000ae50 <USBH_read+0x4c>)
9000ae12:	f7fb fbd8 	bl	900065c6 <USBH_MSC_Read>
9000ae16:	b1b0      	cbz	r0, 9000ae46 <USBH_read+0x42>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
9000ae18:	aa03      	add	r2, sp, #12
9000ae1a:	4621      	mov	r1, r4
9000ae1c:	480c      	ldr	r0, [pc, #48]	; (9000ae50 <USBH_read+0x4c>)
9000ae1e:	f7fb fbba 	bl	90006596 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
9000ae22:	f89d 3019 	ldrb.w	r3, [sp, #25]
9000ae26:	2b28      	cmp	r3, #40	; 0x28
9000ae28:	d003      	beq.n	9000ae32 <USBH_read+0x2e>
9000ae2a:	2b3a      	cmp	r3, #58	; 0x3a
9000ae2c:	d001      	beq.n	9000ae32 <USBH_read+0x2e>
9000ae2e:	2b04      	cmp	r3, #4
9000ae30:	d10b      	bne.n	9000ae4a <USBH_read+0x46>
      USBH_ErrLog ("USB Disk is not ready!");
9000ae32:	4808      	ldr	r0, [pc, #32]	; (9000ae54 <USBH_read+0x50>)
9000ae34:	f000 fe36 	bl	9000baa4 <iprintf>
9000ae38:	4807      	ldr	r0, [pc, #28]	; (9000ae58 <USBH_read+0x54>)
9000ae3a:	f000 fe33 	bl	9000baa4 <iprintf>
9000ae3e:	200a      	movs	r0, #10
9000ae40:	f000 fe42 	bl	9000bac8 <putchar>
      res = RES_NOTRDY;
9000ae44:	2003      	movs	r0, #3
}
9000ae46:	b010      	add	sp, #64	; 0x40
9000ae48:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
9000ae4a:	2001      	movs	r0, #1
  return res;
9000ae4c:	e7fb      	b.n	9000ae46 <USBH_read+0x42>
9000ae4e:	bf00      	nop
9000ae50:	20000dc8 	.word	0x20000dc8
9000ae54:	90010e88 	.word	0x90010e88
9000ae58:	900119ea 	.word	0x900119ea

9000ae5c <USBH_write>:
{
9000ae5c:	b510      	push	{r4, lr}
9000ae5e:	b090      	sub	sp, #64	; 0x40
9000ae60:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSBHost, lun, sector, (BYTE *)buff, count) == USBH_OK)
9000ae62:	9300      	str	r3, [sp, #0]
9000ae64:	460b      	mov	r3, r1
9000ae66:	4601      	mov	r1, r0
9000ae68:	4816      	ldr	r0, [pc, #88]	; (9000aec4 <USBH_write+0x68>)
9000ae6a:	f7fb fbed 	bl	90006648 <USBH_MSC_Write>
9000ae6e:	b160      	cbz	r0, 9000ae8a <USBH_write+0x2e>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
9000ae70:	aa03      	add	r2, sp, #12
9000ae72:	4621      	mov	r1, r4
9000ae74:	4813      	ldr	r0, [pc, #76]	; (9000aec4 <USBH_write+0x68>)
9000ae76:	f7fb fb8e 	bl	90006596 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
9000ae7a:	f89d 3019 	ldrb.w	r3, [sp, #25]
9000ae7e:	2b27      	cmp	r3, #39	; 0x27
9000ae80:	d009      	beq.n	9000ae96 <USBH_write+0x3a>
9000ae82:	d804      	bhi.n	9000ae8e <USBH_write+0x32>
9000ae84:	2b04      	cmp	r3, #4
9000ae86:	d011      	beq.n	9000aeac <USBH_write+0x50>
9000ae88:	2001      	movs	r0, #1
}
9000ae8a:	b010      	add	sp, #64	; 0x40
9000ae8c:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
9000ae8e:	2b28      	cmp	r3, #40	; 0x28
9000ae90:	d00c      	beq.n	9000aeac <USBH_write+0x50>
9000ae92:	2b3a      	cmp	r3, #58	; 0x3a
9000ae94:	e7f7      	b.n	9000ae86 <USBH_write+0x2a>
      USBH_ErrLog("USB Disk is Write protected!");
9000ae96:	480c      	ldr	r0, [pc, #48]	; (9000aec8 <USBH_write+0x6c>)
9000ae98:	f000 fe04 	bl	9000baa4 <iprintf>
9000ae9c:	480b      	ldr	r0, [pc, #44]	; (9000aecc <USBH_write+0x70>)
9000ae9e:	f000 fe01 	bl	9000baa4 <iprintf>
9000aea2:	200a      	movs	r0, #10
9000aea4:	f000 fe10 	bl	9000bac8 <putchar>
      res = RES_WRPRT;
9000aea8:	2002      	movs	r0, #2
      break;
9000aeaa:	e7ee      	b.n	9000ae8a <USBH_write+0x2e>
      USBH_ErrLog("USB Disk is not ready!");
9000aeac:	4806      	ldr	r0, [pc, #24]	; (9000aec8 <USBH_write+0x6c>)
9000aeae:	f000 fdf9 	bl	9000baa4 <iprintf>
9000aeb2:	4807      	ldr	r0, [pc, #28]	; (9000aed0 <USBH_write+0x74>)
9000aeb4:	f000 fdf6 	bl	9000baa4 <iprintf>
9000aeb8:	200a      	movs	r0, #10
9000aeba:	f000 fe05 	bl	9000bac8 <putchar>
      res = RES_NOTRDY;
9000aebe:	2003      	movs	r0, #3
      break;
9000aec0:	e7e3      	b.n	9000ae8a <USBH_write+0x2e>
9000aec2:	bf00      	nop
9000aec4:	20000dc8 	.word	0x20000dc8
9000aec8:	90010e88 	.word	0x90010e88
9000aecc:	90011a01 	.word	0x90011a01
9000aed0:	900119ea 	.word	0x900119ea

9000aed4 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
9000aed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t byteswritten = 0;
9000aed8:	2300      	movs	r3, #0
{
9000aeda:	b091      	sub	sp, #68	; 0x44
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20]; 
  
  uwVolume_rec = 100;
9000aedc:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 9000b1d4 <AUDIO_REC_Start+0x300>
9000aee0:	2464      	movs	r4, #100	; 0x64

  /* Create a new file system */
  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
9000aee2:	220a      	movs	r2, #10
9000aee4:	49a7      	ldr	r1, [pc, #668]	; (9000b184 <AUDIO_REC_Start+0x2b0>)
9000aee6:	48a8      	ldr	r0, [pc, #672]	; (9000b188 <AUDIO_REC_Start+0x2b4>)
  uint32_t byteswritten = 0;
9000aee8:	9300      	str	r3, [sp, #0]
  uwVolume_rec = 100;
9000aeea:	f8c8 4000 	str.w	r4, [r8]
  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
9000aeee:	f7fd fed7 	bl	90008ca0 <f_open>
9000aef2:	b120      	cbz	r0, 9000aefe <AUDIO_REC_Start+0x2a>
          return AUDIO_ERROR_NONE;
        }
      }
    }
  }
  return AUDIO_ERROR_IO; 
9000aef4:	2401      	movs	r4, #1
}
9000aef6:	4620      	mov	r0, r4
9000aef8:	b011      	add	sp, #68	; 0x44
9000aefa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{  
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
9000aefe:	4ba3      	ldr	r3, [pc, #652]	; (9000b18c <AUDIO_REC_Start+0x2b8>)
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
9000af00:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
9000af04:	f44f 567a 	mov.w	r6, #16000	; 0x3e80
  pHeader[4] = 0x00;
  pHeader[5] = 0x4C;
  pHeader[6] = 0x1D;
  pHeader[7] = 0x00;
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
9000af08:	2757      	movs	r7, #87	; 0x57
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
9000af0a:	4aa1      	ldr	r2, [pc, #644]	; (9000b190 <AUDIO_REC_Start+0x2bc>)
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
9000af0c:	2502      	movs	r5, #2
  pHeader[17]  = 0x00;
  pHeader[18]  = 0x00;
  pHeader[19]  = 0x00;
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
9000af0e:	f04f 0901 	mov.w	r9, #1
  pHeader[5] = 0x4C;
9000af12:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
9000af16:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
9000af18:	222c      	movs	r2, #44	; 0x2c
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
9000af1a:	82dd      	strh	r5, [r3, #22]
  pHeader[14]  = 't';
9000af1c:	f04f 0e74 	mov.w	lr, #116	; 0x74
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
9000af20:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
9000af22:	e9c3 6106 	strd	r6, r1, [r3, #24]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
9000af26:	499b      	ldr	r1, [pc, #620]	; (9000b194 <AUDIO_REC_Start+0x2c0>)
9000af28:	6219      	str	r1, [r3, #32]
  pHeader[0] = 'R';
9000af2a:	2352      	movs	r3, #82	; 0x52
9000af2c:	499a      	ldr	r1, [pc, #616]	; (9000b198 <AUDIO_REC_Start+0x2c4>)
  pHeader[8]  = 'W';
9000af2e:	720f      	strb	r7, [r1, #8]
  pHeader[9]  = 'A';
9000af30:	2741      	movs	r7, #65	; 0x41
  pHeader[0] = 'R';
9000af32:	700b      	strb	r3, [r1, #0]
  pHeader[1] = 'I';
9000af34:	2349      	movs	r3, #73	; 0x49
  pHeader[9]  = 'A';
9000af36:	724f      	strb	r7, [r1, #9]
  pHeader[10] = 'V';
9000af38:	2756      	movs	r7, #86	; 0x56
  pHeader[20]  = 0x01;
9000af3a:	f881 9014 	strb.w	r9, [r1, #20]
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
  pHeader[23]  = 0x00;
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
9000af3e:	f04f 0980 	mov.w	r9, #128	; 0x80
  pHeader[10] = 'V';
9000af42:	728f      	strb	r7, [r1, #10]
  pHeader[11] = 'E';
9000af44:	2745      	movs	r7, #69	; 0x45
  pHeader[1] = 'I';
9000af46:	704b      	strb	r3, [r1, #1]
  pHeader[2] = 'F';
9000af48:	2346      	movs	r3, #70	; 0x46
  pHeader[11] = 'E';
9000af4a:	72cf      	strb	r7, [r1, #11]
  pHeader[12]  = 'f';
9000af4c:	2766      	movs	r7, #102	; 0x66
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
9000af4e:	f881 9018 	strb.w	r9, [r1, #24]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
9000af52:	f04f 093e 	mov.w	r9, #62	; 0x3e
  pHeader[12]  = 'f';
9000af56:	730f      	strb	r7, [r1, #12]
  pHeader[13]  = 'm';
9000af58:	276d      	movs	r7, #109	; 0x6d
  pHeader[2] = 'F';
9000af5a:	708b      	strb	r3, [r1, #2]
  pHeader[13]  = 'm';
9000af5c:	734f      	strb	r7, [r1, #13]
  pHeader[15]  = ' ';
9000af5e:	2720      	movs	r7, #32
  pHeader[3] = 'F';
9000af60:	70cb      	strb	r3, [r1, #3]
  pHeader[6] = 0x1D;
9000af62:	231d      	movs	r3, #29
  pHeader[15]  = ' ';
9000af64:	73cf      	strb	r7, [r1, #15]
  pHeader[16]  = 0x10;
9000af66:	2710      	movs	r7, #16
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
9000af68:	f881 9019 	strb.w	r9, [r1, #25]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
9000af6c:	f04f 09fa 	mov.w	r9, #250	; 0xfa
  pHeader[4] = 0x00;
9000af70:	7108      	strb	r0, [r1, #4]
  pHeader[6] = 0x1D;
9000af72:	718b      	strb	r3, [r1, #6]
  pHeader[7] = 0x00;
9000af74:	71c8      	strb	r0, [r1, #7]
  pHeader[17]  = 0x00;
9000af76:	7448      	strb	r0, [r1, #17]
  pHeader[18]  = 0x00;
9000af78:	7488      	strb	r0, [r1, #18]
  pHeader[19]  = 0x00;
9000af7a:	74c8      	strb	r0, [r1, #19]
  pHeader[21]  = 0x00;
9000af7c:	7548      	strb	r0, [r1, #21]
  pHeader[23]  = 0x00;
9000af7e:	75c8      	strb	r0, [r1, #23]
  pHeader[5] = 0x4C;
9000af80:	f881 c005 	strb.w	ip, [r1, #5]
  pHeader[14]  = 't';
9000af84:	f881 e00e 	strb.w	lr, [r1, #14]
  pHeader[16]  = 0x10;
9000af88:	740f      	strb	r7, [r1, #16]
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
9000af8a:	758d      	strb	r5, [r1, #22]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
9000af8c:	7688      	strb	r0, [r1, #26]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
9000af8e:	f881 901d 	strb.w	r9, [r1, #29]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
9000af92:	f04f 0904 	mov.w	r9, #4
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
  pHeader[35]  = 0x00;
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
9000af96:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pHeader[37]  = 'a';
9000af9a:	2461      	movs	r4, #97	; 0x61
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
9000af9c:	76c8      	strb	r0, [r1, #27]
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
9000af9e:	7708      	strb	r0, [r1, #28]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
9000afa0:	7788      	strb	r0, [r1, #30]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
9000afa2:	77c8      	strb	r0, [r1, #31]
  pHeader[33]  = 0x00;
9000afa4:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pHeader[35]  = 0x00;
9000afa8:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  pHeader[37]  = 'a';
9000afac:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pHeader[38]  = 't';
  pHeader[39]  = 'a';
9000afb0:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
9000afb4:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
  pHeader[41]  = 0x4C;
  pHeader[42]  = 0x1D;
9000afb8:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
9000afbc:	466b      	mov	r3, sp
  pHeader[43]  = 0x00;
9000afbe:	f881 002b 	strb.w	r0, [r1, #43]	; 0x2b
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
9000afc2:	f881 9020 	strb.w	r9, [r1, #32]
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
9000afc6:	4870      	ldr	r0, [pc, #448]	; (9000b188 <AUDIO_REC_Start+0x2b4>)
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
9000afc8:	f881 7022 	strb.w	r7, [r1, #34]	; 0x22
  pHeader[38]  = 't';
9000afcc:	f881 e026 	strb.w	lr, [r1, #38]	; 0x26
  pHeader[41]  = 0x4C;
9000afd0:	f881 c029 	strb.w	ip, [r1, #41]	; 0x29
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
9000afd4:	f7fe f825 	bl	90009022 <f_write>
9000afd8:	4604      	mov	r4, r0
9000afda:	2800      	cmp	r0, #0
9000afdc:	d18a      	bne.n	9000aef4 <AUDIO_REC_Start+0x20>
      AudioState = AUDIO_STATE_PRERECORD;
9000afde:	4b6f      	ldr	r3, [pc, #444]	; (9000b19c <AUDIO_REC_Start+0x2c8>)
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
9000afe0:	f04f 30ff 	mov.w	r0, #4294967295
      AudioState = AUDIO_STATE_PRERECORD;
9000afe4:	f883 9000 	strb.w	r9, [r3]
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
9000afe8:	f7f6 fc2e 	bl	90001848 <BSP_LCD_SetTextColor>
      sprintf((char *)str, "Recording file: %s", 
9000afec:	4a65      	ldr	r2, [pc, #404]	; (9000b184 <AUDIO_REC_Start+0x2b0>)
9000afee:	eb0d 0009 	add.w	r0, sp, r9
9000aff2:	496b      	ldr	r1, [pc, #428]	; (9000b1a0 <AUDIO_REC_Start+0x2cc>)
9000aff4:	f000 fdcc 	bl	9000bb90 <siprintf>
      BSP_LCD_ClearStringLine(4);
9000aff8:	4648      	mov	r0, r9
9000affa:	f7f6 ff55 	bl	90001ea8 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(4, str);
9000affe:	eb0d 0109 	add.w	r1, sp, r9
9000b002:	4648      	mov	r0, r9
9000b004:	f7f6 fdb6 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN); 
9000b008:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000b00c:	f7f6 fc1c 	bl	90001848 <BSP_LCD_SetTextColor>
      sprintf((char *)str,  "Sample rate : %d Hz", (int)DEFAULT_AUDIO_IN_FREQ);
9000b010:	4632      	mov	r2, r6
9000b012:	4964      	ldr	r1, [pc, #400]	; (9000b1a4 <AUDIO_REC_Start+0x2d0>)
9000b014:	eb0d 0009 	add.w	r0, sp, r9
9000b018:	f000 fdba 	bl	9000bb90 <siprintf>
      BSP_LCD_ClearStringLine(6);
9000b01c:	2006      	movs	r0, #6
9000b01e:	f7f6 ff43 	bl	90001ea8 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(6, str);
9000b022:	eb0d 0109 	add.w	r1, sp, r9
9000b026:	2006      	movs	r0, #6
9000b028:	f7f6 fda4 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str,  "Channels number : %d", (int)DEFAULT_AUDIO_IN_CHANNEL_NBR);
9000b02c:	462a      	mov	r2, r5
9000b02e:	495e      	ldr	r1, [pc, #376]	; (9000b1a8 <AUDIO_REC_Start+0x2d4>)
9000b030:	eb0d 0009 	add.w	r0, sp, r9
9000b034:	f000 fdac 	bl	9000bb90 <siprintf>
      BSP_LCD_ClearStringLine(7);      
9000b038:	2007      	movs	r0, #7
9000b03a:	f7f6 ff35 	bl	90001ea8 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
9000b03e:	eb0d 0109 	add.w	r1, sp, r9
9000b042:	2007      	movs	r0, #7
9000b044:	f7f6 fd96 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str,  "Volume : %d ", (int)uwVolume_rec);
9000b048:	f8d8 2000 	ldr.w	r2, [r8]
9000b04c:	4957      	ldr	r1, [pc, #348]	; (9000b1ac <AUDIO_REC_Start+0x2d8>)
9000b04e:	eb0d 0009 	add.w	r0, sp, r9
9000b052:	f000 fd9d 	bl	9000bb90 <siprintf>
      BSP_LCD_ClearStringLine(7);
9000b056:	2007      	movs	r0, #7
9000b058:	f7f6 ff26 	bl	90001ea8 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
9000b05c:	eb0d 0109 	add.w	r1, sp, r9
9000b060:	2007      	movs	r0, #7
9000b062:	f7f6 fd87 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str, "File Size :");
9000b066:	4952      	ldr	r1, [pc, #328]	; (9000b1b0 <AUDIO_REC_Start+0x2dc>)
9000b068:	eb0d 0009 	add.w	r0, sp, r9
9000b06c:	f000 ff21 	bl	9000beb2 <strcpy>
      BSP_LCD_ClearStringLine(8);
9000b070:	2008      	movs	r0, #8
9000b072:	f7f6 ff19 	bl	90001ea8 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(8, str);
9000b076:	eb0d 0109 	add.w	r1, sp, r9
9000b07a:	2008      	movs	r0, #8
9000b07c:	f7f6 fd7a 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
  * @param  None
  * @retval None
  */
static void AUDIO_REC_DisplayButtons(void)
{
  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
9000b080:	484c      	ldr	r0, [pc, #304]	; (9000b1b4 <AUDIO_REC_Start+0x2e0>)
9000b082:	f7f6 fbf9 	bl	90001878 <BSP_LCD_SetFont>
  BSP_LCD_ClearStringLine(13);            /* Clear dedicated zone */
9000b086:	200d      	movs	r0, #13
9000b088:	f7f6 ff0e 	bl	90001ea8 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(14);
9000b08c:	200e      	movs	r0, #14
9000b08e:	f7f6 ff0b 	bl	90001ea8 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(15);
9000b092:	200f      	movs	r0, #15
9000b094:	f7f6 ff08 	bl	90001ea8 <BSP_LCD_ClearStringLine>

  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000b098:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000b09c:	f7f6 fbd4 	bl	90001848 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2, /* Record circle */
9000b0a0:	2214      	movs	r2, #20
9000b0a2:	21e8      	movs	r1, #232	; 0xe8
9000b0a4:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000b0a8:	f7f6 ff26 	bl	90001ef8 <BSP_LCD_FillCircle>
                     (TOUCH_RECORD_YMAX+TOUCH_RECORD_YMIN)/2,
                     (TOUCH_RECORD_XMAX-TOUCH_RECORD_XMIN)/2);
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);    /* Pause rectangles */
9000b0ac:	2328      	movs	r3, #40	; 0x28
9000b0ae:	220f      	movs	r2, #15
9000b0b0:	21d4      	movs	r1, #212	; 0xd4
9000b0b2:	207d      	movs	r0, #125	; 0x7d
9000b0b4:	f7f6 febc 	bl	90001e30 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000b0b8:	2328      	movs	r3, #40	; 0x28
9000b0ba:	220f      	movs	r2, #15
9000b0bc:	21d4      	movs	r1, #212	; 0xd4
9000b0be:	2091      	movs	r0, #145	; 0x91
9000b0c0:	f7f6 feb6 	bl	90001e30 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
9000b0c4:	2328      	movs	r3, #40	; 0x28
9000b0c6:	21d4      	movs	r1, #212	; 0xd4
9000b0c8:	20cd      	movs	r0, #205	; 0xcd
9000b0ca:	461a      	mov	r2, r3
9000b0cc:	f7f6 feb0 	bl	90001e30 <BSP_LCD_FillRect>
                   TOUCH_STOP_XMAX - TOUCH_STOP_XMIN,
                   TOUCH_STOP_YMAX - TOUCH_STOP_YMIN);
  BSP_LCD_DrawRect(TOUCH_VOL_MINUS_XMIN, TOUCH_VOL_MINUS_YMIN , /* VOl- rectangle */
9000b0d0:	2328      	movs	r3, #40	; 0x28
9000b0d2:	2232      	movs	r2, #50	; 0x32
9000b0d4:	21d4      	movs	r1, #212	; 0xd4
9000b0d6:	2014      	movs	r0, #20
9000b0d8:	f7f6 fc5e 	bl	90001998 <BSP_LCD_DrawRect>
                   TOUCH_VOL_MINUS_XMAX - TOUCH_VOL_MINUS_XMIN,
                   TOUCH_VOL_MINUS_YMAX - TOUCH_VOL_MINUS_YMIN);
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl-", LEFT_MODE);
9000b0dc:	f7f6 fbd8 	bl	90001890 <BSP_LCD_GetFont>
9000b0e0:	88c1      	ldrh	r1, [r0, #6]
9000b0e2:	2303      	movs	r3, #3
9000b0e4:	4a34      	ldr	r2, [pc, #208]	; (9000b1b8 <AUDIO_REC_Start+0x2e4>)
9000b0e6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
9000b0ea:	2018      	movs	r0, #24
9000b0ec:	0049      	lsls	r1, r1, #1
9000b0ee:	b289      	uxth	r1, r1
9000b0f0:	f7f6 fcea 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(TOUCH_VOL_PLUS_XMIN, TOUCH_VOL_PLUS_YMIN , /* VOl+ rectangle */
9000b0f4:	2328      	movs	r3, #40	; 0x28
9000b0f6:	2232      	movs	r2, #50	; 0x32
9000b0f8:	21d4      	movs	r1, #212	; 0xd4
9000b0fa:	f44f 70c9 	mov.w	r0, #402	; 0x192
9000b0fe:	f7f6 fc4b 	bl	90001998 <BSP_LCD_DrawRect>
                   TOUCH_VOL_PLUS_XMAX - TOUCH_VOL_PLUS_XMIN,
                   TOUCH_VOL_PLUS_YMAX - TOUCH_VOL_PLUS_YMIN);
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl+", RIGHT_MODE);
9000b102:	f7f6 fbc5 	bl	90001890 <BSP_LCD_GetFont>
9000b106:	88c1      	ldrh	r1, [r0, #6]
9000b108:	462b      	mov	r3, r5
9000b10a:	4a2c      	ldr	r2, [pc, #176]	; (9000b1bc <AUDIO_REC_Start+0x2e8>)
9000b10c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
9000b110:	2018      	movs	r0, #24
9000b112:	0049      	lsls	r1, r1, #1
9000b114:	b289      	uxth	r1, r1
9000b116:	f7f6 fcd7 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
9000b11a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
9000b11e:	f7f6 fb93 	bl	90001848 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000b122:	4827      	ldr	r0, [pc, #156]	; (9000b1c0 <AUDIO_REC_Start+0x2ec>)
9000b124:	f7f6 fba8 	bl	90001878 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAtLine(15, (uint8_t *)"Use record button to start record, stop to exit");
9000b128:	4926      	ldr	r1, [pc, #152]	; (9000b1c4 <AUDIO_REC_Start+0x2f0>)
9000b12a:	200f      	movs	r0, #15
9000b12c:	f7f6 fd22 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000b130:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000b134:	f7f6 fb88 	bl	90001848 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [     ]", LEFT_MODE);
9000b138:	f7f6 fbaa 	bl	90001890 <BSP_LCD_GetFont>
9000b13c:	88c1      	ldrh	r1, [r0, #6]
9000b13e:	2303      	movs	r3, #3
9000b140:	4a21      	ldr	r2, [pc, #132]	; (9000b1c8 <AUDIO_REC_Start+0x2f4>)
9000b142:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000b146:	20f7      	movs	r0, #247	; 0xf7
9000b148:	0049      	lsls	r1, r1, #1
9000b14a:	b289      	uxth	r1, r1
9000b14c:	f7f6 fcbc 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
        if(byteswritten != 0)
9000b150:	9b00      	ldr	r3, [sp, #0]
9000b152:	2b00      	cmp	r3, #0
9000b154:	f43f aece 	beq.w	9000aef4 <AUDIO_REC_Start+0x20>
          BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
9000b158:	462a      	mov	r2, r5
9000b15a:	4639      	mov	r1, r7
9000b15c:	4630      	mov	r0, r6
9000b15e:	f7f6 fad7 	bl	90001710 <BSP_AUDIO_IN_Init>
          BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
9000b162:	f44f 5110 	mov.w	r1, #9216	; 0x2400
9000b166:	4819      	ldr	r0, [pc, #100]	; (9000b1cc <AUDIO_REC_Start+0x2f8>)
9000b168:	f7f6 f996 	bl	90001498 <BSP_AUDIO_IN_Record>
          BufferCtl.fptr = byteswritten;
9000b16c:	4b18      	ldr	r3, [pc, #96]	; (9000b1d0 <AUDIO_REC_Start+0x2fc>)
9000b16e:	9a00      	ldr	r2, [sp, #0]
          BufferCtl.pcm_ptr = 0;
9000b170:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
          BufferCtl.fptr = byteswritten;
9000b174:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
          BufferCtl.offset = 0;
9000b178:	f8c3 4808 	str.w	r4, [r3, #2056]	; 0x808
          BufferCtl.wr_state = BUFFER_EMPTY;
9000b17c:	f883 4804 	strb.w	r4, [r3, #2052]	; 0x804
          return AUDIO_ERROR_NONE;
9000b180:	e6b9      	b.n	9000aef6 <AUDIO_REC_Start+0x22>
9000b182:	bf00      	nop
9000b184:	90011a1e 	.word	0x90011a1e
9000b188:	20001ba8 	.word	0x20001ba8
9000b18c:	20001dd8 	.word	0x20001dd8
9000b190:	001d4c00 	.word	0x001d4c00
9000b194:	00100004 	.word	0x00100004
9000b198:	20008994 	.word	0x20008994
9000b19c:	20001312 	.word	0x20001312
9000b1a0:	90011a27 	.word	0x90011a27
9000b1a4:	90011531 	.word	0x90011531
9000b1a8:	90011545 	.word	0x90011545
9000b1ac:	90011a3a 	.word	0x90011a3a
9000b1b0:	90011a47 	.word	0x90011a47
9000b1b4:	20000078 	.word	0x20000078
9000b1b8:	9001158d 	.word	0x9001158d
9000b1bc:	90011592 	.word	0x90011592
9000b1c0:	20000070 	.word	0x20000070
9000b1c4:	90011a53 	.word	0x90011a53
9000b1c8:	90011a83 	.word	0x90011a83
9000b1cc:	200089ec 	.word	0x200089ec
9000b1d0:	2000c9ec 	.word	0x2000c9ec
9000b1d4:	200000f8 	.word	0x200000f8

9000b1d8 <AUDIO_REC_Process>:
{
9000b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t byteswritten = 0;
9000b1da:	2300      	movs	r3, #0
{
9000b1dc:	b087      	sub	sp, #28
  switch(AudioState)
9000b1de:	4ca2      	ldr	r4, [pc, #648]	; (9000b468 <AUDIO_REC_Process+0x290>)
  uint32_t byteswritten = 0;
9000b1e0:	9301      	str	r3, [sp, #4]
  switch(AudioState)
9000b1e2:	7823      	ldrb	r3, [r4, #0]
9000b1e4:	3b01      	subs	r3, #1
9000b1e6:	2b0d      	cmp	r3, #13
9000b1e8:	d817      	bhi.n	9000b21a <AUDIO_REC_Process+0x42>
9000b1ea:	e8df f013 	tbh	[pc, r3, lsl #1]
9000b1ee:	0229      	.short	0x0229
9000b1f0:	00160016 	.word	0x00160016
9000b1f4:	0078000e 	.word	0x0078000e
9000b1f8:	00390039 	.word	0x00390039
9000b1fc:	00160016 	.word	0x00160016
9000b200:	01ad0159 	.word	0x01ad0159
9000b204:	020601da 	.word	0x020601da
9000b208:	0222      	.short	0x0222
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000b20a:	4d98      	ldr	r5, [pc, #608]	; (9000b46c <AUDIO_REC_Process+0x294>)
9000b20c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000b210:	2b01      	cmp	r3, #1
9000b212:	d104      	bne.n	9000b21e <AUDIO_REC_Process+0x46>
      BSP_TS_GetState(&TS_State);
9000b214:	4896      	ldr	r0, [pc, #600]	; (9000b470 <AUDIO_REC_Process+0x298>)
9000b216:	f7f7 fb5f 	bl	900028d8 <BSP_TS_GetState>
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
9000b21a:	2500      	movs	r5, #0
9000b21c:	e0df      	b.n	9000b3de <AUDIO_REC_Process+0x206>
      BSP_TS_GetState(&TS_State);
9000b21e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
9000b222:	f7f7 fb59 	bl	900028d8 <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
9000b226:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
9000b22a:	2a01      	cmp	r2, #1
9000b22c:	d13d      	bne.n	9000b2aa <AUDIO_REC_Process+0xd2>
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
9000b22e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
9000b230:	f1a3 01ce 	sub.w	r1, r3, #206	; 0xce
9000b234:	2926      	cmp	r1, #38	; 0x26
9000b236:	d807      	bhi.n	9000b248 <AUDIO_REC_Process+0x70>
9000b238:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
9000b23a:	3ad5      	subs	r2, #213	; 0xd5
9000b23c:	b292      	uxth	r2, r2
9000b23e:	2a26      	cmp	r2, #38	; 0x26
9000b240:	d835      	bhi.n	9000b2ae <AUDIO_REC_Process+0xd6>
      AudioState = AUDIO_STATE_STOP;
9000b242:	230a      	movs	r3, #10
          AudioState = AUDIO_STATE_PRERECORD;
9000b244:	7023      	strb	r3, [r4, #0]
9000b246:	e7e8      	b.n	9000b21a <AUDIO_REC_Process+0x42>
        else if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
9000b248:	f46f 7696 	mvn.w	r6, #300	; 0x12c
9000b24c:	1999      	adds	r1, r3, r6
9000b24e:	2926      	cmp	r1, #38	; 0x26
9000b250:	d808      	bhi.n	9000b264 <AUDIO_REC_Process+0x8c>
9000b252:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000b254:	3bd5      	subs	r3, #213	; 0xd5
9000b256:	b29b      	uxth	r3, r3
9000b258:	2b26      	cmp	r3, #38	; 0x26
9000b25a:	d83b      	bhi.n	9000b2d4 <AUDIO_REC_Process+0xfc>
          display_update = 1;
9000b25c:	4b85      	ldr	r3, [pc, #532]	; (9000b474 <AUDIO_REC_Process+0x29c>)
9000b25e:	605a      	str	r2, [r3, #4]
    AudioState = AUDIO_STATE_RECORD;
9000b260:	2305      	movs	r3, #5
9000b262:	e7ef      	b.n	9000b244 <AUDIO_REC_Process+0x6c>
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
9000b264:	f1a3 0215 	sub.w	r2, r3, #21
9000b268:	2a30      	cmp	r2, #48	; 0x30
9000b26a:	d820      	bhi.n	9000b2ae <AUDIO_REC_Process+0xd6>
9000b26c:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000b26e:	3bd5      	subs	r3, #213	; 0xd5
9000b270:	b29b      	uxth	r3, r3
9000b272:	2b26      	cmp	r3, #38	; 0x26
9000b274:	d82e      	bhi.n	9000b2d4 <AUDIO_REC_Process+0xfc>
          AudioState = AUDIO_STATE_VOLUME_DOWN;
9000b276:	230e      	movs	r3, #14
9000b278:	7023      	strb	r3, [r4, #0]
          if(uwVolume_rec >= 5)
9000b27a:	4b7e      	ldr	r3, [pc, #504]	; (9000b474 <AUDIO_REC_Process+0x29c>)
9000b27c:	681a      	ldr	r2, [r3, #0]
9000b27e:	2a04      	cmp	r2, #4
9000b280:	d902      	bls.n	9000b288 <AUDIO_REC_Process+0xb0>
        	  uwVolume_rec -= 5;
9000b282:	681a      	ldr	r2, [r3, #0]
9000b284:	3a05      	subs	r2, #5
        	  uwVolume_rec += 5;
9000b286:	601a      	str	r2, [r3, #0]
          sprintf((char *)str,  "Volume : %d ", (int)uwVolume_rec);
9000b288:	4d7a      	ldr	r5, [pc, #488]	; (9000b474 <AUDIO_REC_Process+0x29c>)
9000b28a:	a802      	add	r0, sp, #8
9000b28c:	497a      	ldr	r1, [pc, #488]	; (9000b478 <AUDIO_REC_Process+0x2a0>)
9000b28e:	682a      	ldr	r2, [r5, #0]
9000b290:	f000 fc7e 	bl	9000bb90 <siprintf>
          BSP_LCD_ClearStringLine(7);
9000b294:	2007      	movs	r0, #7
9000b296:	f7f6 fe07 	bl	90001ea8 <BSP_LCD_ClearStringLine>
          BSP_LCD_DisplayStringAtLine(7, str);
9000b29a:	2007      	movs	r0, #7
9000b29c:	a902      	add	r1, sp, #8
9000b29e:	f7f6 fc69 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
          BSP_AUDIO_IN_SetVolume(uwVolume_rec);
9000b2a2:	6828      	ldr	r0, [r5, #0]
9000b2a4:	b2c0      	uxtb	r0, r0
9000b2a6:	f7f6 f92b 	bl	90001500 <BSP_AUDIO_IN_SetVolume>
          AudioState = AUDIO_STATE_PRERECORD;
9000b2aa:	2304      	movs	r3, #4
9000b2ac:	e7ca      	b.n	9000b244 <AUDIO_REC_Process+0x6c>
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
9000b2ae:	f46f 70c9 	mvn.w	r0, #402	; 0x192
9000b2b2:	4403      	add	r3, r0
9000b2b4:	2b30      	cmp	r3, #48	; 0x30
9000b2b6:	d80d      	bhi.n	9000b2d4 <AUDIO_REC_Process+0xfc>
9000b2b8:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000b2ba:	3bd5      	subs	r3, #213	; 0xd5
9000b2bc:	b29b      	uxth	r3, r3
9000b2be:	2b26      	cmp	r3, #38	; 0x26
9000b2c0:	d808      	bhi.n	9000b2d4 <AUDIO_REC_Process+0xfc>
          AudioState = AUDIO_STATE_VOLUME_UP;
9000b2c2:	230d      	movs	r3, #13
9000b2c4:	7023      	strb	r3, [r4, #0]
          if(uwVolume_rec <= 95)
9000b2c6:	4b6b      	ldr	r3, [pc, #428]	; (9000b474 <AUDIO_REC_Process+0x29c>)
9000b2c8:	681a      	ldr	r2, [r3, #0]
9000b2ca:	2a5f      	cmp	r2, #95	; 0x5f
9000b2cc:	d8dc      	bhi.n	9000b288 <AUDIO_REC_Process+0xb0>
        	  uwVolume_rec += 5;
9000b2ce:	681a      	ldr	r2, [r3, #0]
9000b2d0:	3205      	adds	r2, #5
9000b2d2:	e7d8      	b.n	9000b286 <AUDIO_REC_Process+0xae>
        if ((AudioState == AUDIO_STATE_VOLUME_DOWN) || (AudioState == AUDIO_STATE_VOLUME_UP))
9000b2d4:	7823      	ldrb	r3, [r4, #0]
9000b2d6:	3b0d      	subs	r3, #13
9000b2d8:	2b01      	cmp	r3, #1
9000b2da:	d89e      	bhi.n	9000b21a <AUDIO_REC_Process+0x42>
9000b2dc:	e7d4      	b.n	9000b288 <AUDIO_REC_Process+0xb0>
    if (display_update)
9000b2de:	4f65      	ldr	r7, [pc, #404]	; (9000b474 <AUDIO_REC_Process+0x29c>)
9000b2e0:	687b      	ldr	r3, [r7, #4]
9000b2e2:	b1eb      	cbz	r3, 9000b320 <AUDIO_REC_Process+0x148>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red record circle */
9000b2e4:	4865      	ldr	r0, [pc, #404]	; (9000b47c <AUDIO_REC_Process+0x2a4>)
9000b2e6:	f7f6 faaf 	bl	90001848 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000b2ea:	2214      	movs	r2, #20
9000b2ec:	21e8      	movs	r1, #232	; 0xe8
9000b2ee:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000b2f2:	f7f6 fe01 	bl	90001ef8 <BSP_LCD_FillCircle>
      BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000b2f6:	4862      	ldr	r0, [pc, #392]	; (9000b480 <AUDIO_REC_Process+0x2a8>)
9000b2f8:	f7f6 fabe 	bl	90001878 <BSP_LCD_SetFont>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000b2fc:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000b300:	f7f6 faa2 	bl	90001848 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [RECORD]", LEFT_MODE);
9000b304:	f7f6 fac4 	bl	90001890 <BSP_LCD_GetFont>
9000b308:	88c1      	ldrh	r1, [r0, #6]
9000b30a:	2303      	movs	r3, #3
9000b30c:	4a5d      	ldr	r2, [pc, #372]	; (9000b484 <AUDIO_REC_Process+0x2ac>)
9000b30e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000b312:	20f7      	movs	r0, #247	; 0xf7
9000b314:	0049      	lsls	r1, r1, #1
9000b316:	b289      	uxth	r1, r1
9000b318:	f7f6 fbd6 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
      display_update = 0;
9000b31c:	2300      	movs	r3, #0
9000b31e:	607b      	str	r3, [r7, #4]
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000b320:	4d52      	ldr	r5, [pc, #328]	; (9000b46c <AUDIO_REC_Process+0x294>)
9000b322:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
      BSP_TS_GetState(&TS_State);
9000b326:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000b32a:	2b01      	cmp	r3, #1
9000b32c:	d10c      	bne.n	9000b348 <AUDIO_REC_Process+0x170>
      BSP_TS_GetState(&TS_State);
9000b32e:	f7f7 fad3 	bl	900028d8 <BSP_TS_GetState>
    if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
9000b332:	4955      	ldr	r1, [pc, #340]	; (9000b488 <AUDIO_REC_Process+0x2b0>)
9000b334:	4b55      	ldr	r3, [pc, #340]	; (9000b48c <AUDIO_REC_Process+0x2b4>)
9000b336:	f501 4680 	add.w	r6, r1, #16384	; 0x4000
9000b33a:	f8d6 280c 	ldr.w	r2, [r6, #2060]	; 0x80c
9000b33e:	429a      	cmp	r2, r3
9000b340:	d937      	bls.n	9000b3b2 <AUDIO_REC_Process+0x1da>
      display_update = 1;
9000b342:	2301      	movs	r3, #1
9000b344:	607b      	str	r3, [r7, #4]
9000b346:	e77c      	b.n	9000b242 <AUDIO_REC_Process+0x6a>
      BSP_TS_GetState(&TS_State);
9000b348:	f7f7 fac6 	bl	900028d8 <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
9000b34c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000b350:	2b01      	cmp	r3, #1
9000b352:	d1ee      	bne.n	9000b332 <AUDIO_REC_Process+0x15a>
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
9000b354:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
9000b356:	f1a3 02ce 	sub.w	r2, r3, #206	; 0xce
9000b35a:	2a26      	cmp	r2, #38	; 0x26
9000b35c:	d807      	bhi.n	9000b36e <AUDIO_REC_Process+0x196>
9000b35e:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
9000b360:	3ad5      	subs	r2, #213	; 0xd5
9000b362:	b292      	uxth	r2, r2
9000b364:	2a26      	cmp	r2, #38	; 0x26
9000b366:	d818      	bhi.n	9000b39a <AUDIO_REC_Process+0x1c2>
          AudioState = AUDIO_STATE_STOP;
9000b368:	230a      	movs	r3, #10
          AudioState = AUDIO_STATE_VOLUME_UP;
9000b36a:	7023      	strb	r3, [r4, #0]
9000b36c:	e7e1      	b.n	9000b332 <AUDIO_REC_Process+0x15a>
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
9000b36e:	f1a3 027e 	sub.w	r2, r3, #126	; 0x7e
9000b372:	2a16      	cmp	r2, #22
9000b374:	d806      	bhi.n	9000b384 <AUDIO_REC_Process+0x1ac>
9000b376:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000b378:	3bd5      	subs	r3, #213	; 0xd5
9000b37a:	b29b      	uxth	r3, r3
9000b37c:	2b26      	cmp	r3, #38	; 0x26
9000b37e:	d8d8      	bhi.n	9000b332 <AUDIO_REC_Process+0x15a>
          AudioState = AUDIO_STATE_PAUSE;
9000b380:	230b      	movs	r3, #11
9000b382:	e7f2      	b.n	9000b36a <AUDIO_REC_Process+0x192>
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
9000b384:	f1a3 0215 	sub.w	r2, r3, #21
9000b388:	2a30      	cmp	r2, #48	; 0x30
9000b38a:	d806      	bhi.n	9000b39a <AUDIO_REC_Process+0x1c2>
9000b38c:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000b38e:	3bd5      	subs	r3, #213	; 0xd5
9000b390:	b29b      	uxth	r3, r3
9000b392:	2b26      	cmp	r3, #38	; 0x26
9000b394:	d8cd      	bhi.n	9000b332 <AUDIO_REC_Process+0x15a>
          AudioState = AUDIO_STATE_VOLUME_DOWN;
9000b396:	230e      	movs	r3, #14
9000b398:	e7e7      	b.n	9000b36a <AUDIO_REC_Process+0x192>
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
9000b39a:	f46f 71c9 	mvn.w	r1, #402	; 0x192
9000b39e:	440b      	add	r3, r1
9000b3a0:	2b30      	cmp	r3, #48	; 0x30
9000b3a2:	d8c6      	bhi.n	9000b332 <AUDIO_REC_Process+0x15a>
9000b3a4:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000b3a6:	3bd5      	subs	r3, #213	; 0xd5
9000b3a8:	b29b      	uxth	r3, r3
9000b3aa:	2b26      	cmp	r3, #38	; 0x26
9000b3ac:	d8c1      	bhi.n	9000b332 <AUDIO_REC_Process+0x15a>
          AudioState = AUDIO_STATE_VOLUME_UP;
9000b3ae:	230d      	movs	r3, #13
9000b3b0:	e7db      	b.n	9000b36a <AUDIO_REC_Process+0x192>
    if(BufferCtl.wr_state == BUFFER_FULL)
9000b3b2:	f896 5804 	ldrb.w	r5, [r6, #2052]	; 0x804
9000b3b6:	2d01      	cmp	r5, #1
9000b3b8:	d11c      	bne.n	9000b3f4 <AUDIO_REC_Process+0x21c>
      if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset), 
9000b3ba:	f8d6 0808 	ldr.w	r0, [r6, #2056]	; 0x808
9000b3be:	ab01      	add	r3, sp, #4
9000b3c0:	f44f 5210 	mov.w	r2, #9216	; 0x2400
9000b3c4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
9000b3c8:	4831      	ldr	r0, [pc, #196]	; (9000b490 <AUDIO_REC_Process+0x2b8>)
9000b3ca:	f7fd fe2a 	bl	90009022 <f_write>
9000b3ce:	b148      	cbz	r0, 9000b3e4 <AUDIO_REC_Process+0x20c>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000b3d0:	482a      	ldr	r0, [pc, #168]	; (9000b47c <AUDIO_REC_Process+0x2a4>)
9000b3d2:	f7f6 fa39 	bl	90001848 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"RECORD FAIL");
9000b3d6:	492f      	ldr	r1, [pc, #188]	; (9000b494 <AUDIO_REC_Process+0x2bc>)
9000b3d8:	200e      	movs	r0, #14
9000b3da:	f7f6 fbcb 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
}
9000b3de:	4628      	mov	r0, r5
9000b3e0:	b007      	add	sp, #28
9000b3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      BufferCtl.fptr += byteswritten;
9000b3e4:	f8d6 380c 	ldr.w	r3, [r6, #2060]	; 0x80c
9000b3e8:	9a01      	ldr	r2, [sp, #4]
      BufferCtl.wr_state =  BUFFER_EMPTY;
9000b3ea:	f886 0804 	strb.w	r0, [r6, #2052]	; 0x804
      BufferCtl.fptr += byteswritten;
9000b3ee:	4413      	add	r3, r2
9000b3f0:	f8c6 380c 	str.w	r3, [r6, #2060]	; 0x80c
    elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2); 
9000b3f4:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
9000b3f8:	f8d6 380c 	ldr.w	r3, [r6, #2060]	; 0x80c
9000b3fc:	fbb3 f3f2 	udiv	r3, r3, r2
    if(prev_elapsed_time != elapsed_time)
9000b400:	68ba      	ldr	r2, [r7, #8]
9000b402:	429a      	cmp	r2, r3
9000b404:	f43f af09 	beq.w	9000b21a <AUDIO_REC_Process+0x42>
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
9000b408:	213c      	movs	r1, #60	; 0x3c
      prev_elapsed_time = elapsed_time;
9000b40a:	60bb      	str	r3, [r7, #8]
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
9000b40c:	a802      	add	r0, sp, #8
9000b40e:	fbb3 f2f1 	udiv	r2, r3, r1
9000b412:	fb01 3312 	mls	r3, r1, r2, r3
9000b416:	4920      	ldr	r1, [pc, #128]	; (9000b498 <AUDIO_REC_Process+0x2c0>)
9000b418:	f000 fbba 	bl	9000bb90 <siprintf>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
9000b41c:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000b420:	f7f6 fa12 	bl	90001848 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(263, LINE(8), str, LEFT_MODE);
9000b424:	f7f6 fa34 	bl	90001890 <BSP_LCD_GetFont>
9000b428:	88c1      	ldrh	r1, [r0, #6]
9000b42a:	2303      	movs	r3, #3
9000b42c:	aa02      	add	r2, sp, #8
9000b42e:	00c9      	lsls	r1, r1, #3
9000b430:	f240 1007 	movw	r0, #263	; 0x107
9000b434:	b289      	uxth	r1, r1
9000b436:	f7f6 fb47 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
      sprintf((char *)str, "%4d KB", (int)((int32_t)BufferCtl.fptr/1024));
9000b43a:	f8d6 280c 	ldr.w	r2, [r6, #2060]	; 0x80c
9000b43e:	4917      	ldr	r1, [pc, #92]	; (9000b49c <AUDIO_REC_Process+0x2c4>)
9000b440:	a802      	add	r0, sp, #8
9000b442:	2a00      	cmp	r2, #0
9000b444:	bfb8      	it	lt
9000b446:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
9000b44a:	1292      	asrs	r2, r2, #10
9000b44c:	f000 fba0 	bl	9000bb90 <siprintf>
      BSP_LCD_DisplayStringAt(83, LINE(8), str, LEFT_MODE);
9000b450:	f7f6 fa1e 	bl	90001890 <BSP_LCD_GetFont>
9000b454:	88c1      	ldrh	r1, [r0, #6]
9000b456:	2303      	movs	r3, #3
9000b458:	aa02      	add	r2, sp, #8
9000b45a:	00c9      	lsls	r1, r1, #3
9000b45c:	2053      	movs	r0, #83	; 0x53
9000b45e:	b289      	uxth	r1, r1
9000b460:	f7f6 fb32 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
9000b464:	e6d9      	b.n	9000b21a <AUDIO_REC_Process+0x42>
9000b466:	bf00      	nop
9000b468:	20001312 	.word	0x20001312
9000b46c:	20008994 	.word	0x20008994
9000b470:	200089c0 	.word	0x200089c0
9000b474:	200000f8 	.word	0x200000f8
9000b478:	90011a3a 	.word	0x90011a3a
9000b47c:	ffff0000 	.word	0xffff0000
9000b480:	20000070 	.word	0x20000070
9000b484:	90011a8d 	.word	0x90011a8d
9000b488:	200089ec 	.word	0x200089ec
9000b48c:	001d4bff 	.word	0x001d4bff
9000b490:	20001ba8 	.word	0x20001ba8
9000b494:	90011a98 	.word	0x90011a98
9000b498:	9001156c 	.word	0x9001156c
9000b49c:	90011aa4 	.word	0x90011aa4
    BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
9000b4a0:	2002      	movs	r0, #2
9000b4a2:	f7f6 f803 	bl	900014ac <BSP_AUDIO_IN_Stop>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);   /* Display blue cyan record circle */
9000b4a6:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000b4aa:	f7f6 f9cd 	bl	90001848 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000b4ae:	2214      	movs	r2, #20
9000b4b0:	21e8      	movs	r1, #232	; 0xe8
9000b4b2:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000b4b6:	f7f6 fd1f 	bl	90001ef8 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000b4ba:	4872      	ldr	r0, [pc, #456]	; (9000b684 <AUDIO_REC_Process+0x4ac>)
9000b4bc:	f7f6 f9c4 	bl	90001848 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
9000b4c0:	2328      	movs	r3, #40	; 0x28
9000b4c2:	21d4      	movs	r1, #212	; 0xd4
9000b4c4:	20cd      	movs	r0, #205	; 0xcd
9000b4c6:	461a      	mov	r2, r3
9000b4c8:	f7f6 fcb2 	bl	90001e30 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000b4cc:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000b4d0:	f7f6 f9ba 	bl	90001848 <BSP_LCD_SetTextColor>
    display_update = 1;
9000b4d4:	4b6c      	ldr	r3, [pc, #432]	; (9000b688 <AUDIO_REC_Process+0x4b0>)
9000b4d6:	2201      	movs	r2, #1
    HAL_Delay(150);
9000b4d8:	2096      	movs	r0, #150	; 0x96
    display_update = 1;
9000b4da:	605a      	str	r2, [r3, #4]
    HAL_Delay(150);
9000b4dc:	f7f7 faf6 	bl	90002acc <HAL_Delay>
    if(f_lseek(&WavFile, 0) == FR_OK)
9000b4e0:	2100      	movs	r1, #0
9000b4e2:	486a      	ldr	r0, [pc, #424]	; (9000b68c <AUDIO_REC_Process+0x4b4>)
9000b4e4:	f7fd febf 	bl	90009266 <f_lseek>
9000b4e8:	b9f0      	cbnz	r0, 9000b528 <AUDIO_REC_Process+0x350>
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
9000b4ea:	4a69      	ldr	r2, [pc, #420]	; (9000b690 <AUDIO_REC_Process+0x4b8>)
9000b4ec:	4969      	ldr	r1, [pc, #420]	; (9000b694 <AUDIO_REC_Process+0x4bc>)
9000b4ee:	f8d2 380c 	ldr.w	r3, [r2, #2060]	; 0x80c
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
9000b4f2:	0a18      	lsrs	r0, r3, #8
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
9000b4f4:	710b      	strb	r3, [r1, #4]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
9000b4f6:	7148      	strb	r0, [r1, #5]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
9000b4f8:	0c18      	lsrs	r0, r3, #16
9000b4fa:	7188      	strb	r0, [r1, #6]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
9000b4fc:	0e18      	lsrs	r0, r3, #24
  BufferCtl.fptr -=44;
9000b4fe:	3b2c      	subs	r3, #44	; 0x2c
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
9000b500:	71c8      	strb	r0, [r1, #7]
  BufferCtl.fptr -=44;
9000b502:	f8c2 380c 	str.w	r3, [r2, #2060]	; 0x80c
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
9000b506:	0a1a      	lsrs	r2, r3, #8
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
9000b508:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
9000b50c:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
9000b510:	0c1a      	lsrs	r2, r3, #16
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
9000b512:	0e1b      	lsrs	r3, r3, #24
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
9000b514:	485d      	ldr	r0, [pc, #372]	; (9000b68c <AUDIO_REC_Process+0x4b4>)
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
9000b516:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
9000b51a:	222c      	movs	r2, #44	; 0x2c
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
9000b51c:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
9000b520:	ab01      	add	r3, sp, #4
9000b522:	f7fd fd7e 	bl	90009022 <f_write>
9000b526:	b168      	cbz	r0, 9000b544 <AUDIO_REC_Process+0x36c>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000b528:	4856      	ldr	r0, [pc, #344]	; (9000b684 <AUDIO_REC_Process+0x4ac>)
        audio_error = AUDIO_ERROR_IO;
9000b52a:	2501      	movs	r5, #1
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000b52c:	f7f6 f98c 	bl	90001848 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"RECORD FAIL");          
9000b530:	4959      	ldr	r1, [pc, #356]	; (9000b698 <AUDIO_REC_Process+0x4c0>)
9000b532:	200e      	movs	r0, #14
9000b534:	f7f6 fb1e 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
    AudioState = AUDIO_STATE_IDLE;      
9000b538:	2300      	movs	r3, #0
    f_close(&WavFile);
9000b53a:	4854      	ldr	r0, [pc, #336]	; (9000b68c <AUDIO_REC_Process+0x4b4>)
    AudioState = AUDIO_STATE_IDLE;      
9000b53c:	7023      	strb	r3, [r4, #0]
    f_close(&WavFile);
9000b53e:	f7fd fe81 	bl	90009244 <f_close>
    break;
9000b542:	e74c      	b.n	9000b3de <AUDIO_REC_Process+0x206>
        audio_error = AUDIO_ERROR_EOF;
9000b544:	2502      	movs	r5, #2
9000b546:	e7f7      	b.n	9000b538 <AUDIO_REC_Process+0x360>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Displays red pause rectangles */
9000b548:	484e      	ldr	r0, [pc, #312]	; (9000b684 <AUDIO_REC_Process+0x4ac>)
9000b54a:	f7f6 f97d 	bl	90001848 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000b54e:	2328      	movs	r3, #40	; 0x28
9000b550:	220f      	movs	r2, #15
9000b552:	21d4      	movs	r1, #212	; 0xd4
9000b554:	207d      	movs	r0, #125	; 0x7d
9000b556:	f7f6 fc6b 	bl	90001e30 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000b55a:	2328      	movs	r3, #40	; 0x28
9000b55c:	220f      	movs	r2, #15
9000b55e:	21d4      	movs	r1, #212	; 0xd4
9000b560:	2091      	movs	r0, #145	; 0x91
9000b562:	f7f6 fc65 	bl	90001e30 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);   /* Display blue cyan record circle */
9000b566:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000b56a:	f7f6 f96d 	bl	90001848 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000b56e:	2214      	movs	r2, #20
9000b570:	21e8      	movs	r1, #232	; 0xe8
9000b572:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000b576:	f7f6 fcbf 	bl	90001ef8 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000b57a:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000b57e:	f7f6 f963 	bl	90001848 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [PAUSE] ", LEFT_MODE);    
9000b582:	f7f6 f985 	bl	90001890 <BSP_LCD_GetFont>
9000b586:	88c1      	ldrh	r1, [r0, #6]
9000b588:	2303      	movs	r3, #3
9000b58a:	4a44      	ldr	r2, [pc, #272]	; (9000b69c <AUDIO_REC_Process+0x4c4>)
9000b58c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000b590:	20f7      	movs	r0, #247	; 0xf7
9000b592:	0049      	lsls	r1, r1, #1
9000b594:	b289      	uxth	r1, r1
9000b596:	f7f6 fa97 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
    BSP_AUDIO_IN_Pause();
9000b59a:	f7f5 ffa1 	bl	900014e0 <BSP_AUDIO_IN_Pause>
    AudioState = AUDIO_STATE_WAIT;
9000b59e:	2301      	movs	r3, #1
9000b5a0:	e650      	b.n	9000b244 <AUDIO_REC_Process+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);    /* Displays blue cyan pause rectangles */
9000b5a2:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000b5a6:	f7f6 f94f 	bl	90001848 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000b5aa:	2328      	movs	r3, #40	; 0x28
9000b5ac:	220f      	movs	r2, #15
9000b5ae:	21d4      	movs	r1, #212	; 0xd4
9000b5b0:	207d      	movs	r0, #125	; 0x7d
9000b5b2:	f7f6 fc3d 	bl	90001e30 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000b5b6:	2328      	movs	r3, #40	; 0x28
9000b5b8:	220f      	movs	r2, #15
9000b5ba:	21d4      	movs	r1, #212	; 0xd4
9000b5bc:	2091      	movs	r0, #145	; 0x91
9000b5be:	f7f6 fc37 	bl	90001e30 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red record circle */
9000b5c2:	4830      	ldr	r0, [pc, #192]	; (9000b684 <AUDIO_REC_Process+0x4ac>)
9000b5c4:	f7f6 f940 	bl	90001848 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000b5c8:	2214      	movs	r2, #20
9000b5ca:	21e8      	movs	r1, #232	; 0xe8
9000b5cc:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000b5d0:	f7f6 fc92 	bl	90001ef8 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000b5d4:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000b5d8:	f7f6 f936 	bl	90001848 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [RECORD]", LEFT_MODE);   
9000b5dc:	f7f6 f958 	bl	90001890 <BSP_LCD_GetFont>
9000b5e0:	88c1      	ldrh	r1, [r0, #6]
9000b5e2:	2303      	movs	r3, #3
9000b5e4:	4a2e      	ldr	r2, [pc, #184]	; (9000b6a0 <AUDIO_REC_Process+0x4c8>)
9000b5e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000b5ea:	20f7      	movs	r0, #247	; 0xf7
9000b5ec:	0049      	lsls	r1, r1, #1
9000b5ee:	b289      	uxth	r1, r1
9000b5f0:	f7f6 fa6a 	bl	90001ac8 <BSP_LCD_DisplayStringAt>
    BSP_AUDIO_IN_Resume();
9000b5f4:	f7f5 ff7c 	bl	900014f0 <BSP_AUDIO_IN_Resume>
    AudioState = AUDIO_STATE_RECORD;
9000b5f8:	e632      	b.n	9000b260 <AUDIO_REC_Process+0x88>
    if(uwVolume_rec <= 95)
9000b5fa:	4d23      	ldr	r5, [pc, #140]	; (9000b688 <AUDIO_REC_Process+0x4b0>)
9000b5fc:	682b      	ldr	r3, [r5, #0]
9000b5fe:	2b5f      	cmp	r3, #95	; 0x5f
9000b600:	d802      	bhi.n	9000b608 <AUDIO_REC_Process+0x430>
    	uwVolume_rec += 5;
9000b602:	682b      	ldr	r3, [r5, #0]
9000b604:	3305      	adds	r3, #5
    	uwVolume_rec -= 5;
9000b606:	602b      	str	r3, [r5, #0]
    sprintf((char *)str,  "Volume : %d ", (int)uwVolume_rec);
9000b608:	682a      	ldr	r2, [r5, #0]
9000b60a:	a802      	add	r0, sp, #8
9000b60c:	4925      	ldr	r1, [pc, #148]	; (9000b6a4 <AUDIO_REC_Process+0x4cc>)
9000b60e:	f000 fabf 	bl	9000bb90 <siprintf>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000b612:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000b616:	f7f6 f917 	bl	90001848 <BSP_LCD_SetTextColor>
    BSP_LCD_ClearStringLine(7);
9000b61a:	2007      	movs	r0, #7
9000b61c:	f7f6 fc44 	bl	90001ea8 <BSP_LCD_ClearStringLine>
    BSP_LCD_DisplayStringAtLine(7, str);
9000b620:	a902      	add	r1, sp, #8
9000b622:	2007      	movs	r0, #7
9000b624:	f7f6 faa6 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
    BSP_AUDIO_IN_SetVolume(uwVolume_rec);
9000b628:	6828      	ldr	r0, [r5, #0]
9000b62a:	b2c0      	uxtb	r0, r0
9000b62c:	f7f5 ff68 	bl	90001500 <BSP_AUDIO_IN_SetVolume>
    AudioState = AUDIO_STATE_RECORD;
9000b630:	e616      	b.n	9000b260 <AUDIO_REC_Process+0x88>
    if(uwVolume_rec >= 5)
9000b632:	4d15      	ldr	r5, [pc, #84]	; (9000b688 <AUDIO_REC_Process+0x4b0>)
9000b634:	682b      	ldr	r3, [r5, #0]
9000b636:	2b04      	cmp	r3, #4
9000b638:	d9e6      	bls.n	9000b608 <AUDIO_REC_Process+0x430>
    	uwVolume_rec -= 5;
9000b63a:	682b      	ldr	r3, [r5, #0]
9000b63c:	3b05      	subs	r3, #5
9000b63e:	e7e2      	b.n	9000b606 <AUDIO_REC_Process+0x42e>
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000b640:	4d14      	ldr	r5, [pc, #80]	; (9000b694 <AUDIO_REC_Process+0x4bc>)
9000b642:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000b646:	2b01      	cmp	r3, #1
9000b648:	f43f ade4 	beq.w	9000b214 <AUDIO_REC_Process+0x3c>
      BSP_TS_GetState(&TS_State);
9000b64c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
9000b650:	f7f7 f942 	bl	900028d8 <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
9000b654:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000b658:	2b01      	cmp	r3, #1
9000b65a:	f47f adde 	bne.w	9000b21a <AUDIO_REC_Process+0x42>
        if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
9000b65e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
9000b660:	f46f 7296 	mvn.w	r2, #300	; 0x12c
9000b664:	189a      	adds	r2, r3, r2
9000b666:	2a26      	cmp	r2, #38	; 0x26
9000b668:	d807      	bhi.n	9000b67a <AUDIO_REC_Process+0x4a2>
9000b66a:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000b66c:	3bd5      	subs	r3, #213	; 0xd5
9000b66e:	b29b      	uxth	r3, r3
9000b670:	2b26      	cmp	r3, #38	; 0x26
9000b672:	f63f add2 	bhi.w	9000b21a <AUDIO_REC_Process+0x42>
          AudioState = AUDIO_STATE_RESUME;
9000b676:	230c      	movs	r3, #12
9000b678:	e5e4      	b.n	9000b244 <AUDIO_REC_Process+0x6c>
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
9000b67a:	3b7e      	subs	r3, #126	; 0x7e
9000b67c:	2b16      	cmp	r3, #22
9000b67e:	d9f4      	bls.n	9000b66a <AUDIO_REC_Process+0x492>
9000b680:	e5cb      	b.n	9000b21a <AUDIO_REC_Process+0x42>
9000b682:	bf00      	nop
9000b684:	ffff0000 	.word	0xffff0000
9000b688:	200000f8 	.word	0x200000f8
9000b68c:	20001ba8 	.word	0x20001ba8
9000b690:	2000c9ec 	.word	0x2000c9ec
9000b694:	20008994 	.word	0x20008994
9000b698:	90011a98 	.word	0x90011a98
9000b69c:	90011aab 	.word	0x90011aab
9000b6a0:	90011a8d 	.word	0x90011a8d
9000b6a4:	90011a3a 	.word	0x90011a3a

9000b6a8 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
9000b6a8:	4b0f      	ldr	r3, [pc, #60]	; (9000b6e8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x40>)
9000b6aa:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
9000b6ae:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
9000b6b2:	f5b2 5f90 	cmp.w	r2, #4608	; 0x1200
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
9000b6b6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
9000b6ba:	d106      	bne.n	9000b6ca <BSP_AUDIO_IN_TransferComplete_CallBack+0x22>
    BufferCtl.wr_state   =  BUFFER_FULL;
9000b6bc:	2201      	movs	r2, #1
9000b6be:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
    BufferCtl.offset  = 0;
9000b6c2:	2200      	movs	r2, #0
9000b6c4:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
9000b6c8:	4770      	bx	lr
9000b6ca:	f5b2 5f10 	cmp.w	r2, #9216	; 0x2400
9000b6ce:	d309      	bcc.n	9000b6e4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x3c>
    BufferCtl.wr_state   =  BUFFER_FULL;
9000b6d0:	2201      	movs	r2, #1
9000b6d2:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
9000b6d6:	f44f 5290 	mov.w	r2, #4608	; 0x1200
9000b6da:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
    BufferCtl.pcm_ptr = 0;
9000b6de:	2200      	movs	r2, #0
9000b6e0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
9000b6e4:	4770      	bx	lr
9000b6e6:	bf00      	nop
9000b6e8:	2000c9ec 	.word	0x2000c9ec

9000b6ec <BSP_AUDIO_IN_HalfTransfer_CallBack>:
9000b6ec:	f7ff bfdc 	b.w	9000b6a8 <BSP_AUDIO_IN_TransferComplete_CallBack>

9000b6f0 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
9000b6f0:	4b08      	ldr	r3, [pc, #32]	; (9000b714 <LCD_LOG_DeInit+0x24>)
9000b6f2:	f04f 32ff 	mov.w	r2, #4294967295
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
9000b6f6:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
9000b6f8:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
9000b6fa:	2200      	movs	r2, #0
  LCD_CacheBuffer_yptr_invert= ENABLE;
9000b6fc:	7399      	strb	r1, [r3, #14]
  LCD_CacheBuffer_xptr = 0;
9000b6fe:	809a      	strh	r2, [r3, #4]
  LCD_CacheBuffer_yptr_top = 0;
9000b700:	80da      	strh	r2, [r3, #6]
  LCD_CacheBuffer_yptr_bottom = 0;
9000b702:	811a      	strh	r2, [r3, #8]
  LCD_CacheBuffer_yptr_top_bak = 0;
9000b704:	815a      	strh	r2, [r3, #10]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
9000b706:	819a      	strh	r2, [r3, #12]
  LCD_ScrollActive = DISABLE;
9000b708:	73da      	strb	r2, [r3, #15]
  LCD_Lock = DISABLE;
9000b70a:	741a      	strb	r2, [r3, #16]
  LCD_Scrolled = DISABLE;
9000b70c:	745a      	strb	r2, [r3, #17]
  LCD_ScrollBackStep = 0;
9000b70e:	825a      	strh	r2, [r3, #18]
}
9000b710:	4770      	bx	lr
9000b712:	bf00      	nop
9000b714:	2000d1fc 	.word	0x2000d1fc

9000b718 <LCD_LOG_Init>:
{
9000b718:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
9000b71a:	f7ff ffe9 	bl	9000b6f0 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
9000b71e:	4802      	ldr	r0, [pc, #8]	; (9000b728 <LCD_LOG_Init+0x10>)
}
9000b720:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
9000b724:	f7f6 b8c0 	b.w	900018a8 <BSP_LCD_Clear>
9000b728:	ff008000 	.word	0xff008000

9000b72c <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
9000b72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
9000b730:	4c1b      	ldr	r4, [pc, #108]	; (9000b7a0 <LCD_LOG_UpdateDisplay+0x74>)
9000b732:	4f1c      	ldr	r7, [pc, #112]	; (9000b7a4 <LCD_LOG_UpdateDisplay+0x78>)
9000b734:	8923      	ldrh	r3, [r4, #8]
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
9000b736:	88e2      	ldrh	r2, [r4, #6]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
9000b738:	2b08      	cmp	r3, #8
9000b73a:	d811      	bhi.n	9000b760 <LCD_LOG_UpdateDisplay+0x34>
9000b73c:	4293      	cmp	r3, r2
9000b73e:	d311      	bcc.n	9000b764 <LCD_LOG_UpdateDisplay+0x38>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
9000b740:	2584      	movs	r5, #132	; 0x84
9000b742:	fb05 7303 	mla	r3, r5, r3, r7
9000b746:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
9000b74a:	f7f6 f87d 	bl	90001848 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
9000b74e:	8921      	ldrh	r1, [r4, #8]
9000b750:	1d08      	adds	r0, r1, #4
9000b752:	fb05 7101 	mla	r1, r5, r1, r7
9000b756:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
9000b758:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
9000b75c:	f7f6 ba0a 	b.w	90001b74 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
9000b760:	4293      	cmp	r3, r2
9000b762:	d201      	bcs.n	9000b768 <LCD_LOG_UpdateDisplay+0x3c>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
9000b764:	336e      	adds	r3, #110	; 0x6e
9000b766:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
9000b768:	3b09      	subs	r3, #9
9000b76a:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
9000b76c:	f04f 086e 	mov.w	r8, #110	; 0x6e
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
9000b770:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
9000b774:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
9000b776:	19a5      	adds	r5, r4, r6
9000b778:	fbb5 f3f8 	udiv	r3, r5, r8
9000b77c:	fb08 5513 	mls	r5, r8, r3, r5
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
9000b780:	fb09 7505 	mla	r5, r9, r5, r7
9000b784:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
9000b788:	f7f6 f85e 	bl	90001848 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
9000b78c:	1d30      	adds	r0, r6, #4
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
9000b78e:	3601      	adds	r6, #1
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
9000b790:	4629      	mov	r1, r5
9000b792:	b280      	uxth	r0, r0
9000b794:	f7f6 f9ee 	bl	90001b74 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
9000b798:	2e0a      	cmp	r6, #10
9000b79a:	d1ec      	bne.n	9000b776 <LCD_LOG_UpdateDisplay+0x4a>
}
9000b79c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b7a0:	2000d1fc 	.word	0x2000d1fc
9000b7a4:	2000d210 	.word	0x2000d210

9000b7a8 <malloc>:
9000b7a8:	4b02      	ldr	r3, [pc, #8]	; (9000b7b4 <malloc+0xc>)
9000b7aa:	4601      	mov	r1, r0
9000b7ac:	6818      	ldr	r0, [r3, #0]
9000b7ae:	f000 b82b 	b.w	9000b808 <_malloc_r>
9000b7b2:	bf00      	nop
9000b7b4:	2000015c 	.word	0x2000015c

9000b7b8 <free>:
9000b7b8:	4b02      	ldr	r3, [pc, #8]	; (9000b7c4 <free+0xc>)
9000b7ba:	4601      	mov	r1, r0
9000b7bc:	6818      	ldr	r0, [r3, #0]
9000b7be:	f000 bb81 	b.w	9000bec4 <_free_r>
9000b7c2:	bf00      	nop
9000b7c4:	2000015c 	.word	0x2000015c

9000b7c8 <sbrk_aligned>:
9000b7c8:	b570      	push	{r4, r5, r6, lr}
9000b7ca:	4e0e      	ldr	r6, [pc, #56]	; (9000b804 <sbrk_aligned+0x3c>)
9000b7cc:	460c      	mov	r4, r1
9000b7ce:	6831      	ldr	r1, [r6, #0]
9000b7d0:	4605      	mov	r5, r0
9000b7d2:	b911      	cbnz	r1, 9000b7da <sbrk_aligned+0x12>
9000b7d4:	f000 fb24 	bl	9000be20 <_sbrk_r>
9000b7d8:	6030      	str	r0, [r6, #0]
9000b7da:	4621      	mov	r1, r4
9000b7dc:	4628      	mov	r0, r5
9000b7de:	f000 fb1f 	bl	9000be20 <_sbrk_r>
9000b7e2:	1c43      	adds	r3, r0, #1
9000b7e4:	d00a      	beq.n	9000b7fc <sbrk_aligned+0x34>
9000b7e6:	1cc4      	adds	r4, r0, #3
9000b7e8:	f024 0403 	bic.w	r4, r4, #3
9000b7ec:	42a0      	cmp	r0, r4
9000b7ee:	d007      	beq.n	9000b800 <sbrk_aligned+0x38>
9000b7f0:	1a21      	subs	r1, r4, r0
9000b7f2:	4628      	mov	r0, r5
9000b7f4:	f000 fb14 	bl	9000be20 <_sbrk_r>
9000b7f8:	3001      	adds	r0, #1
9000b7fa:	d101      	bne.n	9000b800 <sbrk_aligned+0x38>
9000b7fc:	f04f 34ff 	mov.w	r4, #4294967295
9000b800:	4620      	mov	r0, r4
9000b802:	bd70      	pop	{r4, r5, r6, pc}
9000b804:	20010acc 	.word	0x20010acc

9000b808 <_malloc_r>:
9000b808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000b80c:	1ccd      	adds	r5, r1, #3
9000b80e:	f025 0503 	bic.w	r5, r5, #3
9000b812:	3508      	adds	r5, #8
9000b814:	2d0c      	cmp	r5, #12
9000b816:	bf38      	it	cc
9000b818:	250c      	movcc	r5, #12
9000b81a:	2d00      	cmp	r5, #0
9000b81c:	4607      	mov	r7, r0
9000b81e:	db01      	blt.n	9000b824 <_malloc_r+0x1c>
9000b820:	42a9      	cmp	r1, r5
9000b822:	d905      	bls.n	9000b830 <_malloc_r+0x28>
9000b824:	230c      	movs	r3, #12
9000b826:	603b      	str	r3, [r7, #0]
9000b828:	2600      	movs	r6, #0
9000b82a:	4630      	mov	r0, r6
9000b82c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b830:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 9000b904 <_malloc_r+0xfc>
9000b834:	f000 f868 	bl	9000b908 <__malloc_lock>
9000b838:	f8d8 3000 	ldr.w	r3, [r8]
9000b83c:	461c      	mov	r4, r3
9000b83e:	bb5c      	cbnz	r4, 9000b898 <_malloc_r+0x90>
9000b840:	4629      	mov	r1, r5
9000b842:	4638      	mov	r0, r7
9000b844:	f7ff ffc0 	bl	9000b7c8 <sbrk_aligned>
9000b848:	1c43      	adds	r3, r0, #1
9000b84a:	4604      	mov	r4, r0
9000b84c:	d155      	bne.n	9000b8fa <_malloc_r+0xf2>
9000b84e:	f8d8 4000 	ldr.w	r4, [r8]
9000b852:	4626      	mov	r6, r4
9000b854:	2e00      	cmp	r6, #0
9000b856:	d145      	bne.n	9000b8e4 <_malloc_r+0xdc>
9000b858:	2c00      	cmp	r4, #0
9000b85a:	d048      	beq.n	9000b8ee <_malloc_r+0xe6>
9000b85c:	6823      	ldr	r3, [r4, #0]
9000b85e:	4631      	mov	r1, r6
9000b860:	4638      	mov	r0, r7
9000b862:	eb04 0903 	add.w	r9, r4, r3
9000b866:	f000 fadb 	bl	9000be20 <_sbrk_r>
9000b86a:	4581      	cmp	r9, r0
9000b86c:	d13f      	bne.n	9000b8ee <_malloc_r+0xe6>
9000b86e:	6821      	ldr	r1, [r4, #0]
9000b870:	1a6d      	subs	r5, r5, r1
9000b872:	4629      	mov	r1, r5
9000b874:	4638      	mov	r0, r7
9000b876:	f7ff ffa7 	bl	9000b7c8 <sbrk_aligned>
9000b87a:	3001      	adds	r0, #1
9000b87c:	d037      	beq.n	9000b8ee <_malloc_r+0xe6>
9000b87e:	6823      	ldr	r3, [r4, #0]
9000b880:	442b      	add	r3, r5
9000b882:	6023      	str	r3, [r4, #0]
9000b884:	f8d8 3000 	ldr.w	r3, [r8]
9000b888:	2b00      	cmp	r3, #0
9000b88a:	d038      	beq.n	9000b8fe <_malloc_r+0xf6>
9000b88c:	685a      	ldr	r2, [r3, #4]
9000b88e:	42a2      	cmp	r2, r4
9000b890:	d12b      	bne.n	9000b8ea <_malloc_r+0xe2>
9000b892:	2200      	movs	r2, #0
9000b894:	605a      	str	r2, [r3, #4]
9000b896:	e00f      	b.n	9000b8b8 <_malloc_r+0xb0>
9000b898:	6822      	ldr	r2, [r4, #0]
9000b89a:	1b52      	subs	r2, r2, r5
9000b89c:	d41f      	bmi.n	9000b8de <_malloc_r+0xd6>
9000b89e:	2a0b      	cmp	r2, #11
9000b8a0:	d917      	bls.n	9000b8d2 <_malloc_r+0xca>
9000b8a2:	1961      	adds	r1, r4, r5
9000b8a4:	42a3      	cmp	r3, r4
9000b8a6:	6025      	str	r5, [r4, #0]
9000b8a8:	bf18      	it	ne
9000b8aa:	6059      	strne	r1, [r3, #4]
9000b8ac:	6863      	ldr	r3, [r4, #4]
9000b8ae:	bf08      	it	eq
9000b8b0:	f8c8 1000 	streq.w	r1, [r8]
9000b8b4:	5162      	str	r2, [r4, r5]
9000b8b6:	604b      	str	r3, [r1, #4]
9000b8b8:	4638      	mov	r0, r7
9000b8ba:	f104 060b 	add.w	r6, r4, #11
9000b8be:	f000 f829 	bl	9000b914 <__malloc_unlock>
9000b8c2:	f026 0607 	bic.w	r6, r6, #7
9000b8c6:	1d23      	adds	r3, r4, #4
9000b8c8:	1af2      	subs	r2, r6, r3
9000b8ca:	d0ae      	beq.n	9000b82a <_malloc_r+0x22>
9000b8cc:	1b9b      	subs	r3, r3, r6
9000b8ce:	50a3      	str	r3, [r4, r2]
9000b8d0:	e7ab      	b.n	9000b82a <_malloc_r+0x22>
9000b8d2:	42a3      	cmp	r3, r4
9000b8d4:	6862      	ldr	r2, [r4, #4]
9000b8d6:	d1dd      	bne.n	9000b894 <_malloc_r+0x8c>
9000b8d8:	f8c8 2000 	str.w	r2, [r8]
9000b8dc:	e7ec      	b.n	9000b8b8 <_malloc_r+0xb0>
9000b8de:	4623      	mov	r3, r4
9000b8e0:	6864      	ldr	r4, [r4, #4]
9000b8e2:	e7ac      	b.n	9000b83e <_malloc_r+0x36>
9000b8e4:	4634      	mov	r4, r6
9000b8e6:	6876      	ldr	r6, [r6, #4]
9000b8e8:	e7b4      	b.n	9000b854 <_malloc_r+0x4c>
9000b8ea:	4613      	mov	r3, r2
9000b8ec:	e7cc      	b.n	9000b888 <_malloc_r+0x80>
9000b8ee:	230c      	movs	r3, #12
9000b8f0:	603b      	str	r3, [r7, #0]
9000b8f2:	4638      	mov	r0, r7
9000b8f4:	f000 f80e 	bl	9000b914 <__malloc_unlock>
9000b8f8:	e797      	b.n	9000b82a <_malloc_r+0x22>
9000b8fa:	6025      	str	r5, [r4, #0]
9000b8fc:	e7dc      	b.n	9000b8b8 <_malloc_r+0xb0>
9000b8fe:	605b      	str	r3, [r3, #4]
9000b900:	deff      	udf	#255	; 0xff
9000b902:	bf00      	nop
9000b904:	20010ac8 	.word	0x20010ac8

9000b908 <__malloc_lock>:
9000b908:	4801      	ldr	r0, [pc, #4]	; (9000b910 <__malloc_lock+0x8>)
9000b90a:	f000 bad0 	b.w	9000beae <__retarget_lock_acquire_recursive>
9000b90e:	bf00      	nop
9000b910:	20010c10 	.word	0x20010c10

9000b914 <__malloc_unlock>:
9000b914:	4801      	ldr	r0, [pc, #4]	; (9000b91c <__malloc_unlock+0x8>)
9000b916:	f000 bacb 	b.w	9000beb0 <__retarget_lock_release_recursive>
9000b91a:	bf00      	nop
9000b91c:	20010c10 	.word	0x20010c10

9000b920 <std>:
9000b920:	2300      	movs	r3, #0
9000b922:	b510      	push	{r4, lr}
9000b924:	4604      	mov	r4, r0
9000b926:	e9c0 3300 	strd	r3, r3, [r0]
9000b92a:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000b92e:	6083      	str	r3, [r0, #8]
9000b930:	8181      	strh	r1, [r0, #12]
9000b932:	6643      	str	r3, [r0, #100]	; 0x64
9000b934:	81c2      	strh	r2, [r0, #14]
9000b936:	6183      	str	r3, [r0, #24]
9000b938:	4619      	mov	r1, r3
9000b93a:	2208      	movs	r2, #8
9000b93c:	305c      	adds	r0, #92	; 0x5c
9000b93e:	f000 fa1f 	bl	9000bd80 <memset>
9000b942:	4b0d      	ldr	r3, [pc, #52]	; (9000b978 <std+0x58>)
9000b944:	6263      	str	r3, [r4, #36]	; 0x24
9000b946:	4b0d      	ldr	r3, [pc, #52]	; (9000b97c <std+0x5c>)
9000b948:	62a3      	str	r3, [r4, #40]	; 0x28
9000b94a:	4b0d      	ldr	r3, [pc, #52]	; (9000b980 <std+0x60>)
9000b94c:	62e3      	str	r3, [r4, #44]	; 0x2c
9000b94e:	4b0d      	ldr	r3, [pc, #52]	; (9000b984 <std+0x64>)
9000b950:	6323      	str	r3, [r4, #48]	; 0x30
9000b952:	4b0d      	ldr	r3, [pc, #52]	; (9000b988 <std+0x68>)
9000b954:	6224      	str	r4, [r4, #32]
9000b956:	429c      	cmp	r4, r3
9000b958:	d006      	beq.n	9000b968 <std+0x48>
9000b95a:	f103 0268 	add.w	r2, r3, #104	; 0x68
9000b95e:	4294      	cmp	r4, r2
9000b960:	d002      	beq.n	9000b968 <std+0x48>
9000b962:	33d0      	adds	r3, #208	; 0xd0
9000b964:	429c      	cmp	r4, r3
9000b966:	d105      	bne.n	9000b974 <std+0x54>
9000b968:	f104 0058 	add.w	r0, r4, #88	; 0x58
9000b96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000b970:	f000 ba9c 	b.w	9000beac <__retarget_lock_init_recursive>
9000b974:	bd10      	pop	{r4, pc}
9000b976:	bf00      	nop
9000b978:	9000bbd1 	.word	0x9000bbd1
9000b97c:	9000bbf3 	.word	0x9000bbf3
9000b980:	9000bc2b 	.word	0x9000bc2b
9000b984:	9000bc4f 	.word	0x9000bc4f
9000b988:	20010ad0 	.word	0x20010ad0

9000b98c <stdio_exit_handler>:
9000b98c:	4a02      	ldr	r2, [pc, #8]	; (9000b998 <stdio_exit_handler+0xc>)
9000b98e:	4903      	ldr	r1, [pc, #12]	; (9000b99c <stdio_exit_handler+0x10>)
9000b990:	4803      	ldr	r0, [pc, #12]	; (9000b9a0 <stdio_exit_handler+0x14>)
9000b992:	f000 b869 	b.w	9000ba68 <_fwalk_sglue>
9000b996:	bf00      	nop
9000b998:	20000104 	.word	0x20000104
9000b99c:	9000c8c1 	.word	0x9000c8c1
9000b9a0:	20000110 	.word	0x20000110

9000b9a4 <cleanup_stdio>:
9000b9a4:	6841      	ldr	r1, [r0, #4]
9000b9a6:	4b0c      	ldr	r3, [pc, #48]	; (9000b9d8 <cleanup_stdio+0x34>)
9000b9a8:	4299      	cmp	r1, r3
9000b9aa:	b510      	push	{r4, lr}
9000b9ac:	4604      	mov	r4, r0
9000b9ae:	d001      	beq.n	9000b9b4 <cleanup_stdio+0x10>
9000b9b0:	f000 ff86 	bl	9000c8c0 <_fflush_r>
9000b9b4:	68a1      	ldr	r1, [r4, #8]
9000b9b6:	4b09      	ldr	r3, [pc, #36]	; (9000b9dc <cleanup_stdio+0x38>)
9000b9b8:	4299      	cmp	r1, r3
9000b9ba:	d002      	beq.n	9000b9c2 <cleanup_stdio+0x1e>
9000b9bc:	4620      	mov	r0, r4
9000b9be:	f000 ff7f 	bl	9000c8c0 <_fflush_r>
9000b9c2:	68e1      	ldr	r1, [r4, #12]
9000b9c4:	4b06      	ldr	r3, [pc, #24]	; (9000b9e0 <cleanup_stdio+0x3c>)
9000b9c6:	4299      	cmp	r1, r3
9000b9c8:	d004      	beq.n	9000b9d4 <cleanup_stdio+0x30>
9000b9ca:	4620      	mov	r0, r4
9000b9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000b9d0:	f000 bf76 	b.w	9000c8c0 <_fflush_r>
9000b9d4:	bd10      	pop	{r4, pc}
9000b9d6:	bf00      	nop
9000b9d8:	20010ad0 	.word	0x20010ad0
9000b9dc:	20010b38 	.word	0x20010b38
9000b9e0:	20010ba0 	.word	0x20010ba0

9000b9e4 <global_stdio_init.part.0>:
9000b9e4:	b510      	push	{r4, lr}
9000b9e6:	4b0b      	ldr	r3, [pc, #44]	; (9000ba14 <global_stdio_init.part.0+0x30>)
9000b9e8:	4c0b      	ldr	r4, [pc, #44]	; (9000ba18 <global_stdio_init.part.0+0x34>)
9000b9ea:	4a0c      	ldr	r2, [pc, #48]	; (9000ba1c <global_stdio_init.part.0+0x38>)
9000b9ec:	601a      	str	r2, [r3, #0]
9000b9ee:	4620      	mov	r0, r4
9000b9f0:	2200      	movs	r2, #0
9000b9f2:	2104      	movs	r1, #4
9000b9f4:	f7ff ff94 	bl	9000b920 <std>
9000b9f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
9000b9fc:	2201      	movs	r2, #1
9000b9fe:	2109      	movs	r1, #9
9000ba00:	f7ff ff8e 	bl	9000b920 <std>
9000ba04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
9000ba08:	2202      	movs	r2, #2
9000ba0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000ba0e:	2112      	movs	r1, #18
9000ba10:	f7ff bf86 	b.w	9000b920 <std>
9000ba14:	20010c08 	.word	0x20010c08
9000ba18:	20010ad0 	.word	0x20010ad0
9000ba1c:	9000b98d 	.word	0x9000b98d

9000ba20 <__sfp_lock_acquire>:
9000ba20:	4801      	ldr	r0, [pc, #4]	; (9000ba28 <__sfp_lock_acquire+0x8>)
9000ba22:	f000 ba44 	b.w	9000beae <__retarget_lock_acquire_recursive>
9000ba26:	bf00      	nop
9000ba28:	20010c11 	.word	0x20010c11

9000ba2c <__sfp_lock_release>:
9000ba2c:	4801      	ldr	r0, [pc, #4]	; (9000ba34 <__sfp_lock_release+0x8>)
9000ba2e:	f000 ba3f 	b.w	9000beb0 <__retarget_lock_release_recursive>
9000ba32:	bf00      	nop
9000ba34:	20010c11 	.word	0x20010c11

9000ba38 <__sinit>:
9000ba38:	b510      	push	{r4, lr}
9000ba3a:	4604      	mov	r4, r0
9000ba3c:	f7ff fff0 	bl	9000ba20 <__sfp_lock_acquire>
9000ba40:	6a23      	ldr	r3, [r4, #32]
9000ba42:	b11b      	cbz	r3, 9000ba4c <__sinit+0x14>
9000ba44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000ba48:	f7ff bff0 	b.w	9000ba2c <__sfp_lock_release>
9000ba4c:	4b04      	ldr	r3, [pc, #16]	; (9000ba60 <__sinit+0x28>)
9000ba4e:	6223      	str	r3, [r4, #32]
9000ba50:	4b04      	ldr	r3, [pc, #16]	; (9000ba64 <__sinit+0x2c>)
9000ba52:	681b      	ldr	r3, [r3, #0]
9000ba54:	2b00      	cmp	r3, #0
9000ba56:	d1f5      	bne.n	9000ba44 <__sinit+0xc>
9000ba58:	f7ff ffc4 	bl	9000b9e4 <global_stdio_init.part.0>
9000ba5c:	e7f2      	b.n	9000ba44 <__sinit+0xc>
9000ba5e:	bf00      	nop
9000ba60:	9000b9a5 	.word	0x9000b9a5
9000ba64:	20010c08 	.word	0x20010c08

9000ba68 <_fwalk_sglue>:
9000ba68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000ba6c:	4607      	mov	r7, r0
9000ba6e:	4688      	mov	r8, r1
9000ba70:	4614      	mov	r4, r2
9000ba72:	2600      	movs	r6, #0
9000ba74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000ba78:	f1b9 0901 	subs.w	r9, r9, #1
9000ba7c:	d505      	bpl.n	9000ba8a <_fwalk_sglue+0x22>
9000ba7e:	6824      	ldr	r4, [r4, #0]
9000ba80:	2c00      	cmp	r4, #0
9000ba82:	d1f7      	bne.n	9000ba74 <_fwalk_sglue+0xc>
9000ba84:	4630      	mov	r0, r6
9000ba86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000ba8a:	89ab      	ldrh	r3, [r5, #12]
9000ba8c:	2b01      	cmp	r3, #1
9000ba8e:	d907      	bls.n	9000baa0 <_fwalk_sglue+0x38>
9000ba90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000ba94:	3301      	adds	r3, #1
9000ba96:	d003      	beq.n	9000baa0 <_fwalk_sglue+0x38>
9000ba98:	4629      	mov	r1, r5
9000ba9a:	4638      	mov	r0, r7
9000ba9c:	47c0      	blx	r8
9000ba9e:	4306      	orrs	r6, r0
9000baa0:	3568      	adds	r5, #104	; 0x68
9000baa2:	e7e9      	b.n	9000ba78 <_fwalk_sglue+0x10>

9000baa4 <iprintf>:
9000baa4:	b40f      	push	{r0, r1, r2, r3}
9000baa6:	b507      	push	{r0, r1, r2, lr}
9000baa8:	4906      	ldr	r1, [pc, #24]	; (9000bac4 <iprintf+0x20>)
9000baaa:	ab04      	add	r3, sp, #16
9000baac:	6808      	ldr	r0, [r1, #0]
9000baae:	f853 2b04 	ldr.w	r2, [r3], #4
9000bab2:	6881      	ldr	r1, [r0, #8]
9000bab4:	9301      	str	r3, [sp, #4]
9000bab6:	f000 fbd3 	bl	9000c260 <_vfiprintf_r>
9000baba:	b003      	add	sp, #12
9000babc:	f85d eb04 	ldr.w	lr, [sp], #4
9000bac0:	b004      	add	sp, #16
9000bac2:	4770      	bx	lr
9000bac4:	2000015c 	.word	0x2000015c

9000bac8 <putchar>:
9000bac8:	4b02      	ldr	r3, [pc, #8]	; (9000bad4 <putchar+0xc>)
9000baca:	4601      	mov	r1, r0
9000bacc:	6818      	ldr	r0, [r3, #0]
9000bace:	6882      	ldr	r2, [r0, #8]
9000bad0:	f000 bf80 	b.w	9000c9d4 <_putc_r>
9000bad4:	2000015c 	.word	0x2000015c

9000bad8 <_puts_r>:
9000bad8:	6a03      	ldr	r3, [r0, #32]
9000bada:	b570      	push	{r4, r5, r6, lr}
9000badc:	6884      	ldr	r4, [r0, #8]
9000bade:	4605      	mov	r5, r0
9000bae0:	460e      	mov	r6, r1
9000bae2:	b90b      	cbnz	r3, 9000bae8 <_puts_r+0x10>
9000bae4:	f7ff ffa8 	bl	9000ba38 <__sinit>
9000bae8:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000baea:	07db      	lsls	r3, r3, #31
9000baec:	d405      	bmi.n	9000bafa <_puts_r+0x22>
9000baee:	89a3      	ldrh	r3, [r4, #12]
9000baf0:	0598      	lsls	r0, r3, #22
9000baf2:	d402      	bmi.n	9000bafa <_puts_r+0x22>
9000baf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000baf6:	f000 f9da 	bl	9000beae <__retarget_lock_acquire_recursive>
9000bafa:	89a3      	ldrh	r3, [r4, #12]
9000bafc:	0719      	lsls	r1, r3, #28
9000bafe:	d513      	bpl.n	9000bb28 <_puts_r+0x50>
9000bb00:	6923      	ldr	r3, [r4, #16]
9000bb02:	b18b      	cbz	r3, 9000bb28 <_puts_r+0x50>
9000bb04:	3e01      	subs	r6, #1
9000bb06:	68a3      	ldr	r3, [r4, #8]
9000bb08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000bb0c:	3b01      	subs	r3, #1
9000bb0e:	60a3      	str	r3, [r4, #8]
9000bb10:	b9e9      	cbnz	r1, 9000bb4e <_puts_r+0x76>
9000bb12:	2b00      	cmp	r3, #0
9000bb14:	da2e      	bge.n	9000bb74 <_puts_r+0x9c>
9000bb16:	4622      	mov	r2, r4
9000bb18:	210a      	movs	r1, #10
9000bb1a:	4628      	mov	r0, r5
9000bb1c:	f000 f89b 	bl	9000bc56 <__swbuf_r>
9000bb20:	3001      	adds	r0, #1
9000bb22:	d007      	beq.n	9000bb34 <_puts_r+0x5c>
9000bb24:	250a      	movs	r5, #10
9000bb26:	e007      	b.n	9000bb38 <_puts_r+0x60>
9000bb28:	4621      	mov	r1, r4
9000bb2a:	4628      	mov	r0, r5
9000bb2c:	f000 f8d0 	bl	9000bcd0 <__swsetup_r>
9000bb30:	2800      	cmp	r0, #0
9000bb32:	d0e7      	beq.n	9000bb04 <_puts_r+0x2c>
9000bb34:	f04f 35ff 	mov.w	r5, #4294967295
9000bb38:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000bb3a:	07da      	lsls	r2, r3, #31
9000bb3c:	d405      	bmi.n	9000bb4a <_puts_r+0x72>
9000bb3e:	89a3      	ldrh	r3, [r4, #12]
9000bb40:	059b      	lsls	r3, r3, #22
9000bb42:	d402      	bmi.n	9000bb4a <_puts_r+0x72>
9000bb44:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000bb46:	f000 f9b3 	bl	9000beb0 <__retarget_lock_release_recursive>
9000bb4a:	4628      	mov	r0, r5
9000bb4c:	bd70      	pop	{r4, r5, r6, pc}
9000bb4e:	2b00      	cmp	r3, #0
9000bb50:	da04      	bge.n	9000bb5c <_puts_r+0x84>
9000bb52:	69a2      	ldr	r2, [r4, #24]
9000bb54:	429a      	cmp	r2, r3
9000bb56:	dc06      	bgt.n	9000bb66 <_puts_r+0x8e>
9000bb58:	290a      	cmp	r1, #10
9000bb5a:	d004      	beq.n	9000bb66 <_puts_r+0x8e>
9000bb5c:	6823      	ldr	r3, [r4, #0]
9000bb5e:	1c5a      	adds	r2, r3, #1
9000bb60:	6022      	str	r2, [r4, #0]
9000bb62:	7019      	strb	r1, [r3, #0]
9000bb64:	e7cf      	b.n	9000bb06 <_puts_r+0x2e>
9000bb66:	4622      	mov	r2, r4
9000bb68:	4628      	mov	r0, r5
9000bb6a:	f000 f874 	bl	9000bc56 <__swbuf_r>
9000bb6e:	3001      	adds	r0, #1
9000bb70:	d1c9      	bne.n	9000bb06 <_puts_r+0x2e>
9000bb72:	e7df      	b.n	9000bb34 <_puts_r+0x5c>
9000bb74:	6823      	ldr	r3, [r4, #0]
9000bb76:	250a      	movs	r5, #10
9000bb78:	1c5a      	adds	r2, r3, #1
9000bb7a:	6022      	str	r2, [r4, #0]
9000bb7c:	701d      	strb	r5, [r3, #0]
9000bb7e:	e7db      	b.n	9000bb38 <_puts_r+0x60>

9000bb80 <puts>:
9000bb80:	4b02      	ldr	r3, [pc, #8]	; (9000bb8c <puts+0xc>)
9000bb82:	4601      	mov	r1, r0
9000bb84:	6818      	ldr	r0, [r3, #0]
9000bb86:	f7ff bfa7 	b.w	9000bad8 <_puts_r>
9000bb8a:	bf00      	nop
9000bb8c:	2000015c 	.word	0x2000015c

9000bb90 <siprintf>:
9000bb90:	b40e      	push	{r1, r2, r3}
9000bb92:	b500      	push	{lr}
9000bb94:	b09c      	sub	sp, #112	; 0x70
9000bb96:	ab1d      	add	r3, sp, #116	; 0x74
9000bb98:	9002      	str	r0, [sp, #8]
9000bb9a:	9006      	str	r0, [sp, #24]
9000bb9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
9000bba0:	4809      	ldr	r0, [pc, #36]	; (9000bbc8 <siprintf+0x38>)
9000bba2:	9107      	str	r1, [sp, #28]
9000bba4:	9104      	str	r1, [sp, #16]
9000bba6:	4909      	ldr	r1, [pc, #36]	; (9000bbcc <siprintf+0x3c>)
9000bba8:	f853 2b04 	ldr.w	r2, [r3], #4
9000bbac:	9105      	str	r1, [sp, #20]
9000bbae:	6800      	ldr	r0, [r0, #0]
9000bbb0:	9301      	str	r3, [sp, #4]
9000bbb2:	a902      	add	r1, sp, #8
9000bbb4:	f000 fa2c 	bl	9000c010 <_svfiprintf_r>
9000bbb8:	9b02      	ldr	r3, [sp, #8]
9000bbba:	2200      	movs	r2, #0
9000bbbc:	701a      	strb	r2, [r3, #0]
9000bbbe:	b01c      	add	sp, #112	; 0x70
9000bbc0:	f85d eb04 	ldr.w	lr, [sp], #4
9000bbc4:	b003      	add	sp, #12
9000bbc6:	4770      	bx	lr
9000bbc8:	2000015c 	.word	0x2000015c
9000bbcc:	ffff0208 	.word	0xffff0208

9000bbd0 <__sread>:
9000bbd0:	b510      	push	{r4, lr}
9000bbd2:	460c      	mov	r4, r1
9000bbd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000bbd8:	f000 f910 	bl	9000bdfc <_read_r>
9000bbdc:	2800      	cmp	r0, #0
9000bbde:	bfab      	itete	ge
9000bbe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
9000bbe2:	89a3      	ldrhlt	r3, [r4, #12]
9000bbe4:	181b      	addge	r3, r3, r0
9000bbe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9000bbea:	bfac      	ite	ge
9000bbec:	6563      	strge	r3, [r4, #84]	; 0x54
9000bbee:	81a3      	strhlt	r3, [r4, #12]
9000bbf0:	bd10      	pop	{r4, pc}

9000bbf2 <__swrite>:
9000bbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000bbf6:	461f      	mov	r7, r3
9000bbf8:	898b      	ldrh	r3, [r1, #12]
9000bbfa:	05db      	lsls	r3, r3, #23
9000bbfc:	4605      	mov	r5, r0
9000bbfe:	460c      	mov	r4, r1
9000bc00:	4616      	mov	r6, r2
9000bc02:	d505      	bpl.n	9000bc10 <__swrite+0x1e>
9000bc04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000bc08:	2302      	movs	r3, #2
9000bc0a:	2200      	movs	r2, #0
9000bc0c:	f000 f8e4 	bl	9000bdd8 <_lseek_r>
9000bc10:	89a3      	ldrh	r3, [r4, #12]
9000bc12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000bc16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000bc1a:	81a3      	strh	r3, [r4, #12]
9000bc1c:	4632      	mov	r2, r6
9000bc1e:	463b      	mov	r3, r7
9000bc20:	4628      	mov	r0, r5
9000bc22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000bc26:	f000 b90b 	b.w	9000be40 <_write_r>

9000bc2a <__sseek>:
9000bc2a:	b510      	push	{r4, lr}
9000bc2c:	460c      	mov	r4, r1
9000bc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000bc32:	f000 f8d1 	bl	9000bdd8 <_lseek_r>
9000bc36:	1c43      	adds	r3, r0, #1
9000bc38:	89a3      	ldrh	r3, [r4, #12]
9000bc3a:	bf15      	itete	ne
9000bc3c:	6560      	strne	r0, [r4, #84]	; 0x54
9000bc3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9000bc42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9000bc46:	81a3      	strheq	r3, [r4, #12]
9000bc48:	bf18      	it	ne
9000bc4a:	81a3      	strhne	r3, [r4, #12]
9000bc4c:	bd10      	pop	{r4, pc}

9000bc4e <__sclose>:
9000bc4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000bc52:	f000 b8b1 	b.w	9000bdb8 <_close_r>

9000bc56 <__swbuf_r>:
9000bc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000bc58:	460e      	mov	r6, r1
9000bc5a:	4614      	mov	r4, r2
9000bc5c:	4605      	mov	r5, r0
9000bc5e:	b118      	cbz	r0, 9000bc68 <__swbuf_r+0x12>
9000bc60:	6a03      	ldr	r3, [r0, #32]
9000bc62:	b90b      	cbnz	r3, 9000bc68 <__swbuf_r+0x12>
9000bc64:	f7ff fee8 	bl	9000ba38 <__sinit>
9000bc68:	69a3      	ldr	r3, [r4, #24]
9000bc6a:	60a3      	str	r3, [r4, #8]
9000bc6c:	89a3      	ldrh	r3, [r4, #12]
9000bc6e:	071a      	lsls	r2, r3, #28
9000bc70:	d525      	bpl.n	9000bcbe <__swbuf_r+0x68>
9000bc72:	6923      	ldr	r3, [r4, #16]
9000bc74:	b31b      	cbz	r3, 9000bcbe <__swbuf_r+0x68>
9000bc76:	6823      	ldr	r3, [r4, #0]
9000bc78:	6922      	ldr	r2, [r4, #16]
9000bc7a:	1a98      	subs	r0, r3, r2
9000bc7c:	6963      	ldr	r3, [r4, #20]
9000bc7e:	b2f6      	uxtb	r6, r6
9000bc80:	4283      	cmp	r3, r0
9000bc82:	4637      	mov	r7, r6
9000bc84:	dc04      	bgt.n	9000bc90 <__swbuf_r+0x3a>
9000bc86:	4621      	mov	r1, r4
9000bc88:	4628      	mov	r0, r5
9000bc8a:	f000 fe19 	bl	9000c8c0 <_fflush_r>
9000bc8e:	b9e0      	cbnz	r0, 9000bcca <__swbuf_r+0x74>
9000bc90:	68a3      	ldr	r3, [r4, #8]
9000bc92:	3b01      	subs	r3, #1
9000bc94:	60a3      	str	r3, [r4, #8]
9000bc96:	6823      	ldr	r3, [r4, #0]
9000bc98:	1c5a      	adds	r2, r3, #1
9000bc9a:	6022      	str	r2, [r4, #0]
9000bc9c:	701e      	strb	r6, [r3, #0]
9000bc9e:	6962      	ldr	r2, [r4, #20]
9000bca0:	1c43      	adds	r3, r0, #1
9000bca2:	429a      	cmp	r2, r3
9000bca4:	d004      	beq.n	9000bcb0 <__swbuf_r+0x5a>
9000bca6:	89a3      	ldrh	r3, [r4, #12]
9000bca8:	07db      	lsls	r3, r3, #31
9000bcaa:	d506      	bpl.n	9000bcba <__swbuf_r+0x64>
9000bcac:	2e0a      	cmp	r6, #10
9000bcae:	d104      	bne.n	9000bcba <__swbuf_r+0x64>
9000bcb0:	4621      	mov	r1, r4
9000bcb2:	4628      	mov	r0, r5
9000bcb4:	f000 fe04 	bl	9000c8c0 <_fflush_r>
9000bcb8:	b938      	cbnz	r0, 9000bcca <__swbuf_r+0x74>
9000bcba:	4638      	mov	r0, r7
9000bcbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000bcbe:	4621      	mov	r1, r4
9000bcc0:	4628      	mov	r0, r5
9000bcc2:	f000 f805 	bl	9000bcd0 <__swsetup_r>
9000bcc6:	2800      	cmp	r0, #0
9000bcc8:	d0d5      	beq.n	9000bc76 <__swbuf_r+0x20>
9000bcca:	f04f 37ff 	mov.w	r7, #4294967295
9000bcce:	e7f4      	b.n	9000bcba <__swbuf_r+0x64>

9000bcd0 <__swsetup_r>:
9000bcd0:	b538      	push	{r3, r4, r5, lr}
9000bcd2:	4b2a      	ldr	r3, [pc, #168]	; (9000bd7c <__swsetup_r+0xac>)
9000bcd4:	4605      	mov	r5, r0
9000bcd6:	6818      	ldr	r0, [r3, #0]
9000bcd8:	460c      	mov	r4, r1
9000bcda:	b118      	cbz	r0, 9000bce4 <__swsetup_r+0x14>
9000bcdc:	6a03      	ldr	r3, [r0, #32]
9000bcde:	b90b      	cbnz	r3, 9000bce4 <__swsetup_r+0x14>
9000bce0:	f7ff feaa 	bl	9000ba38 <__sinit>
9000bce4:	89a3      	ldrh	r3, [r4, #12]
9000bce6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000bcea:	0718      	lsls	r0, r3, #28
9000bcec:	d422      	bmi.n	9000bd34 <__swsetup_r+0x64>
9000bcee:	06d9      	lsls	r1, r3, #27
9000bcf0:	d407      	bmi.n	9000bd02 <__swsetup_r+0x32>
9000bcf2:	2309      	movs	r3, #9
9000bcf4:	602b      	str	r3, [r5, #0]
9000bcf6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
9000bcfa:	81a3      	strh	r3, [r4, #12]
9000bcfc:	f04f 30ff 	mov.w	r0, #4294967295
9000bd00:	e034      	b.n	9000bd6c <__swsetup_r+0x9c>
9000bd02:	0758      	lsls	r0, r3, #29
9000bd04:	d512      	bpl.n	9000bd2c <__swsetup_r+0x5c>
9000bd06:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000bd08:	b141      	cbz	r1, 9000bd1c <__swsetup_r+0x4c>
9000bd0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000bd0e:	4299      	cmp	r1, r3
9000bd10:	d002      	beq.n	9000bd18 <__swsetup_r+0x48>
9000bd12:	4628      	mov	r0, r5
9000bd14:	f000 f8d6 	bl	9000bec4 <_free_r>
9000bd18:	2300      	movs	r3, #0
9000bd1a:	6363      	str	r3, [r4, #52]	; 0x34
9000bd1c:	89a3      	ldrh	r3, [r4, #12]
9000bd1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
9000bd22:	81a3      	strh	r3, [r4, #12]
9000bd24:	2300      	movs	r3, #0
9000bd26:	6063      	str	r3, [r4, #4]
9000bd28:	6923      	ldr	r3, [r4, #16]
9000bd2a:	6023      	str	r3, [r4, #0]
9000bd2c:	89a3      	ldrh	r3, [r4, #12]
9000bd2e:	f043 0308 	orr.w	r3, r3, #8
9000bd32:	81a3      	strh	r3, [r4, #12]
9000bd34:	6923      	ldr	r3, [r4, #16]
9000bd36:	b94b      	cbnz	r3, 9000bd4c <__swsetup_r+0x7c>
9000bd38:	89a3      	ldrh	r3, [r4, #12]
9000bd3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
9000bd3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000bd42:	d003      	beq.n	9000bd4c <__swsetup_r+0x7c>
9000bd44:	4621      	mov	r1, r4
9000bd46:	4628      	mov	r0, r5
9000bd48:	f000 fe08 	bl	9000c95c <__smakebuf_r>
9000bd4c:	89a0      	ldrh	r0, [r4, #12]
9000bd4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000bd52:	f010 0301 	ands.w	r3, r0, #1
9000bd56:	d00a      	beq.n	9000bd6e <__swsetup_r+0x9e>
9000bd58:	2300      	movs	r3, #0
9000bd5a:	60a3      	str	r3, [r4, #8]
9000bd5c:	6963      	ldr	r3, [r4, #20]
9000bd5e:	425b      	negs	r3, r3
9000bd60:	61a3      	str	r3, [r4, #24]
9000bd62:	6923      	ldr	r3, [r4, #16]
9000bd64:	b943      	cbnz	r3, 9000bd78 <__swsetup_r+0xa8>
9000bd66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
9000bd6a:	d1c4      	bne.n	9000bcf6 <__swsetup_r+0x26>
9000bd6c:	bd38      	pop	{r3, r4, r5, pc}
9000bd6e:	0781      	lsls	r1, r0, #30
9000bd70:	bf58      	it	pl
9000bd72:	6963      	ldrpl	r3, [r4, #20]
9000bd74:	60a3      	str	r3, [r4, #8]
9000bd76:	e7f4      	b.n	9000bd62 <__swsetup_r+0x92>
9000bd78:	2000      	movs	r0, #0
9000bd7a:	e7f7      	b.n	9000bd6c <__swsetup_r+0x9c>
9000bd7c:	2000015c 	.word	0x2000015c

9000bd80 <memset>:
9000bd80:	4402      	add	r2, r0
9000bd82:	4603      	mov	r3, r0
9000bd84:	4293      	cmp	r3, r2
9000bd86:	d100      	bne.n	9000bd8a <memset+0xa>
9000bd88:	4770      	bx	lr
9000bd8a:	f803 1b01 	strb.w	r1, [r3], #1
9000bd8e:	e7f9      	b.n	9000bd84 <memset+0x4>

9000bd90 <strncpy>:
9000bd90:	b510      	push	{r4, lr}
9000bd92:	3901      	subs	r1, #1
9000bd94:	4603      	mov	r3, r0
9000bd96:	b132      	cbz	r2, 9000bda6 <strncpy+0x16>
9000bd98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
9000bd9c:	f803 4b01 	strb.w	r4, [r3], #1
9000bda0:	3a01      	subs	r2, #1
9000bda2:	2c00      	cmp	r4, #0
9000bda4:	d1f7      	bne.n	9000bd96 <strncpy+0x6>
9000bda6:	441a      	add	r2, r3
9000bda8:	2100      	movs	r1, #0
9000bdaa:	4293      	cmp	r3, r2
9000bdac:	d100      	bne.n	9000bdb0 <strncpy+0x20>
9000bdae:	bd10      	pop	{r4, pc}
9000bdb0:	f803 1b01 	strb.w	r1, [r3], #1
9000bdb4:	e7f9      	b.n	9000bdaa <strncpy+0x1a>
	...

9000bdb8 <_close_r>:
9000bdb8:	b538      	push	{r3, r4, r5, lr}
9000bdba:	4d06      	ldr	r5, [pc, #24]	; (9000bdd4 <_close_r+0x1c>)
9000bdbc:	2300      	movs	r3, #0
9000bdbe:	4604      	mov	r4, r0
9000bdc0:	4608      	mov	r0, r1
9000bdc2:	602b      	str	r3, [r5, #0]
9000bdc4:	f000 febc 	bl	9000cb40 <_close>
9000bdc8:	1c43      	adds	r3, r0, #1
9000bdca:	d102      	bne.n	9000bdd2 <_close_r+0x1a>
9000bdcc:	682b      	ldr	r3, [r5, #0]
9000bdce:	b103      	cbz	r3, 9000bdd2 <_close_r+0x1a>
9000bdd0:	6023      	str	r3, [r4, #0]
9000bdd2:	bd38      	pop	{r3, r4, r5, pc}
9000bdd4:	20010c0c 	.word	0x20010c0c

9000bdd8 <_lseek_r>:
9000bdd8:	b538      	push	{r3, r4, r5, lr}
9000bdda:	4d07      	ldr	r5, [pc, #28]	; (9000bdf8 <_lseek_r+0x20>)
9000bddc:	4604      	mov	r4, r0
9000bdde:	4608      	mov	r0, r1
9000bde0:	4611      	mov	r1, r2
9000bde2:	2200      	movs	r2, #0
9000bde4:	602a      	str	r2, [r5, #0]
9000bde6:	461a      	mov	r2, r3
9000bde8:	f000 fec2 	bl	9000cb70 <_lseek>
9000bdec:	1c43      	adds	r3, r0, #1
9000bdee:	d102      	bne.n	9000bdf6 <_lseek_r+0x1e>
9000bdf0:	682b      	ldr	r3, [r5, #0]
9000bdf2:	b103      	cbz	r3, 9000bdf6 <_lseek_r+0x1e>
9000bdf4:	6023      	str	r3, [r4, #0]
9000bdf6:	bd38      	pop	{r3, r4, r5, pc}
9000bdf8:	20010c0c 	.word	0x20010c0c

9000bdfc <_read_r>:
9000bdfc:	b538      	push	{r3, r4, r5, lr}
9000bdfe:	4d07      	ldr	r5, [pc, #28]	; (9000be1c <_read_r+0x20>)
9000be00:	4604      	mov	r4, r0
9000be02:	4608      	mov	r0, r1
9000be04:	4611      	mov	r1, r2
9000be06:	2200      	movs	r2, #0
9000be08:	602a      	str	r2, [r5, #0]
9000be0a:	461a      	mov	r2, r3
9000be0c:	f000 feb8 	bl	9000cb80 <_read>
9000be10:	1c43      	adds	r3, r0, #1
9000be12:	d102      	bne.n	9000be1a <_read_r+0x1e>
9000be14:	682b      	ldr	r3, [r5, #0]
9000be16:	b103      	cbz	r3, 9000be1a <_read_r+0x1e>
9000be18:	6023      	str	r3, [r4, #0]
9000be1a:	bd38      	pop	{r3, r4, r5, pc}
9000be1c:	20010c0c 	.word	0x20010c0c

9000be20 <_sbrk_r>:
9000be20:	b538      	push	{r3, r4, r5, lr}
9000be22:	4d06      	ldr	r5, [pc, #24]	; (9000be3c <_sbrk_r+0x1c>)
9000be24:	2300      	movs	r3, #0
9000be26:	4604      	mov	r4, r0
9000be28:	4608      	mov	r0, r1
9000be2a:	602b      	str	r3, [r5, #0]
9000be2c:	f000 feb0 	bl	9000cb90 <_sbrk>
9000be30:	1c43      	adds	r3, r0, #1
9000be32:	d102      	bne.n	9000be3a <_sbrk_r+0x1a>
9000be34:	682b      	ldr	r3, [r5, #0]
9000be36:	b103      	cbz	r3, 9000be3a <_sbrk_r+0x1a>
9000be38:	6023      	str	r3, [r4, #0]
9000be3a:	bd38      	pop	{r3, r4, r5, pc}
9000be3c:	20010c0c 	.word	0x20010c0c

9000be40 <_write_r>:
9000be40:	b538      	push	{r3, r4, r5, lr}
9000be42:	4d07      	ldr	r5, [pc, #28]	; (9000be60 <_write_r+0x20>)
9000be44:	4604      	mov	r4, r0
9000be46:	4608      	mov	r0, r1
9000be48:	4611      	mov	r1, r2
9000be4a:	2200      	movs	r2, #0
9000be4c:	602a      	str	r2, [r5, #0]
9000be4e:	461a      	mov	r2, r3
9000be50:	f000 feac 	bl	9000cbac <_write>
9000be54:	1c43      	adds	r3, r0, #1
9000be56:	d102      	bne.n	9000be5e <_write_r+0x1e>
9000be58:	682b      	ldr	r3, [r5, #0]
9000be5a:	b103      	cbz	r3, 9000be5e <_write_r+0x1e>
9000be5c:	6023      	str	r3, [r4, #0]
9000be5e:	bd38      	pop	{r3, r4, r5, pc}
9000be60:	20010c0c 	.word	0x20010c0c

9000be64 <__libc_init_array>:
9000be64:	b570      	push	{r4, r5, r6, lr}
9000be66:	4d0d      	ldr	r5, [pc, #52]	; (9000be9c <__libc_init_array+0x38>)
9000be68:	4c0d      	ldr	r4, [pc, #52]	; (9000bea0 <__libc_init_array+0x3c>)
9000be6a:	1b64      	subs	r4, r4, r5
9000be6c:	10a4      	asrs	r4, r4, #2
9000be6e:	2600      	movs	r6, #0
9000be70:	42a6      	cmp	r6, r4
9000be72:	d109      	bne.n	9000be88 <__libc_init_array+0x24>
9000be74:	4d0b      	ldr	r5, [pc, #44]	; (9000bea4 <__libc_init_array+0x40>)
9000be76:	4c0c      	ldr	r4, [pc, #48]	; (9000bea8 <__libc_init_array+0x44>)
9000be78:	f000 fea0 	bl	9000cbbc <_init>
9000be7c:	1b64      	subs	r4, r4, r5
9000be7e:	10a4      	asrs	r4, r4, #2
9000be80:	2600      	movs	r6, #0
9000be82:	42a6      	cmp	r6, r4
9000be84:	d105      	bne.n	9000be92 <__libc_init_array+0x2e>
9000be86:	bd70      	pop	{r4, r5, r6, pc}
9000be88:	f855 3b04 	ldr.w	r3, [r5], #4
9000be8c:	4798      	blx	r3
9000be8e:	3601      	adds	r6, #1
9000be90:	e7ee      	b.n	9000be70 <__libc_init_array+0xc>
9000be92:	f855 3b04 	ldr.w	r3, [r5], #4
9000be96:	4798      	blx	r3
9000be98:	3601      	adds	r6, #1
9000be9a:	e7f2      	b.n	9000be82 <__libc_init_array+0x1e>
9000be9c:	90011af4 	.word	0x90011af4
9000bea0:	90011af4 	.word	0x90011af4
9000bea4:	90011af4 	.word	0x90011af4
9000bea8:	90011af8 	.word	0x90011af8

9000beac <__retarget_lock_init_recursive>:
9000beac:	4770      	bx	lr

9000beae <__retarget_lock_acquire_recursive>:
9000beae:	4770      	bx	lr

9000beb0 <__retarget_lock_release_recursive>:
9000beb0:	4770      	bx	lr

9000beb2 <strcpy>:
9000beb2:	4603      	mov	r3, r0
9000beb4:	f811 2b01 	ldrb.w	r2, [r1], #1
9000beb8:	f803 2b01 	strb.w	r2, [r3], #1
9000bebc:	2a00      	cmp	r2, #0
9000bebe:	d1f9      	bne.n	9000beb4 <strcpy+0x2>
9000bec0:	4770      	bx	lr
	...

9000bec4 <_free_r>:
9000bec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
9000bec6:	2900      	cmp	r1, #0
9000bec8:	d044      	beq.n	9000bf54 <_free_r+0x90>
9000beca:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000bece:	9001      	str	r0, [sp, #4]
9000bed0:	2b00      	cmp	r3, #0
9000bed2:	f1a1 0404 	sub.w	r4, r1, #4
9000bed6:	bfb8      	it	lt
9000bed8:	18e4      	addlt	r4, r4, r3
9000beda:	f7ff fd15 	bl	9000b908 <__malloc_lock>
9000bede:	4a1e      	ldr	r2, [pc, #120]	; (9000bf58 <_free_r+0x94>)
9000bee0:	9801      	ldr	r0, [sp, #4]
9000bee2:	6813      	ldr	r3, [r2, #0]
9000bee4:	b933      	cbnz	r3, 9000bef4 <_free_r+0x30>
9000bee6:	6063      	str	r3, [r4, #4]
9000bee8:	6014      	str	r4, [r2, #0]
9000beea:	b003      	add	sp, #12
9000beec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9000bef0:	f7ff bd10 	b.w	9000b914 <__malloc_unlock>
9000bef4:	42a3      	cmp	r3, r4
9000bef6:	d908      	bls.n	9000bf0a <_free_r+0x46>
9000bef8:	6825      	ldr	r5, [r4, #0]
9000befa:	1961      	adds	r1, r4, r5
9000befc:	428b      	cmp	r3, r1
9000befe:	bf01      	itttt	eq
9000bf00:	6819      	ldreq	r1, [r3, #0]
9000bf02:	685b      	ldreq	r3, [r3, #4]
9000bf04:	1949      	addeq	r1, r1, r5
9000bf06:	6021      	streq	r1, [r4, #0]
9000bf08:	e7ed      	b.n	9000bee6 <_free_r+0x22>
9000bf0a:	461a      	mov	r2, r3
9000bf0c:	685b      	ldr	r3, [r3, #4]
9000bf0e:	b10b      	cbz	r3, 9000bf14 <_free_r+0x50>
9000bf10:	42a3      	cmp	r3, r4
9000bf12:	d9fa      	bls.n	9000bf0a <_free_r+0x46>
9000bf14:	6811      	ldr	r1, [r2, #0]
9000bf16:	1855      	adds	r5, r2, r1
9000bf18:	42a5      	cmp	r5, r4
9000bf1a:	d10b      	bne.n	9000bf34 <_free_r+0x70>
9000bf1c:	6824      	ldr	r4, [r4, #0]
9000bf1e:	4421      	add	r1, r4
9000bf20:	1854      	adds	r4, r2, r1
9000bf22:	42a3      	cmp	r3, r4
9000bf24:	6011      	str	r1, [r2, #0]
9000bf26:	d1e0      	bne.n	9000beea <_free_r+0x26>
9000bf28:	681c      	ldr	r4, [r3, #0]
9000bf2a:	685b      	ldr	r3, [r3, #4]
9000bf2c:	6053      	str	r3, [r2, #4]
9000bf2e:	440c      	add	r4, r1
9000bf30:	6014      	str	r4, [r2, #0]
9000bf32:	e7da      	b.n	9000beea <_free_r+0x26>
9000bf34:	d902      	bls.n	9000bf3c <_free_r+0x78>
9000bf36:	230c      	movs	r3, #12
9000bf38:	6003      	str	r3, [r0, #0]
9000bf3a:	e7d6      	b.n	9000beea <_free_r+0x26>
9000bf3c:	6825      	ldr	r5, [r4, #0]
9000bf3e:	1961      	adds	r1, r4, r5
9000bf40:	428b      	cmp	r3, r1
9000bf42:	bf04      	itt	eq
9000bf44:	6819      	ldreq	r1, [r3, #0]
9000bf46:	685b      	ldreq	r3, [r3, #4]
9000bf48:	6063      	str	r3, [r4, #4]
9000bf4a:	bf04      	itt	eq
9000bf4c:	1949      	addeq	r1, r1, r5
9000bf4e:	6021      	streq	r1, [r4, #0]
9000bf50:	6054      	str	r4, [r2, #4]
9000bf52:	e7ca      	b.n	9000beea <_free_r+0x26>
9000bf54:	b003      	add	sp, #12
9000bf56:	bd30      	pop	{r4, r5, pc}
9000bf58:	20010ac8 	.word	0x20010ac8

9000bf5c <__ssputs_r>:
9000bf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000bf60:	688e      	ldr	r6, [r1, #8]
9000bf62:	461f      	mov	r7, r3
9000bf64:	42be      	cmp	r6, r7
9000bf66:	680b      	ldr	r3, [r1, #0]
9000bf68:	4682      	mov	sl, r0
9000bf6a:	460c      	mov	r4, r1
9000bf6c:	4690      	mov	r8, r2
9000bf6e:	d82c      	bhi.n	9000bfca <__ssputs_r+0x6e>
9000bf70:	898a      	ldrh	r2, [r1, #12]
9000bf72:	f412 6f90 	tst.w	r2, #1152	; 0x480
9000bf76:	d026      	beq.n	9000bfc6 <__ssputs_r+0x6a>
9000bf78:	6965      	ldr	r5, [r4, #20]
9000bf7a:	6909      	ldr	r1, [r1, #16]
9000bf7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000bf80:	eba3 0901 	sub.w	r9, r3, r1
9000bf84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000bf88:	1c7b      	adds	r3, r7, #1
9000bf8a:	444b      	add	r3, r9
9000bf8c:	106d      	asrs	r5, r5, #1
9000bf8e:	429d      	cmp	r5, r3
9000bf90:	bf38      	it	cc
9000bf92:	461d      	movcc	r5, r3
9000bf94:	0553      	lsls	r3, r2, #21
9000bf96:	d527      	bpl.n	9000bfe8 <__ssputs_r+0x8c>
9000bf98:	4629      	mov	r1, r5
9000bf9a:	f7ff fc35 	bl	9000b808 <_malloc_r>
9000bf9e:	4606      	mov	r6, r0
9000bfa0:	b360      	cbz	r0, 9000bffc <__ssputs_r+0xa0>
9000bfa2:	6921      	ldr	r1, [r4, #16]
9000bfa4:	464a      	mov	r2, r9
9000bfa6:	f000 fd85 	bl	9000cab4 <memcpy>
9000bfaa:	89a3      	ldrh	r3, [r4, #12]
9000bfac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
9000bfb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000bfb4:	81a3      	strh	r3, [r4, #12]
9000bfb6:	6126      	str	r6, [r4, #16]
9000bfb8:	6165      	str	r5, [r4, #20]
9000bfba:	444e      	add	r6, r9
9000bfbc:	eba5 0509 	sub.w	r5, r5, r9
9000bfc0:	6026      	str	r6, [r4, #0]
9000bfc2:	60a5      	str	r5, [r4, #8]
9000bfc4:	463e      	mov	r6, r7
9000bfc6:	42be      	cmp	r6, r7
9000bfc8:	d900      	bls.n	9000bfcc <__ssputs_r+0x70>
9000bfca:	463e      	mov	r6, r7
9000bfcc:	6820      	ldr	r0, [r4, #0]
9000bfce:	4632      	mov	r2, r6
9000bfd0:	4641      	mov	r1, r8
9000bfd2:	f000 fd33 	bl	9000ca3c <memmove>
9000bfd6:	68a3      	ldr	r3, [r4, #8]
9000bfd8:	1b9b      	subs	r3, r3, r6
9000bfda:	60a3      	str	r3, [r4, #8]
9000bfdc:	6823      	ldr	r3, [r4, #0]
9000bfde:	4433      	add	r3, r6
9000bfe0:	6023      	str	r3, [r4, #0]
9000bfe2:	2000      	movs	r0, #0
9000bfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000bfe8:	462a      	mov	r2, r5
9000bfea:	f000 fd71 	bl	9000cad0 <_realloc_r>
9000bfee:	4606      	mov	r6, r0
9000bff0:	2800      	cmp	r0, #0
9000bff2:	d1e0      	bne.n	9000bfb6 <__ssputs_r+0x5a>
9000bff4:	6921      	ldr	r1, [r4, #16]
9000bff6:	4650      	mov	r0, sl
9000bff8:	f7ff ff64 	bl	9000bec4 <_free_r>
9000bffc:	230c      	movs	r3, #12
9000bffe:	f8ca 3000 	str.w	r3, [sl]
9000c002:	89a3      	ldrh	r3, [r4, #12]
9000c004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000c008:	81a3      	strh	r3, [r4, #12]
9000c00a:	f04f 30ff 	mov.w	r0, #4294967295
9000c00e:	e7e9      	b.n	9000bfe4 <__ssputs_r+0x88>

9000c010 <_svfiprintf_r>:
9000c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c014:	4698      	mov	r8, r3
9000c016:	898b      	ldrh	r3, [r1, #12]
9000c018:	061b      	lsls	r3, r3, #24
9000c01a:	b09d      	sub	sp, #116	; 0x74
9000c01c:	4607      	mov	r7, r0
9000c01e:	460d      	mov	r5, r1
9000c020:	4614      	mov	r4, r2
9000c022:	d50e      	bpl.n	9000c042 <_svfiprintf_r+0x32>
9000c024:	690b      	ldr	r3, [r1, #16]
9000c026:	b963      	cbnz	r3, 9000c042 <_svfiprintf_r+0x32>
9000c028:	2140      	movs	r1, #64	; 0x40
9000c02a:	f7ff fbed 	bl	9000b808 <_malloc_r>
9000c02e:	6028      	str	r0, [r5, #0]
9000c030:	6128      	str	r0, [r5, #16]
9000c032:	b920      	cbnz	r0, 9000c03e <_svfiprintf_r+0x2e>
9000c034:	230c      	movs	r3, #12
9000c036:	603b      	str	r3, [r7, #0]
9000c038:	f04f 30ff 	mov.w	r0, #4294967295
9000c03c:	e0d0      	b.n	9000c1e0 <_svfiprintf_r+0x1d0>
9000c03e:	2340      	movs	r3, #64	; 0x40
9000c040:	616b      	str	r3, [r5, #20]
9000c042:	2300      	movs	r3, #0
9000c044:	9309      	str	r3, [sp, #36]	; 0x24
9000c046:	2320      	movs	r3, #32
9000c048:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000c04c:	f8cd 800c 	str.w	r8, [sp, #12]
9000c050:	2330      	movs	r3, #48	; 0x30
9000c052:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 9000c1f8 <_svfiprintf_r+0x1e8>
9000c056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000c05a:	f04f 0901 	mov.w	r9, #1
9000c05e:	4623      	mov	r3, r4
9000c060:	469a      	mov	sl, r3
9000c062:	f813 2b01 	ldrb.w	r2, [r3], #1
9000c066:	b10a      	cbz	r2, 9000c06c <_svfiprintf_r+0x5c>
9000c068:	2a25      	cmp	r2, #37	; 0x25
9000c06a:	d1f9      	bne.n	9000c060 <_svfiprintf_r+0x50>
9000c06c:	ebba 0b04 	subs.w	fp, sl, r4
9000c070:	d00b      	beq.n	9000c08a <_svfiprintf_r+0x7a>
9000c072:	465b      	mov	r3, fp
9000c074:	4622      	mov	r2, r4
9000c076:	4629      	mov	r1, r5
9000c078:	4638      	mov	r0, r7
9000c07a:	f7ff ff6f 	bl	9000bf5c <__ssputs_r>
9000c07e:	3001      	adds	r0, #1
9000c080:	f000 80a9 	beq.w	9000c1d6 <_svfiprintf_r+0x1c6>
9000c084:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000c086:	445a      	add	r2, fp
9000c088:	9209      	str	r2, [sp, #36]	; 0x24
9000c08a:	f89a 3000 	ldrb.w	r3, [sl]
9000c08e:	2b00      	cmp	r3, #0
9000c090:	f000 80a1 	beq.w	9000c1d6 <_svfiprintf_r+0x1c6>
9000c094:	2300      	movs	r3, #0
9000c096:	f04f 32ff 	mov.w	r2, #4294967295
9000c09a:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000c09e:	f10a 0a01 	add.w	sl, sl, #1
9000c0a2:	9304      	str	r3, [sp, #16]
9000c0a4:	9307      	str	r3, [sp, #28]
9000c0a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000c0aa:	931a      	str	r3, [sp, #104]	; 0x68
9000c0ac:	4654      	mov	r4, sl
9000c0ae:	2205      	movs	r2, #5
9000c0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c0b4:	4850      	ldr	r0, [pc, #320]	; (9000c1f8 <_svfiprintf_r+0x1e8>)
9000c0b6:	f7f4 f8ab 	bl	90000210 <memchr>
9000c0ba:	9a04      	ldr	r2, [sp, #16]
9000c0bc:	b9d8      	cbnz	r0, 9000c0f6 <_svfiprintf_r+0xe6>
9000c0be:	06d0      	lsls	r0, r2, #27
9000c0c0:	bf44      	itt	mi
9000c0c2:	2320      	movmi	r3, #32
9000c0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000c0c8:	0711      	lsls	r1, r2, #28
9000c0ca:	bf44      	itt	mi
9000c0cc:	232b      	movmi	r3, #43	; 0x2b
9000c0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000c0d2:	f89a 3000 	ldrb.w	r3, [sl]
9000c0d6:	2b2a      	cmp	r3, #42	; 0x2a
9000c0d8:	d015      	beq.n	9000c106 <_svfiprintf_r+0xf6>
9000c0da:	9a07      	ldr	r2, [sp, #28]
9000c0dc:	4654      	mov	r4, sl
9000c0de:	2000      	movs	r0, #0
9000c0e0:	f04f 0c0a 	mov.w	ip, #10
9000c0e4:	4621      	mov	r1, r4
9000c0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
9000c0ea:	3b30      	subs	r3, #48	; 0x30
9000c0ec:	2b09      	cmp	r3, #9
9000c0ee:	d94d      	bls.n	9000c18c <_svfiprintf_r+0x17c>
9000c0f0:	b1b0      	cbz	r0, 9000c120 <_svfiprintf_r+0x110>
9000c0f2:	9207      	str	r2, [sp, #28]
9000c0f4:	e014      	b.n	9000c120 <_svfiprintf_r+0x110>
9000c0f6:	eba0 0308 	sub.w	r3, r0, r8
9000c0fa:	fa09 f303 	lsl.w	r3, r9, r3
9000c0fe:	4313      	orrs	r3, r2
9000c100:	9304      	str	r3, [sp, #16]
9000c102:	46a2      	mov	sl, r4
9000c104:	e7d2      	b.n	9000c0ac <_svfiprintf_r+0x9c>
9000c106:	9b03      	ldr	r3, [sp, #12]
9000c108:	1d19      	adds	r1, r3, #4
9000c10a:	681b      	ldr	r3, [r3, #0]
9000c10c:	9103      	str	r1, [sp, #12]
9000c10e:	2b00      	cmp	r3, #0
9000c110:	bfbb      	ittet	lt
9000c112:	425b      	neglt	r3, r3
9000c114:	f042 0202 	orrlt.w	r2, r2, #2
9000c118:	9307      	strge	r3, [sp, #28]
9000c11a:	9307      	strlt	r3, [sp, #28]
9000c11c:	bfb8      	it	lt
9000c11e:	9204      	strlt	r2, [sp, #16]
9000c120:	7823      	ldrb	r3, [r4, #0]
9000c122:	2b2e      	cmp	r3, #46	; 0x2e
9000c124:	d10c      	bne.n	9000c140 <_svfiprintf_r+0x130>
9000c126:	7863      	ldrb	r3, [r4, #1]
9000c128:	2b2a      	cmp	r3, #42	; 0x2a
9000c12a:	d134      	bne.n	9000c196 <_svfiprintf_r+0x186>
9000c12c:	9b03      	ldr	r3, [sp, #12]
9000c12e:	1d1a      	adds	r2, r3, #4
9000c130:	681b      	ldr	r3, [r3, #0]
9000c132:	9203      	str	r2, [sp, #12]
9000c134:	2b00      	cmp	r3, #0
9000c136:	bfb8      	it	lt
9000c138:	f04f 33ff 	movlt.w	r3, #4294967295
9000c13c:	3402      	adds	r4, #2
9000c13e:	9305      	str	r3, [sp, #20]
9000c140:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 9000c208 <_svfiprintf_r+0x1f8>
9000c144:	7821      	ldrb	r1, [r4, #0]
9000c146:	2203      	movs	r2, #3
9000c148:	4650      	mov	r0, sl
9000c14a:	f7f4 f861 	bl	90000210 <memchr>
9000c14e:	b138      	cbz	r0, 9000c160 <_svfiprintf_r+0x150>
9000c150:	9b04      	ldr	r3, [sp, #16]
9000c152:	eba0 000a 	sub.w	r0, r0, sl
9000c156:	2240      	movs	r2, #64	; 0x40
9000c158:	4082      	lsls	r2, r0
9000c15a:	4313      	orrs	r3, r2
9000c15c:	3401      	adds	r4, #1
9000c15e:	9304      	str	r3, [sp, #16]
9000c160:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c164:	4825      	ldr	r0, [pc, #148]	; (9000c1fc <_svfiprintf_r+0x1ec>)
9000c166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000c16a:	2206      	movs	r2, #6
9000c16c:	f7f4 f850 	bl	90000210 <memchr>
9000c170:	2800      	cmp	r0, #0
9000c172:	d038      	beq.n	9000c1e6 <_svfiprintf_r+0x1d6>
9000c174:	4b22      	ldr	r3, [pc, #136]	; (9000c200 <_svfiprintf_r+0x1f0>)
9000c176:	bb1b      	cbnz	r3, 9000c1c0 <_svfiprintf_r+0x1b0>
9000c178:	9b03      	ldr	r3, [sp, #12]
9000c17a:	3307      	adds	r3, #7
9000c17c:	f023 0307 	bic.w	r3, r3, #7
9000c180:	3308      	adds	r3, #8
9000c182:	9303      	str	r3, [sp, #12]
9000c184:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000c186:	4433      	add	r3, r6
9000c188:	9309      	str	r3, [sp, #36]	; 0x24
9000c18a:	e768      	b.n	9000c05e <_svfiprintf_r+0x4e>
9000c18c:	fb0c 3202 	mla	r2, ip, r2, r3
9000c190:	460c      	mov	r4, r1
9000c192:	2001      	movs	r0, #1
9000c194:	e7a6      	b.n	9000c0e4 <_svfiprintf_r+0xd4>
9000c196:	2300      	movs	r3, #0
9000c198:	3401      	adds	r4, #1
9000c19a:	9305      	str	r3, [sp, #20]
9000c19c:	4619      	mov	r1, r3
9000c19e:	f04f 0c0a 	mov.w	ip, #10
9000c1a2:	4620      	mov	r0, r4
9000c1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
9000c1a8:	3a30      	subs	r2, #48	; 0x30
9000c1aa:	2a09      	cmp	r2, #9
9000c1ac:	d903      	bls.n	9000c1b6 <_svfiprintf_r+0x1a6>
9000c1ae:	2b00      	cmp	r3, #0
9000c1b0:	d0c6      	beq.n	9000c140 <_svfiprintf_r+0x130>
9000c1b2:	9105      	str	r1, [sp, #20]
9000c1b4:	e7c4      	b.n	9000c140 <_svfiprintf_r+0x130>
9000c1b6:	fb0c 2101 	mla	r1, ip, r1, r2
9000c1ba:	4604      	mov	r4, r0
9000c1bc:	2301      	movs	r3, #1
9000c1be:	e7f0      	b.n	9000c1a2 <_svfiprintf_r+0x192>
9000c1c0:	ab03      	add	r3, sp, #12
9000c1c2:	9300      	str	r3, [sp, #0]
9000c1c4:	462a      	mov	r2, r5
9000c1c6:	4b0f      	ldr	r3, [pc, #60]	; (9000c204 <_svfiprintf_r+0x1f4>)
9000c1c8:	a904      	add	r1, sp, #16
9000c1ca:	4638      	mov	r0, r7
9000c1cc:	f3af 8000 	nop.w
9000c1d0:	1c42      	adds	r2, r0, #1
9000c1d2:	4606      	mov	r6, r0
9000c1d4:	d1d6      	bne.n	9000c184 <_svfiprintf_r+0x174>
9000c1d6:	89ab      	ldrh	r3, [r5, #12]
9000c1d8:	065b      	lsls	r3, r3, #25
9000c1da:	f53f af2d 	bmi.w	9000c038 <_svfiprintf_r+0x28>
9000c1de:	9809      	ldr	r0, [sp, #36]	; 0x24
9000c1e0:	b01d      	add	sp, #116	; 0x74
9000c1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000c1e6:	ab03      	add	r3, sp, #12
9000c1e8:	9300      	str	r3, [sp, #0]
9000c1ea:	462a      	mov	r2, r5
9000c1ec:	4b05      	ldr	r3, [pc, #20]	; (9000c204 <_svfiprintf_r+0x1f4>)
9000c1ee:	a904      	add	r1, sp, #16
9000c1f0:	4638      	mov	r0, r7
9000c1f2:	f000 f9bd 	bl	9000c570 <_printf_i>
9000c1f6:	e7eb      	b.n	9000c1d0 <_svfiprintf_r+0x1c0>
9000c1f8:	90011ab6 	.word	0x90011ab6
9000c1fc:	90011ac0 	.word	0x90011ac0
9000c200:	00000000 	.word	0x00000000
9000c204:	9000bf5d 	.word	0x9000bf5d
9000c208:	90011abc 	.word	0x90011abc

9000c20c <__sfputc_r>:
9000c20c:	6893      	ldr	r3, [r2, #8]
9000c20e:	3b01      	subs	r3, #1
9000c210:	2b00      	cmp	r3, #0
9000c212:	b410      	push	{r4}
9000c214:	6093      	str	r3, [r2, #8]
9000c216:	da08      	bge.n	9000c22a <__sfputc_r+0x1e>
9000c218:	6994      	ldr	r4, [r2, #24]
9000c21a:	42a3      	cmp	r3, r4
9000c21c:	db01      	blt.n	9000c222 <__sfputc_r+0x16>
9000c21e:	290a      	cmp	r1, #10
9000c220:	d103      	bne.n	9000c22a <__sfputc_r+0x1e>
9000c222:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c226:	f7ff bd16 	b.w	9000bc56 <__swbuf_r>
9000c22a:	6813      	ldr	r3, [r2, #0]
9000c22c:	1c58      	adds	r0, r3, #1
9000c22e:	6010      	str	r0, [r2, #0]
9000c230:	7019      	strb	r1, [r3, #0]
9000c232:	4608      	mov	r0, r1
9000c234:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c238:	4770      	bx	lr

9000c23a <__sfputs_r>:
9000c23a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c23c:	4606      	mov	r6, r0
9000c23e:	460f      	mov	r7, r1
9000c240:	4614      	mov	r4, r2
9000c242:	18d5      	adds	r5, r2, r3
9000c244:	42ac      	cmp	r4, r5
9000c246:	d101      	bne.n	9000c24c <__sfputs_r+0x12>
9000c248:	2000      	movs	r0, #0
9000c24a:	e007      	b.n	9000c25c <__sfputs_r+0x22>
9000c24c:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c250:	463a      	mov	r2, r7
9000c252:	4630      	mov	r0, r6
9000c254:	f7ff ffda 	bl	9000c20c <__sfputc_r>
9000c258:	1c43      	adds	r3, r0, #1
9000c25a:	d1f3      	bne.n	9000c244 <__sfputs_r+0xa>
9000c25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000c260 <_vfiprintf_r>:
9000c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c264:	460d      	mov	r5, r1
9000c266:	b09d      	sub	sp, #116	; 0x74
9000c268:	4614      	mov	r4, r2
9000c26a:	4698      	mov	r8, r3
9000c26c:	4606      	mov	r6, r0
9000c26e:	b118      	cbz	r0, 9000c278 <_vfiprintf_r+0x18>
9000c270:	6a03      	ldr	r3, [r0, #32]
9000c272:	b90b      	cbnz	r3, 9000c278 <_vfiprintf_r+0x18>
9000c274:	f7ff fbe0 	bl	9000ba38 <__sinit>
9000c278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000c27a:	07d9      	lsls	r1, r3, #31
9000c27c:	d405      	bmi.n	9000c28a <_vfiprintf_r+0x2a>
9000c27e:	89ab      	ldrh	r3, [r5, #12]
9000c280:	059a      	lsls	r2, r3, #22
9000c282:	d402      	bmi.n	9000c28a <_vfiprintf_r+0x2a>
9000c284:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000c286:	f7ff fe12 	bl	9000beae <__retarget_lock_acquire_recursive>
9000c28a:	89ab      	ldrh	r3, [r5, #12]
9000c28c:	071b      	lsls	r3, r3, #28
9000c28e:	d501      	bpl.n	9000c294 <_vfiprintf_r+0x34>
9000c290:	692b      	ldr	r3, [r5, #16]
9000c292:	b99b      	cbnz	r3, 9000c2bc <_vfiprintf_r+0x5c>
9000c294:	4629      	mov	r1, r5
9000c296:	4630      	mov	r0, r6
9000c298:	f7ff fd1a 	bl	9000bcd0 <__swsetup_r>
9000c29c:	b170      	cbz	r0, 9000c2bc <_vfiprintf_r+0x5c>
9000c29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000c2a0:	07dc      	lsls	r4, r3, #31
9000c2a2:	d504      	bpl.n	9000c2ae <_vfiprintf_r+0x4e>
9000c2a4:	f04f 30ff 	mov.w	r0, #4294967295
9000c2a8:	b01d      	add	sp, #116	; 0x74
9000c2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000c2ae:	89ab      	ldrh	r3, [r5, #12]
9000c2b0:	0598      	lsls	r0, r3, #22
9000c2b2:	d4f7      	bmi.n	9000c2a4 <_vfiprintf_r+0x44>
9000c2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000c2b6:	f7ff fdfb 	bl	9000beb0 <__retarget_lock_release_recursive>
9000c2ba:	e7f3      	b.n	9000c2a4 <_vfiprintf_r+0x44>
9000c2bc:	2300      	movs	r3, #0
9000c2be:	9309      	str	r3, [sp, #36]	; 0x24
9000c2c0:	2320      	movs	r3, #32
9000c2c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000c2c6:	f8cd 800c 	str.w	r8, [sp, #12]
9000c2ca:	2330      	movs	r3, #48	; 0x30
9000c2cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 9000c480 <_vfiprintf_r+0x220>
9000c2d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000c2d4:	f04f 0901 	mov.w	r9, #1
9000c2d8:	4623      	mov	r3, r4
9000c2da:	469a      	mov	sl, r3
9000c2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
9000c2e0:	b10a      	cbz	r2, 9000c2e6 <_vfiprintf_r+0x86>
9000c2e2:	2a25      	cmp	r2, #37	; 0x25
9000c2e4:	d1f9      	bne.n	9000c2da <_vfiprintf_r+0x7a>
9000c2e6:	ebba 0b04 	subs.w	fp, sl, r4
9000c2ea:	d00b      	beq.n	9000c304 <_vfiprintf_r+0xa4>
9000c2ec:	465b      	mov	r3, fp
9000c2ee:	4622      	mov	r2, r4
9000c2f0:	4629      	mov	r1, r5
9000c2f2:	4630      	mov	r0, r6
9000c2f4:	f7ff ffa1 	bl	9000c23a <__sfputs_r>
9000c2f8:	3001      	adds	r0, #1
9000c2fa:	f000 80a9 	beq.w	9000c450 <_vfiprintf_r+0x1f0>
9000c2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000c300:	445a      	add	r2, fp
9000c302:	9209      	str	r2, [sp, #36]	; 0x24
9000c304:	f89a 3000 	ldrb.w	r3, [sl]
9000c308:	2b00      	cmp	r3, #0
9000c30a:	f000 80a1 	beq.w	9000c450 <_vfiprintf_r+0x1f0>
9000c30e:	2300      	movs	r3, #0
9000c310:	f04f 32ff 	mov.w	r2, #4294967295
9000c314:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000c318:	f10a 0a01 	add.w	sl, sl, #1
9000c31c:	9304      	str	r3, [sp, #16]
9000c31e:	9307      	str	r3, [sp, #28]
9000c320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000c324:	931a      	str	r3, [sp, #104]	; 0x68
9000c326:	4654      	mov	r4, sl
9000c328:	2205      	movs	r2, #5
9000c32a:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c32e:	4854      	ldr	r0, [pc, #336]	; (9000c480 <_vfiprintf_r+0x220>)
9000c330:	f7f3 ff6e 	bl	90000210 <memchr>
9000c334:	9a04      	ldr	r2, [sp, #16]
9000c336:	b9d8      	cbnz	r0, 9000c370 <_vfiprintf_r+0x110>
9000c338:	06d1      	lsls	r1, r2, #27
9000c33a:	bf44      	itt	mi
9000c33c:	2320      	movmi	r3, #32
9000c33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000c342:	0713      	lsls	r3, r2, #28
9000c344:	bf44      	itt	mi
9000c346:	232b      	movmi	r3, #43	; 0x2b
9000c348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000c34c:	f89a 3000 	ldrb.w	r3, [sl]
9000c350:	2b2a      	cmp	r3, #42	; 0x2a
9000c352:	d015      	beq.n	9000c380 <_vfiprintf_r+0x120>
9000c354:	9a07      	ldr	r2, [sp, #28]
9000c356:	4654      	mov	r4, sl
9000c358:	2000      	movs	r0, #0
9000c35a:	f04f 0c0a 	mov.w	ip, #10
9000c35e:	4621      	mov	r1, r4
9000c360:	f811 3b01 	ldrb.w	r3, [r1], #1
9000c364:	3b30      	subs	r3, #48	; 0x30
9000c366:	2b09      	cmp	r3, #9
9000c368:	d94d      	bls.n	9000c406 <_vfiprintf_r+0x1a6>
9000c36a:	b1b0      	cbz	r0, 9000c39a <_vfiprintf_r+0x13a>
9000c36c:	9207      	str	r2, [sp, #28]
9000c36e:	e014      	b.n	9000c39a <_vfiprintf_r+0x13a>
9000c370:	eba0 0308 	sub.w	r3, r0, r8
9000c374:	fa09 f303 	lsl.w	r3, r9, r3
9000c378:	4313      	orrs	r3, r2
9000c37a:	9304      	str	r3, [sp, #16]
9000c37c:	46a2      	mov	sl, r4
9000c37e:	e7d2      	b.n	9000c326 <_vfiprintf_r+0xc6>
9000c380:	9b03      	ldr	r3, [sp, #12]
9000c382:	1d19      	adds	r1, r3, #4
9000c384:	681b      	ldr	r3, [r3, #0]
9000c386:	9103      	str	r1, [sp, #12]
9000c388:	2b00      	cmp	r3, #0
9000c38a:	bfbb      	ittet	lt
9000c38c:	425b      	neglt	r3, r3
9000c38e:	f042 0202 	orrlt.w	r2, r2, #2
9000c392:	9307      	strge	r3, [sp, #28]
9000c394:	9307      	strlt	r3, [sp, #28]
9000c396:	bfb8      	it	lt
9000c398:	9204      	strlt	r2, [sp, #16]
9000c39a:	7823      	ldrb	r3, [r4, #0]
9000c39c:	2b2e      	cmp	r3, #46	; 0x2e
9000c39e:	d10c      	bne.n	9000c3ba <_vfiprintf_r+0x15a>
9000c3a0:	7863      	ldrb	r3, [r4, #1]
9000c3a2:	2b2a      	cmp	r3, #42	; 0x2a
9000c3a4:	d134      	bne.n	9000c410 <_vfiprintf_r+0x1b0>
9000c3a6:	9b03      	ldr	r3, [sp, #12]
9000c3a8:	1d1a      	adds	r2, r3, #4
9000c3aa:	681b      	ldr	r3, [r3, #0]
9000c3ac:	9203      	str	r2, [sp, #12]
9000c3ae:	2b00      	cmp	r3, #0
9000c3b0:	bfb8      	it	lt
9000c3b2:	f04f 33ff 	movlt.w	r3, #4294967295
9000c3b6:	3402      	adds	r4, #2
9000c3b8:	9305      	str	r3, [sp, #20]
9000c3ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 9000c490 <_vfiprintf_r+0x230>
9000c3be:	7821      	ldrb	r1, [r4, #0]
9000c3c0:	2203      	movs	r2, #3
9000c3c2:	4650      	mov	r0, sl
9000c3c4:	f7f3 ff24 	bl	90000210 <memchr>
9000c3c8:	b138      	cbz	r0, 9000c3da <_vfiprintf_r+0x17a>
9000c3ca:	9b04      	ldr	r3, [sp, #16]
9000c3cc:	eba0 000a 	sub.w	r0, r0, sl
9000c3d0:	2240      	movs	r2, #64	; 0x40
9000c3d2:	4082      	lsls	r2, r0
9000c3d4:	4313      	orrs	r3, r2
9000c3d6:	3401      	adds	r4, #1
9000c3d8:	9304      	str	r3, [sp, #16]
9000c3da:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c3de:	4829      	ldr	r0, [pc, #164]	; (9000c484 <_vfiprintf_r+0x224>)
9000c3e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000c3e4:	2206      	movs	r2, #6
9000c3e6:	f7f3 ff13 	bl	90000210 <memchr>
9000c3ea:	2800      	cmp	r0, #0
9000c3ec:	d03f      	beq.n	9000c46e <_vfiprintf_r+0x20e>
9000c3ee:	4b26      	ldr	r3, [pc, #152]	; (9000c488 <_vfiprintf_r+0x228>)
9000c3f0:	bb1b      	cbnz	r3, 9000c43a <_vfiprintf_r+0x1da>
9000c3f2:	9b03      	ldr	r3, [sp, #12]
9000c3f4:	3307      	adds	r3, #7
9000c3f6:	f023 0307 	bic.w	r3, r3, #7
9000c3fa:	3308      	adds	r3, #8
9000c3fc:	9303      	str	r3, [sp, #12]
9000c3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000c400:	443b      	add	r3, r7
9000c402:	9309      	str	r3, [sp, #36]	; 0x24
9000c404:	e768      	b.n	9000c2d8 <_vfiprintf_r+0x78>
9000c406:	fb0c 3202 	mla	r2, ip, r2, r3
9000c40a:	460c      	mov	r4, r1
9000c40c:	2001      	movs	r0, #1
9000c40e:	e7a6      	b.n	9000c35e <_vfiprintf_r+0xfe>
9000c410:	2300      	movs	r3, #0
9000c412:	3401      	adds	r4, #1
9000c414:	9305      	str	r3, [sp, #20]
9000c416:	4619      	mov	r1, r3
9000c418:	f04f 0c0a 	mov.w	ip, #10
9000c41c:	4620      	mov	r0, r4
9000c41e:	f810 2b01 	ldrb.w	r2, [r0], #1
9000c422:	3a30      	subs	r2, #48	; 0x30
9000c424:	2a09      	cmp	r2, #9
9000c426:	d903      	bls.n	9000c430 <_vfiprintf_r+0x1d0>
9000c428:	2b00      	cmp	r3, #0
9000c42a:	d0c6      	beq.n	9000c3ba <_vfiprintf_r+0x15a>
9000c42c:	9105      	str	r1, [sp, #20]
9000c42e:	e7c4      	b.n	9000c3ba <_vfiprintf_r+0x15a>
9000c430:	fb0c 2101 	mla	r1, ip, r1, r2
9000c434:	4604      	mov	r4, r0
9000c436:	2301      	movs	r3, #1
9000c438:	e7f0      	b.n	9000c41c <_vfiprintf_r+0x1bc>
9000c43a:	ab03      	add	r3, sp, #12
9000c43c:	9300      	str	r3, [sp, #0]
9000c43e:	462a      	mov	r2, r5
9000c440:	4b12      	ldr	r3, [pc, #72]	; (9000c48c <_vfiprintf_r+0x22c>)
9000c442:	a904      	add	r1, sp, #16
9000c444:	4630      	mov	r0, r6
9000c446:	f3af 8000 	nop.w
9000c44a:	4607      	mov	r7, r0
9000c44c:	1c78      	adds	r0, r7, #1
9000c44e:	d1d6      	bne.n	9000c3fe <_vfiprintf_r+0x19e>
9000c450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000c452:	07d9      	lsls	r1, r3, #31
9000c454:	d405      	bmi.n	9000c462 <_vfiprintf_r+0x202>
9000c456:	89ab      	ldrh	r3, [r5, #12]
9000c458:	059a      	lsls	r2, r3, #22
9000c45a:	d402      	bmi.n	9000c462 <_vfiprintf_r+0x202>
9000c45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000c45e:	f7ff fd27 	bl	9000beb0 <__retarget_lock_release_recursive>
9000c462:	89ab      	ldrh	r3, [r5, #12]
9000c464:	065b      	lsls	r3, r3, #25
9000c466:	f53f af1d 	bmi.w	9000c2a4 <_vfiprintf_r+0x44>
9000c46a:	9809      	ldr	r0, [sp, #36]	; 0x24
9000c46c:	e71c      	b.n	9000c2a8 <_vfiprintf_r+0x48>
9000c46e:	ab03      	add	r3, sp, #12
9000c470:	9300      	str	r3, [sp, #0]
9000c472:	462a      	mov	r2, r5
9000c474:	4b05      	ldr	r3, [pc, #20]	; (9000c48c <_vfiprintf_r+0x22c>)
9000c476:	a904      	add	r1, sp, #16
9000c478:	4630      	mov	r0, r6
9000c47a:	f000 f879 	bl	9000c570 <_printf_i>
9000c47e:	e7e4      	b.n	9000c44a <_vfiprintf_r+0x1ea>
9000c480:	90011ab6 	.word	0x90011ab6
9000c484:	90011ac0 	.word	0x90011ac0
9000c488:	00000000 	.word	0x00000000
9000c48c:	9000c23b 	.word	0x9000c23b
9000c490:	90011abc 	.word	0x90011abc

9000c494 <_printf_common>:
9000c494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c498:	4616      	mov	r6, r2
9000c49a:	4699      	mov	r9, r3
9000c49c:	688a      	ldr	r2, [r1, #8]
9000c49e:	690b      	ldr	r3, [r1, #16]
9000c4a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
9000c4a4:	4293      	cmp	r3, r2
9000c4a6:	bfb8      	it	lt
9000c4a8:	4613      	movlt	r3, r2
9000c4aa:	6033      	str	r3, [r6, #0]
9000c4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
9000c4b0:	4607      	mov	r7, r0
9000c4b2:	460c      	mov	r4, r1
9000c4b4:	b10a      	cbz	r2, 9000c4ba <_printf_common+0x26>
9000c4b6:	3301      	adds	r3, #1
9000c4b8:	6033      	str	r3, [r6, #0]
9000c4ba:	6823      	ldr	r3, [r4, #0]
9000c4bc:	0699      	lsls	r1, r3, #26
9000c4be:	bf42      	ittt	mi
9000c4c0:	6833      	ldrmi	r3, [r6, #0]
9000c4c2:	3302      	addmi	r3, #2
9000c4c4:	6033      	strmi	r3, [r6, #0]
9000c4c6:	6825      	ldr	r5, [r4, #0]
9000c4c8:	f015 0506 	ands.w	r5, r5, #6
9000c4cc:	d106      	bne.n	9000c4dc <_printf_common+0x48>
9000c4ce:	f104 0a19 	add.w	sl, r4, #25
9000c4d2:	68e3      	ldr	r3, [r4, #12]
9000c4d4:	6832      	ldr	r2, [r6, #0]
9000c4d6:	1a9b      	subs	r3, r3, r2
9000c4d8:	42ab      	cmp	r3, r5
9000c4da:	dc26      	bgt.n	9000c52a <_printf_common+0x96>
9000c4dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
9000c4e0:	1e13      	subs	r3, r2, #0
9000c4e2:	6822      	ldr	r2, [r4, #0]
9000c4e4:	bf18      	it	ne
9000c4e6:	2301      	movne	r3, #1
9000c4e8:	0692      	lsls	r2, r2, #26
9000c4ea:	d42b      	bmi.n	9000c544 <_printf_common+0xb0>
9000c4ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
9000c4f0:	4649      	mov	r1, r9
9000c4f2:	4638      	mov	r0, r7
9000c4f4:	47c0      	blx	r8
9000c4f6:	3001      	adds	r0, #1
9000c4f8:	d01e      	beq.n	9000c538 <_printf_common+0xa4>
9000c4fa:	6823      	ldr	r3, [r4, #0]
9000c4fc:	6922      	ldr	r2, [r4, #16]
9000c4fe:	f003 0306 	and.w	r3, r3, #6
9000c502:	2b04      	cmp	r3, #4
9000c504:	bf02      	ittt	eq
9000c506:	68e5      	ldreq	r5, [r4, #12]
9000c508:	6833      	ldreq	r3, [r6, #0]
9000c50a:	1aed      	subeq	r5, r5, r3
9000c50c:	68a3      	ldr	r3, [r4, #8]
9000c50e:	bf0c      	ite	eq
9000c510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000c514:	2500      	movne	r5, #0
9000c516:	4293      	cmp	r3, r2
9000c518:	bfc4      	itt	gt
9000c51a:	1a9b      	subgt	r3, r3, r2
9000c51c:	18ed      	addgt	r5, r5, r3
9000c51e:	2600      	movs	r6, #0
9000c520:	341a      	adds	r4, #26
9000c522:	42b5      	cmp	r5, r6
9000c524:	d11a      	bne.n	9000c55c <_printf_common+0xc8>
9000c526:	2000      	movs	r0, #0
9000c528:	e008      	b.n	9000c53c <_printf_common+0xa8>
9000c52a:	2301      	movs	r3, #1
9000c52c:	4652      	mov	r2, sl
9000c52e:	4649      	mov	r1, r9
9000c530:	4638      	mov	r0, r7
9000c532:	47c0      	blx	r8
9000c534:	3001      	adds	r0, #1
9000c536:	d103      	bne.n	9000c540 <_printf_common+0xac>
9000c538:	f04f 30ff 	mov.w	r0, #4294967295
9000c53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c540:	3501      	adds	r5, #1
9000c542:	e7c6      	b.n	9000c4d2 <_printf_common+0x3e>
9000c544:	18e1      	adds	r1, r4, r3
9000c546:	1c5a      	adds	r2, r3, #1
9000c548:	2030      	movs	r0, #48	; 0x30
9000c54a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9000c54e:	4422      	add	r2, r4
9000c550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
9000c554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
9000c558:	3302      	adds	r3, #2
9000c55a:	e7c7      	b.n	9000c4ec <_printf_common+0x58>
9000c55c:	2301      	movs	r3, #1
9000c55e:	4622      	mov	r2, r4
9000c560:	4649      	mov	r1, r9
9000c562:	4638      	mov	r0, r7
9000c564:	47c0      	blx	r8
9000c566:	3001      	adds	r0, #1
9000c568:	d0e6      	beq.n	9000c538 <_printf_common+0xa4>
9000c56a:	3601      	adds	r6, #1
9000c56c:	e7d9      	b.n	9000c522 <_printf_common+0x8e>
	...

9000c570 <_printf_i>:
9000c570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000c574:	7e0f      	ldrb	r7, [r1, #24]
9000c576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000c578:	2f78      	cmp	r7, #120	; 0x78
9000c57a:	4691      	mov	r9, r2
9000c57c:	4680      	mov	r8, r0
9000c57e:	460c      	mov	r4, r1
9000c580:	469a      	mov	sl, r3
9000c582:	f101 0243 	add.w	r2, r1, #67	; 0x43
9000c586:	d807      	bhi.n	9000c598 <_printf_i+0x28>
9000c588:	2f62      	cmp	r7, #98	; 0x62
9000c58a:	d80a      	bhi.n	9000c5a2 <_printf_i+0x32>
9000c58c:	2f00      	cmp	r7, #0
9000c58e:	f000 80d4 	beq.w	9000c73a <_printf_i+0x1ca>
9000c592:	2f58      	cmp	r7, #88	; 0x58
9000c594:	f000 80c0 	beq.w	9000c718 <_printf_i+0x1a8>
9000c598:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000c59c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
9000c5a0:	e03a      	b.n	9000c618 <_printf_i+0xa8>
9000c5a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
9000c5a6:	2b15      	cmp	r3, #21
9000c5a8:	d8f6      	bhi.n	9000c598 <_printf_i+0x28>
9000c5aa:	a101      	add	r1, pc, #4	; (adr r1, 9000c5b0 <_printf_i+0x40>)
9000c5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000c5b0:	9000c609 	.word	0x9000c609
9000c5b4:	9000c61d 	.word	0x9000c61d
9000c5b8:	9000c599 	.word	0x9000c599
9000c5bc:	9000c599 	.word	0x9000c599
9000c5c0:	9000c599 	.word	0x9000c599
9000c5c4:	9000c599 	.word	0x9000c599
9000c5c8:	9000c61d 	.word	0x9000c61d
9000c5cc:	9000c599 	.word	0x9000c599
9000c5d0:	9000c599 	.word	0x9000c599
9000c5d4:	9000c599 	.word	0x9000c599
9000c5d8:	9000c599 	.word	0x9000c599
9000c5dc:	9000c721 	.word	0x9000c721
9000c5e0:	9000c649 	.word	0x9000c649
9000c5e4:	9000c6db 	.word	0x9000c6db
9000c5e8:	9000c599 	.word	0x9000c599
9000c5ec:	9000c599 	.word	0x9000c599
9000c5f0:	9000c743 	.word	0x9000c743
9000c5f4:	9000c599 	.word	0x9000c599
9000c5f8:	9000c649 	.word	0x9000c649
9000c5fc:	9000c599 	.word	0x9000c599
9000c600:	9000c599 	.word	0x9000c599
9000c604:	9000c6e3 	.word	0x9000c6e3
9000c608:	682b      	ldr	r3, [r5, #0]
9000c60a:	1d1a      	adds	r2, r3, #4
9000c60c:	681b      	ldr	r3, [r3, #0]
9000c60e:	602a      	str	r2, [r5, #0]
9000c610:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000c614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000c618:	2301      	movs	r3, #1
9000c61a:	e09f      	b.n	9000c75c <_printf_i+0x1ec>
9000c61c:	6820      	ldr	r0, [r4, #0]
9000c61e:	682b      	ldr	r3, [r5, #0]
9000c620:	0607      	lsls	r7, r0, #24
9000c622:	f103 0104 	add.w	r1, r3, #4
9000c626:	6029      	str	r1, [r5, #0]
9000c628:	d501      	bpl.n	9000c62e <_printf_i+0xbe>
9000c62a:	681e      	ldr	r6, [r3, #0]
9000c62c:	e003      	b.n	9000c636 <_printf_i+0xc6>
9000c62e:	0646      	lsls	r6, r0, #25
9000c630:	d5fb      	bpl.n	9000c62a <_printf_i+0xba>
9000c632:	f9b3 6000 	ldrsh.w	r6, [r3]
9000c636:	2e00      	cmp	r6, #0
9000c638:	da03      	bge.n	9000c642 <_printf_i+0xd2>
9000c63a:	232d      	movs	r3, #45	; 0x2d
9000c63c:	4276      	negs	r6, r6
9000c63e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000c642:	485a      	ldr	r0, [pc, #360]	; (9000c7ac <_printf_i+0x23c>)
9000c644:	230a      	movs	r3, #10
9000c646:	e012      	b.n	9000c66e <_printf_i+0xfe>
9000c648:	682b      	ldr	r3, [r5, #0]
9000c64a:	6820      	ldr	r0, [r4, #0]
9000c64c:	1d19      	adds	r1, r3, #4
9000c64e:	6029      	str	r1, [r5, #0]
9000c650:	0605      	lsls	r5, r0, #24
9000c652:	d501      	bpl.n	9000c658 <_printf_i+0xe8>
9000c654:	681e      	ldr	r6, [r3, #0]
9000c656:	e002      	b.n	9000c65e <_printf_i+0xee>
9000c658:	0641      	lsls	r1, r0, #25
9000c65a:	d5fb      	bpl.n	9000c654 <_printf_i+0xe4>
9000c65c:	881e      	ldrh	r6, [r3, #0]
9000c65e:	4853      	ldr	r0, [pc, #332]	; (9000c7ac <_printf_i+0x23c>)
9000c660:	2f6f      	cmp	r7, #111	; 0x6f
9000c662:	bf0c      	ite	eq
9000c664:	2308      	moveq	r3, #8
9000c666:	230a      	movne	r3, #10
9000c668:	2100      	movs	r1, #0
9000c66a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
9000c66e:	6865      	ldr	r5, [r4, #4]
9000c670:	60a5      	str	r5, [r4, #8]
9000c672:	2d00      	cmp	r5, #0
9000c674:	bfa2      	ittt	ge
9000c676:	6821      	ldrge	r1, [r4, #0]
9000c678:	f021 0104 	bicge.w	r1, r1, #4
9000c67c:	6021      	strge	r1, [r4, #0]
9000c67e:	b90e      	cbnz	r6, 9000c684 <_printf_i+0x114>
9000c680:	2d00      	cmp	r5, #0
9000c682:	d04b      	beq.n	9000c71c <_printf_i+0x1ac>
9000c684:	4615      	mov	r5, r2
9000c686:	fbb6 f1f3 	udiv	r1, r6, r3
9000c68a:	fb03 6711 	mls	r7, r3, r1, r6
9000c68e:	5dc7      	ldrb	r7, [r0, r7]
9000c690:	f805 7d01 	strb.w	r7, [r5, #-1]!
9000c694:	4637      	mov	r7, r6
9000c696:	42bb      	cmp	r3, r7
9000c698:	460e      	mov	r6, r1
9000c69a:	d9f4      	bls.n	9000c686 <_printf_i+0x116>
9000c69c:	2b08      	cmp	r3, #8
9000c69e:	d10b      	bne.n	9000c6b8 <_printf_i+0x148>
9000c6a0:	6823      	ldr	r3, [r4, #0]
9000c6a2:	07de      	lsls	r6, r3, #31
9000c6a4:	d508      	bpl.n	9000c6b8 <_printf_i+0x148>
9000c6a6:	6923      	ldr	r3, [r4, #16]
9000c6a8:	6861      	ldr	r1, [r4, #4]
9000c6aa:	4299      	cmp	r1, r3
9000c6ac:	bfde      	ittt	le
9000c6ae:	2330      	movle	r3, #48	; 0x30
9000c6b0:	f805 3c01 	strble.w	r3, [r5, #-1]
9000c6b4:	f105 35ff 	addle.w	r5, r5, #4294967295
9000c6b8:	1b52      	subs	r2, r2, r5
9000c6ba:	6122      	str	r2, [r4, #16]
9000c6bc:	f8cd a000 	str.w	sl, [sp]
9000c6c0:	464b      	mov	r3, r9
9000c6c2:	aa03      	add	r2, sp, #12
9000c6c4:	4621      	mov	r1, r4
9000c6c6:	4640      	mov	r0, r8
9000c6c8:	f7ff fee4 	bl	9000c494 <_printf_common>
9000c6cc:	3001      	adds	r0, #1
9000c6ce:	d14a      	bne.n	9000c766 <_printf_i+0x1f6>
9000c6d0:	f04f 30ff 	mov.w	r0, #4294967295
9000c6d4:	b004      	add	sp, #16
9000c6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c6da:	6823      	ldr	r3, [r4, #0]
9000c6dc:	f043 0320 	orr.w	r3, r3, #32
9000c6e0:	6023      	str	r3, [r4, #0]
9000c6e2:	4833      	ldr	r0, [pc, #204]	; (9000c7b0 <_printf_i+0x240>)
9000c6e4:	2778      	movs	r7, #120	; 0x78
9000c6e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
9000c6ea:	6823      	ldr	r3, [r4, #0]
9000c6ec:	6829      	ldr	r1, [r5, #0]
9000c6ee:	061f      	lsls	r7, r3, #24
9000c6f0:	f851 6b04 	ldr.w	r6, [r1], #4
9000c6f4:	d402      	bmi.n	9000c6fc <_printf_i+0x18c>
9000c6f6:	065f      	lsls	r7, r3, #25
9000c6f8:	bf48      	it	mi
9000c6fa:	b2b6      	uxthmi	r6, r6
9000c6fc:	07df      	lsls	r7, r3, #31
9000c6fe:	bf48      	it	mi
9000c700:	f043 0320 	orrmi.w	r3, r3, #32
9000c704:	6029      	str	r1, [r5, #0]
9000c706:	bf48      	it	mi
9000c708:	6023      	strmi	r3, [r4, #0]
9000c70a:	b91e      	cbnz	r6, 9000c714 <_printf_i+0x1a4>
9000c70c:	6823      	ldr	r3, [r4, #0]
9000c70e:	f023 0320 	bic.w	r3, r3, #32
9000c712:	6023      	str	r3, [r4, #0]
9000c714:	2310      	movs	r3, #16
9000c716:	e7a7      	b.n	9000c668 <_printf_i+0xf8>
9000c718:	4824      	ldr	r0, [pc, #144]	; (9000c7ac <_printf_i+0x23c>)
9000c71a:	e7e4      	b.n	9000c6e6 <_printf_i+0x176>
9000c71c:	4615      	mov	r5, r2
9000c71e:	e7bd      	b.n	9000c69c <_printf_i+0x12c>
9000c720:	682b      	ldr	r3, [r5, #0]
9000c722:	6826      	ldr	r6, [r4, #0]
9000c724:	6961      	ldr	r1, [r4, #20]
9000c726:	1d18      	adds	r0, r3, #4
9000c728:	6028      	str	r0, [r5, #0]
9000c72a:	0635      	lsls	r5, r6, #24
9000c72c:	681b      	ldr	r3, [r3, #0]
9000c72e:	d501      	bpl.n	9000c734 <_printf_i+0x1c4>
9000c730:	6019      	str	r1, [r3, #0]
9000c732:	e002      	b.n	9000c73a <_printf_i+0x1ca>
9000c734:	0670      	lsls	r0, r6, #25
9000c736:	d5fb      	bpl.n	9000c730 <_printf_i+0x1c0>
9000c738:	8019      	strh	r1, [r3, #0]
9000c73a:	2300      	movs	r3, #0
9000c73c:	6123      	str	r3, [r4, #16]
9000c73e:	4615      	mov	r5, r2
9000c740:	e7bc      	b.n	9000c6bc <_printf_i+0x14c>
9000c742:	682b      	ldr	r3, [r5, #0]
9000c744:	1d1a      	adds	r2, r3, #4
9000c746:	602a      	str	r2, [r5, #0]
9000c748:	681d      	ldr	r5, [r3, #0]
9000c74a:	6862      	ldr	r2, [r4, #4]
9000c74c:	2100      	movs	r1, #0
9000c74e:	4628      	mov	r0, r5
9000c750:	f7f3 fd5e 	bl	90000210 <memchr>
9000c754:	b108      	cbz	r0, 9000c75a <_printf_i+0x1ea>
9000c756:	1b40      	subs	r0, r0, r5
9000c758:	6060      	str	r0, [r4, #4]
9000c75a:	6863      	ldr	r3, [r4, #4]
9000c75c:	6123      	str	r3, [r4, #16]
9000c75e:	2300      	movs	r3, #0
9000c760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000c764:	e7aa      	b.n	9000c6bc <_printf_i+0x14c>
9000c766:	6923      	ldr	r3, [r4, #16]
9000c768:	462a      	mov	r2, r5
9000c76a:	4649      	mov	r1, r9
9000c76c:	4640      	mov	r0, r8
9000c76e:	47d0      	blx	sl
9000c770:	3001      	adds	r0, #1
9000c772:	d0ad      	beq.n	9000c6d0 <_printf_i+0x160>
9000c774:	6823      	ldr	r3, [r4, #0]
9000c776:	079b      	lsls	r3, r3, #30
9000c778:	d413      	bmi.n	9000c7a2 <_printf_i+0x232>
9000c77a:	68e0      	ldr	r0, [r4, #12]
9000c77c:	9b03      	ldr	r3, [sp, #12]
9000c77e:	4298      	cmp	r0, r3
9000c780:	bfb8      	it	lt
9000c782:	4618      	movlt	r0, r3
9000c784:	e7a6      	b.n	9000c6d4 <_printf_i+0x164>
9000c786:	2301      	movs	r3, #1
9000c788:	4632      	mov	r2, r6
9000c78a:	4649      	mov	r1, r9
9000c78c:	4640      	mov	r0, r8
9000c78e:	47d0      	blx	sl
9000c790:	3001      	adds	r0, #1
9000c792:	d09d      	beq.n	9000c6d0 <_printf_i+0x160>
9000c794:	3501      	adds	r5, #1
9000c796:	68e3      	ldr	r3, [r4, #12]
9000c798:	9903      	ldr	r1, [sp, #12]
9000c79a:	1a5b      	subs	r3, r3, r1
9000c79c:	42ab      	cmp	r3, r5
9000c79e:	dcf2      	bgt.n	9000c786 <_printf_i+0x216>
9000c7a0:	e7eb      	b.n	9000c77a <_printf_i+0x20a>
9000c7a2:	2500      	movs	r5, #0
9000c7a4:	f104 0619 	add.w	r6, r4, #25
9000c7a8:	e7f5      	b.n	9000c796 <_printf_i+0x226>
9000c7aa:	bf00      	nop
9000c7ac:	90011ac7 	.word	0x90011ac7
9000c7b0:	90011ad8 	.word	0x90011ad8

9000c7b4 <__sflush_r>:
9000c7b4:	898a      	ldrh	r2, [r1, #12]
9000c7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c7ba:	4605      	mov	r5, r0
9000c7bc:	0710      	lsls	r0, r2, #28
9000c7be:	460c      	mov	r4, r1
9000c7c0:	d458      	bmi.n	9000c874 <__sflush_r+0xc0>
9000c7c2:	684b      	ldr	r3, [r1, #4]
9000c7c4:	2b00      	cmp	r3, #0
9000c7c6:	dc05      	bgt.n	9000c7d4 <__sflush_r+0x20>
9000c7c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9000c7ca:	2b00      	cmp	r3, #0
9000c7cc:	dc02      	bgt.n	9000c7d4 <__sflush_r+0x20>
9000c7ce:	2000      	movs	r0, #0
9000c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000c7d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000c7d6:	2e00      	cmp	r6, #0
9000c7d8:	d0f9      	beq.n	9000c7ce <__sflush_r+0x1a>
9000c7da:	2300      	movs	r3, #0
9000c7dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
9000c7e0:	682f      	ldr	r7, [r5, #0]
9000c7e2:	6a21      	ldr	r1, [r4, #32]
9000c7e4:	602b      	str	r3, [r5, #0]
9000c7e6:	d032      	beq.n	9000c84e <__sflush_r+0x9a>
9000c7e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
9000c7ea:	89a3      	ldrh	r3, [r4, #12]
9000c7ec:	075a      	lsls	r2, r3, #29
9000c7ee:	d505      	bpl.n	9000c7fc <__sflush_r+0x48>
9000c7f0:	6863      	ldr	r3, [r4, #4]
9000c7f2:	1ac0      	subs	r0, r0, r3
9000c7f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000c7f6:	b10b      	cbz	r3, 9000c7fc <__sflush_r+0x48>
9000c7f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000c7fa:	1ac0      	subs	r0, r0, r3
9000c7fc:	2300      	movs	r3, #0
9000c7fe:	4602      	mov	r2, r0
9000c800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000c802:	6a21      	ldr	r1, [r4, #32]
9000c804:	4628      	mov	r0, r5
9000c806:	47b0      	blx	r6
9000c808:	1c43      	adds	r3, r0, #1
9000c80a:	89a3      	ldrh	r3, [r4, #12]
9000c80c:	d106      	bne.n	9000c81c <__sflush_r+0x68>
9000c80e:	6829      	ldr	r1, [r5, #0]
9000c810:	291d      	cmp	r1, #29
9000c812:	d82b      	bhi.n	9000c86c <__sflush_r+0xb8>
9000c814:	4a29      	ldr	r2, [pc, #164]	; (9000c8bc <__sflush_r+0x108>)
9000c816:	410a      	asrs	r2, r1
9000c818:	07d6      	lsls	r6, r2, #31
9000c81a:	d427      	bmi.n	9000c86c <__sflush_r+0xb8>
9000c81c:	2200      	movs	r2, #0
9000c81e:	6062      	str	r2, [r4, #4]
9000c820:	04d9      	lsls	r1, r3, #19
9000c822:	6922      	ldr	r2, [r4, #16]
9000c824:	6022      	str	r2, [r4, #0]
9000c826:	d504      	bpl.n	9000c832 <__sflush_r+0x7e>
9000c828:	1c42      	adds	r2, r0, #1
9000c82a:	d101      	bne.n	9000c830 <__sflush_r+0x7c>
9000c82c:	682b      	ldr	r3, [r5, #0]
9000c82e:	b903      	cbnz	r3, 9000c832 <__sflush_r+0x7e>
9000c830:	6560      	str	r0, [r4, #84]	; 0x54
9000c832:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000c834:	602f      	str	r7, [r5, #0]
9000c836:	2900      	cmp	r1, #0
9000c838:	d0c9      	beq.n	9000c7ce <__sflush_r+0x1a>
9000c83a:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000c83e:	4299      	cmp	r1, r3
9000c840:	d002      	beq.n	9000c848 <__sflush_r+0x94>
9000c842:	4628      	mov	r0, r5
9000c844:	f7ff fb3e 	bl	9000bec4 <_free_r>
9000c848:	2000      	movs	r0, #0
9000c84a:	6360      	str	r0, [r4, #52]	; 0x34
9000c84c:	e7c0      	b.n	9000c7d0 <__sflush_r+0x1c>
9000c84e:	2301      	movs	r3, #1
9000c850:	4628      	mov	r0, r5
9000c852:	47b0      	blx	r6
9000c854:	1c41      	adds	r1, r0, #1
9000c856:	d1c8      	bne.n	9000c7ea <__sflush_r+0x36>
9000c858:	682b      	ldr	r3, [r5, #0]
9000c85a:	2b00      	cmp	r3, #0
9000c85c:	d0c5      	beq.n	9000c7ea <__sflush_r+0x36>
9000c85e:	2b1d      	cmp	r3, #29
9000c860:	d001      	beq.n	9000c866 <__sflush_r+0xb2>
9000c862:	2b16      	cmp	r3, #22
9000c864:	d101      	bne.n	9000c86a <__sflush_r+0xb6>
9000c866:	602f      	str	r7, [r5, #0]
9000c868:	e7b1      	b.n	9000c7ce <__sflush_r+0x1a>
9000c86a:	89a3      	ldrh	r3, [r4, #12]
9000c86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000c870:	81a3      	strh	r3, [r4, #12]
9000c872:	e7ad      	b.n	9000c7d0 <__sflush_r+0x1c>
9000c874:	690f      	ldr	r7, [r1, #16]
9000c876:	2f00      	cmp	r7, #0
9000c878:	d0a9      	beq.n	9000c7ce <__sflush_r+0x1a>
9000c87a:	0793      	lsls	r3, r2, #30
9000c87c:	680e      	ldr	r6, [r1, #0]
9000c87e:	bf08      	it	eq
9000c880:	694b      	ldreq	r3, [r1, #20]
9000c882:	600f      	str	r7, [r1, #0]
9000c884:	bf18      	it	ne
9000c886:	2300      	movne	r3, #0
9000c888:	eba6 0807 	sub.w	r8, r6, r7
9000c88c:	608b      	str	r3, [r1, #8]
9000c88e:	f1b8 0f00 	cmp.w	r8, #0
9000c892:	dd9c      	ble.n	9000c7ce <__sflush_r+0x1a>
9000c894:	6a21      	ldr	r1, [r4, #32]
9000c896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9000c898:	4643      	mov	r3, r8
9000c89a:	463a      	mov	r2, r7
9000c89c:	4628      	mov	r0, r5
9000c89e:	47b0      	blx	r6
9000c8a0:	2800      	cmp	r0, #0
9000c8a2:	dc06      	bgt.n	9000c8b2 <__sflush_r+0xfe>
9000c8a4:	89a3      	ldrh	r3, [r4, #12]
9000c8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000c8aa:	81a3      	strh	r3, [r4, #12]
9000c8ac:	f04f 30ff 	mov.w	r0, #4294967295
9000c8b0:	e78e      	b.n	9000c7d0 <__sflush_r+0x1c>
9000c8b2:	4407      	add	r7, r0
9000c8b4:	eba8 0800 	sub.w	r8, r8, r0
9000c8b8:	e7e9      	b.n	9000c88e <__sflush_r+0xda>
9000c8ba:	bf00      	nop
9000c8bc:	dfbffffe 	.word	0xdfbffffe

9000c8c0 <_fflush_r>:
9000c8c0:	b538      	push	{r3, r4, r5, lr}
9000c8c2:	690b      	ldr	r3, [r1, #16]
9000c8c4:	4605      	mov	r5, r0
9000c8c6:	460c      	mov	r4, r1
9000c8c8:	b913      	cbnz	r3, 9000c8d0 <_fflush_r+0x10>
9000c8ca:	2500      	movs	r5, #0
9000c8cc:	4628      	mov	r0, r5
9000c8ce:	bd38      	pop	{r3, r4, r5, pc}
9000c8d0:	b118      	cbz	r0, 9000c8da <_fflush_r+0x1a>
9000c8d2:	6a03      	ldr	r3, [r0, #32]
9000c8d4:	b90b      	cbnz	r3, 9000c8da <_fflush_r+0x1a>
9000c8d6:	f7ff f8af 	bl	9000ba38 <__sinit>
9000c8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c8de:	2b00      	cmp	r3, #0
9000c8e0:	d0f3      	beq.n	9000c8ca <_fflush_r+0xa>
9000c8e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
9000c8e4:	07d0      	lsls	r0, r2, #31
9000c8e6:	d404      	bmi.n	9000c8f2 <_fflush_r+0x32>
9000c8e8:	0599      	lsls	r1, r3, #22
9000c8ea:	d402      	bmi.n	9000c8f2 <_fflush_r+0x32>
9000c8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c8ee:	f7ff fade 	bl	9000beae <__retarget_lock_acquire_recursive>
9000c8f2:	4628      	mov	r0, r5
9000c8f4:	4621      	mov	r1, r4
9000c8f6:	f7ff ff5d 	bl	9000c7b4 <__sflush_r>
9000c8fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000c8fc:	07da      	lsls	r2, r3, #31
9000c8fe:	4605      	mov	r5, r0
9000c900:	d4e4      	bmi.n	9000c8cc <_fflush_r+0xc>
9000c902:	89a3      	ldrh	r3, [r4, #12]
9000c904:	059b      	lsls	r3, r3, #22
9000c906:	d4e1      	bmi.n	9000c8cc <_fflush_r+0xc>
9000c908:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c90a:	f7ff fad1 	bl	9000beb0 <__retarget_lock_release_recursive>
9000c90e:	e7dd      	b.n	9000c8cc <_fflush_r+0xc>

9000c910 <__swhatbuf_r>:
9000c910:	b570      	push	{r4, r5, r6, lr}
9000c912:	460c      	mov	r4, r1
9000c914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c918:	2900      	cmp	r1, #0
9000c91a:	b096      	sub	sp, #88	; 0x58
9000c91c:	4615      	mov	r5, r2
9000c91e:	461e      	mov	r6, r3
9000c920:	da0d      	bge.n	9000c93e <__swhatbuf_r+0x2e>
9000c922:	89a3      	ldrh	r3, [r4, #12]
9000c924:	f013 0f80 	tst.w	r3, #128	; 0x80
9000c928:	f04f 0100 	mov.w	r1, #0
9000c92c:	bf0c      	ite	eq
9000c92e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
9000c932:	2340      	movne	r3, #64	; 0x40
9000c934:	2000      	movs	r0, #0
9000c936:	6031      	str	r1, [r6, #0]
9000c938:	602b      	str	r3, [r5, #0]
9000c93a:	b016      	add	sp, #88	; 0x58
9000c93c:	bd70      	pop	{r4, r5, r6, pc}
9000c93e:	466a      	mov	r2, sp
9000c940:	f000 f896 	bl	9000ca70 <_fstat_r>
9000c944:	2800      	cmp	r0, #0
9000c946:	dbec      	blt.n	9000c922 <__swhatbuf_r+0x12>
9000c948:	9901      	ldr	r1, [sp, #4]
9000c94a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
9000c94e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
9000c952:	4259      	negs	r1, r3
9000c954:	4159      	adcs	r1, r3
9000c956:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000c95a:	e7eb      	b.n	9000c934 <__swhatbuf_r+0x24>

9000c95c <__smakebuf_r>:
9000c95c:	898b      	ldrh	r3, [r1, #12]
9000c95e:	b573      	push	{r0, r1, r4, r5, r6, lr}
9000c960:	079d      	lsls	r5, r3, #30
9000c962:	4606      	mov	r6, r0
9000c964:	460c      	mov	r4, r1
9000c966:	d507      	bpl.n	9000c978 <__smakebuf_r+0x1c>
9000c968:	f104 0347 	add.w	r3, r4, #71	; 0x47
9000c96c:	6023      	str	r3, [r4, #0]
9000c96e:	6123      	str	r3, [r4, #16]
9000c970:	2301      	movs	r3, #1
9000c972:	6163      	str	r3, [r4, #20]
9000c974:	b002      	add	sp, #8
9000c976:	bd70      	pop	{r4, r5, r6, pc}
9000c978:	ab01      	add	r3, sp, #4
9000c97a:	466a      	mov	r2, sp
9000c97c:	f7ff ffc8 	bl	9000c910 <__swhatbuf_r>
9000c980:	9900      	ldr	r1, [sp, #0]
9000c982:	4605      	mov	r5, r0
9000c984:	4630      	mov	r0, r6
9000c986:	f7fe ff3f 	bl	9000b808 <_malloc_r>
9000c98a:	b948      	cbnz	r0, 9000c9a0 <__smakebuf_r+0x44>
9000c98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c990:	059a      	lsls	r2, r3, #22
9000c992:	d4ef      	bmi.n	9000c974 <__smakebuf_r+0x18>
9000c994:	f023 0303 	bic.w	r3, r3, #3
9000c998:	f043 0302 	orr.w	r3, r3, #2
9000c99c:	81a3      	strh	r3, [r4, #12]
9000c99e:	e7e3      	b.n	9000c968 <__smakebuf_r+0xc>
9000c9a0:	89a3      	ldrh	r3, [r4, #12]
9000c9a2:	6020      	str	r0, [r4, #0]
9000c9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000c9a8:	81a3      	strh	r3, [r4, #12]
9000c9aa:	9b00      	ldr	r3, [sp, #0]
9000c9ac:	6163      	str	r3, [r4, #20]
9000c9ae:	9b01      	ldr	r3, [sp, #4]
9000c9b0:	6120      	str	r0, [r4, #16]
9000c9b2:	b15b      	cbz	r3, 9000c9cc <__smakebuf_r+0x70>
9000c9b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c9b8:	4630      	mov	r0, r6
9000c9ba:	f000 f86b 	bl	9000ca94 <_isatty_r>
9000c9be:	b128      	cbz	r0, 9000c9cc <__smakebuf_r+0x70>
9000c9c0:	89a3      	ldrh	r3, [r4, #12]
9000c9c2:	f023 0303 	bic.w	r3, r3, #3
9000c9c6:	f043 0301 	orr.w	r3, r3, #1
9000c9ca:	81a3      	strh	r3, [r4, #12]
9000c9cc:	89a3      	ldrh	r3, [r4, #12]
9000c9ce:	431d      	orrs	r5, r3
9000c9d0:	81a5      	strh	r5, [r4, #12]
9000c9d2:	e7cf      	b.n	9000c974 <__smakebuf_r+0x18>

9000c9d4 <_putc_r>:
9000c9d4:	b570      	push	{r4, r5, r6, lr}
9000c9d6:	460d      	mov	r5, r1
9000c9d8:	4614      	mov	r4, r2
9000c9da:	4606      	mov	r6, r0
9000c9dc:	b118      	cbz	r0, 9000c9e6 <_putc_r+0x12>
9000c9de:	6a03      	ldr	r3, [r0, #32]
9000c9e0:	b90b      	cbnz	r3, 9000c9e6 <_putc_r+0x12>
9000c9e2:	f7ff f829 	bl	9000ba38 <__sinit>
9000c9e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000c9e8:	07d8      	lsls	r0, r3, #31
9000c9ea:	d405      	bmi.n	9000c9f8 <_putc_r+0x24>
9000c9ec:	89a3      	ldrh	r3, [r4, #12]
9000c9ee:	0599      	lsls	r1, r3, #22
9000c9f0:	d402      	bmi.n	9000c9f8 <_putc_r+0x24>
9000c9f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c9f4:	f7ff fa5b 	bl	9000beae <__retarget_lock_acquire_recursive>
9000c9f8:	68a3      	ldr	r3, [r4, #8]
9000c9fa:	3b01      	subs	r3, #1
9000c9fc:	2b00      	cmp	r3, #0
9000c9fe:	60a3      	str	r3, [r4, #8]
9000ca00:	da05      	bge.n	9000ca0e <_putc_r+0x3a>
9000ca02:	69a2      	ldr	r2, [r4, #24]
9000ca04:	4293      	cmp	r3, r2
9000ca06:	db12      	blt.n	9000ca2e <_putc_r+0x5a>
9000ca08:	b2eb      	uxtb	r3, r5
9000ca0a:	2b0a      	cmp	r3, #10
9000ca0c:	d00f      	beq.n	9000ca2e <_putc_r+0x5a>
9000ca0e:	6823      	ldr	r3, [r4, #0]
9000ca10:	1c5a      	adds	r2, r3, #1
9000ca12:	6022      	str	r2, [r4, #0]
9000ca14:	701d      	strb	r5, [r3, #0]
9000ca16:	b2ed      	uxtb	r5, r5
9000ca18:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000ca1a:	07da      	lsls	r2, r3, #31
9000ca1c:	d405      	bmi.n	9000ca2a <_putc_r+0x56>
9000ca1e:	89a3      	ldrh	r3, [r4, #12]
9000ca20:	059b      	lsls	r3, r3, #22
9000ca22:	d402      	bmi.n	9000ca2a <_putc_r+0x56>
9000ca24:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000ca26:	f7ff fa43 	bl	9000beb0 <__retarget_lock_release_recursive>
9000ca2a:	4628      	mov	r0, r5
9000ca2c:	bd70      	pop	{r4, r5, r6, pc}
9000ca2e:	4629      	mov	r1, r5
9000ca30:	4622      	mov	r2, r4
9000ca32:	4630      	mov	r0, r6
9000ca34:	f7ff f90f 	bl	9000bc56 <__swbuf_r>
9000ca38:	4605      	mov	r5, r0
9000ca3a:	e7ed      	b.n	9000ca18 <_putc_r+0x44>

9000ca3c <memmove>:
9000ca3c:	4288      	cmp	r0, r1
9000ca3e:	b510      	push	{r4, lr}
9000ca40:	eb01 0402 	add.w	r4, r1, r2
9000ca44:	d902      	bls.n	9000ca4c <memmove+0x10>
9000ca46:	4284      	cmp	r4, r0
9000ca48:	4623      	mov	r3, r4
9000ca4a:	d807      	bhi.n	9000ca5c <memmove+0x20>
9000ca4c:	1e43      	subs	r3, r0, #1
9000ca4e:	42a1      	cmp	r1, r4
9000ca50:	d008      	beq.n	9000ca64 <memmove+0x28>
9000ca52:	f811 2b01 	ldrb.w	r2, [r1], #1
9000ca56:	f803 2f01 	strb.w	r2, [r3, #1]!
9000ca5a:	e7f8      	b.n	9000ca4e <memmove+0x12>
9000ca5c:	4402      	add	r2, r0
9000ca5e:	4601      	mov	r1, r0
9000ca60:	428a      	cmp	r2, r1
9000ca62:	d100      	bne.n	9000ca66 <memmove+0x2a>
9000ca64:	bd10      	pop	{r4, pc}
9000ca66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000ca6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000ca6e:	e7f7      	b.n	9000ca60 <memmove+0x24>

9000ca70 <_fstat_r>:
9000ca70:	b538      	push	{r3, r4, r5, lr}
9000ca72:	4d07      	ldr	r5, [pc, #28]	; (9000ca90 <_fstat_r+0x20>)
9000ca74:	2300      	movs	r3, #0
9000ca76:	4604      	mov	r4, r0
9000ca78:	4608      	mov	r0, r1
9000ca7a:	4611      	mov	r1, r2
9000ca7c:	602b      	str	r3, [r5, #0]
9000ca7e:	f000 f867 	bl	9000cb50 <_fstat>
9000ca82:	1c43      	adds	r3, r0, #1
9000ca84:	d102      	bne.n	9000ca8c <_fstat_r+0x1c>
9000ca86:	682b      	ldr	r3, [r5, #0]
9000ca88:	b103      	cbz	r3, 9000ca8c <_fstat_r+0x1c>
9000ca8a:	6023      	str	r3, [r4, #0]
9000ca8c:	bd38      	pop	{r3, r4, r5, pc}
9000ca8e:	bf00      	nop
9000ca90:	20010c0c 	.word	0x20010c0c

9000ca94 <_isatty_r>:
9000ca94:	b538      	push	{r3, r4, r5, lr}
9000ca96:	4d06      	ldr	r5, [pc, #24]	; (9000cab0 <_isatty_r+0x1c>)
9000ca98:	2300      	movs	r3, #0
9000ca9a:	4604      	mov	r4, r0
9000ca9c:	4608      	mov	r0, r1
9000ca9e:	602b      	str	r3, [r5, #0]
9000caa0:	f000 f85e 	bl	9000cb60 <_isatty>
9000caa4:	1c43      	adds	r3, r0, #1
9000caa6:	d102      	bne.n	9000caae <_isatty_r+0x1a>
9000caa8:	682b      	ldr	r3, [r5, #0]
9000caaa:	b103      	cbz	r3, 9000caae <_isatty_r+0x1a>
9000caac:	6023      	str	r3, [r4, #0]
9000caae:	bd38      	pop	{r3, r4, r5, pc}
9000cab0:	20010c0c 	.word	0x20010c0c

9000cab4 <memcpy>:
9000cab4:	440a      	add	r2, r1
9000cab6:	4291      	cmp	r1, r2
9000cab8:	f100 33ff 	add.w	r3, r0, #4294967295
9000cabc:	d100      	bne.n	9000cac0 <memcpy+0xc>
9000cabe:	4770      	bx	lr
9000cac0:	b510      	push	{r4, lr}
9000cac2:	f811 4b01 	ldrb.w	r4, [r1], #1
9000cac6:	f803 4f01 	strb.w	r4, [r3, #1]!
9000caca:	4291      	cmp	r1, r2
9000cacc:	d1f9      	bne.n	9000cac2 <memcpy+0xe>
9000cace:	bd10      	pop	{r4, pc}

9000cad0 <_realloc_r>:
9000cad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000cad4:	4680      	mov	r8, r0
9000cad6:	4614      	mov	r4, r2
9000cad8:	460e      	mov	r6, r1
9000cada:	b921      	cbnz	r1, 9000cae6 <_realloc_r+0x16>
9000cadc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000cae0:	4611      	mov	r1, r2
9000cae2:	f7fe be91 	b.w	9000b808 <_malloc_r>
9000cae6:	b92a      	cbnz	r2, 9000caf4 <_realloc_r+0x24>
9000cae8:	f7ff f9ec 	bl	9000bec4 <_free_r>
9000caec:	4625      	mov	r5, r4
9000caee:	4628      	mov	r0, r5
9000caf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000caf4:	f000 f81b 	bl	9000cb2e <_malloc_usable_size_r>
9000caf8:	4284      	cmp	r4, r0
9000cafa:	4607      	mov	r7, r0
9000cafc:	d802      	bhi.n	9000cb04 <_realloc_r+0x34>
9000cafe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000cb02:	d812      	bhi.n	9000cb2a <_realloc_r+0x5a>
9000cb04:	4621      	mov	r1, r4
9000cb06:	4640      	mov	r0, r8
9000cb08:	f7fe fe7e 	bl	9000b808 <_malloc_r>
9000cb0c:	4605      	mov	r5, r0
9000cb0e:	2800      	cmp	r0, #0
9000cb10:	d0ed      	beq.n	9000caee <_realloc_r+0x1e>
9000cb12:	42bc      	cmp	r4, r7
9000cb14:	4622      	mov	r2, r4
9000cb16:	4631      	mov	r1, r6
9000cb18:	bf28      	it	cs
9000cb1a:	463a      	movcs	r2, r7
9000cb1c:	f7ff ffca 	bl	9000cab4 <memcpy>
9000cb20:	4631      	mov	r1, r6
9000cb22:	4640      	mov	r0, r8
9000cb24:	f7ff f9ce 	bl	9000bec4 <_free_r>
9000cb28:	e7e1      	b.n	9000caee <_realloc_r+0x1e>
9000cb2a:	4635      	mov	r5, r6
9000cb2c:	e7df      	b.n	9000caee <_realloc_r+0x1e>

9000cb2e <_malloc_usable_size_r>:
9000cb2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000cb32:	1f18      	subs	r0, r3, #4
9000cb34:	2b00      	cmp	r3, #0
9000cb36:	bfbc      	itt	lt
9000cb38:	580b      	ldrlt	r3, [r1, r0]
9000cb3a:	18c0      	addlt	r0, r0, r3
9000cb3c:	4770      	bx	lr
	...

9000cb40 <_close>:
9000cb40:	4b02      	ldr	r3, [pc, #8]	; (9000cb4c <_close+0xc>)
9000cb42:	2258      	movs	r2, #88	; 0x58
9000cb44:	601a      	str	r2, [r3, #0]
9000cb46:	f04f 30ff 	mov.w	r0, #4294967295
9000cb4a:	4770      	bx	lr
9000cb4c:	20010c0c 	.word	0x20010c0c

9000cb50 <_fstat>:
9000cb50:	4b02      	ldr	r3, [pc, #8]	; (9000cb5c <_fstat+0xc>)
9000cb52:	2258      	movs	r2, #88	; 0x58
9000cb54:	601a      	str	r2, [r3, #0]
9000cb56:	f04f 30ff 	mov.w	r0, #4294967295
9000cb5a:	4770      	bx	lr
9000cb5c:	20010c0c 	.word	0x20010c0c

9000cb60 <_isatty>:
9000cb60:	4b02      	ldr	r3, [pc, #8]	; (9000cb6c <_isatty+0xc>)
9000cb62:	2258      	movs	r2, #88	; 0x58
9000cb64:	601a      	str	r2, [r3, #0]
9000cb66:	2000      	movs	r0, #0
9000cb68:	4770      	bx	lr
9000cb6a:	bf00      	nop
9000cb6c:	20010c0c 	.word	0x20010c0c

9000cb70 <_lseek>:
9000cb70:	4b02      	ldr	r3, [pc, #8]	; (9000cb7c <_lseek+0xc>)
9000cb72:	2258      	movs	r2, #88	; 0x58
9000cb74:	601a      	str	r2, [r3, #0]
9000cb76:	f04f 30ff 	mov.w	r0, #4294967295
9000cb7a:	4770      	bx	lr
9000cb7c:	20010c0c 	.word	0x20010c0c

9000cb80 <_read>:
9000cb80:	4b02      	ldr	r3, [pc, #8]	; (9000cb8c <_read+0xc>)
9000cb82:	2258      	movs	r2, #88	; 0x58
9000cb84:	601a      	str	r2, [r3, #0]
9000cb86:	f04f 30ff 	mov.w	r0, #4294967295
9000cb8a:	4770      	bx	lr
9000cb8c:	20010c0c 	.word	0x20010c0c

9000cb90 <_sbrk>:
9000cb90:	4a04      	ldr	r2, [pc, #16]	; (9000cba4 <_sbrk+0x14>)
9000cb92:	6811      	ldr	r1, [r2, #0]
9000cb94:	4603      	mov	r3, r0
9000cb96:	b909      	cbnz	r1, 9000cb9c <_sbrk+0xc>
9000cb98:	4903      	ldr	r1, [pc, #12]	; (9000cba8 <_sbrk+0x18>)
9000cb9a:	6011      	str	r1, [r2, #0]
9000cb9c:	6810      	ldr	r0, [r2, #0]
9000cb9e:	4403      	add	r3, r0
9000cba0:	6013      	str	r3, [r2, #0]
9000cba2:	4770      	bx	lr
9000cba4:	20010c14 	.word	0x20010c14
9000cba8:	20010c18 	.word	0x20010c18

9000cbac <_write>:
9000cbac:	4b02      	ldr	r3, [pc, #8]	; (9000cbb8 <_write+0xc>)
9000cbae:	2258      	movs	r2, #88	; 0x58
9000cbb0:	601a      	str	r2, [r3, #0]
9000cbb2:	f04f 30ff 	mov.w	r0, #4294967295
9000cbb6:	4770      	bx	lr
9000cbb8:	20010c0c 	.word	0x20010c0c

9000cbbc <_init>:
9000cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cbbe:	bf00      	nop
9000cbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000cbc2:	bc08      	pop	{r3}
9000cbc4:	469e      	mov	lr, r3
9000cbc6:	4770      	bx	lr

9000cbc8 <_fini>:
9000cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cbca:	bf00      	nop
9000cbcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000cbce:	bc08      	pop	{r3}
9000cbd0:	469e      	mov	lr, r3
9000cbd2:	4770      	bx	lr
