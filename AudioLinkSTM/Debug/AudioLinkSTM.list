
AudioLinkSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c32c  900001d0  900001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f80  9000c4fc  9000c4fc  0001c4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  9001147c  9001147c  0002147c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  90011484  90011484  00021484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90011488  90011488  00021488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000140  20000000  9001148c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010ab8  20000140  900115cc  00030140  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  20010bf8  900115cc  00030bf8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003a25f  00000000  00000000  000301b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000081eb  00000000  00000000  0006a412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00015c60  00000000  00000000  000725fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00088260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001de2  00000000  00000000  00089d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f9d5  00000000  00000000  0008bb6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000355a1  00000000  00000000  000bb53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001072c9  00000000  00000000  000f0ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00005b50  00000000  00000000  001f7dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006e  00000000  00000000  001fd8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001d0 <__do_global_dtors_aux>:
900001d0:	b510      	push	{r4, lr}
900001d2:	4c05      	ldr	r4, [pc, #20]	; (900001e8 <__do_global_dtors_aux+0x18>)
900001d4:	7823      	ldrb	r3, [r4, #0]
900001d6:	b933      	cbnz	r3, 900001e6 <__do_global_dtors_aux+0x16>
900001d8:	4b04      	ldr	r3, [pc, #16]	; (900001ec <__do_global_dtors_aux+0x1c>)
900001da:	b113      	cbz	r3, 900001e2 <__do_global_dtors_aux+0x12>
900001dc:	4804      	ldr	r0, [pc, #16]	; (900001f0 <__do_global_dtors_aux+0x20>)
900001de:	f3af 8000 	nop.w
900001e2:	2301      	movs	r3, #1
900001e4:	7023      	strb	r3, [r4, #0]
900001e6:	bd10      	pop	{r4, pc}
900001e8:	20000140 	.word	0x20000140
900001ec:	00000000 	.word	0x00000000
900001f0:	9000c4e4 	.word	0x9000c4e4

900001f4 <frame_dummy>:
900001f4:	b508      	push	{r3, lr}
900001f6:	4b03      	ldr	r3, [pc, #12]	; (90000204 <frame_dummy+0x10>)
900001f8:	b11b      	cbz	r3, 90000202 <frame_dummy+0xe>
900001fa:	4903      	ldr	r1, [pc, #12]	; (90000208 <frame_dummy+0x14>)
900001fc:	4803      	ldr	r0, [pc, #12]	; (9000020c <frame_dummy+0x18>)
900001fe:	f3af 8000 	nop.w
90000202:	bd08      	pop	{r3, pc}
90000204:	00000000 	.word	0x00000000
90000208:	20000144 	.word	0x20000144
9000020c:	9000c4e4 	.word	0x9000c4e4

90000210 <memchr>:
90000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000214:	2a10      	cmp	r2, #16
90000216:	db2b      	blt.n	90000270 <memchr+0x60>
90000218:	f010 0f07 	tst.w	r0, #7
9000021c:	d008      	beq.n	90000230 <memchr+0x20>
9000021e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000222:	3a01      	subs	r2, #1
90000224:	428b      	cmp	r3, r1
90000226:	d02d      	beq.n	90000284 <memchr+0x74>
90000228:	f010 0f07 	tst.w	r0, #7
9000022c:	b342      	cbz	r2, 90000280 <memchr+0x70>
9000022e:	d1f6      	bne.n	9000021e <memchr+0xe>
90000230:	b4f0      	push	{r4, r5, r6, r7}
90000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000023a:	f022 0407 	bic.w	r4, r2, #7
9000023e:	f07f 0700 	mvns.w	r7, #0
90000242:	2300      	movs	r3, #0
90000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000248:	3c08      	subs	r4, #8
9000024a:	ea85 0501 	eor.w	r5, r5, r1
9000024e:	ea86 0601 	eor.w	r6, r6, r1
90000252:	fa85 f547 	uadd8	r5, r5, r7
90000256:	faa3 f587 	sel	r5, r3, r7
9000025a:	fa86 f647 	uadd8	r6, r6, r7
9000025e:	faa5 f687 	sel	r6, r5, r7
90000262:	b98e      	cbnz	r6, 90000288 <memchr+0x78>
90000264:	d1ee      	bne.n	90000244 <memchr+0x34>
90000266:	bcf0      	pop	{r4, r5, r6, r7}
90000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000026c:	f002 0207 	and.w	r2, r2, #7
90000270:	b132      	cbz	r2, 90000280 <memchr+0x70>
90000272:	f810 3b01 	ldrb.w	r3, [r0], #1
90000276:	3a01      	subs	r2, #1
90000278:	ea83 0301 	eor.w	r3, r3, r1
9000027c:	b113      	cbz	r3, 90000284 <memchr+0x74>
9000027e:	d1f8      	bne.n	90000272 <memchr+0x62>
90000280:	2000      	movs	r0, #0
90000282:	4770      	bx	lr
90000284:	3801      	subs	r0, #1
90000286:	4770      	bx	lr
90000288:	2d00      	cmp	r5, #0
9000028a:	bf06      	itte	eq
9000028c:	4635      	moveq	r5, r6
9000028e:	3803      	subeq	r0, #3
90000290:	3807      	subne	r0, #7
90000292:	f015 0f01 	tst.w	r5, #1
90000296:	d107      	bne.n	900002a8 <memchr+0x98>
90000298:	3001      	adds	r0, #1
9000029a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000029e:	bf02      	ittt	eq
900002a0:	3001      	addeq	r0, #1
900002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900002a6:	3001      	addeq	r0, #1
900002a8:	bcf0      	pop	{r4, r5, r6, r7}
900002aa:	3801      	subs	r0, #1
900002ac:	4770      	bx	lr
900002ae:	bf00      	nop

900002b0 <__aeabi_uldivmod>:
900002b0:	b953      	cbnz	r3, 900002c8 <__aeabi_uldivmod+0x18>
900002b2:	b94a      	cbnz	r2, 900002c8 <__aeabi_uldivmod+0x18>
900002b4:	2900      	cmp	r1, #0
900002b6:	bf08      	it	eq
900002b8:	2800      	cmpeq	r0, #0
900002ba:	bf1c      	itt	ne
900002bc:	f04f 31ff 	movne.w	r1, #4294967295
900002c0:	f04f 30ff 	movne.w	r0, #4294967295
900002c4:	f000 b970 	b.w	900005a8 <__aeabi_idiv0>
900002c8:	f1ad 0c08 	sub.w	ip, sp, #8
900002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900002d0:	f000 f806 	bl	900002e0 <__udivmoddi4>
900002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
900002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900002dc:	b004      	add	sp, #16
900002de:	4770      	bx	lr

900002e0 <__udivmoddi4>:
900002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900002e4:	9e08      	ldr	r6, [sp, #32]
900002e6:	460d      	mov	r5, r1
900002e8:	4604      	mov	r4, r0
900002ea:	460f      	mov	r7, r1
900002ec:	2b00      	cmp	r3, #0
900002ee:	d14a      	bne.n	90000386 <__udivmoddi4+0xa6>
900002f0:	428a      	cmp	r2, r1
900002f2:	4694      	mov	ip, r2
900002f4:	d965      	bls.n	900003c2 <__udivmoddi4+0xe2>
900002f6:	fab2 f382 	clz	r3, r2
900002fa:	b143      	cbz	r3, 9000030e <__udivmoddi4+0x2e>
900002fc:	fa02 fc03 	lsl.w	ip, r2, r3
90000300:	f1c3 0220 	rsb	r2, r3, #32
90000304:	409f      	lsls	r7, r3
90000306:	fa20 f202 	lsr.w	r2, r0, r2
9000030a:	4317      	orrs	r7, r2
9000030c:	409c      	lsls	r4, r3
9000030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
90000312:	fa1f f58c 	uxth.w	r5, ip
90000316:	fbb7 f1fe 	udiv	r1, r7, lr
9000031a:	0c22      	lsrs	r2, r4, #16
9000031c:	fb0e 7711 	mls	r7, lr, r1, r7
90000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
90000324:	fb01 f005 	mul.w	r0, r1, r5
90000328:	4290      	cmp	r0, r2
9000032a:	d90a      	bls.n	90000342 <__udivmoddi4+0x62>
9000032c:	eb1c 0202 	adds.w	r2, ip, r2
90000330:	f101 37ff 	add.w	r7, r1, #4294967295
90000334:	f080 811c 	bcs.w	90000570 <__udivmoddi4+0x290>
90000338:	4290      	cmp	r0, r2
9000033a:	f240 8119 	bls.w	90000570 <__udivmoddi4+0x290>
9000033e:	3902      	subs	r1, #2
90000340:	4462      	add	r2, ip
90000342:	1a12      	subs	r2, r2, r0
90000344:	b2a4      	uxth	r4, r4
90000346:	fbb2 f0fe 	udiv	r0, r2, lr
9000034a:	fb0e 2210 	mls	r2, lr, r0, r2
9000034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
90000352:	fb00 f505 	mul.w	r5, r0, r5
90000356:	42a5      	cmp	r5, r4
90000358:	d90a      	bls.n	90000370 <__udivmoddi4+0x90>
9000035a:	eb1c 0404 	adds.w	r4, ip, r4
9000035e:	f100 32ff 	add.w	r2, r0, #4294967295
90000362:	f080 8107 	bcs.w	90000574 <__udivmoddi4+0x294>
90000366:	42a5      	cmp	r5, r4
90000368:	f240 8104 	bls.w	90000574 <__udivmoddi4+0x294>
9000036c:	4464      	add	r4, ip
9000036e:	3802      	subs	r0, #2
90000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000374:	1b64      	subs	r4, r4, r5
90000376:	2100      	movs	r1, #0
90000378:	b11e      	cbz	r6, 90000382 <__udivmoddi4+0xa2>
9000037a:	40dc      	lsrs	r4, r3
9000037c:	2300      	movs	r3, #0
9000037e:	e9c6 4300 	strd	r4, r3, [r6]
90000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000386:	428b      	cmp	r3, r1
90000388:	d908      	bls.n	9000039c <__udivmoddi4+0xbc>
9000038a:	2e00      	cmp	r6, #0
9000038c:	f000 80ed 	beq.w	9000056a <__udivmoddi4+0x28a>
90000390:	2100      	movs	r1, #0
90000392:	e9c6 0500 	strd	r0, r5, [r6]
90000396:	4608      	mov	r0, r1
90000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000039c:	fab3 f183 	clz	r1, r3
900003a0:	2900      	cmp	r1, #0
900003a2:	d149      	bne.n	90000438 <__udivmoddi4+0x158>
900003a4:	42ab      	cmp	r3, r5
900003a6:	d302      	bcc.n	900003ae <__udivmoddi4+0xce>
900003a8:	4282      	cmp	r2, r0
900003aa:	f200 80f8 	bhi.w	9000059e <__udivmoddi4+0x2be>
900003ae:	1a84      	subs	r4, r0, r2
900003b0:	eb65 0203 	sbc.w	r2, r5, r3
900003b4:	2001      	movs	r0, #1
900003b6:	4617      	mov	r7, r2
900003b8:	2e00      	cmp	r6, #0
900003ba:	d0e2      	beq.n	90000382 <__udivmoddi4+0xa2>
900003bc:	e9c6 4700 	strd	r4, r7, [r6]
900003c0:	e7df      	b.n	90000382 <__udivmoddi4+0xa2>
900003c2:	b902      	cbnz	r2, 900003c6 <__udivmoddi4+0xe6>
900003c4:	deff      	udf	#255	; 0xff
900003c6:	fab2 f382 	clz	r3, r2
900003ca:	2b00      	cmp	r3, #0
900003cc:	f040 8090 	bne.w	900004f0 <__udivmoddi4+0x210>
900003d0:	1a8a      	subs	r2, r1, r2
900003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
900003d6:	fa1f fe8c 	uxth.w	lr, ip
900003da:	2101      	movs	r1, #1
900003dc:	fbb2 f5f7 	udiv	r5, r2, r7
900003e0:	fb07 2015 	mls	r0, r7, r5, r2
900003e4:	0c22      	lsrs	r2, r4, #16
900003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900003ea:	fb0e f005 	mul.w	r0, lr, r5
900003ee:	4290      	cmp	r0, r2
900003f0:	d908      	bls.n	90000404 <__udivmoddi4+0x124>
900003f2:	eb1c 0202 	adds.w	r2, ip, r2
900003f6:	f105 38ff 	add.w	r8, r5, #4294967295
900003fa:	d202      	bcs.n	90000402 <__udivmoddi4+0x122>
900003fc:	4290      	cmp	r0, r2
900003fe:	f200 80cb 	bhi.w	90000598 <__udivmoddi4+0x2b8>
90000402:	4645      	mov	r5, r8
90000404:	1a12      	subs	r2, r2, r0
90000406:	b2a4      	uxth	r4, r4
90000408:	fbb2 f0f7 	udiv	r0, r2, r7
9000040c:	fb07 2210 	mls	r2, r7, r0, r2
90000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
90000414:	fb0e fe00 	mul.w	lr, lr, r0
90000418:	45a6      	cmp	lr, r4
9000041a:	d908      	bls.n	9000042e <__udivmoddi4+0x14e>
9000041c:	eb1c 0404 	adds.w	r4, ip, r4
90000420:	f100 32ff 	add.w	r2, r0, #4294967295
90000424:	d202      	bcs.n	9000042c <__udivmoddi4+0x14c>
90000426:	45a6      	cmp	lr, r4
90000428:	f200 80bb 	bhi.w	900005a2 <__udivmoddi4+0x2c2>
9000042c:	4610      	mov	r0, r2
9000042e:	eba4 040e 	sub.w	r4, r4, lr
90000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
90000436:	e79f      	b.n	90000378 <__udivmoddi4+0x98>
90000438:	f1c1 0720 	rsb	r7, r1, #32
9000043c:	408b      	lsls	r3, r1
9000043e:	fa22 fc07 	lsr.w	ip, r2, r7
90000442:	ea4c 0c03 	orr.w	ip, ip, r3
90000446:	fa05 f401 	lsl.w	r4, r5, r1
9000044a:	fa20 f307 	lsr.w	r3, r0, r7
9000044e:	40fd      	lsrs	r5, r7
90000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
90000454:	4323      	orrs	r3, r4
90000456:	fbb5 f8f9 	udiv	r8, r5, r9
9000045a:	fa1f fe8c 	uxth.w	lr, ip
9000045e:	fb09 5518 	mls	r5, r9, r8, r5
90000462:	0c1c      	lsrs	r4, r3, #16
90000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
90000468:	fb08 f50e 	mul.w	r5, r8, lr
9000046c:	42a5      	cmp	r5, r4
9000046e:	fa02 f201 	lsl.w	r2, r2, r1
90000472:	fa00 f001 	lsl.w	r0, r0, r1
90000476:	d90b      	bls.n	90000490 <__udivmoddi4+0x1b0>
90000478:	eb1c 0404 	adds.w	r4, ip, r4
9000047c:	f108 3aff 	add.w	sl, r8, #4294967295
90000480:	f080 8088 	bcs.w	90000594 <__udivmoddi4+0x2b4>
90000484:	42a5      	cmp	r5, r4
90000486:	f240 8085 	bls.w	90000594 <__udivmoddi4+0x2b4>
9000048a:	f1a8 0802 	sub.w	r8, r8, #2
9000048e:	4464      	add	r4, ip
90000490:	1b64      	subs	r4, r4, r5
90000492:	b29d      	uxth	r5, r3
90000494:	fbb4 f3f9 	udiv	r3, r4, r9
90000498:	fb09 4413 	mls	r4, r9, r3, r4
9000049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
900004a0:	fb03 fe0e 	mul.w	lr, r3, lr
900004a4:	45a6      	cmp	lr, r4
900004a6:	d908      	bls.n	900004ba <__udivmoddi4+0x1da>
900004a8:	eb1c 0404 	adds.w	r4, ip, r4
900004ac:	f103 35ff 	add.w	r5, r3, #4294967295
900004b0:	d26c      	bcs.n	9000058c <__udivmoddi4+0x2ac>
900004b2:	45a6      	cmp	lr, r4
900004b4:	d96a      	bls.n	9000058c <__udivmoddi4+0x2ac>
900004b6:	3b02      	subs	r3, #2
900004b8:	4464      	add	r4, ip
900004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900004be:	fba3 9502 	umull	r9, r5, r3, r2
900004c2:	eba4 040e 	sub.w	r4, r4, lr
900004c6:	42ac      	cmp	r4, r5
900004c8:	46c8      	mov	r8, r9
900004ca:	46ae      	mov	lr, r5
900004cc:	d356      	bcc.n	9000057c <__udivmoddi4+0x29c>
900004ce:	d053      	beq.n	90000578 <__udivmoddi4+0x298>
900004d0:	b156      	cbz	r6, 900004e8 <__udivmoddi4+0x208>
900004d2:	ebb0 0208 	subs.w	r2, r0, r8
900004d6:	eb64 040e 	sbc.w	r4, r4, lr
900004da:	fa04 f707 	lsl.w	r7, r4, r7
900004de:	40ca      	lsrs	r2, r1
900004e0:	40cc      	lsrs	r4, r1
900004e2:	4317      	orrs	r7, r2
900004e4:	e9c6 7400 	strd	r7, r4, [r6]
900004e8:	4618      	mov	r0, r3
900004ea:	2100      	movs	r1, #0
900004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900004f0:	f1c3 0120 	rsb	r1, r3, #32
900004f4:	fa02 fc03 	lsl.w	ip, r2, r3
900004f8:	fa20 f201 	lsr.w	r2, r0, r1
900004fc:	fa25 f101 	lsr.w	r1, r5, r1
90000500:	409d      	lsls	r5, r3
90000502:	432a      	orrs	r2, r5
90000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000508:	fa1f fe8c 	uxth.w	lr, ip
9000050c:	fbb1 f0f7 	udiv	r0, r1, r7
90000510:	fb07 1510 	mls	r5, r7, r0, r1
90000514:	0c11      	lsrs	r1, r2, #16
90000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
9000051a:	fb00 f50e 	mul.w	r5, r0, lr
9000051e:	428d      	cmp	r5, r1
90000520:	fa04 f403 	lsl.w	r4, r4, r3
90000524:	d908      	bls.n	90000538 <__udivmoddi4+0x258>
90000526:	eb1c 0101 	adds.w	r1, ip, r1
9000052a:	f100 38ff 	add.w	r8, r0, #4294967295
9000052e:	d22f      	bcs.n	90000590 <__udivmoddi4+0x2b0>
90000530:	428d      	cmp	r5, r1
90000532:	d92d      	bls.n	90000590 <__udivmoddi4+0x2b0>
90000534:	3802      	subs	r0, #2
90000536:	4461      	add	r1, ip
90000538:	1b49      	subs	r1, r1, r5
9000053a:	b292      	uxth	r2, r2
9000053c:	fbb1 f5f7 	udiv	r5, r1, r7
90000540:	fb07 1115 	mls	r1, r7, r5, r1
90000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90000548:	fb05 f10e 	mul.w	r1, r5, lr
9000054c:	4291      	cmp	r1, r2
9000054e:	d908      	bls.n	90000562 <__udivmoddi4+0x282>
90000550:	eb1c 0202 	adds.w	r2, ip, r2
90000554:	f105 38ff 	add.w	r8, r5, #4294967295
90000558:	d216      	bcs.n	90000588 <__udivmoddi4+0x2a8>
9000055a:	4291      	cmp	r1, r2
9000055c:	d914      	bls.n	90000588 <__udivmoddi4+0x2a8>
9000055e:	3d02      	subs	r5, #2
90000560:	4462      	add	r2, ip
90000562:	1a52      	subs	r2, r2, r1
90000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
90000568:	e738      	b.n	900003dc <__udivmoddi4+0xfc>
9000056a:	4631      	mov	r1, r6
9000056c:	4630      	mov	r0, r6
9000056e:	e708      	b.n	90000382 <__udivmoddi4+0xa2>
90000570:	4639      	mov	r1, r7
90000572:	e6e6      	b.n	90000342 <__udivmoddi4+0x62>
90000574:	4610      	mov	r0, r2
90000576:	e6fb      	b.n	90000370 <__udivmoddi4+0x90>
90000578:	4548      	cmp	r0, r9
9000057a:	d2a9      	bcs.n	900004d0 <__udivmoddi4+0x1f0>
9000057c:	ebb9 0802 	subs.w	r8, r9, r2
90000580:	eb65 0e0c 	sbc.w	lr, r5, ip
90000584:	3b01      	subs	r3, #1
90000586:	e7a3      	b.n	900004d0 <__udivmoddi4+0x1f0>
90000588:	4645      	mov	r5, r8
9000058a:	e7ea      	b.n	90000562 <__udivmoddi4+0x282>
9000058c:	462b      	mov	r3, r5
9000058e:	e794      	b.n	900004ba <__udivmoddi4+0x1da>
90000590:	4640      	mov	r0, r8
90000592:	e7d1      	b.n	90000538 <__udivmoddi4+0x258>
90000594:	46d0      	mov	r8, sl
90000596:	e77b      	b.n	90000490 <__udivmoddi4+0x1b0>
90000598:	3d02      	subs	r5, #2
9000059a:	4462      	add	r2, ip
9000059c:	e732      	b.n	90000404 <__udivmoddi4+0x124>
9000059e:	4608      	mov	r0, r1
900005a0:	e70a      	b.n	900003b8 <__udivmoddi4+0xd8>
900005a2:	4464      	add	r4, ip
900005a4:	3802      	subs	r0, #2
900005a6:	e742      	b.n	9000042e <__udivmoddi4+0x14e>

900005a8 <__aeabi_idiv0>:
900005a8:	4770      	bx	lr
900005aa:	bf00      	nop

900005ac <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
900005ac:	4770      	bx	lr

900005ae <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
900005ae:	2000      	movs	r0, #0
900005b0:	4770      	bx	lr
	...

900005b4 <ft5336_Init>:
{
900005b4:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
900005b6:	4c05      	ldr	r4, [pc, #20]	; (900005cc <ft5336_Init+0x18>)
  TS_IO_Delay(200);
900005b8:	20c8      	movs	r0, #200	; 0xc8
900005ba:	f001 fe6f 	bl	9000229c <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
900005be:	7823      	ldrb	r3, [r4, #0]
900005c0:	b91b      	cbnz	r3, 900005ca <ft5336_Init+0x16>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
900005c2:	f001 fe41 	bl	90002248 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
900005c6:	2301      	movs	r3, #1
900005c8:	7023      	strb	r3, [r4, #0]
}
900005ca:	bd10      	pop	{r4, pc}
900005cc:	2000015c 	.word	0x2000015c

900005d0 <ft5336_TS_DetectTouch>:
{
900005d0:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
900005d2:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
900005d4:	2102      	movs	r1, #2
900005d6:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
900005d8:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
900005dc:	f001 fe48 	bl	90002270 <TS_IO_Read>
900005e0:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
900005e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
900005e8:	f003 030f 	and.w	r3, r3, #15
900005ec:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
900005f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
900005f4:	2b05      	cmp	r3, #5
900005f6:	d901      	bls.n	900005fc <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
900005f8:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
900005fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
90000600:	4b03      	ldr	r3, [pc, #12]	; (90000610 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
90000602:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
90000606:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
90000608:	2200      	movs	r2, #0
9000060a:	709a      	strb	r2, [r3, #2]
}
9000060c:	b002      	add	sp, #8
9000060e:	bd10      	pop	{r4, pc}
90000610:	2000015c 	.word	0x2000015c

90000614 <ft5336_TS_GetXY>:
{
90000614:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90000618:	4c2b      	ldr	r4, [pc, #172]	; (900006c8 <ft5336_TS_GetXY+0xb4>)
{
9000061a:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
9000061c:	f04f 0800 	mov.w	r8, #0
{
90000620:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90000622:	78a3      	ldrb	r3, [r4, #2]
90000624:	7862      	ldrb	r2, [r4, #1]
  volatile uint8_t ucReadData = 0;
90000626:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
9000062a:	429a      	cmp	r2, r3
9000062c:	d945      	bls.n	900006ba <ft5336_TS_GetXY+0xa6>
    switch(ft5336_handle.currActiveTouchIdx)
9000062e:	2b09      	cmp	r3, #9
90000630:	d846      	bhi.n	900006c0 <ft5336_TS_GetXY+0xac>
90000632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
90000636:	005b      	lsls	r3, r3, #1
90000638:	b2db      	uxtb	r3, r3
9000063a:	1d19      	adds	r1, r3, #4
9000063c:	f103 0a03 	add.w	sl, r3, #3
90000640:	f103 0906 	add.w	r9, r3, #6
90000644:	3305      	adds	r3, #5
90000646:	b2c9      	uxtb	r1, r1
90000648:	fa5f fa8a 	uxtb.w	sl, sl
9000064c:	fa5f f989 	uxtb.w	r9, r9
90000650:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
90000654:	b2c6      	uxtb	r6, r0
90000656:	4630      	mov	r0, r6
90000658:	f001 fe0a 	bl	90002270 <TS_IO_Read>
9000065c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000660:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
90000664:	4651      	mov	r1, sl
90000666:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000668:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
9000066a:	f001 fe01 	bl	90002270 <TS_IO_Read>
9000066e:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000672:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000674:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000678:	4630      	mov	r0, r6
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
9000067a:	88a2      	ldrh	r2, [r4, #4]
9000067c:	021b      	lsls	r3, r3, #8
9000067e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90000682:	4313      	orrs	r3, r2
    *X = coord;
90000684:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000686:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000688:	f001 fdf2 	bl	90002270 <TS_IO_Read>
9000068c:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
90000690:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000692:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
90000696:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000698:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
9000069a:	f001 fde9 	bl	90002270 <TS_IO_Read>
9000069e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
900006a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
900006a6:	88a2      	ldrh	r2, [r4, #4]
900006a8:	021b      	lsls	r3, r3, #8
900006aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
900006ae:	4313      	orrs	r3, r2
900006b0:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
900006b2:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
900006b4:	78a3      	ldrb	r3, [r4, #2]
900006b6:	3301      	adds	r3, #1
900006b8:	70a3      	strb	r3, [r4, #2]
}
900006ba:	b002      	add	sp, #8
900006bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
900006c0:	46c1      	mov	r9, r8
900006c2:	46c2      	mov	sl, r8
900006c4:	4641      	mov	r1, r8
900006c6:	e7c5      	b.n	90000654 <ft5336_TS_GetXY+0x40>
900006c8:	2000015c 	.word	0x2000015c

900006cc <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
900006cc:	2201      	movs	r2, #1
900006ce:	21a4      	movs	r1, #164	; 0xa4
900006d0:	b2c0      	uxtb	r0, r0
900006d2:	f001 bdbb 	b.w	9000224c <TS_IO_Write>

900006d6 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
900006d6:	2200      	movs	r2, #0
900006d8:	21a4      	movs	r1, #164	; 0xa4
900006da:	b2c0      	uxtb	r0, r0
900006dc:	f001 bdb6 	b.w	9000224c <TS_IO_Write>

900006e0 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
900006e0:	f7ff bff9 	b.w	900006d6 <ft5336_TS_DisableIT>

900006e4 <ft5336_TS_ClearIT>:
900006e4:	4770      	bx	lr
	...

900006e8 <ft5336_ReadID>:
{
900006e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
900006ea:	2300      	movs	r3, #0
  return(ft5336_handle.i2cInitialized);
900006ec:	4c0f      	ldr	r4, [pc, #60]	; (9000072c <ft5336_ReadID+0x44>)
{
900006ee:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
900006f0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
900006f4:	7823      	ldrb	r3, [r4, #0]
900006f6:	b91b      	cbnz	r3, 90000700 <ft5336_ReadID+0x18>
    TS_IO_Init();
900006f8:	f001 fda6 	bl	90002248 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
900006fc:	2301      	movs	r3, #1
900006fe:	7023      	strb	r3, [r4, #0]
{
90000700:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000702:	b2ed      	uxtb	r5, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
90000704:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000706:	21a8      	movs	r1, #168	; 0xa8
90000708:	4628      	mov	r0, r5
9000070a:	f001 fdb1 	bl	90002270 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
9000070e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000712:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
90000716:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000071a:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
9000071c:	d103      	bne.n	90000726 <ft5336_ReadID+0x3e>
  return (ucReadId);
9000071e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
90000722:	b003      	add	sp, #12
90000724:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
90000726:	2b51      	cmp	r3, #81	; 0x51
90000728:	d1ec      	bne.n	90000704 <ft5336_ReadID+0x1c>
9000072a:	e7f8      	b.n	9000071e <ft5336_ReadID+0x36>
9000072c:	2000015c 	.word	0x2000015c

90000730 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
90000730:	2300      	movs	r3, #0
{
90000732:	b513      	push	{r0, r1, r4, lr}
90000734:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
90000736:	b2c0      	uxtb	r0, r0
90000738:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
9000073a:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
9000073e:	f001 fd97 	bl	90002270 <TS_IO_Read>
90000742:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
90000746:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000074a:	6023      	str	r3, [r4, #0]
}
9000074c:	b002      	add	sp, #8
9000074e:	bd10      	pop	{r4, pc}

90000750 <ft5336_TS_GetTouchInfo>:
{
90000750:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90000754:	461d      	mov	r5, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
90000756:	4b1d      	ldr	r3, [pc, #116]	; (900007cc <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
90000758:	2400      	movs	r4, #0
{
9000075a:	4616      	mov	r6, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
9000075c:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
9000075e:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
90000762:	428b      	cmp	r3, r1
90000764:	d92c      	bls.n	900007c0 <ft5336_TS_GetTouchInfo+0x70>
    switch(touchIdx)
90000766:	2909      	cmp	r1, #9
90000768:	d82d      	bhi.n	900007c6 <ft5336_TS_GetTouchInfo+0x76>
9000076a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000076e:	004c      	lsls	r4, r1, #1
90000770:	b2e4      	uxtb	r4, r4
90000772:	1ce1      	adds	r1, r4, #3
90000774:	1de7      	adds	r7, r4, #7
90000776:	3408      	adds	r4, #8
90000778:	b2c9      	uxtb	r1, r1
9000077a:	b2ff      	uxtb	r7, r7
9000077c:	b2e4      	uxtb	r4, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
9000077e:	fa5f f880 	uxtb.w	r8, r0
90000782:	4640      	mov	r0, r8
90000784:	f001 fd74 	bl	90002270 <TS_IO_Read>
90000788:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
9000078c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
90000790:	4639      	mov	r1, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
90000792:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
90000794:	4640      	mov	r0, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
90000796:	099b      	lsrs	r3, r3, #6
90000798:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
9000079a:	f001 fd69 	bl	90002270 <TS_IO_Read>
9000079e:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
900007a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
900007a6:	4621      	mov	r1, r4
900007a8:	4640      	mov	r0, r8
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
900007aa:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
900007ac:	f001 fd60 	bl	90002270 <TS_IO_Read>
900007b0:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
900007b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
900007b8:	0912      	lsrs	r2, r2, #4
900007ba:	f002 0204 	and.w	r2, r2, #4
900007be:	602a      	str	r2, [r5, #0]
}
900007c0:	b002      	add	sp, #8
900007c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
900007c6:	4627      	mov	r7, r4
900007c8:	4621      	mov	r1, r4
900007ca:	e7d8      	b.n	9000077e <ft5336_TS_GetTouchInfo+0x2e>
900007cc:	2000015c 	.word	0x2000015c

900007d0 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
900007d0:	2901      	cmp	r1, #1
{
900007d2:	b507      	push	{r0, r1, r2, lr}
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
900007d4:	b2c0      	uxtb	r0, r0
  switch (Output) 
900007d6:	d00f      	beq.n	900007f8 <wm8994_SetOutputMode+0x28>
900007d8:	2903      	cmp	r1, #3
900007da:	d12f      	bne.n	9000083c <wm8994_SetOutputMode+0x6c>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
900007dc:	f640 720f 	movw	r2, #3855	; 0xf0f
900007e0:	2105      	movs	r1, #5
900007e2:	9001      	str	r0, [sp, #4]
900007e4:	f001 fd02 	bl	900021ec <AUDIO_IO_Write>
900007e8:	2201      	movs	r2, #1
900007ea:	f240 6101 	movw	r1, #1537	; 0x601
900007ee:	9801      	ldr	r0, [sp, #4]
900007f0:	f001 fcfc 	bl	900021ec <AUDIO_IO_Write>
900007f4:	2201      	movs	r2, #1
900007f6:	e00c      	b.n	90000812 <wm8994_SetOutputMode+0x42>
900007f8:	f640 420c 	movw	r2, #3084	; 0xc0c
900007fc:	2105      	movs	r1, #5
900007fe:	9001      	str	r0, [sp, #4]
90000800:	f001 fcf4 	bl	900021ec <AUDIO_IO_Write>
90000804:	2200      	movs	r2, #0
90000806:	f240 6101 	movw	r1, #1537	; 0x601
9000080a:	9801      	ldr	r0, [sp, #4]
9000080c:	f001 fcee 	bl	900021ec <AUDIO_IO_Write>
90000810:	2200      	movs	r2, #0
90000812:	f240 6102 	movw	r1, #1538	; 0x602
90000816:	9801      	ldr	r0, [sp, #4]
90000818:	f001 fce8 	bl	900021ec <AUDIO_IO_Write>
9000081c:	2202      	movs	r2, #2
9000081e:	f240 6104 	movw	r1, #1540	; 0x604
90000822:	9801      	ldr	r0, [sp, #4]
90000824:	f001 fce2 	bl	900021ec <AUDIO_IO_Write>
90000828:	2202      	movs	r2, #2
9000082a:	9801      	ldr	r0, [sp, #4]
9000082c:	f240 6105 	movw	r1, #1541	; 0x605
90000830:	f001 fcdc 	bl	900021ec <AUDIO_IO_Write>
}
90000834:	2000      	movs	r0, #0
90000836:	b003      	add	sp, #12
90000838:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
9000083c:	f240 3203 	movw	r2, #771	; 0x303
90000840:	2105      	movs	r1, #5
90000842:	9001      	str	r0, [sp, #4]
90000844:	f001 fcd2 	bl	900021ec <AUDIO_IO_Write>
90000848:	2201      	movs	r2, #1
9000084a:	f240 6101 	movw	r1, #1537	; 0x601
9000084e:	9801      	ldr	r0, [sp, #4]
90000850:	f001 fccc 	bl	900021ec <AUDIO_IO_Write>
90000854:	2201      	movs	r2, #1
90000856:	f240 6102 	movw	r1, #1538	; 0x602
9000085a:	9801      	ldr	r0, [sp, #4]
9000085c:	f001 fcc6 	bl	900021ec <AUDIO_IO_Write>
90000860:	2200      	movs	r2, #0
90000862:	f240 6104 	movw	r1, #1540	; 0x604
90000866:	9801      	ldr	r0, [sp, #4]
90000868:	f001 fcc0 	bl	900021ec <AUDIO_IO_Write>
9000086c:	2200      	movs	r2, #0
9000086e:	e7dc      	b.n	9000082a <wm8994_SetOutputMode+0x5a>

90000870 <wm8994_SetFrequency>:
{
90000870:	b508      	push	{r3, lr}
  switch (AudioFreq)
90000872:	f245 6322 	movw	r3, #22050	; 0x5622
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
90000876:	b2c0      	uxtb	r0, r0
  switch (AudioFreq)
90000878:	4299      	cmp	r1, r3
9000087a:	d025      	beq.n	900008c8 <wm8994_SetFrequency+0x58>
9000087c:	d80b      	bhi.n	90000896 <wm8994_SetFrequency+0x26>
9000087e:	f642 3311 	movw	r3, #11025	; 0x2b11
90000882:	4299      	cmp	r1, r3
90000884:	d01e      	beq.n	900008c4 <wm8994_SetFrequency+0x54>
90000886:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
9000088a:	d017      	beq.n	900008bc <wm8994_SetFrequency+0x4c>
9000088c:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
90000890:	d00d      	beq.n	900008ae <wm8994_SetFrequency+0x3e>
 AUDIO_IO_Write(Addr, Reg, Value);
90000892:	2283      	movs	r2, #131	; 0x83
90000894:	e00c      	b.n	900008b0 <wm8994_SetFrequency+0x40>
  switch (AudioFreq)
90000896:	f64a 4344 	movw	r3, #44100	; 0xac44
9000089a:	4299      	cmp	r1, r3
9000089c:	d016      	beq.n	900008cc <wm8994_SetFrequency+0x5c>
9000089e:	4b0c      	ldr	r3, [pc, #48]	; (900008d0 <wm8994_SetFrequency+0x60>)
900008a0:	4299      	cmp	r1, r3
900008a2:	d00d      	beq.n	900008c0 <wm8994_SetFrequency+0x50>
900008a4:	f5b1 4ffa 	cmp.w	r1, #32000	; 0x7d00
900008a8:	d1f3      	bne.n	90000892 <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
900008aa:	2263      	movs	r2, #99	; 0x63
900008ac:	e000      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008ae:	2203      	movs	r2, #3
900008b0:	f44f 7104 	mov.w	r1, #528	; 0x210
900008b4:	f001 fc9a 	bl	900021ec <AUDIO_IO_Write>
}
900008b8:	2000      	movs	r0, #0
900008ba:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
900008bc:	2233      	movs	r2, #51	; 0x33
900008be:	e7f7      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c0:	22a3      	movs	r2, #163	; 0xa3
900008c2:	e7f5      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c4:	2213      	movs	r2, #19
900008c6:	e7f3      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c8:	2243      	movs	r2, #67	; 0x43
900008ca:	e7f1      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008cc:	2273      	movs	r2, #115	; 0x73
900008ce:	e7ef      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008d0:	00017700 	.word	0x00017700

900008d4 <wm8994_Reset>:
900008d4:	2200      	movs	r2, #0
900008d6:	b2c0      	uxtb	r0, r0
{
900008d8:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
900008da:	4611      	mov	r1, r2
900008dc:	f001 fc86 	bl	900021ec <AUDIO_IO_Write>
  outputEnabled = 0;
900008e0:	4b02      	ldr	r3, [pc, #8]	; (900008ec <wm8994_Reset+0x18>)
900008e2:	2000      	movs	r0, #0
  inputEnabled=0;
900008e4:	e9c3 0000 	strd	r0, r0, [r3]
}
900008e8:	bd08      	pop	{r3, pc}
900008ea:	bf00      	nop
900008ec:	20000164 	.word	0x20000164

900008f0 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
900008f0:	f001 bc7a 	b.w	900021e8 <AUDIO_IO_DeInit>

900008f4 <wm8994_ReadID>:
{
900008f4:	b510      	push	{r4, lr}
900008f6:	4604      	mov	r4, r0
  AUDIO_IO_Init();
900008f8:	f001 fc70 	bl	900021dc <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
900008fc:	2100      	movs	r1, #0
900008fe:	b2e0      	uxtb	r0, r4
90000900:	f001 fc88 	bl	90002214 <AUDIO_IO_Read>
}
90000904:	bd10      	pop	{r4, pc}
	...

90000908 <wm8994_SetMute>:
  if (outputEnabled != 0)
90000908:	4b10      	ldr	r3, [pc, #64]	; (9000094c <wm8994_SetMute+0x44>)
9000090a:	681b      	ldr	r3, [r3, #0]
{
9000090c:	b507      	push	{r0, r1, r2, lr}
  if (outputEnabled != 0)
9000090e:	b183      	cbz	r3, 90000932 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
90000910:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
90000912:	b2c0      	uxtb	r0, r0
    if(Cmd == AUDIO_MUTE_ON)
90000914:	d111      	bne.n	9000093a <wm8994_SetMute+0x32>
 AUDIO_IO_Write(Addr, Reg, Value);
90000916:	f44f 7200 	mov.w	r2, #512	; 0x200
9000091a:	f44f 6184 	mov.w	r1, #1056	; 0x420
9000091e:	9001      	str	r0, [sp, #4]
90000920:	f001 fc64 	bl	900021ec <AUDIO_IO_Write>
90000924:	f44f 7200 	mov.w	r2, #512	; 0x200
90000928:	f240 4122 	movw	r1, #1058	; 0x422
9000092c:	9801      	ldr	r0, [sp, #4]
9000092e:	f001 fc5d 	bl	900021ec <AUDIO_IO_Write>
}
90000932:	2000      	movs	r0, #0
90000934:	b003      	add	sp, #12
90000936:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
9000093a:	2210      	movs	r2, #16
9000093c:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000940:	9001      	str	r0, [sp, #4]
90000942:	f001 fc53 	bl	900021ec <AUDIO_IO_Write>
90000946:	2210      	movs	r2, #16
90000948:	e7ee      	b.n	90000928 <wm8994_SetMute+0x20>
9000094a:	bf00      	nop
9000094c:	20000164 	.word	0x20000164

90000950 <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000950:	2100      	movs	r1, #0
90000952:	f7ff bfd9 	b.w	90000908 <wm8994_SetMute>

90000956 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000956:	2100      	movs	r1, #0
90000958:	f7ff bfd6 	b.w	90000908 <wm8994_SetMute>

9000095c <wm8994_Pause>:
{  
9000095c:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
9000095e:	2101      	movs	r1, #1
{  
90000960:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000962:	f7ff ffd1 	bl	90000908 <wm8994_SetMute>
90000966:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
90000968:	2201      	movs	r2, #1
9000096a:	b2e8      	uxtb	r0, r5
9000096c:	2102      	movs	r1, #2
9000096e:	f001 fc3d 	bl	900021ec <AUDIO_IO_Write>
}
90000972:	4620      	mov	r0, r4
90000974:	bd38      	pop	{r3, r4, r5, pc}
	...

90000978 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000978:	2964      	cmp	r1, #100	; 0x64
9000097a:	f04f 0264 	mov.w	r2, #100	; 0x64
9000097e:	bf98      	it	ls
90000980:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
{
90000984:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000988:	bf98      	it	ls
9000098a:	fbb3 f3f2 	udivls	r3, r3, r2
  if (outputEnabled != 0)
9000098e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 90000a7c <wm8994_SetVolume+0x104>
{
90000992:	4605      	mov	r5, r0
90000994:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000996:	bf98      	it	ls
90000998:	b2df      	uxtbls	r7, r3
  if (outputEnabled != 0)
9000099a:	f8d8 6000 	ldr.w	r6, [r8]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
9000099e:	bf88      	it	hi
900009a0:	4617      	movhi	r7, r2
  if (outputEnabled != 0)
900009a2:	b32e      	cbz	r6, 900009f0 <wm8994_SetVolume+0x78>
    if(convertedvol > 0x3E)
900009a4:	2f3e      	cmp	r7, #62	; 0x3e
900009a6:	d91d      	bls.n	900009e4 <wm8994_SetVolume+0x6c>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
900009a8:	2100      	movs	r1, #0
900009aa:	f7ff ffad 	bl	90000908 <wm8994_SetMute>
900009ae:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
900009b0:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
900009b2:	f240 127f 	movw	r2, #383	; 0x17f
900009b6:	211c      	movs	r1, #28
900009b8:	9000      	str	r0, [sp, #0]
900009ba:	f001 fc17 	bl	900021ec <AUDIO_IO_Write>
900009be:	f240 127f 	movw	r2, #383	; 0x17f
900009c2:	211d      	movs	r1, #29
900009c4:	9800      	ldr	r0, [sp, #0]
900009c6:	f001 fc11 	bl	900021ec <AUDIO_IO_Write>
900009ca:	f240 127f 	movw	r2, #383	; 0x17f
900009ce:	2126      	movs	r1, #38	; 0x26
900009d0:	9800      	ldr	r0, [sp, #0]
900009d2:	f001 fc0b 	bl	900021ec <AUDIO_IO_Write>
900009d6:	f240 127f 	movw	r2, #383	; 0x17f
900009da:	2127      	movs	r1, #39	; 0x27
900009dc:	9800      	ldr	r0, [sp, #0]
900009de:	f001 fc05 	bl	900021ec <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
900009e2:	e005      	b.n	900009f0 <wm8994_SetVolume+0x78>
    else if (Volume == 0)
900009e4:	2900      	cmp	r1, #0
900009e6:	d130      	bne.n	90000a4a <wm8994_SetVolume+0xd2>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
900009e8:	2101      	movs	r1, #1
900009ea:	f7ff ff8d 	bl	90000908 <wm8994_SetMute>
900009ee:	4606      	mov	r6, r0
  if (inputEnabled != 0)
900009f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
900009f4:	b32b      	cbz	r3, 90000a42 <wm8994_SetVolume+0xca>
    convertedvol = VOLUME_IN_CONVERT(Volume);
900009f6:	2c63      	cmp	r4, #99	; 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
900009f8:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
900009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
900009fe:	bf9a      	itte	ls
90000a00:	ebc4 1204 	rsbls	r2, r4, r4, lsl #4
90000a04:	2364      	movls	r3, #100	; 0x64
90000a06:	22ef      	movhi	r2, #239	; 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
90000a08:	9000      	str	r0, [sp, #0]
    convertedvol = VOLUME_IN_CONVERT(Volume);
90000a0a:	bf9e      	ittt	ls
90000a0c:	0112      	lslls	r2, r2, #4
90000a0e:	fbb2 f2f3 	udivls	r2, r2, r3
90000a12:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
90000a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
90000a18:	9201      	str	r2, [sp, #4]
90000a1a:	f001 fbe7 	bl	900021ec <AUDIO_IO_Write>
90000a1e:	9a01      	ldr	r2, [sp, #4]
90000a20:	f240 4101 	movw	r1, #1025	; 0x401
90000a24:	9800      	ldr	r0, [sp, #0]
90000a26:	f001 fbe1 	bl	900021ec <AUDIO_IO_Write>
90000a2a:	9a01      	ldr	r2, [sp, #4]
90000a2c:	f240 4104 	movw	r1, #1028	; 0x404
90000a30:	9800      	ldr	r0, [sp, #0]
90000a32:	f001 fbdb 	bl	900021ec <AUDIO_IO_Write>
90000a36:	9a01      	ldr	r2, [sp, #4]
90000a38:	f240 4105 	movw	r1, #1029	; 0x405
90000a3c:	9800      	ldr	r0, [sp, #0]
90000a3e:	f001 fbd5 	bl	900021ec <AUDIO_IO_Write>
}
90000a42:	4630      	mov	r0, r6
90000a44:	b002      	add	sp, #8
90000a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000a4a:	2100      	movs	r1, #0
90000a4c:	f7ff ff5c 	bl	90000908 <wm8994_SetMute>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
90000a50:	f447 72a0 	orr.w	r2, r7, #320	; 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000a54:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
90000a56:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
90000a58:	211c      	movs	r1, #28
90000a5a:	9201      	str	r2, [sp, #4]
90000a5c:	9000      	str	r0, [sp, #0]
90000a5e:	f001 fbc5 	bl	900021ec <AUDIO_IO_Write>
90000a62:	9a01      	ldr	r2, [sp, #4]
90000a64:	211d      	movs	r1, #29
90000a66:	9800      	ldr	r0, [sp, #0]
90000a68:	f001 fbc0 	bl	900021ec <AUDIO_IO_Write>
90000a6c:	9a01      	ldr	r2, [sp, #4]
90000a6e:	2126      	movs	r1, #38	; 0x26
90000a70:	9800      	ldr	r0, [sp, #0]
90000a72:	f001 fbbb 	bl	900021ec <AUDIO_IO_Write>
90000a76:	9a01      	ldr	r2, [sp, #4]
90000a78:	e7af      	b.n	900009da <wm8994_SetVolume+0x62>
90000a7a:	bf00      	nop
90000a7c:	20000164 	.word	0x20000164

90000a80 <wm8994_Init>:
{
90000a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000a84:	4681      	mov	r9, r0
90000a86:	4698      	mov	r8, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
90000a88:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
{
90000a8c:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
90000a8e:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
90000a92:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
90000a94:	f001 fba2 	bl	900021dc <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
90000a98:	2203      	movs	r2, #3
90000a9a:	f44f 7181 	mov.w	r1, #258	; 0x102
90000a9e:	4620      	mov	r0, r4
90000aa0:	f001 fba4 	bl	900021ec <AUDIO_IO_Write>
90000aa4:	2200      	movs	r2, #0
90000aa6:	f640 0117 	movw	r1, #2071	; 0x817
90000aaa:	4620      	mov	r0, r4
90000aac:	f001 fb9e 	bl	900021ec <AUDIO_IO_Write>
90000ab0:	2200      	movs	r2, #0
90000ab2:	f44f 7181 	mov.w	r1, #258	; 0x102
90000ab6:	4620      	mov	r0, r4
90000ab8:	f001 fb98 	bl	900021ec <AUDIO_IO_Write>
90000abc:	226c      	movs	r2, #108	; 0x6c
90000abe:	2139      	movs	r1, #57	; 0x39
90000ac0:	4620      	mov	r0, r4
90000ac2:	f001 fb93 	bl	900021ec <AUDIO_IO_Write>
  if (input_device > 0)
90000ac6:	b3c5      	cbz	r5, 90000b3a <wm8994_Init+0xba>
 AUDIO_IO_Write(Addr, Reg, Value);
90000ac8:	2213      	movs	r2, #19
90000aca:	2101      	movs	r1, #1
90000acc:	4620      	mov	r0, r4
90000ace:	f001 fb8d 	bl	900021ec <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
90000ad2:	2032      	movs	r0, #50	; 0x32
90000ad4:	f8df b4ec 	ldr.w	fp, [pc, #1260]	; 90000fc4 <wm8994_Init+0x544>
90000ad8:	f001 fbb4 	bl	90002244 <AUDIO_IO_Delay>
  if (output_device > 0)
90000adc:	2e00      	cmp	r6, #0
90000ade:	f000 809a 	beq.w	90000c16 <wm8994_Init+0x196>
    outputEnabled = 1;
90000ae2:	2701      	movs	r7, #1
    switch (output_device)
90000ae4:	2e02      	cmp	r6, #2
    outputEnabled = 1;
90000ae6:	f8cb 7000 	str.w	r7, [fp]
    switch (output_device)
90000aea:	d07a      	beq.n	90000be2 <wm8994_Init+0x162>
90000aec:	2e03      	cmp	r6, #3
90000aee:	d026      	beq.n	90000b3e <wm8994_Init+0xbe>
90000af0:	42be      	cmp	r6, r7
90000af2:	d176      	bne.n	90000be2 <wm8994_Init+0x162>
 AUDIO_IO_Write(Addr, Reg, Value);
90000af4:	f640 420c 	movw	r2, #3084	; 0xc0c
90000af8:	2105      	movs	r1, #5
90000afa:	4620      	mov	r0, r4
90000afc:	f001 fb76 	bl	900021ec <AUDIO_IO_Write>
90000b00:	2200      	movs	r2, #0
90000b02:	f240 6101 	movw	r1, #1537	; 0x601
90000b06:	4620      	mov	r0, r4
90000b08:	f001 fb70 	bl	900021ec <AUDIO_IO_Write>
90000b0c:	2200      	movs	r2, #0
90000b0e:	f240 6102 	movw	r1, #1538	; 0x602
90000b12:	4620      	mov	r0, r4
90000b14:	f001 fb6a 	bl	900021ec <AUDIO_IO_Write>
90000b18:	2202      	movs	r2, #2
90000b1a:	f240 6104 	movw	r1, #1540	; 0x604
90000b1e:	4620      	mov	r0, r4
90000b20:	f001 fb64 	bl	900021ec <AUDIO_IO_Write>
90000b24:	2202      	movs	r2, #2
90000b26:	f240 6105 	movw	r1, #1541	; 0x605
90000b2a:	4620      	mov	r0, r4
90000b2c:	f001 fb5e 	bl	900021ec <AUDIO_IO_Write>
  if (input_device > 0)
90000b30:	bb3d      	cbnz	r5, 90000b82 <wm8994_Init+0x102>
    inputEnabled = 0;
90000b32:	462f      	mov	r7, r5
90000b34:	f8cb 5004 	str.w	r5, [fp, #4]
90000b38:	e032      	b.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000b3a:	2203      	movs	r2, #3
90000b3c:	e7c5      	b.n	90000aca <wm8994_Init+0x4a>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000b3e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000b42:	f640 720f 	movw	r2, #3855	; 0xf0f
90000b46:	f04f 0105 	mov.w	r1, #5
90000b4a:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000b4c:	d13f      	bne.n	90000bce <wm8994_Init+0x14e>
 AUDIO_IO_Write(Addr, Reg, Value);
90000b4e:	f001 fb4d 	bl	900021ec <AUDIO_IO_Write>
90000b52:	4632      	mov	r2, r6
90000b54:	f240 6101 	movw	r1, #1537	; 0x601
90000b58:	4620      	mov	r0, r4
90000b5a:	f001 fb47 	bl	900021ec <AUDIO_IO_Write>
90000b5e:	4632      	mov	r2, r6
90000b60:	f240 6102 	movw	r1, #1538	; 0x602
90000b64:	4620      	mov	r0, r4
90000b66:	f001 fb41 	bl	900021ec <AUDIO_IO_Write>
90000b6a:	4632      	mov	r2, r6
90000b6c:	f240 6104 	movw	r1, #1540	; 0x604
90000b70:	4620      	mov	r0, r4
90000b72:	f001 fb3b 	bl	900021ec <AUDIO_IO_Write>
90000b76:	4632      	mov	r2, r6
90000b78:	f240 6105 	movw	r1, #1541	; 0x605
90000b7c:	4620      	mov	r0, r4
90000b7e:	f001 fb35 	bl	900021ec <AUDIO_IO_Write>
    inputEnabled = 1;
90000b82:	2701      	movs	r7, #1
    switch (input_device)
90000b84:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    inputEnabled = 1;
90000b88:	f8cb 7004 	str.w	r7, [fp, #4]
    switch (input_device)
90000b8c:	f000 809d 	beq.w	90000cca <wm8994_Init+0x24a>
90000b90:	d844      	bhi.n	90000c1c <wm8994_Init+0x19c>
90000b92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90000b96:	f000 80c7 	beq.w	90000d28 <wm8994_Init+0x2a8>
90000b9a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
90000b9e:	d06e      	beq.n	90000c7e <wm8994_Init+0x1fe>
  switch (AudioFreq)
90000ba0:	f5b8 4ffa 	cmp.w	r8, #32000	; 0x7d00
90000ba4:	f000 81cd 	beq.w	90000f42 <wm8994_Init+0x4c2>
90000ba8:	f200 80c8 	bhi.w	90000d3c <wm8994_Init+0x2bc>
90000bac:	f5b8 5f7a 	cmp.w	r8, #16000	; 0x3e80
90000bb0:	f000 81c5 	beq.w	90000f3e <wm8994_Init+0x4be>
90000bb4:	f200 80bb 	bhi.w	90000d2e <wm8994_Init+0x2ae>
90000bb8:	f5b8 5ffa 	cmp.w	r8, #8000	; 0x1f40
90000bbc:	f000 80ce 	beq.w	90000d5c <wm8994_Init+0x2dc>
90000bc0:	f642 3311 	movw	r3, #11025	; 0x2b11
90000bc4:	4598      	cmp	r8, r3
90000bc6:	f000 81c0 	beq.w	90000f4a <wm8994_Init+0x4ca>
 AUDIO_IO_Write(Addr, Reg, Value);
90000bca:	2283      	movs	r2, #131	; 0x83
90000bcc:	e0c7      	b.n	90000d5e <wm8994_Init+0x2de>
90000bce:	f001 fb0d 	bl	900021ec <AUDIO_IO_Write>
90000bd2:	463a      	mov	r2, r7
90000bd4:	f240 6101 	movw	r1, #1537	; 0x601
90000bd8:	4620      	mov	r0, r4
90000bda:	f001 fb07 	bl	900021ec <AUDIO_IO_Write>
90000bde:	463a      	mov	r2, r7
90000be0:	e795      	b.n	90000b0e <wm8994_Init+0x8e>
90000be2:	f240 3203 	movw	r2, #771	; 0x303
90000be6:	2105      	movs	r1, #5
90000be8:	4620      	mov	r0, r4
90000bea:	f001 faff 	bl	900021ec <AUDIO_IO_Write>
90000bee:	463a      	mov	r2, r7
90000bf0:	f240 6101 	movw	r1, #1537	; 0x601
90000bf4:	4620      	mov	r0, r4
90000bf6:	f001 faf9 	bl	900021ec <AUDIO_IO_Write>
90000bfa:	463a      	mov	r2, r7
90000bfc:	f240 6102 	movw	r1, #1538	; 0x602
90000c00:	4620      	mov	r0, r4
90000c02:	f001 faf3 	bl	900021ec <AUDIO_IO_Write>
90000c06:	2200      	movs	r2, #0
90000c08:	f240 6104 	movw	r1, #1540	; 0x604
90000c0c:	4620      	mov	r0, r4
90000c0e:	f001 faed 	bl	900021ec <AUDIO_IO_Write>
90000c12:	2200      	movs	r2, #0
90000c14:	e787      	b.n	90000b26 <wm8994_Init+0xa6>
    outputEnabled = 0;
90000c16:	f8cb 6000 	str.w	r6, [fp]
90000c1a:	e789      	b.n	90000b30 <wm8994_Init+0xb0>
    switch (input_device)
90000c1c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
90000c20:	d1be      	bne.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000c22:	f640 723c 	movw	r2, #3900	; 0xf3c
90000c26:	2104      	movs	r1, #4
90000c28:	4620      	mov	r0, r4
90000c2a:	f001 fadf 	bl	900021ec <AUDIO_IO_Write>
90000c2e:	22db      	movs	r2, #219	; 0xdb
90000c30:	f44f 618a 	mov.w	r1, #1104	; 0x450
90000c34:	4620      	mov	r0, r4
90000c36:	f001 fad9 	bl	900021ec <AUDIO_IO_Write>
90000c3a:	22db      	movs	r2, #219	; 0xdb
90000c3c:	f44f 6188 	mov.w	r1, #1088	; 0x440
90000c40:	4620      	mov	r0, r4
90000c42:	f001 fad3 	bl	900021ec <AUDIO_IO_Write>
90000c46:	f246 32a0 	movw	r2, #25504	; 0x63a0
90000c4a:	2102      	movs	r1, #2
90000c4c:	4620      	mov	r0, r4
90000c4e:	f001 facd 	bl	900021ec <AUDIO_IO_Write>
90000c52:	2202      	movs	r2, #2
90000c54:	f240 6106 	movw	r1, #1542	; 0x606
90000c58:	4620      	mov	r0, r4
90000c5a:	f001 fac7 	bl	900021ec <AUDIO_IO_Write>
90000c5e:	2202      	movs	r2, #2
90000c60:	f240 6107 	movw	r1, #1543	; 0x607
90000c64:	4620      	mov	r0, r4
90000c66:	f001 fac1 	bl	900021ec <AUDIO_IO_Write>
90000c6a:	2202      	movs	r2, #2
90000c6c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
90000c70:	4620      	mov	r0, r4
90000c72:	f001 fabb 	bl	900021ec <AUDIO_IO_Write>
90000c76:	2202      	movs	r2, #2
90000c78:	f240 6109 	movw	r1, #1545	; 0x609
90000c7c:	e04f      	b.n	90000d1e <wm8994_Init+0x29e>
90000c7e:	f44f 6243 	mov.w	r2, #3120	; 0xc30
90000c82:	2104      	movs	r1, #4
90000c84:	4620      	mov	r0, r4
90000c86:	f001 fab1 	bl	900021ec <AUDIO_IO_Write>
90000c8a:	22db      	movs	r2, #219	; 0xdb
90000c8c:	f44f 618a 	mov.w	r1, #1104	; 0x450
90000c90:	4620      	mov	r0, r4
90000c92:	f001 faab 	bl	900021ec <AUDIO_IO_Write>
90000c96:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
90000c9a:	2102      	movs	r1, #2
90000c9c:	4620      	mov	r0, r4
90000c9e:	f001 faa5 	bl	900021ec <AUDIO_IO_Write>
90000ca2:	2202      	movs	r2, #2
90000ca4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
90000ca8:	4620      	mov	r0, r4
90000caa:	f001 fa9f 	bl	900021ec <AUDIO_IO_Write>
90000cae:	2202      	movs	r2, #2
90000cb0:	f240 6109 	movw	r1, #1545	; 0x609
90000cb4:	4620      	mov	r0, r4
90000cb6:	f001 fa99 	bl	900021ec <AUDIO_IO_Write>
90000cba:	220e      	movs	r2, #14
90000cbc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
90000cc0:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
90000cc2:	2700      	movs	r7, #0
 AUDIO_IO_Write(Addr, Reg, Value);
90000cc4:	f001 fa92 	bl	900021ec <AUDIO_IO_Write>
      break; 
90000cc8:	e76a      	b.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000cca:	2211      	movs	r2, #17
90000ccc:	2128      	movs	r1, #40	; 0x28
90000cce:	4620      	mov	r0, r4
90000cd0:	f001 fa8c 	bl	900021ec <AUDIO_IO_Write>
90000cd4:	2235      	movs	r2, #53	; 0x35
90000cd6:	2129      	movs	r1, #41	; 0x29
90000cd8:	4620      	mov	r0, r4
90000cda:	f001 fa87 	bl	900021ec <AUDIO_IO_Write>
90000cde:	2235      	movs	r2, #53	; 0x35
90000ce0:	212a      	movs	r1, #42	; 0x2a
90000ce2:	4620      	mov	r0, r4
90000ce4:	f001 fa82 	bl	900021ec <AUDIO_IO_Write>
90000ce8:	f240 3203 	movw	r2, #771	; 0x303
90000cec:	2104      	movs	r1, #4
90000cee:	4620      	mov	r0, r4
90000cf0:	f001 fa7c 	bl	900021ec <AUDIO_IO_Write>
90000cf4:	22db      	movs	r2, #219	; 0xdb
90000cf6:	f44f 6188 	mov.w	r1, #1088	; 0x440
90000cfa:	4620      	mov	r0, r4
90000cfc:	f001 fa76 	bl	900021ec <AUDIO_IO_Write>
90000d00:	f246 3250 	movw	r2, #25424	; 0x6350
90000d04:	2102      	movs	r1, #2
90000d06:	4620      	mov	r0, r4
90000d08:	f001 fa70 	bl	900021ec <AUDIO_IO_Write>
90000d0c:	2202      	movs	r2, #2
90000d0e:	f240 6106 	movw	r1, #1542	; 0x606
90000d12:	4620      	mov	r0, r4
90000d14:	f001 fa6a 	bl	900021ec <AUDIO_IO_Write>
90000d18:	2202      	movs	r2, #2
90000d1a:	f240 6107 	movw	r1, #1543	; 0x607
90000d1e:	4620      	mov	r0, r4
90000d20:	f001 fa64 	bl	900021ec <AUDIO_IO_Write>
90000d24:	220d      	movs	r2, #13
90000d26:	e7c9      	b.n	90000cbc <wm8994_Init+0x23c>
90000d28:	f44f 7243 	mov.w	r2, #780	; 0x30c
90000d2c:	e7de      	b.n	90000cec <wm8994_Init+0x26c>
  switch (AudioFreq)
90000d2e:	f245 6322 	movw	r3, #22050	; 0x5622
90000d32:	4598      	cmp	r8, r3
90000d34:	f47f af49 	bne.w	90000bca <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
90000d38:	2243      	movs	r2, #67	; 0x43
90000d3a:	e010      	b.n	90000d5e <wm8994_Init+0x2de>
  switch (AudioFreq)
90000d3c:	f64b 3380 	movw	r3, #48000	; 0xbb80
90000d40:	4598      	cmp	r8, r3
90000d42:	f43f af42 	beq.w	90000bca <wm8994_Init+0x14a>
90000d46:	4b9d      	ldr	r3, [pc, #628]	; (90000fbc <wm8994_Init+0x53c>)
90000d48:	4598      	cmp	r8, r3
90000d4a:	f000 80fc 	beq.w	90000f46 <wm8994_Init+0x4c6>
90000d4e:	f64a 4344 	movw	r3, #44100	; 0xac44
90000d52:	4598      	cmp	r8, r3
90000d54:	f47f af39 	bne.w	90000bca <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
90000d58:	2273      	movs	r2, #115	; 0x73
90000d5a:	e000      	b.n	90000d5e <wm8994_Init+0x2de>
90000d5c:	2203      	movs	r2, #3
90000d5e:	f44f 7104 	mov.w	r1, #528	; 0x210
90000d62:	4620      	mov	r0, r4
90000d64:	f001 fa42 	bl	900021ec <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000d68:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000d6c:	f44f 7140 	mov.w	r1, #768	; 0x300
90000d70:	4620      	mov	r0, r4
90000d72:	bf0c      	ite	eq
90000d74:	f244 0218 	movweq	r2, #16408	; 0x4018
90000d78:	f244 0210 	movwne	r2, #16400	; 0x4010
90000d7c:	f001 fa36 	bl	900021ec <AUDIO_IO_Write>
90000d80:	2200      	movs	r2, #0
90000d82:	f240 3102 	movw	r1, #770	; 0x302
90000d86:	4620      	mov	r0, r4
90000d88:	f001 fa30 	bl	900021ec <AUDIO_IO_Write>
90000d8c:	220a      	movs	r2, #10
90000d8e:	f44f 7102 	mov.w	r1, #520	; 0x208
90000d92:	4620      	mov	r0, r4
90000d94:	f001 fa2a 	bl	900021ec <AUDIO_IO_Write>
90000d98:	2201      	movs	r2, #1
90000d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
90000d9e:	4620      	mov	r0, r4
90000da0:	f001 fa24 	bl	900021ec <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
90000da4:	2e00      	cmp	r6, #0
90000da6:	f000 80a9 	beq.w	90000efc <wm8994_Init+0x47c>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
90000daa:	2e02      	cmp	r6, #2
90000dac:	d123      	bne.n	90000df6 <wm8994_Init+0x376>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dae:	f44f 7280 	mov.w	r2, #256	; 0x100
90000db2:	212d      	movs	r1, #45	; 0x2d
90000db4:	4620      	mov	r0, r4
      if(ColdStartup)
90000db6:	4e82      	ldr	r6, [pc, #520]	; (90000fc0 <wm8994_Init+0x540>)
 AUDIO_IO_Write(Addr, Reg, Value);
90000db8:	f001 fa18 	bl	900021ec <AUDIO_IO_Write>
90000dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
90000dc0:	212e      	movs	r1, #46	; 0x2e
90000dc2:	4620      	mov	r0, r4
90000dc4:	f001 fa12 	bl	900021ec <AUDIO_IO_Write>
      if(ColdStartup)
90000dc8:	7833      	ldrb	r3, [r6, #0]
90000dca:	2b00      	cmp	r3, #0
90000dcc:	f000 80bf 	beq.w	90000f4e <wm8994_Init+0x4ce>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dd0:	4620      	mov	r0, r4
90000dd2:	f44f 4201 	mov.w	r2, #33024	; 0x8100
90000dd6:	f44f 7188 	mov.w	r1, #272	; 0x110
90000dda:	f001 fa07 	bl	900021ec <AUDIO_IO_Write>
        ColdStartup=0;
90000dde:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
90000de0:	f44f 7096 	mov.w	r0, #300	; 0x12c
        ColdStartup=0;
90000de4:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
90000de6:	f001 fa2d 	bl	90002244 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dea:	2200      	movs	r2, #0
90000dec:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000df0:	4620      	mov	r0, r4
90000df2:	f001 f9fb 	bl	900021ec <AUDIO_IO_Write>
90000df6:	f44f 7240 	mov.w	r2, #768	; 0x300
90000dfa:	2103      	movs	r1, #3
90000dfc:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
90000dfe:	f243 3603 	movw	r6, #13059	; 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
90000e02:	f001 f9f3 	bl	900021ec <AUDIO_IO_Write>
90000e06:	2200      	movs	r2, #0
90000e08:	2122      	movs	r1, #34	; 0x22
90000e0a:	4620      	mov	r0, r4
90000e0c:	f001 f9ee 	bl	900021ec <AUDIO_IO_Write>
90000e10:	2200      	movs	r2, #0
90000e12:	2123      	movs	r1, #35	; 0x23
90000e14:	4620      	mov	r0, r4
90000e16:	f001 f9e9 	bl	900021ec <AUDIO_IO_Write>
90000e1a:	f44f 7240 	mov.w	r2, #768	; 0x300
90000e1e:	2136      	movs	r1, #54	; 0x36
90000e20:	4620      	mov	r0, r4
90000e22:	f001 f9e3 	bl	900021ec <AUDIO_IO_Write>
90000e26:	f243 0203 	movw	r2, #12291	; 0x3003
90000e2a:	2101      	movs	r1, #1
90000e2c:	4620      	mov	r0, r4
90000e2e:	f001 f9dd 	bl	900021ec <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000e32:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000e36:	f04f 0151 	mov.w	r1, #81	; 0x51
90000e3a:	4620      	mov	r0, r4
90000e3c:	bf0c      	ite	eq
90000e3e:	f240 2205 	movweq	r2, #517	; 0x205
90000e42:	2205      	movne	r2, #5
90000e44:	f001 f9d2 	bl	900021ec <AUDIO_IO_Write>
90000e48:	f243 3203 	movw	r2, #13059	; 0x3303
90000e4c:	2101      	movs	r1, #1
90000e4e:	4620      	mov	r0, r4
90000e50:	f001 f9cc 	bl	900021ec <AUDIO_IO_Write>
90000e54:	2222      	movs	r2, #34	; 0x22
90000e56:	2160      	movs	r1, #96	; 0x60
90000e58:	4620      	mov	r0, r4
90000e5a:	f001 f9c7 	bl	900021ec <AUDIO_IO_Write>
90000e5e:	f649 7225 	movw	r2, #40741	; 0x9f25
90000e62:	214c      	movs	r1, #76	; 0x4c
90000e64:	4620      	mov	r0, r4
90000e66:	f001 f9c1 	bl	900021ec <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
90000e6a:	200f      	movs	r0, #15
90000e6c:	f001 f9ea 	bl	90002244 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000e70:	2201      	movs	r2, #1
90000e72:	212d      	movs	r1, #45	; 0x2d
90000e74:	4620      	mov	r0, r4
90000e76:	f001 f9b9 	bl	900021ec <AUDIO_IO_Write>
90000e7a:	2201      	movs	r2, #1
90000e7c:	212e      	movs	r1, #46	; 0x2e
90000e7e:	4620      	mov	r0, r4
90000e80:	f001 f9b4 	bl	900021ec <AUDIO_IO_Write>
90000e84:	f44f 724c 	mov.w	r2, #816	; 0x330
90000e88:	2103      	movs	r1, #3
90000e8a:	4620      	mov	r0, r4
90000e8c:	f001 f9ae 	bl	900021ec <AUDIO_IO_Write>
90000e90:	2233      	movs	r2, #51	; 0x33
90000e92:	2154      	movs	r1, #84	; 0x54
90000e94:	4620      	mov	r0, r4
90000e96:	f001 f9a9 	bl	900021ec <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
90000e9a:	f240 1001 	movw	r0, #257	; 0x101
90000e9e:	f001 f9d1 	bl	90002244 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000ea2:	22ee      	movs	r2, #238	; 0xee
90000ea4:	2160      	movs	r1, #96	; 0x60
90000ea6:	4620      	mov	r0, r4
90000ea8:	f001 f9a0 	bl	900021ec <AUDIO_IO_Write>
90000eac:	22c0      	movs	r2, #192	; 0xc0
90000eae:	f44f 61c2 	mov.w	r1, #1552	; 0x610
90000eb2:	4620      	mov	r0, r4
90000eb4:	f001 f99a 	bl	900021ec <AUDIO_IO_Write>
90000eb8:	22c0      	movs	r2, #192	; 0xc0
90000eba:	f240 6111 	movw	r1, #1553	; 0x611
90000ebe:	4620      	mov	r0, r4
90000ec0:	f001 f994 	bl	900021ec <AUDIO_IO_Write>
90000ec4:	2210      	movs	r2, #16
90000ec6:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000eca:	4620      	mov	r0, r4
90000ecc:	f001 f98e 	bl	900021ec <AUDIO_IO_Write>
90000ed0:	22c0      	movs	r2, #192	; 0xc0
90000ed2:	f240 6112 	movw	r1, #1554	; 0x612
90000ed6:	4620      	mov	r0, r4
90000ed8:	f001 f988 	bl	900021ec <AUDIO_IO_Write>
90000edc:	22c0      	movs	r2, #192	; 0xc0
90000ede:	f240 6113 	movw	r1, #1555	; 0x613
90000ee2:	4620      	mov	r0, r4
90000ee4:	f001 f982 	bl	900021ec <AUDIO_IO_Write>
90000ee8:	2210      	movs	r2, #16
90000eea:	f240 4122 	movw	r1, #1058	; 0x422
90000eee:	4620      	mov	r0, r4
90000ef0:	f001 f97c 	bl	900021ec <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
90000ef4:	4651      	mov	r1, sl
90000ef6:	4648      	mov	r0, r9
90000ef8:	f7ff fd3e 	bl	90000978 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
90000efc:	b1e5      	cbz	r5, 90000f38 <wm8994_Init+0x4b8>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
90000efe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90000f02:	d002      	beq.n	90000f0a <wm8994_Init+0x48a>
90000f04:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
90000f08:	d12a      	bne.n	90000f60 <wm8994_Init+0x4e0>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f0a:	f046 0213 	orr.w	r2, r6, #19
90000f0e:	2101      	movs	r1, #1
90000f10:	4620      	mov	r0, r4
90000f12:	f001 f96b 	bl	900021ec <AUDIO_IO_Write>
90000f16:	2202      	movs	r2, #2
90000f18:	f44f 61c4 	mov.w	r1, #1568	; 0x620
90000f1c:	4620      	mov	r0, r4
90000f1e:	f001 f965 	bl	900021ec <AUDIO_IO_Write>
90000f22:	f44f 5260 	mov.w	r2, #14336	; 0x3800
90000f26:	f240 4111 	movw	r1, #1041	; 0x411
90000f2a:	4620      	mov	r0, r4
90000f2c:	f001 f95e 	bl	900021ec <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
90000f30:	4651      	mov	r1, sl
90000f32:	4648      	mov	r0, r9
90000f34:	f7ff fd20 	bl	90000978 <wm8994_SetVolume>
}
90000f38:	4638      	mov	r0, r7
90000f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
90000f3e:	2233      	movs	r2, #51	; 0x33
90000f40:	e70d      	b.n	90000d5e <wm8994_Init+0x2de>
90000f42:	2263      	movs	r2, #99	; 0x63
90000f44:	e70b      	b.n	90000d5e <wm8994_Init+0x2de>
90000f46:	22a3      	movs	r2, #163	; 0xa3
90000f48:	e709      	b.n	90000d5e <wm8994_Init+0x2de>
90000f4a:	2213      	movs	r2, #19
90000f4c:	e707      	b.n	90000d5e <wm8994_Init+0x2de>
90000f4e:	4620      	mov	r0, r4
90000f50:	f248 1208 	movw	r2, #33032	; 0x8108
90000f54:	f44f 7188 	mov.w	r1, #272	; 0x110
90000f58:	f001 f948 	bl	900021ec <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
90000f5c:	2032      	movs	r0, #50	; 0x32
90000f5e:	e742      	b.n	90000de6 <wm8994_Init+0x366>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000f60:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
90000f64:	d115      	bne.n	90000f92 <wm8994_Init+0x512>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f66:	f046 0213 	orr.w	r2, r6, #19
90000f6a:	2101      	movs	r1, #1
90000f6c:	4620      	mov	r0, r4
90000f6e:	f001 f93d 	bl	900021ec <AUDIO_IO_Write>
90000f72:	2202      	movs	r2, #2
90000f74:	f44f 61c4 	mov.w	r1, #1568	; 0x620
90000f78:	4620      	mov	r0, r4
90000f7a:	f001 f937 	bl	900021ec <AUDIO_IO_Write>
90000f7e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000f82:	f44f 6182 	mov.w	r1, #1040	; 0x410
90000f86:	4620      	mov	r0, r4
90000f88:	f001 f930 	bl	900021ec <AUDIO_IO_Write>
90000f8c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000f90:	e7c9      	b.n	90000f26 <wm8994_Init+0x4a6>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
90000f92:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
90000f96:	d002      	beq.n	90000f9e <wm8994_Init+0x51e>
90000f98:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
90000f9c:	d1c8      	bne.n	90000f30 <wm8994_Init+0x4b0>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f9e:	220b      	movs	r2, #11
90000fa0:	2118      	movs	r1, #24
90000fa2:	4620      	mov	r0, r4
90000fa4:	f001 f922 	bl	900021ec <AUDIO_IO_Write>
90000fa8:	220b      	movs	r2, #11
90000faa:	211a      	movs	r1, #26
90000fac:	4620      	mov	r0, r4
90000fae:	f001 f91d 	bl	900021ec <AUDIO_IO_Write>
90000fb2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000fb6:	f44f 6182 	mov.w	r1, #1040	; 0x410
90000fba:	e7b6      	b.n	90000f2a <wm8994_Init+0x4aa>
90000fbc:	00017700 	.word	0x00017700
90000fc0:	20000028 	.word	0x20000028
90000fc4:	20000164 	.word	0x20000164

90000fc8 <wm8994_Stop>:
{
90000fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
90000fca:	4f19      	ldr	r7, [pc, #100]	; (90001030 <wm8994_Stop+0x68>)
{
90000fcc:	4604      	mov	r4, r0
90000fce:	460e      	mov	r6, r1
  if (outputEnabled != 0)
90000fd0:	683d      	ldr	r5, [r7, #0]
90000fd2:	b355      	cbz	r5, 9000102a <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000fd4:	2101      	movs	r1, #1
90000fd6:	f7ff fc97 	bl	90000908 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
90000fda:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000fdc:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
90000fde:	d024      	beq.n	9000102a <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
90000fe0:	b2e0      	uxtb	r0, r4
 AUDIO_IO_Write(Addr, Reg, Value);
90000fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
90000fe6:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000fea:	9001      	str	r0, [sp, #4]
90000fec:	f001 f8fe 	bl	900021ec <AUDIO_IO_Write>
90000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
90000ff4:	f240 4122 	movw	r1, #1058	; 0x422
90000ff8:	9801      	ldr	r0, [sp, #4]
90000ffa:	f001 f8f7 	bl	900021ec <AUDIO_IO_Write>
90000ffe:	2200      	movs	r2, #0
90001000:	212d      	movs	r1, #45	; 0x2d
90001002:	9801      	ldr	r0, [sp, #4]
90001004:	f001 f8f2 	bl	900021ec <AUDIO_IO_Write>
90001008:	2200      	movs	r2, #0
9000100a:	212e      	movs	r1, #46	; 0x2e
9000100c:	9801      	ldr	r0, [sp, #4]
9000100e:	f001 f8ed 	bl	900021ec <AUDIO_IO_Write>
90001012:	2200      	movs	r2, #0
90001014:	2105      	movs	r1, #5
90001016:	9801      	ldr	r0, [sp, #4]
90001018:	f001 f8e8 	bl	900021ec <AUDIO_IO_Write>
9000101c:	2200      	movs	r2, #0
9000101e:	9801      	ldr	r0, [sp, #4]
90001020:	4611      	mov	r1, r2
90001022:	f001 f8e3 	bl	900021ec <AUDIO_IO_Write>
      outputEnabled = 0;
90001026:	2300      	movs	r3, #0
90001028:	603b      	str	r3, [r7, #0]
}
9000102a:	4628      	mov	r0, r5
9000102c:	b003      	add	sp, #12
9000102e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90001030:	20000164 	.word	0x20000164

90001034 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001034:	4b04      	ldr	r3, [pc, #16]	; (90001048 <SAIx_Out_DeInit+0x14>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001036:	4a05      	ldr	r2, [pc, #20]	; (9000104c <SAIx_Out_DeInit+0x18>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001038:	4805      	ldr	r0, [pc, #20]	; (90001050 <SAIx_Out_DeInit+0x1c>)
9000103a:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000103c:	6853      	ldr	r3, [r2, #4]
9000103e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001042:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
90001044:	f004 b863 	b.w	9000510e <HAL_SAI_DeInit>
90001048:	40015c04 	.word	0x40015c04
9000104c:	40015c00 	.word	0x40015c00
90001050:	2000016c 	.word	0x2000016c

90001054 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
90001054:	4b05      	ldr	r3, [pc, #20]	; (9000106c <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
90001056:	4a06      	ldr	r2, [pc, #24]	; (90001070 <SAIx_In_DeInit+0x1c>)
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
90001058:	4806      	ldr	r0, [pc, #24]	; (90001074 <SAIx_In_DeInit+0x20>)
9000105a:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
9000105e:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001064:	6253      	str	r3, [r2, #36]	; 0x24

  HAL_SAI_DeInit(&haudio_in_sai);
90001066:	f004 b852 	b.w	9000510e <HAL_SAI_DeInit>
9000106a:	bf00      	nop
9000106c:	40015c24 	.word	0x40015c24
90001070:	40015c00 	.word	0x40015c00
90001074:	2000016c 	.word	0x2000016c

90001078 <SAIx_In_Init>:
{
90001078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
9000107c:	4b35      	ldr	r3, [pc, #212]	; (90001154 <SAIx_In_Init+0xdc>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
9000107e:	2500      	movs	r5, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001080:	4c35      	ldr	r4, [pc, #212]	; (90001158 <SAIx_In_Init+0xe0>)
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
90001082:	2601      	movs	r6, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001084:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 90001160 <SAIx_In_Init+0xe8>
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
90001088:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
9000108c:	6023      	str	r3, [r4, #0]
{
9000108e:	4617      	mov	r7, r2
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001090:	f8d8 3004 	ldr.w	r3, [r8, #4]
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
90001094:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  haudio_out_sai.SlotInit.SlotNumber = 4;
90001098:	f04f 0904 	mov.w	r9, #4
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000109c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900010a0:	f8c8 3004 	str.w	r3, [r8, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
900010a4:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
900010a6:	61e2      	str	r2, [r4, #28]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010a8:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.Init.AudioMode = SaiOutMode;
900010aa:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
900010ac:	4620      	mov	r0, r4
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
900010ae:	9101      	str	r1, [sp, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
900010b0:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
900010b2:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
900010b4:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
900010b6:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
900010b8:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
900010ba:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
900010bc:	e9c4 350d 	strd	r3, r5, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
900010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
900010c4:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010c6:	2320      	movs	r3, #32
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
900010c8:	e9c4 9117 	strd	r9, r1, [r4, #92]	; 0x5c
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010cc:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
900010d0:	e9c4 b512 	strd	fp, r5, [r4, #72]	; 0x48
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
900010d4:	e9c4 a514 	strd	sl, r5, [r4, #80]	; 0x50
  HAL_SAI_Init(&haudio_out_sai);
900010d8:	f003 ff42 	bl	90004f60 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
900010dc:	481f      	ldr	r0, [pc, #124]	; (9000115c <SAIx_In_Init+0xe4>)
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
900010de:	2380      	movs	r3, #128	; 0x80
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
900010e0:	2240      	movs	r2, #64	; 0x40
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
900010e2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
900010e6:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
900010ea:	9901      	ldr	r1, [sp, #4]
  __HAL_SAI_DISABLE(&haudio_in_sai);
900010ec:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
900010f0:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
900010f4:	2003      	movs	r0, #3
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
900010f6:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
900010fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  HAL_SAI_Init(&haudio_in_sai);
900010fe:	f104 0084 	add.w	r0, r4, #132	; 0x84
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
90001102:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
90001106:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
9000110a:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
9000110e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
90001112:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
90001116:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
9000111a:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
9000111e:	e9c4 352e 	strd	r3, r5, [r4, #184]	; 0xb8
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
90001122:	2320      	movs	r3, #32
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
90001124:	e9c4 b533 	strd	fp, r5, [r4, #204]	; 0xcc
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
90001128:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
9000112c:	e9c4 a535 	strd	sl, r5, [r4, #212]	; 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
90001130:	e9c4 5937 	strd	r5, r9, [r4, #220]	; 0xdc
  HAL_SAI_Init(&haudio_in_sai);
90001134:	f003 ff14 	bl	90004f60 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
90001138:	6822      	ldr	r2, [r4, #0]
9000113a:	6813      	ldr	r3, [r2, #0]
9000113c:	ea43 030b 	orr.w	r3, r3, fp
90001140:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
90001142:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
90001146:	6813      	ldr	r3, [r2, #0]
90001148:	ea43 030b 	orr.w	r3, r3, fp
9000114c:	6013      	str	r3, [r2, #0]
}
9000114e:	b003      	add	sp, #12
90001150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001154:	40015c04 	.word	0x40015c04
90001158:	2000016c 	.word	0x2000016c
9000115c:	40015c24 	.word	0x40015c24
90001160:	40015c00 	.word	0x40015c00

90001164 <BSP_AUDIO_OUT_Pause>:
{    
90001164:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
90001166:	4d07      	ldr	r5, [pc, #28]	; (90001184 <BSP_AUDIO_OUT_Pause+0x20>)
90001168:	2034      	movs	r0, #52	; 0x34
9000116a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
9000116e:	691b      	ldr	r3, [r3, #16]
90001170:	4798      	blx	r3
90001172:	4604      	mov	r4, r0
90001174:	b920      	cbnz	r0, 90001180 <BSP_AUDIO_OUT_Pause+0x1c>
    HAL_SAI_DMAPause(&haudio_out_sai);
90001176:	4628      	mov	r0, r5
90001178:	f003 ffe7 	bl	9000514a <HAL_SAI_DMAPause>
    return AUDIO_OK;
9000117c:	4620      	mov	r0, r4
}
9000117e:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
90001180:	2001      	movs	r0, #1
90001182:	e7fc      	b.n	9000117e <BSP_AUDIO_OUT_Pause+0x1a>
90001184:	2000016c 	.word	0x2000016c

90001188 <BSP_AUDIO_OUT_Resume>:
{    
90001188:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
9000118a:	4d07      	ldr	r5, [pc, #28]	; (900011a8 <BSP_AUDIO_OUT_Resume+0x20>)
9000118c:	2034      	movs	r0, #52	; 0x34
9000118e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
90001192:	695b      	ldr	r3, [r3, #20]
90001194:	4798      	blx	r3
90001196:	4604      	mov	r4, r0
90001198:	b920      	cbnz	r0, 900011a4 <BSP_AUDIO_OUT_Resume+0x1c>
    HAL_SAI_DMAResume(&haudio_out_sai);
9000119a:	4628      	mov	r0, r5
9000119c:	f003 ffe5 	bl	9000516a <HAL_SAI_DMAResume>
    return AUDIO_OK;
900011a0:	4620      	mov	r0, r4
}
900011a2:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
900011a4:	2001      	movs	r0, #1
900011a6:	e7fc      	b.n	900011a2 <BSP_AUDIO_OUT_Resume+0x1a>
900011a8:	2000016c 	.word	0x2000016c

900011ac <BSP_AUDIO_OUT_Stop>:
{
900011ac:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_out_sai);
900011ae:	4c0b      	ldr	r4, [pc, #44]	; (900011dc <BSP_AUDIO_OUT_Stop+0x30>)
{
900011b0:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
900011b2:	4620      	mov	r0, r4
900011b4:	f003 fff0 	bl	90005198 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
900011b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
900011bc:	4629      	mov	r1, r5
900011be:	2034      	movs	r0, #52	; 0x34
900011c0:	699b      	ldr	r3, [r3, #24]
900011c2:	4798      	blx	r3
900011c4:	4604      	mov	r4, r0
900011c6:	b930      	cbnz	r0, 900011d6 <BSP_AUDIO_OUT_Stop+0x2a>
    if(Option == CODEC_PDWN_HW)
900011c8:	2d01      	cmp	r5, #1
900011ca:	d102      	bne.n	900011d2 <BSP_AUDIO_OUT_Stop+0x26>
      HAL_Delay(1);
900011cc:	4628      	mov	r0, r5
900011ce:	f001 faef 	bl	900027b0 <HAL_Delay>
    return AUDIO_OK;
900011d2:	4620      	mov	r0, r4
900011d4:	e000      	b.n	900011d8 <BSP_AUDIO_OUT_Stop+0x2c>
    return AUDIO_ERROR;
900011d6:	2001      	movs	r0, #1
}
900011d8:	bd38      	pop	{r3, r4, r5, pc}
900011da:	bf00      	nop
900011dc:	2000016c 	.word	0x2000016c

900011e0 <BSP_AUDIO_OUT_SetVolume>:
{
900011e0:	b508      	push	{r3, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
900011e2:	4b05      	ldr	r3, [pc, #20]	; (900011f8 <BSP_AUDIO_OUT_SetVolume+0x18>)
{
900011e4:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
900011e6:	2034      	movs	r0, #52	; 0x34
900011e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
900011ec:	6a1b      	ldr	r3, [r3, #32]
900011ee:	4798      	blx	r3
}
900011f0:	3800      	subs	r0, #0
900011f2:	bf18      	it	ne
900011f4:	2001      	movne	r0, #1
900011f6:	bd08      	pop	{r3, pc}
900011f8:	2000016c 	.word	0x2000016c

900011fc <BSP_AUDIO_OUT_Error_CallBack>:
900011fc:	4770      	bx	lr
	...

90001200 <BSP_AUDIO_OUT_MspInit>:
{ 
90001200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
90001204:	4c4d      	ldr	r4, [pc, #308]	; (9000133c <BSP_AUDIO_OUT_MspInit+0x13c>)
{ 
90001206:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001208:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
9000120c:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
9000120e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001210:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
90001212:	f04f 080a 	mov.w	r8, #10
{ 
90001216:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
90001218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
9000121c:	a905      	add	r1, sp, #20
9000121e:	4848      	ldr	r0, [pc, #288]	; (90001340 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
90001220:	f04f 0a40 	mov.w	sl, #64	; 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
90001224:	6463      	str	r3, [r4, #68]	; 0x44
90001226:	6c63      	ldr	r3, [r4, #68]	; 0x44
90001228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000122c:	9300      	str	r3, [sp, #0]
9000122e:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
90001230:	6b23      	ldr	r3, [r4, #48]	; 0x30
90001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001236:	6323      	str	r3, [r4, #48]	; 0x30
90001238:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000123e:	9301      	str	r3, [sp, #4]
90001240:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
90001242:	6b23      	ldr	r3, [r4, #48]	; 0x30
90001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001248:	6323      	str	r3, [r4, #48]	; 0x30
9000124a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001250:	9302      	str	r3, [sp, #8]
90001252:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
90001254:	6b23      	ldr	r3, [r4, #48]	; 0x30
90001256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000125a:	6323      	str	r3, [r4, #48]	; 0x30
9000125c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
9000125e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
90001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001266:	9303      	str	r3, [sp, #12]
90001268:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
9000126a:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
9000126c:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001270:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
90001274:	f001 fe60 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
90001278:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
9000127a:	a905      	add	r1, sp, #20
9000127c:	4830      	ldr	r0, [pc, #192]	; (90001340 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
9000127e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001282:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001286:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
9000128a:	f001 fe55 	bl	90002f38 <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
9000128e:	a905      	add	r1, sp, #20
90001290:	482b      	ldr	r0, [pc, #172]	; (90001340 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
90001292:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001296:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
9000129a:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
9000129e:	f001 fe4b 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
900012a2:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
900012a4:	a905      	add	r1, sp, #20
900012a6:	4826      	ldr	r0, [pc, #152]	; (90001340 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
900012a8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900012ac:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
900012b0:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
900012b4:	f001 fe40 	bl	90002f38 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
900012b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
900012ba:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
900012bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
900012c0:	6323      	str	r3, [r4, #48]	; 0x30
900012c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
900012c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900012c8:	9304      	str	r3, [sp, #16]
900012ca:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
900012cc:	4b1d      	ldr	r3, [pc, #116]	; (90001344 <BSP_AUDIO_OUT_MspInit+0x144>)
900012ce:	429a      	cmp	r2, r3
900012d0:	d129      	bne.n	90001326 <BSP_AUDIO_OUT_MspInit+0x126>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
900012d2:	4b1d      	ldr	r3, [pc, #116]	; (90001348 <BSP_AUDIO_OUT_MspInit+0x148>)
900012d4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
900012d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
900012dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
900012e0:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
900012e4:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
900012e8:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
900012ec:	f8c3 6144 	str.w	r6, [r3, #324]	; 0x144
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
900012f0:	e9c3 2a44 	strd	r2, sl, [r3, #272]	; 0x110
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
900012f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
900012f8:	e9c3 1247 	strd	r1, r2, [r3, #284]	; 0x11c
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
900012fc:	f44f 7280 	mov.w	r2, #256	; 0x100
90001300:	e9c3 0249 	strd	r0, r2, [r3, #292]	; 0x124
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
90001304:	2204      	movs	r2, #4
90001306:	e9c3 424b 	strd	r4, r2, [r3, #300]	; 0x12c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
9000130a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
9000130e:	4a0f      	ldr	r2, [pc, #60]	; (9000134c <BSP_AUDIO_OUT_MspInit+0x14c>)
    HAL_DMA_DeInit(&hdma_sai_tx);
90001310:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
90001312:	66f4      	str	r4, [r6, #108]	; 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
90001314:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
90001318:	e9c3 754d 	strd	r7, r5, [r3, #308]	; 0x134
    HAL_DMA_DeInit(&hdma_sai_tx);
9000131c:	f001 fb54 	bl	900029c8 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
90001320:	4620      	mov	r0, r4
90001322:	f001 fad3 	bl	900028cc <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
90001326:	2200      	movs	r2, #0
90001328:	210e      	movs	r1, #14
9000132a:	203c      	movs	r0, #60	; 0x3c
9000132c:	f001 fa64 	bl	900027f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
90001330:	203c      	movs	r0, #60	; 0x3c
90001332:	f001 fa93 	bl	9000285c <HAL_NVIC_EnableIRQ>
}
90001336:	b00a      	add	sp, #40	; 0x28
90001338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000133c:	40023800 	.word	0x40023800
90001340:	40022000 	.word	0x40022000
90001344:	40015c04 	.word	0x40015c04
90001348:	2000016c 	.word	0x2000016c
9000134c:	40026470 	.word	0x40026470

90001350 <BSP_AUDIO_OUT_Init>:
{ 
90001350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90001354:	4617      	mov	r7, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
90001356:	4c2f      	ldr	r4, [pc, #188]	; (90001414 <BSP_AUDIO_OUT_Init+0xc4>)
{ 
90001358:	4681      	mov	r9, r0
9000135a:	468a      	mov	sl, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
9000135c:	4d2e      	ldr	r5, [pc, #184]	; (90001418 <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
9000135e:	f7ff fe69 	bl	90001034 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
90001362:	4639      	mov	r1, r7
90001364:	2200      	movs	r2, #0
90001366:	4620      	mov	r0, r4
90001368:	f008 f94c 	bl	90009604 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
9000136c:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
9000136e:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
90001370:	f003 ffed 	bl	9000534e <HAL_SAI_GetState>
90001374:	4601      	mov	r1, r0
90001376:	b910      	cbnz	r0, 9000137e <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
90001378:	4620      	mov	r0, r4
9000137a:	f7ff ff41 	bl	90001200 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000137e:	4a27      	ldr	r2, [pc, #156]	; (9000141c <BSP_AUDIO_OUT_Init+0xcc>)
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
90001380:	2104      	movs	r1, #4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001382:	6025      	str	r5, [r4, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
90001384:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001386:	6853      	ldr	r3, [r2, #4]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
90001388:	2601      	movs	r6, #1
  HAL_SAI_Init(&haudio_out_sai);
9000138a:	4822      	ldr	r0, [pc, #136]	; (90001414 <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000138c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
90001390:	f8df 808c 	ldr.w	r8, [pc, #140]	; 90001420 <BSP_AUDIO_OUT_Init+0xd0>
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001394:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
90001396:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
90001398:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
9000139a:	61e7      	str	r7, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
9000139c:	6065      	str	r5, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
9000139e:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
900013a0:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
900013a2:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
900013a4:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
900013a6:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
900013a8:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
900013aa:	e9c4 350d 	strd	r3, r5, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
900013ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
900013b2:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900013b4:	2320      	movs	r3, #32
900013b6:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
900013ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
900013be:	e9c4 3512 	strd	r3, r5, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
900013c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
900013c6:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
900013ca:	230f      	movs	r3, #15
900013cc:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  HAL_SAI_Init(&haudio_out_sai);
900013d0:	f003 fdc6 	bl	90004f60 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
900013d4:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
900013d6:	2034      	movs	r0, #52	; 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
900013d8:	6813      	ldr	r3, [r2, #0]
900013da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900013de:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
900013e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
900013e4:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
900013e6:	f648 1394 	movw	r3, #35220	; 0x8994
900013ea:	4298      	cmp	r0, r3
900013ec:	d10f      	bne.n	9000140e <BSP_AUDIO_OUT_Init+0xbe>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
900013ee:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
900013f2:	2034      	movs	r0, #52	; 0x34
900013f4:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
900013f6:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
900013fa:	463b      	mov	r3, r7
900013fc:	f8d8 4000 	ldr.w	r4, [r8]
90001400:	4652      	mov	r2, sl
90001402:	4649      	mov	r1, r9
90001404:	2034      	movs	r0, #52	; 0x34
90001406:	47a0      	blx	r4
    ret = AUDIO_OK;
90001408:	4628      	mov	r0, r5
}
9000140a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = AUDIO_ERROR;
9000140e:	4630      	mov	r0, r6
90001410:	e7fb      	b.n	9000140a <BSP_AUDIO_OUT_Init+0xba>
90001412:	bf00      	nop
90001414:	2000016c 	.word	0x2000016c
90001418:	40015c04 	.word	0x40015c04
9000141c:	40015c00 	.word	0x40015c00
90001420:	2000002c 	.word	0x2000002c

90001424 <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
90001424:	b28a      	uxth	r2, r1
90001426:	4601      	mov	r1, r0
90001428:	4802      	ldr	r0, [pc, #8]	; (90001434 <BSP_AUDIO_IN_Record+0x10>)
{
9000142a:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
9000142c:	f003 fefe 	bl	9000522c <HAL_SAI_Receive_DMA>
}
90001430:	2000      	movs	r0, #0
90001432:	bd08      	pop	{r3, pc}
90001434:	200001f0 	.word	0x200001f0

90001438 <BSP_AUDIO_IN_Stop>:
{
90001438:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_in_sai);
9000143a:	4c0b      	ldr	r4, [pc, #44]	; (90001468 <BSP_AUDIO_IN_Stop+0x30>)
{
9000143c:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_in_sai);
9000143e:	f104 0084 	add.w	r0, r4, #132	; 0x84
90001442:	f003 fea9 	bl	90005198 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
90001446:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
9000144a:	4629      	mov	r1, r5
9000144c:	2034      	movs	r0, #52	; 0x34
9000144e:	699b      	ldr	r3, [r3, #24]
90001450:	4798      	blx	r3
90001452:	4604      	mov	r4, r0
90001454:	b930      	cbnz	r0, 90001464 <BSP_AUDIO_IN_Stop+0x2c>
    if(Option == CODEC_PDWN_HW)
90001456:	2d01      	cmp	r5, #1
90001458:	d102      	bne.n	90001460 <BSP_AUDIO_IN_Stop+0x28>
      HAL_Delay(1);
9000145a:	4628      	mov	r0, r5
9000145c:	f001 f9a8 	bl	900027b0 <HAL_Delay>
    return AUDIO_OK;
90001460:	4620      	mov	r0, r4
90001462:	e000      	b.n	90001466 <BSP_AUDIO_IN_Stop+0x2e>
    return AUDIO_ERROR;
90001464:	2001      	movs	r0, #1
}
90001466:	bd38      	pop	{r3, r4, r5, pc}
90001468:	2000016c 	.word	0x2000016c

9000146c <BSP_AUDIO_IN_Pause>:
{    
9000146c:	b508      	push	{r3, lr}
  HAL_SAI_DMAPause(&haudio_in_sai);
9000146e:	4802      	ldr	r0, [pc, #8]	; (90001478 <BSP_AUDIO_IN_Pause+0xc>)
90001470:	f003 fe6b 	bl	9000514a <HAL_SAI_DMAPause>
}
90001474:	2000      	movs	r0, #0
90001476:	bd08      	pop	{r3, pc}
90001478:	200001f0 	.word	0x200001f0

9000147c <BSP_AUDIO_IN_Resume>:
{    
9000147c:	b508      	push	{r3, lr}
  HAL_SAI_DMAResume(&haudio_in_sai);
9000147e:	4802      	ldr	r0, [pc, #8]	; (90001488 <BSP_AUDIO_IN_Resume+0xc>)
90001480:	f003 fe73 	bl	9000516a <HAL_SAI_DMAResume>
}
90001484:	2000      	movs	r0, #0
90001486:	bd08      	pop	{r3, pc}
90001488:	200001f0 	.word	0x200001f0

9000148c <BSP_AUDIO_IN_SetVolume>:
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
9000148c:	4b07      	ldr	r3, [pc, #28]	; (900014ac <BSP_AUDIO_IN_SetVolume+0x20>)
9000148e:	4601      	mov	r1, r0
90001490:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
{
90001494:	b510      	push	{r4, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
90001496:	6a1b      	ldr	r3, [r3, #32]
{
90001498:	4604      	mov	r4, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
9000149a:	2034      	movs	r0, #52	; 0x34
9000149c:	4798      	blx	r3
9000149e:	b918      	cbnz	r0, 900014a8 <BSP_AUDIO_IN_SetVolume+0x1c>
    AudioInVolume = Volume;
900014a0:	b2a4      	uxth	r4, r4
900014a2:	4b03      	ldr	r3, [pc, #12]	; (900014b0 <BSP_AUDIO_IN_SetVolume+0x24>)
900014a4:	801c      	strh	r4, [r3, #0]
}
900014a6:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
900014a8:	2001      	movs	r0, #1
900014aa:	e7fc      	b.n	900014a6 <BSP_AUDIO_IN_SetVolume+0x1a>
900014ac:	2000016c 	.word	0x2000016c
900014b0:	2000005c 	.word	0x2000005c

900014b4 <HAL_SAI_RxCpltCallback>:
{
900014b4:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
900014b6:	f009 fd8b 	bl	9000afd0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
900014ba:	bd08      	pop	{r3, pc}

900014bc <HAL_SAI_RxHalfCpltCallback>:
{
900014bc:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
900014be:	f009 fda9 	bl	9000b014 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
900014c2:	bd08      	pop	{r3, pc}

900014c4 <BSP_AUDIO_IN_Error_CallBack>:
900014c4:	4770      	bx	lr
	...

900014c8 <HAL_SAI_ErrorCallback>:
{
900014c8:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
900014ca:	480a      	ldr	r0, [pc, #40]	; (900014f4 <HAL_SAI_ErrorCallback+0x2c>)
900014cc:	f003 ff3f 	bl	9000534e <HAL_SAI_GetState>
900014d0:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
900014d2:	4809      	ldr	r0, [pc, #36]	; (900014f8 <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
900014d4:	f005 05ef 	and.w	r5, r5, #239	; 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
900014d8:	f003 ff39 	bl	9000534e <HAL_SAI_GetState>
900014dc:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
900014de:	2d02      	cmp	r5, #2
900014e0:	d101      	bne.n	900014e6 <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
900014e2:	f7ff fe8b 	bl	900011fc <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
900014e6:	f004 04df 	and.w	r4, r4, #223	; 0xdf
900014ea:	2c02      	cmp	r4, #2
900014ec:	d101      	bne.n	900014f2 <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
900014ee:	f7ff ffe9 	bl	900014c4 <BSP_AUDIO_IN_Error_CallBack>
}
900014f2:	bd38      	pop	{r3, r4, r5, pc}
900014f4:	2000016c 	.word	0x2000016c
900014f8:	200001f0 	.word	0x200001f0

900014fc <BSP_AUDIO_IN_MspInit>:
{
900014fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
90001500:	4c3d      	ldr	r4, [pc, #244]	; (900015f8 <BSP_AUDIO_IN_MspInit+0xfc>)
{
90001502:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001504:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
90001506:	2500      	movs	r5, #0
  AUDIO_IN_SAIx_CLK_ENABLE();
90001508:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
9000150a:	f44f 6880 	mov.w	r8, #1024	; 0x400
{
9000150e:	4606      	mov	r6, r0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
90001510:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
90001512:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
90001516:	4839      	ldr	r0, [pc, #228]	; (900015fc <BSP_AUDIO_IN_MspInit+0x100>)
  AUDIO_IN_SAIx_CLK_ENABLE();
90001518:	6463      	str	r3, [r4, #68]	; 0x44
9000151a:	6c63      	ldr	r3, [r4, #68]	; 0x44
9000151c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90001520:	9301      	str	r3, [sp, #4]
90001522:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
90001524:	6b23      	ldr	r3, [r4, #48]	; 0x30
90001526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000152a:	6323      	str	r3, [r4, #48]	; 0x30
9000152c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000152e:	f003 0340 	and.w	r3, r3, #64	; 0x40
90001532:	9302      	str	r3, [sp, #8]
90001534:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
90001536:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001538:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
9000153c:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
9000153e:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
90001542:	f001 fcf9 	bl	90002f38 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
90001546:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
90001548:	a905      	add	r1, sp, #20
9000154a:	482d      	ldr	r0, [pc, #180]	; (90001600 <BSP_AUDIO_IN_MspInit+0x104>)
  AUDIO_IN_INT_GPIO_ENABLE();
9000154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90001550:	6323      	str	r3, [r4, #48]	; 0x30
90001552:	6b23      	ldr	r3, [r4, #48]	; 0x30
90001554:	f003 0380 	and.w	r3, r3, #128	; 0x80
90001558:	9303      	str	r3, [sp, #12]
9000155a:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
9000155c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
90001560:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
90001564:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
90001568:	f001 fce6 	bl	90002f38 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
9000156c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
9000156e:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
90001570:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90001574:	6323      	str	r3, [r4, #48]	; 0x30
90001576:	6b23      	ldr	r3, [r4, #48]	; 0x30
90001578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000157c:	9304      	str	r3, [sp, #16]
9000157e:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
90001580:	4b20      	ldr	r3, [pc, #128]	; (90001604 <BSP_AUDIO_IN_MspInit+0x108>)
90001582:	429a      	cmp	r2, r3
90001584:	d125      	bne.n	900015d2 <BSP_AUDIO_IN_MspInit+0xd6>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
90001586:	4b20      	ldr	r3, [pc, #128]	; (90001608 <BSP_AUDIO_IN_MspInit+0x10c>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
90001588:	f44f 6100 	mov.w	r1, #2048	; 0x800
9000158c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
90001590:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
90001594:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
90001598:	f8c3 5190 	str.w	r5, [r3, #400]	; 0x190
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
9000159c:	f8c3 519c 	str.w	r5, [r3, #412]	; 0x19c
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
900015a0:	6734      	str	r4, [r6, #112]	; 0x70
900015a2:	f8c3 61a4 	str.w	r6, [r3, #420]	; 0x1a4
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
900015a6:	e9c3 1260 	strd	r1, r2, [r3, #384]	; 0x180
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
900015aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
900015ae:	e9c3 0262 	strd	r0, r2, [r3, #392]	; 0x188
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
900015b2:	2203      	movs	r2, #3
    HAL_DMA_DeInit(&hdma_sai_rx);
900015b4:	4620      	mov	r0, r4
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
900015b6:	e9c3 2565 	strd	r2, r5, [r3, #404]	; 0x194
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
900015ba:	4a14      	ldr	r2, [pc, #80]	; (9000160c <BSP_AUDIO_IN_MspInit+0x110>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
900015bc:	e9c3 555c 	strd	r5, r5, [r3, #368]	; 0x170
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
900015c0:	e9c3 585e 	strd	r5, r8, [r3, #376]	; 0x178
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
900015c4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    HAL_DMA_DeInit(&hdma_sai_rx);
900015c8:	f001 f9fe 	bl	900029c8 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
900015cc:	4620      	mov	r0, r4
900015ce:	f001 f97d 	bl	900028cc <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
900015d2:	2200      	movs	r2, #0
900015d4:	210f      	movs	r1, #15
900015d6:	2046      	movs	r0, #70	; 0x46
900015d8:	f001 f90e 	bl	900027f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
900015dc:	2046      	movs	r0, #70	; 0x46
900015de:	f001 f93d 	bl	9000285c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
900015e2:	2200      	movs	r2, #0
900015e4:	210f      	movs	r1, #15
900015e6:	2028      	movs	r0, #40	; 0x28
900015e8:	f001 f906 	bl	900027f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
900015ec:	2028      	movs	r0, #40	; 0x28
900015ee:	f001 f935 	bl	9000285c <HAL_NVIC_EnableIRQ>
}
900015f2:	b00a      	add	sp, #40	; 0x28
900015f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900015f8:	40023800 	.word	0x40023800
900015fc:	40021800 	.word	0x40021800
90001600:	40021c00 	.word	0x40021c00
90001604:	40015c24 	.word	0x40015c24
90001608:	2000016c 	.word	0x2000016c
9000160c:	400264b8 	.word	0x400264b8

90001610 <BSP_AUDIO_IN_InitEx.part.0>:
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
90001610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90001612:	460c      	mov	r4, r1
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
90001614:	4d1e      	ldr	r5, [pc, #120]	; (90001690 <BSP_AUDIO_IN_InitEx.part.0+0x80>)
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
90001616:	4606      	mov	r6, r0
    SAIx_In_DeInit();
90001618:	f7ff fd1c 	bl	90001054 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
9000161c:	4621      	mov	r1, r4
9000161e:	2200      	movs	r2, #0
90001620:	f105 0084 	add.w	r0, r5, #132	; 0x84
90001624:	f007 ffee 	bl	90009604 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
90001628:	4628      	mov	r0, r5
9000162a:	4b1a      	ldr	r3, [pc, #104]	; (90001694 <BSP_AUDIO_IN_InitEx.part.0+0x84>)
9000162c:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
90001630:	f003 fe8d 	bl	9000534e <HAL_SAI_GetState>
90001634:	4601      	mov	r1, r0
90001636:	b948      	cbnz	r0, 9000164c <BSP_AUDIO_IN_InitEx.part.0+0x3c>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
90001638:	9001      	str	r0, [sp, #4]
9000163a:	f105 0084 	add.w	r0, r5, #132	; 0x84
9000163e:	f7ff fddf 	bl	90001200 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
90001642:	9901      	ldr	r1, [sp, #4]
90001644:	f105 0084 	add.w	r0, r5, #132	; 0x84
90001648:	f7ff ff58 	bl	900014fc <BSP_AUDIO_IN_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
9000164c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
90001650:	4f11      	ldr	r7, [pc, #68]	; (90001698 <BSP_AUDIO_IN_InitEx.part.0+0x88>)
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
90001652:	4622      	mov	r2, r4
90001654:	f04f 0001 	mov.w	r0, #1
90001658:	bf0c      	ite	eq
9000165a:	210a      	moveq	r1, #10
9000165c:	2105      	movne	r1, #5
9000165e:	f7ff fd0b 	bl	90001078 <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
90001662:	68bb      	ldr	r3, [r7, #8]
90001664:	2034      	movs	r0, #52	; 0x34
90001666:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
90001668:	f648 1394 	movw	r3, #35220	; 0x8994
9000166c:	4298      	cmp	r0, r3
9000166e:	d10d      	bne.n	9000168c <BSP_AUDIO_IN_InitEx.part.0+0x7c>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
90001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90001672:	2034      	movs	r0, #52	; 0x34
90001674:	4798      	blx	r3
      audio_drv = &wm8994_drv;
90001676:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
9000167a:	4623      	mov	r3, r4
9000167c:	683d      	ldr	r5, [r7, #0]
9000167e:	2264      	movs	r2, #100	; 0x64
90001680:	4631      	mov	r1, r6
90001682:	2034      	movs	r0, #52	; 0x34
90001684:	47a8      	blx	r5
      ret = AUDIO_OK;
90001686:	2000      	movs	r0, #0
}
90001688:	b003      	add	sp, #12
9000168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = AUDIO_ERROR;
9000168c:	2001      	movs	r0, #1
9000168e:	e7fb      	b.n	90001688 <BSP_AUDIO_IN_InitEx.part.0+0x78>
90001690:	2000016c 	.word	0x2000016c
90001694:	40015c24 	.word	0x40015c24
90001698:	2000002c 	.word	0x2000002c

9000169c <BSP_AUDIO_IN_Init>:
{
9000169c:	4601      	mov	r1, r0
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
9000169e:	f44f 7000 	mov.w	r0, #512	; 0x200
900016a2:	f7ff bfb5 	b.w	90001610 <BSP_AUDIO_IN_InitEx.part.0>
	...

900016a8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
900016a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
900016ac:	4c1a      	ldr	r4, [pc, #104]	; (90001718 <LL_FillBuffer+0x70>)
{
900016ae:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
900016b0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
900016b4:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900016b6:	2234      	movs	r2, #52	; 0x34
{
900016b8:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
900016ba:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
900016bc:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900016be:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
{
900016c2:	460e      	mov	r6, r1
900016c4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900016c8:	fb02 4303 	mla	r3, r2, r3, r4
900016cc:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900016d0:	1eab      	subs	r3, r5, #2
900016d2:	425d      	negs	r5, r3
900016d4:	415d      	adcs	r5, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
900016d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900016d8:	006d      	lsls	r5, r5, #1
  hDma2dHandler.Init.OutputOffset = OffLine;      
900016da:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
900016dc:	4b0f      	ldr	r3, [pc, #60]	; (9000171c <LL_FillBuffer+0x74>)
900016de:	60a5      	str	r5, [r4, #8]
900016e0:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
900016e2:	f001 fb1e 	bl	90002d22 <HAL_DMA2D_Init>
900016e6:	b9a0      	cbnz	r0, 90001712 <LL_FillBuffer+0x6a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
900016e8:	4649      	mov	r1, r9
900016ea:	4620      	mov	r0, r4
900016ec:	f001 fbdc 	bl	90002ea8 <HAL_DMA2D_ConfigLayer>
900016f0:	b978      	cbnz	r0, 90001712 <LL_FillBuffer+0x6a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
900016f2:	463b      	mov	r3, r7
900016f4:	4632      	mov	r2, r6
900016f6:	4651      	mov	r1, sl
900016f8:	4620      	mov	r0, r4
900016fa:	f8cd 8000 	str.w	r8, [sp]
900016fe:	f001 fb3c 	bl	90002d7a <HAL_DMA2D_Start>
90001702:	b930      	cbnz	r0, 90001712 <LL_FillBuffer+0x6a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90001704:	210a      	movs	r1, #10
90001706:	4620      	mov	r0, r4
      }
    }
  } 
}
90001708:	b002      	add	sp, #8
9000170a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
9000170e:	f001 bb4e 	b.w	90002dae <HAL_DMA2D_PollForTransfer>
}
90001712:	b002      	add	sp, #8
90001714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90001718:	200003d8 	.word	0x200003d8
9000171c:	4002b000 	.word	0x4002b000

90001720 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90001720:	4b04      	ldr	r3, [pc, #16]	; (90001734 <BSP_LCD_GetXSize+0x14>)
90001722:	2134      	movs	r1, #52	; 0x34
90001724:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001728:	fb01 3302 	mla	r3, r1, r2, r3
}
9000172c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
90001730:	4770      	bx	lr
90001732:	bf00      	nop
90001734:	200003d8 	.word	0x200003d8

90001738 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90001738:	4b04      	ldr	r3, [pc, #16]	; (9000174c <BSP_LCD_GetYSize+0x14>)
9000173a:	2134      	movs	r1, #52	; 0x34
9000173c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001740:	fb01 3302 	mla	r3, r1, r2, r3
}
90001744:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
90001748:	4770      	bx	lr
9000174a:	bf00      	nop
9000174c:	200003d8 	.word	0x200003d8

90001750 <BSP_LCD_LayerDefaultInit>:
{     
90001750:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
90001752:	2400      	movs	r4, #0
{     
90001754:	b08e      	sub	sp, #56	; 0x38
90001756:	460e      	mov	r6, r1
90001758:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
9000175a:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
9000175c:	f7ff ffe0 	bl	90001720 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
90001760:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
90001764:	f7ff ffe8 	bl	90001738 <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
90001768:	23ff      	movs	r3, #255	; 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
9000176a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  layer_cfg.Backcolor.Blue = 0;
9000176e:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
90001772:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.FBStartAdress = FB_Address;
90001776:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha0 = 0;
90001778:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
9000177c:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90001780:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90001782:	4c0f      	ldr	r4, [pc, #60]	; (900017c0 <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90001784:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
90001788:	f7ff ffca 	bl	90001720 <BSP_LCD_GetXSize>
9000178c:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
9000178e:	f7ff ffd3 	bl	90001738 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90001792:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90001794:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90001796:	a901      	add	r1, sp, #4
90001798:	f104 0040 	add.w	r0, r4, #64	; 0x40
9000179c:	f002 fd20 	bl	900041e0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
900017a0:	230c      	movs	r3, #12
900017a2:	fb03 4005 	mla	r0, r3, r5, r4
900017a6:	f04f 33ff 	mov.w	r3, #4294967295
900017aa:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
900017ae:	4b05      	ldr	r3, [pc, #20]	; (900017c4 <BSP_LCD_LayerDefaultInit+0x74>)
900017b0:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
900017b4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
900017b8:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
}
900017bc:	b00e      	add	sp, #56	; 0x38
900017be:	bd70      	pop	{r4, r5, r6, pc}
900017c0:	200003d8 	.word	0x200003d8
900017c4:	20000060 	.word	0x20000060

900017c8 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
900017c8:	4b01      	ldr	r3, [pc, #4]	; (900017d0 <BSP_LCD_SelectLayer+0x8>)
900017ca:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
} 
900017ce:	4770      	bx	lr
900017d0:	200003d8 	.word	0x200003d8

900017d4 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
900017d4:	4b04      	ldr	r3, [pc, #16]	; (900017e8 <BSP_LCD_SetTextColor+0x14>)
900017d6:	210c      	movs	r1, #12
900017d8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
900017dc:	fb01 3302 	mla	r3, r1, r2, r3
900017e0:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
900017e4:	4770      	bx	lr
900017e6:	bf00      	nop
900017e8:	200003d8 	.word	0x200003d8

900017ec <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
900017ec:	4b04      	ldr	r3, [pc, #16]	; (90001800 <BSP_LCD_SetBackColor+0x14>)
900017ee:	210c      	movs	r1, #12
900017f0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
900017f4:	fb01 3302 	mla	r3, r1, r2, r3
900017f8:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
900017fc:	4770      	bx	lr
900017fe:	bf00      	nop
90001800:	200003d8 	.word	0x200003d8

90001804 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
90001804:	4b04      	ldr	r3, [pc, #16]	; (90001818 <BSP_LCD_SetFont+0x14>)
90001806:	210c      	movs	r1, #12
90001808:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
9000180c:	fb01 3302 	mla	r3, r1, r2, r3
90001810:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
90001814:	4770      	bx	lr
90001816:	bf00      	nop
90001818:	200003d8 	.word	0x200003d8

9000181c <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
9000181c:	4b04      	ldr	r3, [pc, #16]	; (90001830 <BSP_LCD_GetFont+0x14>)
9000181e:	210c      	movs	r1, #12
90001820:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001824:	fb01 3302 	mla	r3, r1, r2, r3
}
90001828:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
9000182c:	4770      	bx	lr
9000182e:	bf00      	nop
90001830:	200003d8 	.word	0x200003d8

90001834 <BSP_LCD_Clear>:
{ 
90001834:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90001836:	4c0c      	ldr	r4, [pc, #48]	; (90001868 <BSP_LCD_Clear+0x34>)
{ 
90001838:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
9000183a:	f7ff ff71 	bl	90001720 <BSP_LCD_GetXSize>
9000183e:	9003      	str	r0, [sp, #12]
90001840:	f8d4 60e8 	ldr.w	r6, [r4, #232]	; 0xe8
90001844:	f7ff ff78 	bl	90001738 <BSP_LCD_GetYSize>
90001848:	2134      	movs	r1, #52	; 0x34
9000184a:	4603      	mov	r3, r0
9000184c:	9501      	str	r5, [sp, #4]
9000184e:	4630      	mov	r0, r6
90001850:	fb01 4406 	mla	r4, r1, r6, r4
90001854:	2100      	movs	r1, #0
90001856:	9a03      	ldr	r2, [sp, #12]
90001858:	9100      	str	r1, [sp, #0]
9000185a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000185e:	f7ff ff23 	bl	900016a8 <LL_FillBuffer>
}
90001862:	b004      	add	sp, #16
90001864:	bd70      	pop	{r4, r5, r6, pc}
90001866:	bf00      	nop
90001868:	200003d8 	.word	0x200003d8

9000186c <BSP_LCD_DrawHLine>:
{
9000186c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001870:	4e14      	ldr	r6, [pc, #80]	; (900018c4 <BSP_LCD_DrawHLine+0x58>)
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001872:	2734      	movs	r7, #52	; 0x34
{
90001874:	b085      	sub	sp, #20
90001876:	4689      	mov	r9, r1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001878:	f8d6 80e8 	ldr.w	r8, [r6, #232]	; 0xe8
{
9000187c:	4605      	mov	r5, r0
9000187e:	9203      	str	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001880:	f7ff ff4e 	bl	90001720 <BSP_LCD_GetXSize>
90001884:	fb07 6708 	mla	r7, r7, r8, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001888:	9a03      	ldr	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
9000188a:	fb00 5009 	mla	r0, r0, r9, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000188e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001892:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001896:	2b02      	cmp	r3, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
90001898:	f04f 030c 	mov.w	r3, #12
9000189c:	fb03 6308 	mla	r3, r3, r8, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
900018a0:	bf0c      	ite	eq
900018a2:	eb04 0140 	addeq.w	r1, r4, r0, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
900018a6:	eb04 0180 	addne.w	r1, r4, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
900018aa:	4640      	mov	r0, r8
900018ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
900018b0:	9301      	str	r3, [sp, #4]
900018b2:	2300      	movs	r3, #0
900018b4:	9300      	str	r3, [sp, #0]
900018b6:	2301      	movs	r3, #1
900018b8:	f7ff fef6 	bl	900016a8 <LL_FillBuffer>
}
900018bc:	b005      	add	sp, #20
900018be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900018c2:	bf00      	nop
900018c4:	200003d8 	.word	0x200003d8

900018c8 <BSP_LCD_DrawVLine>:
{
900018c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900018cc:	4d14      	ldr	r5, [pc, #80]	; (90001920 <BSP_LCD_DrawVLine+0x58>)
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
900018ce:	f04f 0834 	mov.w	r8, #52	; 0x34
{
900018d2:	b085      	sub	sp, #20
900018d4:	4607      	mov	r7, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900018d6:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
{
900018da:	4689      	mov	r9, r1
900018dc:	9203      	str	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
900018de:	f7ff ff1f 	bl	90001720 <BSP_LCD_GetXSize>
900018e2:	fb08 5806 	mla	r8, r8, r6, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900018e6:	9b03      	ldr	r3, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
900018e8:	fb00 7109 	mla	r1, r0, r9, r7
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
900018ec:	3801      	subs	r0, #1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900018ee:	f8d8 2088 	ldr.w	r2, [r8, #136]	; 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
900018f2:	f8d8 409c 	ldr.w	r4, [r8, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900018f6:	2a02      	cmp	r2, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
900018f8:	f04f 020c 	mov.w	r2, #12
900018fc:	fb02 5506 	mla	r5, r2, r6, r5
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001900:	bf0c      	ite	eq
90001902:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001906:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
9000190a:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
9000190e:	9000      	str	r0, [sp, #0]
90001910:	4630      	mov	r0, r6
90001912:	9201      	str	r2, [sp, #4]
90001914:	2201      	movs	r2, #1
90001916:	f7ff fec7 	bl	900016a8 <LL_FillBuffer>
}
9000191a:	b005      	add	sp, #20
9000191c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90001920:	200003d8 	.word	0x200003d8

90001924 <BSP_LCD_DrawRect>:
{
90001924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90001926:	461e      	mov	r6, r3
90001928:	460d      	mov	r5, r1
9000192a:	4604      	mov	r4, r0
9000192c:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
9000192e:	f7ff ff9d 	bl	9000186c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
90001932:	19a9      	adds	r1, r5, r6
90001934:	463a      	mov	r2, r7
90001936:	4620      	mov	r0, r4
90001938:	b289      	uxth	r1, r1
9000193a:	f7ff ff97 	bl	9000186c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
9000193e:	4632      	mov	r2, r6
90001940:	4629      	mov	r1, r5
90001942:	4620      	mov	r0, r4
90001944:	f7ff ffc0 	bl	900018c8 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
90001948:	19e0      	adds	r0, r4, r7
9000194a:	4632      	mov	r2, r6
9000194c:	4629      	mov	r1, r5
9000194e:	b280      	uxth	r0, r0
}
90001950:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
90001954:	f7ff bfb8 	b.w	900018c8 <BSP_LCD_DrawVLine>

90001958 <BSP_LCD_DrawPixel>:
{
90001958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000195c:	4d0d      	ldr	r5, [pc, #52]	; (90001994 <BSP_LCD_DrawPixel+0x3c>)
{
9000195e:	4614      	mov	r4, r2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
90001960:	2234      	movs	r2, #52	; 0x34
{
90001962:	4606      	mov	r6, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001964:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
{
90001968:	460f      	mov	r7, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
9000196a:	fb02 5503 	mla	r5, r2, r3, r5
9000196e:	f7ff fed7 	bl	90001720 <BSP_LCD_GetXSize>
90001972:	fb00 6007 	mla	r0, r0, r7, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001976:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
9000197a:	f8d5 809c 	ldr.w	r8, [r5, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000197e:	2b02      	cmp	r3, #2
90001980:	d104      	bne.n	9000198c <BSP_LCD_DrawPixel+0x34>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
90001982:	b2a4      	uxth	r4, r4
90001984:	f828 4010 	strh.w	r4, [r8, r0, lsl #1]
}
90001988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
9000198c:	f848 4020 	str.w	r4, [r8, r0, lsl #2]
}
90001990:	e7fa      	b.n	90001988 <BSP_LCD_DrawPixel+0x30>
90001992:	bf00      	nop
90001994:	200003d8 	.word	0x200003d8

90001998 <BSP_LCD_DisplayChar>:
{
90001998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000199c:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
9000199e:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
900019a0:	f04f 0800 	mov.w	r8, #0
{
900019a4:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
900019a8:	4929      	ldr	r1, [pc, #164]	; (90001a50 <BSP_LCD_DisplayChar+0xb8>)
900019aa:	200c      	movs	r0, #12
900019ac:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	; 0xe8
900019b0:	fb00 110b 	mla	r1, r0, fp, r1
900019b4:	f8d1 10f4 	ldr.w	r1, [r1, #244]	; 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
900019b8:	f8b1 9004 	ldrh.w	r9, [r1, #4]
900019bc:	f8b1 a006 	ldrh.w	sl, [r1, #6]
900019c0:	f109 0607 	add.w	r6, r9, #7
900019c4:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
900019c6:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
900019ca:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
900019cc:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
900019d0:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
900019d4:	f109 32ff 	add.w	r2, r9, #4294967295
900019d8:	fa52 f380 	uxtab	r3, r2, r0
900019dc:	9302      	str	r3, [sp, #8]
900019de:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
900019e0:	45d0      	cmp	r8, sl
900019e2:	eb03 0108 	add.w	r1, r3, r8
900019e6:	b289      	uxth	r1, r1
900019e8:	d302      	bcc.n	900019f0 <BSP_LCD_DisplayChar+0x58>
}
900019ea:	b005      	add	sp, #20
900019ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
900019f0:	2e01      	cmp	r6, #1
      line =  pchar[0];      
900019f2:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
900019f4:	d004      	beq.n	90001a00 <BSP_LCD_DisplayChar+0x68>
900019f6:	2e02      	cmp	r6, #2
900019f8:	d109      	bne.n	90001a0e <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
900019fa:	882c      	ldrh	r4, [r5, #0]
900019fc:	ba64      	rev16	r4, r4
900019fe:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
90001a00:	2700      	movs	r7, #0
90001a02:	45b9      	cmp	r9, r7
90001a04:	d80a      	bhi.n	90001a1c <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
90001a06:	f108 0801 	add.w	r8, r8, #1
90001a0a:	4435      	add	r5, r6
90001a0c:	e7e7      	b.n	900019de <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
90001a0e:	786a      	ldrb	r2, [r5, #1]
90001a10:	0424      	lsls	r4, r4, #16
90001a12:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
90001a16:	78aa      	ldrb	r2, [r5, #2]
90001a18:	4314      	orrs	r4, r2
      break;
90001a1a:	e7f1      	b.n	90001a00 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
90001a1c:	9b00      	ldr	r3, [sp, #0]
90001a1e:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
90001a20:	9103      	str	r1, [sp, #12]
90001a22:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
90001a24:	9b02      	ldr	r3, [sp, #8]
90001a26:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
90001a2a:	4b09      	ldr	r3, [pc, #36]	; (90001a50 <BSP_LCD_DisplayChar+0xb8>)
90001a2c:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
90001a2e:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
90001a30:	fa02 f20c 	lsl.w	r2, r2, ip
90001a34:	4222      	tst	r2, r4
90001a36:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
90001a3a:	fb02 320b 	mla	r2, r2, fp, r3
90001a3e:	bf14      	ite	ne
90001a40:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
90001a44:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
90001a48:	f7ff ff86 	bl	90001958 <BSP_LCD_DrawPixel>
90001a4c:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
90001a4e:	e7d8      	b.n	90001a02 <BSP_LCD_DisplayChar+0x6a>
90001a50:	200003d8 	.word	0x200003d8

90001a54 <BSP_LCD_DisplayStringAt>:
{
90001a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90001a58:	4699      	mov	r9, r3
90001a5a:	4605      	mov	r5, r0
90001a5c:	460f      	mov	r7, r1
90001a5e:	4616      	mov	r6, r2
  uint8_t  *ptr = Text;
90001a60:	4613      	mov	r3, r2
90001a62:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
90001a64:	f813 2b01 	ldrb.w	r2, [r3], #1
90001a68:	2a00      	cmp	r2, #0
90001a6a:	d1fa      	bne.n	90001a62 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90001a6c:	f7ff fe58 	bl	90001720 <BSP_LCD_GetXSize>
90001a70:	4b22      	ldr	r3, [pc, #136]	; (90001afc <BSP_LCD_DisplayStringAt+0xa8>)
90001a72:	210c      	movs	r1, #12
  switch (Mode)
90001a74:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90001a78:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001a7c:	fb01 3302 	mla	r3, r1, r2, r3
90001a80:	f8d3 80f4 	ldr.w	r8, [r3, #244]	; 0xf4
90001a84:	f8b8 3004 	ldrh.w	r3, [r8, #4]
90001a88:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
90001a8c:	d01d      	beq.n	90001aca <BSP_LCD_DisplayStringAt+0x76>
90001a8e:	f1b9 0f02 	cmp.w	r9, #2
90001a92:	d021      	beq.n	90001ad8 <BSP_LCD_DisplayStringAt+0x84>
  if ((ref_column < 1) || (ref_column >= 0x8000))
90001a94:	b22b      	sxth	r3, r5
    ref_column = 1;
90001a96:	2400      	movs	r4, #0
90001a98:	2b00      	cmp	r3, #0
90001a9a:	bfd8      	it	le
90001a9c:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
90001a9e:	f7ff fe3f 	bl	90001720 <BSP_LCD_GetXSize>
90001aa2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
90001aa6:	b2a2      	uxth	r2, r4
90001aa8:	f816 9004 	ldrb.w	r9, [r6, r4]
90001aac:	3401      	adds	r4, #1
90001aae:	fb03 0012 	mls	r0, r3, r2, r0
90001ab2:	b280      	uxth	r0, r0
90001ab4:	4298      	cmp	r0, r3
90001ab6:	bf34      	ite	cc
90001ab8:	2000      	movcc	r0, #0
90001aba:	2001      	movcs	r0, #1
90001abc:	f1b9 0f00 	cmp.w	r9, #0
90001ac0:	bf08      	it	eq
90001ac2:	2000      	moveq	r0, #0
90001ac4:	b978      	cbnz	r0, 90001ae6 <BSP_LCD_DisplayStringAt+0x92>
}
90001ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
90001aca:	1b34      	subs	r4, r6, r4
90001acc:	4404      	add	r4, r0
90001ace:	435c      	muls	r4, r3
90001ad0:	eb05 0454 	add.w	r4, r5, r4, lsr #1
90001ad4:	b2a5      	uxth	r5, r4
      break;
90001ad6:	e7dd      	b.n	90001a94 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
90001ad8:	1b34      	subs	r4, r6, r4
90001ada:	4404      	add	r4, r0
90001adc:	fb14 f403 	smulbb	r4, r4, r3
90001ae0:	1b60      	subs	r0, r4, r5
90001ae2:	b285      	uxth	r5, r0
      break;
90001ae4:	e7d6      	b.n	90001a94 <BSP_LCD_DisplayStringAt+0x40>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
90001ae6:	4628      	mov	r0, r5
90001ae8:	464a      	mov	r2, r9
90001aea:	4639      	mov	r1, r7
90001aec:	f7ff ff54 	bl	90001998 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
90001af0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
90001af4:	442b      	add	r3, r5
90001af6:	b29d      	uxth	r5, r3
    i++;
90001af8:	e7d1      	b.n	90001a9e <BSP_LCD_DisplayStringAt+0x4a>
90001afa:	bf00      	nop
90001afc:	200003d8 	.word	0x200003d8

90001b00 <BSP_LCD_DisplayStringAtLine>:
{  
90001b00:	b513      	push	{r0, r1, r4, lr}
90001b02:	4604      	mov	r4, r0
90001b04:	9101      	str	r1, [sp, #4]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
90001b06:	f7ff fe89 	bl	9000181c <BSP_LCD_GetFont>
90001b0a:	88c3      	ldrh	r3, [r0, #6]
90001b0c:	9a01      	ldr	r2, [sp, #4]
90001b0e:	2000      	movs	r0, #0
90001b10:	fb13 f104 	smulbb	r1, r3, r4
90001b14:	2303      	movs	r3, #3
90001b16:	b289      	uxth	r1, r1
}
90001b18:	b002      	add	sp, #8
90001b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
90001b1e:	f7ff bf99 	b.w	90001a54 <BSP_LCD_DisplayStringAt>
	...

90001b24 <BSP_LCD_DrawCircle>:
{
90001b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
90001b28:	0054      	lsls	r4, r2, #1
{
90001b2a:	b087      	sub	sp, #28
90001b2c:	4688      	mov	r8, r1
  current_y = Radius;
90001b2e:	4615      	mov	r5, r2
  decision = 3 - (Radius << 1);
90001b30:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
90001b34:	2700      	movs	r7, #0
{
90001b36:	9001      	str	r0, [sp, #4]
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
90001b38:	4835      	ldr	r0, [pc, #212]	; (90001c10 <BSP_LCD_DrawCircle+0xec>)
90001b3a:	f04f 0c0c 	mov.w	ip, #12
90001b3e:	9b01      	ldr	r3, [sp, #4]
90001b40:	b2ae      	uxth	r6, r5
90001b42:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
90001b46:	fa1f f987 	uxth.w	r9, r7
90001b4a:	fa13 f387 	uxtah	r3, r3, r7
90001b4e:	eba8 0106 	sub.w	r1, r8, r6
90001b52:	fb0c 0202 	mla	r2, ip, r2, r0
90001b56:	b29b      	uxth	r3, r3
90001b58:	b289      	uxth	r1, r1
90001b5a:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
90001b5e:	4618      	mov	r0, r3
90001b60:	9305      	str	r3, [sp, #20]
90001b62:	e9cd 2103 	strd	r2, r1, [sp, #12]
90001b66:	f7ff fef7 	bl	90001958 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
90001b6a:	9b01      	ldr	r3, [sp, #4]
90001b6c:	f8cd 9008 	str.w	r9, [sp, #8]
90001b70:	eba3 0b09 	sub.w	fp, r3, r9
90001b74:	fa1f fb8b 	uxth.w	fp, fp
90001b78:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90001b7c:	4658      	mov	r0, fp
90001b7e:	f7ff feeb 	bl	90001958 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90001b82:	9b01      	ldr	r3, [sp, #4]
90001b84:	9a03      	ldr	r2, [sp, #12]
90001b86:	eb06 0a03 	add.w	sl, r6, r3
90001b8a:	9b02      	ldr	r3, [sp, #8]
90001b8c:	eba8 0103 	sub.w	r1, r8, r3
90001b90:	fa1f fa8a 	uxth.w	sl, sl
90001b94:	b289      	uxth	r1, r1
90001b96:	4650      	mov	r0, sl
90001b98:	9104      	str	r1, [sp, #16]
90001b9a:	f7ff fedd 	bl	90001958 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90001b9e:	9b01      	ldr	r3, [sp, #4]
90001ba0:	eba3 0906 	sub.w	r9, r3, r6
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90001ba4:	4446      	add	r6, r8
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90001ba6:	fa1f f989 	uxth.w	r9, r9
90001baa:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90001bae:	4648      	mov	r0, r9
90001bb0:	f7ff fed2 	bl	90001958 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90001bb4:	9b05      	ldr	r3, [sp, #20]
90001bb6:	b2b1      	uxth	r1, r6
90001bb8:	9a03      	ldr	r2, [sp, #12]
90001bba:	4618      	mov	r0, r3
90001bbc:	9104      	str	r1, [sp, #16]
90001bbe:	f7ff fecb 	bl	90001958 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90001bc2:	4658      	mov	r0, fp
90001bc4:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90001bc8:	f7ff fec6 	bl	90001958 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
90001bcc:	9b02      	ldr	r3, [sp, #8]
90001bce:	9a03      	ldr	r2, [sp, #12]
90001bd0:	4650      	mov	r0, sl
90001bd2:	eb03 0108 	add.w	r1, r3, r8
90001bd6:	b289      	uxth	r1, r1
90001bd8:	9102      	str	r1, [sp, #8]
90001bda:	f7ff febd 	bl	90001958 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
90001bde:	4648      	mov	r0, r9
90001be0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90001be4:	f7ff feb8 	bl	90001958 <BSP_LCD_DrawPixel>
    if (decision < 0)
90001be8:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
90001bea:	bfb1      	iteee	lt
90001bec:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
90001bee:	1b7b      	subge	r3, r7, r5
90001bf0:	340a      	addge	r4, #10
      current_y--;
90001bf2:	f105 35ff 	addge.w	r5, r5, #4294967295
      decision += (current_x << 2) + 6;
90001bf6:	bfb8      	it	lt
90001bf8:	eb04 0487 	addlt.w	r4, r4, r7, lsl #2
    current_x++;
90001bfc:	f107 0701 	add.w	r7, r7, #1
      decision += ((current_x - current_y) << 2) + 10;
90001c00:	bfa8      	it	ge
90001c02:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
90001c06:	42bd      	cmp	r5, r7
90001c08:	d296      	bcs.n	90001b38 <BSP_LCD_DrawCircle+0x14>
}
90001c0a:	b007      	add	sp, #28
90001c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001c10:	200003d8 	.word	0x200003d8

90001c14 <BSP_LCD_FillRect>:
{
90001c14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001c18:	4d1b      	ldr	r5, [pc, #108]	; (90001c88 <BSP_LCD_FillRect+0x74>)
{
90001c1a:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001c1c:	230c      	movs	r3, #12
{
90001c1e:	4604      	mov	r4, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001c20:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
{
90001c24:	4617      	mov	r7, r2
90001c26:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001c28:	fb03 5306 	mla	r3, r3, r6, r5
90001c2c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
90001c30:	f7ff fdd0 	bl	900017d4 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001c34:	2334      	movs	r3, #52	; 0x34
90001c36:	fb03 5306 	mla	r3, r3, r6, r5
90001c3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
90001c3e:	f8d3 a09c 	ldr.w	sl, [r3, #156]	; 0x9c
90001c42:	2a02      	cmp	r2, #2
90001c44:	d118      	bne.n	90001c78 <BSP_LCD_FillRect+0x64>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001c46:	f7ff fd6b 	bl	90001720 <BSP_LCD_GetXSize>
90001c4a:	fb00 4009 	mla	r0, r0, r9, r4
90001c4e:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
90001c52:	f7ff fd65 	bl	90001720 <BSP_LCD_GetXSize>
90001c56:	230c      	movs	r3, #12
90001c58:	1bc0      	subs	r0, r0, r7
90001c5a:	463a      	mov	r2, r7
90001c5c:	fb03 5106 	mla	r1, r3, r6, r5
90001c60:	f8d1 30ec 	ldr.w	r3, [r1, #236]	; 0xec
90001c64:	4651      	mov	r1, sl
90001c66:	9000      	str	r0, [sp, #0]
90001c68:	4630      	mov	r0, r6
90001c6a:	9301      	str	r3, [sp, #4]
90001c6c:	4643      	mov	r3, r8
90001c6e:	f7ff fd1b 	bl	900016a8 <LL_FillBuffer>
}
90001c72:	b002      	add	sp, #8
90001c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001c78:	f7ff fd52 	bl	90001720 <BSP_LCD_GetXSize>
90001c7c:	fb00 4109 	mla	r1, r0, r9, r4
90001c80:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
90001c84:	e7e5      	b.n	90001c52 <BSP_LCD_FillRect+0x3e>
90001c86:	bf00      	nop
90001c88:	200003d8 	.word	0x200003d8

90001c8c <BSP_LCD_ClearStringLine>:
{
90001c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
90001c8e:	4c12      	ldr	r4, [pc, #72]	; (90001cd8 <BSP_LCD_ClearStringLine+0x4c>)
90001c90:	260c      	movs	r6, #12
90001c92:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
90001c96:	fb06 4303 	mla	r3, r6, r3, r4
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
90001c9a:	e9d3 523b 	ldrd	r5, r2, [r3, #236]	; 0xec
90001c9e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
90001ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001ca6:	88df      	ldrh	r7, [r3, #6]
90001ca8:	fb10 f007 	smulbb	r0, r0, r7
90001cac:	b281      	uxth	r1, r0
90001cae:	9101      	str	r1, [sp, #4]
90001cb0:	f7ff fd36 	bl	90001720 <BSP_LCD_GetXSize>
90001cb4:	463b      	mov	r3, r7
90001cb6:	b282      	uxth	r2, r0
90001cb8:	9901      	ldr	r1, [sp, #4]
90001cba:	2000      	movs	r0, #0
90001cbc:	f7ff ffaa 	bl	90001c14 <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = color_backup;
90001cc0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
90001cc4:	4628      	mov	r0, r5
  DrawProp[ActiveLayer].TextColor = color_backup;
90001cc6:	fb06 4403 	mla	r4, r6, r3, r4
90001cca:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
90001cce:	b003      	add	sp, #12
90001cd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
90001cd4:	f7ff bd7e 	b.w	900017d4 <BSP_LCD_SetTextColor>
90001cd8:	200003d8 	.word	0x200003d8

90001cdc <BSP_LCD_FillCircle>:
{
90001cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001ce0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 90001da8 <BSP_LCD_FillCircle+0xcc>
  decision = 3 - (Radius << 1);
90001ce4:	0054      	lsls	r4, r2, #1
{
90001ce6:	4691      	mov	r9, r2
  current_y = Radius;
90001ce8:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001cea:	f8da 30e8 	ldr.w	r3, [sl, #232]	; 0xe8
90001cee:	220c      	movs	r2, #12
  decision = 3 - (Radius << 1);
90001cf0:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
90001cf4:	2500      	movs	r5, #0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001cf6:	fb02 a303 	mla	r3, r2, r3, sl
{
90001cfa:	4680      	mov	r8, r0
90001cfc:	460e      	mov	r6, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001cfe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
90001d02:	f7ff fd67 	bl	900017d4 <BSP_LCD_SetTextColor>
    if(current_y > 0) 
90001d06:	b1af      	cbz	r7, 90001d34 <BSP_LCD_FillCircle+0x58>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
90001d08:	b2ba      	uxth	r2, r7
90001d0a:	fa16 f185 	uxtah	r1, r6, r5
90001d0e:	fa1f fb85 	uxth.w	fp, r5
90001d12:	eba8 0002 	sub.w	r0, r8, r2
90001d16:	0052      	lsls	r2, r2, #1
90001d18:	b289      	uxth	r1, r1
90001d1a:	b280      	uxth	r0, r0
90001d1c:	b292      	uxth	r2, r2
90001d1e:	9000      	str	r0, [sp, #0]
90001d20:	9201      	str	r2, [sp, #4]
90001d22:	f7ff fda3 	bl	9000186c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
90001d26:	eba6 010b 	sub.w	r1, r6, fp
90001d2a:	9a01      	ldr	r2, [sp, #4]
90001d2c:	9800      	ldr	r0, [sp, #0]
90001d2e:	b289      	uxth	r1, r1
90001d30:	f7ff fd9c 	bl	9000186c <BSP_LCD_DrawHLine>
    if(current_x > 0) 
90001d34:	b1ad      	cbz	r5, 90001d62 <BSP_LCD_FillCircle+0x86>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
90001d36:	b2aa      	uxth	r2, r5
90001d38:	fa1f fb87 	uxth.w	fp, r7
90001d3c:	eba8 0002 	sub.w	r0, r8, r2
90001d40:	0052      	lsls	r2, r2, #1
90001d42:	eba6 010b 	sub.w	r1, r6, fp
90001d46:	b280      	uxth	r0, r0
90001d48:	b292      	uxth	r2, r2
90001d4a:	b289      	uxth	r1, r1
90001d4c:	9000      	str	r0, [sp, #0]
90001d4e:	9201      	str	r2, [sp, #4]
90001d50:	f7ff fd8c 	bl	9000186c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
90001d54:	eb0b 0106 	add.w	r1, fp, r6
90001d58:	9a01      	ldr	r2, [sp, #4]
90001d5a:	9800      	ldr	r0, [sp, #0]
90001d5c:	b289      	uxth	r1, r1
90001d5e:	f7ff fd85 	bl	9000186c <BSP_LCD_DrawHLine>
    if (decision < 0)
90001d62:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
90001d64:	bfb1      	iteee	lt
90001d66:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
90001d68:	1beb      	subge	r3, r5, r7
90001d6a:	340a      	addge	r4, #10
      current_y--;
90001d6c:	f107 37ff 	addge.w	r7, r7, #4294967295
      decision += (current_x << 2) + 6;
90001d70:	bfb8      	it	lt
90001d72:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
    current_x++;
90001d76:	f105 0501 	add.w	r5, r5, #1
      decision += ((current_x - current_y) << 2) + 10;
90001d7a:	bfa8      	it	ge
90001d7c:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
90001d80:	42af      	cmp	r7, r5
90001d82:	d2c0      	bcs.n	90001d06 <BSP_LCD_FillCircle+0x2a>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001d84:	f8da 30e8 	ldr.w	r3, [sl, #232]	; 0xe8
90001d88:	220c      	movs	r2, #12
90001d8a:	fb02 aa03 	mla	sl, r2, r3, sl
90001d8e:	f8da 00ec 	ldr.w	r0, [sl, #236]	; 0xec
90001d92:	f7ff fd1f 	bl	900017d4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
90001d96:	464a      	mov	r2, r9
90001d98:	4631      	mov	r1, r6
90001d9a:	4640      	mov	r0, r8
}
90001d9c:	b003      	add	sp, #12
90001d9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
90001da2:	f7ff bebf 	b.w	90001b24 <BSP_LCD_DrawCircle>
90001da6:	bf00      	nop
90001da8:	200003d8 	.word	0x200003d8

90001dac <BSP_LCD_DisplayOn>:
{
90001dac:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
90001dae:	4b09      	ldr	r3, [pc, #36]	; (90001dd4 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
90001db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90001db4:	4808      	ldr	r0, [pc, #32]	; (90001dd8 <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
90001db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90001db8:	6993      	ldr	r3, [r2, #24]
90001dba:	f043 0301 	orr.w	r3, r3, #1
90001dbe:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
90001dc0:	2201      	movs	r2, #1
90001dc2:	f001 f99b 	bl	900030fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
90001dc6:	2201      	movs	r2, #1
90001dc8:	2108      	movs	r1, #8
90001dca:	4804      	ldr	r0, [pc, #16]	; (90001ddc <BSP_LCD_DisplayOn+0x30>)
}
90001dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
90001dd0:	f001 b994 	b.w	900030fc <HAL_GPIO_WritePin>
90001dd4:	200003d8 	.word	0x200003d8
90001dd8:	40022000 	.word	0x40022000
90001ddc:	40022800 	.word	0x40022800

90001de0 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
90001de0:	4b4b      	ldr	r3, [pc, #300]	; (90001f10 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001de2:	484c      	ldr	r0, [pc, #304]	; (90001f14 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
90001de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90001de6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
90001dea:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
90001dec:	645a      	str	r2, [r3, #68]	; 0x44
{
90001dee:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
90001df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001df2:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
90001df4:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001df6:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
90001df8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
90001dfc:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90001e00:	4e45      	ldr	r6, [pc, #276]	; (90001f18 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
90001e02:	9200      	str	r2, [sp, #0]
90001e04:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
90001e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
90001e0c:	631a      	str	r2, [r3, #48]	; 0x30
90001e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e10:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
90001e14:	9201      	str	r2, [sp, #4]
90001e16:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e1a:	f042 0210 	orr.w	r2, r2, #16
90001e1e:	631a      	str	r2, [r3, #48]	; 0x30
90001e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e22:	f002 0210 	and.w	r2, r2, #16
90001e26:	9202      	str	r2, [sp, #8]
90001e28:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90001e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90001e30:	631a      	str	r2, [r3, #48]	; 0x30
90001e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e34:	f002 0240 	and.w	r2, r2, #64	; 0x40
90001e38:	9203      	str	r2, [sp, #12]
90001e3a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90001e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90001e42:	631a      	str	r2, [r3, #48]	; 0x30
90001e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e46:	f402 7280 	and.w	r2, r2, #256	; 0x100
90001e4a:	9204      	str	r2, [sp, #16]
90001e4c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90001e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90001e54:	631a      	str	r2, [r3, #48]	; 0x30
90001e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e58:	f402 7200 	and.w	r2, r2, #512	; 0x200
90001e5c:	9205      	str	r2, [sp, #20]
90001e5e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90001e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90001e66:	631a      	str	r2, [r3, #48]	; 0x30
90001e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e6a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90001e6e:	9206      	str	r2, [sp, #24]
90001e70:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
90001e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90001e78:	631a      	str	r2, [r3, #48]	; 0x30
90001e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e7c:	f402 7280 	and.w	r2, r2, #256	; 0x100
90001e80:	9207      	str	r2, [sp, #28]
90001e82:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90001e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90001e8a:	631a      	str	r2, [r3, #48]	; 0x30
90001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
90001e8e:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90001e94:	9308      	str	r3, [sp, #32]
90001e96:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001e98:	2310      	movs	r3, #16
90001e9a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001e9e:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90001ea0:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001ea4:	f001 f848 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
90001ea8:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90001eaa:	a909      	add	r1, sp, #36	; 0x24
90001eac:	481b      	ldr	r0, [pc, #108]	; (90001f1c <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
90001eae:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001eb0:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90001eb4:	f001 f840 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
90001eb8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90001ebc:	a909      	add	r1, sp, #36	; 0x24
90001ebe:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001ec0:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001ec2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90001ec6:	f001 f837 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90001eca:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90001ece:	a909      	add	r1, sp, #36	; 0x24
90001ed0:	4813      	ldr	r0, [pc, #76]	; (90001f20 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001ed2:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001ed4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90001ed8:	f001 f82e 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
90001edc:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90001ede:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001ee0:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90001ee2:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001ee4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90001ee8:	4c0e      	ldr	r4, [pc, #56]	; (90001f24 <BSP_LCD_MspInit+0x144>)
90001eea:	4620      	mov	r0, r4
90001eec:	f001 f824 	bl	90002f38 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90001ef0:	a909      	add	r1, sp, #36	; 0x24
90001ef2:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
90001ef4:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90001ef6:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90001ef8:	f001 f81e 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
90001efc:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90001efe:	a909      	add	r1, sp, #36	; 0x24
90001f00:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90001f02:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90001f06:	f001 f817 	bl	90002f38 <HAL_GPIO_Init>
}
90001f0a:	b00f      	add	sp, #60	; 0x3c
90001f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
90001f0e:	bf00      	nop
90001f10:	40023800 	.word	0x40023800
90001f14:	40021000 	.word	0x40021000
90001f18:	40022000 	.word	0x40022000
90001f1c:	40021800 	.word	0x40021800
90001f20:	40022400 	.word	0x40022400
90001f24:	40022800 	.word	0x40022800

90001f28 <BSP_LCD_Init>:
{    
90001f28:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90001f2a:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
90001f2c:	4c24      	ldr	r4, [pc, #144]	; (90001fc0 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90001f2e:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90001f30:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90001f32:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90001f36:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90001f3a:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90001f3e:	230b      	movs	r3, #11
90001f40:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90001f44:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90001f48:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90001f4a:	e9c4 3019 	strd	r3, r0, [r4, #100]	; 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90001f4e:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90001f52:	f104 0040 	add.w	r0, r4, #64	; 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90001f56:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	; 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90001f5a:	f007 fb89 	bl	90009670 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90001f5e:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
90001f62:	f44f 7388 	mov.w	r3, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
90001f66:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90001f68:	e9c4 e328 	strd	lr, r3, [r4, #160]	; 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
90001f6c:	2300      	movs	r3, #0
90001f6e:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
90001f72:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
90001f76:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001f7a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hLtdcHandler.Instance = LTDC;
90001f7e:	4b11      	ldr	r3, [pc, #68]	; (90001fc4 <BSP_LCD_Init+0x9c>)
90001f80:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
90001f84:	f002 f959 	bl	9000423a <HAL_LTDC_GetState>
90001f88:	4601      	mov	r1, r0
90001f8a:	b918      	cbnz	r0, 90001f94 <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
90001f8c:	f104 0040 	add.w	r0, r4, #64	; 0x40
90001f90:	f7ff ff26 	bl	90001de0 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
90001f94:	480c      	ldr	r0, [pc, #48]	; (90001fc8 <BSP_LCD_Init+0xa0>)
90001f96:	f002 f8b7 	bl	90004108 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
90001f9a:	2201      	movs	r2, #1
90001f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90001fa0:	480a      	ldr	r0, [pc, #40]	; (90001fcc <BSP_LCD_Init+0xa4>)
90001fa2:	f001 f8ab 	bl	900030fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
90001fa6:	2201      	movs	r2, #1
90001fa8:	2108      	movs	r1, #8
90001faa:	4809      	ldr	r0, [pc, #36]	; (90001fd0 <BSP_LCD_Init+0xa8>)
90001fac:	f001 f8a6 	bl	900030fc <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
90001fb0:	f000 fa7c 	bl	900024ac <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
90001fb4:	4807      	ldr	r0, [pc, #28]	; (90001fd4 <BSP_LCD_Init+0xac>)
90001fb6:	f7ff fc25 	bl	90001804 <BSP_LCD_SetFont>
}
90001fba:	2000      	movs	r0, #0
90001fbc:	bd10      	pop	{r4, pc}
90001fbe:	bf00      	nop
90001fc0:	200003d8 	.word	0x200003d8
90001fc4:	40016800 	.word	0x40016800
90001fc8:	20000418 	.word	0x20000418
90001fcc:	40022000 	.word	0x40022000
90001fd0:	40022800 	.word	0x40022800
90001fd4:	20000060 	.word	0x20000060

90001fd8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
90001fd8:	b570      	push	{r4, r5, r6, lr}
90001fda:	b08a      	sub	sp, #40	; 0x28
90001fdc:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
90001fde:	f002 f80b 	bl	90003ff8 <HAL_I2C_GetState>
90001fe2:	2800      	cmp	r0, #0
90001fe4:	f040 8096 	bne.w	90002114 <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90001fe8:	4b4b      	ldr	r3, [pc, #300]	; (90002118 <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
90001fea:	2600      	movs	r6, #0
90001fec:	4c4b      	ldr	r4, [pc, #300]	; (9000211c <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90001fee:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
90001ff0:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
90001ff2:	bf0c      	ite	eq
90001ff4:	4a4a      	ldreq	r2, [pc, #296]	; (90002120 <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
90001ff6:	4a4b      	ldrne	r2, [pc, #300]	; (90002124 <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90001ff8:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
90001ffa:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
90001ffc:	4a4a      	ldr	r2, [pc, #296]	; (90002128 <I2Cx_Init+0x150>)
90001ffe:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90002002:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90002006:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
9000200a:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
9000200e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90002010:	d143      	bne.n	9000209a <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90002012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90002016:	2080      	movs	r0, #128	; 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90002018:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
9000201c:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
9000201e:	6323      	str	r3, [r4, #48]	; 0x30
90002020:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
90002022:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90002024:	f003 0380 	and.w	r3, r3, #128	; 0x80
90002028:	9301      	str	r3, [sp, #4]
9000202a:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
9000202c:	2312      	movs	r3, #18
9000202e:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90002032:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90002034:	483d      	ldr	r0, [pc, #244]	; (9000212c <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90002036:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
9000203a:	f000 ff7d 	bl	90002f38 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
9000203e:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90002042:	a905      	add	r1, sp, #20
90002044:	4839      	ldr	r0, [pc, #228]	; (9000212c <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
90002046:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90002048:	f000 ff76 	bl	90002f38 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
9000204c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
9000204e:	4632      	mov	r2, r6
90002050:	210f      	movs	r1, #15
90002052:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
90002054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90002058:	6423      	str	r3, [r4, #64]	; 0x40
9000205a:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000205c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90002060:	9302      	str	r3, [sp, #8]
90002062:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
90002064:	6a23      	ldr	r3, [r4, #32]
90002066:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
9000206a:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
9000206c:	6a23      	ldr	r3, [r4, #32]
9000206e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
90002072:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
90002074:	f000 fbc0 	bl	900027f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
90002078:	2048      	movs	r0, #72	; 0x48
9000207a:	f000 fbef 	bl	9000285c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
9000207e:	2049      	movs	r0, #73	; 0x49
90002080:	4632      	mov	r2, r6
90002082:	210f      	movs	r1, #15
90002084:	f000 fbb8 	bl	900027f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
90002088:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
9000208a:	f000 fbe7 	bl	9000285c <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
9000208e:	4628      	mov	r0, r5
  }
}
90002090:	b00a      	add	sp, #40	; 0x28
90002092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
90002096:	f001 bdd1 	b.w	90003c3c <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
9000209a:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
9000209e:	f44f 7280 	mov.w	r2, #256	; 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
900020a2:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900020a4:	4822      	ldr	r0, [pc, #136]	; (90002130 <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900020a6:	6323      	str	r3, [r4, #48]	; 0x30
900020a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
900020aa:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900020ac:	f003 0302 	and.w	r3, r3, #2
900020b0:	9303      	str	r3, [sp, #12]
900020b2:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
900020b4:	2312      	movs	r3, #18
900020b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
900020ba:	2304      	movs	r3, #4
900020bc:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900020c0:	a905      	add	r1, sp, #20
900020c2:	f000 ff39 	bl	90002f38 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
900020c6:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900020ca:	a905      	add	r1, sp, #20
900020cc:	4818      	ldr	r0, [pc, #96]	; (90002130 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
900020ce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900020d0:	f000 ff32 	bl	90002f38 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
900020d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
900020d6:	4632      	mov	r2, r6
900020d8:	210f      	movs	r1, #15
900020da:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
900020dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
900020e0:	6423      	str	r3, [r4, #64]	; 0x40
900020e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
900020e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900020e8:	9304      	str	r3, [sp, #16]
900020ea:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
900020ec:	6a23      	ldr	r3, [r4, #32]
900020ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
900020f2:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
900020f4:	6a23      	ldr	r3, [r4, #32]
900020f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
900020fa:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
900020fc:	f000 fb7c 	bl	900027f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
90002100:	201f      	movs	r0, #31
90002102:	f000 fbab 	bl	9000285c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
90002106:	2020      	movs	r0, #32
90002108:	4632      	mov	r2, r6
9000210a:	210f      	movs	r1, #15
9000210c:	f000 fb74 	bl	900027f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
90002110:	2020      	movs	r0, #32
90002112:	e7ba      	b.n	9000208a <I2Cx_Init+0xb2>
}
90002114:	b00a      	add	sp, #40	; 0x28
90002116:	bd70      	pop	{r4, r5, r6, pc}
90002118:	20000560 	.word	0x20000560
9000211c:	40023800 	.word	0x40023800
90002120:	40005c00 	.word	0x40005c00
90002124:	40005400 	.word	0x40005400
90002128:	40912732 	.word	0x40912732
9000212c:	40021c00 	.word	0x40021c00
90002130:	40020400 	.word	0x40020400

90002134 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
90002134:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90002136:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
9000213a:	b085      	sub	sp, #20
9000213c:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
9000213e:	9402      	str	r4, [sp, #8]
90002140:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
90002144:	9401      	str	r4, [sp, #4]
90002146:	9c08      	ldr	r4, [sp, #32]
90002148:	9400      	str	r4, [sp, #0]
9000214a:	f001 fde2 	bl	90003d12 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
9000214e:	4604      	mov	r4, r0
90002150:	b128      	cbz	r0, 9000215e <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
90002152:	4628      	mov	r0, r5
90002154:	f001 fdc4 	bl	90003ce0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
90002158:	4628      	mov	r0, r5
9000215a:	f7ff ff3d 	bl	90001fd8 <I2Cx_Init>
}
9000215e:	4620      	mov	r0, r4
90002160:	b005      	add	sp, #20
90002162:	bd30      	pop	{r4, r5, pc}

90002164 <I2Cx_ReadMultiple>:
{
90002164:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90002166:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
9000216a:	b085      	sub	sp, #20
9000216c:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
9000216e:	9402      	str	r4, [sp, #8]
90002170:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
90002174:	9401      	str	r4, [sp, #4]
90002176:	9c08      	ldr	r4, [sp, #32]
90002178:	9400      	str	r4, [sp, #0]
9000217a:	f001 fe81 	bl	90003e80 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
9000217e:	4604      	mov	r4, r0
90002180:	b128      	cbz	r0, 9000218e <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
90002182:	4628      	mov	r0, r5
90002184:	f001 fdac 	bl	90003ce0 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
90002188:	4628      	mov	r0, r5
9000218a:	f7ff ff25 	bl	90001fd8 <I2Cx_Init>
}
9000218e:	4620      	mov	r0, r4
90002190:	b005      	add	sp, #20
90002192:	bd30      	pop	{r4, r5, pc}

90002194 <BSP_LED_Init>:
{
90002194:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
90002196:	4604      	mov	r4, r0
{
90002198:	b087      	sub	sp, #28
  if (Led == LED1)
9000219a:	b9c8      	cbnz	r0, 900021d0 <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
9000219c:	4b0d      	ldr	r3, [pc, #52]	; (900021d4 <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
9000219e:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
900021a0:	a901      	add	r1, sp, #4
900021a2:	480d      	ldr	r0, [pc, #52]	; (900021d8 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
900021a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900021a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
900021aa:	631a      	str	r2, [r3, #48]	; 0x30
900021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
900021b2:	9300      	str	r3, [sp, #0]
900021b4:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
900021b6:	2301      	movs	r3, #1
900021b8:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
900021bc:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
900021be:	2303      	movs	r3, #3
900021c0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
900021c2:	f000 feb9 	bl	90002f38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
900021c6:	4622      	mov	r2, r4
900021c8:	4629      	mov	r1, r5
900021ca:	4803      	ldr	r0, [pc, #12]	; (900021d8 <BSP_LED_Init+0x44>)
900021cc:	f000 ff96 	bl	900030fc <HAL_GPIO_WritePin>
}
900021d0:	b007      	add	sp, #28
900021d2:	bd30      	pop	{r4, r5, pc}
900021d4:	40023800 	.word	0x40023800
900021d8:	40022000 	.word	0x40022000

900021dc <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
900021dc:	4801      	ldr	r0, [pc, #4]	; (900021e4 <AUDIO_IO_Init+0x8>)
900021de:	f7ff befb 	b.w	90001fd8 <I2Cx_Init>
900021e2:	bf00      	nop
900021e4:	20000560 	.word	0x20000560

900021e8 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
900021e8:	4770      	bx	lr
	...

900021ec <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
900021ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
900021ee:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
900021f0:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
900021f2:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
900021f6:	f10d 020e 	add.w	r2, sp, #14
900021fa:	9301      	str	r3, [sp, #4]
900021fc:	9200      	str	r2, [sp, #0]
900021fe:	460a      	mov	r2, r1
90002200:	4601      	mov	r1, r0
90002202:	4803      	ldr	r0, [pc, #12]	; (90002210 <AUDIO_IO_Write+0x24>)
90002204:	f7ff ff96 	bl	90002134 <I2Cx_WriteMultiple>
}
90002208:	b005      	add	sp, #20
9000220a:	f85d fb04 	ldr.w	pc, [sp], #4
9000220e:	bf00      	nop
90002210:	20000560 	.word	0x20000560

90002214 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
90002214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
90002216:	2300      	movs	r3, #0
{
90002218:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
9000221a:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
9000221e:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
90002222:	2302      	movs	r3, #2
90002224:	9100      	str	r1, [sp, #0]
90002226:	4601      	mov	r1, r0
90002228:	9301      	str	r3, [sp, #4]
9000222a:	4805      	ldr	r0, [pc, #20]	; (90002240 <AUDIO_IO_Read+0x2c>)
9000222c:	f7ff ff9a 	bl	90002164 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
90002230:	f8bd 000e 	ldrh.w	r0, [sp, #14]
90002234:	ba40      	rev16	r0, r0
  
  read_value = tmp;
  
  return read_value;
}
90002236:	b280      	uxth	r0, r0
90002238:	b005      	add	sp, #20
9000223a:	f85d fb04 	ldr.w	pc, [sp], #4
9000223e:	bf00      	nop
90002240:	20000560 	.word	0x20000560

90002244 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
90002244:	f000 bab4 	b.w	900027b0 <HAL_Delay>

90002248 <TS_IO_Init>:
90002248:	f7ff bfc8 	b.w	900021dc <AUDIO_IO_Init>

9000224c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
9000224c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9000224e:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
90002252:	f10d 020f 	add.w	r2, sp, #15
90002256:	2301      	movs	r3, #1
90002258:	9200      	str	r2, [sp, #0]
9000225a:	460a      	mov	r2, r1
9000225c:	4601      	mov	r1, r0
9000225e:	9301      	str	r3, [sp, #4]
90002260:	4802      	ldr	r0, [pc, #8]	; (9000226c <TS_IO_Write+0x20>)
90002262:	f7ff ff67 	bl	90002134 <I2Cx_WriteMultiple>
}
90002266:	b005      	add	sp, #20
90002268:	f85d fb04 	ldr.w	pc, [sp], #4
9000226c:	20000560 	.word	0x20000560

90002270 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
90002270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
90002272:	2300      	movs	r3, #0
{
90002274:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
90002276:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
9000227a:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
9000227e:	2301      	movs	r3, #1
90002280:	9100      	str	r1, [sp, #0]
90002282:	4601      	mov	r1, r0
90002284:	9301      	str	r3, [sp, #4]
90002286:	4804      	ldr	r0, [pc, #16]	; (90002298 <TS_IO_Read+0x28>)
90002288:	f7ff ff6c 	bl	90002164 <I2Cx_ReadMultiple>

  return read_value;
}
9000228c:	f89d 000f 	ldrb.w	r0, [sp, #15]
90002290:	b005      	add	sp, #20
90002292:	f85d fb04 	ldr.w	pc, [sp], #4
90002296:	bf00      	nop
90002298:	20000560 	.word	0x20000560

9000229c <TS_IO_Delay>:
9000229c:	f000 ba88 	b.w	900027b0 <HAL_Delay>

900022a0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
900022a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
900022a4:	4c21      	ldr	r4, [pc, #132]	; (9000232c <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900022a6:	2710      	movs	r7, #16
900022a8:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
900022aa:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900022ae:	19e5      	adds	r5, r4, r7
900022b0:	4621      	mov	r1, r4
{
900022b2:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900022b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
900022b8:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
900022ba:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900022be:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
900022c2:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900022c6:	f003 f866 	bl	90005396 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
900022ca:	4630      	mov	r0, r6
900022cc:	f000 fa70 	bl	900027b0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
900022d0:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
900022d2:	4621      	mov	r1, r4
900022d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
900022d8:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900022da:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
900022de:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
900022e2:	f003 f858 	bl	90005396 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
900022e6:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900022e8:	4621      	mov	r1, r4
900022ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
900022ee:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900022f0:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
900022f4:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
900022f6:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900022fa:	f003 f84c 	bl	90005396 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
900022fe:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90002302:	4621      	mov	r1, r4
90002304:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90002308:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
9000230a:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
9000230c:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
9000230e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90002310:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
90002314:	9b01      	ldr	r3, [sp, #4]
90002316:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90002318:	f003 f83d 	bl	90005396 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
9000231c:	4649      	mov	r1, r9
9000231e:	4628      	mov	r0, r5
}
90002320:	b003      	add	sp, #12
90002322:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90002326:	f003 b84d 	b.w	900053c4 <HAL_SDRAM_ProgramRefreshRate>
9000232a:	bf00      	nop
9000232c:	200005f8 	.word	0x200005f8

90002330 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002330:	4b55      	ldr	r3, [pc, #340]	; (90002488 <BSP_SDRAM_MspInit+0x158>)
90002332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90002334:	f042 0201 	orr.w	r2, r2, #1
{  
90002338:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
9000233a:	639a      	str	r2, [r3, #56]	; 0x38
{  
9000233c:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
9000233e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
90002340:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
90002342:	a909      	add	r1, sp, #36	; 0x24
90002344:	4851      	ldr	r0, [pc, #324]	; (9000248c <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
90002346:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
9000234a:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
9000234c:	9201      	str	r2, [sp, #4]
9000234e:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
90002350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002352:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
90002356:	631a      	str	r2, [r3, #48]	; 0x30
90002358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000235a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
9000235e:	9202      	str	r2, [sp, #8]
90002360:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90002362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002364:	f042 0204 	orr.w	r2, r2, #4
90002368:	631a      	str	r2, [r3, #48]	; 0x30
9000236a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000236c:	f002 0204 	and.w	r2, r2, #4
90002370:	9203      	str	r2, [sp, #12]
90002372:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002376:	f042 0208 	orr.w	r2, r2, #8
9000237a:	631a      	str	r2, [r3, #48]	; 0x30
9000237c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000237e:	f002 0208 	and.w	r2, r2, #8
90002382:	9204      	str	r2, [sp, #16]
90002384:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002388:	f042 0210 	orr.w	r2, r2, #16
9000238c:	631a      	str	r2, [r3, #48]	; 0x30
9000238e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002390:	f002 0210 	and.w	r2, r2, #16
90002394:	9205      	str	r2, [sp, #20]
90002396:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000239a:	f042 0220 	orr.w	r2, r2, #32
9000239e:	631a      	str	r2, [r3, #48]	; 0x30
900023a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900023a2:	f002 0220 	and.w	r2, r2, #32
900023a6:	9206      	str	r2, [sp, #24]
900023a8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900023aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900023ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900023b0:	631a      	str	r2, [r3, #48]	; 0x30
900023b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900023b4:	f002 0240 	and.w	r2, r2, #64	; 0x40
900023b8:	9207      	str	r2, [sp, #28]
900023ba:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900023bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900023be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900023c2:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
900023c4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
900023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900023c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
900023cc:	9308      	str	r3, [sp, #32]
900023ce:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
900023d0:	2302      	movs	r3, #2
900023d2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
900023d6:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
900023d8:	230c      	movs	r3, #12
900023da:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
900023dc:	2308      	movs	r3, #8
900023de:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
900023e0:	f000 fdaa 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
900023e4:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900023e8:	a909      	add	r1, sp, #36	; 0x24
900023ea:	4829      	ldr	r0, [pc, #164]	; (90002490 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
900023ec:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900023ee:	f000 fda3 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900023f2:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900023f6:	a909      	add	r1, sp, #36	; 0x24
900023f8:	4826      	ldr	r0, [pc, #152]	; (90002494 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900023fa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900023fc:	f000 fd9c 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002400:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002404:	a909      	add	r1, sp, #36	; 0x24
90002406:	4824      	ldr	r0, [pc, #144]	; (90002498 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002408:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
9000240a:	f000 fd95 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
9000240e:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002412:	a909      	add	r1, sp, #36	; 0x24
90002414:	4821      	ldr	r0, [pc, #132]	; (9000249c <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90002416:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002418:	f000 fd8e 	bl	90002f38 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
9000241c:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
9000241e:	a909      	add	r1, sp, #36	; 0x24
90002420:	481f      	ldr	r0, [pc, #124]	; (900024a0 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90002422:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90002424:	f000 fd88 	bl	90002f38 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
90002428:	4b1e      	ldr	r3, [pc, #120]	; (900024a4 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
9000242a:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
9000242c:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90002430:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90002434:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
90002436:	675c      	str	r4, [r3, #116]	; 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
90002438:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
9000243a:	e9c3 4212 	strd	r4, r2, [r3, #72]	; 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
9000243e:	f44f 6280 	mov.w	r2, #1024	; 0x400
90002442:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90002446:	f44f 4280 	mov.w	r2, #16384	; 0x4000
9000244a:	e9c3 0216 	strd	r0, r2, [r3, #88]	; 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
9000244e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
90002452:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
90002456:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
90002458:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
9000245c:	4a12      	ldr	r2, [pc, #72]	; (900024a8 <BSP_SDRAM_MspInit+0x178>)
9000245e:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
90002462:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
90002464:	6335      	str	r5, [r6, #48]	; 0x30
90002466:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dma_handle);
90002468:	f000 faae 	bl	900029c8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
9000246c:	4628      	mov	r0, r5
9000246e:	f000 fa2d 	bl	900028cc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
90002472:	4622      	mov	r2, r4
90002474:	210f      	movs	r1, #15
90002476:	2038      	movs	r0, #56	; 0x38
90002478:	f000 f9be 	bl	900027f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
9000247c:	2038      	movs	r0, #56	; 0x38
9000247e:	f000 f9ed 	bl	9000285c <HAL_NVIC_EnableIRQ>
}
90002482:	b00e      	add	sp, #56	; 0x38
90002484:	bd70      	pop	{r4, r5, r6, pc}
90002486:	bf00      	nop
90002488:	40023800 	.word	0x40023800
9000248c:	40020800 	.word	0x40020800
90002490:	40020c00 	.word	0x40020c00
90002494:	40021000 	.word	0x40021000
90002498:	40021400 	.word	0x40021400
9000249c:	40021800 	.word	0x40021800
900024a0:	40021c00 	.word	0x40021c00
900024a4:	200005f8 	.word	0x200005f8
900024a8:	40026410 	.word	0x40026410

900024ac <BSP_SDRAM_Init>:
{ 
900024ac:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900024ae:	4b1b      	ldr	r3, [pc, #108]	; (9000251c <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
900024b0:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900024b2:	4c1b      	ldr	r4, [pc, #108]	; (90002520 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
900024b4:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900024b6:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900024b8:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900024bc:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
900024be:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
900024c0:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
900024c2:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  Timing.ExitSelfRefreshDelay = 7;
900024c6:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
900024ca:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900024ce:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
900024d0:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900024d4:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
900024d8:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
900024da:	f44f 7380 	mov.w	r3, #256	; 0x100
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
900024de:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
900024e2:	63a1      	str	r1, [r4, #56]	; 0x38
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900024e4:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900024e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900024ec:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900024f0:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
900024f4:	f7ff ff1c 	bl	90002330 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
900024f8:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
900024fc:	4c09      	ldr	r4, [pc, #36]	; (90002524 <BSP_SDRAM_Init+0x78>)
900024fe:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
90002502:	f002 ff28 	bl	90005356 <HAL_SDRAM_Init>
90002506:	3800      	subs	r0, #0
90002508:	bf18      	it	ne
9000250a:	2001      	movne	r0, #1
9000250c:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
9000250e:	f240 6003 	movw	r0, #1539	; 0x603
90002512:	f7ff fec5 	bl	900022a0 <BSP_SDRAM_Initialization_sequence>
}
90002516:	7820      	ldrb	r0, [r4, #0]
90002518:	bd10      	pop	{r4, pc}
9000251a:	bf00      	nop
9000251c:	a0000140 	.word	0xa0000140
90002520:	200005f8 	.word	0x200005f8
90002524:	20000088 	.word	0x20000088

90002528 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
90002528:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
9000252a:	4c0b      	ldr	r4, [pc, #44]	; (90002558 <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
9000252c:	4d0b      	ldr	r5, [pc, #44]	; (9000255c <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
9000252e:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90002530:	2070      	movs	r0, #112	; 0x70
90002532:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
90002534:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90002536:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
90002538:	686b      	ldr	r3, [r5, #4]
9000253a:	2070      	movs	r0, #112	; 0x70
9000253c:	4798      	blx	r3
9000253e:	2851      	cmp	r0, #81	; 0x51
90002540:	d108      	bne.n	90002554 <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
90002542:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
90002544:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
90002546:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
90002548:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
9000254a:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
9000254c:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
9000254e:	4798      	blx	r3
  uint8_t status = TS_OK;
90002550:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
90002552:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
90002554:	2003      	movs	r0, #3
90002556:	e7fc      	b.n	90002552 <BSP_TS_Init+0x2a>
90002558:	20000718 	.word	0x20000718
9000255c:	20000000 	.word	0x20000000

90002560 <BSP_TS_Get_GestureId>:
{
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
90002560:	4b15      	ldr	r3, [pc, #84]	; (900025b8 <BSP_TS_Get_GestureId+0x58>)
{
90002562:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
90002564:	2400      	movs	r4, #0
{
90002566:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
90002568:	a901      	add	r1, sp, #4
9000256a:	7a18      	ldrb	r0, [r3, #8]
  uint32_t gestureId = 0;
9000256c:	9401      	str	r4, [sp, #4]
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
9000256e:	f7fe f8df 	bl	90000730 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
90002572:	9b01      	ldr	r3, [sp, #4]
90002574:	2b18      	cmp	r3, #24
90002576:	d019      	beq.n	900025ac <BSP_TS_Get_GestureId+0x4c>
90002578:	d808      	bhi.n	9000258c <BSP_TS_Get_GestureId+0x2c>
9000257a:	2b10      	cmp	r3, #16
9000257c:	d011      	beq.n	900025a2 <BSP_TS_Get_GestureId+0x42>
9000257e:	2b14      	cmp	r3, #20
90002580:	d012      	beq.n	900025a8 <BSP_TS_Get_GestureId+0x48>
90002582:	b15b      	cbz	r3, 9000259c <BSP_TS_Get_GestureId+0x3c>
90002584:	2401      	movs	r4, #1
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
90002586:	4620      	mov	r0, r4
90002588:	b003      	add	sp, #12
9000258a:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
9000258c:	2b40      	cmp	r3, #64	; 0x40
9000258e:	d00f      	beq.n	900025b0 <BSP_TS_Get_GestureId+0x50>
90002590:	2b49      	cmp	r3, #73	; 0x49
90002592:	d00f      	beq.n	900025b4 <BSP_TS_Get_GestureId+0x54>
90002594:	2b1c      	cmp	r3, #28
90002596:	d1f5      	bne.n	90002584 <BSP_TS_Get_GestureId+0x24>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
90002598:	2304      	movs	r3, #4
9000259a:	e003      	b.n	900025a4 <BSP_TS_Get_GestureId+0x44>
  uint8_t  ts_status = TS_OK;
9000259c:	461c      	mov	r4, r3
      TS_State->gestureId = GEST_ID_NO_GESTURE;
9000259e:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
900025a0:	e7f1      	b.n	90002586 <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_UP;
900025a2:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
900025a4:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
900025a6:	e7ee      	b.n	90002586 <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
900025a8:	2302      	movs	r3, #2
900025aa:	e7fb      	b.n	900025a4 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
900025ac:	2303      	movs	r3, #3
900025ae:	e7f9      	b.n	900025a4 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
900025b0:	2305      	movs	r3, #5
900025b2:	e7f7      	b.n	900025a4 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
900025b4:	2306      	movs	r3, #6
900025b6:	e7f5      	b.n	900025a4 <BSP_TS_Get_GestureId+0x44>
900025b8:	20000718 	.word	0x20000718

900025bc <BSP_TS_GetState>:
{
900025bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
900025c0:	4c56      	ldr	r4, [pc, #344]	; (9000271c <BSP_TS_GetState+0x160>)
{
900025c2:	b097      	sub	sp, #92	; 0x5c
  uint32_t weight = 0;
900025c4:	2300      	movs	r3, #0
{
900025c6:	4605      	mov	r5, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
900025c8:	6862      	ldr	r2, [r4, #4]
900025ca:	7a20      	ldrb	r0, [r4, #8]
900025cc:	6912      	ldr	r2, [r2, #16]
  uint32_t event = 0;
900025ce:	9309      	str	r3, [sp, #36]	; 0x24
  uint32_t area = 0;
900025d0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
900025d4:	4790      	blx	r2
900025d6:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
900025d8:	b1b8      	cbz	r0, 9000260a <BSP_TS_GetState+0x4e>
900025da:	ab0d      	add	r3, sp, #52	; 0x34
900025dc:	f105 0615 	add.w	r6, r5, #21
900025e0:	f105 0b02 	add.w	fp, r5, #2
900025e4:	f104 090c 	add.w	r9, r4, #12
900025e8:	9304      	str	r3, [sp, #16]
900025ea:	ab0a      	add	r3, sp, #40	; 0x28
900025ec:	f104 0a20 	add.w	sl, r4, #32
900025f0:	af10      	add	r7, sp, #64	; 0x40
900025f2:	9303      	str	r3, [sp, #12]
900025f4:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
    for(index=0; index < TS_State->touchDetected; index++)
900025f8:	2300      	movs	r3, #0
900025fa:	9305      	str	r3, [sp, #20]
900025fc:	782b      	ldrb	r3, [r5, #0]
900025fe:	9a05      	ldr	r2, [sp, #20]
90002600:	4293      	cmp	r3, r2
90002602:	d805      	bhi.n	90002610 <BSP_TS_GetState+0x54>
    ts_status = BSP_TS_Get_GestureId(TS_State);
90002604:	4628      	mov	r0, r5
90002606:	f7ff ffab 	bl	90002560 <BSP_TS_Get_GestureId>
}
9000260a:	b017      	add	sp, #92	; 0x5c
9000260c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
90002610:	6863      	ldr	r3, [r4, #4]
90002612:	4642      	mov	r2, r8
90002614:	4639      	mov	r1, r7
90002616:	7a20      	ldrb	r0, [r4, #8]
90002618:	695b      	ldr	r3, [r3, #20]
9000261a:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
9000261c:	7a63      	ldrb	r3, [r4, #9]
9000261e:	2b01      	cmp	r3, #1
90002620:	d14a      	bne.n	900026b8 <BSP_TS_GetState+0xfc>
        x[index] = brute_x[index];
90002622:	883a      	ldrh	r2, [r7, #0]
90002624:	9903      	ldr	r1, [sp, #12]
90002626:	800a      	strh	r2, [r1, #0]
        y[index] = brute_y[index];
90002628:	f8b8 2000 	ldrh.w	r2, [r8]
        y[index] = 4096 - brute_y[index];
9000262c:	9904      	ldr	r1, [sp, #16]
9000262e:	800a      	strh	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_XY)
90002630:	071b      	lsls	r3, r3, #28
90002632:	d506      	bpl.n	90002642 <BSP_TS_GetState+0x86>
        y[index] = brute_x[index];
90002634:	883b      	ldrh	r3, [r7, #0]
90002636:	9a04      	ldr	r2, [sp, #16]
90002638:	8013      	strh	r3, [r2, #0]
        x[index] = brute_y[index];
9000263a:	f8b8 3000 	ldrh.w	r3, [r8]
9000263e:	9a03      	ldr	r2, [sp, #12]
90002640:	8013      	strh	r3, [r2, #0]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90002642:	9b03      	ldr	r3, [sp, #12]
90002644:	f8d9 2000 	ldr.w	r2, [r9]
90002648:	f833 cb02 	ldrh.w	ip, [r3], #2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
9000264c:	9904      	ldr	r1, [sp, #16]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
9000264e:	4594      	cmp	ip, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002650:	f8da 0000 	ldr.w	r0, [sl]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90002654:	9303      	str	r3, [sp, #12]
90002656:	b293      	uxth	r3, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002658:	f831 2b02 	ldrh.w	r2, [r1], #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
9000265c:	bf8c      	ite	hi
9000265e:	ebac 0303 	subhi.w	r3, ip, r3
90002662:	eba3 030c 	subls.w	r3, r3, ip
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002666:	9104      	str	r1, [sp, #16]
90002668:	4282      	cmp	r2, r0
9000266a:	b281      	uxth	r1, r0
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
9000266c:	7a20      	ldrb	r0, [r4, #8]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
9000266e:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002670:	bf8c      	ite	hi
90002672:	1a51      	subhi	r1, r2, r1
90002674:	1a89      	subls	r1, r1, r2
90002676:	b289      	uxth	r1, r1
      if ((x_diff + y_diff) > 5)
90002678:	440b      	add	r3, r1
9000267a:	2b05      	cmp	r3, #5
        _x[index] = x[index];
9000267c:	bfc4      	itt	gt
9000267e:	f8c9 c000 	strgt.w	ip, [r9]
        _y[index] = y[index];
90002682:	f8ca 2000 	strgt.w	r2, [sl]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
90002686:	2870      	cmp	r0, #112	; 0x70
90002688:	d124      	bne.n	900026d4 <BSP_TS_GetState+0x118>
        TS_State->touchX[index] = x[index];
9000268a:	f8ab c000 	strh.w	ip, [fp]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
9000268e:	ab09      	add	r3, sp, #36	; 0x24
        TS_State->touchY[index] = y[index];
90002690:	f8ab 200a 	strh.w	r2, [fp, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
90002694:	9905      	ldr	r1, [sp, #20]
90002696:	aa07      	add	r2, sp, #28
90002698:	9300      	str	r3, [sp, #0]
9000269a:	ab08      	add	r3, sp, #32
9000269c:	f7fe f858 	bl	90000750 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
900026a0:	9b07      	ldr	r3, [sp, #28]
900026a2:	f806 3f01 	strb.w	r3, [r6, #1]!
      TS_State->touchArea[index]   = area;
900026a6:	9b08      	ldr	r3, [sp, #32]
900026a8:	72b3      	strb	r3, [r6, #10]
      switch(event)
900026aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
900026ac:	2b03      	cmp	r3, #3
900026ae:	d821      	bhi.n	900026f4 <BSP_TS_GetState+0x138>
900026b0:	e8df f003 	tbb	[pc, r3]
900026b4:	312f2d1e 	.word	0x312f2d1e
      if(tsOrientation & TS_SWAP_X)
900026b8:	0799      	lsls	r1, r3, #30
        x[index] = 4096 - brute_x[index];
900026ba:	bf41      	itttt	mi
900026bc:	883a      	ldrhmi	r2, [r7, #0]
900026be:	9903      	ldrmi	r1, [sp, #12]
900026c0:	f5c2 5280 	rsbmi	r2, r2, #4096	; 0x1000
900026c4:	800a      	strhmi	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_Y)
900026c6:	075a      	lsls	r2, r3, #29
900026c8:	d5b2      	bpl.n	90002630 <BSP_TS_GetState+0x74>
        y[index] = 4096 - brute_y[index];
900026ca:	f8b8 2000 	ldrh.w	r2, [r8]
900026ce:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
900026d2:	e7ab      	b.n	9000262c <BSP_TS_GetState+0x70>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
900026d4:	f8d9 2000 	ldr.w	r2, [r9]
900026d8:	8823      	ldrh	r3, [r4, #0]
900026da:	4353      	muls	r3, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
900026dc:	8862      	ldrh	r2, [r4, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
900026de:	0b1b      	lsrs	r3, r3, #12
900026e0:	f8ab 3000 	strh.w	r3, [fp]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
900026e4:	f8da 3000 	ldr.w	r3, [sl]
900026e8:	435a      	muls	r2, r3
900026ea:	f3c2 320f 	ubfx	r2, r2, #12, #16
900026ee:	e7ce      	b.n	9000268e <BSP_TS_GetState+0xd2>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
900026f0:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
900026f2:	7173      	strb	r3, [r6, #5]
    for(index=0; index < TS_State->touchDetected; index++)
900026f4:	9b05      	ldr	r3, [sp, #20]
900026f6:	f10b 0b02 	add.w	fp, fp, #2
900026fa:	f109 0904 	add.w	r9, r9, #4
900026fe:	f10a 0a04 	add.w	sl, sl, #4
90002702:	3301      	adds	r3, #1
90002704:	3702      	adds	r7, #2
90002706:	f108 0802 	add.w	r8, r8, #2
9000270a:	9305      	str	r3, [sp, #20]
9000270c:	e776      	b.n	900025fc <BSP_TS_GetState+0x40>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
9000270e:	2302      	movs	r3, #2
90002710:	e7ef      	b.n	900026f2 <BSP_TS_GetState+0x136>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
90002712:	2303      	movs	r3, #3
90002714:	e7ed      	b.n	900026f2 <BSP_TS_GetState+0x136>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
90002716:	2300      	movs	r3, #0
90002718:	e7eb      	b.n	900026f2 <BSP_TS_GetState+0x136>
9000271a:	bf00      	nop
9000271c:	20000718 	.word	0x20000718

90002720 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90002720:	4770      	bx	lr
	...

90002724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90002724:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90002726:	4e0e      	ldr	r6, [pc, #56]	; (90002760 <HAL_InitTick+0x3c>)
90002728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
9000272c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
9000272e:	7832      	ldrb	r2, [r6, #0]
90002730:	fbb3 f3f2 	udiv	r3, r3, r2
90002734:	4a0b      	ldr	r2, [pc, #44]	; (90002764 <HAL_InitTick+0x40>)
90002736:	6810      	ldr	r0, [r2, #0]
90002738:	fbb0 f0f3 	udiv	r0, r0, r3
9000273c:	f000 f89c 	bl	90002878 <HAL_SYSTICK_Config>
90002740:	4604      	mov	r4, r0
90002742:	b950      	cbnz	r0, 9000275a <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90002744:	2d0f      	cmp	r5, #15
90002746:	d808      	bhi.n	9000275a <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90002748:	4602      	mov	r2, r0
9000274a:	4629      	mov	r1, r5
9000274c:	f04f 30ff 	mov.w	r0, #4294967295
90002750:	f000 f852 	bl	900027f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90002754:	4620      	mov	r0, r4
90002756:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
90002758:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000275a:	2001      	movs	r0, #1
9000275c:	e7fc      	b.n	90002758 <HAL_InitTick+0x34>
9000275e:	bf00      	nop
90002760:	2000008c 	.word	0x2000008c
90002764:	200000b4 	.word	0x200000b4

90002768 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
90002768:	4a07      	ldr	r2, [pc, #28]	; (90002788 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000276a:	2003      	movs	r0, #3
{
9000276c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
9000276e:	6813      	ldr	r3, [r2, #0]
90002770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90002774:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90002776:	f000 f82d 	bl	900027d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
9000277a:	200f      	movs	r0, #15
9000277c:	f7ff ffd2 	bl	90002724 <HAL_InitTick>
  HAL_MspInit();
90002780:	f7ff ffce 	bl	90002720 <HAL_MspInit>
}
90002784:	2000      	movs	r0, #0
90002786:	bd08      	pop	{r3, pc}
90002788:	40023c00 	.word	0x40023c00

9000278c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
9000278c:	4a03      	ldr	r2, [pc, #12]	; (9000279c <HAL_IncTick+0x10>)
9000278e:	4b04      	ldr	r3, [pc, #16]	; (900027a0 <HAL_IncTick+0x14>)
90002790:	6811      	ldr	r1, [r2, #0]
90002792:	781b      	ldrb	r3, [r3, #0]
90002794:	440b      	add	r3, r1
90002796:	6013      	str	r3, [r2, #0]
}
90002798:	4770      	bx	lr
9000279a:	bf00      	nop
9000279c:	2000074c 	.word	0x2000074c
900027a0:	2000008c 	.word	0x2000008c

900027a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
900027a4:	4b01      	ldr	r3, [pc, #4]	; (900027ac <HAL_GetTick+0x8>)
900027a6:	6818      	ldr	r0, [r3, #0]
}
900027a8:	4770      	bx	lr
900027aa:	bf00      	nop
900027ac:	2000074c 	.word	0x2000074c

900027b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900027b0:	b538      	push	{r3, r4, r5, lr}
900027b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
900027b4:	f7ff fff6 	bl	900027a4 <HAL_GetTick>
900027b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
900027ba:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
900027bc:	bf1e      	ittt	ne
900027be:	4b04      	ldrne	r3, [pc, #16]	; (900027d0 <HAL_Delay+0x20>)
900027c0:	781b      	ldrbne	r3, [r3, #0]
900027c2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
900027c4:	f7ff ffee 	bl	900027a4 <HAL_GetTick>
900027c8:	1b43      	subs	r3, r0, r5
900027ca:	42a3      	cmp	r3, r4
900027cc:	d3fa      	bcc.n	900027c4 <HAL_Delay+0x14>
  {
  }
}
900027ce:	bd38      	pop	{r3, r4, r5, pc}
900027d0:	2000008c 	.word	0x2000008c

900027d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900027d4:	4907      	ldr	r1, [pc, #28]	; (900027f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900027d6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900027d8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900027da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900027de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
900027e2:	0412      	lsls	r2, r2, #16
900027e4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900027e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
900027e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
900027ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
900027f0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
900027f2:	4770      	bx	lr
900027f4:	e000ed00 	.word	0xe000ed00

900027f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900027f8:	4b16      	ldr	r3, [pc, #88]	; (90002854 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
900027fa:	b530      	push	{r4, r5, lr}
900027fc:	68dc      	ldr	r4, [r3, #12]
900027fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002802:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002806:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002808:	2b04      	cmp	r3, #4
9000280a:	bf28      	it	cs
9000280c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000280e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002810:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002814:	bf8c      	ite	hi
90002816:	3c03      	subhi	r4, #3
90002818:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000281a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
9000281e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002820:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002824:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002828:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000282c:	fa03 f304 	lsl.w	r3, r3, r4
90002830:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002834:	ea4f 1303 	mov.w	r3, r3, lsl #4
90002838:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
9000283a:	db06      	blt.n	9000284a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000283c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
90002840:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
90002844:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90002848:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000284a:	f000 000f 	and.w	r0, r0, #15
9000284e:	4a02      	ldr	r2, [pc, #8]	; (90002858 <HAL_NVIC_SetPriority+0x60>)
90002850:	5413      	strb	r3, [r2, r0]
90002852:	e7f9      	b.n	90002848 <HAL_NVIC_SetPriority+0x50>
90002854:	e000ed00 	.word	0xe000ed00
90002858:	e000ed14 	.word	0xe000ed14

9000285c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
9000285c:	2800      	cmp	r0, #0
9000285e:	db07      	blt.n	90002870 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002860:	0941      	lsrs	r1, r0, #5
90002862:	2301      	movs	r3, #1
90002864:	f000 001f 	and.w	r0, r0, #31
90002868:	4a02      	ldr	r2, [pc, #8]	; (90002874 <HAL_NVIC_EnableIRQ+0x18>)
9000286a:	4083      	lsls	r3, r0
9000286c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90002870:	4770      	bx	lr
90002872:	bf00      	nop
90002874:	e000e100 	.word	0xe000e100

90002878 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90002878:	3801      	subs	r0, #1
9000287a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
9000287e:	d20b      	bcs.n	90002898 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90002880:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002884:	4a05      	ldr	r2, [pc, #20]	; (9000289c <HAL_SYSTICK_Config+0x24>)
90002886:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90002888:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
9000288a:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000288c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90002890:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90002892:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90002894:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90002896:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
90002898:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
9000289a:	4770      	bx	lr
9000289c:	e000ed00 	.word	0xe000ed00

900028a0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
900028a0:	6803      	ldr	r3, [r0, #0]
900028a2:	2118      	movs	r1, #24
900028a4:	b2da      	uxtb	r2, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
900028a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
900028aa:	3a10      	subs	r2, #16
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
900028ac:	f023 0303 	bic.w	r3, r3, #3
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
900028b0:	fbb2 f1f1 	udiv	r1, r2, r1
{
900028b4:	b510      	push	{r4, lr}
  if (stream_number > 3U)
900028b6:	2a5f      	cmp	r2, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
900028b8:	4c03      	ldr	r4, [pc, #12]	; (900028c8 <DMA_CalcBaseAndBitshift+0x28>)
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
900028ba:	bf88      	it	hi
900028bc:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
900028be:	5c61      	ldrb	r1, [r4, r1]
900028c0:	6583      	str	r3, [r0, #88]	; 0x58
900028c2:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
900028c4:	4618      	mov	r0, r3
900028c6:	bd10      	pop	{r4, pc}
900028c8:	900101d8 	.word	0x900101d8

900028cc <HAL_DMA_Init>:
{
900028cc:	b570      	push	{r4, r5, r6, lr}
900028ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
900028d0:	f7ff ff68 	bl	900027a4 <HAL_GetTick>
900028d4:	4605      	mov	r5, r0
  if(hdma == NULL)
900028d6:	2c00      	cmp	r4, #0
900028d8:	d071      	beq.n	900029be <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
900028da:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
900028dc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
900028de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
900028e2:	2302      	movs	r3, #2
900028e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
900028e8:	6813      	ldr	r3, [r2, #0]
900028ea:	f023 0301 	bic.w	r3, r3, #1
900028ee:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
900028f0:	6822      	ldr	r2, [r4, #0]
900028f2:	6813      	ldr	r3, [r2, #0]
900028f4:	07d8      	lsls	r0, r3, #31
900028f6:	d42e      	bmi.n	90002956 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
900028f8:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900028fa:	4832      	ldr	r0, [pc, #200]	; (900029c4 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900028fc:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900028fe:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90002900:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
90002904:	432b      	orrs	r3, r5
90002906:	68e5      	ldr	r5, [r4, #12]
90002908:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
9000290a:	6925      	ldr	r5, [r4, #16]
9000290c:	432b      	orrs	r3, r5
9000290e:	6965      	ldr	r5, [r4, #20]
90002910:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90002912:	69e5      	ldr	r5, [r4, #28]
90002914:	430b      	orrs	r3, r1
90002916:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
90002918:	6a25      	ldr	r5, [r4, #32]
9000291a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
9000291c:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
9000291e:	6a60      	ldr	r0, [r4, #36]	; 0x24
90002920:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
90002922:	bf02      	ittt	eq
90002924:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
90002928:	4335      	orreq	r5, r6
9000292a:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
9000292c:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
9000292e:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
90002930:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
90002932:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
90002936:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
9000293a:	d132      	bne.n	900029a2 <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
9000293c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
9000293e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
90002940:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90002942:	b375      	cbz	r5, 900029a2 <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
90002944:	b991      	cbnz	r1, 9000296c <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
90002946:	2801      	cmp	r0, #1
90002948:	d020      	beq.n	9000298c <HAL_DMA_Init+0xc0>
9000294a:	f030 0102 	bics.w	r1, r0, #2
9000294e:	d128      	bne.n	900029a2 <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90002950:	01e9      	lsls	r1, r5, #7
90002952:	d526      	bpl.n	900029a2 <HAL_DMA_Init+0xd6>
90002954:	e01d      	b.n	90002992 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90002956:	f7ff ff25 	bl	900027a4 <HAL_GetTick>
9000295a:	1b40      	subs	r0, r0, r5
9000295c:	2805      	cmp	r0, #5
9000295e:	d9c7      	bls.n	900028f0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002960:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
90002962:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002964:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
90002966:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
9000296a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
9000296c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
90002970:	d113      	bne.n	9000299a <HAL_DMA_Init+0xce>
    switch (tmp)
90002972:	2803      	cmp	r0, #3
90002974:	d815      	bhi.n	900029a2 <HAL_DMA_Init+0xd6>
90002976:	a101      	add	r1, pc, #4	; (adr r1, 9000297c <HAL_DMA_Init+0xb0>)
90002978:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
9000297c:	90002993 	.word	0x90002993
90002980:	90002951 	.word	0x90002951
90002984:	90002993 	.word	0x90002993
90002988:	9000298d 	.word	0x9000298d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
9000298c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
90002990:	d107      	bne.n	900029a2 <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90002992:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
90002994:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90002996:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
90002998:	e7e5      	b.n	90002966 <HAL_DMA_Init+0x9a>
    switch (tmp)
9000299a:	2802      	cmp	r0, #2
9000299c:	d9f9      	bls.n	90002992 <HAL_DMA_Init+0xc6>
9000299e:	2803      	cmp	r0, #3
900029a0:	d0d6      	beq.n	90002950 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
900029a2:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
900029a4:	4620      	mov	r0, r4
900029a6:	f7ff ff7b 	bl	900028a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
900029aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
900029ac:	233f      	movs	r3, #63	; 0x3f
900029ae:	4093      	lsls	r3, r2
900029b0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
900029b2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
900029b4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
900029b6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
900029b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
900029bc:	e7d5      	b.n	9000296a <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
900029be:	2001      	movs	r0, #1
900029c0:	e7d3      	b.n	9000296a <HAL_DMA_Init+0x9e>
900029c2:	bf00      	nop
900029c4:	f010803f 	.word	0xf010803f

900029c8 <HAL_DMA_DeInit>:
{
900029c8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
900029ca:	4605      	mov	r5, r0
900029cc:	b320      	cbz	r0, 90002a18 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
900029ce:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
900029d2:	2b02      	cmp	r3, #2
900029d4:	b2dc      	uxtb	r4, r3
900029d6:	d01d      	beq.n	90002a14 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
900029d8:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
900029da:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
900029dc:	681a      	ldr	r2, [r3, #0]
900029de:	f022 0201 	bic.w	r2, r2, #1
900029e2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
900029e4:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
900029e6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
900029e8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
900029ea:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
900029ec:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
900029ee:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
900029f0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
900029f2:	f7ff ff55 	bl	900028a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
900029f6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
900029f8:	233f      	movs	r3, #63	; 0x3f
900029fa:	4093      	lsls	r3, r2
900029fc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
900029fe:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
90002a00:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
90002a04:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
90002a08:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
90002a0c:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
90002a10:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
90002a14:	4620      	mov	r0, r4
90002a16:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90002a18:	2401      	movs	r4, #1
90002a1a:	e7fb      	b.n	90002a14 <HAL_DMA_DeInit+0x4c>

90002a1c <HAL_DMA_Start_IT>:
{
90002a1c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
90002a1e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90002a22:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
90002a24:	2c01      	cmp	r4, #1
90002a26:	d034      	beq.n	90002a92 <HAL_DMA_Start_IT+0x76>
90002a28:	2401      	movs	r4, #1
90002a2a:	2500      	movs	r5, #0
90002a2c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
90002a30:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
90002a34:	2c01      	cmp	r4, #1
90002a36:	f04f 0402 	mov.w	r4, #2
90002a3a:	d128      	bne.n	90002a8e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
90002a3c:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
90002a40:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002a42:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
90002a44:	6825      	ldr	r5, [r4, #0]
90002a46:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
90002a4a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
90002a4c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
90002a4e:	6883      	ldr	r3, [r0, #8]
90002a50:	2b40      	cmp	r3, #64	; 0x40
90002a52:	d119      	bne.n	90002a88 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
90002a54:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
90002a56:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
90002a58:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
90002a5a:	233f      	movs	r3, #63	; 0x3f
90002a5c:	4093      	lsls	r3, r2
90002a5e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
90002a60:	6823      	ldr	r3, [r4, #0]
90002a62:	f043 0316 	orr.w	r3, r3, #22
90002a66:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
90002a68:	6963      	ldr	r3, [r4, #20]
90002a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90002a6e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
90002a70:	6c03      	ldr	r3, [r0, #64]	; 0x40
90002a72:	b11b      	cbz	r3, 90002a7c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
90002a74:	6823      	ldr	r3, [r4, #0]
90002a76:	f043 0308 	orr.w	r3, r3, #8
90002a7a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
90002a7c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
90002a7e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
90002a80:	f043 0301 	orr.w	r3, r3, #1
90002a84:	6023      	str	r3, [r4, #0]
}
90002a86:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
90002a88:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
90002a8a:	60e2      	str	r2, [r4, #12]
90002a8c:	e7e4      	b.n	90002a58 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
90002a8e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
90002a92:	2002      	movs	r0, #2
90002a94:	e7f7      	b.n	90002a86 <HAL_DMA_Start_IT+0x6a>

90002a96 <HAL_DMA_Abort>:
{
90002a96:	b570      	push	{r4, r5, r6, lr}
90002a98:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90002a9a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
90002a9c:	f7ff fe82 	bl	900027a4 <HAL_GetTick>
90002aa0:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
90002aa2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
90002aa6:	2b02      	cmp	r3, #2
90002aa8:	d006      	beq.n	90002ab8 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90002aaa:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
90002aac:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90002aae:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
90002ab0:	2300      	movs	r3, #0
90002ab2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
90002ab6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90002ab8:	6823      	ldr	r3, [r4, #0]
90002aba:	681a      	ldr	r2, [r3, #0]
90002abc:	f022 0216 	bic.w	r2, r2, #22
90002ac0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
90002ac2:	695a      	ldr	r2, [r3, #20]
90002ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90002ac8:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
90002aca:	6c22      	ldr	r2, [r4, #64]	; 0x40
90002acc:	b90a      	cbnz	r2, 90002ad2 <HAL_DMA_Abort+0x3c>
90002ace:	6ca2      	ldr	r2, [r4, #72]	; 0x48
90002ad0:	b11a      	cbz	r2, 90002ada <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
90002ad2:	681a      	ldr	r2, [r3, #0]
90002ad4:	f022 0208 	bic.w	r2, r2, #8
90002ad8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
90002ada:	681a      	ldr	r2, [r3, #0]
90002adc:	f022 0201 	bic.w	r2, r2, #1
90002ae0:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
90002ae2:	6823      	ldr	r3, [r4, #0]
90002ae4:	681b      	ldr	r3, [r3, #0]
90002ae6:	f013 0301 	ands.w	r3, r3, #1
90002aea:	d10a      	bne.n	90002b02 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
90002aec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90002aee:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
90002af0:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
90002af2:	408a      	lsls	r2, r1
90002af4:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
90002af6:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
90002af8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
90002afc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
90002b00:	e7d9      	b.n	90002ab6 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90002b02:	f7ff fe4f 	bl	900027a4 <HAL_GetTick>
90002b06:	1b40      	subs	r0, r0, r5
90002b08:	2805      	cmp	r0, #5
90002b0a:	d9ea      	bls.n	90002ae2 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002b0c:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
90002b0e:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002b10:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
90002b12:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
90002b14:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
90002b18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
90002b1c:	e7cb      	b.n	90002ab6 <HAL_DMA_Abort+0x20>
	...

90002b20 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
90002b20:	2300      	movs	r3, #0
{
90002b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
90002b24:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90002b26:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
90002b28:	4b5b      	ldr	r3, [pc, #364]	; (90002c98 <HAL_DMA_IRQHandler+0x178>)
{
90002b2a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90002b2c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
90002b2e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90002b30:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
90002b32:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90002b34:	409a      	lsls	r2, r3
90002b36:	4232      	tst	r2, r6
90002b38:	d00c      	beq.n	90002b54 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
90002b3a:	6801      	ldr	r1, [r0, #0]
90002b3c:	6808      	ldr	r0, [r1, #0]
90002b3e:	0740      	lsls	r0, r0, #29
90002b40:	d508      	bpl.n	90002b54 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
90002b42:	6808      	ldr	r0, [r1, #0]
90002b44:	f020 0004 	bic.w	r0, r0, #4
90002b48:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
90002b4a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
90002b4c:	6d62      	ldr	r2, [r4, #84]	; 0x54
90002b4e:	f042 0201 	orr.w	r2, r2, #1
90002b52:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
90002b54:	2201      	movs	r2, #1
90002b56:	409a      	lsls	r2, r3
90002b58:	4232      	tst	r2, r6
90002b5a:	d008      	beq.n	90002b6e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
90002b5c:	6821      	ldr	r1, [r4, #0]
90002b5e:	6949      	ldr	r1, [r1, #20]
90002b60:	0609      	lsls	r1, r1, #24
90002b62:	d504      	bpl.n	90002b6e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
90002b64:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
90002b66:	6d62      	ldr	r2, [r4, #84]	; 0x54
90002b68:	f042 0202 	orr.w	r2, r2, #2
90002b6c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
90002b6e:	2204      	movs	r2, #4
90002b70:	409a      	lsls	r2, r3
90002b72:	4232      	tst	r2, r6
90002b74:	d008      	beq.n	90002b88 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
90002b76:	6821      	ldr	r1, [r4, #0]
90002b78:	6809      	ldr	r1, [r1, #0]
90002b7a:	0788      	lsls	r0, r1, #30
90002b7c:	d504      	bpl.n	90002b88 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
90002b7e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
90002b80:	6d62      	ldr	r2, [r4, #84]	; 0x54
90002b82:	f042 0204 	orr.w	r2, r2, #4
90002b86:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
90002b88:	2210      	movs	r2, #16
90002b8a:	409a      	lsls	r2, r3
90002b8c:	4232      	tst	r2, r6
90002b8e:	d010      	beq.n	90002bb2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
90002b90:	6823      	ldr	r3, [r4, #0]
90002b92:	6819      	ldr	r1, [r3, #0]
90002b94:	0709      	lsls	r1, r1, #28
90002b96:	d50c      	bpl.n	90002bb2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
90002b98:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
90002b9a:	681a      	ldr	r2, [r3, #0]
90002b9c:	0350      	lsls	r0, r2, #13
90002b9e:	d537      	bpl.n	90002c10 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
90002ba0:	681b      	ldr	r3, [r3, #0]
90002ba2:	0319      	lsls	r1, r3, #12
90002ba4:	d401      	bmi.n	90002baa <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
90002ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002ba8:	e000      	b.n	90002bac <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
90002baa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
90002bac:	b10b      	cbz	r3, 90002bb2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
90002bae:	4620      	mov	r0, r4
90002bb0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
90002bb2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90002bb4:	2220      	movs	r2, #32
90002bb6:	408a      	lsls	r2, r1
90002bb8:	4232      	tst	r2, r6
90002bba:	d03a      	beq.n	90002c32 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
90002bbc:	6823      	ldr	r3, [r4, #0]
90002bbe:	6818      	ldr	r0, [r3, #0]
90002bc0:	06c6      	lsls	r6, r0, #27
90002bc2:	d536      	bpl.n	90002c32 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
90002bc4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
90002bc6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
90002bca:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90002bcc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
90002bce:	d127      	bne.n	90002c20 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90002bd0:	f022 0216 	bic.w	r2, r2, #22
90002bd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
90002bd6:	695a      	ldr	r2, [r3, #20]
90002bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90002bdc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
90002bde:	6c22      	ldr	r2, [r4, #64]	; 0x40
90002be0:	b90a      	cbnz	r2, 90002be6 <HAL_DMA_IRQHandler+0xc6>
90002be2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
90002be4:	b11a      	cbz	r2, 90002bee <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
90002be6:	681a      	ldr	r2, [r3, #0]
90002be8:	f022 0208 	bic.w	r2, r2, #8
90002bec:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
90002bee:	233f      	movs	r3, #63	; 0x3f
90002bf0:	408b      	lsls	r3, r1
90002bf2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
90002bf4:	2300      	movs	r3, #0
90002bf6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
90002bfa:	2301      	movs	r3, #1
90002bfc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
90002c00:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
90002c02:	2b00      	cmp	r3, #0
90002c04:	d045      	beq.n	90002c92 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
90002c06:	4620      	mov	r0, r4
}
90002c08:	b003      	add	sp, #12
90002c0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
90002c0e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
90002c10:	681a      	ldr	r2, [r3, #0]
90002c12:	05d2      	lsls	r2, r2, #23
90002c14:	d4c7      	bmi.n	90002ba6 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
90002c16:	681a      	ldr	r2, [r3, #0]
90002c18:	f022 0208 	bic.w	r2, r2, #8
90002c1c:	601a      	str	r2, [r3, #0]
90002c1e:	e7c2      	b.n	90002ba6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
90002c20:	0350      	lsls	r0, r2, #13
90002c22:	d527      	bpl.n	90002c74 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
90002c24:	681b      	ldr	r3, [r3, #0]
90002c26:	0319      	lsls	r1, r3, #12
90002c28:	d431      	bmi.n	90002c8e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
90002c2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
90002c2c:	b10b      	cbz	r3, 90002c32 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
90002c2e:	4620      	mov	r0, r4
90002c30:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
90002c32:	6d63      	ldr	r3, [r4, #84]	; 0x54
90002c34:	b36b      	cbz	r3, 90002c92 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
90002c36:	6d63      	ldr	r3, [r4, #84]	; 0x54
90002c38:	07da      	lsls	r2, r3, #31
90002c3a:	d519      	bpl.n	90002c70 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
90002c3c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
90002c40:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
90002c42:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
90002c46:	2305      	movs	r3, #5
90002c48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
90002c4c:	6813      	ldr	r3, [r2, #0]
90002c4e:	f023 0301 	bic.w	r3, r3, #1
90002c52:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
90002c54:	9b01      	ldr	r3, [sp, #4]
90002c56:	3301      	adds	r3, #1
90002c58:	42bb      	cmp	r3, r7
90002c5a:	9301      	str	r3, [sp, #4]
90002c5c:	d802      	bhi.n	90002c64 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
90002c5e:	6813      	ldr	r3, [r2, #0]
90002c60:	07db      	lsls	r3, r3, #31
90002c62:	d4f7      	bmi.n	90002c54 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
90002c64:	2300      	movs	r3, #0
90002c66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
90002c6a:	2301      	movs	r3, #1
90002c6c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
90002c70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
90002c72:	e7c6      	b.n	90002c02 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
90002c74:	681a      	ldr	r2, [r3, #0]
90002c76:	f412 7280 	ands.w	r2, r2, #256	; 0x100
90002c7a:	d108      	bne.n	90002c8e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
90002c7c:	6819      	ldr	r1, [r3, #0]
90002c7e:	f021 0110 	bic.w	r1, r1, #16
90002c82:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
90002c84:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
90002c86:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
90002c8a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
90002c8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90002c90:	e7cc      	b.n	90002c2c <HAL_DMA_IRQHandler+0x10c>
}
90002c92:	b003      	add	sp, #12
90002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
90002c96:	bf00      	nop
90002c98:	200000b4 	.word	0x200000b4

90002c9c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
90002c9c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
90002c9e:	6804      	ldr	r4, [r0, #0]
90002ca0:	9d04      	ldr	r5, [sp, #16]
90002ca2:	6c66      	ldr	r6, [r4, #68]	; 0x44
90002ca4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
90002ca8:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
90002cac:	4333      	orrs	r3, r6
90002cae:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90002cb0:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90002cb2:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
90002cb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90002cb8:	d130      	bne.n	90002d1c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90002cba:	6885      	ldr	r5, [r0, #8]
90002cbc:	b11d      	cbz	r5, 90002cc6 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90002cbe:	2d01      	cmp	r5, #1
90002cc0:	d103      	bne.n	90002cca <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90002cc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90002cc6:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90002cc8:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90002cca:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90002ccc:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90002cd0:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90002cd4:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90002cd6:	d107      	bne.n	90002ce8 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
90002cd8:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
90002cda:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90002cdc:	02c9      	lsls	r1, r1, #11
90002cde:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
90002ce2:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
90002ce6:	e7ee      	b.n	90002cc6 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90002ce8:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90002cea:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90002cee:	d10a      	bne.n	90002d06 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
90002cf0:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
90002cf2:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90002cf4:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
90002cf6:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90002cf8:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
90002cfc:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
90002d00:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
90002d04:	e7df      	b.n	90002cc6 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
90002d06:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
90002d08:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90002d0a:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
90002d0c:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90002d0e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
90002d12:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
90002d16:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
90002d1a:	e7d4      	b.n	90002cc6 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90002d1c:	60e1      	str	r1, [r4, #12]
}
90002d1e:	e7d3      	b.n	90002cc8 <DMA2D_SetConfig+0x2c>

90002d20 <HAL_DMA2D_MspInit>:
}
90002d20:	4770      	bx	lr

90002d22 <HAL_DMA2D_Init>:
{
90002d22:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
90002d24:	4604      	mov	r4, r0
90002d26:	b330      	cbz	r0, 90002d76 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
90002d28:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
90002d2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90002d30:	b91b      	cbnz	r3, 90002d3a <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
90002d32:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
90002d36:	f7ff fff3 	bl	90002d20 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90002d3a:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002d3c:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90002d3e:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90002d40:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002d42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90002d46:	6813      	ldr	r3, [r2, #0]
90002d48:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
90002d4c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90002d4e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90002d50:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90002d52:	6b53      	ldr	r3, [r2, #52]	; 0x34
90002d54:	f023 0307 	bic.w	r3, r3, #7
90002d58:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90002d5a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90002d5c:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90002d5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
90002d60:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
90002d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
90002d68:	430b      	orrs	r3, r1
90002d6a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90002d6c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90002d6e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90002d70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
90002d74:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
90002d76:	2001      	movs	r0, #1
90002d78:	e7fc      	b.n	90002d74 <HAL_DMA2D_Init+0x52>

90002d7a <HAL_DMA2D_Start>:
{
90002d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
90002d7c:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
90002d80:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
90002d82:	2d01      	cmp	r5, #1
90002d84:	f04f 0502 	mov.w	r5, #2
90002d88:	d00f      	beq.n	90002daa <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002d8a:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
90002d8e:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90002d90:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
90002d92:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90002d96:	9500      	str	r5, [sp, #0]
90002d98:	f7ff ff80 	bl	90002c9c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
90002d9c:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
90002d9e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
90002da0:	6813      	ldr	r3, [r2, #0]
90002da2:	4333      	orrs	r3, r6
90002da4:	6013      	str	r3, [r2, #0]
}
90002da6:	b002      	add	sp, #8
90002da8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
90002daa:	4628      	mov	r0, r5
90002dac:	e7fb      	b.n	90002da6 <HAL_DMA2D_Start+0x2c>

90002dae <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
90002dae:	2300      	movs	r3, #0
{
90002db0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
90002db2:	9301      	str	r3, [sp, #4]
{
90002db4:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90002db6:	6803      	ldr	r3, [r0, #0]
{
90002db8:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90002dba:	681b      	ldr	r3, [r3, #0]
90002dbc:	07db      	lsls	r3, r3, #31
90002dbe:	d418      	bmi.n	90002df2 <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90002dc0:	6822      	ldr	r2, [r4, #0]
90002dc2:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90002dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
90002dc6:	4313      	orrs	r3, r2
  if (layer_start != 0U)
90002dc8:	069e      	lsls	r6, r3, #26
90002dca:	d506      	bpl.n	90002dda <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
90002dcc:	f7ff fcea 	bl	900027a4 <HAL_GetTick>
90002dd0:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90002dd2:	6823      	ldr	r3, [r4, #0]
90002dd4:	685a      	ldr	r2, [r3, #4]
90002dd6:	06d2      	lsls	r2, r2, #27
90002dd8:	d53e      	bpl.n	90002e58 <HAL_DMA2D_PollForTransfer+0xaa>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
90002dda:	6823      	ldr	r3, [r4, #0]
90002ddc:	2212      	movs	r2, #18
  return HAL_OK;
90002dde:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
90002de0:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
90002de2:	2301      	movs	r3, #1
90002de4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
90002de8:	2300      	movs	r3, #0
90002dea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
90002dee:	b002      	add	sp, #8
90002df0:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
90002df2:	f7ff fcd7 	bl	900027a4 <HAL_GetTick>
90002df6:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90002df8:	6823      	ldr	r3, [r4, #0]
90002dfa:	685a      	ldr	r2, [r3, #4]
90002dfc:	0792      	lsls	r2, r2, #30
90002dfe:	d4df      	bmi.n	90002dc0 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
90002e00:	685a      	ldr	r2, [r3, #4]
90002e02:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
90002e04:	9a01      	ldr	r2, [sp, #4]
90002e06:	f012 0f21 	tst.w	r2, #33	; 0x21
90002e0a:	d014      	beq.n	90002e36 <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90002e0c:	9a01      	ldr	r2, [sp, #4]
90002e0e:	0695      	lsls	r5, r2, #26
90002e10:	d503      	bpl.n	90002e1a <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90002e12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90002e14:	f042 0202 	orr.w	r2, r2, #2
90002e18:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90002e1a:	9a01      	ldr	r2, [sp, #4]
90002e1c:	07d0      	lsls	r0, r2, #31
90002e1e:	d503      	bpl.n	90002e28 <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90002e20:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90002e22:	f042 0201 	orr.w	r2, r2, #1
90002e26:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90002e28:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90002e2a:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
90002e2c:	2304      	movs	r3, #4
        return HAL_ERROR;
90002e2e:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
90002e30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        return HAL_ERROR;
90002e34:	e7d8      	b.n	90002de8 <HAL_DMA2D_PollForTransfer+0x3a>
      if(Timeout != HAL_MAX_DELAY)
90002e36:	1c69      	adds	r1, r5, #1
90002e38:	d0df      	beq.n	90002dfa <HAL_DMA2D_PollForTransfer+0x4c>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
90002e3a:	f7ff fcb3 	bl	900027a4 <HAL_GetTick>
90002e3e:	1b80      	subs	r0, r0, r6
90002e40:	42a8      	cmp	r0, r5
90002e42:	d801      	bhi.n	90002e48 <HAL_DMA2D_PollForTransfer+0x9a>
90002e44:	2d00      	cmp	r5, #0
90002e46:	d1d7      	bne.n	90002df8 <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90002e48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
90002e4a:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90002e4c:	f043 0320 	orr.w	r3, r3, #32
90002e50:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
90002e52:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
90002e56:	e7c7      	b.n	90002de8 <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
90002e58:	685a      	ldr	r2, [r3, #4]
90002e5a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
90002e5c:	9a01      	ldr	r2, [sp, #4]
90002e5e:	f012 0f29 	tst.w	r2, #41	; 0x29
90002e62:	d016      	beq.n	90002e92 <HAL_DMA2D_PollForTransfer+0xe4>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90002e64:	9a01      	ldr	r2, [sp, #4]
90002e66:	0716      	lsls	r6, r2, #28
90002e68:	d503      	bpl.n	90002e72 <HAL_DMA2D_PollForTransfer+0xc4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90002e6a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90002e6c:	f042 0204 	orr.w	r2, r2, #4
90002e70:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90002e72:	9a01      	ldr	r2, [sp, #4]
90002e74:	0695      	lsls	r5, r2, #26
90002e76:	d503      	bpl.n	90002e80 <HAL_DMA2D_PollForTransfer+0xd2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90002e78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90002e7a:	f042 0202 	orr.w	r2, r2, #2
90002e7e:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90002e80:	9a01      	ldr	r2, [sp, #4]
90002e82:	07d0      	lsls	r0, r2, #31
90002e84:	d503      	bpl.n	90002e8e <HAL_DMA2D_PollForTransfer+0xe0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90002e86:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90002e88:	f042 0201 	orr.w	r2, r2, #1
90002e8c:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90002e8e:	2229      	movs	r2, #41	; 0x29
90002e90:	e7cb      	b.n	90002e2a <HAL_DMA2D_PollForTransfer+0x7c>
      if(Timeout != HAL_MAX_DELAY)
90002e92:	1c69      	adds	r1, r5, #1
90002e94:	d09e      	beq.n	90002dd4 <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
90002e96:	f7ff fc85 	bl	900027a4 <HAL_GetTick>
90002e9a:	1b80      	subs	r0, r0, r6
90002e9c:	42a8      	cmp	r0, r5
90002e9e:	d8d3      	bhi.n	90002e48 <HAL_DMA2D_PollForTransfer+0x9a>
90002ea0:	2d00      	cmp	r5, #0
90002ea2:	d196      	bne.n	90002dd2 <HAL_DMA2D_PollForTransfer+0x24>
90002ea4:	e7d0      	b.n	90002e48 <HAL_DMA2D_PollForTransfer+0x9a>
	...

90002ea8 <HAL_DMA2D_ConfigLayer>:
{
90002ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
90002eaa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90002eae:	2b01      	cmp	r3, #1
90002eb0:	f04f 0302 	mov.w	r3, #2
90002eb4:	d02b      	beq.n	90002f0e <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002eb6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
90002eba:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
90002ebc:	eb00 1301 	add.w	r3, r0, r1, lsl #4
90002ec0:	4f1c      	ldr	r7, [pc, #112]	; (90002f34 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
90002ec2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
90002ec6:	010e      	lsls	r6, r1, #4
90002ec8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
90002eca:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
90002ece:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002ed2:	3c09      	subs	r4, #9
90002ed4:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90002ed6:	bf96      	itet	ls
90002ed8:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90002edc:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90002ee0:	431a      	orrls	r2, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90002ee2:	6803      	ldr	r3, [r0, #0]
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
90002ee4:	b9a9      	cbnz	r1, 90002f12 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90002ee6:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002ee8:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90002eea:	ea01 0107 	and.w	r1, r1, r7
90002eee:	ea42 0201 	orr.w	r2, r2, r1
90002ef2:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90002ef4:	6982      	ldr	r2, [r0, #24]
90002ef6:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002ef8:	d803      	bhi.n	90002f02 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
90002efa:	6a42      	ldr	r2, [r0, #36]	; 0x24
90002efc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90002f00:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
90002f02:	2301      	movs	r3, #1
90002f04:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
90002f08:	2300      	movs	r3, #0
90002f0a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
90002f0e:	4618      	mov	r0, r3
}
90002f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90002f12:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002f14:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90002f16:	ea01 0107 	and.w	r1, r1, r7
90002f1a:	ea42 0201 	orr.w	r2, r2, r1
90002f1e:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90002f20:	eb00 0206 	add.w	r2, r0, r6
90002f24:	6992      	ldr	r2, [r2, #24]
90002f26:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002f28:	d8eb      	bhi.n	90002f02 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
90002f2a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
90002f2e:	621d      	str	r5, [r3, #32]
90002f30:	e7e7      	b.n	90002f02 <HAL_DMA2D_ConfigLayer+0x5a>
90002f32:	bf00      	nop
90002f34:	00fcfff0 	.word	0x00fcfff0

90002f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90002f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90002f3c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002f3e:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 900030f4 <HAL_GPIO_Init+0x1bc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
90002f42:	4a6a      	ldr	r2, [pc, #424]	; (900030ec <HAL_GPIO_Init+0x1b4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90002f44:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 900030f8 <HAL_GPIO_Init+0x1c0>
    ioposition = ((uint32_t)0x01) << position;
90002f48:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90002f4a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
90002f4c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90002f4e:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
90002f52:	43ac      	bics	r4, r5
90002f54:	f040 80b1 	bne.w	900030ba <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90002f58:	684c      	ldr	r4, [r1, #4]
90002f5a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002f5e:	2503      	movs	r5, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90002f60:	f024 0c10 	bic.w	ip, r4, #16
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002f64:	fa05 f50e 	lsl.w	r5, r5, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90002f68:	f10c 37ff 	add.w	r7, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002f6c:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90002f6e:	2f01      	cmp	r7, #1
90002f70:	d810      	bhi.n	90002f94 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
90002f72:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002f74:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
90002f78:	68cf      	ldr	r7, [r1, #12]
90002f7a:	fa07 f70e 	lsl.w	r7, r7, lr
90002f7e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
90002f82:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
90002f84:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
90002f86:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
90002f8a:	0927      	lsrs	r7, r4, #4
90002f8c:	409f      	lsls	r7, r3
90002f8e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
90002f92:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
90002f94:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90002f96:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
90002f9a:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
90002f9e:	688f      	ldr	r7, [r1, #8]
90002fa0:	fa07 f70e 	lsl.w	r7, r7, lr
90002fa4:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
90002fa8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90002faa:	d116      	bne.n	90002fda <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
90002fac:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90002fb0:	f003 0b07 	and.w	fp, r3, #7
90002fb4:	f04f 0c0f 	mov.w	ip, #15
90002fb8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
90002fbc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
90002fc0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90002fc4:	fa0c fc0b 	lsl.w	ip, ip, fp
90002fc8:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
90002fcc:	690f      	ldr	r7, [r1, #16]
90002fce:	fa07 f70b 	lsl.w	r7, r7, fp
90002fd2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
90002fd6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
90002fda:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
90002fdc:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90002fde:	f004 0503 	and.w	r5, r4, #3
90002fe2:	fa05 f50e 	lsl.w	r5, r5, lr
90002fe6:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
90002fe8:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
90002fea:	00e5      	lsls	r5, r4, #3
90002fec:	d565      	bpl.n	900030ba <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002fee:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
90002ff2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90002ff6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002ffa:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
90002ffe:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90003002:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003006:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
9000300a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
9000300e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
90003012:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
90003016:	9501      	str	r5, [sp, #4]
90003018:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
9000301a:	250f      	movs	r5, #15
        temp = SYSCFG->EXTICR[position >> 2];
9000301c:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90003020:	fa05 f50c 	lsl.w	r5, r5, ip
90003024:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90003028:	4d31      	ldr	r5, [pc, #196]	; (900030f0 <HAL_GPIO_Init+0x1b8>)
9000302a:	42a8      	cmp	r0, r5
9000302c:	d04c      	beq.n	900030c8 <HAL_GPIO_Init+0x190>
9000302e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90003032:	42a8      	cmp	r0, r5
90003034:	d04a      	beq.n	900030cc <HAL_GPIO_Init+0x194>
90003036:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000303a:	42a8      	cmp	r0, r5
9000303c:	d048      	beq.n	900030d0 <HAL_GPIO_Init+0x198>
9000303e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90003042:	42a8      	cmp	r0, r5
90003044:	d046      	beq.n	900030d4 <HAL_GPIO_Init+0x19c>
90003046:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000304a:	42a8      	cmp	r0, r5
9000304c:	d044      	beq.n	900030d8 <HAL_GPIO_Init+0x1a0>
9000304e:	4548      	cmp	r0, r9
90003050:	d044      	beq.n	900030dc <HAL_GPIO_Init+0x1a4>
90003052:	f505 6500 	add.w	r5, r5, #2048	; 0x800
90003056:	42a8      	cmp	r0, r5
90003058:	d042      	beq.n	900030e0 <HAL_GPIO_Init+0x1a8>
9000305a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000305e:	42a8      	cmp	r0, r5
90003060:	d040      	beq.n	900030e4 <HAL_GPIO_Init+0x1ac>
90003062:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90003066:	42a8      	cmp	r0, r5
90003068:	d03e      	beq.n	900030e8 <HAL_GPIO_Init+0x1b0>
9000306a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000306e:	42a8      	cmp	r0, r5
90003070:	bf0c      	ite	eq
90003072:	2509      	moveq	r5, #9
90003074:	250a      	movne	r5, #10
90003076:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
9000307a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
9000307e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
90003082:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
90003084:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
90003088:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
9000308a:	bf0c      	ite	eq
9000308c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
9000308e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
90003090:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
90003094:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
90003096:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
90003098:	bf0c      	ite	eq
9000309a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
9000309c:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
9000309e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
900030a2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
900030a4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
900030a6:	bf0c      	ite	eq
900030a8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
900030aa:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
900030ac:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
900030ae:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
900030b0:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
900030b2:	bf54      	ite	pl
900030b4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
900030b6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
900030b8:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
900030ba:	3301      	adds	r3, #1
900030bc:	2b10      	cmp	r3, #16
900030be:	f47f af43 	bne.w	90002f48 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
900030c2:	b003      	add	sp, #12
900030c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
900030c8:	2500      	movs	r5, #0
900030ca:	e7d4      	b.n	90003076 <HAL_GPIO_Init+0x13e>
900030cc:	2501      	movs	r5, #1
900030ce:	e7d2      	b.n	90003076 <HAL_GPIO_Init+0x13e>
900030d0:	2502      	movs	r5, #2
900030d2:	e7d0      	b.n	90003076 <HAL_GPIO_Init+0x13e>
900030d4:	2503      	movs	r5, #3
900030d6:	e7ce      	b.n	90003076 <HAL_GPIO_Init+0x13e>
900030d8:	2504      	movs	r5, #4
900030da:	e7cc      	b.n	90003076 <HAL_GPIO_Init+0x13e>
900030dc:	2505      	movs	r5, #5
900030de:	e7ca      	b.n	90003076 <HAL_GPIO_Init+0x13e>
900030e0:	2506      	movs	r5, #6
900030e2:	e7c8      	b.n	90003076 <HAL_GPIO_Init+0x13e>
900030e4:	2507      	movs	r5, #7
900030e6:	e7c6      	b.n	90003076 <HAL_GPIO_Init+0x13e>
900030e8:	2508      	movs	r5, #8
900030ea:	e7c4      	b.n	90003076 <HAL_GPIO_Init+0x13e>
900030ec:	40013c00 	.word	0x40013c00
900030f0:	40020000 	.word	0x40020000
900030f4:	40023800 	.word	0x40023800
900030f8:	40021400 	.word	0x40021400

900030fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
900030fc:	b10a      	cbz	r2, 90003102 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
900030fe:	6181      	str	r1, [r0, #24]
  }
}
90003100:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90003102:	0409      	lsls	r1, r1, #16
90003104:	e7fb      	b.n	900030fe <HAL_GPIO_WritePin+0x2>

90003106 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
90003106:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000310a:	4605      	mov	r5, r0
9000310c:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
9000310e:	f895 42b8 	ldrb.w	r4, [r5, #696]	; 0x2b8
{
90003112:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
90003116:	2c01      	cmp	r4, #1
{
90003118:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
9000311c:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
90003120:	d025      	beq.n	9000316e <HAL_HCD_HC_Init+0x68>
90003122:	2401      	movs	r4, #1
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
90003124:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
90003126:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
90003128:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  __HAL_LOCK(hhcd);
9000312c:	f885 42b8 	strb.w	r4, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
90003130:	2428      	movs	r4, #40	; 0x28
90003132:	fb04 5401 	mla	r4, r4, r1, r5
90003136:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
9000313a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
9000313e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
90003142:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
90003146:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
9000314a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
9000314e:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
90003152:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
90003156:	6828      	ldr	r0, [r5, #0]
90003158:	f8cd e000 	str.w	lr, [sp]
9000315c:	e9cd 8901 	strd	r8, r9, [sp, #4]
90003160:	f002 fb6a 	bl	90005838 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
90003164:	f885 72b8 	strb.w	r7, [r5, #696]	; 0x2b8

  return status;
}
90003168:	b005      	add	sp, #20
9000316a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
9000316e:	2002      	movs	r0, #2
90003170:	e7fa      	b.n	90003168 <HAL_HCD_HC_Init+0x62>

90003172 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
90003172:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
90003174:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
90003178:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
9000317a:	2b01      	cmp	r3, #1
9000317c:	d009      	beq.n	90003192 <HAL_HCD_HC_Halt+0x20>
9000317e:	2301      	movs	r3, #1
90003180:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003184:	6800      	ldr	r0, [r0, #0]
90003186:	f002 fbd0 	bl	9000592a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
9000318a:	2000      	movs	r0, #0
9000318c:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
90003190:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
90003192:	2002      	movs	r0, #2
90003194:	e7fc      	b.n	90003190 <HAL_HCD_HC_Halt+0x1e>

90003196 <HAL_HCD_Init>:
{
90003196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
9000319a:	4606      	mov	r6, r0
{
9000319c:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
9000319e:	2800      	cmp	r0, #0
900031a0:	d043      	beq.n	9000322a <HAL_HCD_Init+0x94>
  if (hhcd->State == HAL_HCD_STATE_RESET)
900031a2:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
900031a6:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
900031a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900031ac:	b91b      	cbnz	r3, 900031b6 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
900031ae:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
900031b2:	f007 f8e3 	bl	9000a37c <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
900031b6:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
900031b8:	466d      	mov	r5, sp
900031ba:	f106 0804 	add.w	r8, r6, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
900031be:	4637      	mov	r7, r6
  hhcd->State = HAL_HCD_STATE_BUSY;
900031c0:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
900031c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
900031c6:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
900031c8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
900031cc:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
900031d0:	bf08      	it	eq
900031d2:	6133      	streq	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
900031d4:	f002 f9f5 	bl	900055c2 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
900031d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
900031da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
900031dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
900031de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
900031e0:	e894 0003 	ldmia.w	r4, {r0, r1}
900031e4:	e885 0003 	stmia.w	r5, {r0, r1}
900031e8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
900031ec:	6830      	ldr	r0, [r6, #0]
900031ee:	f002 f9a7 	bl	90005540 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
900031f2:	f857 0b10 	ldr.w	r0, [r7], #16
900031f6:	2101      	movs	r1, #1
900031f8:	f002 f9e9 	bl	900055ce <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
900031fc:	46ec      	mov	ip, sp
900031fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90003200:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90003204:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90003206:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9000320a:	e894 0003 	ldmia.w	r4, {r0, r1}
9000320e:	e885 0003 	stmia.w	r5, {r0, r1}
90003212:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
90003216:	6830      	ldr	r0, [r6, #0]
90003218:	f002 fa96 	bl	90005748 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
9000321c:	2301      	movs	r3, #1
  return HAL_OK;
9000321e:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
90003220:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
}
90003224:	b00a      	add	sp, #40	; 0x28
90003226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
9000322a:	2001      	movs	r0, #1
9000322c:	e7fa      	b.n	90003224 <HAL_HCD_Init+0x8e>
	...

90003230 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
90003230:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
90003232:	2628      	movs	r6, #40	; 0x28
{
90003234:	f89d 7010 	ldrb.w	r7, [sp, #16]
90003238:	9d05      	ldr	r5, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
9000323a:	fb06 0601 	mla	r6, r6, r1, r0
{
9000323e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
90003242:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
90003246:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
9000324a:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f

  if (token == 0U)
9000324e:	b97f      	cbnz	r7, 90003270 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
90003250:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
90003252:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
90003254:	f886 c03d 	strb.w	ip, [r6, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
90003258:	f886 7042 	strb.w	r7, [r6, #66]	; 0x42
  switch (ep_type)
9000325c:	d03c      	beq.n	900032d8 <HAL_HCD_HC_SubmitRequest+0xa8>
9000325e:	42bb      	cmp	r3, r7
90003260:	d03a      	beq.n	900032d8 <HAL_HCD_HC_SubmitRequest+0xa8>
90003262:	2b01      	cmp	r3, #1
90003264:	d11f      	bne.n	900032a6 <HAL_HCD_HC_SubmitRequest+0x76>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
90003266:	2328      	movs	r3, #40	; 0x28
90003268:	2200      	movs	r2, #0
9000326a:	fb03 0301 	mla	r3, r3, r1, r0
9000326e:	e030      	b.n	900032d2 <HAL_HCD_HC_SubmitRequest+0xa2>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90003270:	f04f 0c02 	mov.w	ip, #2
90003274:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch (ep_type)
90003278:	2b03      	cmp	r3, #3
9000327a:	d814      	bhi.n	900032a6 <HAL_HCD_HC_SubmitRequest+0x76>
9000327c:	a601      	add	r6, pc, #4	; (adr r6, 90003284 <HAL_HCD_HC_SubmitRequest+0x54>)
9000327e:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
90003282:	bf00      	nop
90003284:	90003295 	.word	0x90003295
90003288:	90003267 	.word	0x90003267
9000328c:	900032d9 	.word	0x900032d9
90003290:	900032d9 	.word	0x900032d9
      if ((token == 1U) && (direction == 0U)) /*send data */
90003294:	2f01      	cmp	r7, #1
90003296:	d106      	bne.n	900032a6 <HAL_HCD_HC_SubmitRequest+0x76>
90003298:	b92a      	cbnz	r2, 900032a6 <HAL_HCD_HC_SubmitRequest+0x76>
        if (length == 0U)
9000329a:	2328      	movs	r3, #40	; 0x28
          hhcd->hc[ch_num].toggle_out = 1U;
9000329c:	fb03 0301 	mla	r3, r3, r1, r0
        if (length == 0U)
900032a0:	b99c      	cbnz	r4, 900032ca <HAL_HCD_HC_SubmitRequest+0x9a>
          hhcd->hc[ch_num].toggle_out = 1U;
900032a2:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
900032a6:	2228      	movs	r2, #40	; 0x28
900032a8:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
900032ac:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900032b0:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
900032b2:	e9c3 5411 	strd	r5, r4, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_count = 0U;
900032b6:	2400      	movs	r4, #0
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900032b8:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
900032ba:	f8a3 405c 	strh.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
900032be:	64dc      	str	r4, [r3, #76]	; 0x4c
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900032c0:	7c02      	ldrb	r2, [r0, #16]
900032c2:	6800      	ldr	r0, [r0, #0]
}
900032c4:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900032c6:	f002 bb95 	b.w	900059f4 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
900032ca:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
900032ce:	2e00      	cmp	r6, #0
900032d0:	d1e9      	bne.n	900032a6 <HAL_HCD_HC_SubmitRequest+0x76>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
900032d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
900032d6:	e7e6      	b.n	900032a6 <HAL_HCD_HC_SubmitRequest+0x76>
      if (direction == 0U)
900032d8:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
900032da:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
900032de:	b92a      	cbnz	r2, 900032ec <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
900032e0:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
900032e4:	2e00      	cmp	r6, #0
900032e6:	d0f4      	beq.n	900032d2 <HAL_HCD_HC_SubmitRequest+0xa2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
900032e8:	2202      	movs	r2, #2
900032ea:	e7f2      	b.n	900032d2 <HAL_HCD_HC_SubmitRequest+0xa2>
        if (hhcd->hc[ch_num].toggle_in == 0U)
900032ec:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
900032f0:	2a00      	cmp	r2, #0
900032f2:	d1f9      	bne.n	900032e8 <HAL_HCD_HC_SubmitRequest+0xb8>
900032f4:	e7ed      	b.n	900032d2 <HAL_HCD_HC_SubmitRequest+0xa2>
900032f6:	bf00      	nop

900032f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
900032f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900032fc:	6806      	ldr	r6, [r0, #0]
{
900032fe:	b085      	sub	sp, #20
90003300:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90003302:	4630      	mov	r0, r6
90003304:	f002 f9c1 	bl	9000568a <USB_GetMode>
90003308:	2801      	cmp	r0, #1
9000330a:	f040 80e1 	bne.w	900034d0 <HAL_HCD_IRQHandler+0x1d8>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
9000330e:	6828      	ldr	r0, [r5, #0]
90003310:	f002 f9b7 	bl	90005682 <USB_ReadInterrupts>
90003314:	2800      	cmp	r0, #0
90003316:	f000 80db 	beq.w	900034d0 <HAL_HCD_IRQHandler+0x1d8>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
9000331a:	6828      	ldr	r0, [r5, #0]
9000331c:	f002 f9b1 	bl	90005682 <USB_ReadInterrupts>
90003320:	0284      	lsls	r4, r0, #10
90003322:	d503      	bpl.n	9000332c <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90003324:	682b      	ldr	r3, [r5, #0]
90003326:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
9000332a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
9000332c:	6828      	ldr	r0, [r5, #0]
9000332e:	f002 f9a8 	bl	90005682 <USB_ReadInterrupts>
90003332:	02c0      	lsls	r0, r0, #11
90003334:	d503      	bpl.n	9000333e <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90003336:	682b      	ldr	r3, [r5, #0]
90003338:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
9000333c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
9000333e:	6828      	ldr	r0, [r5, #0]
90003340:	f002 f99f 	bl	90005682 <USB_ReadInterrupts>
90003344:	0141      	lsls	r1, r0, #5
90003346:	d503      	bpl.n	90003350 <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90003348:	682b      	ldr	r3, [r5, #0]
9000334a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
9000334e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90003350:	6828      	ldr	r0, [r5, #0]
90003352:	f002 f996 	bl	90005682 <USB_ReadInterrupts>
90003356:	0782      	lsls	r2, r0, #30
90003358:	d502      	bpl.n	90003360 <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
9000335a:	682b      	ldr	r3, [r5, #0]
9000335c:	2202      	movs	r2, #2
9000335e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90003360:	6828      	ldr	r0, [r5, #0]
90003362:	f002 f98e 	bl	90005682 <USB_ReadInterrupts>
90003366:	0083      	lsls	r3, r0, #2
90003368:	d50e      	bpl.n	90003388 <HAL_HCD_IRQHandler+0x90>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
9000336a:	682b      	ldr	r3, [r5, #0]
9000336c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
90003370:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90003372:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
90003376:	07df      	lsls	r7, r3, #31
90003378:	d406      	bmi.n	90003388 <HAL_HCD_IRQHandler+0x90>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
9000337a:	4628      	mov	r0, r5
9000337c:	f007 f8e2 	bl	9000a544 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90003380:	2101      	movs	r1, #1
90003382:	6828      	ldr	r0, [r5, #0]
90003384:	f002 f985 	bl	90005692 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90003388:	6828      	ldr	r0, [r5, #0]
9000338a:	f002 f97a 	bl	90005682 <USB_ReadInterrupts>
9000338e:	01c4      	lsls	r4, r0, #7
90003390:	d53c      	bpl.n	9000340c <HAL_HCD_IRQHandler+0x114>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
90003392:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90003394:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
90003398:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
9000339a:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
9000339e:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
900033a0:	9b03      	ldr	r3, [sp, #12]
900033a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
900033a6:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
900033a8:	9b02      	ldr	r3, [sp, #8]
900033aa:	0798      	lsls	r0, r3, #30
900033ac:	d509      	bpl.n	900033c2 <HAL_HCD_IRQHandler+0xca>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
900033ae:	9b02      	ldr	r3, [sp, #8]
900033b0:	07d9      	lsls	r1, r3, #31
900033b2:	d502      	bpl.n	900033ba <HAL_HCD_IRQHandler+0xc2>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
900033b4:	4628      	mov	r0, r5
900033b6:	f007 f8c1 	bl	9000a53c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
900033ba:	9b03      	ldr	r3, [sp, #12]
900033bc:	f043 0302 	orr.w	r3, r3, #2
900033c0:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
900033c2:	9b02      	ldr	r3, [sp, #8]
900033c4:	071a      	lsls	r2, r3, #28
900033c6:	d517      	bpl.n	900033f8 <HAL_HCD_IRQHandler+0x100>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
900033c8:	9b03      	ldr	r3, [sp, #12]
900033ca:	f043 0308 	orr.w	r3, r3, #8
900033ce:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
900033d0:	9b02      	ldr	r3, [sp, #8]
900033d2:	075b      	lsls	r3, r3, #29
900033d4:	f140 8087 	bpl.w	900034e6 <HAL_HCD_IRQHandler+0x1ee>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
900033d8:	69a9      	ldr	r1, [r5, #24]
900033da:	2902      	cmp	r1, #2
900033dc:	d17b      	bne.n	900034d6 <HAL_HCD_IRQHandler+0x1de>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
900033de:	9b02      	ldr	r3, [sp, #8]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
900033e0:	6828      	ldr	r0, [r5, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
900033e2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
900033e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
900033ea:	bf18      	it	ne
900033ec:	2101      	movne	r1, #1
900033ee:	f002 f950 	bl	90005692 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
900033f2:	4628      	mov	r0, r5
900033f4:	f007 f8aa 	bl	9000a54c <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
900033f8:	9b02      	ldr	r3, [sp, #8]
900033fa:	069f      	lsls	r7, r3, #26
900033fc:	d503      	bpl.n	90003406 <HAL_HCD_IRQHandler+0x10e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
900033fe:	9b03      	ldr	r3, [sp, #12]
90003400:	f043 0320 	orr.w	r3, r3, #32
90003404:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90003406:	9b03      	ldr	r3, [sp, #12]
90003408:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
9000340c:	6828      	ldr	r0, [r5, #0]
9000340e:	f002 f938 	bl	90005682 <USB_ReadInterrupts>
90003412:	0704      	lsls	r4, r0, #28
90003414:	d505      	bpl.n	90003422 <HAL_HCD_IRQHandler+0x12a>
      HAL_HCD_SOF_Callback(hhcd);
90003416:	4628      	mov	r0, r5
90003418:	f007 f88c 	bl	9000a534 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
9000341c:	682b      	ldr	r3, [r5, #0]
9000341e:	2208      	movs	r2, #8
90003420:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
90003422:	6828      	ldr	r0, [r5, #0]
90003424:	f002 f92d 	bl	90005682 <USB_ReadInterrupts>
90003428:	0180      	lsls	r0, r0, #6
9000342a:	d512      	bpl.n	90003452 <HAL_HCD_IRQHandler+0x15a>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
9000342c:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
9000342e:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90003432:	f002 fa75 	bl	90005920 <USB_HC_ReadInterrupt>
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003436:	2728      	movs	r7, #40	; 0x28
90003438:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
9000343c:	f04f 0902 	mov.w	r9, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90003440:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003442:	9300      	str	r3, [sp, #0]
90003444:	68ab      	ldr	r3, [r5, #8]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003446:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003448:	4553      	cmp	r3, sl
9000344a:	d850      	bhi.n	900034ee <HAL_HCD_IRQHandler+0x1f6>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
9000344c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003450:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
90003452:	6828      	ldr	r0, [r5, #0]
90003454:	f002 f915 	bl	90005682 <USB_ReadInterrupts>
90003458:	06c3      	lsls	r3, r0, #27
9000345a:	d539      	bpl.n	900034d0 <HAL_HCD_IRQHandler+0x1d8>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
9000345c:	682e      	ldr	r6, [r5, #0]
9000345e:	69b3      	ldr	r3, [r6, #24]
90003460:	f023 0310 	bic.w	r3, r3, #16
90003464:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
90003466:	6a37      	ldr	r7, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90003468:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
9000346c:	2b02      	cmp	r3, #2
9000346e:	d12a      	bne.n	900034c6 <HAL_HCD_IRQHandler+0x1ce>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
90003470:	f3c7 180a 	ubfx	r8, r7, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
90003474:	f1b8 0f00 	cmp.w	r8, #0
90003478:	d025      	beq.n	900034c6 <HAL_HCD_IRQHandler+0x1ce>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
9000347a:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
9000347e:	2428      	movs	r4, #40	; 0x28
90003480:	fb04 5407 	mla	r4, r4, r7, r5
90003484:	6c61      	ldr	r1, [r4, #68]	; 0x44
90003486:	b1f1      	cbz	r1, 900034c6 <HAL_HCD_IRQHandler+0x1ce>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
90003488:	4642      	mov	r2, r8
9000348a:	4630      	mov	r0, r6
9000348c:	f002 f8eb 	bl	90005666 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
90003490:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
90003492:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
90003496:	017a      	lsls	r2, r7, #5
        hhcd->hc[ch_num].xfer_buff += pktcnt;
90003498:	4443      	add	r3, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
9000349a:	eb06 1747 	add.w	r7, r6, r7, lsl #5
        hhcd->hc[ch_num].xfer_buff += pktcnt;
9000349e:	6463      	str	r3, [r4, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
900034a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
900034a2:	6939      	ldr	r1, [r7, #16]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
900034a4:	4443      	add	r3, r8
900034a6:	64e3      	str	r3, [r4, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
900034a8:	4bb0      	ldr	r3, [pc, #704]	; (9000376c <HAL_HCD_IRQHandler+0x474>)
900034aa:	400b      	ands	r3, r1
900034ac:	b15b      	cbz	r3, 900034c6 <HAL_HCD_IRQHandler+0x1ce>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
900034ae:	58b3      	ldr	r3, [r6, r2]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900034b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900034b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
900034b8:	50b3      	str	r3, [r6, r2]
          hhcd->hc[ch_num].toggle_in ^= 1U;
900034ba:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
900034be:	f083 0301 	eor.w	r3, r3, #1
900034c2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900034c6:	682a      	ldr	r2, [r5, #0]
900034c8:	6993      	ldr	r3, [r2, #24]
900034ca:	f043 0310 	orr.w	r3, r3, #16
900034ce:	6193      	str	r3, [r2, #24]
}
900034d0:	b005      	add	sp, #20
900034d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
900034d6:	68eb      	ldr	r3, [r5, #12]
900034d8:	2b01      	cmp	r3, #1
900034da:	d18a      	bne.n	900033f2 <HAL_HCD_IRQHandler+0xfa>
          USBx_HOST->HFIR = 60000U;
900034dc:	f64e 2260 	movw	r2, #60000	; 0xea60
900034e0:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
900034e4:	e785      	b.n	900033f2 <HAL_HCD_IRQHandler+0xfa>
      HAL_HCD_PortDisabled_Callback(hhcd);
900034e6:	4628      	mov	r0, r5
900034e8:	f007 f834 	bl	9000a554 <HAL_HCD_PortDisabled_Callback>
900034ec:	e784      	b.n	900033f8 <HAL_HCD_IRQHandler+0x100>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
900034ee:	f00a 030f 	and.w	r3, sl, #15
900034f2:	9a01      	ldr	r2, [sp, #4]
900034f4:	fa22 f303 	lsr.w	r3, r2, r3
900034f8:	07d9      	lsls	r1, r3, #31
900034fa:	f140 8093 	bpl.w	90003624 <HAL_HCD_IRQHandler+0x32c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
900034fe:	9b00      	ldr	r3, [sp, #0]
90003500:	fa5f f68a 	uxtb.w	r6, sl
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
90003504:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90003508:	6819      	ldr	r1, [r3, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
9000350a:	ea4f 1b46 	mov.w	fp, r6, lsl #5
9000350e:	eb08 1446 	add.w	r4, r8, r6, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90003512:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
90003516:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90003518:	f000 811d 	beq.w	90003756 <HAL_HCD_IRQHandler+0x45e>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
9000351c:	074a      	lsls	r2, r1, #29
9000351e:	d513      	bpl.n	90003548 <HAL_HCD_IRQHandler+0x250>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
90003520:	2104      	movs	r1, #4
90003522:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003524:	68e1      	ldr	r1, [r4, #12]
90003526:	f041 0102 	orr.w	r1, r1, #2
9000352a:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
9000352c:	68a1      	ldr	r1, [r4, #8]
9000352e:	0588      	lsls	r0, r1, #22
90003530:	d54a      	bpl.n	900035c8 <HAL_HCD_IRQHandler+0x2d0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003532:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003534:	4631      	mov	r1, r6
90003536:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003538:	f043 0302 	orr.w	r3, r3, #2
9000353c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000353e:	f002 f9f4 	bl	9000592a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
90003542:	f44f 7300 	mov.w	r3, #512	; 0x200
90003546:	e0f9      	b.n	9000373c <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
90003548:	68a1      	ldr	r1, [r4, #8]
9000354a:	05cb      	lsls	r3, r1, #23
9000354c:	d510      	bpl.n	90003570 <HAL_HCD_IRQHandler+0x278>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
9000354e:	f44f 7180 	mov.w	r1, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
90003552:	f04f 0c07 	mov.w	ip, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
90003556:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
90003558:	fb07 5106 	mla	r1, r7, r6, r5
9000355c:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003560:	68e1      	ldr	r1, [r4, #12]
90003562:	f041 0102 	orr.w	r1, r1, #2
90003566:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003568:	4631      	mov	r1, r6
9000356a:	f002 f9de 	bl	9000592a <USB_HC_Halt>
9000356e:	e7dd      	b.n	9000352c <HAL_HCD_IRQHandler+0x234>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
90003570:	68a1      	ldr	r1, [r4, #8]
90003572:	0689      	lsls	r1, r1, #26
90003574:	d502      	bpl.n	9000357c <HAL_HCD_IRQHandler+0x284>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
90003576:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
90003578:	60a1      	str	r1, [r4, #8]
9000357a:	e7d7      	b.n	9000352c <HAL_HCD_IRQHandler+0x234>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
9000357c:	68a1      	ldr	r1, [r4, #8]
9000357e:	070a      	lsls	r2, r1, #28
90003580:	d50e      	bpl.n	900035a0 <HAL_HCD_IRQHandler+0x2a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003582:	68e1      	ldr	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
90003584:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003588:	f041 0102 	orr.w	r1, r1, #2
9000358c:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
9000358e:	fb07 5106 	mla	r1, r7, r6, r5
90003592:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
90003596:	2110      	movs	r1, #16
90003598:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
9000359a:	2108      	movs	r1, #8
9000359c:	60a1      	str	r1, [r4, #8]
9000359e:	e7e3      	b.n	90003568 <HAL_HCD_IRQHandler+0x270>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
900035a0:	68a1      	ldr	r1, [r4, #8]
900035a2:	054b      	lsls	r3, r1, #21
900035a4:	d5c2      	bpl.n	9000352c <HAL_HCD_IRQHandler+0x234>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900035a6:	68e1      	ldr	r1, [r4, #12]
900035a8:	f041 0102 	orr.w	r1, r1, #2
900035ac:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900035ae:	4631      	mov	r1, r6
900035b0:	f002 f9bb 	bl	9000592a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
900035b4:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
900035b6:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
900035b8:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
900035ba:	fb07 5106 	mla	r1, r7, r6, r5
900035be:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
900035c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
900035c6:	e7d7      	b.n	90003578 <HAL_HCD_IRQHandler+0x280>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
900035c8:	68a1      	ldr	r1, [r4, #8]
900035ca:	07c9      	lsls	r1, r1, #31
900035cc:	d54b      	bpl.n	90003666 <HAL_HCD_IRQHandler+0x36e>
    if (hhcd->Init.dma_enable != 0U)
900035ce:	6929      	ldr	r1, [r5, #16]
900035d0:	b149      	cbz	r1, 900035e6 <HAL_HCD_IRQHandler+0x2ee>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900035d2:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
900035d4:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900035d8:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
900035dc:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
900035e0:	1a09      	subs	r1, r1, r0
900035e2:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
900035e6:	fb07 5106 	mla	r1, r7, r6, r5
900035ea:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
900035ec:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
900035ee:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
900035f2:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
900035f4:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
900035f6:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
900035fa:	f012 0ffd 	tst.w	r2, #253	; 0xfd
900035fe:	d117      	bne.n	90003630 <HAL_HCD_IRQHandler+0x338>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003600:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003602:	4631      	mov	r1, r6
90003604:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003606:	f043 0302 	orr.w	r3, r3, #2
9000360a:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000360c:	f002 f98d 	bl	9000592a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
90003610:	2310      	movs	r3, #16
90003612:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
90003614:	fb07 5606 	mla	r6, r7, r6, r5
90003618:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
9000361c:	f083 0301 	eor.w	r3, r3, #1
90003620:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003624:	9b00      	ldr	r3, [sp, #0]
90003626:	f10a 0a01 	add.w	sl, sl, #1
9000362a:	3320      	adds	r3, #32
9000362c:	9300      	str	r3, [sp, #0]
9000362e:	e709      	b.n	90003444 <HAL_HCD_IRQHandler+0x14c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
90003630:	2a03      	cmp	r2, #3
90003632:	d10d      	bne.n	90003650 <HAL_HCD_IRQHandler+0x358>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
90003634:	f858 000b 	ldr.w	r0, [r8, fp]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
90003638:	461a      	mov	r2, r3
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
9000363a:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
9000363e:	f848 000b 	str.w	r0, [r8, fp]
      hhcd->hc[ch_num].urb_state = URB_DONE;
90003642:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
90003646:	4631      	mov	r1, r6
90003648:	4628      	mov	r0, r5
9000364a:	f006 ff87 	bl	9000a55c <HAL_HCD_HC_NotifyURBChange_Callback>
9000364e:	e7e1      	b.n	90003614 <HAL_HCD_IRQHandler+0x31c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
90003650:	2a01      	cmp	r2, #1
90003652:	d1df      	bne.n	90003614 <HAL_HCD_IRQHandler+0x31c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
90003654:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
90003658:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
9000365c:	f083 0301 	eor.w	r3, r3, #1
90003660:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
90003664:	e7ef      	b.n	90003646 <HAL_HCD_IRQHandler+0x34e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
90003666:	68a1      	ldr	r1, [r4, #8]
90003668:	078a      	lsls	r2, r1, #30
9000366a:	d53f      	bpl.n	900036ec <HAL_HCD_IRQHandler+0x3f4>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
9000366c:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
9000366e:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
90003672:	f021 0102 	bic.w	r1, r1, #2
90003676:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003678:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
9000367c:	2901      	cmp	r1, #1
9000367e:	d10c      	bne.n	9000369a <HAL_HCD_IRQHandler+0x3a2>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
90003680:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
90003684:	fb07 5306 	mla	r3, r7, r6, r5
90003688:	4631      	mov	r1, r6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
9000368a:	f8c4 9008 	str.w	r9, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
9000368e:	4628      	mov	r0, r5
90003690:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
90003694:	f006 ff62 	bl	9000a55c <HAL_HCD_HC_NotifyURBChange_Callback>
90003698:	e7c4      	b.n	90003624 <HAL_HCD_IRQHandler+0x32c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
9000369a:	3903      	subs	r1, #3
9000369c:	2905      	cmp	r1, #5
9000369e:	d8f1      	bhi.n	90003684 <HAL_HCD_IRQHandler+0x38c>
900036a0:	a001      	add	r0, pc, #4	; (adr r0, 900036a8 <HAL_HCD_IRQHandler+0x3b0>)
900036a2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
900036a6:	bf00      	nop
900036a8:	900036c1 	.word	0x900036c1
900036ac:	90003685 	.word	0x90003685
900036b0:	9000390b 	.word	0x9000390b
900036b4:	90003917 	.word	0x90003917
900036b8:	900036db 	.word	0x900036db
900036bc:	90003917 	.word	0x90003917
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
900036c0:	fb07 5106 	mla	r1, r7, r6, r5
900036c4:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
900036c8:	f858 100b 	ldr.w	r1, [r8, fp]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900036cc:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
900036d0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
900036d4:	f848 100b 	str.w	r1, [r8, fp]
900036d8:	e7d4      	b.n	90003684 <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].ErrCnt++;
900036da:	fb07 5206 	mla	r2, r7, r6, r5
900036de:	6d93      	ldr	r3, [r2, #88]	; 0x58
900036e0:	3301      	adds	r3, #1
900036e2:	6593      	str	r3, [r2, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
900036e4:	2304      	movs	r3, #4
900036e6:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
900036ea:	e7cb      	b.n	90003684 <HAL_HCD_IRQHandler+0x38c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
900036ec:	68a1      	ldr	r1, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900036ee:	6828      	ldr	r0, [r5, #0]
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
900036f0:	f011 0180 	ands.w	r1, r1, #128	; 0x80
900036f4:	d010      	beq.n	90003718 <HAL_HCD_IRQHandler+0x420>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900036f6:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
900036f8:	fb07 5206 	mla	r2, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900036fc:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900036fe:	f043 0302 	orr.w	r3, r3, #2
90003702:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
90003704:	6d93      	ldr	r3, [r2, #88]	; 0x58
90003706:	3301      	adds	r3, #1
90003708:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
9000370a:	2306      	movs	r3, #6
9000370c:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003710:	f002 f90b 	bl	9000592a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
90003714:	2380      	movs	r3, #128	; 0x80
90003716:	e011      	b.n	9000373c <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
90003718:	68a3      	ldr	r3, [r4, #8]
9000371a:	06db      	lsls	r3, r3, #27
9000371c:	d582      	bpl.n	90003624 <HAL_HCD_IRQHandler+0x32c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
9000371e:	fb07 5206 	mla	r2, r7, r6, r5
90003722:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
90003726:	2b03      	cmp	r3, #3
90003728:	d10a      	bne.n	90003740 <HAL_HCD_IRQHandler+0x448>
      hhcd->hc[ch_num].ErrCnt = 0U;
9000372a:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000372c:	68e3      	ldr	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000372e:	4631      	mov	r1, r6
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003730:	f043 0302 	orr.w	r3, r3, #2
90003734:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003736:	f002 f8f8 	bl	9000592a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
9000373a:	2310      	movs	r3, #16
9000373c:	60a3      	str	r3, [r4, #8]
9000373e:	e771      	b.n	90003624 <HAL_HCD_IRQHandler+0x32c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
90003740:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
90003744:	d1f9      	bne.n	9000373a <HAL_HCD_IRQHandler+0x442>
      hhcd->hc[ch_num].ErrCnt = 0U;
90003746:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
90003748:	692b      	ldr	r3, [r5, #16]
9000374a:	2b00      	cmp	r3, #0
9000374c:	d1f5      	bne.n	9000373a <HAL_HCD_IRQHandler+0x442>
        hhcd->hc[ch_num].state = HC_NAK;
9000374e:	2303      	movs	r3, #3
90003750:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
90003754:	e7ea      	b.n	9000372c <HAL_HCD_IRQHandler+0x434>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
90003756:	f011 0c04 	ands.w	ip, r1, #4
9000375a:	d009      	beq.n	90003770 <HAL_HCD_IRQHandler+0x478>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
9000375c:	2304      	movs	r3, #4
9000375e:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003760:	68e3      	ldr	r3, [r4, #12]
90003762:	f043 0302 	orr.w	r3, r3, #2
90003766:	60e3      	str	r3, [r4, #12]
90003768:	e75c      	b.n	90003624 <HAL_HCD_IRQHandler+0x32c>
9000376a:	bf00      	nop
9000376c:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
90003770:	68a1      	ldr	r1, [r4, #8]
90003772:	f011 0120 	ands.w	r1, r1, #32
90003776:	d014      	beq.n	900037a2 <HAL_HCD_IRQHandler+0x4aa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
90003778:	2320      	movs	r3, #32
9000377a:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
9000377c:	fb07 5306 	mla	r3, r7, r6, r5
90003780:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
90003784:	2a01      	cmp	r2, #1
90003786:	f47f af4d 	bne.w	90003624 <HAL_HCD_IRQHandler+0x32c>
      hhcd->hc[ch_num].do_ping = 0U;
9000378a:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000378e:	4631      	mov	r1, r6
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
90003790:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003794:	68e3      	ldr	r3, [r4, #12]
90003796:	f043 0302 	orr.w	r3, r3, #2
9000379a:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000379c:	f002 f8c5 	bl	9000592a <USB_HC_Halt>
900037a0:	e740      	b.n	90003624 <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
900037a2:	68a3      	ldr	r3, [r4, #8]
900037a4:	065a      	lsls	r2, r3, #25
900037a6:	d511      	bpl.n	900037cc <HAL_HCD_IRQHandler+0x4d4>
    hhcd->hc[ch_num].state = HC_NYET;
900037a8:	fb07 5306 	mla	r3, r7, r6, r5
900037ac:	2204      	movs	r2, #4
900037ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
900037b2:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
900037b4:	6599      	str	r1, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900037b6:	4631      	mov	r1, r6
    hhcd->hc[ch_num].do_ping = 1U;
900037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900037bc:	68e3      	ldr	r3, [r4, #12]
900037be:	f043 0302 	orr.w	r3, r3, #2
900037c2:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900037c4:	f002 f8b1 	bl	9000592a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
900037c8:	2340      	movs	r3, #64	; 0x40
900037ca:	e7b7      	b.n	9000373c <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
900037cc:	68a1      	ldr	r1, [r4, #8]
900037ce:	f411 7100 	ands.w	r1, r1, #512	; 0x200
900037d2:	d005      	beq.n	900037e0 <HAL_HCD_IRQHandler+0x4e8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900037d4:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900037d6:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900037d8:	f043 0302 	orr.w	r3, r3, #2
900037dc:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900037de:	e6ae      	b.n	9000353e <HAL_HCD_IRQHandler+0x246>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
900037e0:	68a3      	ldr	r3, [r4, #8]
900037e2:	07db      	lsls	r3, r3, #31
900037e4:	d50f      	bpl.n	90003806 <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900037e6:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
900037e8:	fb07 5806 	mla	r8, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900037ec:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
900037f0:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900037f4:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900037f6:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900037f8:	f002 f897 	bl	9000592a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
900037fc:	2201      	movs	r2, #1
900037fe:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
90003800:	f888 205d 	strb.w	r2, [r8, #93]	; 0x5d
90003804:	e70e      	b.n	90003624 <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
90003806:	68a1      	ldr	r1, [r4, #8]
90003808:	0709      	lsls	r1, r1, #28
9000380a:	d50e      	bpl.n	9000382a <HAL_HCD_IRQHandler+0x532>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
9000380c:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000380e:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_STALL;
90003810:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
90003814:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003816:	68e3      	ldr	r3, [r4, #12]
90003818:	f043 0302 	orr.w	r3, r3, #2
9000381c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000381e:	f002 f884 	bl	9000592a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
90003822:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
90003824:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
90003828:	e6fc      	b.n	90003624 <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
9000382a:	68a1      	ldr	r1, [r4, #8]
9000382c:	06ca      	lsls	r2, r1, #27
9000382e:	d514      	bpl.n	9000385a <HAL_HCD_IRQHandler+0x562>
    hhcd->hc[ch_num].ErrCnt = 0U;
90003830:	fb07 5306 	mla	r3, r7, r6, r5
90003834:	2200      	movs	r2, #0
90003836:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
90003838:	2203      	movs	r2, #3
9000383a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
9000383e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
90003842:	2a00      	cmp	r2, #0
90003844:	f47f af72 	bne.w	9000372c <HAL_HCD_IRQHandler+0x434>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
90003848:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
9000384c:	2a00      	cmp	r2, #0
9000384e:	f47f af6d 	bne.w	9000372c <HAL_HCD_IRQHandler+0x434>
        hhcd->hc[ch_num].do_ping = 1U;
90003852:	2201      	movs	r2, #1
90003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003858:	e768      	b.n	9000372c <HAL_HCD_IRQHandler+0x434>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
9000385a:	68a1      	ldr	r1, [r4, #8]
9000385c:	060b      	lsls	r3, r1, #24
9000385e:	d50c      	bpl.n	9000387a <HAL_HCD_IRQHandler+0x582>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003860:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003862:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
90003864:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003868:	f043 0302 	orr.w	r3, r3, #2
9000386c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000386e:	f002 f85c 	bl	9000592a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
90003872:	2306      	movs	r3, #6
90003874:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
90003878:	e74c      	b.n	90003714 <HAL_HCD_IRQHandler+0x41c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
9000387a:	68a1      	ldr	r1, [r4, #8]
9000387c:	0549      	lsls	r1, r1, #21
9000387e:	d50f      	bpl.n	900038a0 <HAL_HCD_IRQHandler+0x5a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003880:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003882:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_DATATGLERR;
90003884:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003888:	f043 0302 	orr.w	r3, r3, #2
9000388c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000388e:	f002 f84c 	bl	9000592a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
90003892:	2310      	movs	r3, #16
90003894:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
90003896:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000389a:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
9000389c:	2308      	movs	r3, #8
9000389e:	e7c1      	b.n	90003824 <HAL_HCD_IRQHandler+0x52c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
900038a0:	68a1      	ldr	r1, [r4, #8]
900038a2:	078a      	lsls	r2, r1, #30
900038a4:	f57f aebe 	bpl.w	90003624 <HAL_HCD_IRQHandler+0x32c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
900038a8:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
900038aa:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
900038ae:	f021 0102 	bic.w	r1, r1, #2
900038b2:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
900038b4:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
900038b8:	2901      	cmp	r1, #1
900038ba:	d10e      	bne.n	900038da <HAL_HCD_IRQHandler+0x5e2>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
900038bc:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
900038c0:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
900038c4:	3b02      	subs	r3, #2
900038c6:	2b01      	cmp	r3, #1
900038c8:	f63f aedc 	bhi.w	90003684 <HAL_HCD_IRQHandler+0x38c>
        hhcd->hc[ch_num].toggle_out ^= 1U;
900038cc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
900038d0:	f083 0301 	eor.w	r3, r3, #1
900038d4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
900038d8:	e6d4      	b.n	90003684 <HAL_HCD_IRQHandler+0x38c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
900038da:	3903      	subs	r1, #3
900038dc:	2905      	cmp	r1, #5
900038de:	f63f aed1 	bhi.w	90003684 <HAL_HCD_IRQHandler+0x38c>
900038e2:	a001      	add	r0, pc, #4	; (adr r0, 900038e8 <HAL_HCD_IRQHandler+0x5f0>)
900038e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
900038e8:	90003901 	.word	0x90003901
900038ec:	90003901 	.word	0x90003901
900038f0:	9000390b 	.word	0x9000390b
900038f4:	90003917 	.word	0x90003917
900038f8:	90003685 	.word	0x90003685
900038fc:	90003917 	.word	0x90003917
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
90003900:	fb07 5306 	mla	r3, r7, r6, r5
90003904:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
90003908:	e6bc      	b.n	90003684 <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
9000390a:	fb07 5306 	mla	r3, r7, r6, r5
9000390e:	2205      	movs	r2, #5
90003910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
90003914:	e6b6      	b.n	90003684 <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].ErrCnt++;
90003916:	fb07 5006 	mla	r0, r7, r6, r5
9000391a:	6d81      	ldr	r1, [r0, #88]	; 0x58
9000391c:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
9000391e:	2903      	cmp	r1, #3
        hhcd->hc[ch_num].ErrCnt = 0U;
90003920:	bf8d      	iteet	hi
90003922:	2100      	movhi	r1, #0
      hhcd->hc[ch_num].ErrCnt++;
90003924:	6581      	strls	r1, [r0, #88]	; 0x58
90003926:	2102      	movls	r1, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
90003928:	6581      	strhi	r1, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
9000392a:	bf88      	it	hi
9000392c:	2104      	movhi	r1, #4
        hhcd->hc[ch_num].urb_state = URB_ERROR;
9000392e:	fb07 5006 	mla	r0, r7, r6, r5
90003932:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
90003936:	e6c7      	b.n	900036c8 <HAL_HCD_IRQHandler+0x3d0>

90003938 <HAL_HCD_Start>:
{
90003938:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
9000393a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
9000393e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
90003940:	2b01      	cmp	r3, #1
90003942:	d00d      	beq.n	90003960 <HAL_HCD_Start+0x28>
90003944:	2501      	movs	r5, #1
90003946:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
9000394a:	6800      	ldr	r0, [r0, #0]
9000394c:	f001 fe33 	bl	900055b6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
90003950:	4629      	mov	r1, r5
90003952:	6820      	ldr	r0, [r4, #0]
90003954:	f001 fed8 	bl	90005708 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
90003958:	2000      	movs	r0, #0
9000395a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
9000395e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
90003960:	2002      	movs	r0, #2
90003962:	e7fc      	b.n	9000395e <HAL_HCD_Start+0x26>

90003964 <HAL_HCD_Stop>:
{
90003964:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
90003966:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
9000396a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
9000396c:	2b01      	cmp	r3, #1
9000396e:	d009      	beq.n	90003984 <HAL_HCD_Stop+0x20>
90003970:	2301      	movs	r3, #1
90003972:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
90003976:	6800      	ldr	r0, [r0, #0]
90003978:	f002 f8ea 	bl	90005b50 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
9000397c:	2000      	movs	r0, #0
9000397e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
90003982:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
90003984:	2002      	movs	r0, #2
90003986:	e7fc      	b.n	90003982 <HAL_HCD_Stop+0x1e>

90003988 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
90003988:	6800      	ldr	r0, [r0, #0]
9000398a:	f001 be9f 	b.w	900056cc <USB_ResetPort>

9000398e <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
9000398e:	2328      	movs	r3, #40	; 0x28
90003990:	fb03 0101 	mla	r1, r3, r1, r0
}
90003994:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
90003998:	4770      	bx	lr

9000399a <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
9000399a:	2328      	movs	r3, #40	; 0x28
9000399c:	fb03 0101 	mla	r1, r3, r1, r0
}
900039a0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
900039a2:	4770      	bx	lr

900039a4 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
900039a4:	6800      	ldr	r0, [r0, #0]
900039a6:	f001 bf42 	b.w	9000582e <USB_GetCurrentFrame>

900039aa <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
900039aa:	6800      	ldr	r0, [r0, #0]
900039ac:	f001 bf34 	b.w	90005818 <USB_GetHostSpeed>

900039b0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
900039b0:	6803      	ldr	r3, [r0, #0]
900039b2:	699a      	ldr	r2, [r3, #24]
900039b4:	0791      	lsls	r1, r2, #30
900039b6:	d501      	bpl.n	900039bc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
900039b8:	2200      	movs	r2, #0
900039ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
900039bc:	699a      	ldr	r2, [r3, #24]
900039be:	07d2      	lsls	r2, r2, #31
900039c0:	d403      	bmi.n	900039ca <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
900039c2:	699a      	ldr	r2, [r3, #24]
900039c4:	f042 0201 	orr.w	r2, r2, #1
900039c8:	619a      	str	r2, [r3, #24]
  }
}
900039ca:	4770      	bx	lr

900039cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
900039cc:	b530      	push	{r4, r5, lr}
900039ce:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
900039d0:	f3c1 0109 	ubfx	r1, r1, #0, #10
900039d4:	6804      	ldr	r4, [r0, #0]
900039d6:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
900039da:	6860      	ldr	r0, [r4, #4]
900039dc:	431a      	orrs	r2, r3
900039de:	4b04      	ldr	r3, [pc, #16]	; (900039f0 <I2C_TransferConfig+0x24>)
900039e0:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
900039e4:	430a      	orrs	r2, r1
900039e6:	ea20 0003 	bic.w	r0, r0, r3
900039ea:	4302      	orrs	r2, r0
900039ec:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
900039ee:	bd30      	pop	{r4, r5, pc}
900039f0:	03ff63ff 	.word	0x03ff63ff

900039f4 <I2C_IsAcknowledgeFailed>:
{
900039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
900039f6:	6803      	ldr	r3, [r0, #0]
{
900039f8:	4604      	mov	r4, r0
900039fa:	460e      	mov	r6, r1
900039fc:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
900039fe:	6998      	ldr	r0, [r3, #24]
90003a00:	f010 0010 	ands.w	r0, r0, #16
90003a04:	d116      	bne.n	90003a34 <I2C_IsAcknowledgeFailed+0x40>
}
90003a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
90003a08:	1c72      	adds	r2, r6, #1
90003a0a:	d014      	beq.n	90003a36 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003a0c:	f7fe feca 	bl	900027a4 <HAL_GetTick>
90003a10:	1bc0      	subs	r0, r0, r7
90003a12:	4286      	cmp	r6, r0
90003a14:	d300      	bcc.n	90003a18 <I2C_IsAcknowledgeFailed+0x24>
90003a16:	b96e      	cbnz	r6, 90003a34 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003a18:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003a1a:	f043 0320 	orr.w	r3, r3, #32
90003a1e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90003a20:	2320      	movs	r3, #32
90003a22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90003a26:	2300      	movs	r3, #0
90003a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
90003a2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
90003a30:	2001      	movs	r0, #1
90003a32:	e7e8      	b.n	90003a06 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90003a34:	6825      	ldr	r5, [r4, #0]
90003a36:	69ab      	ldr	r3, [r5, #24]
90003a38:	069b      	lsls	r3, r3, #26
90003a3a:	d5e5      	bpl.n	90003a08 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90003a3c:	2310      	movs	r3, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003a3e:	2620      	movs	r6, #32
    I2C_Flush_TXDR(hi2c);
90003a40:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90003a42:	61eb      	str	r3, [r5, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003a44:	61ee      	str	r6, [r5, #28]
    I2C_Flush_TXDR(hi2c);
90003a46:	f7ff ffb3 	bl	900039b0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
90003a4a:	686b      	ldr	r3, [r5, #4]
90003a4c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
90003a50:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
90003a54:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
90003a58:	f023 0301 	bic.w	r3, r3, #1
90003a5c:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
90003a5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003a60:	f043 0304 	orr.w	r3, r3, #4
90003a64:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
90003a66:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
90003a68:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90003a6c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
90003a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
90003a74:	e7dc      	b.n	90003a30 <I2C_IsAcknowledgeFailed+0x3c>

90003a76 <I2C_WaitOnTXISFlagUntilTimeout>:
{
90003a76:	b570      	push	{r4, r5, r6, lr}
90003a78:	4604      	mov	r4, r0
90003a7a:	460d      	mov	r5, r1
90003a7c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90003a7e:	6823      	ldr	r3, [r4, #0]
90003a80:	699b      	ldr	r3, [r3, #24]
90003a82:	079b      	lsls	r3, r3, #30
90003a84:	d501      	bpl.n	90003a8a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
90003a86:	2000      	movs	r0, #0
}
90003a88:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
90003a8a:	4632      	mov	r2, r6
90003a8c:	4629      	mov	r1, r5
90003a8e:	4620      	mov	r0, r4
90003a90:	f7ff ffb0 	bl	900039f4 <I2C_IsAcknowledgeFailed>
90003a94:	b9a0      	cbnz	r0, 90003ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
90003a96:	1c6a      	adds	r2, r5, #1
90003a98:	d0f1      	beq.n	90003a7e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003a9a:	f7fe fe83 	bl	900027a4 <HAL_GetTick>
90003a9e:	1b80      	subs	r0, r0, r6
90003aa0:	42a8      	cmp	r0, r5
90003aa2:	d801      	bhi.n	90003aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
90003aa4:	2d00      	cmp	r5, #0
90003aa6:	d1ea      	bne.n	90003a7e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003aa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003aaa:	f043 0320 	orr.w	r3, r3, #32
90003aae:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003ab0:	2320      	movs	r3, #32
90003ab2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90003ab6:	2300      	movs	r3, #0
90003ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
90003abc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90003ac0:	2001      	movs	r0, #1
90003ac2:	e7e1      	b.n	90003a88 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

90003ac4 <I2C_WaitOnFlagUntilTimeout>:
{
90003ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90003ac8:	9f06      	ldr	r7, [sp, #24]
90003aca:	4604      	mov	r4, r0
90003acc:	4688      	mov	r8, r1
90003ace:	4616      	mov	r6, r2
90003ad0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90003ad2:	6822      	ldr	r2, [r4, #0]
90003ad4:	6993      	ldr	r3, [r2, #24]
90003ad6:	ea38 0303 	bics.w	r3, r8, r3
90003ada:	bf0c      	ite	eq
90003adc:	2301      	moveq	r3, #1
90003ade:	2300      	movne	r3, #0
90003ae0:	42b3      	cmp	r3, r6
90003ae2:	d001      	beq.n	90003ae8 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
90003ae4:	2000      	movs	r0, #0
90003ae6:	e015      	b.n	90003b14 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
90003ae8:	1c6b      	adds	r3, r5, #1
90003aea:	d0f3      	beq.n	90003ad4 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003aec:	f7fe fe5a 	bl	900027a4 <HAL_GetTick>
90003af0:	1bc0      	subs	r0, r0, r7
90003af2:	42a8      	cmp	r0, r5
90003af4:	d801      	bhi.n	90003afa <I2C_WaitOnFlagUntilTimeout+0x36>
90003af6:	2d00      	cmp	r5, #0
90003af8:	d1eb      	bne.n	90003ad2 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003afa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
90003afc:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003afe:	f043 0320 	orr.w	r3, r3, #32
90003b02:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003b04:	2320      	movs	r3, #32
90003b06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90003b0a:	2300      	movs	r3, #0
90003b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
90003b10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
90003b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90003b18 <I2C_RequestMemoryWrite>:
{
90003b18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90003b1c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90003b1e:	4b18      	ldr	r3, [pc, #96]	; (90003b80 <I2C_RequestMemoryWrite+0x68>)
{
90003b20:	4605      	mov	r5, r0
90003b22:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90003b24:	9300      	str	r3, [sp, #0]
90003b26:	b2f2      	uxtb	r2, r6
90003b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
90003b2c:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90003b30:	f7ff ff4c 	bl	900039cc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003b34:	4628      	mov	r0, r5
90003b36:	4642      	mov	r2, r8
90003b38:	4639      	mov	r1, r7
90003b3a:	f7ff ff9c 	bl	90003a76 <I2C_WaitOnTXISFlagUntilTimeout>
90003b3e:	b118      	cbz	r0, 90003b48 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
90003b40:	2001      	movs	r0, #1
}
90003b42:	b002      	add	sp, #8
90003b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003b48:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003b4a:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003b4c:	d10d      	bne.n	90003b6a <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003b4e:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90003b50:	2200      	movs	r2, #0
90003b52:	2180      	movs	r1, #128	; 0x80
90003b54:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003b56:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90003b58:	463b      	mov	r3, r7
90003b5a:	f8cd 8000 	str.w	r8, [sp]
90003b5e:	f7ff ffb1 	bl	90003ac4 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
90003b62:	3800      	subs	r0, #0
90003b64:	bf18      	it	ne
90003b66:	2001      	movne	r0, #1
90003b68:	e7eb      	b.n	90003b42 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003b6a:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003b6c:	4639      	mov	r1, r7
90003b6e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003b70:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003b72:	4642      	mov	r2, r8
90003b74:	f7ff ff7f 	bl	90003a76 <I2C_WaitOnTXISFlagUntilTimeout>
90003b78:	2800      	cmp	r0, #0
90003b7a:	d1e1      	bne.n	90003b40 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003b7c:	682b      	ldr	r3, [r5, #0]
90003b7e:	e7e6      	b.n	90003b4e <I2C_RequestMemoryWrite+0x36>
90003b80:	80002000 	.word	0x80002000

90003b84 <I2C_RequestMemoryRead>:
{
90003b84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90003b88:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003b8a:	4b18      	ldr	r3, [pc, #96]	; (90003bec <I2C_RequestMemoryRead+0x68>)
{
90003b8c:	4605      	mov	r5, r0
90003b8e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003b90:	9300      	str	r3, [sp, #0]
90003b92:	b2f2      	uxtb	r2, r6
90003b94:	2300      	movs	r3, #0
{
90003b96:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003b9a:	f7ff ff17 	bl	900039cc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003b9e:	4628      	mov	r0, r5
90003ba0:	4642      	mov	r2, r8
90003ba2:	4639      	mov	r1, r7
90003ba4:	f7ff ff67 	bl	90003a76 <I2C_WaitOnTXISFlagUntilTimeout>
90003ba8:	b118      	cbz	r0, 90003bb2 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
90003baa:	2001      	movs	r0, #1
}
90003bac:	b002      	add	sp, #8
90003bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003bb2:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003bb4:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003bb6:	d10d      	bne.n	90003bd4 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003bb8:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90003bba:	2200      	movs	r2, #0
90003bbc:	2140      	movs	r1, #64	; 0x40
90003bbe:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003bc0:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90003bc2:	463b      	mov	r3, r7
90003bc4:	f8cd 8000 	str.w	r8, [sp]
90003bc8:	f7ff ff7c 	bl	90003ac4 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
90003bcc:	3800      	subs	r0, #0
90003bce:	bf18      	it	ne
90003bd0:	2001      	movne	r0, #1
90003bd2:	e7eb      	b.n	90003bac <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003bd4:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003bd6:	4639      	mov	r1, r7
90003bd8:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003bda:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003bdc:	4642      	mov	r2, r8
90003bde:	f7ff ff4a 	bl	90003a76 <I2C_WaitOnTXISFlagUntilTimeout>
90003be2:	2800      	cmp	r0, #0
90003be4:	d1e1      	bne.n	90003baa <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003be6:	682b      	ldr	r3, [r5, #0]
90003be8:	e7e6      	b.n	90003bb8 <I2C_RequestMemoryRead+0x34>
90003bea:	bf00      	nop
90003bec:	80002000 	.word	0x80002000

90003bf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
90003bf0:	b570      	push	{r4, r5, r6, lr}
90003bf2:	4604      	mov	r4, r0
90003bf4:	460d      	mov	r5, r1
90003bf6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90003bf8:	6823      	ldr	r3, [r4, #0]
90003bfa:	699b      	ldr	r3, [r3, #24]
90003bfc:	069b      	lsls	r3, r3, #26
90003bfe:	d501      	bpl.n	90003c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
90003c00:	2000      	movs	r0, #0
}
90003c02:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
90003c04:	4632      	mov	r2, r6
90003c06:	4629      	mov	r1, r5
90003c08:	4620      	mov	r0, r4
90003c0a:	f7ff fef3 	bl	900039f4 <I2C_IsAcknowledgeFailed>
90003c0e:	b990      	cbnz	r0, 90003c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003c10:	f7fe fdc8 	bl	900027a4 <HAL_GetTick>
90003c14:	1b80      	subs	r0, r0, r6
90003c16:	42a8      	cmp	r0, r5
90003c18:	d801      	bhi.n	90003c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
90003c1a:	2d00      	cmp	r5, #0
90003c1c:	d1ec      	bne.n	90003bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003c1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003c20:	f043 0320 	orr.w	r3, r3, #32
90003c24:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003c26:	2320      	movs	r3, #32
90003c28:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90003c2c:	2300      	movs	r3, #0
90003c2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
90003c32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90003c36:	2001      	movs	r0, #1
90003c38:	e7e3      	b.n	90003c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

90003c3a <HAL_I2C_MspInit>:
}
90003c3a:	4770      	bx	lr

90003c3c <HAL_I2C_Init>:
{
90003c3c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
90003c3e:	4604      	mov	r4, r0
90003c40:	2800      	cmp	r0, #0
90003c42:	d04a      	beq.n	90003cda <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
90003c44:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90003c48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90003c4c:	b91b      	cbnz	r3, 90003c56 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
90003c4e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
90003c52:	f7ff fff2 	bl	90003c3a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
90003c56:	2324      	movs	r3, #36	; 0x24
90003c58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90003c5c:	6823      	ldr	r3, [r4, #0]
90003c5e:	681a      	ldr	r2, [r3, #0]
90003c60:	f022 0201 	bic.w	r2, r2, #1
90003c64:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90003c66:	6862      	ldr	r2, [r4, #4]
90003c68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
90003c6c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90003c6e:	689a      	ldr	r2, [r3, #8]
90003c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90003c74:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90003c76:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90003c7a:	2901      	cmp	r1, #1
90003c7c:	d124      	bne.n	90003cc8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90003c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90003c82:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90003c84:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003c86:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90003c88:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
90003c8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90003c90:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90003c92:	68da      	ldr	r2, [r3, #12]
90003c94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90003c98:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
90003c9a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
90003c9e:	430a      	orrs	r2, r1
90003ca0:	69a1      	ldr	r1, [r4, #24]
90003ca2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90003ca6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90003ca8:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
90003cac:	430a      	orrs	r2, r1
90003cae:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
90003cb0:	681a      	ldr	r2, [r3, #0]
90003cb2:	f042 0201 	orr.w	r2, r2, #1
90003cb6:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
90003cb8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003cba:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90003cbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90003cc0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90003cc2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
90003cc6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90003cc8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90003ccc:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90003cce:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90003cd0:	d1d8      	bne.n	90003c84 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
90003cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
90003cd6:	605a      	str	r2, [r3, #4]
90003cd8:	e7d4      	b.n	90003c84 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
90003cda:	2001      	movs	r0, #1
90003cdc:	e7f3      	b.n	90003cc6 <HAL_I2C_Init+0x8a>

90003cde <HAL_I2C_MspDeInit>:
90003cde:	4770      	bx	lr

90003ce0 <HAL_I2C_DeInit>:
{
90003ce0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
90003ce2:	4604      	mov	r4, r0
90003ce4:	b198      	cbz	r0, 90003d0e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
90003ce6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90003ce8:	2324      	movs	r3, #36	; 0x24
90003cea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90003cee:	6813      	ldr	r3, [r2, #0]
90003cf0:	f023 0301 	bic.w	r3, r3, #1
90003cf4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
90003cf6:	f7ff fff2 	bl	90003cde <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003cfa:	2000      	movs	r0, #0
90003cfc:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
90003cfe:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
90003d02:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90003d06:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90003d08:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
90003d0c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
90003d0e:	2001      	movs	r0, #1
90003d10:	e7fc      	b.n	90003d0c <HAL_I2C_DeInit+0x2c>

90003d12 <HAL_I2C_Mem_Write>:
{
90003d12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003d16:	b085      	sub	sp, #20
90003d18:	469b      	mov	fp, r3
90003d1a:	4604      	mov	r4, r0
90003d1c:	460f      	mov	r7, r1
90003d1e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90003d22:	4692      	mov	sl, r2
90003d24:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
90003d28:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
90003d2a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90003d2e:	2b20      	cmp	r3, #32
90003d30:	f040 80a3 	bne.w	90003e7a <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
90003d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90003d36:	b10b      	cbz	r3, 90003d3c <HAL_I2C_Mem_Write+0x2a>
90003d38:	9b03      	ldr	r3, [sp, #12]
90003d3a:	b933      	cbnz	r3, 90003d4a <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90003d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
90003d40:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
90003d42:	2001      	movs	r0, #1
}
90003d44:	b005      	add	sp, #20
90003d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
90003d4a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90003d4e:	2b01      	cmp	r3, #1
90003d50:	f000 8093 	beq.w	90003e7a <HAL_I2C_Mem_Write+0x168>
90003d54:	2501      	movs	r5, #1
90003d56:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90003d5a:	f7fe fd23 	bl	900027a4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90003d5e:	2319      	movs	r3, #25
90003d60:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
90003d62:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90003d64:	462a      	mov	r2, r5
90003d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003d6a:	4620      	mov	r0, r4
90003d6c:	f7ff feaa 	bl	90003ac4 <I2C_WaitOnFlagUntilTimeout>
90003d70:	4680      	mov	r8, r0
90003d72:	2800      	cmp	r0, #0
90003d74:	d1e5      	bne.n	90003d42 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90003d76:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
90003d78:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003d7a:	4652      	mov	r2, sl
90003d7c:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90003d7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90003d82:	2340      	movs	r3, #64	; 0x40
90003d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
90003d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003d8a:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003d8c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
90003d8e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
90003d90:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003d92:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
90003d96:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003d98:	465b      	mov	r3, fp
90003d9a:	f7ff febd 	bl	90003b18 <I2C_RequestMemoryWrite>
90003d9e:	b110      	cbz	r0, 90003da6 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
90003da0:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
90003da4:	e7cd      	b.n	90003d42 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90003da6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003da8:	b29b      	uxth	r3, r3
90003daa:	2bff      	cmp	r3, #255	; 0xff
90003dac:	d955      	bls.n	90003e5a <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
90003dae:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90003db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90003db4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
90003db6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003db8:	4639      	mov	r1, r7
90003dba:	4620      	mov	r0, r4
90003dbc:	f7ff fe06 	bl	900039cc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90003dc0:	4632      	mov	r2, r6
90003dc2:	4649      	mov	r1, r9
90003dc4:	4620      	mov	r0, r4
90003dc6:	f7ff fe56 	bl	90003a76 <I2C_WaitOnTXISFlagUntilTimeout>
90003dca:	2800      	cmp	r0, #0
90003dcc:	d1b9      	bne.n	90003d42 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90003dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
90003dd0:	6822      	ldr	r2, [r4, #0]
90003dd2:	f813 1b01 	ldrb.w	r1, [r3], #1
90003dd6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
90003dd8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
90003dda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90003ddc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
90003dde:	3b01      	subs	r3, #1
      hi2c->XferSize--;
90003de0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
90003de2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
90003de4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
90003de6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90003de8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90003dea:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90003dec:	b29b      	uxth	r3, r3
90003dee:	b1ab      	cbz	r3, 90003e1c <HAL_I2C_Mem_Write+0x10a>
90003df0:	b9a2      	cbnz	r2, 90003e1c <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90003df2:	464b      	mov	r3, r9
90003df4:	2180      	movs	r1, #128	; 0x80
90003df6:	4620      	mov	r0, r4
90003df8:	9600      	str	r6, [sp, #0]
90003dfa:	f7ff fe63 	bl	90003ac4 <I2C_WaitOnFlagUntilTimeout>
90003dfe:	2800      	cmp	r0, #0
90003e00:	d19f      	bne.n	90003d42 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90003e02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003e04:	b29b      	uxth	r3, r3
90003e06:	2bff      	cmp	r3, #255	; 0xff
90003e08:	d92f      	bls.n	90003e6a <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90003e0a:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90003e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90003e10:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90003e12:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003e14:	4639      	mov	r1, r7
90003e16:	4620      	mov	r0, r4
90003e18:	f7ff fdd8 	bl	900039cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
90003e1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003e1e:	b29b      	uxth	r3, r3
90003e20:	2b00      	cmp	r3, #0
90003e22:	d1cd      	bne.n	90003dc0 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90003e24:	4632      	mov	r2, r6
90003e26:	4649      	mov	r1, r9
90003e28:	4620      	mov	r0, r4
90003e2a:	f7ff fee1 	bl	90003bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
90003e2e:	2800      	cmp	r0, #0
90003e30:	d187      	bne.n	90003d42 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003e32:	6823      	ldr	r3, [r4, #0]
90003e34:	2120      	movs	r1, #32
90003e36:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90003e38:	685a      	ldr	r2, [r3, #4]
90003e3a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
90003e3e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
90003e42:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
90003e46:	f022 0201 	bic.w	r2, r2, #1
90003e4a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90003e4c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90003e50:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90003e54:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
90003e58:	e774      	b.n	90003d44 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
90003e5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003e60:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
90003e62:	b292      	uxth	r2, r2
90003e64:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003e66:	b2d2      	uxtb	r2, r2
90003e68:	e7a6      	b.n	90003db8 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
90003e6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003e6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003e70:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
90003e72:	b292      	uxth	r2, r2
90003e74:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003e76:	b2d2      	uxtb	r2, r2
90003e78:	e7cc      	b.n	90003e14 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
90003e7a:	2002      	movs	r0, #2
90003e7c:	e762      	b.n	90003d44 <HAL_I2C_Mem_Write+0x32>
	...

90003e80 <HAL_I2C_Mem_Read>:
{
90003e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003e84:	b085      	sub	sp, #20
90003e86:	469b      	mov	fp, r3
90003e88:	4604      	mov	r4, r0
90003e8a:	460f      	mov	r7, r1
90003e8c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90003e90:	4692      	mov	sl, r2
90003e92:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
90003e96:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
90003e98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90003e9c:	2b20      	cmp	r3, #32
90003e9e:	f040 80a7 	bne.w	90003ff0 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
90003ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90003ea4:	b10b      	cbz	r3, 90003eaa <HAL_I2C_Mem_Read+0x2a>
90003ea6:	9b03      	ldr	r3, [sp, #12]
90003ea8:	b933      	cbnz	r3, 90003eb8 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90003eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
90003eae:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
90003eb0:	2001      	movs	r0, #1
}
90003eb2:	b005      	add	sp, #20
90003eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
90003eb8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90003ebc:	2b01      	cmp	r3, #1
90003ebe:	f000 8097 	beq.w	90003ff0 <HAL_I2C_Mem_Read+0x170>
90003ec2:	2501      	movs	r5, #1
90003ec4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90003ec8:	f7fe fc6c 	bl	900027a4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90003ecc:	2319      	movs	r3, #25
90003ece:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
90003ed0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90003ed2:	462a      	mov	r2, r5
90003ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003ed8:	4620      	mov	r0, r4
90003eda:	f7ff fdf3 	bl	90003ac4 <I2C_WaitOnFlagUntilTimeout>
90003ede:	4680      	mov	r8, r0
90003ee0:	2800      	cmp	r0, #0
90003ee2:	d1e5      	bne.n	90003eb0 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90003ee4:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
90003ee6:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003ee8:	4652      	mov	r2, sl
90003eea:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90003eec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90003ef0:	2340      	movs	r3, #64	; 0x40
90003ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
90003ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003ef8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003efa:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
90003efc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
90003efe:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003f00:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
90003f04:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003f06:	465b      	mov	r3, fp
90003f08:	f7ff fe3c 	bl	90003b84 <I2C_RequestMemoryRead>
90003f0c:	b110      	cbz	r0, 90003f14 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
90003f0e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
90003f12:	e7cd      	b.n	90003eb0 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90003f14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003f16:	b29b      	uxth	r3, r3
90003f18:	2bff      	cmp	r3, #255	; 0xff
90003f1a:	4b36      	ldr	r3, [pc, #216]	; (90003ff4 <HAL_I2C_Mem_Read+0x174>)
90003f1c:	d958      	bls.n	90003fd0 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
90003f1e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
90003f20:	9300      	str	r3, [sp, #0]
90003f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
90003f26:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90003f28:	4639      	mov	r1, r7
90003f2a:	4620      	mov	r0, r4
90003f2c:	f7ff fd4e 	bl	900039cc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90003f30:	464b      	mov	r3, r9
90003f32:	2200      	movs	r2, #0
90003f34:	2104      	movs	r1, #4
90003f36:	4620      	mov	r0, r4
90003f38:	9600      	str	r6, [sp, #0]
90003f3a:	f7ff fdc3 	bl	90003ac4 <I2C_WaitOnFlagUntilTimeout>
90003f3e:	2800      	cmp	r0, #0
90003f40:	d1b6      	bne.n	90003eb0 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90003f42:	6823      	ldr	r3, [r4, #0]
90003f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90003f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
90003f48:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
90003f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
90003f4c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
90003f4e:	3301      	adds	r3, #1
      hi2c->XferSize--;
90003f50:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
90003f52:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
90003f54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90003f56:	b292      	uxth	r2, r2
      hi2c->XferCount--;
90003f58:	3b01      	subs	r3, #1
      hi2c->XferSize--;
90003f5a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
90003f5c:	b29b      	uxth	r3, r3
90003f5e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90003f60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003f62:	b29b      	uxth	r3, r3
90003f64:	b1ab      	cbz	r3, 90003f92 <HAL_I2C_Mem_Read+0x112>
90003f66:	b9a2      	cbnz	r2, 90003f92 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90003f68:	464b      	mov	r3, r9
90003f6a:	2180      	movs	r1, #128	; 0x80
90003f6c:	4620      	mov	r0, r4
90003f6e:	9600      	str	r6, [sp, #0]
90003f70:	f7ff fda8 	bl	90003ac4 <I2C_WaitOnFlagUntilTimeout>
90003f74:	2800      	cmp	r0, #0
90003f76:	d19b      	bne.n	90003eb0 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90003f78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003f7a:	b29b      	uxth	r3, r3
90003f7c:	2bff      	cmp	r3, #255	; 0xff
90003f7e:	d92f      	bls.n	90003fe0 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90003f80:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90003f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90003f86:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90003f88:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003f8a:	4639      	mov	r1, r7
90003f8c:	4620      	mov	r0, r4
90003f8e:	f7ff fd1d 	bl	900039cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
90003f92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003f94:	b29b      	uxth	r3, r3
90003f96:	2b00      	cmp	r3, #0
90003f98:	d1ca      	bne.n	90003f30 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90003f9a:	4632      	mov	r2, r6
90003f9c:	4649      	mov	r1, r9
90003f9e:	4620      	mov	r0, r4
90003fa0:	f7ff fe26 	bl	90003bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
90003fa4:	2800      	cmp	r0, #0
90003fa6:	d183      	bne.n	90003eb0 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003fa8:	6823      	ldr	r3, [r4, #0]
90003faa:	2120      	movs	r1, #32
90003fac:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90003fae:	685a      	ldr	r2, [r3, #4]
90003fb0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
90003fb4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
90003fb8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
90003fbc:	f022 0201 	bic.w	r2, r2, #1
90003fc0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90003fc2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90003fc6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90003fca:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
90003fce:	e770      	b.n	90003eb2 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
90003fd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90003fd2:	9300      	str	r3, [sp, #0]
90003fd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
90003fd8:	b292      	uxth	r2, r2
90003fda:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90003fdc:	b2d2      	uxtb	r2, r2
90003fde:	e7a3      	b.n	90003f28 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
90003fe0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003fe6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
90003fe8:	b292      	uxth	r2, r2
90003fea:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003fec:	b2d2      	uxtb	r2, r2
90003fee:	e7cc      	b.n	90003f8a <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
90003ff0:	2002      	movs	r0, #2
90003ff2:	e75e      	b.n	90003eb2 <HAL_I2C_Mem_Read+0x32>
90003ff4:	80002400 	.word	0x80002400

90003ff8 <HAL_I2C_GetState>:
  return hi2c->State;
90003ff8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90003ffc:	4770      	bx	lr
	...

90004000 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90004000:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90004002:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90004004:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90004008:	3284      	adds	r2, #132	; 0x84
9000400a:	1883      	adds	r3, r0, r2
{
9000400c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90004010:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90004012:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90004016:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90004018:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000401c:	684c      	ldr	r4, [r1, #4]
9000401e:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90004022:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90004026:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000402a:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000402c:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000402e:	68c5      	ldr	r5, [r0, #12]
90004030:	f3c5 450b 	ubfx	r5, r5, #16, #12
90004034:	443d      	add	r5, r7
90004036:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
9000403a:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000403c:	68c6      	ldr	r6, [r0, #12]
9000403e:	68cd      	ldr	r5, [r1, #12]
90004040:	f3c6 060a 	ubfx	r6, r6, #0, #11
90004044:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90004046:	689d      	ldr	r5, [r3, #8]
90004048:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
9000404c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000404e:	688d      	ldr	r5, [r1, #8]
90004050:	68c7      	ldr	r7, [r0, #12]
90004052:	3501      	adds	r5, #1
90004054:	f3c7 070a 	ubfx	r7, r7, #0, #11
90004058:	443d      	add	r5, r7
9000405a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000405e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90004060:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90004062:	691d      	ldr	r5, [r3, #16]
90004064:	f025 0507 	bic.w	r5, r5, #7
90004068:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000406a:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
9000406c:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000406e:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90004072:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90004076:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000407a:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
9000407e:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
90004082:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
90004086:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
9000408a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000408c:	695d      	ldr	r5, [r3, #20]
9000408e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
90004092:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90004094:	694d      	ldr	r5, [r1, #20]
90004096:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90004098:	69dd      	ldr	r5, [r3, #28]
9000409a:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
9000409e:	f025 0507 	bic.w	r5, r5, #7
900040a2:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900040a4:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
900040a8:	433d      	orrs	r5, r7
900040aa:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900040ac:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900040ae:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900040b0:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900040b4:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900040b6:	b1fe      	cbz	r6, 900040f8 <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900040b8:	3e01      	subs	r6, #1
900040ba:	2e06      	cmp	r6, #6
900040bc:	d81e      	bhi.n	900040fc <LTDC_SetConfig+0xfc>
900040be:	4d10      	ldr	r5, [pc, #64]	; (90004100 <LTDC_SetConfig+0x100>)
900040c0:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900040c2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900040c4:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900040c8:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900040cc:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900040ce:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900040d0:	3403      	adds	r4, #3
900040d2:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900040d4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900040d6:	436e      	muls	r6, r5
900040d8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
900040dc:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900040de:	6b1c      	ldr	r4, [r3, #48]	; 0x30
900040e0:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
900040e4:	f024 0407 	bic.w	r4, r4, #7
900040e8:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900040ea:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900040ec:	5883      	ldr	r3, [r0, r2]
900040ee:	f043 0301 	orr.w	r3, r3, #1
900040f2:	5083      	str	r3, [r0, r2]
}
900040f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
900040f8:	2504      	movs	r5, #4
900040fa:	e7e2      	b.n	900040c2 <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900040fc:	2501      	movs	r5, #1
900040fe:	e7e0      	b.n	900040c2 <LTDC_SetConfig+0xc2>
90004100:	900101e0 	.word	0x900101e0

90004104 <HAL_LTDC_MspInit>:
}
90004104:	4770      	bx	lr
	...

90004108 <HAL_LTDC_Init>:
{
90004108:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
9000410a:	4604      	mov	r4, r0
9000410c:	2800      	cmp	r0, #0
9000410e:	d063      	beq.n	900041d8 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90004110:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
90004114:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90004118:	b91b      	cbnz	r3, 90004122 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
9000411a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
9000411e:	f7ff fff1 	bl	90004104 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
90004122:	2302      	movs	r3, #2
90004124:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90004128:	6823      	ldr	r3, [r4, #0]
9000412a:	699a      	ldr	r2, [r3, #24]
9000412c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90004130:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004132:	6999      	ldr	r1, [r3, #24]
90004134:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
90004138:	4302      	orrs	r2, r0
9000413a:	68e0      	ldr	r0, [r4, #12]
9000413c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000413e:	6920      	ldr	r0, [r4, #16]
90004140:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
90004142:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004144:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90004146:	4925      	ldr	r1, [pc, #148]	; (900041dc <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004148:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000414a:	689a      	ldr	r2, [r3, #8]
9000414c:	400a      	ands	r2, r1
9000414e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90004150:	689a      	ldr	r2, [r3, #8]
90004152:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90004156:	69a0      	ldr	r0, [r4, #24]
90004158:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000415a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000415c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000415e:	68da      	ldr	r2, [r3, #12]
90004160:	400a      	ands	r2, r1
90004162:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90004164:	68da      	ldr	r2, [r3, #12]
90004166:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000416a:	6a20      	ldr	r0, [r4, #32]
9000416c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000416e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90004170:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
90004172:	691a      	ldr	r2, [r3, #16]
90004174:	400a      	ands	r2, r1
90004176:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90004178:	691a      	ldr	r2, [r3, #16]
9000417a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000417e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90004180:	4302      	orrs	r2, r0
90004182:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
90004184:	695a      	ldr	r2, [r3, #20]
90004186:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
90004188:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
9000418a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
9000418c:	695a      	ldr	r2, [r3, #20]
9000418e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90004192:	6b21      	ldr	r1, [r4, #48]	; 0x30
90004194:	430a      	orrs	r2, r1
90004196:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000419a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000419e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900041a2:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900041a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900041a8:	6add      	ldr	r5, [r3, #44]	; 0x2c
900041aa:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
900041ae:	432a      	orrs	r2, r5
900041b0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900041b4:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900041b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
900041ba:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900041bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900041be:	f042 0206 	orr.w	r2, r2, #6
900041c2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
900041c4:	699a      	ldr	r2, [r3, #24]
900041c6:	f042 0201 	orr.w	r2, r2, #1
900041ca:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
900041cc:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900041ce:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
900041d2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
900041d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
900041d8:	2001      	movs	r0, #1
900041da:	e7fc      	b.n	900041d6 <HAL_LTDC_Init+0xce>
900041dc:	f000f800 	.word	0xf000f800

900041e0 <HAL_LTDC_ConfigLayer>:
{
900041e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
900041e4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
900041e8:	4606      	mov	r6, r0
900041ea:	460f      	mov	r7, r1
900041ec:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
900041ee:	2b01      	cmp	r3, #1
900041f0:	f04f 0002 	mov.w	r0, #2
900041f4:	d01f      	beq.n	90004236 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900041f6:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
900041f8:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900041fc:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
900041fe:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90004202:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
90004206:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000420a:	3438      	adds	r4, #56	; 0x38
9000420c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000420e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90004210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90004212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90004214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90004216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90004218:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
9000421a:	4630      	mov	r0, r6
9000421c:	4662      	mov	r2, ip
9000421e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90004220:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90004222:	f7ff feed 	bl	90004000 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90004226:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
90004228:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000422a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
9000422e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
90004232:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
90004236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9000423a <HAL_LTDC_GetState>:
  return hltdc->State;
9000423a:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
9000423e:	4770      	bx	lr

90004240 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
90004240:	4b19      	ldr	r3, [pc, #100]	; (900042a8 <HAL_PWREx_EnableOverDrive+0x68>)
{
90004242:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
90004244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
90004246:	4c19      	ldr	r4, [pc, #100]	; (900042ac <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
90004248:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
9000424c:	641a      	str	r2, [r3, #64]	; 0x40
9000424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90004254:	9301      	str	r3, [sp, #4]
90004256:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
90004258:	6823      	ldr	r3, [r4, #0]
9000425a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000425e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90004260:	f7fe faa0 	bl	900027a4 <HAL_GetTick>
90004264:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90004266:	6863      	ldr	r3, [r4, #4]
90004268:	03da      	lsls	r2, r3, #15
9000426a:	d50c      	bpl.n	90004286 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
9000426c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
9000426e:	4d0f      	ldr	r5, [pc, #60]	; (900042ac <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90004270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90004274:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
90004276:	f7fe fa95 	bl	900027a4 <HAL_GetTick>
9000427a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
9000427c:	686b      	ldr	r3, [r5, #4]
9000427e:	039b      	lsls	r3, r3, #14
90004280:	d50a      	bpl.n	90004298 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
90004282:	2000      	movs	r0, #0
90004284:	e006      	b.n	90004294 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90004286:	f7fe fa8d 	bl	900027a4 <HAL_GetTick>
9000428a:	1b40      	subs	r0, r0, r5
9000428c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
90004290:	d9e9      	bls.n	90004266 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
90004292:	2003      	movs	r0, #3
}
90004294:	b003      	add	sp, #12
90004296:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90004298:	f7fe fa84 	bl	900027a4 <HAL_GetTick>
9000429c:	1b00      	subs	r0, r0, r4
9000429e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
900042a2:	d9eb      	bls.n	9000427c <HAL_PWREx_EnableOverDrive+0x3c>
900042a4:	e7f5      	b.n	90004292 <HAL_PWREx_EnableOverDrive+0x52>
900042a6:	bf00      	nop
900042a8:	40023800 	.word	0x40023800
900042ac:	40007000 	.word	0x40007000

900042b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900042b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
900042b4:	4604      	mov	r4, r0
900042b6:	b340      	cbz	r0, 9000430a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900042b8:	6803      	ldr	r3, [r0, #0]
900042ba:	07db      	lsls	r3, r3, #31
900042bc:	d410      	bmi.n	900042e0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900042be:	6823      	ldr	r3, [r4, #0]
900042c0:	079f      	lsls	r7, r3, #30
900042c2:	d461      	bmi.n	90004388 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900042c4:	6823      	ldr	r3, [r4, #0]
900042c6:	0719      	lsls	r1, r3, #28
900042c8:	f100 80a6 	bmi.w	90004418 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
900042cc:	6823      	ldr	r3, [r4, #0]
900042ce:	075a      	lsls	r2, r3, #29
900042d0:	f100 80c7 	bmi.w	90004462 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
900042d4:	69a2      	ldr	r2, [r4, #24]
900042d6:	2a00      	cmp	r2, #0
900042d8:	f040 8130 	bne.w	9000453c <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
900042dc:	2000      	movs	r0, #0
900042de:	e02c      	b.n	9000433a <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
900042e0:	4b94      	ldr	r3, [pc, #592]	; (90004534 <HAL_RCC_OscConfig+0x284>)
900042e2:	689a      	ldr	r2, [r3, #8]
900042e4:	f002 020c 	and.w	r2, r2, #12
900042e8:	2a04      	cmp	r2, #4
900042ea:	d007      	beq.n	900042fc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
900042ec:	689a      	ldr	r2, [r3, #8]
900042ee:	f002 020c 	and.w	r2, r2, #12
900042f2:	2a08      	cmp	r2, #8
900042f4:	d10b      	bne.n	9000430e <HAL_RCC_OscConfig+0x5e>
900042f6:	685b      	ldr	r3, [r3, #4]
900042f8:	025e      	lsls	r6, r3, #9
900042fa:	d508      	bpl.n	9000430e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900042fc:	4b8d      	ldr	r3, [pc, #564]	; (90004534 <HAL_RCC_OscConfig+0x284>)
900042fe:	681b      	ldr	r3, [r3, #0]
90004300:	039d      	lsls	r5, r3, #14
90004302:	d5dc      	bpl.n	900042be <HAL_RCC_OscConfig+0xe>
90004304:	6863      	ldr	r3, [r4, #4]
90004306:	2b00      	cmp	r3, #0
90004308:	d1d9      	bne.n	900042be <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
9000430a:	2001      	movs	r0, #1
9000430c:	e015      	b.n	9000433a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000430e:	6863      	ldr	r3, [r4, #4]
90004310:	4d88      	ldr	r5, [pc, #544]	; (90004534 <HAL_RCC_OscConfig+0x284>)
90004312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90004316:	d113      	bne.n	90004340 <HAL_RCC_OscConfig+0x90>
90004318:	682b      	ldr	r3, [r5, #0]
9000431a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000431e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90004320:	f7fe fa40 	bl	900027a4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004324:	4e83      	ldr	r6, [pc, #524]	; (90004534 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
90004326:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004328:	6833      	ldr	r3, [r6, #0]
9000432a:	0398      	lsls	r0, r3, #14
9000432c:	d4c7      	bmi.n	900042be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000432e:	f7fe fa39 	bl	900027a4 <HAL_GetTick>
90004332:	1b40      	subs	r0, r0, r5
90004334:	2864      	cmp	r0, #100	; 0x64
90004336:	d9f7      	bls.n	90004328 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
90004338:	2003      	movs	r0, #3
}
9000433a:	b002      	add	sp, #8
9000433c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90004340:	b99b      	cbnz	r3, 9000436a <HAL_RCC_OscConfig+0xba>
90004342:	682b      	ldr	r3, [r5, #0]
90004344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90004348:	602b      	str	r3, [r5, #0]
9000434a:	682b      	ldr	r3, [r5, #0]
9000434c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90004350:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90004352:	f7fe fa27 	bl	900027a4 <HAL_GetTick>
90004356:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90004358:	682b      	ldr	r3, [r5, #0]
9000435a:	0399      	lsls	r1, r3, #14
9000435c:	d5af      	bpl.n	900042be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000435e:	f7fe fa21 	bl	900027a4 <HAL_GetTick>
90004362:	1b80      	subs	r0, r0, r6
90004364:	2864      	cmp	r0, #100	; 0x64
90004366:	d9f7      	bls.n	90004358 <HAL_RCC_OscConfig+0xa8>
90004368:	e7e6      	b.n	90004338 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000436a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000436e:	682b      	ldr	r3, [r5, #0]
90004370:	d103      	bne.n	9000437a <HAL_RCC_OscConfig+0xca>
90004372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90004376:	602b      	str	r3, [r5, #0]
90004378:	e7ce      	b.n	90004318 <HAL_RCC_OscConfig+0x68>
9000437a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000437e:	602b      	str	r3, [r5, #0]
90004380:	682b      	ldr	r3, [r5, #0]
90004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90004386:	e7ca      	b.n	9000431e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
90004388:	4b6a      	ldr	r3, [pc, #424]	; (90004534 <HAL_RCC_OscConfig+0x284>)
9000438a:	689a      	ldr	r2, [r3, #8]
9000438c:	f012 0f0c 	tst.w	r2, #12
90004390:	d007      	beq.n	900043a2 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
90004392:	689a      	ldr	r2, [r3, #8]
90004394:	f002 020c 	and.w	r2, r2, #12
90004398:	2a08      	cmp	r2, #8
9000439a:	d111      	bne.n	900043c0 <HAL_RCC_OscConfig+0x110>
9000439c:	685b      	ldr	r3, [r3, #4]
9000439e:	025a      	lsls	r2, r3, #9
900043a0:	d40e      	bmi.n	900043c0 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900043a2:	4a64      	ldr	r2, [pc, #400]	; (90004534 <HAL_RCC_OscConfig+0x284>)
900043a4:	6813      	ldr	r3, [r2, #0]
900043a6:	079b      	lsls	r3, r3, #30
900043a8:	d502      	bpl.n	900043b0 <HAL_RCC_OscConfig+0x100>
900043aa:	68e3      	ldr	r3, [r4, #12]
900043ac:	2b01      	cmp	r3, #1
900043ae:	d1ac      	bne.n	9000430a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900043b0:	6813      	ldr	r3, [r2, #0]
900043b2:	6921      	ldr	r1, [r4, #16]
900043b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
900043b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
900043bc:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
900043be:	e781      	b.n	900042c4 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
900043c0:	68e3      	ldr	r3, [r4, #12]
900043c2:	4d5c      	ldr	r5, [pc, #368]	; (90004534 <HAL_RCC_OscConfig+0x284>)
900043c4:	b1bb      	cbz	r3, 900043f6 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
900043c6:	682b      	ldr	r3, [r5, #0]
900043c8:	f043 0301 	orr.w	r3, r3, #1
900043cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
900043ce:	f7fe f9e9 	bl	900027a4 <HAL_GetTick>
900043d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
900043d4:	682b      	ldr	r3, [r5, #0]
900043d6:	079f      	lsls	r7, r3, #30
900043d8:	d507      	bpl.n	900043ea <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900043da:	682b      	ldr	r3, [r5, #0]
900043dc:	6922      	ldr	r2, [r4, #16]
900043de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
900043e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
900043e6:	602b      	str	r3, [r5, #0]
900043e8:	e76c      	b.n	900042c4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900043ea:	f7fe f9db 	bl	900027a4 <HAL_GetTick>
900043ee:	1b80      	subs	r0, r0, r6
900043f0:	2802      	cmp	r0, #2
900043f2:	d9ef      	bls.n	900043d4 <HAL_RCC_OscConfig+0x124>
900043f4:	e7a0      	b.n	90004338 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
900043f6:	682b      	ldr	r3, [r5, #0]
900043f8:	f023 0301 	bic.w	r3, r3, #1
900043fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
900043fe:	f7fe f9d1 	bl	900027a4 <HAL_GetTick>
90004402:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90004404:	682b      	ldr	r3, [r5, #0]
90004406:	0798      	lsls	r0, r3, #30
90004408:	f57f af5c 	bpl.w	900042c4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000440c:	f7fe f9ca 	bl	900027a4 <HAL_GetTick>
90004410:	1b80      	subs	r0, r0, r6
90004412:	2802      	cmp	r0, #2
90004414:	d9f6      	bls.n	90004404 <HAL_RCC_OscConfig+0x154>
90004416:	e78f      	b.n	90004338 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90004418:	6963      	ldr	r3, [r4, #20]
9000441a:	4d46      	ldr	r5, [pc, #280]	; (90004534 <HAL_RCC_OscConfig+0x284>)
9000441c:	b183      	cbz	r3, 90004440 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
9000441e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90004420:	f043 0301 	orr.w	r3, r3, #1
90004424:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90004426:	f7fe f9bd 	bl	900027a4 <HAL_GetTick>
9000442a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
9000442c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000442e:	079b      	lsls	r3, r3, #30
90004430:	f53f af4c 	bmi.w	900042cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90004434:	f7fe f9b6 	bl	900027a4 <HAL_GetTick>
90004438:	1b80      	subs	r0, r0, r6
9000443a:	2802      	cmp	r0, #2
9000443c:	d9f6      	bls.n	9000442c <HAL_RCC_OscConfig+0x17c>
9000443e:	e77b      	b.n	90004338 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
90004440:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90004442:	f023 0301 	bic.w	r3, r3, #1
90004446:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90004448:	f7fe f9ac 	bl	900027a4 <HAL_GetTick>
9000444c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
9000444e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90004450:	079f      	lsls	r7, r3, #30
90004452:	f57f af3b 	bpl.w	900042cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90004456:	f7fe f9a5 	bl	900027a4 <HAL_GetTick>
9000445a:	1b80      	subs	r0, r0, r6
9000445c:	2802      	cmp	r0, #2
9000445e:	d9f6      	bls.n	9000444e <HAL_RCC_OscConfig+0x19e>
90004460:	e76a      	b.n	90004338 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
90004462:	4b34      	ldr	r3, [pc, #208]	; (90004534 <HAL_RCC_OscConfig+0x284>)
90004464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90004466:	00d0      	lsls	r0, r2, #3
90004468:	d427      	bmi.n	900044ba <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
9000446a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
9000446c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
9000446e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90004472:	641a      	str	r2, [r3, #64]	; 0x40
90004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000447a:	9301      	str	r3, [sp, #4]
9000447c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
9000447e:	4d2e      	ldr	r5, [pc, #184]	; (90004538 <HAL_RCC_OscConfig+0x288>)
90004480:	682b      	ldr	r3, [r5, #0]
90004482:	05d9      	lsls	r1, r3, #23
90004484:	d51b      	bpl.n	900044be <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90004486:	68a3      	ldr	r3, [r4, #8]
90004488:	4d2a      	ldr	r5, [pc, #168]	; (90004534 <HAL_RCC_OscConfig+0x284>)
9000448a:	2b01      	cmp	r3, #1
9000448c:	d127      	bne.n	900044de <HAL_RCC_OscConfig+0x22e>
9000448e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90004490:	f043 0301 	orr.w	r3, r3, #1
90004494:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90004496:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000449a:	f7fe f983 	bl	900027a4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
9000449e:	4e25      	ldr	r6, [pc, #148]	; (90004534 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
900044a0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
900044a2:	6f33      	ldr	r3, [r6, #112]	; 0x70
900044a4:	079b      	lsls	r3, r3, #30
900044a6:	d53f      	bpl.n	90004528 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
900044a8:	2f00      	cmp	r7, #0
900044aa:	f43f af13 	beq.w	900042d4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
900044ae:	4a21      	ldr	r2, [pc, #132]	; (90004534 <HAL_RCC_OscConfig+0x284>)
900044b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
900044b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
900044b6:	6413      	str	r3, [r2, #64]	; 0x40
900044b8:	e70c      	b.n	900042d4 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
900044ba:	2700      	movs	r7, #0
900044bc:	e7df      	b.n	9000447e <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
900044be:	682b      	ldr	r3, [r5, #0]
900044c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900044c4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
900044c6:	f7fe f96d 	bl	900027a4 <HAL_GetTick>
900044ca:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
900044cc:	682b      	ldr	r3, [r5, #0]
900044ce:	05da      	lsls	r2, r3, #23
900044d0:	d4d9      	bmi.n	90004486 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900044d2:	f7fe f967 	bl	900027a4 <HAL_GetTick>
900044d6:	1b80      	subs	r0, r0, r6
900044d8:	2864      	cmp	r0, #100	; 0x64
900044da:	d9f7      	bls.n	900044cc <HAL_RCC_OscConfig+0x21c>
900044dc:	e72c      	b.n	90004338 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900044de:	b9ab      	cbnz	r3, 9000450c <HAL_RCC_OscConfig+0x25c>
900044e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900044e2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900044e6:	f023 0301 	bic.w	r3, r3, #1
900044ea:	672b      	str	r3, [r5, #112]	; 0x70
900044ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
900044ee:	f023 0304 	bic.w	r3, r3, #4
900044f2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
900044f4:	f7fe f956 	bl	900027a4 <HAL_GetTick>
900044f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
900044fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
900044fc:	0798      	lsls	r0, r3, #30
900044fe:	d5d3      	bpl.n	900044a8 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90004500:	f7fe f950 	bl	900027a4 <HAL_GetTick>
90004504:	1b80      	subs	r0, r0, r6
90004506:	4540      	cmp	r0, r8
90004508:	d9f7      	bls.n	900044fa <HAL_RCC_OscConfig+0x24a>
9000450a:	e715      	b.n	90004338 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000450c:	2b05      	cmp	r3, #5
9000450e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90004510:	d103      	bne.n	9000451a <HAL_RCC_OscConfig+0x26a>
90004512:	f043 0304 	orr.w	r3, r3, #4
90004516:	672b      	str	r3, [r5, #112]	; 0x70
90004518:	e7b9      	b.n	9000448e <HAL_RCC_OscConfig+0x1de>
9000451a:	f023 0301 	bic.w	r3, r3, #1
9000451e:	672b      	str	r3, [r5, #112]	; 0x70
90004520:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90004522:	f023 0304 	bic.w	r3, r3, #4
90004526:	e7b5      	b.n	90004494 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90004528:	f7fe f93c 	bl	900027a4 <HAL_GetTick>
9000452c:	1b40      	subs	r0, r0, r5
9000452e:	4540      	cmp	r0, r8
90004530:	d9b7      	bls.n	900044a2 <HAL_RCC_OscConfig+0x1f2>
90004532:	e701      	b.n	90004338 <HAL_RCC_OscConfig+0x88>
90004534:	40023800 	.word	0x40023800
90004538:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
9000453c:	4d38      	ldr	r5, [pc, #224]	; (90004620 <HAL_RCC_OscConfig+0x370>)
9000453e:	68ab      	ldr	r3, [r5, #8]
90004540:	f003 030c 	and.w	r3, r3, #12
90004544:	2b08      	cmp	r3, #8
90004546:	d041      	beq.n	900045cc <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
90004548:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000454a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
9000454c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90004550:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90004552:	d12e      	bne.n	900045b2 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
90004554:	f7fe f926 	bl	900027a4 <HAL_GetTick>
90004558:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
9000455a:	682b      	ldr	r3, [r5, #0]
9000455c:	0199      	lsls	r1, r3, #6
9000455e:	d422      	bmi.n	900045a6 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90004560:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90004562:	085b      	lsrs	r3, r3, #1
90004564:	1e5a      	subs	r2, r3, #1
90004566:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
9000456a:	430b      	orrs	r3, r1
9000456c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90004570:	6a62      	ldr	r2, [r4, #36]	; 0x24
90004572:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90004576:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90004578:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000457c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
90004580:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
90004582:	682b      	ldr	r3, [r5, #0]
90004584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90004588:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000458a:	f7fe f90b 	bl	900027a4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
9000458e:	4d24      	ldr	r5, [pc, #144]	; (90004620 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
90004590:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90004592:	682b      	ldr	r3, [r5, #0]
90004594:	019a      	lsls	r2, r3, #6
90004596:	f53f aea1 	bmi.w	900042dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000459a:	f7fe f903 	bl	900027a4 <HAL_GetTick>
9000459e:	1b00      	subs	r0, r0, r4
900045a0:	2802      	cmp	r0, #2
900045a2:	d9f6      	bls.n	90004592 <HAL_RCC_OscConfig+0x2e2>
900045a4:	e6c8      	b.n	90004338 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900045a6:	f7fe f8fd 	bl	900027a4 <HAL_GetTick>
900045aa:	1b80      	subs	r0, r0, r6
900045ac:	2802      	cmp	r0, #2
900045ae:	d9d4      	bls.n	9000455a <HAL_RCC_OscConfig+0x2aa>
900045b0:	e6c2      	b.n	90004338 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
900045b2:	f7fe f8f7 	bl	900027a4 <HAL_GetTick>
900045b6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
900045b8:	682b      	ldr	r3, [r5, #0]
900045ba:	019b      	lsls	r3, r3, #6
900045bc:	f57f ae8e 	bpl.w	900042dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900045c0:	f7fe f8f0 	bl	900027a4 <HAL_GetTick>
900045c4:	1b00      	subs	r0, r0, r4
900045c6:	2802      	cmp	r0, #2
900045c8:	d9f6      	bls.n	900045b8 <HAL_RCC_OscConfig+0x308>
900045ca:	e6b5      	b.n	90004338 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900045cc:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
900045ce:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900045d0:	f43f ae9b 	beq.w	9000430a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900045d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900045d8:	69e1      	ldr	r1, [r4, #28]
900045da:	428a      	cmp	r2, r1
900045dc:	f47f ae95 	bne.w	9000430a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
900045e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900045e4:	6a21      	ldr	r1, [r4, #32]
900045e6:	428a      	cmp	r2, r1
900045e8:	f47f ae8f 	bne.w	9000430a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
900045ec:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
900045f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
900045f2:	401a      	ands	r2, r3
900045f4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
900045f8:	f47f ae87 	bne.w	9000430a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
900045fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900045fe:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
90004602:	0852      	lsrs	r2, r2, #1
90004604:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90004606:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
9000460a:	f47f ae7e 	bne.w	9000430a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
9000460e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90004612:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90004614:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
90004618:	f43f ae60 	beq.w	900042dc <HAL_RCC_OscConfig+0x2c>
9000461c:	e675      	b.n	9000430a <HAL_RCC_OscConfig+0x5a>
9000461e:	bf00      	nop
90004620:	40023800 	.word	0x40023800

90004624 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
90004624:	4913      	ldr	r1, [pc, #76]	; (90004674 <HAL_RCC_GetSysClockFreq+0x50>)
{
90004626:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
90004628:	688b      	ldr	r3, [r1, #8]
9000462a:	f003 030c 	and.w	r3, r3, #12
9000462e:	2b04      	cmp	r3, #4
90004630:	d01b      	beq.n	9000466a <HAL_RCC_GetSysClockFreq+0x46>
90004632:	2b08      	cmp	r3, #8
90004634:	d11b      	bne.n	9000466e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90004636:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90004638:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
9000463a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
9000463c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90004640:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90004644:	f3c1 1188 	ubfx	r1, r1, #6, #9
90004648:	bf1a      	itte	ne
9000464a:	480b      	ldrne	r0, [pc, #44]	; (90004678 <HAL_RCC_GetSysClockFreq+0x54>)
9000464c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
9000464e:	480b      	ldreq	r0, [pc, #44]	; (9000467c <HAL_RCC_GetSysClockFreq+0x58>)
90004650:	fba1 0100 	umull	r0, r1, r1, r0
90004654:	f7fb fe2c 	bl	900002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
90004658:	4b06      	ldr	r3, [pc, #24]	; (90004674 <HAL_RCC_GetSysClockFreq+0x50>)
9000465a:	685b      	ldr	r3, [r3, #4]
9000465c:	f3c3 4301 	ubfx	r3, r3, #16, #2
90004660:	3301      	adds	r3, #1
90004662:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
90004664:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
90004668:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000466a:	4803      	ldr	r0, [pc, #12]	; (90004678 <HAL_RCC_GetSysClockFreq+0x54>)
9000466c:	e7fc      	b.n	90004668 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
9000466e:	4803      	ldr	r0, [pc, #12]	; (9000467c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
90004670:	e7fa      	b.n	90004668 <HAL_RCC_GetSysClockFreq+0x44>
90004672:	bf00      	nop
90004674:	40023800 	.word	0x40023800
90004678:	017d7840 	.word	0x017d7840
9000467c:	00f42400 	.word	0x00f42400

90004680 <HAL_RCC_ClockConfig>:
{
90004680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90004684:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
90004686:	4604      	mov	r4, r0
90004688:	b910      	cbnz	r0, 90004690 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
9000468a:	2001      	movs	r0, #1
}
9000468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90004690:	4a45      	ldr	r2, [pc, #276]	; (900047a8 <HAL_RCC_ClockConfig+0x128>)
90004692:	6813      	ldr	r3, [r2, #0]
90004694:	f003 030f 	and.w	r3, r3, #15
90004698:	428b      	cmp	r3, r1
9000469a:	d328      	bcc.n	900046ee <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000469c:	6821      	ldr	r1, [r4, #0]
9000469e:	078f      	lsls	r7, r1, #30
900046a0:	d430      	bmi.n	90004704 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
900046a2:	07c8      	lsls	r0, r1, #31
900046a4:	d443      	bmi.n	9000472e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900046a6:	4a40      	ldr	r2, [pc, #256]	; (900047a8 <HAL_RCC_ClockConfig+0x128>)
900046a8:	6813      	ldr	r3, [r2, #0]
900046aa:	f003 030f 	and.w	r3, r3, #15
900046ae:	42ab      	cmp	r3, r5
900046b0:	d866      	bhi.n	90004780 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900046b2:	6822      	ldr	r2, [r4, #0]
900046b4:	0751      	lsls	r1, r2, #29
900046b6:	d46f      	bmi.n	90004798 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900046b8:	0713      	lsls	r3, r2, #28
900046ba:	d507      	bpl.n	900046cc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
900046bc:	4a3b      	ldr	r2, [pc, #236]	; (900047ac <HAL_RCC_ClockConfig+0x12c>)
900046be:	6921      	ldr	r1, [r4, #16]
900046c0:	6893      	ldr	r3, [r2, #8]
900046c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
900046c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
900046ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
900046cc:	f7ff ffaa 	bl	90004624 <HAL_RCC_GetSysClockFreq>
900046d0:	4b36      	ldr	r3, [pc, #216]	; (900047ac <HAL_RCC_ClockConfig+0x12c>)
900046d2:	4a37      	ldr	r2, [pc, #220]	; (900047b0 <HAL_RCC_ClockConfig+0x130>)
900046d4:	689b      	ldr	r3, [r3, #8]
900046d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
900046da:	5cd3      	ldrb	r3, [r2, r3]
900046dc:	40d8      	lsrs	r0, r3
900046de:	4b35      	ldr	r3, [pc, #212]	; (900047b4 <HAL_RCC_ClockConfig+0x134>)
900046e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
900046e2:	4b35      	ldr	r3, [pc, #212]	; (900047b8 <HAL_RCC_ClockConfig+0x138>)
900046e4:	6818      	ldr	r0, [r3, #0]
900046e6:	f7fe f81d 	bl	90002724 <HAL_InitTick>
  return HAL_OK;
900046ea:	2000      	movs	r0, #0
900046ec:	e7ce      	b.n	9000468c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
900046ee:	6813      	ldr	r3, [r2, #0]
900046f0:	f023 030f 	bic.w	r3, r3, #15
900046f4:	430b      	orrs	r3, r1
900046f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900046f8:	6813      	ldr	r3, [r2, #0]
900046fa:	f003 030f 	and.w	r3, r3, #15
900046fe:	428b      	cmp	r3, r1
90004700:	d1c3      	bne.n	9000468a <HAL_RCC_ClockConfig+0xa>
90004702:	e7cb      	b.n	9000469c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90004704:	f011 0f04 	tst.w	r1, #4
90004708:	4b28      	ldr	r3, [pc, #160]	; (900047ac <HAL_RCC_ClockConfig+0x12c>)
9000470a:	d003      	beq.n	90004714 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
9000470c:	689a      	ldr	r2, [r3, #8]
9000470e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
90004712:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004714:	070e      	lsls	r6, r1, #28
90004716:	d503      	bpl.n	90004720 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90004718:	689a      	ldr	r2, [r3, #8]
9000471a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
9000471e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90004720:	689a      	ldr	r2, [r3, #8]
90004722:	68a0      	ldr	r0, [r4, #8]
90004724:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
90004728:	4302      	orrs	r2, r0
9000472a:	609a      	str	r2, [r3, #8]
9000472c:	e7b9      	b.n	900046a2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000472e:	6861      	ldr	r1, [r4, #4]
90004730:	4b1e      	ldr	r3, [pc, #120]	; (900047ac <HAL_RCC_ClockConfig+0x12c>)
90004732:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004734:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90004736:	d11b      	bne.n	90004770 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004738:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
9000473c:	d0a5      	beq.n	9000468a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
9000473e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90004740:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004744:	4f19      	ldr	r7, [pc, #100]	; (900047ac <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90004746:	f022 0203 	bic.w	r2, r2, #3
9000474a:	430a      	orrs	r2, r1
9000474c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
9000474e:	f7fe f829 	bl	900027a4 <HAL_GetTick>
90004752:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004754:	68bb      	ldr	r3, [r7, #8]
90004756:	6862      	ldr	r2, [r4, #4]
90004758:	f003 030c 	and.w	r3, r3, #12
9000475c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
90004760:	d0a1      	beq.n	900046a6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90004762:	f7fe f81f 	bl	900027a4 <HAL_GetTick>
90004766:	1b80      	subs	r0, r0, r6
90004768:	4540      	cmp	r0, r8
9000476a:	d9f3      	bls.n	90004754 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
9000476c:	2003      	movs	r0, #3
9000476e:	e78d      	b.n	9000468c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90004770:	2902      	cmp	r1, #2
90004772:	d102      	bne.n	9000477a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90004774:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
90004778:	e7e0      	b.n	9000473c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
9000477a:	f012 0f02 	tst.w	r2, #2
9000477e:	e7dd      	b.n	9000473c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
90004780:	6813      	ldr	r3, [r2, #0]
90004782:	f023 030f 	bic.w	r3, r3, #15
90004786:	432b      	orrs	r3, r5
90004788:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000478a:	6813      	ldr	r3, [r2, #0]
9000478c:	f003 030f 	and.w	r3, r3, #15
90004790:	42ab      	cmp	r3, r5
90004792:	f47f af7a 	bne.w	9000468a <HAL_RCC_ClockConfig+0xa>
90004796:	e78c      	b.n	900046b2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90004798:	4904      	ldr	r1, [pc, #16]	; (900047ac <HAL_RCC_ClockConfig+0x12c>)
9000479a:	68e0      	ldr	r0, [r4, #12]
9000479c:	688b      	ldr	r3, [r1, #8]
9000479e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
900047a2:	4303      	orrs	r3, r0
900047a4:	608b      	str	r3, [r1, #8]
900047a6:	e787      	b.n	900046b8 <HAL_RCC_ClockConfig+0x38>
900047a8:	40023c00 	.word	0x40023c00
900047ac:	40023800 	.word	0x40023800
900047b0:	90010640 	.word	0x90010640
900047b4:	200000b4 	.word	0x200000b4
900047b8:	20000090 	.word	0x20000090

900047bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
900047bc:	6803      	ldr	r3, [r0, #0]
{
900047be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
900047c2:	f013 0601 	ands.w	r6, r3, #1
{
900047c6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
900047c8:	d00b      	beq.n	900047e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
900047ca:	4aad      	ldr	r2, [pc, #692]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900047cc:	6891      	ldr	r1, [r2, #8]
900047ce:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
900047d2:	6091      	str	r1, [r2, #8]
900047d4:	6b46      	ldr	r6, [r0, #52]	; 0x34
900047d6:	6891      	ldr	r1, [r2, #8]
900047d8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
900047da:	fab6 f686 	clz	r6, r6
900047de:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
900047e0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
900047e2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
900047e6:	d012      	beq.n	9000480e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900047e8:	49a5      	ldr	r1, [pc, #660]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900047ea:	6be5      	ldr	r5, [r4, #60]	; 0x3c
900047ec:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
900047f0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900047f4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
900047f8:	bf08      	it	eq
900047fa:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900047fc:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90004800:	bf16      	itet	ne
90004802:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
90004806:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90004808:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000480a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
9000480e:	02d9      	lsls	r1, r3, #11
90004810:	d510      	bpl.n	90004834 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90004812:	489b      	ldr	r0, [pc, #620]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004814:	6c21      	ldr	r1, [r4, #64]	; 0x40
90004816:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
9000481a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
9000481e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
90004822:	ea42 0201 	orr.w	r2, r2, r1
90004826:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
9000482a:	f000 8186 	beq.w	90004b3a <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
9000482e:	2900      	cmp	r1, #0
90004830:	bf08      	it	eq
90004832:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
90004834:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
90004838:	bf18      	it	ne
9000483a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
9000483c:	069a      	lsls	r2, r3, #26
9000483e:	d532      	bpl.n	900048a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
90004840:	4b8f      	ldr	r3, [pc, #572]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90004842:	4f90      	ldr	r7, [pc, #576]	; (90004a84 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
90004844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90004846:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
9000484a:	641a      	str	r2, [r3, #64]	; 0x40
9000484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000484e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90004852:	9301      	str	r3, [sp, #4]
90004854:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
90004856:	683b      	ldr	r3, [r7, #0]
90004858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000485c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000485e:	f7fd ffa1 	bl	900027a4 <HAL_GetTick>
90004862:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90004864:	683b      	ldr	r3, [r7, #0]
90004866:	05db      	lsls	r3, r3, #23
90004868:	f140 8169 	bpl.w	90004b3e <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
9000486c:	4f84      	ldr	r7, [pc, #528]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
9000486e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90004870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90004872:	f413 7340 	ands.w	r3, r3, #768	; 0x300
90004876:	f040 816d 	bne.w	90004b54 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000487a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000487c:	f403 7240 	and.w	r2, r3, #768	; 0x300
90004880:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
90004884:	4a7e      	ldr	r2, [pc, #504]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004886:	f040 818a 	bne.w	90004b9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
9000488a:	6891      	ldr	r1, [r2, #8]
9000488c:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
90004890:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
90004894:	f420 7040 	bic.w	r0, r0, #768	; 0x300
90004898:	4301      	orrs	r1, r0
9000489a:	6091      	str	r1, [r2, #8]
9000489c:	f3c3 030b 	ubfx	r3, r3, #0, #12
900048a0:	6f11      	ldr	r1, [r2, #112]	; 0x70
900048a2:	430b      	orrs	r3, r1
900048a4:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
900048a6:	6823      	ldr	r3, [r4, #0]
900048a8:	06da      	lsls	r2, r3, #27
900048aa:	d50c      	bpl.n	900048c6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
900048ac:	4a74      	ldr	r2, [pc, #464]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900048ae:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
900048b2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
900048b6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
900048ba:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
900048be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
900048c0:	4301      	orrs	r1, r0
900048c2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
900048c6:	045f      	lsls	r7, r3, #17
900048c8:	d508      	bpl.n	900048dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
900048ca:	496d      	ldr	r1, [pc, #436]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900048cc:	6e60      	ldr	r0, [r4, #100]	; 0x64
900048ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900048d2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
900048d6:	4302      	orrs	r2, r0
900048d8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
900048dc:	0418      	lsls	r0, r3, #16
900048de:	d508      	bpl.n	900048f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
900048e0:	4967      	ldr	r1, [pc, #412]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900048e2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
900048e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900048e8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
900048ec:	4302      	orrs	r2, r0
900048ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
900048f2:	03d9      	lsls	r1, r3, #15
900048f4:	d508      	bpl.n	90004908 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
900048f6:	4962      	ldr	r1, [pc, #392]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900048f8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
900048fa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900048fe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
90004902:	4302      	orrs	r2, r0
90004904:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90004908:	039a      	lsls	r2, r3, #14
9000490a:	d508      	bpl.n	9000491e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000490c:	495c      	ldr	r1, [pc, #368]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
9000490e:	6f20      	ldr	r0, [r4, #112]	; 0x70
90004910:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004914:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
90004918:	4302      	orrs	r2, r0
9000491a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
9000491e:	065f      	lsls	r7, r3, #25
90004920:	d508      	bpl.n	90004934 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
90004922:	4957      	ldr	r1, [pc, #348]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004924:	6c60      	ldr	r0, [r4, #68]	; 0x44
90004926:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000492a:	f022 0203 	bic.w	r2, r2, #3
9000492e:	4302      	orrs	r2, r0
90004930:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
90004934:	0618      	lsls	r0, r3, #24
90004936:	d508      	bpl.n	9000494a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
90004938:	4951      	ldr	r1, [pc, #324]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
9000493a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000493c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004940:	f022 020c 	bic.w	r2, r2, #12
90004944:	4302      	orrs	r2, r0
90004946:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
9000494a:	05d9      	lsls	r1, r3, #23
9000494c:	d508      	bpl.n	90004960 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
9000494e:	494c      	ldr	r1, [pc, #304]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004950:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90004952:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004956:	f022 0230 	bic.w	r2, r2, #48	; 0x30
9000495a:	4302      	orrs	r2, r0
9000495c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
90004960:	059a      	lsls	r2, r3, #22
90004962:	d508      	bpl.n	90004976 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
90004964:	4946      	ldr	r1, [pc, #280]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004966:	6d20      	ldr	r0, [r4, #80]	; 0x50
90004968:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000496c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
90004970:	4302      	orrs	r2, r0
90004972:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
90004976:	055f      	lsls	r7, r3, #21
90004978:	d508      	bpl.n	9000498c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
9000497a:	4941      	ldr	r1, [pc, #260]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
9000497c:	6d60      	ldr	r0, [r4, #84]	; 0x54
9000497e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004982:	f422 7240 	bic.w	r2, r2, #768	; 0x300
90004986:	4302      	orrs	r2, r0
90004988:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
9000498c:	0518      	lsls	r0, r3, #20
9000498e:	d508      	bpl.n	900049a2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
90004990:	493b      	ldr	r1, [pc, #236]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004992:	6da0      	ldr	r0, [r4, #88]	; 0x58
90004994:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004998:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
9000499c:	4302      	orrs	r2, r0
9000499e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
900049a2:	04d9      	lsls	r1, r3, #19
900049a4:	d508      	bpl.n	900049b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
900049a6:	4936      	ldr	r1, [pc, #216]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900049a8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
900049aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900049ae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
900049b2:	4302      	orrs	r2, r0
900049b4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
900049b8:	049a      	lsls	r2, r3, #18
900049ba:	d508      	bpl.n	900049ce <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
900049bc:	4930      	ldr	r1, [pc, #192]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900049be:	6e20      	ldr	r0, [r4, #96]	; 0x60
900049c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900049c4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
900049c8:	4302      	orrs	r2, r0
900049ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
900049ce:	025f      	lsls	r7, r3, #9
900049d0:	d508      	bpl.n	900049e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
900049d2:	492b      	ldr	r1, [pc, #172]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900049d4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
900049d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900049da:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
900049de:	4302      	orrs	r2, r0
900049e0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
900049e4:	0298      	lsls	r0, r3, #10
900049e6:	d50c      	bpl.n	90004a02 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900049e8:	4825      	ldr	r0, [pc, #148]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900049ea:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
900049ec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
900049f0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900049f4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
900049f8:	bf08      	it	eq
900049fa:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900049fc:	430a      	orrs	r2, r1
900049fe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
90004a02:	f013 0f08 	tst.w	r3, #8
90004a06:	bf18      	it	ne
90004a08:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90004a0a:	0359      	lsls	r1, r3, #13
90004a0c:	d508      	bpl.n	90004a20 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90004a0e:	491c      	ldr	r1, [pc, #112]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004a10:	6f60      	ldr	r0, [r4, #116]	; 0x74
90004a12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004a16:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
90004a1a:	4302      	orrs	r2, r0
90004a1c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
90004a20:	021a      	lsls	r2, r3, #8
90004a22:	d509      	bpl.n	90004a38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
90004a24:	4916      	ldr	r1, [pc, #88]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004a26:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
90004a2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004a2e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
90004a32:	4302      	orrs	r2, r0
90004a34:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
90004a38:	2e01      	cmp	r6, #1
90004a3a:	f000 80b4 	beq.w	90004ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
90004a3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90004a42:	f000 80b0 	beq.w	90004ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
90004a46:	2d01      	cmp	r5, #1
90004a48:	d175      	bne.n	90004b36 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
90004a4a:	4d0d      	ldr	r5, [pc, #52]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004a4c:	682b      	ldr	r3, [r5, #0]
90004a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90004a52:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004a54:	f7fd fea6 	bl	900027a4 <HAL_GetTick>
90004a58:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90004a5a:	682b      	ldr	r3, [r5, #0]
90004a5c:	009f      	lsls	r7, r3, #2
90004a5e:	f100 8126 	bmi.w	90004cae <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90004a62:	6821      	ldr	r1, [r4, #0]
90004a64:	030e      	lsls	r6, r1, #12
90004a66:	d501      	bpl.n	90004a6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90004a68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90004a6a:	b11b      	cbz	r3, 90004a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
90004a6c:	02cd      	lsls	r5, r1, #11
90004a6e:	d522      	bpl.n	90004ab6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
90004a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
90004a72:	bb03      	cbnz	r3, 90004ab6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90004a74:	4a02      	ldr	r2, [pc, #8]	; (90004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004a76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90004a7a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
90004a7e:	e003      	b.n	90004a88 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
90004a80:	40023800 	.word	0x40023800
90004a84:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
90004a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004a8c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004a90:	4303      	orrs	r3, r0
90004a92:	6960      	ldr	r0, [r4, #20]
90004a94:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004a98:	69a0      	ldr	r0, [r4, #24]
90004a9a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
90004a9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
90004aa2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90004aa6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90004aa8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
90004aac:	3801      	subs	r0, #1
90004aae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
90004ab2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
90004ab6:	0288      	lsls	r0, r1, #10
90004ab8:	d515      	bpl.n	90004ae6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
90004aba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
90004abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90004ac0:	d111      	bne.n	90004ae6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90004ac2:	4a82      	ldr	r2, [pc, #520]	; (90004ccc <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004ac4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90004ac8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
90004acc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90004ad0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004ad4:	4303      	orrs	r3, r0
90004ad6:	6960      	ldr	r0, [r4, #20]
90004ad8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004adc:	6a20      	ldr	r0, [r4, #32]
90004ade:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90004ae2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
90004ae6:	070a      	lsls	r2, r1, #28
90004ae8:	d519      	bpl.n	90004b1e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90004aea:	4a78      	ldr	r2, [pc, #480]	; (90004ccc <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004aec:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90004af0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
90004af4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
90004af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004afc:	430b      	orrs	r3, r1
90004afe:	6961      	ldr	r1, [r4, #20]
90004b00:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90004b04:	69e1      	ldr	r1, [r4, #28]
90004b06:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
90004b0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
90004b0e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90004b12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90004b14:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
90004b18:	430b      	orrs	r3, r1
90004b1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
90004b1e:	4c6b      	ldr	r4, [pc, #428]	; (90004ccc <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004b20:	6823      	ldr	r3, [r4, #0]
90004b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90004b26:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004b28:	f7fd fe3c 	bl	900027a4 <HAL_GetTick>
90004b2c:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
90004b2e:	6823      	ldr	r3, [r4, #0]
90004b30:	009b      	lsls	r3, r3, #2
90004b32:	f140 80c3 	bpl.w	90004cbc <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
90004b36:	2000      	movs	r0, #0
90004b38:	e009      	b.n	90004b4e <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
90004b3a:	2601      	movs	r6, #1
90004b3c:	e67a      	b.n	90004834 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90004b3e:	f7fd fe31 	bl	900027a4 <HAL_GetTick>
90004b42:	eba0 0008 	sub.w	r0, r0, r8
90004b46:	2864      	cmp	r0, #100	; 0x64
90004b48:	f67f ae8c 	bls.w	90004864 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
90004b4c:	2003      	movs	r0, #3
}
90004b4e:	b003      	add	sp, #12
90004b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90004b54:	f402 7240 	and.w	r2, r2, #768	; 0x300
90004b58:	429a      	cmp	r2, r3
90004b5a:	f43f ae8e 	beq.w	9000487a <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90004b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
90004b60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90004b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
90004b66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90004b6a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
90004b6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
90004b6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90004b72:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
90004b74:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
90004b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90004b78:	07d8      	lsls	r0, r3, #31
90004b7a:	f57f ae7e 	bpl.w	9000487a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
90004b7e:	f7fd fe11 	bl	900027a4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90004b82:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
90004b86:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90004b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90004b8a:	0799      	lsls	r1, r3, #30
90004b8c:	f53f ae75 	bmi.w	9000487a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90004b90:	f7fd fe08 	bl	900027a4 <HAL_GetTick>
90004b94:	eba0 0008 	sub.w	r0, r0, r8
90004b98:	4548      	cmp	r0, r9
90004b9a:	d9f5      	bls.n	90004b88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
90004b9c:	e7d6      	b.n	90004b4c <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90004b9e:	6891      	ldr	r1, [r2, #8]
90004ba0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
90004ba4:	e679      	b.n	9000489a <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
90004ba6:	4e49      	ldr	r6, [pc, #292]	; (90004ccc <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004ba8:	6833      	ldr	r3, [r6, #0]
90004baa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90004bae:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90004bb0:	f7fd fdf8 	bl	900027a4 <HAL_GetTick>
90004bb4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
90004bb6:	6833      	ldr	r3, [r6, #0]
90004bb8:	011b      	lsls	r3, r3, #4
90004bba:	d472      	bmi.n	90004ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
90004bbc:	6822      	ldr	r2, [r4, #0]
90004bbe:	07d7      	lsls	r7, r2, #31
90004bc0:	d512      	bpl.n	90004be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
90004bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
90004bc4:	b983      	cbnz	r3, 90004be8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004bc6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90004bca:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
90004bce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004bd2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
90004bd6:	430b      	orrs	r3, r1
90004bd8:	6861      	ldr	r1, [r4, #4]
90004bda:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90004bde:	68a1      	ldr	r1, [r4, #8]
90004be0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
90004be4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
90004be8:	0316      	lsls	r6, r2, #12
90004bea:	d503      	bpl.n	90004bf4 <HAL_RCCEx_PeriphCLKConfig+0x438>
90004bec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90004bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90004bf2:	d005      	beq.n	90004c00 <HAL_RCCEx_PeriphCLKConfig+0x444>
90004bf4:	02d0      	lsls	r0, r2, #11
90004bf6:	d51e      	bpl.n	90004c36 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
90004bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
90004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90004bfe:	d11a      	bne.n	90004c36 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004c00:	4932      	ldr	r1, [pc, #200]	; (90004ccc <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004c02:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90004c06:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
90004c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004c0e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004c12:	4303      	orrs	r3, r0
90004c14:	6860      	ldr	r0, [r4, #4]
90004c16:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004c1a:	68e0      	ldr	r0, [r4, #12]
90004c1c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
90004c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
90004c24:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
90004c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
90004c2a:	f020 001f 	bic.w	r0, r0, #31
90004c2e:	3b01      	subs	r3, #1
90004c30:	4303      	orrs	r3, r0
90004c32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90004c36:	01d1      	lsls	r1, r2, #7
90004c38:	d511      	bpl.n	90004c5e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90004c3a:	4924      	ldr	r1, [pc, #144]	; (90004ccc <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004c3c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90004c40:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
90004c44:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90004c48:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004c4c:	4303      	orrs	r3, r0
90004c4e:	6860      	ldr	r0, [r4, #4]
90004c50:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004c54:	6920      	ldr	r0, [r4, #16]
90004c56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90004c5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
90004c5e:	0192      	lsls	r2, r2, #6
90004c60:	d50d      	bpl.n	90004c7e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
90004c62:	6923      	ldr	r3, [r4, #16]
90004c64:	6862      	ldr	r2, [r4, #4]
90004c66:	041b      	lsls	r3, r3, #16
90004c68:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90004c6c:	68e2      	ldr	r2, [r4, #12]
90004c6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90004c72:	68a2      	ldr	r2, [r4, #8]
90004c74:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
90004c78:	4a14      	ldr	r2, [pc, #80]	; (90004ccc <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004c7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
90004c7e:	4e13      	ldr	r6, [pc, #76]	; (90004ccc <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004c80:	6833      	ldr	r3, [r6, #0]
90004c82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90004c86:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90004c88:	f7fd fd8c 	bl	900027a4 <HAL_GetTick>
90004c8c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
90004c8e:	6833      	ldr	r3, [r6, #0]
90004c90:	011b      	lsls	r3, r3, #4
90004c92:	f53f aed8 	bmi.w	90004a46 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90004c96:	f7fd fd85 	bl	900027a4 <HAL_GetTick>
90004c9a:	1bc0      	subs	r0, r0, r7
90004c9c:	2864      	cmp	r0, #100	; 0x64
90004c9e:	d9f6      	bls.n	90004c8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90004ca0:	e754      	b.n	90004b4c <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90004ca2:	f7fd fd7f 	bl	900027a4 <HAL_GetTick>
90004ca6:	1bc0      	subs	r0, r0, r7
90004ca8:	2864      	cmp	r0, #100	; 0x64
90004caa:	d984      	bls.n	90004bb6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
90004cac:	e74e      	b.n	90004b4c <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90004cae:	f7fd fd79 	bl	900027a4 <HAL_GetTick>
90004cb2:	1b80      	subs	r0, r0, r6
90004cb4:	2864      	cmp	r0, #100	; 0x64
90004cb6:	f67f aed0 	bls.w	90004a5a <HAL_RCCEx_PeriphCLKConfig+0x29e>
90004cba:	e747      	b.n	90004b4c <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90004cbc:	f7fd fd72 	bl	900027a4 <HAL_GetTick>
90004cc0:	1b40      	subs	r0, r0, r5
90004cc2:	2864      	cmp	r0, #100	; 0x64
90004cc4:	f67f af33 	bls.w	90004b2e <HAL_RCCEx_PeriphCLKConfig+0x372>
90004cc8:	e740      	b.n	90004b4c <HAL_RCCEx_PeriphCLKConfig+0x390>
90004cca:	bf00      	nop
90004ccc:	40023800 	.word	0x40023800

90004cd0 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
90004cd0:	4b53      	ldr	r3, [pc, #332]	; (90004e20 <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
90004cd2:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
90004cd4:	4b53      	ldr	r3, [pc, #332]	; (90004e24 <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
90004cd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90004cda:	f3c2 1288 	ubfx	r2, r2, #6, #9
90004cde:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004ce0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90004ce4:	f3c2 4201 	ubfx	r2, r2, #16, #2
90004ce8:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90004cea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90004cee:	f3c2 6203 	ubfx	r2, r2, #24, #4
90004cf2:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90004cf4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90004cf8:	f3c2 7202 	ubfx	r2, r2, #28, #3
90004cfc:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
90004cfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
90004d02:	f3c2 1288 	ubfx	r2, r2, #6, #9
90004d06:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90004d08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
90004d0c:	f3c2 4201 	ubfx	r2, r2, #16, #2
90004d10:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90004d12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
90004d16:	f3c2 6203 	ubfx	r2, r2, #24, #4
90004d1a:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90004d1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
90004d20:	f3c2 7202 	ubfx	r2, r2, #28, #3
90004d24:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
90004d26:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90004d2a:	f002 021f 	and.w	r2, r2, #31
90004d2e:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
90004d30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90004d34:	f3c2 2204 	ubfx	r2, r2, #8, #5
90004d38:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
90004d3a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90004d3e:	f3c2 4201 	ubfx	r2, r2, #16, #2
90004d42:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
90004d44:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90004d48:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
90004d4c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
90004d4e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90004d52:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
90004d56:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
90004d58:	689a      	ldr	r2, [r3, #8]
90004d5a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
90004d5e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
90004d60:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004d64:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
90004d68:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
90004d6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004d6e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
90004d72:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
90004d74:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004d78:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
90004d7c:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
90004d7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004d82:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
90004d86:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
90004d88:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004d8c:	f002 0203 	and.w	r2, r2, #3
90004d90:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
90004d92:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004d96:	f002 020c 	and.w	r2, r2, #12
90004d9a:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
90004d9c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004da0:	f002 0230 	and.w	r2, r2, #48	; 0x30
90004da4:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
90004da6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004daa:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
90004dae:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
90004db0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004db4:	f402 7240 	and.w	r2, r2, #768	; 0x300
90004db8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
90004dba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004dbe:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
90004dc2:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
90004dc4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004dc8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
90004dcc:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
90004dce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004dd2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
90004dd6:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
90004dd8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004ddc:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
90004de0:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
90004de2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004de6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
90004dea:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
90004dec:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004df0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
90004df4:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
90004df6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004dfa:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
90004dfe:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
90004e02:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
90004e04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
90004e06:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
90004e0a:	f402 7240 	and.w	r2, r2, #768	; 0x300
90004e0e:	430a      	orrs	r2, r1
90004e10:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
90004e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90004e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90004e1a:	6383      	str	r3, [r0, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
90004e1c:	4770      	bx	lr
90004e1e:	bf00      	nop
90004e20:	00fffff1 	.word	0x00fffff1
90004e24:	40023800 	.word	0x40023800

90004e28 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
90004e28:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
90004e2c:	d140      	bne.n	90004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  {
    saiclocksource = RCC->DCKCFGR1;
90004e2e:	4b2e      	ldr	r3, [pc, #184]	; (90004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
90004e30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
90004e34:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
90004e38:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
90004e3c:	d046      	beq.n	90004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
90004e3e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
90004e42:	d04c      	beq.n	90004ede <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
90004e44:	2a00      	cmp	r2, #0
90004e46:	d14c      	bne.n	90004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
90004e48:	685a      	ldr	r2, [r3, #4]
90004e4a:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
90004e4e:	685a      	ldr	r2, [r3, #4]
90004e50:	bf08      	it	eq
90004e52:	4b26      	ldreq	r3, [pc, #152]	; (90004eec <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
90004e54:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
90004e58:	bf18      	it	ne
90004e5a:	4b25      	ldrne	r3, [pc, #148]	; (90004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
90004e5c:	fbb3 f3f2 	udiv	r3, r3, r2
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
90004e60:	4a21      	ldr	r2, [pc, #132]	; (90004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
90004e62:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
90004e66:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
90004e6a:	f3c0 1088 	ubfx	r0, r0, #6, #9
90004e6e:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
90004e70:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
90004e74:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
90004e78:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90004e7c:	f3c3 2304 	ubfx	r3, r3, #8, #5
90004e80:	e012      	b.n	90004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
90004e82:	4b1b      	ldr	r3, [pc, #108]	; (90004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
90004e84:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
90004e88:	4a17      	ldr	r2, [pc, #92]	; (90004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
90004e8a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
90004e8e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
90004e92:	f3c0 1088 	ubfx	r0, r0, #6, #9
90004e96:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
90004e98:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
90004e9c:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
90004ea0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90004ea4:	f003 031f 	and.w	r3, r3, #31
90004ea8:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
90004eaa:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
90004eae:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
90004eb0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
90004eb4:	d115      	bne.n	90004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    saiclocksource = RCC->DCKCFGR1;
90004eb6:	4b0c      	ldr	r3, [pc, #48]	; (90004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
90004eb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
90004ebc:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
90004ec0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
90004ec4:	d002      	beq.n	90004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
90004ec6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
90004eca:	e7ba      	b.n	90004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
90004ecc:	685a      	ldr	r2, [r3, #4]
90004ece:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
90004ed2:	685a      	ldr	r2, [r3, #4]
90004ed4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
90004ed8:	d1d3      	bne.n	90004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
90004eda:	4b04      	ldr	r3, [pc, #16]	; (90004eec <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
90004edc:	e7d2      	b.n	90004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = frequency/(tmpreg);
        break;
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
90004ede:	4805      	ldr	r0, [pc, #20]	; (90004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
90004ee0:	4770      	bx	lr
    switch (saiclocksource)
90004ee2:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
90004ee4:	4770      	bx	lr
90004ee6:	bf00      	nop
90004ee8:	40023800 	.word	0x40023800
90004eec:	00f42400 	.word	0x00f42400
90004ef0:	017d7840 	.word	0x017d7840
90004ef4:	00bb8000 	.word	0x00bb8000

90004ef8 <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
  {
    tmpIT|= SAI_IT_FREQ;
90004ef8:	2901      	cmp	r1, #1
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
90004efa:	6b01      	ldr	r1, [r0, #48]	; 0x30
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
90004efc:	6842      	ldr	r2, [r0, #4]
    tmpIT|= SAI_IT_FREQ;
90004efe:	bf14      	ite	ne
90004f00:	2301      	movne	r3, #1
90004f02:	2309      	moveq	r3, #9
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
90004f04:	2908      	cmp	r1, #8
90004f06:	d105      	bne.n	90004f14 <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
90004f08:	f022 0102 	bic.w	r1, r2, #2
90004f0c:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
90004f0e:	bf08      	it	eq
90004f10:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
90004f14:	3a02      	subs	r2, #2
90004f16:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
90004f18:	bf94      	ite	ls
90004f1a:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
90004f1e:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
90004f22:	4770      	bx	lr

90004f24 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
90004f24:	4b0c      	ldr	r3, [pc, #48]	; (90004f58 <SAI_Disable.isra.0+0x34>)
90004f26:	f641 3258 	movw	r2, #7000	; 0x1b58
90004f2a:	681b      	ldr	r3, [r3, #0]
90004f2c:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
90004f30:	6802      	ldr	r2, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
90004f32:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
90004f34:	6811      	ldr	r1, [r2, #0]
90004f36:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
90004f3a:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
90004f3c:	3b01      	subs	r3, #1
90004f3e:	d206      	bcs.n	90004f4e <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
90004f40:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
90004f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90004f48:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
90004f4c:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
90004f4e:	6811      	ldr	r1, [r2, #0]
90004f50:	03c9      	lsls	r1, r1, #15
90004f52:	d4f3      	bmi.n	90004f3c <SAI_Disable.isra.0+0x18>

  return status;
}
90004f54:	4770      	bx	lr
90004f56:	bf00      	nop
90004f58:	200000b4 	.word	0x200000b4

90004f5c <HAL_SAI_MspInit>:
}
90004f5c:	4770      	bx	lr
	...

90004f60 <HAL_SAI_Init>:
{
90004f60:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
90004f62:	4604      	mov	r4, r0
90004f64:	2800      	cmp	r0, #0
90004f66:	f000 80c3 	beq.w	900050f0 <HAL_SAI_Init+0x190>
  if(hsai->State == HAL_SAI_STATE_RESET)
90004f6a:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
90004f6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90004f72:	b91b      	cbnz	r3, 90004f7c <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
90004f74:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
90004f78:	f7ff fff0 	bl	90004f5c <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
90004f7c:	2302      	movs	r3, #2
  SAI_Disable(hsai);
90004f7e:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
90004f80:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
90004f84:	f7ff ffce 	bl	90004f24 <SAI_Disable.isra.0>
  switch(hsai->Init.SynchroExt)
90004f88:	68e3      	ldr	r3, [r4, #12]
90004f8a:	2b01      	cmp	r3, #1
90004f8c:	f000 80a0 	beq.w	900050d0 <HAL_SAI_Init+0x170>
90004f90:	1e98      	subs	r0, r3, #2
90004f92:	4243      	negs	r3, r0
90004f94:	4143      	adcs	r3, r0
90004f96:	015b      	lsls	r3, r3, #5
  switch(hsai->Init.Synchro)
90004f98:	68a5      	ldr	r5, [r4, #8]
90004f9a:	2d02      	cmp	r5, #2
90004f9c:	f000 809c 	beq.w	900050d8 <HAL_SAI_Init+0x178>
90004fa0:	2d03      	cmp	r5, #3
90004fa2:	f000 8097 	beq.w	900050d4 <HAL_SAI_Init+0x174>
90004fa6:	1e69      	subs	r1, r5, #1
90004fa8:	424d      	negs	r5, r1
90004faa:	414d      	adcs	r5, r1
90004fac:	02ad      	lsls	r5, r5, #10
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
90004fae:	6822      	ldr	r2, [r4, #0]
90004fb0:	4950      	ldr	r1, [pc, #320]	; (900050f4 <HAL_SAI_Init+0x194>)
90004fb2:	4851      	ldr	r0, [pc, #324]	; (900050f8 <HAL_SAI_Init+0x198>)
90004fb4:	428a      	cmp	r2, r1
90004fb6:	d003      	beq.n	90004fc0 <HAL_SAI_Init+0x60>
90004fb8:	4e50      	ldr	r6, [pc, #320]	; (900050fc <HAL_SAI_Init+0x19c>)
90004fba:	42b2      	cmp	r2, r6
90004fbc:	f040 808f 	bne.w	900050de <HAL_SAI_Init+0x17e>
    SAI1->GCR = tmpregisterGCR;
90004fc0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
90004fc4:	69e3      	ldr	r3, [r4, #28]
90004fc6:	b313      	cbz	r3, 9000500e <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
90004fc8:	428a      	cmp	r2, r1
90004fca:	d003      	beq.n	90004fd4 <HAL_SAI_Init+0x74>
90004fcc:	4b4b      	ldr	r3, [pc, #300]	; (900050fc <HAL_SAI_Init+0x19c>)
90004fce:	429a      	cmp	r2, r3
90004fd0:	f040 8088 	bne.w	900050e4 <HAL_SAI_Init+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
90004fd4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
90004fd8:	f7ff ff26 	bl	90004e28 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
90004fdc:	6823      	ldr	r3, [r4, #0]
90004fde:	4a48      	ldr	r2, [pc, #288]	; (90005100 <HAL_SAI_Init+0x1a0>)
90004fe0:	4293      	cmp	r3, r2
90004fe2:	d002      	beq.n	90004fea <HAL_SAI_Init+0x8a>
90004fe4:	3220      	adds	r2, #32
90004fe6:	4293      	cmp	r3, r2
90004fe8:	d103      	bne.n	90004ff2 <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
90004fea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
90004fee:	f7ff ff1b 	bl	90004e28 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
90004ff2:	220a      	movs	r2, #10
90004ff4:	69e3      	ldr	r3, [r4, #28]
90004ff6:	4350      	muls	r0, r2
90004ff8:	025b      	lsls	r3, r3, #9
90004ffa:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
90004ffe:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
90005002:	fb02 0013 	mls	r0, r2, r3, r0
90005006:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
90005008:	bf08      	it	eq
9000500a:	3301      	addeq	r3, #1
9000500c:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
9000500e:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
90005010:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
90005012:	f033 0202 	bics.w	r2, r3, #2
90005016:	d167      	bne.n	900050e8 <HAL_SAI_Init+0x188>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
90005018:	3901      	subs	r1, #1
9000501a:	bf18      	it	ne
9000501c:	2101      	movne	r1, #1
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
9000501e:	6822      	ldr	r2, [r4, #0]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
90005020:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
90005022:	4838      	ldr	r0, [pc, #224]	; (90005104 <HAL_SAI_Init+0x1a4>)
90005024:	6816      	ldr	r6, [r2, #0]
90005026:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
90005028:	6b26      	ldr	r6, [r4, #48]	; 0x30
9000502a:	4333      	orrs	r3, r6
9000502c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
9000502e:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
90005030:	4333      	orrs	r3, r6
90005032:	6ba6      	ldr	r6, [r4, #56]	; 0x38
90005034:	6810      	ldr	r0, [r2, #0]
90005036:	4333      	orrs	r3, r6
90005038:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000503a:	4333      	orrs	r3, r6
9000503c:	6926      	ldr	r6, [r4, #16]
9000503e:	4333      	orrs	r3, r6
90005040:	6966      	ldr	r6, [r4, #20]
90005042:	4333      	orrs	r3, r6
90005044:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
90005046:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
90005048:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
9000504c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
9000504e:	432b      	orrs	r3, r5
90005050:	430b      	orrs	r3, r1
90005052:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
90005054:	6853      	ldr	r3, [r2, #4]
90005056:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
9000505a:	f023 030f 	bic.w	r3, r3, #15
9000505e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
90005060:	69a3      	ldr	r3, [r4, #24]
90005062:	6851      	ldr	r1, [r2, #4]
90005064:	4303      	orrs	r3, r0
90005066:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90005068:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
9000506a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
9000506c:	430b      	orrs	r3, r1
9000506e:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
90005070:	4b25      	ldr	r3, [pc, #148]	; (90005108 <HAL_SAI_Init+0x1a8>)
90005072:	6891      	ldr	r1, [r2, #8]
90005074:	400b      	ands	r3, r1
90005076:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
90005078:	6d23      	ldr	r3, [r4, #80]	; 0x50
9000507a:	6891      	ldr	r1, [r2, #8]
9000507c:	4303      	orrs	r3, r0
9000507e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90005080:	4303      	orrs	r3, r0
90005082:	430b      	orrs	r3, r1
90005084:	6c21      	ldr	r1, [r4, #64]	; 0x40
90005086:	3901      	subs	r1, #1
90005088:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
9000508a:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000508c:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
9000508e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90005092:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
90005094:	68d3      	ldr	r3, [r2, #12]
90005096:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
9000509a:	f023 030f 	bic.w	r3, r3, #15
9000509e:	041b      	lsls	r3, r3, #16
900050a0:	0c1b      	lsrs	r3, r3, #16
900050a2:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
900050a4:	68d1      	ldr	r1, [r2, #12]
900050a6:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
900050aa:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
900050ac:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
900050ae:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
900050b0:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
900050b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
900050b6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
900050b8:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
900050ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
900050be:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
900050c0:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
900050c2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
900050c6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
900050ca:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
900050ce:	bd70      	pop	{r4, r5, r6, pc}
  switch(hsai->Init.SynchroExt)
900050d0:	2310      	movs	r3, #16
900050d2:	e761      	b.n	90004f98 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
900050d4:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
900050d8:	f44f 6500 	mov.w	r5, #2048	; 0x800
900050dc:	e767      	b.n	90004fae <HAL_SAI_Init+0x4e>
    SAI2->GCR = tmpregisterGCR;
900050de:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
900050e2:	e76f      	b.n	90004fc4 <HAL_SAI_Init+0x64>
    uint32_t freq = 0;
900050e4:	2000      	movs	r0, #0
900050e6:	e779      	b.n	90004fdc <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
900050e8:	1e4a      	subs	r2, r1, #1
900050ea:	4251      	negs	r1, r2
900050ec:	4151      	adcs	r1, r2
900050ee:	e796      	b.n	9000501e <HAL_SAI_Init+0xbe>
    return HAL_ERROR;
900050f0:	2001      	movs	r0, #1
900050f2:	e7ec      	b.n	900050ce <HAL_SAI_Init+0x16e>
900050f4:	40015804 	.word	0x40015804
900050f8:	40015000 	.word	0x40015000
900050fc:	40015824 	.word	0x40015824
90005100:	40015c04 	.word	0x40015c04
90005104:	ff05c010 	.word	0xff05c010
90005108:	fff88000 	.word	0xfff88000

9000510c <HAL_SAI_MspDeInit>:
9000510c:	4770      	bx	lr

9000510e <HAL_SAI_DeInit>:
{
9000510e:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
90005110:	4605      	mov	r5, r0
90005112:	b1c0      	cbz	r0, 90005146 <HAL_SAI_DeInit+0x38>
  hsai->State = HAL_SAI_STATE_BUSY;
90005114:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
90005116:	6806      	ldr	r6, [r0, #0]
90005118:	2400      	movs	r4, #0
  hsai->State = HAL_SAI_STATE_BUSY;
9000511a:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
9000511e:	f04f 33ff 	mov.w	r3, #4294967295
  hsai->Instance->IMR = 0;
90005122:	6134      	str	r4, [r6, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
90005124:	61b3      	str	r3, [r6, #24]
  SAI_Disable(hsai);
90005126:	f7ff fefd 	bl	90004f24 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
9000512a:	6873      	ldr	r3, [r6, #4]
9000512c:	f043 0308 	orr.w	r3, r3, #8
90005130:	6073      	str	r3, [r6, #4]
  HAL_SAI_MspDeInit(hsai);
90005132:	f7ff ffeb 	bl	9000510c <HAL_SAI_MspDeInit>
  return HAL_OK;
90005136:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90005138:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  __HAL_UNLOCK(hsai);
9000513c:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
90005140:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d
}
90005144:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90005146:	2001      	movs	r0, #1
90005148:	e7fc      	b.n	90005144 <HAL_SAI_DeInit+0x36>

9000514a <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
9000514a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
9000514e:	2b01      	cmp	r3, #1
90005150:	d009      	beq.n	90005166 <HAL_SAI_DMAPause+0x1c>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
90005152:	6802      	ldr	r2, [r0, #0]
90005154:	6813      	ldr	r3, [r2, #0]
90005156:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
9000515a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hsai);
9000515c:	2300      	movs	r3, #0
9000515e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
90005162:	4618      	mov	r0, r3
90005164:	4770      	bx	lr
  __HAL_LOCK(hsai);
90005166:	2002      	movs	r0, #2
}
90005168:	4770      	bx	lr

9000516a <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
9000516a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
9000516e:	2b01      	cmp	r3, #1
90005170:	d010      	beq.n	90005194 <HAL_SAI_DMAResume+0x2a>
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
90005172:	6803      	ldr	r3, [r0, #0]
90005174:	681a      	ldr	r2, [r3, #0]
90005176:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
9000517a:	601a      	str	r2, [r3, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
9000517c:	681a      	ldr	r2, [r3, #0]
9000517e:	03d2      	lsls	r2, r2, #15
90005180:	d403      	bmi.n	9000518a <HAL_SAI_DMAResume+0x20>
    __HAL_SAI_ENABLE(hsai);
90005182:	681a      	ldr	r2, [r3, #0]
90005184:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90005188:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hsai);
9000518a:	2300      	movs	r3, #0
9000518c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
90005190:	4618      	mov	r0, r3
90005192:	4770      	bx	lr
  __HAL_LOCK(hsai);
90005194:	2002      	movs	r0, #2
}
90005196:	4770      	bx	lr

90005198 <HAL_SAI_DMAStop>:
{
90005198:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
9000519a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
9000519e:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
900051a0:	2b01      	cmp	r3, #1
900051a2:	d041      	beq.n	90005228 <HAL_SAI_DMAStop+0x90>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
900051a4:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
900051a6:	2501      	movs	r5, #1
900051a8:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
900051ac:	6813      	ldr	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
900051ae:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
900051b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
900051b4:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
900051b6:	bb20      	cbnz	r0, 90005202 <HAL_SAI_DMAStop+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
900051b8:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
900051ba:	6f20      	ldr	r0, [r4, #112]	; 0x70
900051bc:	b188      	cbz	r0, 900051e2 <HAL_SAI_DMAStop+0x4a>
900051be:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
900051c2:	2b22      	cmp	r3, #34	; 0x22
900051c4:	d10d      	bne.n	900051e2 <HAL_SAI_DMAStop+0x4a>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
900051c6:	f7fd fc66 	bl	90002a96 <HAL_DMA_Abort>
900051ca:	b150      	cbz	r0, 900051e2 <HAL_SAI_DMAStop+0x4a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
900051cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
900051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900051d0:	2b80      	cmp	r3, #128	; 0x80
900051d2:	d006      	beq.n	900051e2 <HAL_SAI_DMAStop+0x4a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
900051d4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
900051d8:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
900051da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900051de:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  SAI_Disable(hsai);
900051e2:	4620      	mov	r0, r4
900051e4:	f7ff fe9e 	bl	90004f24 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
900051e8:	6822      	ldr	r2, [r4, #0]
900051ea:	6853      	ldr	r3, [r2, #4]
900051ec:	f043 0308 	orr.w	r3, r3, #8
900051f0:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
900051f2:	2301      	movs	r3, #1
900051f4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
900051f8:	2300      	movs	r3, #0
900051fa:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
900051fe:	4628      	mov	r0, r5
90005200:	bd38      	pop	{r3, r4, r5, pc}
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
90005202:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
90005206:	2b12      	cmp	r3, #18
90005208:	d1d6      	bne.n	900051b8 <HAL_SAI_DMAStop+0x20>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
9000520a:	f7fd fc44 	bl	90002a96 <HAL_DMA_Abort>
9000520e:	2800      	cmp	r0, #0
90005210:	d0d2      	beq.n	900051b8 <HAL_SAI_DMAStop+0x20>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
90005212:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90005214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005216:	2b80      	cmp	r3, #128	; 0x80
90005218:	d0ce      	beq.n	900051b8 <HAL_SAI_DMAStop+0x20>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
9000521a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
9000521e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90005222:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
90005226:	e7c8      	b.n	900051ba <HAL_SAI_DMAStop+0x22>
  __HAL_LOCK(hsai);
90005228:	2502      	movs	r5, #2
9000522a:	e7e8      	b.n	900051fe <HAL_SAI_DMAStop+0x66>

9000522c <HAL_SAI_Receive_DMA>:
{
9000522c:	4613      	mov	r3, r2
  if((pData == NULL) || (Size == 0))
9000522e:	460a      	mov	r2, r1
{
90005230:	b570      	push	{r4, r5, r6, lr}
90005232:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
90005234:	2900      	cmp	r1, #0
90005236:	d03f      	beq.n	900052b8 <HAL_SAI_Receive_DMA+0x8c>
90005238:	2b00      	cmp	r3, #0
9000523a:	d03d      	beq.n	900052b8 <HAL_SAI_Receive_DMA+0x8c>
  if(hsai->State == HAL_SAI_STATE_READY)
9000523c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
90005240:	2901      	cmp	r1, #1
90005242:	b2cd      	uxtb	r5, r1
90005244:	d13a      	bne.n	900052bc <HAL_SAI_Receive_DMA+0x90>
    __HAL_LOCK(hsai);
90005246:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
9000524a:	2901      	cmp	r1, #1
9000524c:	d036      	beq.n	900052bc <HAL_SAI_Receive_DMA+0x90>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
9000524e:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
90005250:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
90005252:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90005256:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    hsai->pBuffPtr = pData;
9000525a:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_RX;
9000525c:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    hsai->XferSize = Size;
90005260:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
90005264:	4916      	ldr	r1, [pc, #88]	; (900052c0 <HAL_SAI_Receive_DMA+0x94>)
    hsai->XferCount = Size;
90005266:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
9000526a:	6f00      	ldr	r0, [r0, #112]	; 0x70
9000526c:	6401      	str	r1, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
9000526e:	4915      	ldr	r1, [pc, #84]	; (900052c4 <HAL_SAI_Receive_DMA+0x98>)
90005270:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
90005272:	4915      	ldr	r1, [pc, #84]	; (900052c8 <HAL_SAI_Receive_DMA+0x9c>)
    hsai->hdmarx->XferAbortCallback = NULL;
90005274:	e9c0 1613 	strd	r1, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
90005278:	6821      	ldr	r1, [r4, #0]
9000527a:	311c      	adds	r1, #28
9000527c:	f7fd fbce 	bl	90002a1c <HAL_DMA_Start_IT>
90005280:	b118      	cbz	r0, 9000528a <HAL_SAI_Receive_DMA+0x5e>
      __HAL_UNLOCK(hsai);
90005282:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
90005286:	4628      	mov	r0, r5
90005288:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
9000528a:	6825      	ldr	r5, [r4, #0]
9000528c:	682b      	ldr	r3, [r5, #0]
9000528e:	03db      	lsls	r3, r3, #15
90005290:	d403      	bmi.n	9000529a <HAL_SAI_Receive_DMA+0x6e>
      __HAL_SAI_ENABLE(hsai);
90005292:	682b      	ldr	r3, [r5, #0]
90005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90005298:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
9000529a:	2100      	movs	r1, #0
9000529c:	4620      	mov	r0, r4
9000529e:	f7ff fe2b 	bl	90004ef8 <SAI_InterruptFlag>
900052a2:	692b      	ldr	r3, [r5, #16]
900052a4:	4318      	orrs	r0, r3
900052a6:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
900052a8:	682b      	ldr	r3, [r5, #0]
900052aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900052ae:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
900052b0:	2500      	movs	r5, #0
900052b2:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
900052b6:	e7e6      	b.n	90005286 <HAL_SAI_Receive_DMA+0x5a>
    return  HAL_ERROR;
900052b8:	2501      	movs	r5, #1
900052ba:	e7e4      	b.n	90005286 <HAL_SAI_Receive_DMA+0x5a>
    return HAL_BUSY;
900052bc:	2502      	movs	r5, #2
900052be:	e7e2      	b.n	90005286 <HAL_SAI_Receive_DMA+0x5a>
900052c0:	90005305 	.word	0x90005305
900052c4:	900052cd 	.word	0x900052cd
900052c8:	9000530f 	.word	0x9000530f

900052cc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
900052cc:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
900052ce:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
900052d0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
900052d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900052d6:	d011      	beq.n	900052fc <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
900052d8:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
900052da:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900052dc:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
900052de:	682b      	ldr	r3, [r5, #0]
900052e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
900052e4:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
900052e6:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900052ea:	f7ff fe05 	bl	90004ef8 <SAI_InterruptFlag>
900052ee:	692b      	ldr	r3, [r5, #16]
900052f0:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
900052f4:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900052f6:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
900052f8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
900052fc:	4620      	mov	r0, r4
900052fe:	f7fc f8d9 	bl	900014b4 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
90005302:	bd38      	pop	{r3, r4, r5, pc}

90005304 <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
90005304:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
90005306:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
90005308:	f7fc f8d8 	bl	900014bc <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
9000530c:	bd08      	pop	{r3, pc}

9000530e <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
9000530e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
90005310:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
90005312:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
90005316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000531a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
9000531e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
90005320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005322:	2b01      	cmp	r3, #1
90005324:	d003      	beq.n	9000532e <SAI_DMAError+0x20>
90005326:	6f03      	ldr	r3, [r0, #112]	; 0x70
90005328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000532a:	2b01      	cmp	r3, #1
9000532c:	d10c      	bne.n	90005348 <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
9000532e:	6802      	ldr	r2, [r0, #0]
90005330:	6813      	ldr	r3, [r2, #0]
90005332:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
90005336:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
90005338:	f7ff fdf4 	bl	90004f24 <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
9000533c:	2301      	movs	r3, #1
9000533e:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
90005342:	2300      	movs	r3, #0
90005344:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
90005348:	f7fc f8be 	bl	900014c8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
9000534c:	bd08      	pop	{r3, pc}

9000534e <HAL_SAI_GetState>:
  return hsai->State;
9000534e:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
90005352:	4770      	bx	lr

90005354 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
90005354:	4770      	bx	lr

90005356 <HAL_SDRAM_Init>:
{   
90005356:	b538      	push	{r3, r4, r5, lr}
90005358:	460d      	mov	r5, r1
  if(hsdram == NULL)
9000535a:	4604      	mov	r4, r0
9000535c:	b1c8      	cbz	r0, 90005392 <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
9000535e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90005362:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90005366:	b91b      	cbnz	r3, 90005370 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
90005368:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000536c:	f7ff fff2 	bl	90005354 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90005370:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90005372:	1d21      	adds	r1, r4, #4
90005374:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90005376:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000537a:	f000 f835 	bl	900053e8 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
9000537e:	6862      	ldr	r2, [r4, #4]
90005380:	4629      	mov	r1, r5
90005382:	6820      	ldr	r0, [r4, #0]
90005384:	f000 f868 	bl	90005458 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
90005388:	2301      	movs	r3, #1
  return HAL_OK;
9000538a:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
9000538c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90005390:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90005392:	2001      	movs	r0, #1
90005394:	e7fc      	b.n	90005390 <HAL_SDRAM_Init+0x3a>

90005396 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
90005396:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90005398:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000539c:	4604      	mov	r4, r0
9000539e:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
900053a0:	2b02      	cmp	r3, #2
900053a2:	b2d8      	uxtb	r0, r3
900053a4:	d00d      	beq.n	900053c2 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900053a6:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900053a8:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900053aa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900053ae:	f000 f895 	bl	900054dc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
900053b2:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
900053b4:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
900053b6:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
900053b8:	bf0c      	ite	eq
900053ba:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
900053bc:	2301      	movne	r3, #1
900053be:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
900053c2:	bd38      	pop	{r3, r4, r5, pc}

900053c4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
900053c4:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
900053c6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
900053ca:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
900053cc:	2b02      	cmp	r3, #2
900053ce:	b2d8      	uxtb	r0, r3
900053d0:	d009      	beq.n	900053e6 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900053d2:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
900053d4:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900053d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
900053da:	f000 f892 	bl	90005502 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
900053de:	2301      	movs	r3, #1
  
  return HAL_OK;   
900053e0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
900053e2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
900053e6:	bd10      	pop	{r4, pc}

900053e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
900053e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
                        Init->RowBitsNumber      |\
900053ec:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
                        Init->MemoryDataWidth    |\
                        Init->InternalBankNumber |\
                        Init->CASLatency         |\
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
900053f0:	e9d1 3907 	ldrd	r3, r9, [r1, #28]
                        Init->ReadPipeDelay
900053f4:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
900053f8:	f8df e058 	ldr.w	lr, [pc, #88]	; 90005454 <FMC_SDRAM_Init+0x6c>
900053fc:	ea43 0309 	orr.w	r3, r3, r9
                        Init->InternalBankNumber |\
90005400:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
                        Init->WriteProtection    |\
90005404:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
90005408:	6809      	ldr	r1, [r1, #0]
9000540a:	2901      	cmp	r1, #1
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
9000540c:	6801      	ldr	r1, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
9000540e:	d00f      	beq.n	90005430 <FMC_SDRAM_Init+0x48>
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005410:	ea43 0308 	orr.w	r3, r3, r8
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90005414:	ea01 010e 	and.w	r1, r1, lr
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005418:	4313      	orrs	r3, r2
9000541a:	ea43 030c 	orr.w	r3, r3, ip
9000541e:	433b      	orrs	r3, r7
90005420:	4333      	orrs	r3, r6
90005422:	432b      	orrs	r3, r5
90005424:	4323      	orrs	r3, r4
90005426:	430b      	orrs	r3, r1
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90005428:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
9000542a:	2000      	movs	r0, #0
9000542c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005430:	ea42 020c 	orr.w	r2, r2, ip
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
90005434:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
90005438:	ea43 0308 	orr.w	r3, r3, r8
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000543c:	433a      	orrs	r2, r7
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
9000543e:	430b      	orrs	r3, r1
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
90005440:	6841      	ldr	r1, [r0, #4]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005442:	4332      	orrs	r2, r6
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90005444:	ea01 010e 	and.w	r1, r1, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90005448:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000544a:	432a      	orrs	r2, r5
9000544c:	4322      	orrs	r2, r4
9000544e:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
90005450:	6042      	str	r2, [r0, #4]
90005452:	e7ea      	b.n	9000542a <FMC_SDRAM_Init+0x42>
90005454:	ffff8000 	.word	0xffff8000

90005458 <FMC_SDRAM_Timing_Init>:
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
90005458:	68cb      	ldr	r3, [r1, #12]
  if (Bank != FMC_SDRAM_BANK2) 
9000545a:	2a01      	cmp	r2, #1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
9000545c:	6882      	ldr	r2, [r0, #8]
                       (((Timing->RowCycleDelay)-1) << 12)       |\
9000545e:	f103 3cff 	add.w	ip, r3, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
90005462:	694b      	ldr	r3, [r1, #20]
{
90005464:	b5f0      	push	{r4, r5, r6, r7, lr}
                       (((Timing->RPDelay)-1) << 20)             |\
90005466:	f103 33ff 	add.w	r3, r3, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000546a:	680f      	ldr	r7, [r1, #0]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
9000546c:	684c      	ldr	r4, [r1, #4]
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
9000546e:	688e      	ldr	r6, [r1, #8]
                       (((Timing->RPDelay)-1) << 20)             |\
90005470:	ea4f 5303 	mov.w	r3, r3, lsl #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
90005474:	690d      	ldr	r5, [r1, #16]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
90005476:	f104 34ff 	add.w	r4, r4, #4294967295
                       (((Timing->RCDDelay)-1) << 24));
9000547a:	6989      	ldr	r1, [r1, #24]
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
9000547c:	f106 36ff 	add.w	r6, r6, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
90005480:	f105 35ff 	add.w	r5, r5, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90005484:	f107 37ff 	add.w	r7, r7, #4294967295
                       (((Timing->RCDDelay)-1) << 24));
90005488:	f101 31ff 	add.w	r1, r1, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
9000548c:	ea4f 1404 	mov.w	r4, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
90005490:	ea4f 2606 	mov.w	r6, r6, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
90005494:	ea4f 4505 	mov.w	r5, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));
90005498:	ea4f 6101 	mov.w	r1, r1, lsl #24
9000549c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
900054a0:	d00a      	beq.n	900054b8 <FMC_SDRAM_Timing_Init+0x60>
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900054a2:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
900054a4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900054a8:	4323      	orrs	r3, r4
900054aa:	4333      	orrs	r3, r6
900054ac:	432b      	orrs	r3, r5
900054ae:	430b      	orrs	r3, r1
900054b0:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
900054b2:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
900054b4:	2000      	movs	r0, #0
900054b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
900054b8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
900054bc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
900054c0:	4313      	orrs	r3, r2
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
900054c2:	68c2      	ldr	r2, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
900054c4:	f002 4c70 	and.w	ip, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900054c8:	ea44 0206 	orr.w	r2, r4, r6
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
900054cc:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900054ce:	433a      	orrs	r2, r7
900054d0:	432a      	orrs	r2, r5
900054d2:	430a      	orrs	r2, r1
900054d4:	ea42 020c 	orr.w	r2, r2, ip
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
900054d8:	60c2      	str	r2, [r0, #12]
900054da:	e7eb      	b.n	900054b4 <FMC_SDRAM_Timing_Init+0x5c>

900054dc <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900054dc:	e9d1 3200 	ldrd	r3, r2, [r1]
{
900054e0:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900054e2:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
900054e4:	68ca      	ldr	r2, [r1, #12]
  __IO uint32_t tmpr = 0;
900054e6:	2400      	movs	r4, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900054e8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
900054ec:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
900054ee:	9401      	str	r4, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
900054f0:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
900054f2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
900054f6:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
900054f8:	9b01      	ldr	r3, [sp, #4]
900054fa:	6103      	str	r3, [r0, #16]
  
  return HAL_OK;  
}
900054fc:	4620      	mov	r0, r4
900054fe:	b002      	add	sp, #8
90005500:	bd10      	pop	{r4, pc}

90005502 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
90005502:	6943      	ldr	r3, [r0, #20]
90005504:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
90005508:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
9000550a:	2000      	movs	r0, #0
9000550c:	4770      	bx	lr
	...

90005510 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
90005510:	4b0a      	ldr	r3, [pc, #40]	; (9000553c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
90005512:	3b01      	subs	r3, #1
90005514:	d00f      	beq.n	90005536 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90005516:	6902      	ldr	r2, [r0, #16]
90005518:	2a00      	cmp	r2, #0
9000551a:	dafa      	bge.n	90005512 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
9000551c:	6903      	ldr	r3, [r0, #16]
9000551e:	4a07      	ldr	r2, [pc, #28]	; (9000553c <USB_CoreReset+0x2c>)
90005520:	f043 0301 	orr.w	r3, r3, #1
90005524:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
90005526:	3a01      	subs	r2, #1
90005528:	d005      	beq.n	90005536 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
9000552a:	6903      	ldr	r3, [r0, #16]
9000552c:	f013 0301 	ands.w	r3, r3, #1
90005530:	d1f9      	bne.n	90005526 <USB_CoreReset+0x16>

  return HAL_OK;
90005532:	4618      	mov	r0, r3
90005534:	4770      	bx	lr
      return HAL_TIMEOUT;
90005536:	2003      	movs	r0, #3
}
90005538:	4770      	bx	lr
9000553a:	bf00      	nop
9000553c:	00030d41 	.word	0x00030d41

90005540 <USB_CoreInit>:
{
90005540:	b084      	sub	sp, #16
90005542:	b538      	push	{r3, r4, r5, lr}
90005544:	ad05      	add	r5, sp, #20
90005546:	4604      	mov	r4, r0
90005548:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
9000554c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9000554e:	2b01      	cmp	r3, #1
90005550:	d126      	bne.n	900055a0 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
90005552:	6b83      	ldr	r3, [r0, #56]	; 0x38
90005554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90005558:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
9000555a:	68c3      	ldr	r3, [r0, #12]
9000555c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
90005560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
90005564:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
90005566:	68c3      	ldr	r3, [r0, #12]
90005568:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
9000556c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
9000556e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90005570:	2b01      	cmp	r3, #1
90005572:	d103      	bne.n	9000557c <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
90005574:	68c3      	ldr	r3, [r0, #12]
90005576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
9000557a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
9000557c:	4620      	mov	r0, r4
9000557e:	f7ff ffc7 	bl	90005510 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
90005582:	9b08      	ldr	r3, [sp, #32]
90005584:	2b01      	cmp	r3, #1
90005586:	d107      	bne.n	90005598 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
90005588:	68a3      	ldr	r3, [r4, #8]
9000558a:	f043 0306 	orr.w	r3, r3, #6
9000558e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
90005590:	68a3      	ldr	r3, [r4, #8]
90005592:	f043 0320 	orr.w	r3, r3, #32
90005596:	60a3      	str	r3, [r4, #8]
}
90005598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000559c:	b004      	add	sp, #16
9000559e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
900055a0:	68c3      	ldr	r3, [r0, #12]
900055a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900055a6:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
900055a8:	f7ff ffb2 	bl	90005510 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
900055ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
900055ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900055b2:	63a3      	str	r3, [r4, #56]	; 0x38
900055b4:	e7e5      	b.n	90005582 <USB_CoreInit+0x42>

900055b6 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
900055b6:	6883      	ldr	r3, [r0, #8]
900055b8:	f043 0301 	orr.w	r3, r3, #1
900055bc:	6083      	str	r3, [r0, #8]
}
900055be:	2000      	movs	r0, #0
900055c0:	4770      	bx	lr

900055c2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
900055c2:	6883      	ldr	r3, [r0, #8]
900055c4:	f023 0301 	bic.w	r3, r3, #1
900055c8:	6083      	str	r3, [r0, #8]
}
900055ca:	2000      	movs	r0, #0
900055cc:	4770      	bx	lr

900055ce <USB_SetCurrentMode>:
{
900055ce:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
900055d0:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
900055d2:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
900055d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
900055d8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
900055da:	d108      	bne.n	900055ee <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
900055dc:	68c3      	ldr	r3, [r0, #12]
900055de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
900055e2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
900055e4:	2032      	movs	r0, #50	; 0x32
900055e6:	f7fd f8e3 	bl	900027b0 <HAL_Delay>
  return HAL_OK;
900055ea:	2000      	movs	r0, #0
}
900055ec:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
900055ee:	b919      	cbnz	r1, 900055f8 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
900055f0:	68c3      	ldr	r3, [r0, #12]
900055f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
900055f6:	e7f4      	b.n	900055e2 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
900055f8:	2001      	movs	r0, #1
900055fa:	e7f7      	b.n	900055ec <USB_SetCurrentMode+0x1e>

900055fc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
900055fc:	0189      	lsls	r1, r1, #6
900055fe:	4a07      	ldr	r2, [pc, #28]	; (9000561c <USB_FlushTxFifo+0x20>)
90005600:	f041 0120 	orr.w	r1, r1, #32
90005604:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
90005606:	3a01      	subs	r2, #1
90005608:	d005      	beq.n	90005616 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000560a:	6903      	ldr	r3, [r0, #16]
9000560c:	f013 0320 	ands.w	r3, r3, #32
90005610:	d1f9      	bne.n	90005606 <USB_FlushTxFifo+0xa>
  return HAL_OK;
90005612:	4618      	mov	r0, r3
90005614:	4770      	bx	lr
      return HAL_TIMEOUT;
90005616:	2003      	movs	r0, #3
}
90005618:	4770      	bx	lr
9000561a:	bf00      	nop
9000561c:	00030d41 	.word	0x00030d41

90005620 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
90005620:	2310      	movs	r3, #16
90005622:	4a06      	ldr	r2, [pc, #24]	; (9000563c <USB_FlushRxFifo+0x1c>)
90005624:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
90005626:	3a01      	subs	r2, #1
90005628:	d005      	beq.n	90005636 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000562a:	6903      	ldr	r3, [r0, #16]
9000562c:	f013 0310 	ands.w	r3, r3, #16
90005630:	d1f9      	bne.n	90005626 <USB_FlushRxFifo+0x6>
  return HAL_OK;
90005632:	4618      	mov	r0, r3
90005634:	4770      	bx	lr
      return HAL_TIMEOUT;
90005636:	2003      	movs	r0, #3
}
90005638:	4770      	bx	lr
9000563a:	bf00      	nop
9000563c:	00030d41 	.word	0x00030d41

90005640 <USB_WritePacket>:
{
90005640:	b510      	push	{r4, lr}
90005642:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
90005646:	b944      	cbnz	r4, 9000565a <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
90005648:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
9000564a:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
9000564c:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
9000564e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
90005652:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
90005656:	428b      	cmp	r3, r1
90005658:	d101      	bne.n	9000565e <USB_WritePacket+0x1e>
}
9000565a:	2000      	movs	r0, #0
9000565c:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
9000565e:	f851 2b04 	ldr.w	r2, [r1], #4
90005662:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
90005664:	e7f7      	b.n	90005656 <USB_WritePacket+0x16>

90005666 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
90005666:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
90005668:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
9000566c:	0892      	lsrs	r2, r2, #2
9000566e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
90005672:	4291      	cmp	r1, r2
90005674:	d101      	bne.n	9000567a <USB_ReadPacket+0x14>
}
90005676:	4608      	mov	r0, r1
90005678:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
9000567a:	6803      	ldr	r3, [r0, #0]
9000567c:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
90005680:	e7f7      	b.n	90005672 <USB_ReadPacket+0xc>

90005682 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
90005682:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
90005684:	6980      	ldr	r0, [r0, #24]
}
90005686:	4010      	ands	r0, r2
90005688:	4770      	bx	lr

9000568a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
9000568a:	6940      	ldr	r0, [r0, #20]
}
9000568c:	f000 0001 	and.w	r0, r0, #1
90005690:	4770      	bx	lr

90005692 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90005692:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
90005696:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90005698:	f500 6280 	add.w	r2, r0, #1024	; 0x400
9000569c:	f023 0303 	bic.w	r3, r3, #3
{
900056a0:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
900056a2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
900056a6:	f001 0303 	and.w	r3, r1, #3
900056aa:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
900056ae:	ea43 0304 	orr.w	r3, r3, r4
900056b2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
900056b6:	d104      	bne.n	900056c2 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
900056b8:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
900056bc:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
900056be:	2000      	movs	r0, #0
900056c0:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
900056c2:	2902      	cmp	r1, #2
900056c4:	d1fb      	bne.n	900056be <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
900056c6:	f241 7370 	movw	r3, #6000	; 0x1770
900056ca:	e7f7      	b.n	900056bc <USB_InitFSLSPClkSel+0x2a>

900056cc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
900056cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
900056ce:	2500      	movs	r5, #0
{
900056d0:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
900056d2:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
900056d4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
900056d8:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
900056da:	9b01      	ldr	r3, [sp, #4]
900056dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
900056e0:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
900056e2:	9b01      	ldr	r3, [sp, #4]
900056e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900056e8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
900056ec:	2064      	movs	r0, #100	; 0x64
900056ee:	f7fd f85f 	bl	900027b0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
900056f2:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
900056f4:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
900056f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
900056fa:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
900056fe:	f7fd f857 	bl	900027b0 <HAL_Delay>

  return HAL_OK;
}
90005702:	4628      	mov	r0, r5
90005704:	b003      	add	sp, #12
90005706:	bd30      	pop	{r4, r5, pc}

90005708 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
90005708:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
9000570a:	2300      	movs	r3, #0
9000570c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
9000570e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
90005712:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
90005714:	9b01      	ldr	r3, [sp, #4]
90005716:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
9000571a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
9000571c:	9b01      	ldr	r3, [sp, #4]
9000571e:	04da      	lsls	r2, r3, #19
90005720:	d406      	bmi.n	90005730 <USB_DriveVbus+0x28>
90005722:	2901      	cmp	r1, #1
90005724:	d104      	bne.n	90005730 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
90005726:	9b01      	ldr	r3, [sp, #4]
90005728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000572c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
90005730:	9b01      	ldr	r3, [sp, #4]
90005732:	04db      	lsls	r3, r3, #19
90005734:	d505      	bpl.n	90005742 <USB_DriveVbus+0x3a>
90005736:	b921      	cbnz	r1, 90005742 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
90005738:	9b01      	ldr	r3, [sp, #4]
9000573a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000573e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
90005742:	2000      	movs	r0, #0
90005744:	b002      	add	sp, #8
90005746:	4770      	bx	lr

90005748 <USB_HostInit>:
{
90005748:	b084      	sub	sp, #16
9000574a:	b538      	push	{r3, r4, r5, lr}
9000574c:	4604      	mov	r4, r0
9000574e:	a805      	add	r0, sp, #20
90005750:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
90005754:	2300      	movs	r3, #0
90005756:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
9000575a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000575c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
90005760:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
90005762:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90005764:	05da      	lsls	r2, r3, #23
90005766:	d53f      	bpl.n	900057e8 <USB_HostInit+0xa0>
    if (cfg.speed == USBH_FSLS_SPEED)
90005768:	9b07      	ldr	r3, [sp, #28]
9000576a:	2b01      	cmp	r3, #1
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
9000576c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
90005770:	d13c      	bne.n	900057ec <USB_HostInit+0xa4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
90005772:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
90005776:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
9000577a:	2110      	movs	r1, #16
9000577c:	4620      	mov	r0, r4
9000577e:	f7ff ff3d 	bl	900055fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
90005782:	4620      	mov	r0, r4
90005784:	f7ff ff4c 	bl	90005620 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
90005788:	2300      	movs	r3, #0
9000578a:	9906      	ldr	r1, [sp, #24]
9000578c:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
90005790:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
90005794:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
90005796:	4299      	cmp	r1, r3
90005798:	d12b      	bne.n	900057f2 <USB_HostInit+0xaa>
  (void)USB_DriveVbus(USBx, 1U);
9000579a:	2101      	movs	r1, #1
9000579c:	4620      	mov	r0, r4
9000579e:	f7ff ffb3 	bl	90005708 <USB_DriveVbus>
  HAL_Delay(200U);
900057a2:	20c8      	movs	r0, #200	; 0xc8
900057a4:	f7fd f804 	bl	900027b0 <HAL_Delay>
  USBx->GINTMSK = 0U;
900057a8:	2300      	movs	r3, #0
900057aa:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
900057ac:	f04f 33ff 	mov.w	r3, #4294967295
900057b0:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
900057b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900057b4:	05db      	lsls	r3, r3, #23
900057b6:	d521      	bpl.n	900057fc <USB_HostInit+0xb4>
    USBx->GRXFSIZ  = 0x200U;
900057b8:	f44f 7300 	mov.w	r3, #512	; 0x200
900057bc:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
900057be:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
900057c2:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
900057c4:	4b11      	ldr	r3, [pc, #68]	; (9000580c <USB_HostInit+0xc4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
900057c6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
900057ca:	9b08      	ldr	r3, [sp, #32]
900057cc:	b91b      	cbnz	r3, 900057d6 <USB_HostInit+0x8e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
900057ce:	69a3      	ldr	r3, [r4, #24]
900057d0:	f043 0310 	orr.w	r3, r3, #16
900057d4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
900057d6:	69a2      	ldr	r2, [r4, #24]
}
900057d8:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
900057da:	4b0d      	ldr	r3, [pc, #52]	; (90005810 <USB_HostInit+0xc8>)
900057dc:	4313      	orrs	r3, r2
900057de:	61a3      	str	r3, [r4, #24]
}
900057e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
900057e4:	b004      	add	sp, #16
900057e6:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
900057e8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
900057ec:	f023 0304 	bic.w	r3, r3, #4
900057f0:	e7c1      	b.n	90005776 <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
900057f2:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
900057f4:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
900057f6:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
900057f8:	3220      	adds	r2, #32
900057fa:	e7cc      	b.n	90005796 <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x80U;
900057fc:	2380      	movs	r3, #128	; 0x80
900057fe:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
90005800:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
90005804:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
90005806:	4b03      	ldr	r3, [pc, #12]	; (90005814 <USB_HostInit+0xcc>)
90005808:	e7dd      	b.n	900057c6 <USB_HostInit+0x7e>
9000580a:	bf00      	nop
9000580c:	00e00300 	.word	0x00e00300
90005810:	a3200008 	.word	0xa3200008
90005814:	004000e0 	.word	0x004000e0

90005818 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
90005818:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
9000581a:	2300      	movs	r3, #0
9000581c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
9000581e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
90005822:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
90005824:	9801      	ldr	r0, [sp, #4]
}
90005826:	f3c0 4041 	ubfx	r0, r0, #17, #2
9000582a:	b002      	add	sp, #8
9000582c:	4770      	bx	lr

9000582e <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
9000582e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
90005832:	6880      	ldr	r0, [r0, #8]
}
90005834:	b280      	uxth	r0, r0
90005836:	4770      	bx	lr

90005838 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
90005838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
9000583c:	eb00 1641 	add.w	r6, r0, r1, lsl #5
{
90005840:	4605      	mov	r5, r0
90005842:	f89d 701c 	ldrb.w	r7, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
90005846:	f04f 30ff 	mov.w	r0, #4294967295
9000584a:	f506 64a0 	add.w	r4, r6, #1280	; 0x500
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
9000584e:	fa4f fc82 	sxtb.w	ip, r2
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
90005852:	60a0      	str	r0, [r4, #8]
  switch (ep_type)
90005854:	2f03      	cmp	r7, #3
90005856:	d861      	bhi.n	9000591c <USB_HC_Init+0xe4>
90005858:	e8df f007 	tbb	[pc, r7]
9000585c:	4f025602 	.word	0x4f025602
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005860:	f240 409d 	movw	r0, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
90005864:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005868:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
9000586a:	da03      	bge.n	90005874 <USB_HC_Init+0x3c>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
9000586c:	68e0      	ldr	r0, [r4, #12]
9000586e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
90005872:	e040      	b.n	900058f6 <USB_HC_Init+0xbe>
        if ((USBx->CID & (0x1U << 8)) != 0U)
90005874:	6be8      	ldr	r0, [r5, #60]	; 0x3c
90005876:	05c0      	lsls	r0, r0, #23
90005878:	d43a      	bmi.n	900058f0 <USB_HC_Init+0xb8>
  HAL_StatusTypeDef ret = HAL_OK;
9000587a:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
9000587c:	f001 040f 	and.w	r4, r1, #15
90005880:	2101      	movs	r1, #1
90005882:	f8d5 8418 	ldr.w	r8, [r5, #1048]	; 0x418
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
90005886:	059b      	lsls	r3, r3, #22
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
90005888:	40a1      	lsls	r1, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
9000588a:	02d2      	lsls	r2, r2, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
9000588c:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
90005890:	f505 6e80 	add.w	lr, r5, #1024	; 0x400
90005894:	ea41 0108 	orr.w	r1, r1, r8
90005898:	f8c5 1418 	str.w	r1, [r5, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
9000589c:	69a9      	ldr	r1, [r5, #24]
9000589e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
900058a2:	61a9      	str	r1, [r5, #24]
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
900058a4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
900058a8:	f3c1 010a 	ubfx	r1, r1, #0, #11
900058ac:	430b      	orrs	r3, r1
  if (speed == HPRT0_PRTSPD_LOW_SPEED)
900058ae:	f89d 1018 	ldrb.w	r1, [sp, #24]
900058b2:	1e8c      	subs	r4, r1, #2
900058b4:	4261      	negs	r1, r4
900058b6:	4161      	adcs	r1, r4

  if (ep_type == EP_TYPE_INTR)
900058b8:	2f03      	cmp	r7, #3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
900058ba:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
900058be:	f402 41f0 	and.w	r1, r2, #30720	; 0x7800
  if ((epnum & 0x80U) == 0x80U)
900058c2:	ea4f 72dc 	mov.w	r2, ip, lsr #31
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
900058c6:	ea43 0301 	orr.w	r3, r3, r1
900058ca:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
900058ce:	ea4f 4287 	mov.w	r2, r7, lsl #18
900058d2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
900058d6:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
900058da:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
900058de:	d105      	bne.n	900058ec <USB_HC_Init+0xb4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
900058e0:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
900058e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
900058e8:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  }

  return ret;
}
900058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
900058f0:	68e0      	ldr	r0, [r4, #12]
900058f2:	f040 0060 	orr.w	r0, r0, #96	; 0x60
900058f6:	60e0      	str	r0, [r4, #12]
900058f8:	e7bf      	b.n	9000587a <USB_HC_Init+0x42>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
900058fa:	f240 609d 	movw	r0, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
900058fe:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005902:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
90005904:	dab9      	bge.n	9000587a <USB_HC_Init+0x42>
90005906:	e7b1      	b.n	9000586c <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005908:	f240 2025 	movw	r0, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
9000590c:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005910:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
90005912:	dab2      	bge.n	9000587a <USB_HC_Init+0x42>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
90005914:	68e0      	ldr	r0, [r4, #12]
90005916:	f440 70c0 	orr.w	r0, r0, #384	; 0x180
9000591a:	e7ec      	b.n	900058f6 <USB_HC_Init+0xbe>
  switch (ep_type)
9000591c:	2001      	movs	r0, #1
9000591e:	e7ad      	b.n	9000587c <USB_HC_Init+0x44>

90005920 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
90005920:	f500 6080 	add.w	r0, r0, #1024	; 0x400
90005924:	6940      	ldr	r0, [r0, #20]
}
90005926:	b280      	uxth	r0, r0
90005928:	4770      	bx	lr

9000592a <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
9000592a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
9000592e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005932:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
90005936:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
9000593a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
9000593e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90005942:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
90005946:	d11e      	bne.n	90005986 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
90005948:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
9000594a:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000594e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
90005952:	d137      	bne.n	900059c4 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90005958:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000595c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90005964:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
90005968:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
9000596c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90005970:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
90005974:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
90005978:	3b01      	subs	r3, #1
9000597a:	d002      	beq.n	90005982 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
9000597c:	6811      	ldr	r1, [r2, #0]
9000597e:	2900      	cmp	r1, #0
90005980:	dbfa      	blt.n	90005978 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
90005982:	2000      	movs	r0, #0
90005984:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
90005986:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
9000598a:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000598e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
90005992:	d117      	bne.n	900059c4 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90005998:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000599c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
900059a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
900059a4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
900059a8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
900059ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
900059b0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
900059b4:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
900059b8:	3b01      	subs	r3, #1
900059ba:	d0e2      	beq.n	90005982 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
900059bc:	6811      	ldr	r1, [r2, #0]
900059be:	2900      	cmp	r1, #0
900059c0:	dbfa      	blt.n	900059b8 <USB_HC_Halt+0x8e>
900059c2:	e7de      	b.n	90005982 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
900059c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
900059c8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
900059cc:	e7d9      	b.n	90005982 <USB_HC_Halt+0x58>
	...

900059d0 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
900059d0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
900059d4:	4a06      	ldr	r2, [pc, #24]	; (900059f0 <USB_DoPing+0x20>)
900059d6:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
900059da:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900059de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
900059e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
900059e6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

  return HAL_OK;
}
900059ea:	2000      	movs	r0, #0
900059ec:	4770      	bx	lr
900059ee:	bf00      	nop
900059f0:	80080000 	.word	0x80080000

900059f4 <USB_HC_StartXfer>:
{
900059f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
900059f8:	4613      	mov	r3, r2
900059fa:	460c      	mov	r4, r1
  uint32_t ch_num = (uint32_t)hc->ch_num;
900059fc:	784a      	ldrb	r2, [r1, #1]
{
900059fe:	4606      	mov	r6, r0
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
90005a00:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90005a02:	05c9      	lsls	r1, r1, #23
90005a04:	d517      	bpl.n	90005a36 <USB_HC_StartXfer+0x42>
90005a06:	7925      	ldrb	r5, [r4, #4]
90005a08:	b9ad      	cbnz	r5, 90005a36 <USB_HC_StartXfer+0x42>
    if ((dma == 0U) && (hc->do_ping == 1U))
90005a0a:	b94b      	cbnz	r3, 90005a20 <USB_HC_StartXfer+0x2c>
90005a0c:	7961      	ldrb	r1, [r4, #5]
90005a0e:	2901      	cmp	r1, #1
90005a10:	d111      	bne.n	90005a36 <USB_HC_StartXfer+0x42>
      (void)USB_DoPing(USBx, hc->ch_num);
90005a12:	4611      	mov	r1, r2
90005a14:	f7ff ffdc 	bl	900059d0 <USB_DoPing>
}
90005a18:	2000      	movs	r0, #0
90005a1a:	b002      	add	sp, #8
90005a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
90005a20:	2b01      	cmp	r3, #1
90005a22:	d108      	bne.n	90005a36 <USB_HC_StartXfer+0x42>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
90005a24:	eb00 1142 	add.w	r1, r0, r2, lsl #5
90005a28:	f8d1 050c 	ldr.w	r0, [r1, #1292]	; 0x50c
90005a2c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90005a30:	f8c1 050c 	str.w	r0, [r1, #1292]	; 0x50c
      hc->do_ping = 0U;
90005a34:	7165      	strb	r5, [r4, #5]
  if (hc->xfer_len > 0U)
90005a36:	6925      	ldr	r5, [r4, #16]
90005a38:	2d00      	cmp	r5, #0
90005a3a:	d064      	beq.n	90005b06 <USB_HC_StartXfer+0x112>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
90005a3c:	8921      	ldrh	r1, [r4, #8]
90005a3e:	3d01      	subs	r5, #1
90005a40:	440d      	add	r5, r1
90005a42:	fbb5 f5f1 	udiv	r5, r5, r1
90005a46:	b2ad      	uxth	r5, r5
    if (num_packets > max_hc_pkt_count)
90005a48:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90005a4c:	d903      	bls.n	90005a56 <USB_HC_StartXfer+0x62>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
90005a4e:	0209      	lsls	r1, r1, #8
      num_packets = max_hc_pkt_count;
90005a50:	f44f 7580 	mov.w	r5, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
90005a54:	6121      	str	r1, [r4, #16]
  if (hc->ep_is_in != 0U)
90005a56:	f894 c003 	ldrb.w	ip, [r4, #3]
90005a5a:	f1bc 0f00 	cmp.w	ip, #0
90005a5e:	d002      	beq.n	90005a66 <USB_HC_StartXfer+0x72>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
90005a60:	8921      	ldrh	r1, [r4, #8]
90005a62:	4369      	muls	r1, r5
90005a64:	6121      	str	r1, [r4, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
90005a66:	7aa0      	ldrb	r0, [r4, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005a68:	eb06 1742 	add.w	r7, r6, r2, lsl #5
90005a6c:	6921      	ldr	r1, [r4, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
90005a6e:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005a70:	f3c1 0812 	ubfx	r8, r1, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
90005a74:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
90005a78:	ea40 0008 	orr.w	r0, r0, r8
90005a7c:	ea40 40c5 	orr.w	r0, r0, r5, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005a80:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510
  if (dma != 0U)
90005a84:	b113      	cbz	r3, 90005a8c <USB_HC_StartXfer+0x98>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
90005a86:	68e0      	ldr	r0, [r4, #12]
90005a88:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
90005a8c:	f8d6 0408 	ldr.w	r0, [r6, #1032]	; 0x408
90005a90:	f506 6580 	add.w	r5, r6, #1024	; 0x400
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
90005a94:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
90005a98:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
90005a9a:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
90005a9e:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
90005aa0:	f8c7 e500 	str.w	lr, [r7, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
90005aa4:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
90005aa8:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
90005aac:	ea40 000e 	orr.w	r0, r0, lr
90005ab0:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
90005ab4:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
90005ab8:	4824      	ldr	r0, [pc, #144]	; (90005b4c <USB_HC_StartXfer+0x158>)
90005aba:	f8c0 e000 	str.w	lr, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005abe:	f8d0 e000 	ldr.w	lr, [r0]
90005ac2:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
90005ac6:	f8c0 e000 	str.w	lr, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
90005aca:	f8d0 e000 	ldr.w	lr, [r0]
  if (hc->ep_is_in != 0U)
90005ace:	f1bc 0f00 	cmp.w	ip, #0
90005ad2:	d01a      	beq.n	90005b0a <USB_HC_StartXfer+0x116>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
90005ad4:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
90005ad8:	f8c0 e000 	str.w	lr, [r0]
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
90005adc:	ea5c 0c03 	orrs.w	ip, ip, r3
  tmpreg |= USB_OTG_HCCHAR_CHENA;
90005ae0:	f8d0 e000 	ldr.w	lr, [r0]
90005ae4:	f04e 4e00 	orr.w	lr, lr, #2147483648	; 0x80000000
90005ae8:	f8c0 e000 	str.w	lr, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
90005aec:	6800      	ldr	r0, [r0, #0]
90005aee:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
90005af2:	d191      	bne.n	90005a18 <USB_HC_StartXfer+0x24>
90005af4:	2900      	cmp	r1, #0
90005af6:	d08f      	beq.n	90005a18 <USB_HC_StartXfer+0x24>
      switch (hc->ep_type)
90005af8:	79e3      	ldrb	r3, [r4, #7]
90005afa:	2b03      	cmp	r3, #3
90005afc:	d813      	bhi.n	90005b26 <USB_HC_StartXfer+0x132>
90005afe:	e8df f003 	tbb	[pc, r3]
90005b02:	1a07      	.short	0x1a07
90005b04:	1a07      	.short	0x1a07
    num_packets = 1U;
90005b06:	2501      	movs	r5, #1
90005b08:	e7a5      	b.n	90005a56 <USB_HC_StartXfer+0x62>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
90005b0a:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
90005b0e:	e7e3      	b.n	90005ad8 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
90005b10:	6af0      	ldr	r0, [r6, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
90005b12:	1ccb      	adds	r3, r1, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
90005b14:	b280      	uxth	r0, r0
90005b16:	f3c3 038f 	ubfx	r3, r3, #2, #16
90005b1a:	4298      	cmp	r0, r3
90005b1c:	d203      	bcs.n	90005b26 <USB_HC_StartXfer+0x132>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
90005b1e:	69b3      	ldr	r3, [r6, #24]
90005b20:	f043 0320 	orr.w	r3, r3, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
90005b24:	61b3      	str	r3, [r6, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
90005b26:	2300      	movs	r3, #0
90005b28:	4630      	mov	r0, r6
90005b2a:	9300      	str	r3, [sp, #0]
90005b2c:	b28b      	uxth	r3, r1
90005b2e:	68e1      	ldr	r1, [r4, #12]
90005b30:	f7ff fd86 	bl	90005640 <USB_WritePacket>
90005b34:	e770      	b.n	90005a18 <USB_HC_StartXfer+0x24>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
90005b36:	6928      	ldr	r0, [r5, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
90005b38:	1ccb      	adds	r3, r1, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
90005b3a:	b280      	uxth	r0, r0
90005b3c:	f3c3 038f 	ubfx	r3, r3, #2, #16
90005b40:	4298      	cmp	r0, r3
90005b42:	d2f0      	bcs.n	90005b26 <USB_HC_StartXfer+0x132>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
90005b44:	69b3      	ldr	r3, [r6, #24]
90005b46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90005b4a:	e7eb      	b.n	90005b24 <USB_HC_StartXfer+0x130>
90005b4c:	20000750 	.word	0x20000750

90005b50 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005b50:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
90005b52:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005b54:	f023 0301 	bic.w	r3, r3, #1
{
90005b58:	b510      	push	{r4, lr}
90005b5a:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005b5c:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
90005b5e:	f7ff fd4d 	bl	900055fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
90005b62:	4620      	mov	r0, r4
90005b64:	f7ff fd5c 	bl	90005620 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
90005b68:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
90005b6c:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);
90005b70:	4619      	mov	r1, r3
  {
    value = USBx_HC(i)->HCCHAR;
90005b72:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
90005b74:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
90005b78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
90005b7c:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
90005b80:	4281      	cmp	r1, r0
90005b82:	d1f6      	bne.n	90005b72 <USB_StopHost+0x22>
  uint32_t count = 0U;
90005b84:	2100      	movs	r1, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
90005b86:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
90005b88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90005b8c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
90005b90:	601a      	str	r2, [r3, #0]

    do
    {
      if (++count > 1000U)
90005b92:	3101      	adds	r1, #1
90005b94:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
90005b98:	d802      	bhi.n	90005ba0 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90005b9a:	681a      	ldr	r2, [r3, #0]
90005b9c:	2a00      	cmp	r2, #0
90005b9e:	dbf8      	blt.n	90005b92 <USB_StopHost+0x42>
  for (i = 0U; i <= 15U; i++)
90005ba0:	3320      	adds	r3, #32
90005ba2:	4283      	cmp	r3, r0
90005ba4:	d1ef      	bne.n	90005b86 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
90005ba6:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
90005baa:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
90005bac:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
90005bb0:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
90005bb2:	68a3      	ldr	r3, [r4, #8]
90005bb4:	f043 0301 	orr.w	r3, r3, #1
90005bb8:	60a3      	str	r3, [r4, #8]
}
90005bba:	bd10      	pop	{r4, pc}

90005bbc <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
90005bbc:	2000      	movs	r0, #0
90005bbe:	4770      	bx	lr

90005bc0 <USBH_MSC_Process>:
{
90005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005bc2:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90005bc6:	4607      	mov	r7, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005bc8:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->state)
90005bca:	7b23      	ldrb	r3, [r4, #12]
90005bcc:	b123      	cbz	r3, 90005bd8 <USBH_MSC_Process+0x18>
90005bce:	2b01      	cmp	r3, #1
90005bd0:	f000 816d 	beq.w	90005eae <USBH_MSC_Process+0x2ee>
  USBH_StatusTypeDef error = USBH_BUSY;
90005bd4:	2001      	movs	r0, #1
            break;
90005bd6:	e0fb      	b.n	90005dd0 <USBH_MSC_Process+0x210>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
90005bd8:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
90005bdc:	2501      	movs	r5, #1
90005bde:	7822      	ldrb	r2, [r4, #0]
90005be0:	428a      	cmp	r2, r1
90005be2:	f240 815c 	bls.w	90005e9e <USBH_MSC_Process+0x2de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
90005be6:	2634      	movs	r6, #52	; 0x34
90005be8:	fb06 4301 	mla	r3, r6, r1, r4
90005bec:	f883 5091 	strb.w	r5, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
90005bf0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
90005bf4:	2b08      	cmp	r3, #8
90005bf6:	d8ed      	bhi.n	90005bd4 <USBH_MSC_Process+0x14>
90005bf8:	a201      	add	r2, pc, #4	; (adr r2, 90005c00 <USBH_MSC_Process+0x40>)
90005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005bfe:	bf00      	nop
90005c00:	90005c25 	.word	0x90005c25
90005c04:	90005bd5 	.word	0x90005bd5
90005c08:	90005caf 	.word	0x90005caf
90005c0c:	90005d57 	.word	0x90005d57
90005c10:	90005c4b 	.word	0x90005c4b
90005c14:	90005de3 	.word	0x90005de3
90005c18:	90005bd5 	.word	0x90005bd5
90005c1c:	90005bd5 	.word	0x90005bd5
90005c20:	90005e97 	.word	0x90005e97
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
90005c24:	48a3      	ldr	r0, [pc, #652]	; (90005eb4 <USBH_MSC_Process+0x2f4>)
90005c26:	f005 fbd1 	bl	9000b3cc <iprintf>
90005c2a:	200a      	movs	r0, #10
90005c2c:	f005 fbe0 	bl	9000b3f0 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
90005c30:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005c34:	2234      	movs	r2, #52	; 0x34
90005c36:	fb02 4303 	mla	r3, r2, r3, r4
90005c3a:	2204      	movs	r2, #4
90005c3c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
90005c40:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
90005c44:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
            break;
90005c48:	e7c4      	b.n	90005bd4 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
90005c4a:	fb06 4201 	mla	r2, r6, r1, r4
90005c4e:	b2c9      	uxtb	r1, r1
90005c50:	329f      	adds	r2, #159	; 0x9f
90005c52:	f000 fc9b 	bl	9000658c <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
90005c56:	2800      	cmp	r0, #0
90005c58:	f040 80bb 	bne.w	90005dd2 <USBH_MSC_Process+0x212>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
90005c5c:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
90005c60:	4895      	ldr	r0, [pc, #596]	; (90005eb8 <USBH_MSC_Process+0x2f8>)
90005c62:	fb06 4101 	mla	r1, r6, r1, r4
90005c66:	31a2      	adds	r1, #162	; 0xa2
90005c68:	f005 fbb0 	bl	9000b3cc <iprintf>
90005c6c:	200a      	movs	r0, #10
90005c6e:	f005 fbbf 	bl	9000b3f0 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
90005c72:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
90005c76:	4891      	ldr	r0, [pc, #580]	; (90005ebc <USBH_MSC_Process+0x2fc>)
90005c78:	fb06 4101 	mla	r1, r6, r1, r4
90005c7c:	31ab      	adds	r1, #171	; 0xab
90005c7e:	f005 fba5 	bl	9000b3cc <iprintf>
90005c82:	200a      	movs	r0, #10
90005c84:	f005 fbb4 	bl	9000b3f0 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
90005c88:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
90005c8c:	488c      	ldr	r0, [pc, #560]	; (90005ec0 <USBH_MSC_Process+0x300>)
90005c8e:	fb06 4101 	mla	r1, r6, r1, r4
90005c92:	31bc      	adds	r1, #188	; 0xbc
90005c94:	f005 fb9a 	bl	9000b3cc <iprintf>
90005c98:	200a      	movs	r0, #10
90005c9a:	f005 fba9 	bl	9000b3f0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
90005c9e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005ca2:	2202      	movs	r2, #2
90005ca4:	fb06 4303 	mla	r3, r6, r3, r4
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
90005ca8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
90005cac:	e792      	b.n	90005bd4 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
90005cae:	b2c9      	uxtb	r1, r1
90005cb0:	f000 fc14 	bl	900064dc <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
90005cb4:	b9f8      	cbnz	r0, 90005cf6 <USBH_MSC_Process+0x136>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
90005cb6:	2234      	movs	r2, #52	; 0x34
90005cb8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005cbc:	fb02 4303 	mla	r3, r2, r3, r4
90005cc0:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
90005cc4:	b1a2      	cbz	r2, 90005cf0 <USBH_MSC_Process+0x130>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
90005cc6:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device ready");
90005cc8:	487e      	ldr	r0, [pc, #504]	; (90005ec4 <USBH_MSC_Process+0x304>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
90005cca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device ready");
90005cce:	f005 fb7d 	bl	9000b3cc <iprintf>
90005cd2:	200a      	movs	r0, #10
90005cd4:	f005 fb8c 	bl	9000b3f0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
90005cd8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005cdc:	2234      	movs	r2, #52	; 0x34
90005cde:	fb02 4303 	mla	r3, r2, r3, r4
90005ce2:	2203      	movs	r2, #3
90005ce4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
90005ce8:	2200      	movs	r2, #0
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
90005cea:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
90005cee:	e771      	b.n	90005bd4 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
90005cf0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
90005cf4:	e7f0      	b.n	90005cd8 <USBH_MSC_Process+0x118>
            if (ready_status == USBH_FAIL)
90005cf6:	2802      	cmp	r0, #2
90005cf8:	d120      	bne.n	90005d3c <USBH_MSC_Process+0x17c>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
90005cfa:	2234      	movs	r2, #52	; 0x34
90005cfc:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005d00:	fb02 4303 	mla	r3, r2, r3, r4
90005d04:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
90005d08:	2a02      	cmp	r2, #2
90005d0a:	d013      	beq.n	90005d34 <USBH_MSC_Process+0x174>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
90005d0c:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device NOT ready");
90005d0e:	486e      	ldr	r0, [pc, #440]	; (90005ec8 <USBH_MSC_Process+0x308>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
90005d10:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device NOT ready");
90005d14:	f005 fb5a 	bl	9000b3cc <iprintf>
90005d18:	200a      	movs	r0, #10
90005d1a:	f005 fb69 	bl	9000b3f0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
90005d1e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005d22:	2234      	movs	r2, #52	; 0x34
90005d24:	fb02 4303 	mla	r3, r2, r3, r4
90005d28:	f240 1205 	movw	r2, #261	; 0x105
90005d2c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
90005d30:	2202      	movs	r2, #2
90005d32:	e7da      	b.n	90005cea <USBH_MSC_Process+0x12a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
90005d34:	2200      	movs	r2, #0
90005d36:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
90005d3a:	e7f0      	b.n	90005d1e <USBH_MSC_Process+0x15e>
              if (ready_status == USBH_UNRECOVERED_ERROR)
90005d3c:	2804      	cmp	r0, #4
90005d3e:	f47f af49 	bne.w	90005bd4 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90005d42:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005d46:	2234      	movs	r2, #52	; 0x34
90005d48:	fb02 4303 	mla	r3, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90005d4c:	f240 2201 	movw	r2, #513	; 0x201
90005d50:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
90005d54:	e73e      	b.n	90005bd4 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
90005d56:	fb06 4201 	mla	r2, r6, r1, r4
90005d5a:	b2c9      	uxtb	r1, r1
90005d5c:	3294      	adds	r2, #148	; 0x94
90005d5e:	f000 fbe0 	bl	90006522 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
90005d62:	bbb0      	cbnz	r0, 90005dd2 <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
90005d64:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005d68:	fb06 4303 	mla	r3, r6, r3, r4
90005d6c:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
90005d70:	2a01      	cmp	r2, #1
90005d72:	d122      	bne.n	90005dba <USBH_MSC_Process+0x1fa>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
90005d74:	f8b3 2098 	ldrh.w	r2, [r3, #152]	; 0x98
90005d78:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
90005d7c:	4853      	ldr	r0, [pc, #332]	; (90005ecc <USBH_MSC_Process+0x30c>)
90005d7e:	4351      	muls	r1, r2
90005d80:	f005 fb24 	bl	9000b3cc <iprintf>
90005d84:	200a      	movs	r0, #10
90005d86:	f005 fb33 	bl	9000b3f0 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
90005d8a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005d8e:	4850      	ldr	r0, [pc, #320]	; (90005ed0 <USBH_MSC_Process+0x310>)
90005d90:	fb06 4303 	mla	r3, r6, r3, r4
90005d94:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
90005d98:	f005 fb18 	bl	9000b3cc <iprintf>
90005d9c:	200a      	movs	r0, #10
90005d9e:	f005 fb27 	bl	9000b3f0 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
90005da2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005da6:	484b      	ldr	r0, [pc, #300]	; (90005ed4 <USBH_MSC_Process+0x314>)
90005da8:	fb06 4303 	mla	r3, r6, r3, r4
90005dac:	f8b3 1098 	ldrh.w	r1, [r3, #152]	; 0x98
90005db0:	f005 fb0c 	bl	9000b3cc <iprintf>
90005db4:	200a      	movs	r0, #10
90005db6:	f005 fb1b 	bl	9000b3f0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90005dba:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005dbe:	2234      	movs	r2, #52	; 0x34
90005dc0:	2001      	movs	r0, #1
90005dc2:	fb02 4203 	mla	r2, r2, r3, r4
90005dc6:	f8a2 0090 	strh.w	r0, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
90005dca:	4403      	add	r3, r0
90005dcc:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
}
90005dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (scsi_status == USBH_FAIL)
90005dd2:	2802      	cmp	r0, #2
90005dd4:	d157      	bne.n	90005e86 <USBH_MSC_Process+0x2c6>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
90005dd6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005dda:	2205      	movs	r2, #5
90005ddc:	fb06 4303 	mla	r3, r6, r3, r4
90005de0:	e762      	b.n	90005ca8 <USBH_MSC_Process+0xe8>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
90005de2:	fb06 4201 	mla	r2, r6, r1, r4
90005de6:	b2c9      	uxtb	r1, r1
90005de8:	329c      	adds	r2, #156	; 0x9c
90005dea:	f000 fc2f 	bl	9000664c <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
90005dee:	bbe0      	cbnz	r0, 90005e6a <USBH_MSC_Process+0x2aa>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
90005df0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005df4:	fb06 4303 	mla	r3, r6, r3, r4
90005df8:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
90005dfc:	f001 00fb 	and.w	r0, r1, #251	; 0xfb
90005e00:	2802      	cmp	r0, #2
90005e02:	d10b      	bne.n	90005e1c <USBH_MSC_Process+0x25c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
90005e04:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
90005e08:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
90005e0c:	1b52      	subs	r2, r2, r5
90005e0e:	f242 750f 	movw	r5, #9999	; 0x270f
90005e12:	42aa      	cmp	r2, r5
90005e14:	d802      	bhi.n	90005e1c <USBH_MSC_Process+0x25c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
90005e16:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                  break;
90005e1a:	e6db      	b.n	90005bd4 <USBH_MSC_Process+0x14>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
90005e1c:	482e      	ldr	r0, [pc, #184]	; (90005ed8 <USBH_MSC_Process+0x318>)
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
90005e1e:	2534      	movs	r5, #52	; 0x34
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
90005e20:	f005 fad4 	bl	9000b3cc <iprintf>
90005e24:	200a      	movs	r0, #10
90005e26:	f005 fae3 	bl	9000b3f0 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
90005e2a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005e2e:	482b      	ldr	r0, [pc, #172]	; (90005edc <USBH_MSC_Process+0x31c>)
90005e30:	fb05 4303 	mla	r3, r5, r3, r4
90005e34:	f893 109d 	ldrb.w	r1, [r3, #157]	; 0x9d
90005e38:	f005 fac8 	bl	9000b3cc <iprintf>
90005e3c:	200a      	movs	r0, #10
90005e3e:	f005 fad7 	bl	9000b3f0 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
90005e42:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005e46:	4826      	ldr	r0, [pc, #152]	; (90005ee0 <USBH_MSC_Process+0x320>)
90005e48:	fb05 4303 	mla	r3, r5, r3, r4
90005e4c:	f893 109e 	ldrb.w	r1, [r3, #158]	; 0x9e
90005e50:	f005 fabc 	bl	9000b3cc <iprintf>
90005e54:	200a      	movs	r0, #10
90005e56:	f005 facb 	bl	9000b3f0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90005e5a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005e5e:	2001      	movs	r0, #1
90005e60:	fb05 4503 	mla	r5, r5, r3, r4
90005e64:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
90005e68:	e7af      	b.n	90005dca <USBH_MSC_Process+0x20a>
            if (scsi_status == USBH_FAIL)
90005e6a:	2802      	cmp	r0, #2
90005e6c:	d10b      	bne.n	90005e86 <USBH_MSC_Process+0x2c6>
              USBH_UsrLog("MSC Device NOT ready");
90005e6e:	4816      	ldr	r0, [pc, #88]	; (90005ec8 <USBH_MSC_Process+0x308>)
90005e70:	f005 faac 	bl	9000b3cc <iprintf>
90005e74:	200a      	movs	r0, #10
90005e76:	f005 fabb 	bl	9000b3f0 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
90005e7a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005e7e:	2208      	movs	r2, #8
90005e80:	fb06 4303 	mla	r3, r6, r3, r4
90005e84:	e710      	b.n	90005ca8 <USBH_MSC_Process+0xe8>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
90005e86:	2804      	cmp	r0, #4
90005e88:	f47f aea4 	bne.w	90005bd4 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90005e8c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005e90:	fb06 4303 	mla	r3, r6, r3, r4
90005e94:	e75a      	b.n	90005d4c <USBH_MSC_Process+0x18c>
            MSC_Handle->current_lun++;
90005e96:	3101      	adds	r1, #1
90005e98:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
90005e9c:	e69a      	b.n	90005bd4 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
90005e9e:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
90005ea2:	2102      	movs	r1, #2
        MSC_Handle->state = MSC_IDLE;
90005ea4:	7325      	strb	r5, [r4, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
90005ea6:	f8d0 34c0 	ldr.w	r3, [r0, #1216]	; 0x4c0
90005eaa:	4798      	blx	r3
90005eac:	e692      	b.n	90005bd4 <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
90005eae:	2000      	movs	r0, #0
90005eb0:	e78e      	b.n	90005dd0 <USBH_MSC_Process+0x210>
90005eb2:	bf00      	nop
90005eb4:	9001067c 	.word	0x9001067c
90005eb8:	90010686 	.word	0x90010686
90005ebc:	9001069b 	.word	0x9001069b
90005ec0:	900106b0 	.word	0x900106b0
90005ec4:	900106c5 	.word	0x900106c5
90005ec8:	900106d6 	.word	0x900106d6
90005ecc:	900106eb 	.word	0x900106eb
90005ed0:	9001070b 	.word	0x9001070b
90005ed4:	9001071e 	.word	0x9001071e
90005ed8:	90010731 	.word	0x90010731
90005edc:	90010741 	.word	0x90010741
90005ee0:	9001075c 	.word	0x9001075c

90005ee4 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005ee4:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
90005ee8:	4603      	mov	r3, r0
90005eea:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005eec:	69d4      	ldr	r4, [r2, #28]
  switch (MSC_Handle->req_state)
90005eee:	7ba2      	ldrb	r2, [r4, #14]
90005ef0:	2a02      	cmp	r2, #2
90005ef2:	d002      	beq.n	90005efa <USBH_MSC_ClassRequest+0x16>
90005ef4:	2a03      	cmp	r2, #3
90005ef6:	d028      	beq.n	90005f4a <USBH_MSC_ClassRequest+0x66>
90005ef8:	bb6a      	cbnz	r2, 90005f56 <USBH_MSC_ClassRequest+0x72>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
90005efa:	4621      	mov	r1, r4
90005efc:	4618      	mov	r0, r3
90005efe:	f000 f9ec 	bl	900062da <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
90005f02:	2803      	cmp	r0, #3
90005f04:	d11e      	bne.n	90005f44 <USBH_MSC_ClassRequest+0x60>
        MSC_Handle->max_lun = 0U;
90005f06:	2300      	movs	r3, #0
90005f08:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
90005f0a:	7821      	ldrb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
90005f0c:	4813      	ldr	r0, [pc, #76]	; (90005f5c <USBH_MSC_ClassRequest+0x78>)
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
90005f0e:	2902      	cmp	r1, #2
90005f10:	bf96      	itet	ls
90005f12:	3101      	addls	r1, #1
90005f14:	2102      	movhi	r1, #2
90005f16:	b2c9      	uxtbls	r1, r1
90005f18:	7021      	strb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
90005f1a:	f005 fa57 	bl	9000b3cc <iprintf>
90005f1e:	200a      	movs	r0, #10
90005f20:	f005 fa66 	bl	9000b3f0 <putchar>
        for (i = 0U; i < MSC_Handle->max_lun; i++)
90005f24:	7821      	ldrb	r1, [r4, #0]
90005f26:	b159      	cbz	r1, 90005f40 <USBH_MSC_ClassRequest+0x5c>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
90005f28:	2202      	movs	r2, #2
          MSC_Handle->unit[i].state_changed = 0U;
90005f2a:	2300      	movs	r3, #0
        for (i = 0U; i < MSC_Handle->max_lun; i++)
90005f2c:	2901      	cmp	r1, #1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
90005f2e:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
90005f32:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
90005f36:	bf1c      	itt	ne
90005f38:	f884 20c6 	strbne.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
90005f3c:	f884 30f5 	strbne.w	r3, [r4, #245]	; 0xf5
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
90005f40:	2000      	movs	r0, #0
90005f42:	e001      	b.n	90005f48 <USBH_MSC_ClassRequest+0x64>
      if (status == USBH_OK)
90005f44:	2800      	cmp	r0, #0
90005f46:	d0e0      	beq.n	90005f0a <USBH_MSC_ClassRequest+0x26>
}
90005f48:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
90005f4a:	2100      	movs	r1, #0
90005f4c:	f001 fa3a 	bl	900073c4 <USBH_ClrFeature>
90005f50:	b908      	cbnz	r0, 90005f56 <USBH_MSC_ClassRequest+0x72>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
90005f52:	7be3      	ldrb	r3, [r4, #15]
90005f54:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
90005f56:	2001      	movs	r0, #1
90005f58:	e7f6      	b.n	90005f48 <USBH_MSC_ClassRequest+0x64>
90005f5a:	bf00      	nop
90005f5c:	90010780 	.word	0x90010780

90005f60 <USBH_MSC_InterfaceDeInit>:
{
90005f60:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005f62:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90005f66:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005f68:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
90005f6a:	7969      	ldrb	r1, [r5, #5]
90005f6c:	b139      	cbz	r1, 90005f7e <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
90005f6e:	f001 faa3 	bl	900074b8 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
90005f72:	7969      	ldrb	r1, [r5, #5]
90005f74:	4620      	mov	r0, r4
90005f76:	f001 fabc 	bl	900074f2 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
90005f7a:	2300      	movs	r3, #0
90005f7c:	716b      	strb	r3, [r5, #5]
  if (MSC_Handle->InPipe)
90005f7e:	7929      	ldrb	r1, [r5, #4]
90005f80:	b141      	cbz	r1, 90005f94 <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
90005f82:	4620      	mov	r0, r4
90005f84:	f001 fa98 	bl	900074b8 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
90005f88:	7929      	ldrb	r1, [r5, #4]
90005f8a:	4620      	mov	r0, r4
90005f8c:	f001 fab1 	bl	900074f2 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
90005f90:	2300      	movs	r3, #0
90005f92:	712b      	strb	r3, [r5, #4]
  if (phost->pActiveClass->pData)
90005f94:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90005f98:	69d8      	ldr	r0, [r3, #28]
90005f9a:	b128      	cbz	r0, 90005fa8 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
90005f9c:	f005 f8a0 	bl	9000b0e0 <free>
    phost->pActiveClass->pData = 0U;
90005fa0:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90005fa4:	2200      	movs	r2, #0
90005fa6:	61da      	str	r2, [r3, #28]
}
90005fa8:	2000      	movs	r0, #0
90005faa:	bd38      	pop	{r3, r4, r5, pc}

90005fac <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005fac:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
90005fb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005fb2:	69d2      	ldr	r2, [r2, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
90005fb4:	2634      	movs	r6, #52	; 0x34
90005fb6:	fb06 2401 	mla	r4, r6, r1, r2
90005fba:	f894 5090 	ldrb.w	r5, [r4, #144]	; 0x90
90005fbe:	2d06      	cmp	r5, #6
90005fc0:	d005      	beq.n	90005fce <USBH_MSC_RdWrProcess+0x22>
90005fc2:	2d07      	cmp	r5, #7
90005fc4:	d00e      	beq.n	90005fe4 <USBH_MSC_RdWrProcess+0x38>
90005fc6:	2d05      	cmp	r5, #5
90005fc8:	d018      	beq.n	90005ffc <USBH_MSC_RdWrProcess+0x50>
  USBH_StatusTypeDef error = USBH_BUSY ;
90005fca:	2001      	movs	r0, #1
90005fcc:	e008      	b.n	90005fe0 <USBH_MSC_RdWrProcess+0x34>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
90005fce:	2300      	movs	r3, #0
90005fd0:	461a      	mov	r2, r3
90005fd2:	9300      	str	r3, [sp, #0]
90005fd4:	f000 fbb6 	bl	90006744 <USBH_MSC_SCSI_Read>
      break;

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);

      if (scsi_status == USBH_OK)
90005fd8:	b950      	cbnz	r0, 90005ff0 <USBH_MSC_RdWrProcess+0x44>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
90005fda:	2301      	movs	r3, #1
90005fdc:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    default:
      break;

  }
  return error;
}
90005fe0:	b002      	add	sp, #8
90005fe2:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
90005fe4:	2300      	movs	r3, #0
90005fe6:	461a      	mov	r2, r3
90005fe8:	9300      	str	r3, [sp, #0]
90005fea:	f000 fb6c 	bl	900066c6 <USBH_MSC_SCSI_Write>
90005fee:	e7f3      	b.n	90005fd8 <USBH_MSC_RdWrProcess+0x2c>
      else if (scsi_status == USBH_FAIL)
90005ff0:	2802      	cmp	r0, #2
90005ff2:	d130      	bne.n	90006056 <USBH_MSC_RdWrProcess+0xaa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
90005ff4:	2305      	movs	r3, #5
90005ff6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
90005ffa:	e7e6      	b.n	90005fca <USBH_MSC_RdWrProcess+0x1e>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
90005ffc:	fb06 2201 	mla	r2, r6, r1, r2
90006000:	329c      	adds	r2, #156	; 0x9c
90006002:	f000 fb23 	bl	9000664c <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
90006006:	b9e8      	cbnz	r0, 90006044 <USBH_MSC_RdWrProcess+0x98>
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
90006008:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
9000600c:	4815      	ldr	r0, [pc, #84]	; (90006064 <USBH_MSC_RdWrProcess+0xb8>)
9000600e:	f005 f9dd 	bl	9000b3cc <iprintf>
90006012:	200a      	movs	r0, #10
90006014:	f005 f9ec 	bl	9000b3f0 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
90006018:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
9000601c:	4812      	ldr	r0, [pc, #72]	; (90006068 <USBH_MSC_RdWrProcess+0xbc>)
9000601e:	f005 f9d5 	bl	9000b3cc <iprintf>
90006022:	200a      	movs	r0, #10
90006024:	f005 f9e4 	bl	9000b3f0 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
90006028:	f894 109e 	ldrb.w	r1, [r4, #158]	; 0x9e
9000602c:	480f      	ldr	r0, [pc, #60]	; (9000606c <USBH_MSC_RdWrProcess+0xc0>)
9000602e:	f005 f9cd 	bl	9000b3cc <iprintf>
90006032:	200a      	movs	r0, #10
90006034:	f005 f9dc 	bl	9000b3f0 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
90006038:	f240 2301 	movw	r3, #513	; 0x201
9000603c:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
90006040:	2002      	movs	r0, #2
90006042:	e7cd      	b.n	90005fe0 <USBH_MSC_RdWrProcess+0x34>
      if (scsi_status == USBH_FAIL)
90006044:	2802      	cmp	r0, #2
90006046:	d106      	bne.n	90006056 <USBH_MSC_RdWrProcess+0xaa>
        USBH_UsrLog("MSC Device NOT ready");
90006048:	4809      	ldr	r0, [pc, #36]	; (90006070 <USBH_MSC_RdWrProcess+0xc4>)
9000604a:	f005 f9bf 	bl	9000b3cc <iprintf>
9000604e:	200a      	movs	r0, #10
90006050:	f005 f9ce 	bl	9000b3f0 <putchar>
90006054:	e7b9      	b.n	90005fca <USBH_MSC_RdWrProcess+0x1e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
90006056:	2804      	cmp	r0, #4
90006058:	d1b7      	bne.n	90005fca <USBH_MSC_RdWrProcess+0x1e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
9000605a:	2308      	movs	r3, #8
9000605c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
90006060:	e7ee      	b.n	90006040 <USBH_MSC_RdWrProcess+0x94>
90006062:	bf00      	nop
90006064:	90010731 	.word	0x90010731
90006068:	90010741 	.word	0x90010741
9000606c:	9001075c 	.word	0x9001075c
90006070:	900106d6 	.word	0x900106d6

90006074 <USBH_MSC_InterfaceInit>:
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
90006074:	f8d0 1468 	ldr.w	r1, [r0, #1128]	; 0x468
90006078:	2350      	movs	r3, #80	; 0x50
9000607a:	2206      	movs	r2, #6
{
9000607c:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
9000607e:	7909      	ldrb	r1, [r1, #4]
{
90006080:	b085      	sub	sp, #20
90006082:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
90006084:	f000 fc4e 	bl	90006924 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
90006088:	4601      	mov	r1, r0
9000608a:	b118      	cbz	r0, 90006094 <USBH_MSC_InterfaceInit+0x20>
    return USBH_FAIL;
9000608c:	2602      	movs	r6, #2
}
9000608e:	4630      	mov	r0, r6
90006090:	b005      	add	sp, #20
90006092:	bdf0      	pop	{r4, r5, r6, r7, pc}
  status = USBH_SelectInterface(phost, interface);
90006094:	4628      	mov	r0, r5
90006096:	f000 fc01 	bl	9000689c <USBH_SelectInterface>
  if (status != USBH_OK)
9000609a:	4606      	mov	r6, r0
9000609c:	2800      	cmp	r0, #0
9000609e:	d1f5      	bne.n	9000608c <USBH_MSC_InterfaceInit+0x18>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
900060a0:	f8d5 7468 	ldr.w	r7, [r5, #1128]	; 0x468
900060a4:	f44f 7080 	mov.w	r0, #256	; 0x100
900060a8:	f005 f812 	bl	9000b0d0 <malloc>
900060ac:	4604      	mov	r4, r0
900060ae:	61f8      	str	r0, [r7, #28]
  if (MSC_Handle == NULL)
900060b0:	2800      	cmp	r0, #0
900060b2:	d0eb      	beq.n	9000608c <USBH_MSC_InterfaceInit+0x18>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
900060b4:	4631      	mov	r1, r6
900060b6:	f44f 7280 	mov.w	r2, #256	; 0x100
900060ba:	f005 faf5 	bl	9000b6a8 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
900060be:	f995 344e 	ldrsb.w	r3, [r5, #1102]	; 0x44e
900060c2:	f895 244e 	ldrb.w	r2, [r5, #1102]	; 0x44e
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
900060c6:	4628      	mov	r0, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
900060c8:	2b00      	cmp	r3, #0
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
900060ca:	f995 1456 	ldrsb.w	r1, [r5, #1110]	; 0x456
900060ce:	f8b5 3450 	ldrh.w	r3, [r5, #1104]	; 0x450
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
900060d2:	f04f 0702 	mov.w	r7, #2
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
900060d6:	bfae      	itee	ge
900060d8:	71a2      	strbge	r2, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
900060da:	71e2      	strblt	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
900060dc:	8163      	strhlt	r3, [r4, #10]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
900060de:	f895 2456 	ldrb.w	r2, [r5, #1110]	; 0x456
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
900060e2:	bfa8      	it	ge
900060e4:	8123      	strhge	r3, [r4, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
900060e6:	2900      	cmp	r1, #0
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
900060e8:	f8b5 3458 	ldrh.w	r3, [r5, #1112]	; 0x458
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
900060ec:	bfa8      	it	ge
900060ee:	71a2      	strbge	r2, [r4, #6]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
900060f0:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
900060f2:	bfba      	itte	lt
900060f4:	71e2      	strblt	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
900060f6:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
900060f8:	8123      	strhge	r3, [r4, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
900060fa:	f001 f9e2 	bl	900074c2 <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
900060fe:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
90006100:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
90006102:	4628      	mov	r0, r5
90006104:	f001 f9dd 	bl	900074c2 <USBH_AllocPipe>
90006108:	7120      	strb	r0, [r4, #4]
  USBH_MSC_BOT_Init(phost);
9000610a:	4628      	mov	r0, r5
9000610c:	f000 f8ee 	bl	900062ec <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
90006110:	8923      	ldrh	r3, [r4, #8]
90006112:	79a2      	ldrb	r2, [r4, #6]
90006114:	4628      	mov	r0, r5
90006116:	9302      	str	r3, [sp, #8]
90006118:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
9000611c:	7961      	ldrb	r1, [r4, #5]
9000611e:	9300      	str	r3, [sp, #0]
90006120:	9701      	str	r7, [sp, #4]
90006122:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
90006126:	f001 f9b8 	bl	9000749a <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
9000612a:	8963      	ldrh	r3, [r4, #10]
9000612c:	79e2      	ldrb	r2, [r4, #7]
9000612e:	4628      	mov	r0, r5
90006130:	7921      	ldrb	r1, [r4, #4]
90006132:	e9cd 7301 	strd	r7, r3, [sp, #4]
90006136:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
9000613a:	9300      	str	r3, [sp, #0]
9000613c:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
90006140:	f001 f9ab 	bl	9000749a <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
90006144:	7921      	ldrb	r1, [r4, #4]
90006146:	2200      	movs	r2, #0
90006148:	4628      	mov	r0, r5
9000614a:	f004 fa8f 	bl	9000a66c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
9000614e:	2200      	movs	r2, #0
90006150:	7961      	ldrb	r1, [r4, #5]
90006152:	4628      	mov	r0, r5
90006154:	f004 fa8a 	bl	9000a66c <USBH_LL_SetToggle>
  return USBH_OK;
90006158:	e799      	b.n	9000608e <USBH_MSC_InterfaceInit+0x1a>

9000615a <USBH_MSC_IsReady>:
uint8_t  USBH_MSC_IsReady(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
9000615a:	7803      	ldrb	r3, [r0, #0]
9000615c:	2b0b      	cmp	r3, #11
9000615e:	d107      	bne.n	90006170 <USBH_MSC_IsReady+0x16>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006160:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
90006164:	69db      	ldr	r3, [r3, #28]
90006166:	7b18      	ldrb	r0, [r3, #12]
  {
    res = 1U;
90006168:	1e43      	subs	r3, r0, #1
9000616a:	4258      	negs	r0, r3
9000616c:	4158      	adcs	r0, r3
9000616e:	4770      	bx	lr
  }
  else
  {
    res = 0U;
90006170:	2000      	movs	r0, #0
  }

  return res;
}
90006172:	4770      	bx	lr

90006174 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
90006174:	7803      	ldrb	r3, [r0, #0]
90006176:	2b0b      	cmp	r3, #11
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006178:	bf01      	itttt	eq
9000617a:	f8d0 3468 	ldreq.w	r3, [r0, #1128]	; 0x468
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
9000617e:	2234      	moveq	r2, #52	; 0x34
90006180:	69db      	ldreq	r3, [r3, #28]
90006182:	fb02 3101 	mlaeq	r1, r2, r1, r3
90006186:	bf03      	ittte	eq
90006188:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
9000618c:	fab0 f080 	clzeq	r0, r0
90006190:	0940      	lsreq	r0, r0, #5
  }
  else
  {
    res = 0U;
90006192:	2000      	movne	r0, #0
  }

  return res;
}
90006194:	4770      	bx	lr

90006196 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
90006196:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
90006198:	7803      	ldrb	r3, [r0, #0]
9000619a:	2b0b      	cmp	r3, #11
9000619c:	d111      	bne.n	900061c2 <USBH_MSC_GetLUNInfo+0x2c>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
9000619e:	2334      	movs	r3, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900061a0:	f8d0 0468 	ldr.w	r0, [r0, #1128]	; 0x468
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
900061a4:	2490      	movs	r4, #144	; 0x90
900061a6:	fb13 4101 	smlabb	r1, r3, r1, r4
900061aa:	69c3      	ldr	r3, [r0, #28]
900061ac:	4419      	add	r1, r3
900061ae:	f101 0334 	add.w	r3, r1, #52	; 0x34
900061b2:	f851 0b04 	ldr.w	r0, [r1], #4
900061b6:	4299      	cmp	r1, r3
900061b8:	f842 0b04 	str.w	r0, [r2], #4
900061bc:	d1f9      	bne.n	900061b2 <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
900061be:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
900061c0:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
900061c2:	2002      	movs	r0, #2
900061c4:	e7fc      	b.n	900061c0 <USBH_MSC_GetLUNInfo+0x2a>

900061c6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
900061c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
900061ca:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
900061ce:	4604      	mov	r4, r0
900061d0:	460e      	mov	r6, r1
900061d2:	9f08      	ldr	r7, [sp, #32]
  if ((phost->device.is_connected == 0U) ||
900061d4:	b3b5      	cbz	r5, 90006244 <USBH_MSC_Read+0x7e>
      (phost->gState != HOST_CLASS) ||
900061d6:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
900061d8:	2d0b      	cmp	r5, #11
900061da:	d133      	bne.n	90006244 <USBH_MSC_Read+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900061dc:	f8d0 5468 	ldr.w	r5, [r0, #1128]	; 0x468
      (MSC_Handle->unit[lun].state != MSC_IDLE))
900061e0:	f04f 0c34 	mov.w	ip, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900061e4:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
900061e6:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
900061ea:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
900061ee:	f1be 0f01 	cmp.w	lr, #1
900061f2:	d127      	bne.n	90006244 <USBH_MSC_Read+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
900061f4:	f04f 0e06 	mov.w	lr, #6
900061f8:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
900061fc:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
90006200:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
90006204:	9700      	str	r7, [sp, #0]
90006206:	f000 fa9d 	bl	90006744 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
9000620a:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
9000620e:	f8d4 84b0 	ldr.w	r8, [r4, #1200]	; 0x4b0
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90006212:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
90006214:	4631      	mov	r1, r6
90006216:	4620      	mov	r0, r4
90006218:	f7ff fec8 	bl	90005fac <USBH_MSC_RdWrProcess>
9000621c:	2801      	cmp	r0, #1
9000621e:	d005      	beq.n	9000622c <USBH_MSC_Read+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
90006220:	2301      	movs	r3, #1

  return USBH_OK;
90006222:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
90006224:	732b      	strb	r3, [r5, #12]
}
90006226:	b002      	add	sp, #8
90006228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
9000622c:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
90006230:	eba3 0308 	sub.w	r3, r3, r8
90006234:	42bb      	cmp	r3, r7
90006236:	d803      	bhi.n	90006240 <USBH_MSC_Read+0x7a>
90006238:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
9000623c:	2b00      	cmp	r3, #0
9000623e:	d1e9      	bne.n	90006214 <USBH_MSC_Read+0x4e>
      MSC_Handle->state = MSC_IDLE;
90006240:	2301      	movs	r3, #1
90006242:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
90006244:	2002      	movs	r0, #2
90006246:	e7ee      	b.n	90006226 <USBH_MSC_Read+0x60>

90006248 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
90006248:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
9000624c:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
90006250:	4604      	mov	r4, r0
90006252:	460e      	mov	r6, r1
90006254:	9f08      	ldr	r7, [sp, #32]
  if ((phost->device.is_connected == 0U) ||
90006256:	b3b5      	cbz	r5, 900062c6 <USBH_MSC_Write+0x7e>
      (phost->gState != HOST_CLASS) ||
90006258:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
9000625a:	2d0b      	cmp	r5, #11
9000625c:	d133      	bne.n	900062c6 <USBH_MSC_Write+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000625e:	f8d0 5468 	ldr.w	r5, [r0, #1128]	; 0x468
      (MSC_Handle->unit[lun].state != MSC_IDLE))
90006262:	f04f 0c34 	mov.w	ip, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006266:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
90006268:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
9000626c:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
90006270:	f1be 0f01 	cmp.w	lr, #1
90006274:	d127      	bne.n	900062c6 <USBH_MSC_Write+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
90006276:	f04f 0e07 	mov.w	lr, #7
9000627a:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
9000627e:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
90006282:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
90006286:	9700      	str	r7, [sp, #0]
90006288:	f000 fa1d 	bl	900066c6 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
9000628c:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
90006290:	f8d4 84b0 	ldr.w	r8, [r4, #1200]	; 0x4b0
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90006294:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
90006296:	4631      	mov	r1, r6
90006298:	4620      	mov	r0, r4
9000629a:	f7ff fe87 	bl	90005fac <USBH_MSC_RdWrProcess>
9000629e:	2801      	cmp	r0, #1
900062a0:	d005      	beq.n	900062ae <USBH_MSC_Write+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
900062a2:	2301      	movs	r3, #1
  return USBH_OK;
900062a4:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
900062a6:	732b      	strb	r3, [r5, #12]
}
900062a8:	b002      	add	sp, #8
900062aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
900062ae:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
900062b2:	eba3 0308 	sub.w	r3, r3, r8
900062b6:	42bb      	cmp	r3, r7
900062b8:	d803      	bhi.n	900062c2 <USBH_MSC_Write+0x7a>
900062ba:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
900062be:	2b00      	cmp	r3, #0
900062c0:	d1e9      	bne.n	90006296 <USBH_MSC_Write+0x4e>
      MSC_Handle->state = MSC_IDLE;
900062c2:	2301      	movs	r3, #1
900062c4:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
900062c6:	2002      	movs	r0, #2
900062c8:	e7ee      	b.n	900062a8 <USBH_MSC_Write+0x60>

900062ca <USBH_MSC_BOT_REQ_Reset>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
900062ca:	f64f 7121 	movw	r1, #65313	; 0xff21
900062ce:	2200      	movs	r2, #0
900062d0:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
900062d4:	4611      	mov	r1, r2
900062d6:	f000 be77 	b.w	90006fc8 <USBH_CtlReq>

900062da <USBH_MSC_BOT_REQ_GetMaxLUN>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
900062da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
900062de:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
900062e2:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
900062e6:	2201      	movs	r2, #1
900062e8:	f000 be6e 	b.w	90006fc8 <USBH_CtlReq>

900062ec <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900062ec:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
900062f0:	2000      	movs	r0, #0
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
900062f2:	4905      	ldr	r1, [pc, #20]	; (90006308 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900062f4:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
900062f6:	4a05      	ldr	r2, [pc, #20]	; (9000630c <USBH_MSC_BOT_Init+0x20>)
900062f8:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
900062fc:	2201      	movs	r2, #1
900062fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
90006302:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
90006306:	4770      	bx	lr
90006308:	43425355 	.word	0x43425355
9000630c:	20304050 	.word	0x20304050

90006310 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006310:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006314:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006316:	69dc      	ldr	r4, [r3, #28]
{
90006318:	4606      	mov	r6, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
9000631a:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
9000631e:	1e6b      	subs	r3, r5, #1
90006320:	2b0a      	cmp	r3, #10
90006322:	d838      	bhi.n	90006396 <USBH_MSC_BOT_Process+0x86>
90006324:	e8df f003 	tbb	[pc, r3]
90006328:	392e1506 	.word	0x392e1506
9000632c:	89816056 	.word	0x89816056
90006330:	b6ac      	.short	0xb6ac
90006332:	ce          	.byte	0xce
90006333:	00          	.byte	0x00
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
90006334:	2302      	movs	r3, #2
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
90006336:	2201      	movs	r2, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
90006338:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
9000633c:	f104 0154 	add.w	r1, r4, #84	; 0x54
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
90006340:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
90006344:	7963      	ldrb	r3, [r4, #5]
90006346:	9200      	str	r2, [sp, #0]
90006348:	221f      	movs	r2, #31
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
9000634a:	4630      	mov	r0, r6
9000634c:	f001 f87e 	bl	9000744c <USBH_BulkSendData>
90006350:	e015      	b.n	9000637e <USBH_MSC_BOT_Process+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
90006352:	7961      	ldrb	r1, [r4, #5]
90006354:	f004 f976 	bl	9000a644 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90006358:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
9000635a:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
9000635c:	d10a      	bne.n	90006374 <USBH_MSC_BOT_Process+0x64>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
9000635e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
90006360:	b36b      	cbz	r3, 900063be <USBH_MSC_BOT_Process+0xae>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
90006362:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
90006366:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
90006368:	bfb4      	ite	lt
9000636a:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
9000636c:	2305      	movge	r3, #5

    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
      if (status == USBH_OK)
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
9000636e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
90006372:	e004      	b.n	9000637e <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_NOTREADY)
90006374:	2802      	cmp	r0, #2
90006376:	d154      	bne.n	90006422 <USBH_MSC_BOT_Process+0x112>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
90006378:	2501      	movs	r5, #1
9000637a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50

    default:
      break;
  }
  return status;
}
9000637e:	4628      	mov	r0, r5
90006380:	b002      	add	sp, #8
90006382:	bd70      	pop	{r4, r5, r6, pc}
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
90006384:	7923      	ldrb	r3, [r4, #4]
90006386:	8962      	ldrh	r2, [r4, #10]
90006388:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
9000638c:	f001 f875 	bl	9000747a <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
90006390:	2304      	movs	r3, #4
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
90006392:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
90006396:	2501      	movs	r5, #1
90006398:	e7f1      	b.n	9000637e <USBH_MSC_BOT_Process+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
9000639a:	7921      	ldrb	r1, [r4, #4]
9000639c:	f004 f952 	bl	9000a644 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
900063a0:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
900063a2:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
900063a4:	d112      	bne.n	900063cc <USBH_MSC_BOT_Process+0xbc>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
900063a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
900063a8:	8962      	ldrh	r2, [r4, #10]
900063aa:	4293      	cmp	r3, r2
900063ac:	d932      	bls.n	90006414 <USBH_MSC_BOT_Process+0x104>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
900063ae:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
900063b2:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
900063b4:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
900063b6:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
900063b8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
900063bc:	b90b      	cbnz	r3, 900063c2 <USBH_MSC_BOT_Process+0xb2>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
900063be:	2307      	movs	r3, #7
900063c0:	e7d5      	b.n	9000636e <USBH_MSC_BOT_Process+0x5e>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
900063c2:	7923      	ldrb	r3, [r4, #4]
900063c4:	4630      	mov	r0, r6
900063c6:	f001 f858 	bl	9000747a <USBH_BulkReceiveData>
900063ca:	e7d8      	b.n	9000637e <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_STALL)
900063cc:	2805      	cmp	r0, #5
      else if (URB_Status == USBH_URB_STALL)
900063ce:	d1e2      	bne.n	90006396 <USBH_MSC_BOT_Process+0x86>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
900063d0:	2309      	movs	r3, #9
900063d2:	e7de      	b.n	90006392 <USBH_MSC_BOT_Process+0x82>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
900063d4:	2501      	movs	r5, #1
900063d6:	7963      	ldrb	r3, [r4, #5]
900063d8:	8922      	ldrh	r2, [r4, #8]
900063da:	9500      	str	r5, [sp, #0]
900063dc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
900063e0:	f001 f834 	bl	9000744c <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
900063e4:	2306      	movs	r3, #6
900063e6:	e7c2      	b.n	9000636e <USBH_MSC_BOT_Process+0x5e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
900063e8:	7961      	ldrb	r1, [r4, #5]
900063ea:	f004 f92b 	bl	9000a644 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
900063ee:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
900063f0:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
900063f2:	d112      	bne.n	9000641a <USBH_MSC_BOT_Process+0x10a>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
900063f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
900063f6:	8922      	ldrh	r2, [r4, #8]
900063f8:	4293      	cmp	r3, r2
900063fa:	d90b      	bls.n	90006414 <USBH_MSC_BOT_Process+0x104>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
900063fc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
90006400:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
90006402:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
90006404:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
90006406:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
9000640a:	2b00      	cmp	r3, #0
9000640c:	d0d7      	beq.n	900063be <USBH_MSC_BOT_Process+0xae>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
9000640e:	7963      	ldrb	r3, [r4, #5]
90006410:	9000      	str	r0, [sp, #0]
90006412:	e79a      	b.n	9000634a <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
90006414:	2300      	movs	r3, #0
90006416:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
90006418:	e7d1      	b.n	900063be <USBH_MSC_BOT_Process+0xae>
      else if (URB_Status == USBH_URB_NOTREADY)
9000641a:	2802      	cmp	r0, #2
9000641c:	d101      	bne.n	90006422 <USBH_MSC_BOT_Process+0x112>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
9000641e:	2305      	movs	r3, #5
90006420:	e7b7      	b.n	90006392 <USBH_MSC_BOT_Process+0x82>
      else if (URB_Status == USBH_URB_STALL)
90006422:	2d05      	cmp	r5, #5
90006424:	d1b7      	bne.n	90006396 <USBH_MSC_BOT_Process+0x86>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
90006426:	230a      	movs	r3, #10
90006428:	e7b3      	b.n	90006392 <USBH_MSC_BOT_Process+0x82>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
9000642a:	7923      	ldrb	r3, [r4, #4]
9000642c:	220d      	movs	r2, #13
9000642e:	f104 0178 	add.w	r1, r4, #120	; 0x78
90006432:	f001 f822 	bl	9000747a <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
90006436:	2308      	movs	r3, #8
90006438:	e7ab      	b.n	90006392 <USBH_MSC_BOT_Process+0x82>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
9000643a:	7921      	ldrb	r1, [r4, #4]
9000643c:	f004 f902 	bl	9000a644 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90006440:	2801      	cmp	r0, #1
90006442:	d11b      	bne.n	9000647c <USBH_MSC_BOT_Process+0x16c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
90006444:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
90006448:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
9000644c:	4630      	mov	r0, r6
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000644e:	f8d6 3468 	ldr.w	r3, [r6, #1128]	; 0x468
90006452:	69dc      	ldr	r4, [r3, #28]
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
90006454:	7921      	ldrb	r1, [r4, #4]
90006456:	f004 f8c6 	bl	9000a5e6 <USBH_LL_GetLastXferSize>
9000645a:	280d      	cmp	r0, #13
9000645c:	d13a      	bne.n	900064d4 <USBH_MSC_BOT_Process+0x1c4>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
9000645e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
90006460:	4b1d      	ldr	r3, [pc, #116]	; (900064d8 <USBH_MSC_BOT_Process+0x1c8>)
90006462:	429a      	cmp	r2, r3
90006464:	d136      	bne.n	900064d4 <USBH_MSC_BOT_Process+0x1c4>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
90006466:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
90006468:	6da3      	ldr	r3, [r4, #88]	; 0x58
9000646a:	429a      	cmp	r2, r3
9000646c:	d132      	bne.n	900064d4 <USBH_MSC_BOT_Process+0x1c4>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
9000646e:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
90006472:	3d00      	subs	r5, #0
90006474:	bf18      	it	ne
90006476:	2501      	movne	r5, #1
90006478:	006d      	lsls	r5, r5, #1
9000647a:	e780      	b.n	9000637e <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_STALL)
9000647c:	2805      	cmp	r0, #5
9000647e:	e7a6      	b.n	900063ce <USBH_MSC_BOT_Process+0xbe>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
90006480:	79e1      	ldrb	r1, [r4, #7]
90006482:	f000 ff9f 	bl	900073c4 <USBH_ClrFeature>
      if (error == USBH_OK)
90006486:	b908      	cbnz	r0, 9000648c <USBH_MSC_BOT_Process+0x17c>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
90006488:	2307      	movs	r3, #7
9000648a:	e782      	b.n	90006392 <USBH_MSC_BOT_Process+0x82>
      else if (error == USBH_UNRECOVERED_ERROR)
9000648c:	2804      	cmp	r0, #4
        if (error == USBH_UNRECOVERED_ERROR)
9000648e:	d182      	bne.n	90006396 <USBH_MSC_BOT_Process+0x86>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
90006490:	230b      	movs	r3, #11
90006492:	e77e      	b.n	90006392 <USBH_MSC_BOT_Process+0x82>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
90006494:	79a1      	ldrb	r1, [r4, #6]
90006496:	f000 ff95 	bl	900073c4 <USBH_ClrFeature>
      if (error == USBH_OK)
9000649a:	4605      	mov	r5, r0
9000649c:	b980      	cbnz	r0, 900064c0 <USBH_MSC_BOT_Process+0x1b0>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
9000649e:	7961      	ldrb	r1, [r4, #5]
900064a0:	4630      	mov	r0, r6
900064a2:	f004 f8f3 	bl	9000a68c <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
900064a6:	f1c0 0001 	rsb	r0, r0, #1
900064aa:	7961      	ldrb	r1, [r4, #5]
900064ac:	b2c2      	uxtb	r2, r0
900064ae:	4630      	mov	r0, r6
900064b0:	f004 f8dc 	bl	9000a66c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
900064b4:	462a      	mov	r2, r5
900064b6:	7921      	ldrb	r1, [r4, #4]
900064b8:	4630      	mov	r0, r6
900064ba:	f004 f8d7 	bl	9000a66c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
900064be:	e787      	b.n	900063d0 <USBH_MSC_BOT_Process+0xc0>
        if (error == USBH_UNRECOVERED_ERROR)
900064c0:	2804      	cmp	r0, #4
900064c2:	e7e4      	b.n	9000648e <USBH_MSC_BOT_Process+0x17e>
      status = USBH_MSC_BOT_REQ_Reset(phost);
900064c4:	f7ff ff01 	bl	900062ca <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
900064c8:	4605      	mov	r5, r0
900064ca:	2800      	cmp	r0, #0
900064cc:	f47f af57 	bne.w	9000637e <USBH_MSC_BOT_Process+0x6e>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
900064d0:	2301      	movs	r3, #1
900064d2:	e74c      	b.n	9000636e <USBH_MSC_BOT_Process+0x5e>
          status = USBH_FAIL;
900064d4:	2502      	movs	r5, #2
900064d6:	e752      	b.n	9000637e <USBH_MSC_BOT_Process+0x6e>
900064d8:	53425355 	.word	0x53425355

900064dc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
900064dc:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900064de:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
900064e2:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
900064e4:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
900064e8:	2d01      	cmp	r5, #1
900064ea:	d004      	beq.n	900064f6 <USBH_MSC_SCSI_TestUnitReady+0x1a>
900064ec:	2d02      	cmp	r5, #2
900064ee:	d014      	beq.n	9000651a <USBH_MSC_SCSI_TestUnitReady+0x3e>
900064f0:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
900064f2:	4628      	mov	r0, r5
900064f4:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
900064f6:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900064f8:	230a      	movs	r3, #10
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
900064fa:	2210      	movs	r2, #16
900064fc:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006500:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
90006504:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
90006506:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
9000650a:	f005 f8cd 	bl	9000b6a8 <memset>
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
9000650e:	2302      	movs	r3, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006510:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006514:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
90006518:	e7eb      	b.n	900064f2 <USBH_MSC_SCSI_TestUnitReady+0x16>
}
9000651a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
9000651e:	f7ff bef7 	b.w	90006310 <USBH_MSC_BOT_Process>

90006522 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006522:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006526:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006528:	69dc      	ldr	r4, [r3, #28]
{
9000652a:	4616      	mov	r6, r2

  switch (MSC_Handle->hbot.cmd_state)
9000652c:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
90006530:	2d01      	cmp	r5, #1
90006532:	d004      	beq.n	9000653e <USBH_MSC_SCSI_ReadCapacity+0x1c>
90006534:	2d02      	cmp	r5, #2
90006536:	d01b      	beq.n	90006570 <USBH_MSC_SCSI_ReadCapacity+0x4e>
90006538:	2501      	movs	r5, #1
    default:
      break;
  }

  return error;
}
9000653a:	4628      	mov	r0, r5
9000653c:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
9000653e:	2308      	movs	r3, #8
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006540:	2210      	movs	r2, #16
90006542:	2100      	movs	r1, #0
90006544:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
90006548:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
9000654a:	2380      	movs	r3, #128	; 0x80
9000654c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006550:	f005 f8aa 	bl	9000b6a8 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006554:	f242 530a 	movw	r3, #9482	; 0x250a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006558:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
9000655c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006560:	2302      	movs	r3, #2
90006562:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90006566:	f104 0310 	add.w	r3, r4, #16
9000656a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
9000656e:	e7e4      	b.n	9000653a <USBH_MSC_SCSI_ReadCapacity+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
90006570:	f7ff fece 	bl	90006310 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
90006574:	4605      	mov	r5, r0
90006576:	2800      	cmp	r0, #0
90006578:	d1df      	bne.n	9000653a <USBH_MSC_SCSI_ReadCapacity+0x18>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
9000657a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
9000657e:	6813      	ldr	r3, [r2, #0]
90006580:	ba1b      	rev	r3, r3
90006582:	6033      	str	r3, [r6, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
90006584:	88d3      	ldrh	r3, [r2, #6]
90006586:	ba5b      	rev16	r3, r3
90006588:	80b3      	strh	r3, [r6, #4]
9000658a:	e7d6      	b.n	9000653a <USBH_MSC_SCSI_ReadCapacity+0x18>

9000658c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
9000658c:	b570      	push	{r4, r5, r6, lr}
9000658e:	4616      	mov	r6, r2
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006590:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
90006594:	460b      	mov	r3, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006596:	69d4      	ldr	r4, [r2, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006598:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
9000659c:	2d01      	cmp	r5, #1
9000659e:	d004      	beq.n	900065aa <USBH_MSC_SCSI_Inquiry+0x1e>
900065a0:	2d02      	cmp	r5, #2
900065a2:	d021      	beq.n	900065e8 <USBH_MSC_SCSI_Inquiry+0x5c>
900065a4:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
900065a6:	4628      	mov	r0, r5
900065a8:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
900065aa:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
900065ac:	015b      	lsls	r3, r3, #5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
900065ae:	2124      	movs	r1, #36	; 0x24
      MSC_Handle->hbot.state = BOT_SEND_CBW;
900065b0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
900065b4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
900065b8:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
900065ba:	65e1      	str	r1, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
900065bc:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
900065c0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
900065c4:	2302      	movs	r3, #2
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
900065c6:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
900065ca:	f8a4 206b 	strh.w	r2, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900065ce:	f241 220a 	movw	r2, #4618	; 0x120a
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
900065d2:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
900065d6:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900065da:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
900065de:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
900065e2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
900065e6:	e7de      	b.n	900065a6 <USBH_MSC_SCSI_Inquiry+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
900065e8:	f7ff fe92 	bl	90006310 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
900065ec:	4605      	mov	r5, r0
900065ee:	2800      	cmp	r0, #0
900065f0:	d1d9      	bne.n	900065a6 <USBH_MSC_SCSI_Inquiry+0x1a>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
900065f2:	4601      	mov	r1, r0
900065f4:	2222      	movs	r2, #34	; 0x22
900065f6:	4630      	mov	r0, r6
900065f8:	f005 f856 	bl	9000b6a8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
900065fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
90006600:	f106 010c 	add.w	r1, r6, #12
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
90006604:	781a      	ldrb	r2, [r3, #0]
90006606:	f002 021f 	and.w	r2, r2, #31
9000660a:	7072      	strb	r2, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
9000660c:	781a      	ldrb	r2, [r3, #0]
9000660e:	0952      	lsrs	r2, r2, #5
90006610:	7032      	strb	r2, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
90006612:	f993 2001 	ldrsb.w	r2, [r3, #1]
90006616:	2a00      	cmp	r2, #0
          inquiry->RemovableMedia = 1U;
90006618:	bfbc      	itt	lt
9000661a:	2201      	movlt	r2, #1
9000661c:	70b2      	strblt	r2, [r6, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
9000661e:	689a      	ldr	r2, [r3, #8]
90006620:	f8c6 2003 	str.w	r2, [r6, #3]
90006624:	68da      	ldr	r2, [r3, #12]
90006626:	f8c6 2007 	str.w	r2, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
9000662a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
9000662e:	f103 0210 	add.w	r2, r3, #16
90006632:	3320      	adds	r3, #32
90006634:	f852 0b04 	ldr.w	r0, [r2], #4
90006638:	429a      	cmp	r2, r3
9000663a:	f841 0b04 	str.w	r0, [r1], #4
9000663e:	d1f9      	bne.n	90006634 <USBH_MSC_SCSI_Inquiry+0xa8>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
90006640:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
90006644:	6a1b      	ldr	r3, [r3, #32]
90006646:	f8c6 301d 	str.w	r3, [r6, #29]
9000664a:	e7ac      	b.n	900065a6 <USBH_MSC_SCSI_Inquiry+0x1a>

9000664c <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
9000664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000664e:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006652:	460f      	mov	r7, r1
90006654:	4616      	mov	r6, r2
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006656:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006658:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
9000665c:	2d01      	cmp	r5, #1
9000665e:	d004      	beq.n	9000666a <USBH_MSC_SCSI_RequestSense+0x1e>
90006660:	2d02      	cmp	r5, #2
90006662:	d020      	beq.n	900066a6 <USBH_MSC_SCSI_RequestSense+0x5a>
90006664:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
90006666:	4628      	mov	r0, r5
90006668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
9000666a:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
9000666c:	260e      	movs	r6, #14
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
9000666e:	2210      	movs	r2, #16
90006670:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006672:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006676:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
9000667a:	65e6      	str	r6, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
9000667c:	017f      	lsls	r7, r7, #5
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
9000667e:	f005 f813 	bl	9000b6a8 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006682:	f240 330a 	movw	r3, #778	; 0x30a
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
90006686:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
9000668a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
9000668e:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
90006690:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006694:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90006698:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
9000669c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
900066a0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
900066a4:	e7df      	b.n	90006666 <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
900066a6:	f7ff fe33 	bl	90006310 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
900066aa:	4605      	mov	r5, r0
900066ac:	2800      	cmp	r0, #0
900066ae:	d1da      	bne.n	90006666 <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
900066b0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
900066b4:	789a      	ldrb	r2, [r3, #2]
900066b6:	f002 020f 	and.w	r2, r2, #15
900066ba:	7032      	strb	r2, [r6, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
900066bc:	7b1a      	ldrb	r2, [r3, #12]
900066be:	7072      	strb	r2, [r6, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
900066c0:	7b5b      	ldrb	r3, [r3, #13]
900066c2:	70b3      	strb	r3, [r6, #2]
900066c4:	e7cf      	b.n	90006666 <USBH_MSC_SCSI_RequestSense+0x1a>

900066c6 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
900066c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900066ca:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900066cc:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
900066d0:	4615      	mov	r5, r2
900066d2:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900066d4:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
900066d6:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
900066da:	2e01      	cmp	r6, #1
900066dc:	d005      	beq.n	900066ea <USBH_MSC_SCSI_Write+0x24>
900066de:	2e02      	cmp	r6, #2
900066e0:	d02c      	beq.n	9000673c <USBH_MSC_SCSI_Write+0x76>
900066e2:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
900066e4:	4630      	mov	r0, r6
900066e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
900066ea:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
900066ee:	2100      	movs	r1, #0
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
900066f0:	2210      	movs	r2, #16
900066f2:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
900066f6:	437b      	muls	r3, r7
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
900066f8:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
900066fa:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
900066fe:	65e3      	str	r3, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006700:	f004 ffd2 	bl	9000b6a8 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006704:	f642 230a 	movw	r3, #10762	; 0x2a0a
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
90006708:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
9000670c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006710:	f3c5 6307 	ubfx	r3, r5, #24, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
90006714:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006718:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
9000671c:	f3c5 4307 	ubfx	r3, r5, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006720:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
90006724:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006728:	f3c5 2307 	ubfx	r3, r5, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
9000672c:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006730:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006734:	2302      	movs	r3, #2
90006736:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
9000673a:	e7d3      	b.n	900066e4 <USBH_MSC_SCSI_Write+0x1e>
}
9000673c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
90006740:	f7ff bde6 	b.w	90006310 <USBH_MSC_BOT_Process>

90006744 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
90006744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006748:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000674a:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
9000674e:	4615      	mov	r5, r2
90006750:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006752:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006754:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
90006758:	2e01      	cmp	r6, #1
9000675a:	d005      	beq.n	90006768 <USBH_MSC_SCSI_Read+0x24>
9000675c:	2e02      	cmp	r6, #2
9000675e:	d02d      	beq.n	900067bc <USBH_MSC_SCSI_Read+0x78>
90006760:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
90006762:	4630      	mov	r0, r6
90006764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006768:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
9000676c:	2210      	movs	r2, #16
9000676e:	2100      	movs	r1, #0
90006770:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006774:	437b      	muls	r3, r7
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
90006776:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006778:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
9000677a:	2380      	movs	r3, #128	; 0x80
9000677c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006780:	f004 ff92 	bl	9000b6a8 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006784:	f642 030a 	movw	r3, #10250	; 0x280a
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
90006788:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
9000678c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006790:	f3c5 6307 	ubfx	r3, r5, #24, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
90006794:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006798:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
9000679c:	f3c5 4307 	ubfx	r3, r5, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
900067a0:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
900067a4:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
900067a8:	f3c5 2307 	ubfx	r3, r5, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
900067ac:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
900067b0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
900067b4:	2302      	movs	r3, #2
900067b6:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
900067ba:	e7d2      	b.n	90006762 <USBH_MSC_SCSI_Read+0x1e>
}
900067bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
900067c0:	f7ff bda6 	b.w	90006310 <USBH_MSC_BOT_Process>

900067c4 <DeInitStateMachine.isra.0>:
  * @brief  DeInitStateMachine
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
900067c4:	b510      	push	{r4, lr}
900067c6:	4604      	mov	r4, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
900067c8:	223c      	movs	r2, #60	; 0x3c
900067ca:	2100      	movs	r1, #0
900067cc:	f500 608e 	add.w	r0, r0, #1136	; 0x470
900067d0:	f004 ff6a 	bl	9000b6a8 <memset>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
900067d4:	f44f 7200 	mov.w	r2, #512	; 0x200
900067d8:	2100      	movs	r1, #0
900067da:	f504 7007 	add.w	r0, r4, #540	; 0x21c
900067de:	f004 ff63 	bl	9000b6a8 <memset>
  }

  phost->gState = HOST_IDLE;
900067e2:	2300      	movs	r3, #0
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
900067e4:	2201      	movs	r2, #1
  phost->gState = HOST_IDLE;
900067e6:	7023      	strb	r3, [r4, #0]
  phost->EnumState = ENUM_IDLE;
900067e8:	7063      	strb	r3, [r4, #1]
  phost->Timer = 0U;
900067ea:	f8c4 34b0 	str.w	r3, [r4, #1200]	; 0x4b0

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
900067ee:	2340      	movs	r3, #64	; 0x40
  phost->RequestState = CMD_SEND;
900067f0:	70a2      	strb	r2, [r4, #2]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
900067f2:	71a3      	strb	r3, [r4, #6]
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
900067f4:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.state = CTRL_SETUP;
900067f8:	8322      	strh	r2, [r4, #24]
  phost->device.address = USBH_ADDRESS_DEFAULT;
900067fa:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
  phost->device.speed = USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
900067fe:	bd10      	pop	{r4, pc}

90006800 <USBH_Init>:
{
90006800:	b570      	push	{r4, r5, r6, lr}
90006802:	460e      	mov	r6, r1
  if (phost == NULL)
90006804:	4604      	mov	r4, r0
90006806:	b950      	cbnz	r0, 9000681e <USBH_Init+0x1e>
    USBH_ErrLog("Invalid Host handle");
90006808:	4811      	ldr	r0, [pc, #68]	; (90006850 <USBH_Init+0x50>)
9000680a:	f004 fddf 	bl	9000b3cc <iprintf>
9000680e:	4811      	ldr	r0, [pc, #68]	; (90006854 <USBH_Init+0x54>)
90006810:	f004 fddc 	bl	9000b3cc <iprintf>
90006814:	200a      	movs	r0, #10
90006816:	f004 fdeb 	bl	9000b3f0 <putchar>
    return USBH_FAIL;
9000681a:	2002      	movs	r0, #2
}
9000681c:	bd70      	pop	{r4, r5, r6, pc}
  phost->pActiveClass = NULL;
9000681e:	2500      	movs	r5, #0
  phost->id = id;
90006820:	f880 24b8 	strb.w	r2, [r0, #1208]	; 0x4b8
  phost->pActiveClass = NULL;
90006824:	f8c0 5468 	str.w	r5, [r0, #1128]	; 0x468
  phost->ClassNumber = 0U;
90006828:	f8c0 546c 	str.w	r5, [r0, #1132]	; 0x46c
  DeInitStateMachine(phost);
9000682c:	f7ff ffca 	bl	900067c4 <DeInitStateMachine.isra.0>
  phost->device.is_connected = 0U;
90006830:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
90006834:	f884 5423 	strb.w	r5, [r4, #1059]	; 0x423
  phost->device.is_disconnected = 0U;
90006838:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
9000683c:	f884 5422 	strb.w	r5, [r4, #1058]	; 0x422
  if (pUsrFunc != NULL)
90006840:	b10e      	cbz	r6, 90006846 <USBH_Init+0x46>
    phost->pUser = pUsrFunc;
90006842:	f8c4 64c0 	str.w	r6, [r4, #1216]	; 0x4c0
  USBH_LL_Init(phost);
90006846:	4620      	mov	r0, r4
90006848:	f003 fe8a 	bl	9000a560 <USBH_LL_Init>
  return USBH_OK;
9000684c:	2000      	movs	r0, #0
9000684e:	e7e5      	b.n	9000681c <USBH_Init+0x1c>
90006850:	900107a0 	.word	0x900107a0
90006854:	900107a8 	.word	0x900107a8

90006858 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
90006858:	b508      	push	{r3, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
9000685a:	b1a1      	cbz	r1, 90006886 <USBH_RegisterClass+0x2e>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
9000685c:	f8d0 346c 	ldr.w	r3, [r0, #1132]	; 0x46c
90006860:	b933      	cbnz	r3, 90006870 <USBH_RegisterClass+0x18>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
90006862:	2201      	movs	r2, #1
90006864:	f8c0 1464 	str.w	r1, [r0, #1124]	; 0x464
90006868:	f8c0 246c 	str.w	r2, [r0, #1132]	; 0x46c
      status = USBH_OK;
9000686c:	4618      	mov	r0, r3
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
9000686e:	bd08      	pop	{r3, pc}
      USBH_ErrLog("Max Class Number reached");
90006870:	4807      	ldr	r0, [pc, #28]	; (90006890 <USBH_RegisterClass+0x38>)
90006872:	f004 fdab 	bl	9000b3cc <iprintf>
90006876:	4807      	ldr	r0, [pc, #28]	; (90006894 <USBH_RegisterClass+0x3c>)
    USBH_ErrLog("Invalid Class handle");
90006878:	f004 fda8 	bl	9000b3cc <iprintf>
9000687c:	200a      	movs	r0, #10
9000687e:	f004 fdb7 	bl	9000b3f0 <putchar>
    status = USBH_FAIL;
90006882:	2002      	movs	r0, #2
90006884:	e7f3      	b.n	9000686e <USBH_RegisterClass+0x16>
    USBH_ErrLog("Invalid Class handle");
90006886:	4802      	ldr	r0, [pc, #8]	; (90006890 <USBH_RegisterClass+0x38>)
90006888:	f004 fda0 	bl	9000b3cc <iprintf>
9000688c:	4802      	ldr	r0, [pc, #8]	; (90006898 <USBH_RegisterClass+0x40>)
9000688e:	e7f3      	b.n	90006878 <USBH_RegisterClass+0x20>
90006890:	900107a0 	.word	0x900107a0
90006894:	900107bc 	.word	0x900107bc
90006898:	900107d5 	.word	0x900107d5

9000689c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
9000689c:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
9000689e:	f890 343c 	ldrb.w	r3, [r0, #1084]	; 0x43c
{
900068a2:	4604      	mov	r4, r0
900068a4:	460d      	mov	r5, r1
  if (interface < phost->device.CfgDesc.bNumInterfaces)
900068a6:	428b      	cmp	r3, r1
900068a8:	d924      	bls.n	900068f4 <USBH_SelectInterface+0x58>
  {
    phost->device.current_interface = interface;
900068aa:	f880 1424 	strb.w	r1, [r0, #1060]	; 0x424
    USBH_UsrLog("Switching to Interface (#%d)", interface);
900068ae:	4817      	ldr	r0, [pc, #92]	; (9000690c <USBH_SelectInterface+0x70>)
900068b0:	f004 fd8c 	bl	9000b3cc <iprintf>
900068b4:	200a      	movs	r0, #10
900068b6:	f004 fd9b 	bl	9000b3f0 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
900068ba:	2322      	movs	r3, #34	; 0x22
900068bc:	4814      	ldr	r0, [pc, #80]	; (90006910 <USBH_SelectInterface+0x74>)
900068be:	fb03 4405 	mla	r4, r3, r5, r4
900068c2:	f894 1447 	ldrb.w	r1, [r4, #1095]	; 0x447
900068c6:	f004 fd81 	bl	9000b3cc <iprintf>
900068ca:	200a      	movs	r0, #10
900068cc:	f004 fd90 	bl	9000b3f0 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
900068d0:	f894 1448 	ldrb.w	r1, [r4, #1096]	; 0x448
900068d4:	480f      	ldr	r0, [pc, #60]	; (90006914 <USBH_SelectInterface+0x78>)
900068d6:	f004 fd79 	bl	9000b3cc <iprintf>
900068da:	200a      	movs	r0, #10
900068dc:	f004 fd88 	bl	9000b3f0 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
900068e0:	f894 1449 	ldrb.w	r1, [r4, #1097]	; 0x449
900068e4:	480c      	ldr	r0, [pc, #48]	; (90006918 <USBH_SelectInterface+0x7c>)
900068e6:	f004 fd71 	bl	9000b3cc <iprintf>
900068ea:	200a      	movs	r0, #10
900068ec:	f004 fd80 	bl	9000b3f0 <putchar>
  USBH_StatusTypeDef status = USBH_OK;
900068f0:	2000      	movs	r0, #0
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
  }

  return status;
}
900068f2:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ErrLog("Cannot Select This Interface.");
900068f4:	4809      	ldr	r0, [pc, #36]	; (9000691c <USBH_SelectInterface+0x80>)
900068f6:	f004 fd69 	bl	9000b3cc <iprintf>
900068fa:	4809      	ldr	r0, [pc, #36]	; (90006920 <USBH_SelectInterface+0x84>)
900068fc:	f004 fd66 	bl	9000b3cc <iprintf>
90006900:	200a      	movs	r0, #10
90006902:	f004 fd75 	bl	9000b3f0 <putchar>
    status = USBH_FAIL;
90006906:	2002      	movs	r0, #2
90006908:	e7f3      	b.n	900068f2 <USBH_SelectInterface+0x56>
9000690a:	bf00      	nop
9000690c:	900107ea 	.word	0x900107ea
90006910:	90010807 	.word	0x90010807
90006914:	90010816 	.word	0x90010816
90006918:	90010825 	.word	0x90010825
9000691c:	900107a0 	.word	0x900107a0
90006920:	90010834 	.word	0x90010834

90006924 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
90006924:	b510      	push	{r4, lr}
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
90006926:	f890 4447 	ldrb.w	r4, [r0, #1095]	; 0x447
9000692a:	428c      	cmp	r4, r1
9000692c:	d001      	beq.n	90006932 <USBH_FindInterface+0xe>
9000692e:	29ff      	cmp	r1, #255	; 0xff
90006930:	d110      	bne.n	90006954 <USBH_FindInterface+0x30>
90006932:	f890 1448 	ldrb.w	r1, [r0, #1096]	; 0x448
90006936:	4291      	cmp	r1, r2
90006938:	d001      	beq.n	9000693e <USBH_FindInterface+0x1a>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
9000693a:	2aff      	cmp	r2, #255	; 0xff
9000693c:	d10a      	bne.n	90006954 <USBH_FindInterface+0x30>
9000693e:	f890 2449 	ldrb.w	r2, [r0, #1097]	; 0x449
90006942:	429a      	cmp	r2, r3
90006944:	d008      	beq.n	90006958 <USBH_FindInterface+0x34>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
90006946:	f1b3 00ff 	subs.w	r0, r3, #255	; 0xff
9000694a:	bf18      	it	ne
9000694c:	f04f 30ff 	movne.w	r0, #4294967295
90006950:	b2c0      	uxtb	r0, r0
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
}
90006952:	bd10      	pop	{r4, pc}
  return 0xFFU;
90006954:	20ff      	movs	r0, #255	; 0xff
90006956:	e7fc      	b.n	90006952 <USBH_FindInterface+0x2e>
90006958:	2000      	movs	r0, #0
9000695a:	e7fa      	b.n	90006952 <USBH_FindInterface+0x2e>

9000695c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
9000695c:	b510      	push	{r4, lr}
9000695e:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
90006960:	f003 fe22 	bl	9000a5a8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
90006964:	2101      	movs	r1, #1
90006966:	4620      	mov	r0, r4
90006968:	f003 fe70 	bl	9000a64c <USBH_LL_DriverVBUS>

  return USBH_OK;
}
9000696c:	2000      	movs	r0, #0
9000696e:	bd10      	pop	{r4, pc}

90006970 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
90006970:	b570      	push	{r4, r5, r6, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
90006972:	2302      	movs	r3, #2
{
90006974:	b086      	sub	sp, #24
90006976:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
90006978:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
9000697c:	f890 3421 	ldrb.w	r3, [r0, #1057]	; 0x421
90006980:	2b01      	cmp	r3, #1
90006982:	d101      	bne.n	90006988 <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
90006984:	2303      	movs	r3, #3
90006986:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
90006988:	7823      	ldrb	r3, [r4, #0]
9000698a:	2b0b      	cmp	r3, #11
9000698c:	d823      	bhi.n	900069d6 <USBH_Process+0x66>
9000698e:	e8df f013 	tbh	[pc, r3, lsl #1]
90006992:	000c      	.short	0x000c
90006994:	00530025 	.word	0x00530025
90006998:	00220295 	.word	0x00220295
9000699c:	026c0089 	.word	0x026c0089
900069a0:	0217020e 	.word	0x0217020e
900069a4:	02380225 	.word	0x02380225
900069a8:	028c      	.short	0x028c
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
900069aa:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
900069ae:	b193      	cbz	r3, 900069d6 <USBH_Process+0x66>
      {
        USBH_UsrLog("USB Device Connected");
900069b0:	48b6      	ldr	r0, [pc, #728]	; (90006c8c <USBH_Process+0x31c>)
900069b2:	f004 fd0b 	bl	9000b3cc <iprintf>
900069b6:	200a      	movs	r0, #10
900069b8:	f004 fd1a 	bl	9000b3f0 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
900069bc:	2301      	movs	r3, #1
        USBH_Delay(200U);
900069be:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
900069c0:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
900069c2:	f003 fe73 	bl	9000a6ac <USBH_Delay>
        USBH_LL_ResetPort(phost);
900069c6:	4620      	mov	r0, r4
900069c8:	f003 fe06 	bl	9000a5d8 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
900069cc:	2300      	movs	r3, #0
900069ce:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
        phost->Timeout = 0U;
900069d2:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
900069d6:	2000      	movs	r0, #0
900069d8:	b006      	add	sp, #24
900069da:	bd70      	pop	{r4, r5, r6, pc}
      if (phost->device.PortEnabled == 1U)
900069dc:	f894 3423 	ldrb.w	r3, [r4, #1059]	; 0x423
900069e0:	2b01      	cmp	r3, #1
900069e2:	d10b      	bne.n	900069fc <USBH_Process+0x8c>
        USBH_UsrLog("USB Device Reset Completed");
900069e4:	48aa      	ldr	r0, [pc, #680]	; (90006c90 <USBH_Process+0x320>)
900069e6:	f004 fcf1 	bl	9000b3cc <iprintf>
900069ea:	200a      	movs	r0, #10
900069ec:	f004 fd00 	bl	9000b3f0 <putchar>
        phost->device.RstCnt = 0U;
900069f0:	2300      	movs	r3, #0
900069f2:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
        phost->gState = HOST_DEV_ATTACHED;
900069f6:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
900069f8:	7023      	strb	r3, [r4, #0]
900069fa:	e7ec      	b.n	900069d6 <USBH_Process+0x66>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
900069fc:	f8d4 34b4 	ldr.w	r3, [r4, #1204]	; 0x4b4
90006a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90006a04:	d911      	bls.n	90006a2a <USBH_Process+0xba>
          phost->device.RstCnt++;
90006a06:	f894 341f 	ldrb.w	r3, [r4, #1055]	; 0x41f
90006a0a:	3301      	adds	r3, #1
90006a0c:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
90006a0e:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
90006a10:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
          if (phost->device.RstCnt > 3U)
90006a14:	d907      	bls.n	90006a26 <USBH_Process+0xb6>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
90006a16:	489f      	ldr	r0, [pc, #636]	; (90006c94 <USBH_Process+0x324>)
90006a18:	f004 fcd8 	bl	9000b3cc <iprintf>
90006a1c:	200a      	movs	r0, #10
90006a1e:	f004 fce7 	bl	9000b3f0 <putchar>
            phost->gState = HOST_ABORT_STATE;
90006a22:	230d      	movs	r3, #13
90006a24:	e7e8      	b.n	900069f8 <USBH_Process+0x88>
            phost->gState = HOST_IDLE;
90006a26:	2300      	movs	r3, #0
90006a28:	e7e6      	b.n	900069f8 <USBH_Process+0x88>
          phost->Timeout += 10U;
90006a2a:	330a      	adds	r3, #10
          USBH_Delay(10U);
90006a2c:	200a      	movs	r0, #10
          phost->Timeout += 10U;
90006a2e:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
          USBH_Delay(10U);
90006a32:	f003 fe3b 	bl	9000a6ac <USBH_Delay>
90006a36:	e7ce      	b.n	900069d6 <USBH_Process+0x66>
      if (phost->pUser != NULL)
90006a38:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
90006a3c:	b113      	cbz	r3, 90006a44 <USBH_Process+0xd4>
        phost->pUser(phost, HOST_USER_CONNECTION);
90006a3e:	2104      	movs	r1, #4
90006a40:	4620      	mov	r0, r4
90006a42:	4798      	blx	r3
      USBH_Delay(100U);
90006a44:	2064      	movs	r0, #100	; 0x64
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90006a46:	2500      	movs	r5, #0
      USBH_Delay(100U);
90006a48:	f003 fe30 	bl	9000a6ac <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
90006a4c:	4620      	mov	r0, r4
90006a4e:	f003 fdb9 	bl	9000a5c4 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
90006a52:	2305      	movs	r3, #5
      phost->device.speed = USBH_LL_GetSpeed(phost);
90006a54:	f884 041d 	strb.w	r0, [r4, #1053]	; 0x41d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90006a58:	2100      	movs	r1, #0
      phost->gState = HOST_ENUMERATION;
90006a5a:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90006a5c:	4620      	mov	r0, r4
90006a5e:	f000 fd30 	bl	900074c2 <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
90006a62:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90006a64:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
90006a66:	4620      	mov	r0, r4
90006a68:	f000 fd2b 	bl	900074c2 <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90006a6c:	79a3      	ldrb	r3, [r4, #6]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
90006a6e:	4601      	mov	r1, r0
90006a70:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90006a72:	9302      	str	r3, [sp, #8]
90006a74:	2280      	movs	r2, #128	; 0x80
90006a76:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006a7a:	4620      	mov	r0, r4
90006a7c:	9501      	str	r5, [sp, #4]
90006a7e:	9300      	str	r3, [sp, #0]
90006a80:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006a84:	f000 fd09 	bl	9000749a <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
90006a88:	79a3      	ldrb	r3, [r4, #6]
90006a8a:	462a      	mov	r2, r5
90006a8c:	7961      	ldrb	r1, [r4, #5]
90006a8e:	4620      	mov	r0, r4
90006a90:	e9cd 5301 	strd	r5, r3, [sp, #4]
90006a94:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006a98:	9300      	str	r3, [sp, #0]
90006a9a:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006a9e:	f000 fcfc 	bl	9000749a <USBH_OpenPipe>
      break;
90006aa2:	e798      	b.n	900069d6 <USBH_Process+0x66>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
90006aa4:	7865      	ldrb	r5, [r4, #1]
90006aa6:	2d07      	cmp	r5, #7
90006aa8:	d830      	bhi.n	90006b0c <USBH_Process+0x19c>
90006aaa:	e8df f015 	tbh	[pc, r5, lsl #1]
90006aae:	0008      	.short	0x0008
90006ab0:	00b10055 	.word	0x00b10055
90006ab4:	00e600df 	.word	0x00e600df
90006ab8:	01440129 	.word	0x01440129
90006abc:	015f      	.short	0x015f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
90006abe:	2108      	movs	r1, #8
90006ac0:	4620      	mov	r0, r4
90006ac2:	f000 fb65 	bl	90007190 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
90006ac6:	4606      	mov	r6, r0
90006ac8:	b9f0      	cbnz	r0, 90006b08 <USBH_Process+0x198>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
90006aca:	f894 342d 	ldrb.w	r3, [r4, #1069]	; 0x42d

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
90006ace:	2501      	movs	r5, #1
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
90006ad0:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
90006ad2:	7065      	strb	r5, [r4, #1]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
90006ad4:	7921      	ldrb	r1, [r4, #4]
90006ad6:	2280      	movs	r2, #128	; 0x80
90006ad8:	4620      	mov	r0, r4
90006ada:	e9cd 6301 	strd	r6, r3, [sp, #4]
90006ade:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006ae2:	9300      	str	r3, [sp, #0]
90006ae4:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006ae8:	f000 fcd7 	bl	9000749a <USBH_OpenPipe>
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
90006aec:	79a3      	ldrb	r3, [r4, #6]
90006aee:	4632      	mov	r2, r6
90006af0:	7961      	ldrb	r1, [r4, #5]
90006af2:	4620      	mov	r0, r4
90006af4:	e9cd 6301 	strd	r6, r3, [sp, #4]
90006af8:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006afc:	9300      	str	r3, [sp, #0]
90006afe:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006b02:	f000 fcca 	bl	9000749a <USBH_OpenPipe>
90006b06:	e03e      	b.n	90006b86 <USBH_Process+0x216>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90006b08:	2803      	cmp	r0, #3
90006b0a:	d001      	beq.n	90006b10 <USBH_Process+0x1a0>
  switch (phost->EnumState)
90006b0c:	2501      	movs	r5, #1
90006b0e:	e03a      	b.n	90006b86 <USBH_Process+0x216>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
90006b10:	4861      	ldr	r0, [pc, #388]	; (90006c98 <USBH_Process+0x328>)
90006b12:	f004 fc5b 	bl	9000b3cc <iprintf>
90006b16:	4861      	ldr	r0, [pc, #388]	; (90006c9c <USBH_Process+0x32c>)
90006b18:	f004 fc58 	bl	9000b3cc <iprintf>
90006b1c:	200a      	movs	r0, #10
90006b1e:	f004 fc67 	bl	9000b3f0 <putchar>
        phost->device.EnumCnt++;
90006b22:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
90006b26:	3301      	adds	r3, #1
90006b28:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
90006b2a:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
90006b2c:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
90006b30:	d907      	bls.n	90006b42 <USBH_Process+0x1d2>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
90006b32:	485b      	ldr	r0, [pc, #364]	; (90006ca0 <USBH_Process+0x330>)
90006b34:	f004 fc4a 	bl	9000b3cc <iprintf>
90006b38:	200a      	movs	r0, #10
90006b3a:	f004 fc59 	bl	9000b3f0 <putchar>
          phost->gState = HOST_ABORT_STATE;
90006b3e:	230d      	movs	r3, #13
90006b40:	e008      	b.n	90006b54 <USBH_Process+0x1e4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
90006b42:	7961      	ldrb	r1, [r4, #5]
90006b44:	4620      	mov	r0, r4
90006b46:	f000 fcd4 	bl	900074f2 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
90006b4a:	7921      	ldrb	r1, [r4, #4]
90006b4c:	4620      	mov	r0, r4
90006b4e:	f000 fcd0 	bl	900074f2 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
90006b52:	2300      	movs	r3, #0
          USBH_FreePipe(phost, phost->Control.pipe_out);
          USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
90006b54:	7023      	strb	r3, [r4, #0]
90006b56:	e7d9      	b.n	90006b0c <USBH_Process+0x19c>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
90006b58:	2112      	movs	r1, #18
90006b5a:	4620      	mov	r0, r4
90006b5c:	f000 fb18 	bl	90007190 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
90006b60:	bb78      	cbnz	r0, 90006bc2 <USBH_Process+0x252>
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
90006b62:	f8b4 1430 	ldrh.w	r1, [r4, #1072]	; 0x430
90006b66:	484f      	ldr	r0, [pc, #316]	; (90006ca4 <USBH_Process+0x334>)
90006b68:	f004 fc30 	bl	9000b3cc <iprintf>
90006b6c:	200a      	movs	r0, #10
90006b6e:	f004 fc3f 	bl	9000b3f0 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
90006b72:	f8b4 142e 	ldrh.w	r1, [r4, #1070]	; 0x42e
90006b76:	484c      	ldr	r0, [pc, #304]	; (90006ca8 <USBH_Process+0x338>)
90006b78:	f004 fc28 	bl	9000b3cc <iprintf>
90006b7c:	200a      	movs	r0, #10
90006b7e:	f004 fc37 	bl	9000b3f0 <putchar>
        phost->EnumState = ENUM_SET_ADDR;
90006b82:	2302      	movs	r3, #2
90006b84:	7063      	strb	r3, [r4, #1]
      status = USBH_HandleEnum(phost);
90006b86:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
90006b8a:	f89d 3017 	ldrb.w	r3, [sp, #23]
90006b8e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
90006b92:	2b00      	cmp	r3, #0
90006b94:	f47f af1f 	bne.w	900069d6 <USBH_Process+0x66>
        USBH_UsrLog("Enumeration done.");
90006b98:	4844      	ldr	r0, [pc, #272]	; (90006cac <USBH_Process+0x33c>)
90006b9a:	f004 fc17 	bl	9000b3cc <iprintf>
90006b9e:	200a      	movs	r0, #10
90006ba0:	f004 fc26 	bl	9000b3f0 <putchar>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
90006ba4:	f894 3437 	ldrb.w	r3, [r4, #1079]	; 0x437
        phost->device.current_interface = 0U;
90006ba8:	f884 5424 	strb.w	r5, [r4, #1060]	; 0x424
        if (phost->device.DevDesc.bNumConfigurations == 1U)
90006bac:	2b01      	cmp	r3, #1
90006bae:	f040 80fc 	bne.w	90006daa <USBH_Process+0x43a>
          USBH_UsrLog("This device has only 1 configuration.");
90006bb2:	483f      	ldr	r0, [pc, #252]	; (90006cb0 <USBH_Process+0x340>)
90006bb4:	f004 fc0a 	bl	9000b3cc <iprintf>
90006bb8:	200a      	movs	r0, #10
90006bba:	f004 fc19 	bl	9000b3f0 <putchar>
        phost->gState = HOST_SET_CONFIGURATION;
90006bbe:	2308      	movs	r3, #8
90006bc0:	e71a      	b.n	900069f8 <USBH_Process+0x88>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90006bc2:	2803      	cmp	r0, #3
90006bc4:	d1a2      	bne.n	90006b0c <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
90006bc6:	4834      	ldr	r0, [pc, #208]	; (90006c98 <USBH_Process+0x328>)
90006bc8:	f004 fc00 	bl	9000b3cc <iprintf>
90006bcc:	4839      	ldr	r0, [pc, #228]	; (90006cb4 <USBH_Process+0x344>)
90006bce:	f004 fbfd 	bl	9000b3cc <iprintf>
90006bd2:	200a      	movs	r0, #10
90006bd4:	f004 fc0c 	bl	9000b3f0 <putchar>
        phost->device.EnumCnt++;
90006bd8:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
90006bdc:	3301      	adds	r3, #1
90006bde:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
90006be0:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
90006be2:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
90006be6:	d908      	bls.n	90006bfa <USBH_Process+0x28a>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
90006be8:	482d      	ldr	r0, [pc, #180]	; (90006ca0 <USBH_Process+0x330>)
90006bea:	f004 fbef 	bl	9000b3cc <iprintf>
90006bee:	200a      	movs	r0, #10
90006bf0:	f004 fbfe 	bl	9000b3f0 <putchar>
          phost->gState = HOST_ABORT_STATE;
90006bf4:	230d      	movs	r3, #13
          phost->gState = HOST_IDLE;
90006bf6:	7023      	strb	r3, [r4, #0]
90006bf8:	e7c5      	b.n	90006b86 <USBH_Process+0x216>
          USBH_FreePipe(phost, phost->Control.pipe_out);
90006bfa:	7961      	ldrb	r1, [r4, #5]
90006bfc:	4620      	mov	r0, r4
90006bfe:	f000 fc78 	bl	900074f2 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
90006c02:	7921      	ldrb	r1, [r4, #4]
90006c04:	4620      	mov	r0, r4
90006c06:	f000 fc74 	bl	900074f2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
90006c0a:	2300      	movs	r3, #0
90006c0c:	7063      	strb	r3, [r4, #1]
90006c0e:	e7f2      	b.n	90006bf6 <USBH_Process+0x286>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
90006c10:	2101      	movs	r1, #1
90006c12:	4620      	mov	r0, r4
90006c14:	f000 fbaf 	bl	90007376 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
90006c18:	4606      	mov	r6, r0
90006c1a:	b980      	cbnz	r0, 90006c3e <USBH_Process+0x2ce>
        phost->device.address = USBH_DEVICE_ADDRESS;
90006c1c:	2501      	movs	r5, #1
        USBH_Delay(2U);
90006c1e:	2002      	movs	r0, #2
90006c20:	f003 fd44 	bl	9000a6ac <USBH_Delay>
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
90006c24:	4824      	ldr	r0, [pc, #144]	; (90006cb8 <USBH_Process+0x348>)
90006c26:	4629      	mov	r1, r5
        phost->device.address = USBH_DEVICE_ADDRESS;
90006c28:	f884 541c 	strb.w	r5, [r4, #1052]	; 0x41c
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
90006c2c:	f004 fbce 	bl	9000b3cc <iprintf>
90006c30:	200a      	movs	r0, #10
90006c32:	f004 fbdd 	bl	9000b3f0 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
90006c36:	2303      	movs	r3, #3
90006c38:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
90006c3a:	79a3      	ldrb	r3, [r4, #6]
90006c3c:	e74a      	b.n	90006ad4 <USBH_Process+0x164>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90006c3e:	2803      	cmp	r0, #3
90006c40:	f47f af64 	bne.w	90006b0c <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Device Set Address request failed");
90006c44:	4814      	ldr	r0, [pc, #80]	; (90006c98 <USBH_Process+0x328>)
90006c46:	f004 fbc1 	bl	9000b3cc <iprintf>
90006c4a:	481c      	ldr	r0, [pc, #112]	; (90006cbc <USBH_Process+0x34c>)
90006c4c:	f004 fbbe 	bl	9000b3cc <iprintf>
90006c50:	200a      	movs	r0, #10
90006c52:	f004 fbcd 	bl	9000b3f0 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
90006c56:	4812      	ldr	r0, [pc, #72]	; (90006ca0 <USBH_Process+0x330>)
90006c58:	f004 fbb8 	bl	9000b3cc <iprintf>
90006c5c:	200a      	movs	r0, #10
90006c5e:	f004 fbc7 	bl	9000b3f0 <putchar>
        phost->gState = HOST_ABORT_STATE;
90006c62:	230d      	movs	r3, #13
90006c64:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
90006c66:	2300      	movs	r3, #0
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
90006c68:	7063      	strb	r3, [r4, #1]
90006c6a:	e74f      	b.n	90006b0c <USBH_Process+0x19c>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
90006c6c:	2109      	movs	r1, #9
90006c6e:	4620      	mov	r0, r4
90006c70:	f000 fad6 	bl	90007220 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
90006c74:	bb20      	cbnz	r0, 90006cc0 <USBH_Process+0x350>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
90006c76:	2304      	movs	r3, #4
90006c78:	e7f6      	b.n	90006c68 <USBH_Process+0x2f8>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
90006c7a:	f8b4 143a 	ldrh.w	r1, [r4, #1082]	; 0x43a
90006c7e:	4620      	mov	r0, r4
90006c80:	f000 face 	bl	90007220 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
90006c84:	b9e0      	cbnz	r0, 90006cc0 <USBH_Process+0x350>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
90006c86:	2305      	movs	r3, #5
90006c88:	e7ee      	b.n	90006c68 <USBH_Process+0x2f8>
90006c8a:	bf00      	nop
90006c8c:	90010852 	.word	0x90010852
90006c90:	90010867 	.word	0x90010867
90006c94:	90010882 	.word	0x90010882
90006c98:	900107a0 	.word	0x900107a0
90006c9c:	900108ae 	.word	0x900108ae
90006ca0:	900108e2 	.word	0x900108e2
90006ca4:	90010921 	.word	0x90010921
90006ca8:	9001092a 	.word	0x9001092a
90006cac:	90010a51 	.word	0x90010a51
90006cb0:	90010a63 	.word	0x90010a63
90006cb4:	90010933 	.word	0x90010933
90006cb8:	9001096c 	.word	0x9001096c
90006cbc:	90010984 	.word	0x90010984
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90006cc0:	2803      	cmp	r0, #3
90006cc2:	f47f af23 	bne.w	90006b0c <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
90006cc6:	4892      	ldr	r0, [pc, #584]	; (90006f10 <USBH_Process+0x5a0>)
90006cc8:	f004 fb80 	bl	9000b3cc <iprintf>
90006ccc:	4891      	ldr	r0, [pc, #580]	; (90006f14 <USBH_Process+0x5a4>)
90006cce:	f004 fb7d 	bl	9000b3cc <iprintf>
90006cd2:	200a      	movs	r0, #10
90006cd4:	f004 fb8c 	bl	9000b3f0 <putchar>
        phost->device.EnumCnt++;
90006cd8:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
90006cdc:	3301      	adds	r3, #1
90006cde:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
90006ce0:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
90006ce2:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
90006ce6:	f63f af24 	bhi.w	90006b32 <USBH_Process+0x1c2>
          USBH_FreePipe(phost, phost->Control.pipe_out);
90006cea:	7961      	ldrb	r1, [r4, #5]
90006cec:	4620      	mov	r0, r4
90006cee:	f000 fc00 	bl	900074f2 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
90006cf2:	7921      	ldrb	r1, [r4, #4]
90006cf4:	4620      	mov	r0, r4
90006cf6:	f000 fbfc 	bl	900074f2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
90006cfa:	2300      	movs	r3, #0
90006cfc:	7063      	strb	r3, [r4, #1]
90006cfe:	e729      	b.n	90006b54 <USBH_Process+0x1e4>
      if (phost->device.DevDesc.iManufacturer != 0U)
90006d00:	f894 1434 	ldrb.w	r1, [r4, #1076]	; 0x434
90006d04:	b199      	cbz	r1, 90006d2e <USBH_Process+0x3be>
                                        phost->device.Data, 0xFFU);
90006d06:	f504 7507 	add.w	r5, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
90006d0a:	23ff      	movs	r3, #255	; 0xff
90006d0c:	4620      	mov	r0, r4
90006d0e:	462a      	mov	r2, r5
90006d10:	f000 fb0a 	bl	90007328 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
90006d14:	b940      	cbnz	r0, 90006d28 <USBH_Process+0x3b8>
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
90006d16:	4629      	mov	r1, r5
90006d18:	487f      	ldr	r0, [pc, #508]	; (90006f18 <USBH_Process+0x5a8>)
90006d1a:	f004 fb57 	bl	9000b3cc <iprintf>
90006d1e:	200a      	movs	r0, #10
90006d20:	f004 fb66 	bl	9000b3f0 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
90006d24:	2306      	movs	r3, #6
90006d26:	e79f      	b.n	90006c68 <USBH_Process+0x2f8>
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
90006d28:	2803      	cmp	r0, #3
90006d2a:	f47f aeef 	bne.w	90006b0c <USBH_Process+0x19c>
        {
          USBH_UsrLog("Manufacturer : N/A");
90006d2e:	487b      	ldr	r0, [pc, #492]	; (90006f1c <USBH_Process+0x5ac>)
90006d30:	f004 fb4c 	bl	9000b3cc <iprintf>
90006d34:	e7f3      	b.n	90006d1e <USBH_Process+0x3ae>
#endif
      }
      break;

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
90006d36:	f894 1435 	ldrb.w	r1, [r4, #1077]	; 0x435
90006d3a:	b199      	cbz	r1, 90006d64 <USBH_Process+0x3f4>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
                                        phost->device.Data, 0xFFU);
90006d3c:	f504 7507 	add.w	r5, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
90006d40:	23ff      	movs	r3, #255	; 0xff
90006d42:	4620      	mov	r0, r4
90006d44:	462a      	mov	r2, r5
90006d46:	f000 faef 	bl	90007328 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
90006d4a:	b940      	cbnz	r0, 90006d5e <USBH_Process+0x3ee>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
90006d4c:	4629      	mov	r1, r5
90006d4e:	4874      	ldr	r0, [pc, #464]	; (90006f20 <USBH_Process+0x5b0>)
90006d50:	f004 fb3c 	bl	9000b3cc <iprintf>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
        {
          USBH_UsrLog("Product : N/A");
90006d54:	200a      	movs	r0, #10
90006d56:	f004 fb4b 	bl	9000b3f0 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
90006d5a:	2307      	movs	r3, #7
90006d5c:	e784      	b.n	90006c68 <USBH_Process+0x2f8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
90006d5e:	2803      	cmp	r0, #3
90006d60:	f47f aed4 	bne.w	90006b0c <USBH_Process+0x19c>
          USBH_UsrLog("Product : N/A");
90006d64:	486f      	ldr	r0, [pc, #444]	; (90006f24 <USBH_Process+0x5b4>)
90006d66:	f004 fb31 	bl	9000b3cc <iprintf>
90006d6a:	e7f3      	b.n	90006d54 <USBH_Process+0x3e4>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
90006d6c:	f894 1436 	ldrb.w	r1, [r4, #1078]	; 0x436
90006d70:	b199      	cbz	r1, 90006d9a <USBH_Process+0x42a>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
                                        phost->device.Data, 0xFFU);
90006d72:	f504 7607 	add.w	r6, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
90006d76:	23ff      	movs	r3, #255	; 0xff
90006d78:	4620      	mov	r0, r4
90006d7a:	4632      	mov	r2, r6
90006d7c:	f000 fad4 	bl	90007328 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
90006d80:	4605      	mov	r5, r0
90006d82:	b938      	cbnz	r0, 90006d94 <USBH_Process+0x424>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
90006d84:	4631      	mov	r1, r6
90006d86:	4868      	ldr	r0, [pc, #416]	; (90006f28 <USBH_Process+0x5b8>)
90006d88:	f004 fb20 	bl	9000b3cc <iprintf>
90006d8c:	200a      	movs	r0, #10
90006d8e:	f004 fb2f 	bl	9000b3f0 <putchar>
          Status = USBH_OK;
90006d92:	e6f8      	b.n	90006b86 <USBH_Process+0x216>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
90006d94:	2803      	cmp	r0, #3
90006d96:	f47f aeb9 	bne.w	90006b0c <USBH_Process+0x19c>
        {
          USBH_UsrLog("Serial Number : N/A");
90006d9a:	4864      	ldr	r0, [pc, #400]	; (90006f2c <USBH_Process+0x5bc>)
          Status = USBH_OK;
90006d9c:	2500      	movs	r5, #0
          USBH_UsrLog("Serial Number : N/A");
90006d9e:	f004 fb15 	bl	9000b3cc <iprintf>
90006da2:	200a      	movs	r0, #10
90006da4:	f004 fb24 	bl	9000b3f0 <putchar>
          Status = USBH_OK;
90006da8:	e6ed      	b.n	90006b86 <USBH_Process+0x216>
          phost->gState = HOST_INPUT;
90006daa:	2307      	movs	r3, #7
90006dac:	e624      	b.n	900069f8 <USBH_Process+0x88>
      if (phost->pUser != NULL)
90006dae:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
90006db2:	2b00      	cmp	r3, #0
90006db4:	f43f ae0f 	beq.w	900069d6 <USBH_Process+0x66>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
90006db8:	2101      	movs	r1, #1
90006dba:	4620      	mov	r0, r4
90006dbc:	4798      	blx	r3
90006dbe:	e6fe      	b.n	90006bbe <USBH_Process+0x24e>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
90006dc0:	f894 143d 	ldrb.w	r1, [r4, #1085]	; 0x43d
90006dc4:	4620      	mov	r0, r4
90006dc6:	f000 fae3 	bl	90007390 <USBH_SetCfg>
90006dca:	2800      	cmp	r0, #0
90006dcc:	f47f ae03 	bne.w	900069d6 <USBH_Process+0x66>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
90006dd0:	2309      	movs	r3, #9
        USBH_UsrLog("Default configuration set.");
90006dd2:	4857      	ldr	r0, [pc, #348]	; (90006f30 <USBH_Process+0x5c0>)
        phost->gState = HOST_SET_WAKEUP_FEATURE;
90006dd4:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
90006dd6:	f004 faf9 	bl	9000b3cc <iprintf>
90006dda:	e042      	b.n	90006e62 <USBH_Process+0x4f2>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
90006ddc:	f894 343f 	ldrb.w	r3, [r4, #1087]	; 0x43f
90006de0:	069b      	lsls	r3, r3, #26
90006de2:	d50c      	bpl.n	90006dfe <USBH_Process+0x48e>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
90006de4:	2101      	movs	r1, #1
90006de6:	4620      	mov	r0, r4
90006de8:	f000 fadf 	bl	900073aa <USBH_SetFeature>
90006dec:	2800      	cmp	r0, #0
90006dee:	f47f adf2 	bne.w	900069d6 <USBH_Process+0x66>
          USBH_UsrLog("Device remote wakeup enabled");
90006df2:	4850      	ldr	r0, [pc, #320]	; (90006f34 <USBH_Process+0x5c4>)
90006df4:	f004 faea 	bl	9000b3cc <iprintf>
90006df8:	200a      	movs	r0, #10
90006dfa:	f004 faf9 	bl	9000b3f0 <putchar>
        phost->gState = HOST_CHECK_CLASS;
90006dfe:	230a      	movs	r3, #10
90006e00:	e5fa      	b.n	900069f8 <USBH_Process+0x88>
      if (phost->ClassNumber == 0U)
90006e02:	f8d4 346c 	ldr.w	r3, [r4, #1132]	; 0x46c
90006e06:	b90b      	cbnz	r3, 90006e0c <USBH_Process+0x49c>
        USBH_UsrLog("No Class has been registered.");
90006e08:	484b      	ldr	r0, [pc, #300]	; (90006f38 <USBH_Process+0x5c8>)
90006e0a:	e7e4      	b.n	90006dd6 <USBH_Process+0x466>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
90006e0c:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
90006e10:	f894 2447 	ldrb.w	r2, [r4, #1095]	; 0x447
90006e14:	7919      	ldrb	r1, [r3, #4]
90006e16:	4291      	cmp	r1, r2
90006e18:	d006      	beq.n	90006e28 <USBH_Process+0x4b8>
90006e1a:	2300      	movs	r3, #0
          USBH_UsrLog("No registered class for this device.");
90006e1c:	4847      	ldr	r0, [pc, #284]	; (90006f3c <USBH_Process+0x5cc>)
90006e1e:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
          phost->gState = HOST_ABORT_STATE;
90006e22:	230d      	movs	r3, #13
90006e24:	7023      	strb	r3, [r4, #0]
          USBH_UsrLog("No registered class for this device.");
90006e26:	e7d6      	b.n	90006dd6 <USBH_Process+0x466>
90006e28:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
          if (phost->pActiveClass->Init(phost) == USBH_OK)
90006e2c:	4620      	mov	r0, r4
90006e2e:	689b      	ldr	r3, [r3, #8]
90006e30:	4798      	blx	r3
90006e32:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90006e36:	b970      	cbnz	r0, 90006e56 <USBH_Process+0x4e6>
            phost->gState = HOST_CLASS_REQUEST;
90006e38:	2206      	movs	r2, #6
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
90006e3a:	4841      	ldr	r0, [pc, #260]	; (90006f40 <USBH_Process+0x5d0>)
            phost->gState = HOST_CLASS_REQUEST;
90006e3c:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
90006e3e:	6819      	ldr	r1, [r3, #0]
90006e40:	f004 fac4 	bl	9000b3cc <iprintf>
90006e44:	200a      	movs	r0, #10
90006e46:	f004 fad3 	bl	9000b3f0 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
90006e4a:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
90006e4e:	2103      	movs	r1, #3
90006e50:	4620      	mov	r0, r4
90006e52:	4798      	blx	r3
90006e54:	e5bf      	b.n	900069d6 <USBH_Process+0x66>
            phost->gState = HOST_ABORT_STATE;
90006e56:	220d      	movs	r2, #13
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
90006e58:	483a      	ldr	r0, [pc, #232]	; (90006f44 <USBH_Process+0x5d4>)
            phost->gState = HOST_ABORT_STATE;
90006e5a:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
90006e5c:	6819      	ldr	r1, [r3, #0]
90006e5e:	f004 fab5 	bl	9000b3cc <iprintf>
        USBH_ErrLog("Invalid Class Driver.");
90006e62:	200a      	movs	r0, #10
90006e64:	f004 fac4 	bl	9000b3f0 <putchar>
90006e68:	e5b5      	b.n	900069d6 <USBH_Process+0x66>
      if (phost->pActiveClass != NULL)
90006e6a:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90006e6e:	b1ab      	cbz	r3, 90006e9c <USBH_Process+0x52c>
        status = phost->pActiveClass->Requests(phost);
90006e70:	691b      	ldr	r3, [r3, #16]
90006e72:	4620      	mov	r0, r4
90006e74:	4798      	blx	r3
90006e76:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
90006e7a:	f89d 3017 	ldrb.w	r3, [sp, #23]
90006e7e:	b90b      	cbnz	r3, 90006e84 <USBH_Process+0x514>
          phost->gState = HOST_CLASS;
90006e80:	230b      	movs	r3, #11
90006e82:	e5b9      	b.n	900069f8 <USBH_Process+0x88>
        else if (status == USBH_FAIL)
90006e84:	f89d 3017 	ldrb.w	r3, [sp, #23]
90006e88:	2b02      	cmp	r3, #2
90006e8a:	f47f ada4 	bne.w	900069d6 <USBH_Process+0x66>
          phost->gState = HOST_ABORT_STATE;
90006e8e:	230d      	movs	r3, #13
          USBH_ErrLog("Device not responding Please Unplug.");
90006e90:	481f      	ldr	r0, [pc, #124]	; (90006f10 <USBH_Process+0x5a0>)
          phost->gState = HOST_ABORT_STATE;
90006e92:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
90006e94:	f004 fa9a 	bl	9000b3cc <iprintf>
90006e98:	482b      	ldr	r0, [pc, #172]	; (90006f48 <USBH_Process+0x5d8>)
90006e9a:	e79c      	b.n	90006dd6 <USBH_Process+0x466>
        phost->gState = HOST_ABORT_STATE;
90006e9c:	230d      	movs	r3, #13
        USBH_ErrLog("Invalid Class Driver.");
90006e9e:	481c      	ldr	r0, [pc, #112]	; (90006f10 <USBH_Process+0x5a0>)
        phost->gState = HOST_ABORT_STATE;
90006ea0:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
90006ea2:	f004 fa93 	bl	9000b3cc <iprintf>
90006ea6:	4829      	ldr	r0, [pc, #164]	; (90006f4c <USBH_Process+0x5dc>)
90006ea8:	e795      	b.n	90006dd6 <USBH_Process+0x466>
      if (phost->pActiveClass != NULL)
90006eaa:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90006eae:	2b00      	cmp	r3, #0
90006eb0:	f43f ad91 	beq.w	900069d6 <USBH_Process+0x66>
        phost->pActiveClass->BgndProcess(phost);
90006eb4:	695b      	ldr	r3, [r3, #20]
90006eb6:	4620      	mov	r0, r4
90006eb8:	4798      	blx	r3
90006eba:	e58c      	b.n	900069d6 <USBH_Process+0x66>
      phost->device.is_disconnected = 0U;
90006ebc:	2500      	movs	r5, #0
      DeInitStateMachine(phost);
90006ebe:	4620      	mov	r0, r4
      phost->device.is_disconnected = 0U;
90006ec0:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
      DeInitStateMachine(phost);
90006ec4:	f7ff fc7e 	bl	900067c4 <DeInitStateMachine.isra.0>
      if (phost->pActiveClass != NULL)
90006ec8:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90006ecc:	b123      	cbz	r3, 90006ed8 <USBH_Process+0x568>
        phost->pActiveClass->DeInit(phost);
90006ece:	68db      	ldr	r3, [r3, #12]
90006ed0:	4620      	mov	r0, r4
90006ed2:	4798      	blx	r3
        phost->pActiveClass = NULL;
90006ed4:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
      if (phost->pUser != NULL)
90006ed8:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
90006edc:	b113      	cbz	r3, 90006ee4 <USBH_Process+0x574>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
90006ede:	2105      	movs	r1, #5
90006ee0:	4620      	mov	r0, r4
90006ee2:	4798      	blx	r3
      USBH_UsrLog("USB Device disconnected");
90006ee4:	481a      	ldr	r0, [pc, #104]	; (90006f50 <USBH_Process+0x5e0>)
90006ee6:	f004 fa71 	bl	9000b3cc <iprintf>
90006eea:	200a      	movs	r0, #10
90006eec:	f004 fa80 	bl	9000b3f0 <putchar>
      if (phost->device.is_ReEnumerated == 1U)
90006ef0:	f894 3422 	ldrb.w	r3, [r4, #1058]	; 0x422
90006ef4:	2b01      	cmp	r3, #1
90006ef6:	d106      	bne.n	90006f06 <USBH_Process+0x596>
        phost->device.is_ReEnumerated = 0U;
90006ef8:	2300      	movs	r3, #0
        USBH_Start(phost);
90006efa:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
90006efc:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
        USBH_Start(phost);
90006f00:	f7ff fd2c 	bl	9000695c <USBH_Start>
90006f04:	e567      	b.n	900069d6 <USBH_Process+0x66>
        USBH_LL_Start(phost);
90006f06:	4620      	mov	r0, r4
90006f08:	f003 fb4e 	bl	9000a5a8 <USBH_LL_Start>
90006f0c:	e563      	b.n	900069d6 <USBH_Process+0x66>
90006f0e:	bf00      	nop
90006f10:	900107a0 	.word	0x900107a0
90006f14:	900109b5 	.word	0x900109b5
90006f18:	900109f7 	.word	0x900109f7
90006f1c:	90010a09 	.word	0x90010a09
90006f20:	900106a3 	.word	0x900106a3
90006f24:	90010a1c 	.word	0x90010a1c
90006f28:	90010a2a 	.word	0x90010a2a
90006f2c:	90010a3d 	.word	0x90010a3d
90006f30:	90010a89 	.word	0x90010a89
90006f34:	90010aa4 	.word	0x90010aa4
90006f38:	90010ac1 	.word	0x90010ac1
90006f3c:	90010adf 	.word	0x90010adf
90006f40:	90010b04 	.word	0x90010b04
90006f44:	90010b16 	.word	0x90010b16
90006f48:	90010b36 	.word	0x90010b36
90006f4c:	90010b5b 	.word	0x90010b5b
90006f50:	90010b71 	.word	0x90010b71

90006f54 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
90006f54:	f8c0 14b0 	str.w	r1, [r0, #1200]	; 0x4b0
}
90006f58:	4770      	bx	lr

90006f5a <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
90006f5a:	f8d0 24b0 	ldr.w	r2, [r0, #1200]	; 0x4b0
90006f5e:	3201      	adds	r2, #1
90006f60:	f8c0 24b0 	str.w	r2, [r0, #1200]	; 0x4b0
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
90006f64:	7802      	ldrb	r2, [r0, #0]
90006f66:	2a0b      	cmp	r2, #11
90006f68:	d104      	bne.n	90006f74 <USBH_LL_IncTimer+0x1a>
90006f6a:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
90006f6e:	b10b      	cbz	r3, 90006f74 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
90006f70:	699b      	ldr	r3, [r3, #24]
90006f72:	4718      	bx	r3
}
90006f74:	4770      	bx	lr

90006f76 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
90006f76:	2301      	movs	r3, #1
90006f78:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
90006f7c:	4770      	bx	lr

90006f7e <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
90006f7e:	2300      	movs	r3, #0
90006f80:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
90006f84:	4770      	bx	lr

90006f86 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
90006f86:	2301      	movs	r3, #1
90006f88:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
90006f8c:	2300      	movs	r3, #0
90006f8e:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
90006f92:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
90006f96:	4618      	mov	r0, r3
90006f98:	4770      	bx	lr

90006f9a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
90006f9a:	b538      	push	{r3, r4, r5, lr}
  /* update device connection states */
  phost->device.is_disconnected = 1U;
90006f9c:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
90006f9e:	2500      	movs	r5, #0
{
90006fa0:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
90006fa2:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
90006fa6:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
90006faa:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  USBH_LL_Stop(phost);
90006fae:	f003 fb02 	bl	9000a5b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
90006fb2:	7921      	ldrb	r1, [r4, #4]
90006fb4:	4620      	mov	r0, r4
90006fb6:	f000 fa9c 	bl	900074f2 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
90006fba:	7961      	ldrb	r1, [r4, #5]
90006fbc:	4620      	mov	r0, r4
90006fbe:	f000 fa98 	bl	900074f2 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
90006fc2:	4628      	mov	r0, r5
90006fc4:	bd38      	pop	{r3, r4, r5, pc}
	...

90006fc8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
90006fc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
90006fca:	7885      	ldrb	r5, [r0, #2]
{
90006fcc:	4604      	mov	r4, r0
  switch (phost->RequestState)
90006fce:	2d01      	cmp	r5, #1
90006fd0:	d003      	beq.n	90006fda <USBH_CtlReq+0x12>
90006fd2:	2d02      	cmp	r5, #2
90006fd4:	d007      	beq.n	90006fe6 <USBH_CtlReq+0x1e>
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
        {
          phost->Control.state = CTRL_ERROR;
90006fd6:	2501      	movs	r5, #1
  return status;
90006fd8:	e019      	b.n	9000700e <USBH_CtlReq+0x46>
      phost->RequestState = CMD_WAIT;
90006fda:	2302      	movs	r3, #2
      phost->Control.buff = buff;
90006fdc:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
90006fde:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
90006fe0:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
90006fe2:	70a3      	strb	r3, [r4, #2]
90006fe4:	e013      	b.n	9000700e <USBH_CtlReq+0x46>
  switch (phost->Control.state)
90006fe6:	7e06      	ldrb	r6, [r0, #24]
90006fe8:	1e73      	subs	r3, r6, #1
90006fea:	2b0a      	cmp	r3, #10
90006fec:	d8f3      	bhi.n	90006fd6 <USBH_CtlReq+0xe>
90006fee:	e8df f003 	tbb	[pc, r3]
90006ff2:	1106      	.short	0x1106
90006ff4:	4e42392f 	.word	0x4e42392f
90006ff8:	8478675d 	.word	0x8478675d
90006ffc:	8c          	.byte	0x8c
90006ffd:	00          	.byte	0x00
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
90006ffe:	7942      	ldrb	r2, [r0, #5]
90007000:	f100 0110 	add.w	r1, r0, #16
90007004:	f000 f9eb 	bl	900073de <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
90007008:	4635      	mov	r5, r6
9000700a:	2302      	movs	r3, #2
9000700c:	7623      	strb	r3, [r4, #24]
}
9000700e:	4628      	mov	r0, r5
90007010:	b002      	add	sp, #8
90007012:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90007014:	7941      	ldrb	r1, [r0, #5]
90007016:	f003 fb15 	bl	9000a644 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
9000701a:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
9000701c:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
9000701e:	d111      	bne.n	90007044 <USBH_CtlReq+0x7c>
        if (phost->Control.setup.b.wLength.w != 0U)
90007020:	8ae2      	ldrh	r2, [r4, #22]
90007022:	f994 3010 	ldrsb.w	r3, [r4, #16]
90007026:	b13a      	cbz	r2, 90007038 <USBH_CtlReq+0x70>
          if (direction == USB_D2H)
90007028:	2b00      	cmp	r3, #0
9000702a:	da02      	bge.n	90007032 <USBH_CtlReq+0x6a>
            phost->Control.state = CTRL_DATA_IN;
9000702c:	2303      	movs	r3, #3
        phost->Control.state = CTRL_IDLE;
9000702e:	7623      	strb	r3, [r4, #24]
90007030:	e7ed      	b.n	9000700e <USBH_CtlReq+0x46>
            phost->Control.state = CTRL_DATA_OUT;
90007032:	2305      	movs	r3, #5
    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_IN_WAIT;
90007034:	7623      	strb	r3, [r4, #24]
      else if (status == USBH_FAIL)
90007036:	e7ce      	b.n	90006fd6 <USBH_CtlReq+0xe>
          if (direction == USB_D2H)
90007038:	2b00      	cmp	r3, #0
9000703a:	da01      	bge.n	90007040 <USBH_CtlReq+0x78>
        phost->Control.state = CTRL_STATUS_OUT;
9000703c:	2309      	movs	r3, #9
9000703e:	e7f9      	b.n	90007034 <USBH_CtlReq+0x6c>
            phost->Control.state = CTRL_STATUS_IN;
90007040:	2307      	movs	r3, #7
90007042:	e7f7      	b.n	90007034 <USBH_CtlReq+0x6c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
90007044:	2804      	cmp	r0, #4
90007046:	d001      	beq.n	9000704c <USBH_CtlReq+0x84>
90007048:	2802      	cmp	r0, #2
9000704a:	d1c4      	bne.n	90006fd6 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
9000704c:	230b      	movs	r3, #11
9000704e:	e7f1      	b.n	90007034 <USBH_CtlReq+0x6c>
      phost->Control.timer = (uint16_t)phost->Timer;
90007050:	f8d0 34b0 	ldr.w	r3, [r0, #1200]	; 0x4b0
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
90007054:	8982      	ldrh	r2, [r0, #12]
      phost->Control.timer = (uint16_t)phost->Timer;
90007056:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
90007058:	6881      	ldr	r1, [r0, #8]
9000705a:	7903      	ldrb	r3, [r0, #4]
9000705c:	f000 f9e6 	bl	9000742c <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
90007060:	2304      	movs	r3, #4
90007062:	e7e7      	b.n	90007034 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
90007064:	7901      	ldrb	r1, [r0, #4]
90007066:	f003 faed 	bl	9000a644 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
9000706a:	2801      	cmp	r0, #1
9000706c:	d0e6      	beq.n	9000703c <USBH_CtlReq+0x74>
      if (URB_Status == USBH_URB_STALL)
9000706e:	2805      	cmp	r0, #5
90007070:	d035      	beq.n	900070de <USBH_CtlReq+0x116>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
90007072:	2804      	cmp	r0, #4
90007074:	e7e9      	b.n	9000704a <USBH_CtlReq+0x82>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
90007076:	2501      	movs	r5, #1
90007078:	9500      	str	r5, [sp, #0]
9000707a:	7943      	ldrb	r3, [r0, #5]
9000707c:	8982      	ldrh	r2, [r0, #12]
9000707e:	6881      	ldr	r1, [r0, #8]
90007080:	f000 f9bd 	bl	900073fe <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
90007084:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
90007088:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
9000708a:	2306      	movs	r3, #6
9000708c:	e7cf      	b.n	9000702e <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
9000708e:	7941      	ldrb	r1, [r0, #5]
90007090:	f003 fad8 	bl	9000a644 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90007094:	2801      	cmp	r0, #1
90007096:	d0d3      	beq.n	90007040 <USBH_CtlReq+0x78>
      else if (URB_Status == USBH_URB_STALL)
90007098:	2805      	cmp	r0, #5
9000709a:	d020      	beq.n	900070de <USBH_CtlReq+0x116>
      else if (URB_Status == USBH_URB_NOTREADY)
9000709c:	2802      	cmp	r0, #2
9000709e:	d0c8      	beq.n	90007032 <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
900070a0:	2804      	cmp	r0, #4
900070a2:	d198      	bne.n	90006fd6 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
900070a4:	230b      	movs	r3, #11
900070a6:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
900070a8:	2301      	movs	r3, #1
900070aa:	e79a      	b.n	90006fe2 <USBH_CtlReq+0x1a>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
900070ac:	2200      	movs	r2, #0
900070ae:	7903      	ldrb	r3, [r0, #4]
900070b0:	4611      	mov	r1, r2
900070b2:	f000 f9bb 	bl	9000742c <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
900070b6:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
900070ba:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
900070bc:	2308      	movs	r3, #8
900070be:	e7b9      	b.n	90007034 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
900070c0:	7901      	ldrb	r1, [r0, #4]
900070c2:	f003 fabf 	bl	9000a644 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
900070c6:	2801      	cmp	r0, #1
900070c8:	d104      	bne.n	900070d4 <USBH_CtlReq+0x10c>
        status = USBH_OK;
900070ca:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
900070cc:	2301      	movs	r3, #1
900070ce:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
900070d0:	2300      	movs	r3, #0
900070d2:	e7ac      	b.n	9000702e <USBH_CtlReq+0x66>
      else if (URB_Status == USBH_URB_ERROR)
900070d4:	2804      	cmp	r0, #4
900070d6:	d0b9      	beq.n	9000704c <USBH_CtlReq+0x84>
        if (URB_Status == USBH_URB_STALL)
900070d8:	2805      	cmp	r0, #5
900070da:	f47f af7c 	bne.w	90006fd6 <USBH_CtlReq+0xe>
        status = USBH_OK;
900070de:	2503      	movs	r5, #3
900070e0:	e7f4      	b.n	900070cc <USBH_CtlReq+0x104>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
900070e2:	2200      	movs	r2, #0
900070e4:	2501      	movs	r5, #1
900070e6:	4611      	mov	r1, r2
900070e8:	9500      	str	r5, [sp, #0]
900070ea:	7943      	ldrb	r3, [r0, #5]
900070ec:	f000 f987 	bl	900073fe <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
900070f0:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
900070f4:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
900070f6:	230a      	movs	r3, #10
900070f8:	e799      	b.n	9000702e <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
900070fa:	7941      	ldrb	r1, [r0, #5]
900070fc:	f003 faa2 	bl	9000a644 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90007100:	2801      	cmp	r0, #1
90007102:	d0e2      	beq.n	900070ca <USBH_CtlReq+0x102>
      else if (URB_Status == USBH_URB_NOTREADY)
90007104:	2802      	cmp	r0, #2
90007106:	d1b4      	bne.n	90007072 <USBH_CtlReq+0xaa>
90007108:	e798      	b.n	9000703c <USBH_CtlReq+0x74>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
9000710a:	7e43      	ldrb	r3, [r0, #25]
9000710c:	3301      	adds	r3, #1
9000710e:	b2db      	uxtb	r3, r3
90007110:	2b02      	cmp	r3, #2
90007112:	7643      	strb	r3, [r0, #25]
90007114:	d803      	bhi.n	9000711e <USBH_CtlReq+0x156>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
90007116:	2501      	movs	r5, #1
90007118:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
9000711a:	7085      	strb	r5, [r0, #2]
      else if (status == USBH_FAIL)
9000711c:	e777      	b.n	9000700e <USBH_CtlReq+0x46>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
9000711e:	2600      	movs	r6, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
90007120:	f8d0 34c0 	ldr.w	r3, [r0, #1216]	; 0x4c0
90007124:	2106      	movs	r1, #6
90007126:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");
90007128:	4809      	ldr	r0, [pc, #36]	; (90007150 <USBH_CtlReq+0x188>)
        phost->Control.errorcount = 0U;
9000712a:	7666      	strb	r6, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");
9000712c:	f004 f94e 	bl	9000b3cc <iprintf>
90007130:	4808      	ldr	r0, [pc, #32]	; (90007154 <USBH_CtlReq+0x18c>)
90007132:	f004 f94b 	bl	9000b3cc <iprintf>
90007136:	200a      	movs	r0, #10
90007138:	f004 f95a 	bl	9000b3f0 <putchar>

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
9000713c:	7961      	ldrb	r1, [r4, #5]
9000713e:	4620      	mov	r0, r4
90007140:	f000 f9d7 	bl	900074f2 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
90007144:	7921      	ldrb	r1, [r4, #4]
90007146:	4620      	mov	r0, r4
90007148:	f000 f9d3 	bl	900074f2 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
9000714c:	7026      	strb	r6, [r4, #0]
      else if (status == USBH_FAIL)
9000714e:	e7ab      	b.n	900070a8 <USBH_CtlReq+0xe0>
90007150:	900107a0 	.word	0x900107a0
90007154:	90010b89 	.word	0x90010b89

90007158 <USBH_GetDescriptor>:
{
90007158:	b430      	push	{r4, r5}
9000715a:	460c      	mov	r4, r1
9000715c:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
9000715e:	7883      	ldrb	r3, [r0, #2]
{
90007160:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
90007164:	2b01      	cmp	r3, #1
90007166:	d10f      	bne.n	90007188 <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
90007168:	f064 047f 	orn	r4, r4, #127	; 0x7f
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
9000716c:	2306      	movs	r3, #6
    phost->Control.setup.b.wValue.w = value_idx;
9000716e:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
90007170:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
90007172:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
90007176:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
90007178:	f240 4309 	movw	r3, #1033	; 0x409
9000717c:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wLength.w = length;
90007180:	82c5      	strh	r5, [r0, #22]
      phost->Control.setup.b.wIndex.w = 0U;
90007182:	bf18      	it	ne
90007184:	2300      	movne	r3, #0
90007186:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
90007188:	462a      	mov	r2, r5
}
9000718a:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
9000718c:	f7ff bf1c 	b.w	90006fc8 <USBH_CtlReq>

90007190 <USBH_Get_DevDesc>:
{
90007190:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((status = USBH_GetDescriptor(phost,
90007192:	f500 7307 	add.w	r3, r0, #540	; 0x21c
90007196:	460d      	mov	r5, r1
90007198:	9100      	str	r1, [sp, #0]
9000719a:	f44f 7280 	mov.w	r2, #256	; 0x100
9000719e:	2100      	movs	r1, #0
{
900071a0:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
900071a2:	f7ff ffd9 	bl	90007158 <USBH_GetDescriptor>
900071a6:	bbc8      	cbnz	r0, 9000721c <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
900071a8:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
  if (length > 8U)
900071ac:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
900071ae:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
900071b2:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
900071b6:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
  dev_desc->bcdUSB             = LE16(buf +  2);
900071ba:	f8b4 321e 	ldrh.w	r3, [r4, #542]	; 0x21e
900071be:	f8a4 3428 	strh.w	r3, [r4, #1064]	; 0x428
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
900071c2:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
900071c6:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
900071ca:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
900071ce:	f884 342b 	strb.w	r3, [r4, #1067]	; 0x42b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
900071d2:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
900071d6:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
900071da:	f894 3223 	ldrb.w	r3, [r4, #547]	; 0x223
900071de:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
  if (length > 8U)
900071e2:	d91b      	bls.n	9000721c <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16(buf +  8);
900071e4:	f8b4 3224 	ldrh.w	r3, [r4, #548]	; 0x224
900071e8:	f8a4 342e 	strh.w	r3, [r4, #1070]	; 0x42e
    dev_desc->idProduct          = LE16(buf + 10);
900071ec:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
900071f0:	f8a4 3430 	strh.w	r3, [r4, #1072]	; 0x430
    dev_desc->bcdDevice          = LE16(buf + 12);
900071f4:	f8b4 3228 	ldrh.w	r3, [r4, #552]	; 0x228
900071f8:	f8a4 3432 	strh.w	r3, [r4, #1074]	; 0x432
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
900071fc:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
90007200:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
90007204:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
90007208:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
9000720c:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
90007210:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
90007214:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
90007218:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
}
9000721c:	b003      	add	sp, #12
9000721e:	bd30      	pop	{r4, r5, pc}

90007220 <USBH_Get_CfgDesc>:
{
90007220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;;
90007222:	f100 051c 	add.w	r5, r0, #28
{
90007226:	460e      	mov	r6, r1
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
90007228:	9100      	str	r1, [sp, #0]
9000722a:	f44f 7200 	mov.w	r2, #512	; 0x200
9000722e:	462b      	mov	r3, r5
90007230:	2100      	movs	r1, #0
{
90007232:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
90007234:	f7ff ff90 	bl	90007158 <USBH_GetDescriptor>
90007238:	b9f0      	cbnz	r0, 90007278 <USBH_Get_CfgDesc+0x58>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
9000723a:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
9000723c:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16(buf + 2);
9000723e:	8be7      	ldrh	r7, [r4, #30]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
90007240:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
90007244:	7f63      	ldrb	r3, [r4, #29]
  cfg_desc->wTotalLength        = LE16(buf + 2);
90007246:	f8a4 743a 	strh.w	r7, [r4, #1082]	; 0x43a
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
9000724a:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
9000724e:	f894 3020 	ldrb.w	r3, [r4, #32]
90007252:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
90007256:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
9000725a:	f884 343d 	strb.w	r3, [r4, #1085]	; 0x43d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
9000725e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
90007262:	f884 343e 	strb.w	r3, [r4, #1086]	; 0x43e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
90007266:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
9000726a:	f884 343f 	strb.w	r3, [r4, #1087]	; 0x43f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
9000726e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
90007272:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
  if (length > USB_CONFIGURATION_DESC_SIZE)
90007276:	d854      	bhi.n	90007322 <USBH_Get_CfgDesc+0x102>
}
90007278:	b003      	add	sp, #12
9000727a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
9000727c:	782a      	ldrb	r2, [r5, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
9000727e:	4415      	add	r5, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90007280:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
90007282:	786a      	ldrb	r2, [r5, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90007284:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
90007286:	2a04      	cmp	r2, #4
90007288:	d123      	bne.n	900072d2 <USBH_Get_CfgDesc+0xb2>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
9000728a:	782a      	ldrb	r2, [r5, #0]
9000728c:	2601      	movs	r6, #1
9000728e:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
90007292:	786a      	ldrb	r2, [r5, #1]
90007294:	f884 2443 	strb.w	r2, [r4, #1091]	; 0x443
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
90007298:	78aa      	ldrb	r2, [r5, #2]
9000729a:	f884 2444 	strb.w	r2, [r4, #1092]	; 0x444
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
9000729e:	78ea      	ldrb	r2, [r5, #3]
900072a0:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
900072a4:	f895 c004 	ldrb.w	ip, [r5, #4]
900072a8:	f884 c446 	strb.w	ip, [r4, #1094]	; 0x446
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
900072ac:	796a      	ldrb	r2, [r5, #5]
900072ae:	f884 2447 	strb.w	r2, [r4, #1095]	; 0x447
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
900072b2:	79aa      	ldrb	r2, [r5, #6]
900072b4:	f884 2448 	strb.w	r2, [r4, #1096]	; 0x448
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
900072b8:	79ea      	ldrb	r2, [r5, #7]
900072ba:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
900072be:	7a2a      	ldrb	r2, [r5, #8]
900072c0:	f884 244a 	strb.w	r2, [r4, #1098]	; 0x44a
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
900072c4:	4561      	cmp	r1, ip
900072c6:	d201      	bcs.n	900072cc <USBH_Get_CfgDesc+0xac>
900072c8:	429f      	cmp	r7, r3
900072ca:	d805      	bhi.n	900072d8 <USBH_Get_CfgDesc+0xb8>
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
900072cc:	4631      	mov	r1, r6
900072ce:	2e00      	cmp	r6, #0
900072d0:	d1d2      	bne.n	90007278 <USBH_Get_CfgDesc+0x58>
900072d2:	429f      	cmp	r7, r3
900072d4:	d8d2      	bhi.n	9000727c <USBH_Get_CfgDesc+0x5c>
900072d6:	e7cf      	b.n	90007278 <USBH_Get_CfgDesc+0x58>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
900072d8:	782a      	ldrb	r2, [r5, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
900072da:	4415      	add	r5, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
900072dc:	4413      	add	r3, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
900072de:	786a      	ldrb	r2, [r5, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
900072e0:	b29b      	uxth	r3, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
900072e2:	2a05      	cmp	r2, #5
900072e4:	d1ee      	bne.n	900072c4 <USBH_Get_CfgDesc+0xa4>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
900072e6:	b20a      	sxth	r2, r1
900072e8:	f895 e000 	ldrb.w	lr, [r5]
            ep_ix++;
900072ec:	3101      	adds	r1, #1
900072ee:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
900072f2:	b2c9      	uxtb	r1, r1
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
900072f4:	f882 e44c 	strb.w	lr, [r2, #1100]	; 0x44c
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
900072f8:	f895 e001 	ldrb.w	lr, [r5, #1]
900072fc:	f882 e44d 	strb.w	lr, [r2, #1101]	; 0x44d
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
90007300:	f895 e002 	ldrb.w	lr, [r5, #2]
90007304:	f882 e44e 	strb.w	lr, [r2, #1102]	; 0x44e
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
90007308:	f895 e003 	ldrb.w	lr, [r5, #3]
9000730c:	f882 e44f 	strb.w	lr, [r2, #1103]	; 0x44f
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
90007310:	f8b5 e004 	ldrh.w	lr, [r5, #4]
90007314:	f8a2 e450 	strh.w	lr, [r2, #1104]	; 0x450
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
90007318:	f895 e006 	ldrb.w	lr, [r5, #6]
9000731c:	f882 e452 	strb.w	lr, [r2, #1106]	; 0x452
            ep_ix++;
90007320:	e7d0      	b.n	900072c4 <USBH_Get_CfgDesc+0xa4>
  uint8_t                      if_ix = 0U;
90007322:	4606      	mov	r6, r0
    ptr = USB_LEN_CFG_DESC;
90007324:	2309      	movs	r3, #9
90007326:	e7d1      	b.n	900072cc <USBH_Get_CfgDesc+0xac>

90007328 <USBH_Get_StringDesc>:
{
90007328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                   phost->device.Data, length)) == USBH_OK)
9000732a:	f500 7607 	add.w	r6, r0, #540	; 0x21c
{
9000732e:	4615      	mov	r5, r2
90007330:	461f      	mov	r7, r3
  if ((status = USBH_GetDescriptor(phost,
90007332:	f441 7240 	orr.w	r2, r1, #768	; 0x300
90007336:	9300      	str	r3, [sp, #0]
90007338:	2100      	movs	r1, #0
9000733a:	4633      	mov	r3, r6
{
9000733c:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
9000733e:	f7ff ff0b 	bl	90007158 <USBH_GetDescriptor>
90007342:	b978      	cbnz	r0, 90007364 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
90007344:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
90007348:	2b03      	cmp	r3, #3
9000734a:	d10b      	bne.n	90007364 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
9000734c:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
    for (idx = 0U; idx < strlength; idx += 2U)
90007350:	4604      	mov	r4, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
90007352:	3902      	subs	r1, #2
90007354:	42b9      	cmp	r1, r7
90007356:	bf28      	it	cs
90007358:	4639      	movcs	r1, r7
9000735a:	b289      	uxth	r1, r1
    for (idx = 0U; idx < strlength; idx += 2U)
9000735c:	42a1      	cmp	r1, r4
9000735e:	d803      	bhi.n	90007368 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
90007360:	2300      	movs	r3, #0
90007362:	702b      	strb	r3, [r5, #0]
}
90007364:	b003      	add	sp, #12
90007366:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
90007368:	1933      	adds	r3, r6, r4
    for (idx = 0U; idx < strlength; idx += 2U)
9000736a:	3402      	adds	r4, #2
      *pdest =  psrc[idx];
9000736c:	789b      	ldrb	r3, [r3, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
9000736e:	b2a4      	uxth	r4, r4
      *pdest =  psrc[idx];
90007370:	f805 3b01 	strb.w	r3, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
90007374:	e7f2      	b.n	9000735c <USBH_Get_StringDesc+0x34>

90007376 <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
90007376:	7883      	ldrb	r3, [r0, #2]
90007378:	2b01      	cmp	r3, #1
9000737a:	d105      	bne.n	90007388 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
9000737c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
90007380:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
90007382:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
90007384:	2300      	movs	r3, #0
90007386:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
90007388:	2200      	movs	r2, #0
9000738a:	4611      	mov	r1, r2
9000738c:	f7ff be1c 	b.w	90006fc8 <USBH_CtlReq>

90007390 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
90007390:	7883      	ldrb	r3, [r0, #2]
90007392:	2b01      	cmp	r3, #1
90007394:	d105      	bne.n	900073a2 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
90007396:	f44f 6310 	mov.w	r3, #2304	; 0x900
    phost->Control.setup.b.wValue.w = cfg_idx;
9000739a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
9000739c:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
9000739e:	2300      	movs	r3, #0
900073a0:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
900073a2:	2200      	movs	r2, #0
900073a4:	4611      	mov	r1, r2
900073a6:	f7ff be0f 	b.w	90006fc8 <USBH_CtlReq>

900073aa <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
900073aa:	7883      	ldrb	r3, [r0, #2]
900073ac:	2b01      	cmp	r3, #1
900073ae:	d105      	bne.n	900073bc <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
900073b0:	f44f 7340 	mov.w	r3, #768	; 0x300
    phost->Control.setup.b.wValue.w = wValue;
900073b4:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
900073b6:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
900073b8:	2300      	movs	r3, #0
900073ba:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
900073bc:	2200      	movs	r2, #0
900073be:	4611      	mov	r1, r2
900073c0:	f7ff be02 	b.w	90006fc8 <USBH_CtlReq>

900073c4 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
900073c4:	7883      	ldrb	r3, [r0, #2]
900073c6:	2b01      	cmp	r3, #1
900073c8:	d105      	bne.n	900073d6 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
900073ca:	f44f 7381 	mov.w	r3, #258	; 0x102
    phost->Control.setup.b.wIndex.w = ep_num;
900073ce:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
900073d0:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
900073d2:	2300      	movs	r3, #0
900073d4:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
900073d6:	2200      	movs	r2, #0
900073d8:	4611      	mov	r1, r2
900073da:	f7ff bdf5 	b.w	90006fc8 <USBH_CtlReq>

900073de <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
900073de:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
900073e0:	2400      	movs	r4, #0
{
900073e2:	460b      	mov	r3, r1
900073e4:	4611      	mov	r1, r2
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
900073e6:	2208      	movs	r2, #8
900073e8:	e9cd 4300 	strd	r4, r3, [sp]
900073ec:	e9cd 2402 	strd	r2, r4, [sp, #8]
900073f0:	4623      	mov	r3, r4
900073f2:	4622      	mov	r2, r4
900073f4:	f003 f913 	bl	9000a61e <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
900073f8:	4620      	mov	r0, r4
900073fa:	b004      	add	sp, #16
900073fc:	bd10      	pop	{r4, pc}

900073fe <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
900073fe:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
90007400:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
90007404:	b085      	sub	sp, #20
90007406:	460c      	mov	r4, r1
90007408:	4619      	mov	r1, r3
  {
    do_ping = 0U;
9000740a:	2d00      	cmp	r5, #0
{
9000740c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007410:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
90007412:	bf18      	it	ne
90007414:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007416:	e9cd 2302 	strd	r2, r3, [sp, #8]
9000741a:	2301      	movs	r3, #1
9000741c:	9300      	str	r3, [sp, #0]
9000741e:	2300      	movs	r3, #0
90007420:	461a      	mov	r2, r3
90007422:	f003 f8fc 	bl	9000a61e <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
90007426:	2000      	movs	r0, #0
90007428:	b005      	add	sp, #20
9000742a:	bd30      	pop	{r4, r5, pc}

9000742c <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
9000742c:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
9000742e:	2400      	movs	r4, #0
{
90007430:	b085      	sub	sp, #20
90007432:	460d      	mov	r5, r1
90007434:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007436:	4623      	mov	r3, r4
90007438:	9501      	str	r5, [sp, #4]
9000743a:	e9cd 2402 	strd	r2, r4, [sp, #8]
9000743e:	2201      	movs	r2, #1
90007440:	9200      	str	r2, [sp, #0]
90007442:	f003 f8ec 	bl	9000a61e <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
90007446:	4620      	mov	r0, r4
90007448:	b005      	add	sp, #20
9000744a:	bd30      	pop	{r4, r5, pc}

9000744c <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
9000744c:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
9000744e:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
90007452:	b085      	sub	sp, #20
90007454:	460c      	mov	r4, r1
90007456:	4619      	mov	r1, r3
  {
    do_ping = 0U;
90007458:	2d00      	cmp	r5, #0
{
9000745a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
9000745e:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
90007460:	bf18      	it	ne
90007462:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007464:	e9cd 2302 	strd	r2, r3, [sp, #8]
90007468:	2301      	movs	r3, #1
9000746a:	2200      	movs	r2, #0
9000746c:	9300      	str	r3, [sp, #0]
9000746e:	2302      	movs	r3, #2
90007470:	f003 f8d5 	bl	9000a61e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
90007474:	2000      	movs	r0, #0
90007476:	b005      	add	sp, #20
90007478:	bd30      	pop	{r4, r5, pc}

9000747a <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
9000747a:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
9000747c:	2400      	movs	r4, #0
{
9000747e:	b085      	sub	sp, #20
90007480:	460d      	mov	r5, r1
90007482:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007484:	2302      	movs	r3, #2
90007486:	9501      	str	r5, [sp, #4]
90007488:	e9cd 2402 	strd	r2, r4, [sp, #8]
9000748c:	2201      	movs	r2, #1
9000748e:	9200      	str	r2, [sp, #0]
90007490:	f003 f8c5 	bl	9000a61e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
90007494:	4620      	mov	r0, r4
90007496:	b005      	add	sp, #20
90007498:	bd30      	pop	{r4, r5, pc}

9000749a <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
9000749a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
9000749c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
900074a0:	9402      	str	r4, [sp, #8]
900074a2:	f89d 401c 	ldrb.w	r4, [sp, #28]
900074a6:	9401      	str	r4, [sp, #4]
900074a8:	f89d 4018 	ldrb.w	r4, [sp, #24]
900074ac:	9400      	str	r4, [sp, #0]
900074ae:	f003 f89e 	bl	9000a5ee <USBH_LL_OpenPipe>

  return USBH_OK;
}
900074b2:	2000      	movs	r0, #0
900074b4:	b004      	add	sp, #16
900074b6:	bd10      	pop	{r4, pc}

900074b8 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
900074b8:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
900074ba:	f003 f8a9 	bl	9000a610 <USBH_LL_ClosePipe>

  return USBH_OK;
}
900074be:	2000      	movs	r0, #0
900074c0:	bd08      	pop	{r3, pc}

900074c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
900074c2:	b530      	push	{r4, r5, lr}
900074c4:	2300      	movs	r3, #0
900074c6:	f200 446c 	addw	r4, r0, #1132	; 0x46c
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
900074ca:	f854 5f04 	ldr.w	r5, [r4, #4]!
900074ce:	b2da      	uxtb	r2, r3
900074d0:	042d      	lsls	r5, r5, #16
900074d2:	d408      	bmi.n	900074e6 <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
900074d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
900074d8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
900074dc:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
900074de:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
900074e2:	b2d0      	uxtb	r0, r2
900074e4:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U ; idx < 11U ; idx++)
900074e6:	3301      	adds	r3, #1
900074e8:	2b0b      	cmp	r3, #11
900074ea:	d1ee      	bne.n	900074ca <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
900074ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
900074f0:	e7f7      	b.n	900074e2 <USBH_AllocPipe+0x20>

900074f2 <USBH_FreePipe>:
  if (idx < 11U)
900074f2:	290a      	cmp	r1, #10
    phost->Pipes[idx] &= 0x7FFFU;
900074f4:	bf9f      	itttt	ls
900074f6:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
900074fa:	f8d0 3470 	ldrls.w	r3, [r0, #1136]	; 0x470
900074fe:	f3c3 030e 	ubfxls	r3, r3, #0, #15
90007502:	f8c0 3470 	strls.w	r3, [r0, #1136]	; 0x470
}
90007506:	2000      	movs	r0, #0
90007508:	4770      	bx	lr
	...

9000750c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
9000750c:	4b03      	ldr	r3, [pc, #12]	; (9000751c <disk_status+0x10>)
9000750e:	181a      	adds	r2, r3, r0
90007510:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90007514:	6843      	ldr	r3, [r0, #4]
90007516:	7b10      	ldrb	r0, [r2, #12]
90007518:	685b      	ldr	r3, [r3, #4]
9000751a:	4718      	bx	r3
9000751c:	20000780 	.word	0x20000780

90007520 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
90007520:	4b06      	ldr	r3, [pc, #24]	; (9000753c <disk_initialize+0x1c>)
90007522:	5c1a      	ldrb	r2, [r3, r0]
90007524:	b942      	cbnz	r2, 90007538 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
90007526:	2201      	movs	r2, #1
90007528:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
9000752a:	181a      	adds	r2, r3, r0
9000752c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90007530:	6843      	ldr	r3, [r0, #4]
90007532:	7b10      	ldrb	r0, [r2, #12]
90007534:	681b      	ldr	r3, [r3, #0]
90007536:	4718      	bx	r3
  }
  return stat;
}
90007538:	2000      	movs	r0, #0
9000753a:	4770      	bx	lr
9000753c:	20000780 	.word	0x20000780

90007540 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
90007540:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
90007542:	4c05      	ldr	r4, [pc, #20]	; (90007558 <disk_read+0x18>)
90007544:	1825      	adds	r5, r4, r0
90007546:	eb04 0080 	add.w	r0, r4, r0, lsl #2
9000754a:	6840      	ldr	r0, [r0, #4]
9000754c:	6884      	ldr	r4, [r0, #8]
9000754e:	7b28      	ldrb	r0, [r5, #12]
90007550:	46a4      	mov	ip, r4
  return res;
}
90007552:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
90007554:	4760      	bx	ip
90007556:	bf00      	nop
90007558:	20000780 	.word	0x20000780

9000755c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
9000755c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
9000755e:	4c05      	ldr	r4, [pc, #20]	; (90007574 <disk_write+0x18>)
90007560:	1825      	adds	r5, r4, r0
90007562:	eb04 0080 	add.w	r0, r4, r0, lsl #2
90007566:	6840      	ldr	r0, [r0, #4]
90007568:	68c4      	ldr	r4, [r0, #12]
9000756a:	7b28      	ldrb	r0, [r5, #12]
9000756c:	46a4      	mov	ip, r4
  return res;
}
9000756e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
90007570:	4760      	bx	ip
90007572:	bf00      	nop
90007574:	20000780 	.word	0x20000780

90007578 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
90007578:	4b05      	ldr	r3, [pc, #20]	; (90007590 <disk_ioctl+0x18>)
{
9000757a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
9000757c:	181c      	adds	r4, r3, r0
9000757e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90007582:	6843      	ldr	r3, [r0, #4]
90007584:	7b20      	ldrb	r0, [r4, #12]
90007586:	691b      	ldr	r3, [r3, #16]
  return res;
}
90007588:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
9000758c:	4718      	bx	r3
9000758e:	bf00      	nop
90007590:	20000780 	.word	0x20000780

90007594 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
90007594:	2000      	movs	r0, #0
90007596:	4770      	bx	lr

90007598 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
90007598:	6800      	ldr	r0, [r0, #0]
9000759a:	4770      	bx	lr

9000759c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
9000759c:	0a0b      	lsrs	r3, r1, #8
9000759e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
900075a0:	7043      	strb	r3, [r0, #1]
900075a2:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
900075a4:	0e09      	lsrs	r1, r1, #24
900075a6:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
900075a8:	70c1      	strb	r1, [r0, #3]
}
900075aa:	4770      	bx	lr

900075ac <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
900075ac:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
900075ae:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
900075b2:	4290      	cmp	r0, r2
900075b4:	d1fb      	bne.n	900075ae <mem_set+0x2>
}
900075b6:	4770      	bx	lr

900075b8 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
900075b8:	4a1b      	ldr	r2, [pc, #108]	; (90007628 <chk_lock+0x70>)
900075ba:	6813      	ldr	r3, [r2, #0]
{
900075bc:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
900075be:	b163      	cbz	r3, 900075da <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
900075c0:	6804      	ldr	r4, [r0, #0]
900075c2:	42a3      	cmp	r3, r4
900075c4:	d107      	bne.n	900075d6 <chk_lock+0x1e>
900075c6:	6884      	ldr	r4, [r0, #8]
900075c8:	6853      	ldr	r3, [r2, #4]
900075ca:	429c      	cmp	r4, r3
900075cc:	d103      	bne.n	900075d6 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
900075ce:	6894      	ldr	r4, [r2, #8]
900075d0:	6943      	ldr	r3, [r0, #20]
900075d2:	429c      	cmp	r4, r3
900075d4:	d020      	beq.n	90007618 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
900075d6:	2400      	movs	r4, #0
900075d8:	e000      	b.n	900075dc <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
900075da:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
900075dc:	6913      	ldr	r3, [r2, #16]
900075de:	b1cb      	cbz	r3, 90007614 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
900075e0:	6805      	ldr	r5, [r0, #0]
900075e2:	42ab      	cmp	r3, r5
900075e4:	d107      	bne.n	900075f6 <chk_lock+0x3e>
900075e6:	6955      	ldr	r5, [r2, #20]
900075e8:	6883      	ldr	r3, [r0, #8]
900075ea:	429d      	cmp	r5, r3
900075ec:	d103      	bne.n	900075f6 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
900075ee:	6995      	ldr	r5, [r2, #24]
900075f0:	6943      	ldr	r3, [r0, #20]
900075f2:	429d      	cmp	r5, r3
900075f4:	d015      	beq.n	90007622 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
900075f6:	b96c      	cbnz	r4, 90007614 <chk_lock+0x5c>
900075f8:	2902      	cmp	r1, #2
900075fa:	bf0c      	ite	eq
900075fc:	2000      	moveq	r0, #0
900075fe:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
90007600:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
90007602:	eb02 1303 	add.w	r3, r2, r3, lsl #4
90007606:	8998      	ldrh	r0, [r3, #12]
90007608:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
9000760c:	4258      	negs	r0, r3
9000760e:	4158      	adcs	r0, r3
90007610:	0100      	lsls	r0, r0, #4
90007612:	e7f5      	b.n	90007600 <chk_lock+0x48>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
90007614:	2000      	movs	r0, #0
90007616:	e7f3      	b.n	90007600 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
90007618:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
9000761a:	2900      	cmp	r1, #0
9000761c:	d0f1      	beq.n	90007602 <chk_lock+0x4a>
9000761e:	2010      	movs	r0, #16
90007620:	e7ee      	b.n	90007600 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
90007622:	2301      	movs	r3, #1
90007624:	e7f9      	b.n	9000761a <chk_lock+0x62>
90007626:	bf00      	nop
90007628:	20000754 	.word	0x20000754

9000762c <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
9000762c:	4a1f      	ldr	r2, [pc, #124]	; (900076ac <inc_lock+0x80>)
{
9000762e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
90007630:	6813      	ldr	r3, [r2, #0]
90007632:	6806      	ldr	r6, [r0, #0]
90007634:	429e      	cmp	r6, r3
90007636:	d107      	bne.n	90007648 <inc_lock+0x1c>
90007638:	6885      	ldr	r5, [r0, #8]
9000763a:	6854      	ldr	r4, [r2, #4]
9000763c:	42a5      	cmp	r5, r4
9000763e:	d103      	bne.n	90007648 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
90007640:	6895      	ldr	r5, [r2, #8]
90007642:	6944      	ldr	r4, [r0, #20]
90007644:	42a5      	cmp	r5, r4
90007646:	d022      	beq.n	9000768e <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
90007648:	6914      	ldr	r4, [r2, #16]
9000764a:	42b4      	cmp	r4, r6
9000764c:	d107      	bne.n	9000765e <inc_lock+0x32>
9000764e:	6957      	ldr	r7, [r2, #20]
90007650:	6885      	ldr	r5, [r0, #8]
90007652:	42af      	cmp	r7, r5
90007654:	d103      	bne.n	9000765e <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
90007656:	6997      	ldr	r7, [r2, #24]
90007658:	6945      	ldr	r5, [r0, #20]
9000765a:	42af      	cmp	r7, r5
9000765c:	d021      	beq.n	900076a2 <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
9000765e:	b10b      	cbz	r3, 90007664 <inc_lock+0x38>
90007660:	bb0c      	cbnz	r4, 900076a6 <inc_lock+0x7a>
90007662:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
90007664:	011d      	lsls	r5, r3, #4
90007666:	eb02 1403 	add.w	r4, r2, r3, lsl #4
9000766a:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
9000766c:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
9000766e:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
90007670:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
90007672:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
90007674:	2000      	movs	r0, #0
90007676:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
90007678:	b981      	cbnz	r1, 9000769c <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
9000767a:	eb02 1103 	add.w	r1, r2, r3, lsl #4
9000767e:	8989      	ldrh	r1, [r1, #12]
90007680:	3101      	adds	r1, #1
90007682:	b289      	uxth	r1, r1
90007684:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
90007688:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
9000768a:	8191      	strh	r1, [r2, #12]
}
9000768c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
9000768e:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
90007690:	eb02 1003 	add.w	r0, r2, r3, lsl #4
90007694:	8980      	ldrh	r0, [r0, #12]
90007696:	2900      	cmp	r1, #0
90007698:	d0ef      	beq.n	9000767a <inc_lock+0x4e>
9000769a:	b920      	cbnz	r0, 900076a6 <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
9000769c:	f44f 7180 	mov.w	r1, #256	; 0x100
900076a0:	e7f0      	b.n	90007684 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
900076a2:	2301      	movs	r3, #1
900076a4:	e7f4      	b.n	90007690 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
900076a6:	2000      	movs	r0, #0
900076a8:	e7f0      	b.n	9000768c <inc_lock+0x60>
900076aa:	bf00      	nop
900076ac:	20000754 	.word	0x20000754

900076b0 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
900076b0:	3801      	subs	r0, #1
900076b2:	2801      	cmp	r0, #1
900076b4:	d815      	bhi.n	900076e2 <dec_lock+0x32>
		n = Files[i].ctr;
900076b6:	4a0c      	ldr	r2, [pc, #48]	; (900076e8 <dec_lock+0x38>)
900076b8:	0101      	lsls	r1, r0, #4
900076ba:	eb02 1000 	add.w	r0, r2, r0, lsl #4
900076be:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
900076c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900076c4:	d104      	bne.n	900076d0 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
900076c6:	2300      	movs	r3, #0
900076c8:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
900076ca:	2000      	movs	r0, #0
900076cc:	5050      	str	r0, [r2, r1]
900076ce:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
900076d0:	2b00      	cmp	r3, #0
900076d2:	d0fa      	beq.n	900076ca <dec_lock+0x1a>
900076d4:	3b01      	subs	r3, #1
900076d6:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
900076d8:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
900076da:	2b00      	cmp	r3, #0
900076dc:	d0f5      	beq.n	900076ca <dec_lock+0x1a>
		res = FR_OK;
900076de:	2000      	movs	r0, #0
900076e0:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
900076e2:	2002      	movs	r0, #2
	}
	return res;
}
900076e4:	4770      	bx	lr
900076e6:	bf00      	nop
900076e8:	20000754 	.word	0x20000754

900076ec <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
900076ec:	4b05      	ldr	r3, [pc, #20]	; (90007704 <clear_lock+0x18>)
900076ee:	681a      	ldr	r2, [r3, #0]
900076f0:	4290      	cmp	r0, r2
900076f2:	bf04      	itt	eq
900076f4:	2200      	moveq	r2, #0
900076f6:	601a      	streq	r2, [r3, #0]
900076f8:	691a      	ldr	r2, [r3, #16]
900076fa:	4290      	cmp	r0, r2
900076fc:	bf04      	itt	eq
900076fe:	2200      	moveq	r2, #0
90007700:	611a      	streq	r2, [r3, #16]
	}
}
90007702:	4770      	bx	lr
90007704:	20000754 	.word	0x20000754

90007708 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
90007708:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
9000770a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
9000770c:	3b02      	subs	r3, #2
9000770e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
90007710:	bf83      	ittte	hi
90007712:	8943      	ldrhhi	r3, [r0, #10]
90007714:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
90007716:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
9000771a:	2000      	movls	r0, #0
}
9000771c:	4770      	bx	lr

9000771e <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
9000771e:	6802      	ldr	r2, [r0, #0]
90007720:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
90007722:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
90007724:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
90007726:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
90007728:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
9000772c:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
9000772e:	b130      	cbz	r0, 9000773e <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
90007730:	4281      	cmp	r1, r0
90007732:	d302      	bcc.n	9000773a <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
90007734:	1a09      	subs	r1, r1, r0
90007736:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
90007738:	e7f8      	b.n	9000772c <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
9000773a:	6858      	ldr	r0, [r3, #4]
9000773c:	4408      	add	r0, r1
}
9000773e:	4770      	bx	lr

90007740 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
90007740:	f3c2 2307 	ubfx	r3, r2, #8, #8
90007744:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
90007746:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
90007748:	7803      	ldrb	r3, [r0, #0]
9000774a:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
9000774c:	bf01      	itttt	eq
9000774e:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
90007750:	750a      	strbeq	r2, [r1, #20]
90007752:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
90007754:	754a      	strbeq	r2, [r1, #21]
	}
}
90007756:	4770      	bx	lr

90007758 <sum_sfn>:
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
90007758:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
9000775c:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
9000775e:	01d3      	lsls	r3, r2, #7
90007760:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
90007764:	f810 2b01 	ldrb.w	r2, [r0], #1
90007768:	fa52 f383 	uxtab	r3, r2, r3
	} while (--n);
9000776c:	4288      	cmp	r0, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
9000776e:	b2da      	uxtb	r2, r3
	} while (--n);
90007770:	d1f5      	bne.n	9000775e <sum_sfn+0x6>
	return sum;
}
90007772:	4610      	mov	r0, r2
90007774:	4770      	bx	lr

90007776 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
90007776:	6803      	ldr	r3, [r0, #0]
{
90007778:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
9000777a:	b153      	cbz	r3, 90007792 <get_ldnumber+0x1c>
9000777c:	4619      	mov	r1, r3
9000777e:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
90007780:	f811 4b01 	ldrb.w	r4, [r1], #1
90007784:	2c1f      	cmp	r4, #31
90007786:	d910      	bls.n	900077aa <get_ldnumber+0x34>
90007788:	2c3a      	cmp	r4, #58	; 0x3a
9000778a:	d1f8      	bne.n	9000777e <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
9000778c:	1c59      	adds	r1, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
9000778e:	428a      	cmp	r2, r1
90007790:	d002      	beq.n	90007798 <get_ldnumber+0x22>
	int vol = -1;
90007792:	f04f 33ff 	mov.w	r3, #4294967295
90007796:	e006      	b.n	900077a6 <get_ldnumber+0x30>
			i = *tp++ - '0';
90007798:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
9000779a:	3b30      	subs	r3, #48	; 0x30
9000779c:	b2d9      	uxtb	r1, r3
9000779e:	2901      	cmp	r1, #1
900077a0:	d8f7      	bhi.n	90007792 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
900077a2:	3201      	adds	r2, #1
900077a4:	6002      	str	r2, [r0, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
900077a6:	4618      	mov	r0, r3
900077a8:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
900077aa:	2300      	movs	r3, #0
900077ac:	e7fb      	b.n	900077a6 <get_ldnumber+0x30>

900077ae <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
900077ae:	b538      	push	{r3, r4, r5, lr}
900077b0:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
900077b2:	4604      	mov	r4, r0
900077b4:	b918      	cbnz	r0, 900077be <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
900077b6:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
900077b8:	2300      	movs	r3, #0
900077ba:	602b      	str	r3, [r5, #0]
	return res;
}
900077bc:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
900077be:	6803      	ldr	r3, [r0, #0]
900077c0:	2b00      	cmp	r3, #0
900077c2:	d0f8      	beq.n	900077b6 <validate+0x8>
900077c4:	781a      	ldrb	r2, [r3, #0]
900077c6:	2a00      	cmp	r2, #0
900077c8:	d0f5      	beq.n	900077b6 <validate+0x8>
900077ca:	8881      	ldrh	r1, [r0, #4]
900077cc:	88da      	ldrh	r2, [r3, #6]
900077ce:	4291      	cmp	r1, r2
900077d0:	d1f1      	bne.n	900077b6 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
900077d2:	7858      	ldrb	r0, [r3, #1]
900077d4:	f7ff fe9a 	bl	9000750c <disk_status>
900077d8:	f010 0001 	ands.w	r0, r0, #1
900077dc:	d1eb      	bne.n	900077b6 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
900077de:	6823      	ldr	r3, [r4, #0]
900077e0:	e7eb      	b.n	900077ba <validate+0xc>

900077e2 <get_fileinfo>:
{
900077e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
900077e6:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
900077e8:	f8d0 8000 	ldr.w	r8, [r0]
{
900077ec:	4606      	mov	r6, r0
900077ee:	460c      	mov	r4, r1
	fno->fname[0] = 0;		/* Invaidate file info */
900077f0:	758d      	strb	r5, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
900077f2:	69c3      	ldr	r3, [r0, #28]
900077f4:	2b00      	cmp	r3, #0
900077f6:	d059      	beq.n	900078ac <get_fileinfo+0xca>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
900077f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
900077fa:	3301      	adds	r3, #1
900077fc:	d00a      	beq.n	90007814 <get_fileinfo+0x32>
900077fe:	f101 0715 	add.w	r7, r1, #21
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
90007802:	f8d8 300c 	ldr.w	r3, [r8, #12]
90007806:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
9000780a:	2800      	cmp	r0, #0
9000780c:	d150      	bne.n	900078b0 <get_fileinfo+0xce>
			fno->fname[i] = 0;	/* Terminate the LFN */
9000780e:	4425      	add	r5, r4
90007810:	2300      	movs	r3, #0
90007812:	75ab      	strb	r3, [r5, #22]
		c = (TCHAR)dp->dir[i++];
90007814:	6a31      	ldr	r1, [r6, #32]
	i = j = 0;
90007816:	2300      	movs	r3, #0
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
90007818:	7da5      	ldrb	r5, [r4, #22]
			fno->altname[j++] = '.';
9000781a:	272e      	movs	r7, #46	; 0x2e
9000781c:	1e4e      	subs	r6, r1, #1
	i = j = 0;
9000781e:	4618      	mov	r0, r3
		c = (TCHAR)dp->dir[i++];
90007820:	f816 2f01 	ldrb.w	r2, [r6, #1]!
90007824:	3001      	adds	r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
90007826:	2a20      	cmp	r2, #32
90007828:	d026      	beq.n	90007878 <get_fileinfo+0x96>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
9000782a:	2a05      	cmp	r2, #5
9000782c:	bf08      	it	eq
9000782e:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
90007830:	2809      	cmp	r0, #9
90007832:	d107      	bne.n	90007844 <get_fileinfo+0x62>
			if (!lfv) fno->fname[j] = '.';
90007834:	eb04 0c03 	add.w	ip, r4, r3
90007838:	b90d      	cbnz	r5, 9000783e <get_fileinfo+0x5c>
9000783a:	f88c 7016 	strb.w	r7, [ip, #22]
			fno->altname[j++] = '.';
9000783e:	3301      	adds	r3, #1
90007840:	f88c 7009 	strb.w	r7, [ip, #9]
		fno->altname[j] = c;
90007844:	eb04 0c03 	add.w	ip, r4, r3
90007848:	f88c 2009 	strb.w	r2, [ip, #9]
		if (!lfv) {
9000784c:	b99d      	cbnz	r5, 90007876 <get_fileinfo+0x94>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
9000784e:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
90007852:	f1be 0f19 	cmp.w	lr, #25
90007856:	d80c      	bhi.n	90007872 <get_fileinfo+0x90>
90007858:	2808      	cmp	r0, #8
9000785a:	f891 800c 	ldrb.w	r8, [r1, #12]
9000785e:	bf8c      	ite	hi
90007860:	f04f 0e10 	movhi.w	lr, #16
90007864:	f04f 0e08 	movls.w	lr, #8
90007868:	ea18 0f0e 	tst.w	r8, lr
				c += 0x20;			/* To lower */
9000786c:	bf1c      	itt	ne
9000786e:	3220      	addne	r2, #32
90007870:	b2d2      	uxtbne	r2, r2
			fno->fname[j] = c;
90007872:	f88c 2016 	strb.w	r2, [ip, #22]
		j++;
90007876:	3301      	adds	r3, #1
	while (i < 11) {		/* Copy name body and extension */
90007878:	280b      	cmp	r0, #11
9000787a:	d1d1      	bne.n	90007820 <get_fileinfo+0x3e>
	if (!lfv) {
9000787c:	b92d      	cbnz	r5, 9000788a <get_fileinfo+0xa8>
		fno->fname[j] = 0;
9000787e:	18e2      	adds	r2, r4, r3
90007880:	7595      	strb	r5, [r2, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
90007882:	7b0a      	ldrb	r2, [r1, #12]
90007884:	2a00      	cmp	r2, #0
90007886:	bf08      	it	eq
90007888:	2300      	moveq	r3, #0
	fno->altname[j] = 0;	/* Terminate the SFN */
9000788a:	4423      	add	r3, r4
9000788c:	2200      	movs	r2, #0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
9000788e:	f101 001c 	add.w	r0, r1, #28
	fno->altname[j] = 0;	/* Terminate the SFN */
90007892:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
90007894:	7acb      	ldrb	r3, [r1, #11]
90007896:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
90007898:	f7ff fe7e 	bl	90007598 <ld_dword>
9000789c:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
9000789e:	f101 0016 	add.w	r0, r1, #22
900078a2:	f7ff fe79 	bl	90007598 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
900078a6:	80e0      	strh	r0, [r4, #6]
900078a8:	0c00      	lsrs	r0, r0, #16
900078aa:	80a0      	strh	r0, [r4, #4]
}
900078ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				w = ff_convert(w, 0);		/* Unicode -> OEM */
900078b0:	2100      	movs	r1, #0
900078b2:	f001 fcd7 	bl	90009264 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
900078b6:	b130      	cbz	r0, 900078c6 <get_fileinfo+0xe4>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
900078b8:	3501      	adds	r5, #1
900078ba:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
900078be:	d002      	beq.n	900078c6 <get_fileinfo+0xe4>
				fno->fname[i++] = (TCHAR)w;
900078c0:	f807 0f01 	strb.w	r0, [r7, #1]!
900078c4:	e79d      	b.n	90007802 <get_fileinfo+0x20>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
900078c6:	2500      	movs	r5, #0
900078c8:	e7a1      	b.n	9000780e <get_fileinfo+0x2c>

900078ca <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
900078ca:	3801      	subs	r0, #1
900078cc:	440a      	add	r2, r1
			*d++ = *s++;
900078ce:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
900078d2:	4291      	cmp	r1, r2
			*d++ = *s++;
900078d4:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
900078d8:	d1f9      	bne.n	900078ce <mem_cpy.part.0+0x4>
}
900078da:	4770      	bx	lr

900078dc <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
900078dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
900078e0:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
900078e2:	f100 0834 	add.w	r8, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
900078e6:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
900078e8:	2301      	movs	r3, #1
900078ea:	4632      	mov	r2, r6
900078ec:	4641      	mov	r1, r8
900078ee:	7840      	ldrb	r0, [r0, #1]
900078f0:	f7ff fe34 	bl	9000755c <disk_write>
900078f4:	4605      	mov	r5, r0
900078f6:	b9a8      	cbnz	r0, 90007924 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
900078f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
900078fa:	69e2      	ldr	r2, [r4, #28]
900078fc:	1af3      	subs	r3, r6, r3
			fs->wflag = 0;
900078fe:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
90007900:	4293      	cmp	r3, r2
90007902:	d202      	bcs.n	9000790a <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
90007904:	78a7      	ldrb	r7, [r4, #2]
90007906:	2f01      	cmp	r7, #1
90007908:	d802      	bhi.n	90007910 <sync_window.part.0+0x34>
}
9000790a:	4628      	mov	r0, r5
9000790c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
90007910:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
90007912:	4641      	mov	r1, r8
90007914:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
90007916:	3f01      	subs	r7, #1
					wsect += fs->fsize;
90007918:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
9000791a:	2301      	movs	r3, #1
9000791c:	4632      	mov	r2, r6
9000791e:	f7ff fe1d 	bl	9000755c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
90007922:	e7f0      	b.n	90007906 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
90007924:	2501      	movs	r5, #1
90007926:	e7f0      	b.n	9000790a <sync_window.part.0+0x2e>

90007928 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
90007928:	78c3      	ldrb	r3, [r0, #3]
9000792a:	b10b      	cbz	r3, 90007930 <sync_window+0x8>
9000792c:	f7ff bfd6 	b.w	900078dc <sync_window.part.0>
}
90007930:	4618      	mov	r0, r3
90007932:	4770      	bx	lr

90007934 <move_window>:
{
90007934:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
90007936:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
90007938:	4605      	mov	r5, r0
9000793a:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
9000793c:	428b      	cmp	r3, r1
9000793e:	d010      	beq.n	90007962 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
90007940:	f7ff fff2 	bl	90007928 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
90007944:	b960      	cbnz	r0, 90007960 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
90007946:	4622      	mov	r2, r4
90007948:	2301      	movs	r3, #1
9000794a:	f105 0134 	add.w	r1, r5, #52	; 0x34
9000794e:	7868      	ldrb	r0, [r5, #1]
90007950:	f7ff fdf6 	bl	90007540 <disk_read>
				res = FR_DISK_ERR;
90007954:	2800      	cmp	r0, #0
90007956:	bf1c      	itt	ne
90007958:	f04f 34ff 	movne.w	r4, #4294967295
9000795c:	2001      	movne	r0, #1
			fs->winsect = sector;
9000795e:	632c      	str	r4, [r5, #48]	; 0x30
}
90007960:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
90007962:	2000      	movs	r0, #0
90007964:	e7fc      	b.n	90007960 <move_window+0x2c>
	...

90007968 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
90007968:	2300      	movs	r3, #0
{
9000796a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
9000796c:	70c3      	strb	r3, [r0, #3]
9000796e:	f04f 33ff 	mov.w	r3, #4294967295
{
90007972:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
90007974:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
90007976:	f7ff ffdd 	bl	90007934 <move_window>
9000797a:	4603      	mov	r3, r0
9000797c:	bb18      	cbnz	r0, 900079c6 <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
9000797e:	f8b4 1232 	ldrh.w	r1, [r4, #562]	; 0x232
90007982:	f64a 2255 	movw	r2, #43605	; 0xaa55
90007986:	4291      	cmp	r1, r2
90007988:	d11f      	bne.n	900079ca <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
9000798a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
9000798e:	2ae9      	cmp	r2, #233	; 0xe9
90007990:	d005      	beq.n	9000799e <check_fs+0x36>
90007992:	6b62      	ldr	r2, [r4, #52]	; 0x34
90007994:	490f      	ldr	r1, [pc, #60]	; (900079d4 <check_fs+0x6c>)
90007996:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9000799a:	428a      	cmp	r2, r1
9000799c:	d117      	bne.n	900079ce <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
9000799e:	f104 006a 	add.w	r0, r4, #106	; 0x6a
900079a2:	4a0d      	ldr	r2, [pc, #52]	; (900079d8 <check_fs+0x70>)
900079a4:	f7ff fdf8 	bl	90007598 <ld_dword>
900079a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
900079ac:	4290      	cmp	r0, r2
900079ae:	d008      	beq.n	900079c2 <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
900079b0:	4b0a      	ldr	r3, [pc, #40]	; (900079dc <check_fs+0x74>)
900079b2:	f104 0086 	add.w	r0, r4, #134	; 0x86
900079b6:	f7ff fdef 	bl	90007598 <ld_dword>
900079ba:	1ac0      	subs	r0, r0, r3
900079bc:	bf18      	it	ne
900079be:	2001      	movne	r0, #1
900079c0:	0043      	lsls	r3, r0, #1
}
900079c2:	4618      	mov	r0, r3
900079c4:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
900079c6:	2304      	movs	r3, #4
900079c8:	e7fb      	b.n	900079c2 <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
900079ca:	2303      	movs	r3, #3
900079cc:	e7f9      	b.n	900079c2 <check_fs+0x5a>
	return 2;
900079ce:	2302      	movs	r3, #2
900079d0:	e7f7      	b.n	900079c2 <check_fs+0x5a>
900079d2:	bf00      	nop
900079d4:	009000eb 	.word	0x009000eb
900079d8:	00544146 	.word	0x00544146
900079dc:	33544146 	.word	0x33544146

900079e0 <find_volume>:
{
900079e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
900079e4:	2300      	movs	r3, #0
{
900079e6:	4688      	mov	r8, r1
900079e8:	4615      	mov	r5, r2
	*rfs = 0;
900079ea:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
900079ec:	f7ff fec3 	bl	90007776 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
900079f0:	1e07      	subs	r7, r0, #0
900079f2:	f2c0 8116 	blt.w	90007c22 <find_volume+0x242>
	fs = FatFs[vol];					/* Get pointer to the file system object */
900079f6:	4e8e      	ldr	r6, [pc, #568]	; (90007c30 <find_volume+0x250>)
900079f8:	eb06 0387 	add.w	r3, r6, r7, lsl #2
900079fc:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
900079fe:	2c00      	cmp	r4, #0
90007a00:	f000 8111 	beq.w	90007c26 <find_volume+0x246>
	*rfs = fs;							/* Return pointer to the file system object */
90007a04:	f8c8 4000 	str.w	r4, [r8]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
90007a08:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
90007a0c:	7823      	ldrb	r3, [r4, #0]
90007a0e:	b16b      	cbz	r3, 90007a2c <find_volume+0x4c>
		stat = disk_status(fs->drv);
90007a10:	7860      	ldrb	r0, [r4, #1]
90007a12:	f7ff fd7b 	bl	9000750c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
90007a16:	07c1      	lsls	r1, r0, #31
90007a18:	d408      	bmi.n	90007a2c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
90007a1a:	b11d      	cbz	r5, 90007a24 <find_volume+0x44>
90007a1c:	f010 0504 	ands.w	r5, r0, #4
90007a20:	d000      	beq.n	90007a24 <find_volume+0x44>
				return FR_WRITE_PROTECTED;
90007a22:	250a      	movs	r5, #10
}
90007a24:	4628      	mov	r0, r5
90007a26:	b004      	add	sp, #16
90007a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
90007a2c:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
90007a2e:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
90007a30:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
90007a32:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
90007a34:	f7ff fd74 	bl	90007520 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
90007a38:	07c2      	lsls	r2, r0, #31
90007a3a:	f100 80f6 	bmi.w	90007c2a <find_volume+0x24a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
90007a3e:	b10d      	cbz	r5, 90007a44 <find_volume+0x64>
90007a40:	0743      	lsls	r3, r0, #29
90007a42:	d4ee      	bmi.n	90007a22 <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
90007a44:	2100      	movs	r1, #0
90007a46:	4620      	mov	r0, r4
90007a48:	f7ff ff8e 	bl	90007968 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
90007a4c:	2802      	cmp	r0, #2
90007a4e:	f040 80ce 	bne.w	90007bee <find_volume+0x20e>
90007a52:	466d      	mov	r5, sp
90007a54:	f504 73fd 	add.w	r3, r4, #506	; 0x1fa
90007a58:	f204 213a 	addw	r1, r4, #570	; 0x23a
90007a5c:	462a      	mov	r2, r5
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
90007a5e:	f813 0c04 	ldrb.w	r0, [r3, #-4]
90007a62:	b110      	cbz	r0, 90007a6a <find_volume+0x8a>
90007a64:	4618      	mov	r0, r3
90007a66:	f7ff fd97 	bl	90007598 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
90007a6a:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
90007a6c:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
90007a70:	428b      	cmp	r3, r1
90007a72:	d1f4      	bne.n	90007a5e <find_volume+0x7e>
90007a74:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
90007a78:	f855 7b04 	ldr.w	r7, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
90007a7c:	2f00      	cmp	r7, #0
90007a7e:	f000 80ab 	beq.w	90007bd8 <find_volume+0x1f8>
90007a82:	4639      	mov	r1, r7
90007a84:	4620      	mov	r0, r4
90007a86:	f7ff ff6f 	bl	90007968 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
90007a8a:	2801      	cmp	r0, #1
90007a8c:	f200 80a5 	bhi.w	90007bda <find_volume+0x1fa>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
90007a90:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
90007a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90007a98:	f040 80ad 	bne.w	90007bf6 <find_volume+0x216>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
90007a9c:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
90007aa0:	b921      	cbnz	r1, 90007aac <find_volume+0xcc>
90007aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
90007aa6:	f7ff fd77 	bl	90007598 <ld_dword>
90007aaa:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
90007aac:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
		fs->fsize = fasize;
90007ab0:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
90007ab2:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
90007ab4:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
90007ab6:	2b01      	cmp	r3, #1
90007ab8:	f200 809d 	bhi.w	90007bf6 <find_volume+0x216>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
90007abc:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
90007ac0:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
90007ac2:	2d00      	cmp	r5, #0
90007ac4:	f000 8097 	beq.w	90007bf6 <find_volume+0x216>
90007ac8:	1e6b      	subs	r3, r5, #1
90007aca:	422b      	tst	r3, r5
90007acc:	f040 8093 	bne.w	90007bf6 <find_volume+0x216>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
90007ad0:	f8b4 8045 	ldrh.w	r8, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
90007ad4:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
90007ad8:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
90007adc:	f040 808b 	bne.w	90007bf6 <find_volume+0x216>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
90007ae0:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
90007ae4:	b918      	cbnz	r0, 90007aee <find_volume+0x10e>
90007ae6:	f104 0054 	add.w	r0, r4, #84	; 0x54
90007aea:	f7ff fd55 	bl	90007598 <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
90007aee:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
90007af2:	2b00      	cmp	r3, #0
90007af4:	d07f      	beq.n	90007bf6 <find_volume+0x216>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
90007af6:	fb01 fe02 	mul.w	lr, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
90007afa:	eb03 1c18 	add.w	ip, r3, r8, lsr #4
90007afe:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
90007b00:	4560      	cmp	r0, ip
90007b02:	d378      	bcc.n	90007bf6 <find_volume+0x216>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
90007b04:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
90007b08:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
90007b0a:	fbb0 f2f5 	udiv	r2, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
90007b0e:	d372      	bcc.n	90007bf6 <find_volume+0x216>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
90007b10:	f64f 70f5 	movw	r0, #65525	; 0xfff5
90007b14:	4282      	cmp	r2, r0
90007b16:	d872      	bhi.n	90007bfe <find_volume+0x21e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
90007b18:	f640 75f5 	movw	r5, #4085	; 0xff5
90007b1c:	42aa      	cmp	r2, r5
90007b1e:	bf8c      	ite	hi
90007b20:	2502      	movhi	r5, #2
90007b22:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
90007b24:	3202      	adds	r2, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
90007b26:	443b      	add	r3, r7
		fs->database = bsect + sysect;					/* Data start sector */
90007b28:	eb0c 0007 	add.w	r0, ip, r7
		if (fmt == FS_FAT32) {
90007b2c:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
90007b2e:	61a2      	str	r2, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
90007b30:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
90007b32:	6263      	str	r3, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
90007b34:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
90007b36:	d164      	bne.n	90007c02 <find_volume+0x222>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
90007b38:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
90007b3c:	ea58 0303 	orrs.w	r3, r8, r3
90007b40:	d159      	bne.n	90007bf6 <find_volume+0x216>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
90007b42:	0092      	lsls	r2, r2, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
90007b44:	f104 0060 	add.w	r0, r4, #96	; 0x60
90007b48:	f7ff fd26 	bl	90007598 <ld_dword>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
90007b4c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
90007b50:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
90007b52:	ebb1 2f52 	cmp.w	r1, r2, lsr #9
90007b56:	d34e      	bcc.n	90007bf6 <find_volume+0x216>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
90007b58:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
90007b5c:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
90007b5e:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
90007b62:	f04f 0380 	mov.w	r3, #128	; 0x80
90007b66:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
90007b68:	d12b      	bne.n	90007bc2 <find_volume+0x1e2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
90007b6a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
90007b6e:	2b01      	cmp	r3, #1
90007b70:	d127      	bne.n	90007bc2 <find_volume+0x1e2>
			&& move_window(fs, bsect + 1) == FR_OK)
90007b72:	1c79      	adds	r1, r7, #1
90007b74:	4620      	mov	r0, r4
90007b76:	f7ff fedd 	bl	90007934 <move_window>
90007b7a:	bb10      	cbnz	r0, 90007bc2 <find_volume+0x1e2>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
90007b7c:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
90007b80:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
90007b84:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
90007b86:	429a      	cmp	r2, r3
90007b88:	d11b      	bne.n	90007bc2 <find_volume+0x1e2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
90007b8a:	4b2a      	ldr	r3, [pc, #168]	; (90007c34 <find_volume+0x254>)
90007b8c:	f104 0034 	add.w	r0, r4, #52	; 0x34
90007b90:	f7ff fd02 	bl	90007598 <ld_dword>
90007b94:	4298      	cmp	r0, r3
90007b96:	d114      	bne.n	90007bc2 <find_volume+0x1e2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
90007b98:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
90007b9c:	f504 7006 	add.w	r0, r4, #536	; 0x218
90007ba0:	f7ff fcfa 	bl	90007598 <ld_dword>
90007ba4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
90007ba8:	3320      	adds	r3, #32
90007baa:	4298      	cmp	r0, r3
90007bac:	d109      	bne.n	90007bc2 <find_volume+0x1e2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
90007bae:	f504 7007 	add.w	r0, r4, #540	; 0x21c
90007bb2:	f7ff fcf1 	bl	90007598 <ld_dword>
90007bb6:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
90007bb8:	f504 7008 	add.w	r0, r4, #544	; 0x220
90007bbc:	f7ff fcec 	bl	90007598 <ld_dword>
90007bc0:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
90007bc2:	8d33      	ldrh	r3, [r6, #40]	; 0x28
	clear_lock(fs);
90007bc4:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
90007bc6:	7025      	strb	r5, [r4, #0]
	return FR_OK;
90007bc8:	2500      	movs	r5, #0
	fs->id = ++Fsid;		/* File system mount ID */
90007bca:	3301      	adds	r3, #1
90007bcc:	b29b      	uxth	r3, r3
90007bce:	80e3      	strh	r3, [r4, #6]
90007bd0:	8533      	strh	r3, [r6, #40]	; 0x28
	clear_lock(fs);
90007bd2:	f7ff fd8b 	bl	900076ec <clear_lock>
	return FR_OK;
90007bd6:	e725      	b.n	90007a24 <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
90007bd8:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
90007bda:	f108 0801 	add.w	r8, r8, #1
90007bde:	f1b8 0f04 	cmp.w	r8, #4
90007be2:	f47f af49 	bne.w	90007a78 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
90007be6:	2804      	cmp	r0, #4
90007be8:	d105      	bne.n	90007bf6 <find_volume+0x216>
90007bea:	2501      	movs	r5, #1
90007bec:	e71a      	b.n	90007a24 <find_volume+0x44>
90007bee:	2804      	cmp	r0, #4
90007bf0:	d0fb      	beq.n	90007bea <find_volume+0x20a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
90007bf2:	2801      	cmp	r0, #1
90007bf4:	d901      	bls.n	90007bfa <find_volume+0x21a>
90007bf6:	250d      	movs	r5, #13
90007bf8:	e714      	b.n	90007a24 <find_volume+0x44>
	bsect = 0;
90007bfa:	2700      	movs	r7, #0
90007bfc:	e748      	b.n	90007a90 <find_volume+0xb0>
		fmt = FS_FAT32;
90007bfe:	2503      	movs	r5, #3
90007c00:	e790      	b.n	90007b24 <find_volume+0x144>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
90007c02:	f1b8 0f00 	cmp.w	r8, #0
90007c06:	d0f6      	beq.n	90007bf6 <find_volume+0x216>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
90007c08:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
90007c0a:	eb03 000e 	add.w	r0, r3, lr
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
90007c0e:	ea4f 0342 	mov.w	r3, r2, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
90007c12:	bf1b      	ittet	ne
90007c14:	189b      	addne	r3, r3, r2
90007c16:	f002 0201 	andne.w	r2, r2, #1
90007c1a:	461a      	moveq	r2, r3
90007c1c:	eb02 0253 	addne.w	r2, r2, r3, lsr #1
90007c20:	e794      	b.n	90007b4c <find_volume+0x16c>
	if (vol < 0) return FR_INVALID_DRIVE;
90007c22:	250b      	movs	r5, #11
90007c24:	e6fe      	b.n	90007a24 <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
90007c26:	250c      	movs	r5, #12
90007c28:	e6fc      	b.n	90007a24 <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
90007c2a:	2503      	movs	r5, #3
90007c2c:	e6fa      	b.n	90007a24 <find_volume+0x44>
90007c2e:	bf00      	nop
90007c30:	20000754 	.word	0x20000754
90007c34:	41615252 	.word	0x41615252

90007c38 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
90007c38:	2901      	cmp	r1, #1
{
90007c3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007c3e:	4606      	mov	r6, r0
90007c40:	460c      	mov	r4, r1
90007c42:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
90007c44:	d974      	bls.n	90007d30 <put_fat+0xf8>
90007c46:	6983      	ldr	r3, [r0, #24]
90007c48:	428b      	cmp	r3, r1
90007c4a:	d971      	bls.n	90007d30 <put_fat+0xf8>
		switch (fs->fs_type) {
90007c4c:	7803      	ldrb	r3, [r0, #0]
90007c4e:	2b02      	cmp	r3, #2
90007c50:	d040      	beq.n	90007cd4 <put_fat+0x9c>
90007c52:	2b03      	cmp	r3, #3
90007c54:	d051      	beq.n	90007cfa <put_fat+0xc2>
90007c56:	2b01      	cmp	r3, #1
90007c58:	d16a      	bne.n	90007d30 <put_fat+0xf8>
			bc = (UINT)clst; bc += bc / 2;
90007c5a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
90007c5e:	6a41      	ldr	r1, [r0, #36]	; 0x24
90007c60:	eb01 2158 	add.w	r1, r1, r8, lsr #9
90007c64:	f7ff fe66 	bl	90007934 <move_window>
90007c68:	4605      	mov	r5, r0
			if (res != FR_OK) break;
90007c6a:	bb40      	cbnz	r0, 90007cbe <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
90007c6c:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
90007c70:	f106 0934 	add.w	r9, r6, #52	; 0x34
90007c74:	f108 0a01 	add.w	sl, r8, #1
90007c78:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
90007c7c:	bf18      	it	ne
90007c7e:	013b      	lslne	r3, r7, #4
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
90007c80:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
90007c82:	bf17      	itett	ne
90007c84:	f819 2008 	ldrbne.w	r2, [r9, r8]
90007c88:	b2fb      	uxtbeq	r3, r7
90007c8a:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
90007c8e:	f002 020f 	andne.w	r2, r2, #15
90007c92:	bf18      	it	ne
90007c94:	4313      	orrne	r3, r2
90007c96:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
90007c9a:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
90007c9c:	6a71      	ldr	r1, [r6, #36]	; 0x24
			fs->wflag = 1;
90007c9e:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
90007ca0:	eb01 215a 	add.w	r1, r1, sl, lsr #9
90007ca4:	f7ff fe46 	bl	90007934 <move_window>
			if (res != FR_OK) break;
90007ca8:	4605      	mov	r5, r0
90007caa:	b940      	cbnz	r0, 90007cbe <put_fat+0x86>
			p = fs->win + bc % SS(fs);
90007cac:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
90007cb0:	b144      	cbz	r4, 90007cc4 <put_fat+0x8c>
90007cb2:	f3c7 1707 	ubfx	r7, r7, #4, #8
90007cb6:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
90007cba:	2301      	movs	r3, #1
90007cbc:	70f3      	strb	r3, [r6, #3]
}
90007cbe:	4628      	mov	r0, r5
90007cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
90007cc4:	f819 300a 	ldrb.w	r3, [r9, sl]
90007cc8:	f3c7 2703 	ubfx	r7, r7, #8, #4
90007ccc:	f023 030f 	bic.w	r3, r3, #15
90007cd0:	431f      	orrs	r7, r3
90007cd2:	e7f0      	b.n	90007cb6 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
90007cd4:	6a41      	ldr	r1, [r0, #36]	; 0x24
90007cd6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
90007cda:	f7ff fe2b 	bl	90007934 <move_window>
			if (res != FR_OK) break;
90007cde:	4605      	mov	r5, r0
90007ce0:	2800      	cmp	r0, #0
90007ce2:	d1ec      	bne.n	90007cbe <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
90007ce4:	0064      	lsls	r4, r4, #1
90007ce6:	f106 0334 	add.w	r3, r6, #52	; 0x34
90007cea:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
90007cee:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
90007cf0:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
90007cf2:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
90007cf6:	7057      	strb	r7, [r2, #1]
			fs->wflag = 1;
90007cf8:	e7df      	b.n	90007cba <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
90007cfa:	6a41      	ldr	r1, [r0, #36]	; 0x24
90007cfc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
90007d00:	f7ff fe18 	bl	90007934 <move_window>
			if (res != FR_OK) break;
90007d04:	4605      	mov	r5, r0
90007d06:	2800      	cmp	r0, #0
90007d08:	d1d9      	bne.n	90007cbe <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
90007d0a:	00a4      	lsls	r4, r4, #2
90007d0c:	f106 0334 	add.w	r3, r6, #52	; 0x34
90007d10:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
90007d14:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
90007d18:	4423      	add	r3, r4
90007d1a:	4618      	mov	r0, r3
90007d1c:	f7ff fc3c 	bl	90007598 <ld_dword>
90007d20:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
90007d24:	ea47 0100 	orr.w	r1, r7, r0
90007d28:	4618      	mov	r0, r3
90007d2a:	f7ff fc37 	bl	9000759c <st_dword>
90007d2e:	e7c4      	b.n	90007cba <put_fat+0x82>
		switch (fs->fs_type) {
90007d30:	2502      	movs	r5, #2
90007d32:	e7c4      	b.n	90007cbe <put_fat+0x86>

90007d34 <sync_fs>:
{
90007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90007d36:	4604      	mov	r4, r0
	res = sync_window(fs);
90007d38:	f7ff fdf6 	bl	90007928 <sync_window>
90007d3c:	4605      	mov	r5, r0
	if (res == FR_OK) {
90007d3e:	2800      	cmp	r0, #0
90007d40:	d142      	bne.n	90007dc8 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
90007d42:	7823      	ldrb	r3, [r4, #0]
90007d44:	2b03      	cmp	r3, #3
90007d46:	d137      	bne.n	90007db8 <sync_fs+0x84>
90007d48:	7927      	ldrb	r7, [r4, #4]
90007d4a:	2f01      	cmp	r7, #1
90007d4c:	d134      	bne.n	90007db8 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
90007d4e:	f104 0634 	add.w	r6, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
90007d52:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
90007d54:	4601      	mov	r1, r0
90007d56:	f44f 7200 	mov.w	r2, #512	; 0x200
90007d5a:	4630      	mov	r0, r6
90007d5c:	f7ff fc26 	bl	900075ac <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
90007d60:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
90007d64:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
90007d66:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
90007d68:	2172      	movs	r1, #114	; 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
90007d6a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
90007d6e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
90007d72:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
90007d74:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
90007d78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
90007d7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
90007d80:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
90007d82:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
90007d86:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
90007d8a:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
90007d8e:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
	*ptr++ = (BYTE)val; val >>= 8;
90007d92:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
90007d96:	6961      	ldr	r1, [r4, #20]
90007d98:	f7ff fc00 	bl	9000759c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
90007d9c:	6921      	ldr	r1, [r4, #16]
90007d9e:	f504 7008 	add.w	r0, r4, #544	; 0x220
90007da2:	f7ff fbfb 	bl	9000759c <st_dword>
			fs->winsect = fs->volbase + 1;
90007da6:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
90007da8:	463b      	mov	r3, r7
90007daa:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
90007dac:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
90007dae:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
90007db0:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
90007db2:	f7ff fbd3 	bl	9000755c <disk_write>
			fs->fsi_flag = 0;
90007db6:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
90007db8:	2200      	movs	r2, #0
90007dba:	7860      	ldrb	r0, [r4, #1]
90007dbc:	4611      	mov	r1, r2
90007dbe:	f7ff fbdb 	bl	90007578 <disk_ioctl>
90007dc2:	3800      	subs	r0, #0
90007dc4:	bf18      	it	ne
90007dc6:	2001      	movne	r0, #1
}
90007dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90007dca <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
90007dca:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
90007dcc:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
90007dce:	bf04      	itt	eq
90007dd0:	8a8a      	ldrheq	r2, [r1, #20]
90007dd2:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
90007dd6:	4618      	mov	r0, r3
90007dd8:	4770      	bx	lr

90007dda <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
90007dda:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
90007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90007dde:	4606      	mov	r6, r0
90007de0:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
90007de2:	d94e      	bls.n	90007e82 <get_fat.isra.0+0xa8>
90007de4:	6983      	ldr	r3, [r0, #24]
90007de6:	4299      	cmp	r1, r3
90007de8:	d24b      	bcs.n	90007e82 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
90007dea:	7803      	ldrb	r3, [r0, #0]
90007dec:	2b02      	cmp	r3, #2
90007dee:	d029      	beq.n	90007e44 <get_fat.isra.0+0x6a>
90007df0:	2b03      	cmp	r3, #3
90007df2:	d034      	beq.n	90007e5e <get_fat.isra.0+0x84>
90007df4:	2b01      	cmp	r3, #1
90007df6:	d144      	bne.n	90007e82 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
90007df8:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
90007dfc:	6a41      	ldr	r1, [r0, #36]	; 0x24
90007dfe:	eb01 2155 	add.w	r1, r1, r5, lsr #9
90007e02:	f7ff fd97 	bl	90007934 <move_window>
90007e06:	b110      	cbz	r0, 90007e0e <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
90007e08:	f04f 30ff 	mov.w	r0, #4294967295
}
90007e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
90007e0e:	1c6f      	adds	r7, r5, #1
90007e10:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
90007e14:	6a71      	ldr	r1, [r6, #36]	; 0x24
90007e16:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
90007e18:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
90007e1a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
90007e1e:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
90007e22:	f7ff fd87 	bl	90007934 <move_window>
90007e26:	2800      	cmp	r0, #0
90007e28:	d1ee      	bne.n	90007e08 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
90007e2a:	f3c7 0708 	ubfx	r7, r7, #0, #9
90007e2e:	4437      	add	r7, r6
90007e30:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
90007e34:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
90007e38:	07e3      	lsls	r3, r4, #31
90007e3a:	bf4c      	ite	mi
90007e3c:	0900      	lsrmi	r0, r0, #4
90007e3e:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
90007e42:	e7e3      	b.n	90007e0c <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
90007e44:	6a41      	ldr	r1, [r0, #36]	; 0x24
90007e46:	eb01 2114 	add.w	r1, r1, r4, lsr #8
90007e4a:	f7ff fd73 	bl	90007934 <move_window>
90007e4e:	2800      	cmp	r0, #0
90007e50:	d1da      	bne.n	90007e08 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
90007e52:	0064      	lsls	r4, r4, #1
90007e54:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
90007e58:	4434      	add	r4, r6
90007e5a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
			break;
90007e5c:	e7d6      	b.n	90007e0c <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
90007e5e:	6a41      	ldr	r1, [r0, #36]	; 0x24
90007e60:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
90007e64:	f7ff fd66 	bl	90007934 <move_window>
90007e68:	2800      	cmp	r0, #0
90007e6a:	d1cd      	bne.n	90007e08 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
90007e6c:	00a4      	lsls	r4, r4, #2
90007e6e:	f106 0034 	add.w	r0, r6, #52	; 0x34
90007e72:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
90007e76:	4420      	add	r0, r4
90007e78:	f7ff fb8e 	bl	90007598 <ld_dword>
90007e7c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
90007e80:	e7c4      	b.n	90007e0c <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
90007e82:	2001      	movs	r0, #1
	return val;
90007e84:	e7c2      	b.n	90007e0c <get_fat.isra.0+0x32>

90007e86 <remove_chain>:
{
90007e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
90007e88:	460c      	mov	r4, r1
90007e8a:	4606      	mov	r6, r0
90007e8c:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
90007e8e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
90007e90:	2c01      	cmp	r4, #1
90007e92:	d92c      	bls.n	90007eee <remove_chain+0x68>
90007e94:	69ab      	ldr	r3, [r5, #24]
90007e96:	42a3      	cmp	r3, r4
90007e98:	d929      	bls.n	90007eee <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
90007e9a:	b12a      	cbz	r2, 90007ea8 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
90007e9c:	f04f 32ff 	mov.w	r2, #4294967295
90007ea0:	4628      	mov	r0, r5
90007ea2:	f7ff fec9 	bl	90007c38 <put_fat>
		if (res != FR_OK) return res;
90007ea6:	b940      	cbnz	r0, 90007eba <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
90007ea8:	4621      	mov	r1, r4
90007eaa:	6830      	ldr	r0, [r6, #0]
90007eac:	9401      	str	r4, [sp, #4]
90007eae:	f7ff ff94 	bl	90007dda <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
90007eb2:	9901      	ldr	r1, [sp, #4]
90007eb4:	4604      	mov	r4, r0
90007eb6:	b910      	cbnz	r0, 90007ebe <remove_chain+0x38>
	return FR_OK;
90007eb8:	2000      	movs	r0, #0
}
90007eba:	b002      	add	sp, #8
90007ebc:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
90007ebe:	2801      	cmp	r0, #1
90007ec0:	d015      	beq.n	90007eee <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
90007ec2:	1c43      	adds	r3, r0, #1
90007ec4:	d015      	beq.n	90007ef2 <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
90007ec6:	2200      	movs	r2, #0
90007ec8:	4628      	mov	r0, r5
90007eca:	f7ff feb5 	bl	90007c38 <put_fat>
			if (res != FR_OK) return res;
90007ece:	2800      	cmp	r0, #0
90007ed0:	d1f3      	bne.n	90007eba <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
90007ed2:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
90007ed6:	1e91      	subs	r1, r2, #2
90007ed8:	428b      	cmp	r3, r1
90007eda:	d205      	bcs.n	90007ee8 <remove_chain+0x62>
			fs->free_clst++;
90007edc:	3301      	adds	r3, #1
90007ede:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
90007ee0:	792b      	ldrb	r3, [r5, #4]
90007ee2:	f043 0301 	orr.w	r3, r3, #1
90007ee6:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
90007ee8:	42a2      	cmp	r2, r4
90007eea:	d8dd      	bhi.n	90007ea8 <remove_chain+0x22>
90007eec:	e7e4      	b.n	90007eb8 <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
90007eee:	2002      	movs	r0, #2
90007ef0:	e7e3      	b.n	90007eba <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
90007ef2:	2001      	movs	r0, #1
90007ef4:	e7e1      	b.n	90007eba <remove_chain+0x34>

90007ef6 <create_chain>:
{
90007ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90007efa:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
90007efc:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
90007efe:	460f      	mov	r7, r1
90007f00:	b971      	cbnz	r1, 90007f20 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
90007f02:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
90007f04:	b1ee      	cbz	r6, 90007f42 <create_chain+0x4c>
90007f06:	69ab      	ldr	r3, [r5, #24]
90007f08:	42b3      	cmp	r3, r6
90007f0a:	bf98      	it	ls
90007f0c:	2601      	movls	r6, #1
90007f0e:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
90007f10:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
90007f12:	69ab      	ldr	r3, [r5, #24]
90007f14:	42a3      	cmp	r3, r4
90007f16:	d817      	bhi.n	90007f48 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
90007f18:	2e01      	cmp	r6, #1
90007f1a:	d114      	bne.n	90007f46 <create_chain+0x50>
90007f1c:	2400      	movs	r4, #0
90007f1e:	e006      	b.n	90007f2e <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
90007f20:	4628      	mov	r0, r5
90007f22:	f7ff ff5a 	bl	90007dda <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
90007f26:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
90007f28:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
90007f2a:	d803      	bhi.n	90007f34 <create_chain+0x3e>
90007f2c:	2401      	movs	r4, #1
}
90007f2e:	4620      	mov	r0, r4
90007f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
90007f34:	1c43      	adds	r3, r0, #1
90007f36:	d030      	beq.n	90007f9a <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
90007f38:	69ab      	ldr	r3, [r5, #24]
90007f3a:	4283      	cmp	r3, r0
90007f3c:	d8f7      	bhi.n	90007f2e <create_chain+0x38>
90007f3e:	463e      	mov	r6, r7
90007f40:	e7e5      	b.n	90007f0e <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
90007f42:	2601      	movs	r6, #1
90007f44:	e7e3      	b.n	90007f0e <create_chain+0x18>
				ncl = 2;
90007f46:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
90007f48:	4621      	mov	r1, r4
90007f4a:	f8d8 0000 	ldr.w	r0, [r8]
90007f4e:	f7ff ff44 	bl	90007dda <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
90007f52:	b130      	cbz	r0, 90007f62 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
90007f54:	2801      	cmp	r0, #1
90007f56:	d0e9      	beq.n	90007f2c <create_chain+0x36>
90007f58:	3001      	adds	r0, #1
90007f5a:	d01e      	beq.n	90007f9a <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
90007f5c:	42b4      	cmp	r4, r6
90007f5e:	d1d7      	bne.n	90007f10 <create_chain+0x1a>
90007f60:	e7dc      	b.n	90007f1c <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
90007f62:	f04f 32ff 	mov.w	r2, #4294967295
90007f66:	4621      	mov	r1, r4
90007f68:	4628      	mov	r0, r5
90007f6a:	f7ff fe65 	bl	90007c38 <put_fat>
		if (res == FR_OK && clst != 0) {
90007f6e:	b990      	cbnz	r0, 90007f96 <create_chain+0xa0>
90007f70:	b957      	cbnz	r7, 90007f88 <create_chain+0x92>
		fs->last_clst = ncl;
90007f72:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
90007f74:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
90007f78:	3a02      	subs	r2, #2
90007f7a:	4293      	cmp	r3, r2
90007f7c:	d910      	bls.n	90007fa0 <create_chain+0xaa>
		fs->fsi_flag |= 1;
90007f7e:	792b      	ldrb	r3, [r5, #4]
90007f80:	f043 0301 	orr.w	r3, r3, #1
90007f84:	712b      	strb	r3, [r5, #4]
90007f86:	e7d2      	b.n	90007f2e <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
90007f88:	4622      	mov	r2, r4
90007f8a:	4639      	mov	r1, r7
90007f8c:	4628      	mov	r0, r5
90007f8e:	f7ff fe53 	bl	90007c38 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
90007f92:	2800      	cmp	r0, #0
90007f94:	d0ed      	beq.n	90007f72 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
90007f96:	2801      	cmp	r0, #1
90007f98:	d1c8      	bne.n	90007f2c <create_chain+0x36>
90007f9a:	f04f 34ff 	mov.w	r4, #4294967295
90007f9e:	e7c6      	b.n	90007f2e <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
90007fa0:	3b01      	subs	r3, #1
90007fa2:	616b      	str	r3, [r5, #20]
90007fa4:	e7eb      	b.n	90007f7e <create_chain+0x88>

90007fa6 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
90007fa6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
90007faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90007fac:	4606      	mov	r6, r0
90007fae:	460c      	mov	r4, r1
	FATFS *fs = dp->obj.fs;
90007fb0:	6805      	ldr	r5, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
90007fb2:	d301      	bcc.n	90007fb8 <dir_sdi+0x12>
		return FR_INT_ERR;
90007fb4:	2002      	movs	r0, #2
}
90007fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
90007fb8:	06ca      	lsls	r2, r1, #27
90007fba:	d1fb      	bne.n	90007fb4 <dir_sdi+0xe>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
90007fbc:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
90007fbe:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
90007fc0:	b9ba      	cbnz	r2, 90007ff2 <dir_sdi+0x4c>
90007fc2:	782b      	ldrb	r3, [r5, #0]
90007fc4:	2b02      	cmp	r3, #2
90007fc6:	d901      	bls.n	90007fcc <dir_sdi+0x26>
		clst = fs->dirbase;
90007fc8:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
90007fca:	b99b      	cbnz	r3, 90007ff4 <dir_sdi+0x4e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
90007fcc:	892b      	ldrh	r3, [r5, #8]
90007fce:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
90007fd2:	d9ef      	bls.n	90007fb4 <dir_sdi+0xe>
		dp->sect = fs->dirbase;
90007fd4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
90007fd6:	e9c6 2006 	strd	r2, r0, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
90007fda:	2800      	cmp	r0, #0
90007fdc:	d0ea      	beq.n	90007fb4 <dir_sdi+0xe>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
90007fde:	eb00 2054 	add.w	r0, r0, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
90007fe2:	3534      	adds	r5, #52	; 0x34
90007fe4:	f3c4 0408 	ubfx	r4, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
90007fe8:	61f0      	str	r0, [r6, #28]
	return FR_OK;
90007fea:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
90007fec:	4425      	add	r5, r4
90007fee:	6235      	str	r5, [r6, #32]
	return FR_OK;
90007ff0:	e7e1      	b.n	90007fb6 <dir_sdi+0x10>
90007ff2:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
90007ff4:	896f      	ldrh	r7, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
90007ff6:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
90007ff8:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
90007ffa:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
90007ffc:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
90007ffe:	d203      	bcs.n	90008008 <dir_sdi+0x62>
		dp->sect = clust2sect(fs, clst);
90008000:	4628      	mov	r0, r5
90008002:	f7ff fb81 	bl	90007708 <clust2sect>
90008006:	e7e6      	b.n	90007fd6 <dir_sdi+0x30>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
90008008:	6830      	ldr	r0, [r6, #0]
9000800a:	f7ff fee6 	bl	90007dda <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
9000800e:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
90008010:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
90008012:	d006      	beq.n	90008022 <dir_sdi+0x7c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
90008014:	2801      	cmp	r0, #1
90008016:	d9cd      	bls.n	90007fb4 <dir_sdi+0xe>
90008018:	69ab      	ldr	r3, [r5, #24]
9000801a:	4283      	cmp	r3, r0
9000801c:	d9ca      	bls.n	90007fb4 <dir_sdi+0xe>
			ofs -= csz;
9000801e:	1be4      	subs	r4, r4, r7
90008020:	e7eb      	b.n	90007ffa <dir_sdi+0x54>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
90008022:	2001      	movs	r0, #1
90008024:	e7c7      	b.n	90007fb6 <dir_sdi+0x10>

90008026 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
90008026:	6943      	ldr	r3, [r0, #20]
{
90008028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
9000802c:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
90008030:	69c3      	ldr	r3, [r0, #28]
{
90008032:	4605      	mov	r5, r0
90008034:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
90008036:	b18b      	cbz	r3, 9000805c <dir_next+0x36>
90008038:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
9000803c:	d20e      	bcs.n	9000805c <dir_next+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
9000803e:	f3c8 0708 	ubfx	r7, r8, #0, #9
	FATFS *fs = dp->obj.fs;
90008042:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
90008044:	2f00      	cmp	r7, #0
90008046:	d14f      	bne.n	900080e8 <dir_next+0xc2>
		dp->sect++;				/* Next sector */
90008048:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
9000804a:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
9000804c:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
9000804e:	b939      	cbnz	r1, 90008060 <dir_next+0x3a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
90008050:	8923      	ldrh	r3, [r4, #8]
90008052:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
90008056:	d847      	bhi.n	900080e8 <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
90008058:	2300      	movs	r3, #0
9000805a:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
9000805c:	2004      	movs	r0, #4
9000805e:	e00d      	b.n	9000807c <dir_next+0x56>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
90008060:	f8b4 900a 	ldrh.w	r9, [r4, #10]
90008064:	f109 39ff 	add.w	r9, r9, #4294967295
90008068:	ea19 2958 	ands.w	r9, r9, r8, lsr #9
9000806c:	d13c      	bne.n	900080e8 <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
9000806e:	4620      	mov	r0, r4
90008070:	f7ff feb3 	bl	90007dda <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
90008074:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
90008076:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
90008078:	d802      	bhi.n	90008080 <dir_next+0x5a>
9000807a:	2002      	movs	r0, #2
}
9000807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
90008080:	1c42      	adds	r2, r0, #1
90008082:	d101      	bne.n	90008088 <dir_next+0x62>
90008084:	2001      	movs	r0, #1
90008086:	e7f9      	b.n	9000807c <dir_next+0x56>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
90008088:	69a3      	ldr	r3, [r4, #24]
9000808a:	4283      	cmp	r3, r0
9000808c:	d826      	bhi.n	900080dc <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
9000808e:	f1ba 0f00 	cmp.w	sl, #0
90008092:	d0e1      	beq.n	90008058 <dir_next+0x32>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
90008094:	69a9      	ldr	r1, [r5, #24]
90008096:	4628      	mov	r0, r5
90008098:	f7ff ff2d 	bl	90007ef6 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
9000809c:	4606      	mov	r6, r0
9000809e:	2800      	cmp	r0, #0
900080a0:	d035      	beq.n	9000810e <dir_next+0xe8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
900080a2:	2801      	cmp	r0, #1
900080a4:	d0e9      	beq.n	9000807a <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
900080a6:	1c43      	adds	r3, r0, #1
900080a8:	d0ec      	beq.n	90008084 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
900080aa:	4620      	mov	r0, r4
900080ac:	f7ff fc3c 	bl	90007928 <sync_window>
900080b0:	4601      	mov	r1, r0
900080b2:	2800      	cmp	r0, #0
900080b4:	d1e6      	bne.n	90008084 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
900080b6:	f104 0034 	add.w	r0, r4, #52	; 0x34
900080ba:	f44f 7200 	mov.w	r2, #512	; 0x200
						fs->wflag = 1;
900080be:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
900080c2:	f7ff fa73 	bl	900075ac <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
900080c6:	4631      	mov	r1, r6
900080c8:	4620      	mov	r0, r4
900080ca:	f7ff fb1d 	bl	90007708 <clust2sect>
900080ce:	8963      	ldrh	r3, [r4, #10]
900080d0:	6320      	str	r0, [r4, #48]	; 0x30
900080d2:	4599      	cmp	r9, r3
900080d4:	d30f      	bcc.n	900080f6 <dir_next+0xd0>
					fs->winsect -= n;							/* Restore window offset */
900080d6:	eba0 0009 	sub.w	r0, r0, r9
900080da:	6320      	str	r0, [r4, #48]	; 0x30
				dp->sect = clust2sect(fs, clst);
900080dc:	4631      	mov	r1, r6
900080de:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
900080e0:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
900080e2:	f7ff fb11 	bl	90007708 <clust2sect>
900080e6:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
900080e8:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
900080ea:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
900080ec:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
900080f0:	443c      	add	r4, r7
900080f2:	622c      	str	r4, [r5, #32]
	return FR_OK;
900080f4:	e7c2      	b.n	9000807c <dir_next+0x56>
						fs->wflag = 1;
900080f6:	4620      	mov	r0, r4
900080f8:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
900080fc:	f7ff fbee 	bl	900078dc <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
90008100:	2800      	cmp	r0, #0
90008102:	d1bf      	bne.n	90008084 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
90008104:	6b20      	ldr	r0, [r4, #48]	; 0x30
90008106:	f109 0901 	add.w	r9, r9, #1
9000810a:	3001      	adds	r0, #1
9000810c:	e7df      	b.n	900080ce <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
9000810e:	2007      	movs	r0, #7
90008110:	e7b4      	b.n	9000807c <dir_next+0x56>
	...

90008114 <dir_find>:
{
90008114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
90008118:	2100      	movs	r1, #0
{
9000811a:	b085      	sub	sp, #20
9000811c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
9000811e:	f8d0 b000 	ldr.w	fp, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
90008122:	f7ff ff40 	bl	90007fa6 <dir_sdi>
	if (res != FR_OK) return res;
90008126:	4606      	mov	r6, r0
90008128:	2800      	cmp	r0, #0
9000812a:	f040 8098 	bne.w	9000825e <dir_find+0x14a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
9000812e:	f04f 08ff 	mov.w	r8, #255	; 0xff
90008132:	f04f 3aff 	mov.w	sl, #4294967295
90008136:	46c1      	mov	r9, r8
90008138:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
		res = move_window(fs, dp->sect);
9000813c:	69e1      	ldr	r1, [r4, #28]
9000813e:	4658      	mov	r0, fp
90008140:	f7ff fbf8 	bl	90007934 <move_window>
		if (res != FR_OK) break;
90008144:	4606      	mov	r6, r0
90008146:	2800      	cmp	r0, #0
90008148:	f040 8089 	bne.w	9000825e <dir_find+0x14a>
		c = dp->dir[DIR_Name];
9000814c:	6a25      	ldr	r5, [r4, #32]
9000814e:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
90008150:	2f00      	cmp	r7, #0
90008152:	f000 8088 	beq.w	90008266 <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
90008156:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
90008158:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
9000815a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
9000815e:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
90008160:	d003      	beq.n	9000816a <dir_find+0x56>
90008162:	0710      	lsls	r0, r2, #28
90008164:	d504      	bpl.n	90008170 <dir_find+0x5c>
90008166:	2b0f      	cmp	r3, #15
90008168:	d004      	beq.n	90008174 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
9000816a:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
9000816e:	e050      	b.n	90008212 <dir_find+0xfe>
			if (a == AM_LFN) {			/* An LFN entry is found */
90008170:	2b0f      	cmp	r3, #15
90008172:	d156      	bne.n	90008222 <dir_find+0x10e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
90008174:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
90008178:	0659      	lsls	r1, r3, #25
9000817a:	d440      	bmi.n	900081fe <dir_find+0xea>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
9000817c:	067a      	lsls	r2, r7, #25
9000817e:	d546      	bpl.n	9000820e <dir_find+0xfa>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
90008180:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
90008182:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
90008186:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
9000818a:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000818c:	7b6b      	ldrb	r3, [r5, #13]
9000818e:	4543      	cmp	r3, r8
90008190:	d13f      	bne.n	90008212 <dir_find+0xfe>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
90008192:	8b6b      	ldrh	r3, [r5, #26]
90008194:	2b00      	cmp	r3, #0
90008196:	d13c      	bne.n	90008212 <dir_find+0xfe>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
90008198:	782e      	ldrb	r6, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
9000819a:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000819c:	f8db 300c 	ldr.w	r3, [fp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
900081a0:	f006 063f 	and.w	r6, r6, #63	; 0x3f
900081a4:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 90008270 <dir_find+0x15c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
900081a8:	9300      	str	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
900081aa:	230d      	movs	r3, #13
900081ac:	3e01      	subs	r6, #1
900081ae:	435e      	muls	r6, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
900081b0:	f819 3b01 	ldrb.w	r3, [r9], #1
900081b4:	5aeb      	ldrh	r3, [r5, r3]
		if (wc) {
900081b6:	b37a      	cbz	r2, 90008218 <dir_find+0x104>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
900081b8:	2efe      	cmp	r6, #254	; 0xfe
900081ba:	d82a      	bhi.n	90008212 <dir_find+0xfe>
900081bc:	4618      	mov	r0, r3
900081be:	9303      	str	r3, [sp, #12]
900081c0:	f001 f86c 	bl	9000929c <ff_wtoupper>
900081c4:	9b00      	ldr	r3, [sp, #0]
900081c6:	1c71      	adds	r1, r6, #1
900081c8:	9002      	str	r0, [sp, #8]
900081ca:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
900081ce:	9101      	str	r1, [sp, #4]
900081d0:	f001 f864 	bl	9000929c <ff_wtoupper>
900081d4:	9a02      	ldr	r2, [sp, #8]
900081d6:	4282      	cmp	r2, r0
900081d8:	d11b      	bne.n	90008212 <dir_find+0xfe>
900081da:	9b03      	ldr	r3, [sp, #12]
900081dc:	9901      	ldr	r1, [sp, #4]
900081de:	461a      	mov	r2, r3
900081e0:	460e      	mov	r6, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
900081e2:	4b22      	ldr	r3, [pc, #136]	; (9000826c <dir_find+0x158>)
900081e4:	4599      	cmp	r9, r3
900081e6:	d1e3      	bne.n	900081b0 <dir_find+0x9c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
900081e8:	782b      	ldrb	r3, [r5, #0]
900081ea:	065b      	lsls	r3, r3, #25
900081ec:	d504      	bpl.n	900081f8 <dir_find+0xe4>
900081ee:	b11a      	cbz	r2, 900081f8 <dir_find+0xe4>
900081f0:	9b00      	ldr	r3, [sp, #0]
900081f2:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
900081f6:	b963      	cbnz	r3, 90008212 <dir_find+0xfe>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
900081f8:	3f01      	subs	r7, #1
900081fa:	fa5f f987 	uxtb.w	r9, r7
		res = dir_next(dp, 0);	/* Next entry */
900081fe:	2100      	movs	r1, #0
90008200:	4620      	mov	r0, r4
90008202:	f7ff ff10 	bl	90008026 <dir_next>
	} while (res == FR_OK);
90008206:	4606      	mov	r6, r0
90008208:	2800      	cmp	r0, #0
9000820a:	d097      	beq.n	9000813c <dir_find+0x28>
9000820c:	e027      	b.n	9000825e <dir_find+0x14a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000820e:	45b9      	cmp	r9, r7
90008210:	d0bc      	beq.n	9000818c <dir_find+0x78>
90008212:	f04f 09ff 	mov.w	r9, #255	; 0xff
90008216:	e7f2      	b.n	900081fe <dir_find+0xea>
			if (uc != 0xFFFF) return 0;		/* Check filler */
90008218:	f64f 71ff 	movw	r1, #65535	; 0xffff
9000821c:	428b      	cmp	r3, r1
9000821e:	d0e0      	beq.n	900081e2 <dir_find+0xce>
90008220:	e7f7      	b.n	90008212 <dir_find+0xfe>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
90008222:	f1b9 0f00 	cmp.w	r9, #0
90008226:	d104      	bne.n	90008232 <dir_find+0x11e>
90008228:	4628      	mov	r0, r5
9000822a:	f7ff fa95 	bl	90007758 <sum_sfn>
9000822e:	4540      	cmp	r0, r8
90008230:	d015      	beq.n	9000825e <dir_find+0x14a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
90008232:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
90008236:	f016 0601 	ands.w	r6, r6, #1
9000823a:	d196      	bne.n	9000816a <dir_find+0x56>
9000823c:	f104 0224 	add.w	r2, r4, #36	; 0x24
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
90008240:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
90008244:	f815 3b01 	ldrb.w	r3, [r5], #1
90008248:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
9000824c:	428d      	cmp	r5, r1
		r = *d++ - *s++;
9000824e:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
90008252:	d002      	beq.n	9000825a <dir_find+0x146>
90008254:	2b00      	cmp	r3, #0
90008256:	d0f5      	beq.n	90008244 <dir_find+0x130>
90008258:	e787      	b.n	9000816a <dir_find+0x56>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
9000825a:	2b00      	cmp	r3, #0
9000825c:	d185      	bne.n	9000816a <dir_find+0x56>
}
9000825e:	4630      	mov	r0, r6
90008260:	b005      	add	sp, #20
90008262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
90008266:	2604      	movs	r6, #4
90008268:	e7f9      	b.n	9000825e <dir_find+0x14a>
9000826a:	bf00      	nop
9000826c:	900101f5 	.word	0x900101f5
90008270:	900101e8 	.word	0x900101e8

90008274 <dir_register>:
{
90008274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
90008278:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
{
9000827c:	b089      	sub	sp, #36	; 0x24
9000827e:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
90008280:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
90008284:	f040 808e 	bne.w	900083a4 <dir_register+0x130>
	FATFS *fs = dp->obj.fs;
90008288:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
9000828a:	68f2      	ldr	r2, [r6, #12]
9000828c:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
90008290:	2b00      	cmp	r3, #0
90008292:	d166      	bne.n	90008362 <dir_register+0xee>
	mem_cpy(sn, dp->fn, 12);
90008294:	f104 0724 	add.w	r7, r4, #36	; 0x24
	if (cnt) {
90008298:	220c      	movs	r2, #12
9000829a:	a805      	add	r0, sp, #20
9000829c:	4639      	mov	r1, r7
9000829e:	f7ff fb14 	bl	900078ca <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
900082a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
900082a6:	07db      	lsls	r3, r3, #31
900082a8:	f140 8085 	bpl.w	900083b6 <dir_register+0x142>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
900082ac:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
900082ae:	f04f 0a01 	mov.w	sl, #1
				if (sr & 0x10000) sr ^= 0x11021;
900082b2:	f8df 8234 	ldr.w	r8, [pc, #564]	; 900084e8 <dir_register+0x274>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
900082b6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
900082ba:	220b      	movs	r2, #11
900082bc:	a905      	add	r1, sp, #20
900082be:	4638      	mov	r0, r7
900082c0:	f8d6 900c 	ldr.w	r9, [r6, #12]
	if (cnt) {
900082c4:	f7ff fb01 	bl	900078ca <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
900082c8:	f1ba 0f05 	cmp.w	sl, #5
900082cc:	d959      	bls.n	90008382 <dir_register+0x10e>
900082ce:	f1a9 0102 	sub.w	r1, r9, #2
900082d2:	4653      	mov	r3, sl
		while (*lfn) {	/* Create a CRC */
900082d4:	f831 2f02 	ldrh.w	r2, [r1, #2]!
900082d8:	2a00      	cmp	r2, #0
900082da:	d144      	bne.n	90008366 <dir_register+0xf2>
900082dc:	a805      	add	r0, sp, #20
900082de:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
900082e0:	f003 0c0f 	and.w	ip, r3, #15
		ns[i--] = c;
900082e4:	3a01      	subs	r2, #1
		c = (BYTE)((seq % 16) + '0');
900082e6:	f10c 0130 	add.w	r1, ip, #48	; 0x30
		if (c > '9') c += 7;
900082ea:	2939      	cmp	r1, #57	; 0x39
900082ec:	bf88      	it	hi
900082ee:	f10c 0137 	addhi.w	r1, ip, #55	; 0x37
	} while (seq);
900082f2:	2b0f      	cmp	r3, #15
		ns[i--] = c;
900082f4:	f800 1d01 	strb.w	r1, [r0, #-1]!
		seq /= 16;
900082f8:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
900082fc:	d843      	bhi.n	90008386 <dir_register+0x112>
	ns[i] = '~';
900082fe:	f102 0320 	add.w	r3, r2, #32
90008302:	217e      	movs	r1, #126	; 0x7e
90008304:	446b      	add	r3, sp
90008306:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
9000830a:	f104 0123 	add.w	r1, r4, #35	; 0x23
9000830e:	2300      	movs	r3, #0
90008310:	4608      	mov	r0, r1
90008312:	429a      	cmp	r2, r3
90008314:	d006      	beq.n	90008324 <dir_register+0xb0>
90008316:	f810 cf01 	ldrb.w	ip, [r0, #1]!
9000831a:	f103 0e01 	add.w	lr, r3, #1
9000831e:	f1bc 0f20 	cmp.w	ip, #32
90008322:	d132      	bne.n	9000838a <dir_register+0x116>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
90008324:	2a07      	cmp	r2, #7
90008326:	f103 0301 	add.w	r3, r3, #1
9000832a:	bf97      	itett	ls
9000832c:	f102 0020 	addls.w	r0, r2, #32
90008330:	2020      	movhi	r0, #32
90008332:	3201      	addls	r2, #1
90008334:	4468      	addls	r0, sp
90008336:	bf98      	it	ls
90008338:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
	} while (j < 8);
9000833c:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
9000833e:	54c8      	strb	r0, [r1, r3]
	} while (j < 8);
90008340:	d9f0      	bls.n	90008324 <dir_register+0xb0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
90008342:	4620      	mov	r0, r4
90008344:	f7ff fee6 	bl	90008114 <dir_find>
90008348:	4681      	mov	r9, r0
			if (res != FR_OK) break;
9000834a:	bb70      	cbnz	r0, 900083aa <dir_register+0x136>
		for (n = 1; n < 100; n++) {
9000834c:	f10a 0a01 	add.w	sl, sl, #1
90008350:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
90008354:	d1b1      	bne.n	900082ba <dir_register+0x46>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
90008356:	f04f 0907 	mov.w	r9, #7
}
9000835a:	4648      	mov	r0, r9
9000835c:	b009      	add	sp, #36	; 0x24
9000835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
90008362:	3501      	adds	r5, #1
90008364:	e792      	b.n	9000828c <dir_register+0x18>
90008366:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
90008368:	f002 0c01 	and.w	ip, r2, #1
				wc >>= 1;
9000836c:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
9000836e:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
90008372:	f413 3f80 	tst.w	r3, #65536	; 0x10000
90008376:	bf18      	it	ne
90008378:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
9000837c:	3801      	subs	r0, #1
9000837e:	d1f3      	bne.n	90008368 <dir_register+0xf4>
90008380:	e7a8      	b.n	900082d4 <dir_register+0x60>
90008382:	4653      	mov	r3, sl
90008384:	e7aa      	b.n	900082dc <dir_register+0x68>
		seq /= 16;
90008386:	460b      	mov	r3, r1
90008388:	e7aa      	b.n	900082e0 <dir_register+0x6c>
9000838a:	4673      	mov	r3, lr
9000838c:	e7c1      	b.n	90008312 <dir_register+0x9e>
				n = 0;					/* Not a blank entry. Restart to search */
9000838e:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
90008390:	2101      	movs	r1, #1
90008392:	4620      	mov	r0, r4
90008394:	f7ff fe47 	bl	90008026 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
90008398:	4681      	mov	r9, r0
9000839a:	b308      	cbz	r0, 900083e0 <dir_register+0x16c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
9000839c:	f1b9 0f04 	cmp.w	r9, #4
900083a0:	d0d9      	beq.n	90008356 <dir_register+0xe2>
900083a2:	e7da      	b.n	9000835a <dir_register+0xe6>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
900083a4:	f04f 0906 	mov.w	r9, #6
900083a8:	e7d7      	b.n	9000835a <dir_register+0xe6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
900083aa:	2804      	cmp	r0, #4
900083ac:	d1d5      	bne.n	9000835a <dir_register+0xe6>
		dp->fn[NSFLAG] = sn[NSFLAG];
900083ae:	f89d 301f 	ldrb.w	r3, [sp, #31]
900083b2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
900083b6:	f89d 301f 	ldrb.w	r3, [sp, #31]
	res = dir_sdi(dp, 0);
900083ba:	2100      	movs	r1, #0
900083bc:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
900083be:	f8d4 a000 	ldr.w	sl, [r4]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
900083c2:	079b      	lsls	r3, r3, #30
900083c4:	bf45      	ittet	mi
900083c6:	350c      	addmi	r5, #12
900083c8:	230d      	movmi	r3, #13
900083ca:	2501      	movpl	r5, #1
900083cc:	fbb5 f5f3 	udivmi	r5, r5, r3
900083d0:	bf48      	it	mi
900083d2:	3501      	addmi	r5, #1
	res = dir_sdi(dp, 0);
900083d4:	f7ff fde7 	bl	90007fa6 <dir_sdi>
	if (res == FR_OK) {
900083d8:	4681      	mov	r9, r0
900083da:	2800      	cmp	r0, #0
900083dc:	d1de      	bne.n	9000839c <dir_register+0x128>
		n = 0;
900083de:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
900083e0:	69e1      	ldr	r1, [r4, #28]
900083e2:	4650      	mov	r0, sl
900083e4:	f7ff faa6 	bl	90007934 <move_window>
			if (res != FR_OK) break;
900083e8:	4681      	mov	r9, r0
900083ea:	2800      	cmp	r0, #0
900083ec:	d1d6      	bne.n	9000839c <dir_register+0x128>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
900083ee:	6a23      	ldr	r3, [r4, #32]
900083f0:	781b      	ldrb	r3, [r3, #0]
900083f2:	2be5      	cmp	r3, #229	; 0xe5
900083f4:	d001      	beq.n	900083fa <dir_register+0x186>
900083f6:	2b00      	cmp	r3, #0
900083f8:	d1c9      	bne.n	9000838e <dir_register+0x11a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
900083fa:	f108 0801 	add.w	r8, r8, #1
900083fe:	4545      	cmp	r5, r8
90008400:	d1c6      	bne.n	90008390 <dir_register+0x11c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
90008402:	3d01      	subs	r5, #1
90008404:	d055      	beq.n	900084b2 <dir_register+0x23e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
90008406:	6961      	ldr	r1, [r4, #20]
90008408:	4620      	mov	r0, r4
9000840a:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
9000840e:	f7ff fdca 	bl	90007fa6 <dir_sdi>
		if (res == FR_OK) {
90008412:	4681      	mov	r9, r0
90008414:	2800      	cmp	r0, #0
90008416:	d1a0      	bne.n	9000835a <dir_register+0xe6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
90008418:	f64f 78ff 	movw	r8, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
9000841c:	4638      	mov	r0, r7
9000841e:	f7ff f99b 	bl	90007758 <sum_sfn>
90008422:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
90008424:	69e1      	ldr	r1, [r4, #28]
90008426:	4630      	mov	r0, r6
90008428:	f7ff fa84 	bl	90007934 <move_window>
9000842c:	4681      	mov	r9, r0
				if (res != FR_OK) break;
9000842e:	2800      	cmp	r0, #0
90008430:	d193      	bne.n	9000835a <dir_register+0xe6>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
90008432:	6a23      	ldr	r3, [r4, #32]
90008434:	b2e9      	uxtb	r1, r5
	dir[LDIR_Chksum] = sum;			/* Set checksum */
90008436:	9a01      	ldr	r2, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
90008438:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
9000843c:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
90008440:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
90008442:	f04f 020f 	mov.w	r2, #15
90008446:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 900084ec <dir_register+0x278>
9000844a:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
9000844c:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
9000844e:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
90008450:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
90008454:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
90008456:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
90008458:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
9000845a:	4540      	cmp	r0, r8
		st_word(dir + LfnOfs[s], wc);		/* Put it */
9000845c:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++s < 13);
90008460:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
90008464:	bf18      	it	ne
90008466:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
9000846a:	eb03 0b09 	add.w	fp, r3, r9
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
9000846e:	bf18      	it	ne
90008470:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
90008472:	f803 0009 	strb.w	r0, [r3, r9]
90008476:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
9000847a:	2800      	cmp	r0, #0
9000847c:	bf08      	it	eq
9000847e:	4640      	moveq	r0, r8
	} while (++s < 13);
90008480:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
90008484:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
90008488:	d1e7      	bne.n	9000845a <dir_register+0x1e6>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
9000848a:	4540      	cmp	r0, r8
9000848c:	d002      	beq.n	90008494 <dir_register+0x220>
9000848e:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
90008492:	b90a      	cbnz	r2, 90008498 <dir_register+0x224>
90008494:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
90008498:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
9000849a:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
9000849c:	2100      	movs	r1, #0
9000849e:	4620      	mov	r0, r4
				fs->wflag = 1;
900084a0:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
900084a2:	f7ff fdc0 	bl	90008026 <dir_next>
			} while (res == FR_OK && --nent);
900084a6:	4681      	mov	r9, r0
900084a8:	2800      	cmp	r0, #0
900084aa:	f47f af56 	bne.w	9000835a <dir_register+0xe6>
900084ae:	3d01      	subs	r5, #1
900084b0:	d1b8      	bne.n	90008424 <dir_register+0x1b0>
		res = move_window(fs, dp->sect);
900084b2:	69e1      	ldr	r1, [r4, #28]
900084b4:	4630      	mov	r0, r6
900084b6:	f7ff fa3d 	bl	90007934 <move_window>
		if (res == FR_OK) {
900084ba:	4681      	mov	r9, r0
900084bc:	2800      	cmp	r0, #0
900084be:	f47f af4c 	bne.w	9000835a <dir_register+0xe6>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
900084c2:	4601      	mov	r1, r0
900084c4:	2220      	movs	r2, #32
900084c6:	6a20      	ldr	r0, [r4, #32]
900084c8:	f7ff f870 	bl	900075ac <mem_set>
	if (cnt) {
900084cc:	220b      	movs	r2, #11
900084ce:	4639      	mov	r1, r7
900084d0:	6a20      	ldr	r0, [r4, #32]
900084d2:	f7ff f9fa 	bl	900078ca <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
900084d6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
900084da:	6a22      	ldr	r2, [r4, #32]
900084dc:	f003 0318 	and.w	r3, r3, #24
900084e0:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
900084e2:	2301      	movs	r3, #1
900084e4:	70f3      	strb	r3, [r6, #3]
900084e6:	e738      	b.n	9000835a <dir_register+0xe6>
900084e8:	00011021 	.word	0x00011021
900084ec:	900101e8 	.word	0x900101e8

900084f0 <dir_read.constprop.0>:
FRESULT dir_read (
900084f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
900084f4:	27ff      	movs	r7, #255	; 0xff
FRESULT dir_read (
900084f6:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
900084f8:	f8d0 8000 	ldr.w	r8, [r0]
	FRESULT res = FR_NO_FILE;
900084fc:	2504      	movs	r5, #4
	BYTE ord = 0xFF, sum = 0xFF;
900084fe:	463c      	mov	r4, r7
			if (uc != 0xFFFF) return 0;		/* Check filler */
90008500:	f64f 79ff 	movw	r9, #65535	; 0xffff
	while (dp->sect) {
90008504:	69f1      	ldr	r1, [r6, #28]
90008506:	b911      	cbnz	r1, 9000850e <dir_read.constprop.0+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
90008508:	2d00      	cmp	r5, #0
9000850a:	d05f      	beq.n	900085cc <dir_read.constprop.0+0xdc>
9000850c:	e04f      	b.n	900085ae <dir_read.constprop.0+0xbe>
		res = move_window(fs, dp->sect);
9000850e:	4640      	mov	r0, r8
90008510:	f7ff fa10 	bl	90007934 <move_window>
		if (res != FR_OK) break;
90008514:	4605      	mov	r5, r0
90008516:	2800      	cmp	r0, #0
90008518:	d149      	bne.n	900085ae <dir_read.constprop.0+0xbe>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
9000851a:	6a30      	ldr	r0, [r6, #32]
9000851c:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) {
9000851e:	2b00      	cmp	r3, #0
90008520:	d05c      	beq.n	900085dc <dir_read.constprop.0+0xec>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
90008522:	7ac2      	ldrb	r2, [r0, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
90008524:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
90008526:	f002 023f 	and.w	r2, r2, #63	; 0x3f
9000852a:	71b2      	strb	r2, [r6, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
9000852c:	d044      	beq.n	900085b8 <dir_read.constprop.0+0xc8>
9000852e:	2b2e      	cmp	r3, #46	; 0x2e
90008530:	d042      	beq.n	900085b8 <dir_read.constprop.0+0xc8>
90008532:	f022 0120 	bic.w	r1, r2, #32
90008536:	2908      	cmp	r1, #8
90008538:	d03e      	beq.n	900085b8 <dir_read.constprop.0+0xc8>
				if (a == AM_LFN) {			/* An LFN entry is found */
9000853a:	2a0f      	cmp	r2, #15
9000853c:	d141      	bne.n	900085c2 <dir_read.constprop.0+0xd2>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
9000853e:	0659      	lsls	r1, r3, #25
90008540:	d538      	bpl.n	900085b4 <dir_read.constprop.0+0xc4>
						c &= (BYTE)~LLEF; ord = c;
90008542:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
90008546:	6973      	ldr	r3, [r6, #20]
						sum = dp->dir[LDIR_Chksum];
90008548:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
9000854a:	6333      	str	r3, [r6, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000854c:	7b43      	ldrb	r3, [r0, #13]
9000854e:	42bb      	cmp	r3, r7
90008550:	d132      	bne.n	900085b8 <dir_read.constprop.0+0xc8>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
90008552:	8b42      	ldrh	r2, [r0, #26]
90008554:	bb82      	cbnz	r2, 900085b8 <dir_read.constprop.0+0xc8>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
90008556:	7803      	ldrb	r3, [r0, #0]
90008558:	210d      	movs	r1, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000855a:	f8d8 500c 	ldr.w	r5, [r8, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
9000855e:	f04f 0e01 	mov.w	lr, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
90008562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
90008566:	f8df c078 	ldr.w	ip, [pc, #120]	; 900085e0 <dir_read.constprop.0+0xf0>
9000856a:	3b01      	subs	r3, #1
9000856c:	434b      	muls	r3, r1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
9000856e:	f81c 1b01 	ldrb.w	r1, [ip], #1
90008572:	5a41      	ldrh	r1, [r0, r1]
		if (wc) {
90008574:	f1be 0f00 	cmp.w	lr, #0
90008578:	d020      	beq.n	900085bc <dir_read.constprop.0+0xcc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
9000857a:	2bfe      	cmp	r3, #254	; 0xfe
9000857c:	d81c      	bhi.n	900085b8 <dir_read.constprop.0+0xc8>
			lfnbuf[i++] = wc = uc;			/* Store it */
9000857e:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
90008582:	468e      	mov	lr, r1
90008584:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
90008586:	3201      	adds	r2, #1
90008588:	2a0d      	cmp	r2, #13
9000858a:	d1f0      	bne.n	9000856e <dir_read.constprop.0+0x7e>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
9000858c:	7802      	ldrb	r2, [r0, #0]
9000858e:	0652      	lsls	r2, r2, #25
90008590:	d504      	bpl.n	9000859c <dir_read.constprop.0+0xac>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
90008592:	2bfe      	cmp	r3, #254	; 0xfe
90008594:	d810      	bhi.n	900085b8 <dir_read.constprop.0+0xc8>
		lfnbuf[i] = 0;
90008596:	2200      	movs	r2, #0
90008598:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000859c:	3c01      	subs	r4, #1
9000859e:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
900085a0:	2100      	movs	r1, #0
900085a2:	4630      	mov	r0, r6
900085a4:	f7ff fd3f 	bl	90008026 <dir_next>
		if (res != FR_OK) break;
900085a8:	4605      	mov	r5, r0
900085aa:	2800      	cmp	r0, #0
900085ac:	d0aa      	beq.n	90008504 <dir_read.constprop.0+0x14>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
900085ae:	2300      	movs	r3, #0
900085b0:	61f3      	str	r3, [r6, #28]
900085b2:	e00c      	b.n	900085ce <dir_read.constprop.0+0xde>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
900085b4:	42a3      	cmp	r3, r4
900085b6:	d0c9      	beq.n	9000854c <dir_read.constprop.0+0x5c>
900085b8:	24ff      	movs	r4, #255	; 0xff
900085ba:	e7f1      	b.n	900085a0 <dir_read.constprop.0+0xb0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
900085bc:	4549      	cmp	r1, r9
900085be:	d0e2      	beq.n	90008586 <dir_read.constprop.0+0x96>
900085c0:	e7fa      	b.n	900085b8 <dir_read.constprop.0+0xc8>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
900085c2:	b93c      	cbnz	r4, 900085d4 <dir_read.constprop.0+0xe4>
900085c4:	f7ff f8c8 	bl	90007758 <sum_sfn>
900085c8:	42b8      	cmp	r0, r7
900085ca:	d103      	bne.n	900085d4 <dir_read.constprop.0+0xe4>
		res = move_window(fs, dp->sect);
900085cc:	2500      	movs	r5, #0
}
900085ce:	4628      	mov	r0, r5
900085d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
900085d4:	f04f 33ff 	mov.w	r3, #4294967295
900085d8:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
900085da:	e7f8      	b.n	900085ce <dir_read.constprop.0+0xde>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
900085dc:	2504      	movs	r5, #4
900085de:	e7e6      	b.n	900085ae <dir_read.constprop.0+0xbe>
900085e0:	900101e8 	.word	0x900101e8

900085e4 <follow_path>:
{
900085e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900085e8:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
900085ea:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
900085ee:	4689      	mov	r9, r1
900085f0:	f811 3b01 	ldrb.w	r3, [r1], #1
900085f4:	2b2f      	cmp	r3, #47	; 0x2f
900085f6:	d0fa      	beq.n	900085ee <follow_path+0xa>
900085f8:	2b5c      	cmp	r3, #92	; 0x5c
900085fa:	d0f8      	beq.n	900085ee <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
900085fc:	2100      	movs	r1, #0
900085fe:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
90008600:	f899 3000 	ldrb.w	r3, [r9]
90008604:	2b1f      	cmp	r3, #31
90008606:	f200 80b2 	bhi.w	9000876e <follow_path+0x18a>
		dp->fn[NSFLAG] = NS_NONAME;
9000860a:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
9000860c:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
9000860e:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
90008612:	b003      	add	sp, #12
90008614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
90008618:	f7ff bcc5 	b.w	90007fa6 <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
9000861c:	3501      	adds	r5, #1
9000861e:	e0b9      	b.n	90008794 <follow_path+0x1b0>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
90008620:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90008624:	e9cd 3200 	strd	r3, r2, [sp]
90008628:	d00e      	beq.n	90008648 <follow_path+0x64>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
9000862a:	2101      	movs	r1, #1
9000862c:	4620      	mov	r0, r4
9000862e:	f000 fe19 	bl	90009264 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
90008632:	b148      	cbz	r0, 90008648 <follow_path+0x64>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
90008634:	287f      	cmp	r0, #127	; 0x7f
90008636:	e9dd 3200 	ldrd	r3, r2, [sp]
9000863a:	d807      	bhi.n	9000864c <follow_path+0x68>
9000863c:	4c7f      	ldr	r4, [pc, #508]	; (9000883c <follow_path+0x258>)
	while (*str && *str != chr) str++;
9000863e:	f814 1b01 	ldrb.w	r1, [r4], #1
90008642:	b119      	cbz	r1, 9000864c <follow_path+0x68>
90008644:	4288      	cmp	r0, r1
90008646:	d1fa      	bne.n	9000863e <follow_path+0x5a>
				cf |= NS_LOSS | NS_LFN; break;
90008648:	2006      	movs	r0, #6
9000864a:	e04d      	b.n	900086e8 <follow_path+0x104>
		w = p[si++];					/* Get a character */
9000864c:	462f      	mov	r7, r5
		lfn[di++] = w;					/* Store the Unicode character */
9000864e:	f823 0f02 	strh.w	r0, [r3, #2]!
		w = p[si++];					/* Get a character */
90008652:	e095      	b.n	90008780 <follow_path+0x19c>
		w = lfn[di - 1];
90008654:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
		if (w != ' ' && w != '.') break;
90008658:	2b20      	cmp	r3, #32
9000865a:	d002      	beq.n	90008662 <follow_path+0x7e>
9000865c:	2b2e      	cmp	r3, #46	; 0x2e
9000865e:	f040 80a5 	bne.w	900087ac <follow_path+0x1c8>
		di--;
90008662:	3f01      	subs	r7, #1
90008664:	e09f      	b.n	900087a6 <follow_path+0x1c2>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
90008666:	3101      	adds	r1, #1
90008668:	e0ad      	b.n	900087c6 <follow_path+0x1e2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
9000866a:	4543      	cmp	r3, r8
9000866c:	d205      	bcs.n	9000867a <follow_path+0x96>
9000866e:	42ba      	cmp	r2, r7
90008670:	d149      	bne.n	90008706 <follow_path+0x122>
			if (ni == 11) {				/* Long extension */
90008672:	f1b8 0f0b 	cmp.w	r8, #11
90008676:	d13f      	bne.n	900086f8 <follow_path+0x114>
90008678:	e002      	b.n	90008680 <follow_path+0x9c>
9000867a:	f1b8 0f0b 	cmp.w	r8, #11
9000867e:	d136      	bne.n	900086ee <follow_path+0x10a>
				cf |= NS_LOSS | NS_LFN; break;
90008680:	f044 0403 	orr.w	r4, r4, #3
90008684:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
90008688:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
9000868c:	2be5      	cmp	r3, #229	; 0xe5
9000868e:	bf04      	itt	eq
90008690:	2305      	moveq	r3, #5
90008692:	f886 3024 	strbeq.w	r3, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
90008696:	f1b8 0f08 	cmp.w	r8, #8
9000869a:	bf04      	itt	eq
9000869c:	00ad      	lsleq	r5, r5, #2
9000869e:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
900086a0:	f005 030c 	and.w	r3, r5, #12
900086a4:	2b0c      	cmp	r3, #12
900086a6:	d003      	beq.n	900086b0 <follow_path+0xcc>
900086a8:	f005 0203 	and.w	r2, r5, #3
900086ac:	2a03      	cmp	r2, #3
900086ae:	d101      	bne.n	900086b4 <follow_path+0xd0>
900086b0:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
900086b4:	07a1      	lsls	r1, r4, #30
900086b6:	d409      	bmi.n	900086cc <follow_path+0xe8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
900086b8:	f005 0503 	and.w	r5, r5, #3
900086bc:	2d01      	cmp	r5, #1
900086be:	bf08      	it	eq
900086c0:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
900086c4:	2b04      	cmp	r3, #4
900086c6:	bf08      	it	eq
900086c8:	f044 0408 	orreq.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
900086cc:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
900086ce:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
900086d2:	f7ff fd1f 	bl	90008114 <dir_find>
			ns = dp->fn[NSFLAG];
900086d6:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
900086da:	b3c0      	cbz	r0, 9000874e <follow_path+0x16a>
				if (res == FR_NO_FILE) {	/* Object is not found */
900086dc:	2804      	cmp	r0, #4
900086de:	d103      	bne.n	900086e8 <follow_path+0x104>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
900086e0:	f013 0f04 	tst.w	r3, #4
900086e4:	bf08      	it	eq
900086e6:	2005      	moveq	r0, #5
}
900086e8:	b003      	add	sp, #12
900086ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
900086ee:	42ba      	cmp	r2, r7
900086f0:	d002      	beq.n	900086f8 <follow_path+0x114>
900086f2:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
900086f6:	d8c7      	bhi.n	90008688 <follow_path+0xa4>
			b <<= 2; continue;
900086f8:	00ad      	lsls	r5, r5, #2
900086fa:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11;	/* Enter extension section */
900086fc:	f04f 080b 	mov.w	r8, #11
90008700:	2308      	movs	r3, #8
			b <<= 2; continue;
90008702:	b2ed      	uxtb	r5, r5
90008704:	e089      	b.n	9000881a <follow_path+0x236>
		if (w >= 0x80) {				/* Non ASCII character */
90008706:	287f      	cmp	r0, #127	; 0x7f
90008708:	d90e      	bls.n	90008728 <follow_path+0x144>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
9000870a:	2100      	movs	r1, #0
			cf |= NS_LFN;				/* Force create LFN entry */
9000870c:	f044 0402 	orr.w	r4, r4, #2
90008710:	e9cd 2300 	strd	r2, r3, [sp]
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
90008714:	f000 fda6 	bl	90009264 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
90008718:	e9dd 2300 	ldrd	r2, r3, [sp]
9000871c:	b160      	cbz	r0, 90008738 <follow_path+0x154>
9000871e:	4948      	ldr	r1, [pc, #288]	; (90008840 <follow_path+0x25c>)
90008720:	4408      	add	r0, r1
90008722:	f810 0c73 	ldrb.w	r0, [r0, #-115]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
90008726:	b138      	cbz	r0, 90008738 <follow_path+0x154>
	while (*str && *str != chr) str++;
90008728:	f8df c118 	ldr.w	ip, [pc, #280]	; 90008844 <follow_path+0x260>
9000872c:	f81c 1b01 	ldrb.w	r1, [ip], #1
90008730:	2900      	cmp	r1, #0
90008732:	d076      	beq.n	90008822 <follow_path+0x23e>
90008734:	4281      	cmp	r1, r0
90008736:	d1f9      	bne.n	9000872c <follow_path+0x148>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
90008738:	f044 0403 	orr.w	r4, r4, #3
9000873c:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
9000873e:	18f1      	adds	r1, r6, r3
90008740:	3301      	adds	r3, #1
90008742:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
90008746:	e068      	b.n	9000881a <follow_path+0x236>
					b |= 2;
90008748:	f045 0502 	orr.w	r5, r5, #2
9000874c:	e7f7      	b.n	9000873e <follow_path+0x15a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
9000874e:	075a      	lsls	r2, r3, #29
90008750:	d4ca      	bmi.n	900086e8 <follow_path+0x104>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
90008752:	79b3      	ldrb	r3, [r6, #6]
90008754:	06db      	lsls	r3, r3, #27
90008756:	d562      	bpl.n	9000881e <follow_path+0x23a>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
90008758:	6973      	ldr	r3, [r6, #20]
9000875a:	f10b 0134 	add.w	r1, fp, #52	; 0x34
9000875e:	f89b 0000 	ldrb.w	r0, [fp]
90008762:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008766:	4419      	add	r1, r3
90008768:	f7ff fb2f 	bl	90007dca <ld_clust.isra.0>
9000876c:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
9000876e:	6833      	ldr	r3, [r6, #0]
90008770:	f109 32ff 	add.w	r2, r9, #4294967295
90008774:	2700      	movs	r7, #0
90008776:	f8d3 a00c 	ldr.w	sl, [r3, #12]
9000877a:	f1aa 0802 	sub.w	r8, sl, #2
9000877e:	4643      	mov	r3, r8
		w = p[si++];					/* Get a character */
90008780:	f812 4f01 	ldrb.w	r4, [r2, #1]!
90008784:	1c7d      	adds	r5, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
90008786:	2c1f      	cmp	r4, #31
90008788:	d90c      	bls.n	900087a4 <follow_path+0x1c0>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
9000878a:	2c2f      	cmp	r4, #47	; 0x2f
9000878c:	d002      	beq.n	90008794 <follow_path+0x1b0>
9000878e:	2c5c      	cmp	r4, #92	; 0x5c
90008790:	f47f af46 	bne.w	90008620 <follow_path+0x3c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
90008794:	f819 3005 	ldrb.w	r3, [r9, r5]
90008798:	2b2f      	cmp	r3, #47	; 0x2f
9000879a:	f43f af3f 	beq.w	9000861c <follow_path+0x38>
9000879e:	2b5c      	cmp	r3, #92	; 0x5c
900087a0:	f43f af3c 	beq.w	9000861c <follow_path+0x38>
	*path = &p[si];						/* Return pointer to the next segment */
900087a4:	44a9      	add	r9, r5
	while (di) {						/* Snip off trailing spaces and dots if exist */
900087a6:	2f00      	cmp	r7, #0
900087a8:	f47f af54 	bne.w	90008654 <follow_path+0x70>
	lfn[di] = 0;						/* LFN is created */
900087ac:	2300      	movs	r3, #0
900087ae:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
900087b2:	2f00      	cmp	r7, #0
900087b4:	f43f af48 	beq.w	90008648 <follow_path+0x64>
	mem_set(dp->fn, ' ', 11);
900087b8:	2120      	movs	r1, #32
900087ba:	220b      	movs	r2, #11
900087bc:	f106 0024 	add.w	r0, r6, #36	; 0x24
900087c0:	f7fe fef4 	bl	900075ac <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
900087c4:	4619      	mov	r1, r3
900087c6:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
900087ca:	2b20      	cmp	r3, #32
900087cc:	f43f af4b 	beq.w	90008666 <follow_path+0x82>
900087d0:	2b2e      	cmp	r3, #46	; 0x2e
900087d2:	f43f af48 	beq.w	90008666 <follow_path+0x82>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
900087d6:	2c1f      	cmp	r4, #31
900087d8:	bf8c      	ite	hi
900087da:	2400      	movhi	r4, #0
900087dc:	2401      	movls	r4, #1
900087de:	00a4      	lsls	r4, r4, #2
	if (si) cf |= NS_LOSS | NS_LFN;
900087e0:	b109      	cbz	r1, 900087e6 <follow_path+0x202>
900087e2:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
900087e6:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
900087ea:	2b2e      	cmp	r3, #46	; 0x2e
900087ec:	d001      	beq.n	900087f2 <follow_path+0x20e>
900087ee:	3f01      	subs	r7, #1
900087f0:	d1f9      	bne.n	900087e6 <follow_path+0x202>
		dp->fn[i++] = (BYTE)w;
900087f2:	2300      	movs	r3, #0
900087f4:	f04f 0808 	mov.w	r8, #8
900087f8:	461d      	mov	r5, r3
		w = lfn[si++];					/* Get an LFN character */
900087fa:	f83a 0011 	ldrh.w	r0, [sl, r1, lsl #1]
900087fe:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
90008800:	2800      	cmp	r0, #0
90008802:	f43f af41 	beq.w	90008688 <follow_path+0xa4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
90008806:	2820      	cmp	r0, #32
90008808:	d005      	beq.n	90008816 <follow_path+0x232>
9000880a:	282e      	cmp	r0, #46	; 0x2e
9000880c:	f47f af2d 	bne.w	9000866a <follow_path+0x86>
90008810:	42ba      	cmp	r2, r7
90008812:	f43f af2e 	beq.w	90008672 <follow_path+0x8e>
			cf |= NS_LOSS | NS_LFN; continue;
90008816:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
9000881a:	4611      	mov	r1, r2
9000881c:	e7ed      	b.n	900087fa <follow_path+0x216>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
9000881e:	2005      	movs	r0, #5
	return res;
90008820:	e762      	b.n	900086e8 <follow_path+0x104>
				if (IsUpper(w)) {		/* ASCII large capital */
90008822:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
90008826:	2919      	cmp	r1, #25
90008828:	d98e      	bls.n	90008748 <follow_path+0x164>
					if (IsLower(w)) {	/* ASCII small capital */
9000882a:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
9000882e:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
90008830:	bf9e      	ittt	ls
90008832:	3820      	subls	r0, #32
90008834:	f045 0501 	orrls.w	r5, r5, #1
90008838:	b280      	uxthls	r0, r0
9000883a:	e780      	b.n	9000873e <follow_path+0x15a>
9000883c:	90010bae 	.word	0x90010bae
90008840:	900101e8 	.word	0x900101e8
90008844:	90010bb7 	.word	0x90010bb7

90008848 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
90008848:	b530      	push	{r4, r5, lr}
9000884a:	b085      	sub	sp, #20
9000884c:	4614      	mov	r4, r2
9000884e:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
90008852:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
90008854:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
90008856:	f7fe ff8e 	bl	90007776 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
9000885a:	2800      	cmp	r0, #0
9000885c:	db19      	blt.n	90008892 <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
9000885e:	490f      	ldr	r1, [pc, #60]	; (9000889c <f_mount+0x54>)
90008860:	0085      	lsls	r5, r0, #2
90008862:	eb01 0080 	add.w	r0, r1, r0, lsl #2
90008866:	6a00      	ldr	r0, [r0, #32]

	if (cfs) {
90008868:	b118      	cbz	r0, 90008872 <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
9000886a:	f7fe ff3f 	bl	900076ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
9000886e:	2300      	movs	r3, #0
90008870:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
90008872:	9801      	ldr	r0, [sp, #4]
90008874:	b108      	cbz	r0, 9000887a <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
90008876:	2300      	movs	r3, #0
90008878:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
9000887a:	4429      	add	r1, r5
9000887c:	6208      	str	r0, [r1, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
9000887e:	b130      	cbz	r0, 9000888e <f_mount+0x46>
90008880:	2c01      	cmp	r4, #1
90008882:	d108      	bne.n	90008896 <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
90008884:	2200      	movs	r2, #0
90008886:	a901      	add	r1, sp, #4
90008888:	4668      	mov	r0, sp
9000888a:	f7ff f8a9 	bl	900079e0 <find_volume>
	LEAVE_FF(fs, res);
}
9000888e:	b005      	add	sp, #20
90008890:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
90008892:	200b      	movs	r0, #11
90008894:	e7fb      	b.n	9000888e <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
90008896:	2000      	movs	r0, #0
90008898:	e7f9      	b.n	9000888e <f_mount+0x46>
9000889a:	bf00      	nop
9000889c:	20000754 	.word	0x20000754

900088a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
900088a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900088a4:	b090      	sub	sp, #64	; 0x40
900088a6:	4691      	mov	r9, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
900088a8:	4605      	mov	r5, r0
{
900088aa:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
900088ac:	2800      	cmp	r0, #0
900088ae:	f000 8100 	beq.w	90008ab2 <f_open+0x212>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
900088b2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
900088b6:	a902      	add	r1, sp, #8
900088b8:	a801      	add	r0, sp, #4
900088ba:	463a      	mov	r2, r7
900088bc:	f7ff f890 	bl	900079e0 <find_volume>
	if (res == FR_OK) {
900088c0:	2800      	cmp	r0, #0
900088c2:	f040 80f4 	bne.w	90008aae <f_open+0x20e>
		dj.obj.fs = fs;
900088c6:	9e02      	ldr	r6, [sp, #8]
		INIT_NAMBUF(fs);
900088c8:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
900088cc:	9603      	str	r6, [sp, #12]
		INIT_NAMBUF(fs);
900088ce:	f000 fcc4 	bl	9000925a <ff_memalloc>
900088d2:	4680      	mov	r8, r0
900088d4:	2800      	cmp	r0, #0
900088d6:	f000 80ee 	beq.w	90008ab6 <f_open+0x216>
900088da:	60f0      	str	r0, [r6, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
900088dc:	a803      	add	r0, sp, #12
900088de:	9901      	ldr	r1, [sp, #4]
900088e0:	f7ff fe80 	bl	900085e4 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
900088e4:	4604      	mov	r4, r0
900088e6:	b960      	cbnz	r0, 90008902 <f_open+0x62>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
900088e8:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
900088ec:	2b00      	cmp	r3, #0
900088ee:	db5d      	blt.n	900089ac <f_open+0x10c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
900088f0:	f017 0f3e 	tst.w	r7, #62	; 0x3e
900088f4:	a803      	add	r0, sp, #12
900088f6:	bf14      	ite	ne
900088f8:	2101      	movne	r1, #1
900088fa:	2100      	moveq	r1, #0
900088fc:	f7fe fe5c 	bl	900075b8 <chk_lock>
90008900:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
90008902:	f019 0f1c 	tst.w	r9, #28
90008906:	d072      	beq.n	900089ee <f_open+0x14e>
			if (res != FR_OK) {					/* No file, create new */
90008908:	2c00      	cmp	r4, #0
9000890a:	d051      	beq.n	900089b0 <f_open+0x110>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
9000890c:	2c04      	cmp	r4, #4
9000890e:	d143      	bne.n	90008998 <f_open+0xf8>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
90008910:	4b6a      	ldr	r3, [pc, #424]	; (90008abc <f_open+0x21c>)
90008912:	681a      	ldr	r2, [r3, #0]
90008914:	b11a      	cbz	r2, 9000891e <f_open+0x7e>
90008916:	691b      	ldr	r3, [r3, #16]
90008918:	2b00      	cmp	r3, #0
9000891a:	f040 80c2 	bne.w	90008aa2 <f_open+0x202>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
9000891e:	a803      	add	r0, sp, #12
90008920:	f7ff fca8 	bl	90008274 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
90008924:	4604      	mov	r4, r0
90008926:	2800      	cmp	r0, #0
90008928:	d136      	bne.n	90008998 <f_open+0xf8>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
9000892a:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
9000892e:	f7fe fe31 	bl	90007594 <get_fattime>
90008932:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
90008934:	9000      	str	r0, [sp, #0]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
90008936:	2220      	movs	r2, #32
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
90008938:	980b      	ldr	r0, [sp, #44]	; 0x2c
9000893a:	300e      	adds	r0, #14
9000893c:	f7fe fe2e 	bl	9000759c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
90008940:	980b      	ldr	r0, [sp, #44]	; 0x2c
90008942:	9900      	ldr	r1, [sp, #0]
90008944:	3016      	adds	r0, #22
90008946:	f7fe fe29 	bl	9000759c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
9000894a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9000894c:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
9000894e:	990b      	ldr	r1, [sp, #44]	; 0x2c
90008950:	7830      	ldrb	r0, [r6, #0]
90008952:	f7ff fa3a 	bl	90007dca <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
90008956:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
90008958:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
9000895a:	4630      	mov	r0, r6
9000895c:	f7fe fef0 	bl	90007740 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
90008960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
90008962:	2200      	movs	r2, #0
90008964:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
90008966:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
90008968:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
9000896a:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
9000896c:	2301      	movs	r3, #1
9000896e:	70f3      	strb	r3, [r6, #3]

					if (cl) {							/* Remove the cluster chain if exist */
90008970:	f1b9 0f00 	cmp.w	r9, #0
90008974:	d027      	beq.n	900089c6 <f_open+0x126>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
90008976:	4649      	mov	r1, r9
90008978:	a803      	add	r0, sp, #12
						dw = fs->winsect;
9000897a:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
9000897e:	f7ff fa82 	bl	90007e86 <remove_chain>
						if (res == FR_OK) {
90008982:	4604      	mov	r4, r0
90008984:	b940      	cbnz	r0, 90008998 <f_open+0xf8>
							res = move_window(fs, dw);
90008986:	4651      	mov	r1, sl
90008988:	4630      	mov	r0, r6
9000898a:	f7fe ffd3 	bl	90007934 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
9000898e:	f109 31ff 	add.w	r1, r9, #4294967295
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
90008992:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
90008994:	6131      	str	r1, [r6, #16]
		if (res == FR_OK) {
90008996:	b1b0      	cbz	r0, 900089c6 <f_open+0x126>
				}
			}
#endif
		}

		FREE_NAMBUF();
90008998:	4640      	mov	r0, r8
9000899a:	f000 fc60 	bl	9000925e <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
9000899e:	b10c      	cbz	r4, 900089a4 <f_open+0x104>
900089a0:	2300      	movs	r3, #0
900089a2:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
900089a4:	4620      	mov	r0, r4
900089a6:	b010      	add	sp, #64	; 0x40
900089a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
900089ac:	2406      	movs	r4, #6
900089ae:	e7a8      	b.n	90008902 <f_open+0x62>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
900089b0:	f89d 3012 	ldrb.w	r3, [sp, #18]
900089b4:	f013 0f11 	tst.w	r3, #17
900089b8:	d124      	bne.n	90008a04 <f_open+0x164>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
900089ba:	f019 0f04 	tst.w	r9, #4
900089be:	d172      	bne.n	90008aa6 <f_open+0x206>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
900089c0:	f019 0f08 	tst.w	r9, #8
900089c4:	d1b3      	bne.n	9000892e <f_open+0x8e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
900089c6:	0738      	lsls	r0, r7, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
900089c8:	6b33      	ldr	r3, [r6, #48]	; 0x30
			fp->dir_ptr = dj.dir;
900089ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
900089cc:	a803      	add	r0, sp, #12
				mode |= FA_MODIFIED;
900089ce:	bf48      	it	mi
900089d0:	f047 0740 	orrmi.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
900089d4:	626b      	str	r3, [r5, #36]	; 0x24
			fp->dir_ptr = dj.dir;
900089d6:	62ac      	str	r4, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
900089d8:	f017 0ffe 	tst.w	r7, #254	; 0xfe
900089dc:	bf14      	ite	ne
900089de:	2101      	movne	r1, #1
900089e0:	2100      	moveq	r1, #0
900089e2:	f7fe fe23 	bl	9000762c <inc_lock>
900089e6:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
900089e8:	b970      	cbnz	r0, 90008a08 <f_open+0x168>
900089ea:	2402      	movs	r4, #2
900089ec:	e7d4      	b.n	90008998 <f_open+0xf8>
			if (res == FR_OK) {					/* Following succeeded */
900089ee:	2c00      	cmp	r4, #0
900089f0:	d1d2      	bne.n	90008998 <f_open+0xf8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
900089f2:	f89d 3012 	ldrb.w	r3, [sp, #18]
900089f6:	06da      	lsls	r2, r3, #27
900089f8:	d457      	bmi.n	90008aaa <f_open+0x20a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
900089fa:	f019 0f02 	tst.w	r9, #2
900089fe:	d0e2      	beq.n	900089c6 <f_open+0x126>
90008a00:	07dc      	lsls	r4, r3, #31
90008a02:	d5e0      	bpl.n	900089c6 <f_open+0x126>
					res = FR_DENIED;
90008a04:	2407      	movs	r4, #7
90008a06:	e7c7      	b.n	90008998 <f_open+0xf8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
90008a08:	7830      	ldrb	r0, [r6, #0]
90008a0a:	4621      	mov	r1, r4
90008a0c:	f7ff f9dd 	bl	90007dca <ld_clust.isra.0>
90008a10:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
90008a12:	f104 001c 	add.w	r0, r4, #28
			fp->cltbl = 0;			/* Disable fast seek mode */
90008a16:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
90008a18:	f7fe fdbe 	bl	90007598 <ld_dword>
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008a1c:	f105 0930 	add.w	r9, r5, #48	; 0x30
			fp->obj.id = fs->id;
90008a20:	88f3      	ldrh	r3, [r6, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008a22:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
90008a26:	60e8      	str	r0, [r5, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008a28:	4648      	mov	r0, r9
			fp->cltbl = 0;			/* Disable fast seek mode */
90008a2a:	62e9      	str	r1, [r5, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
90008a2c:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
90008a2e:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
90008a30:	752f      	strb	r7, [r5, #20]
			fp->err = 0;			/* Clear error flag */
90008a32:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
90008a34:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
90008a36:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008a38:	f7fe fdb8 	bl	900075ac <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
90008a3c:	06ba      	lsls	r2, r7, #26
90008a3e:	d401      	bmi.n	90008a44 <f_open+0x1a4>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008a40:	2400      	movs	r4, #0
90008a42:	e7a9      	b.n	90008998 <f_open+0xf8>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
90008a44:	68ef      	ldr	r7, [r5, #12]
90008a46:	2f00      	cmp	r7, #0
90008a48:	d0fa      	beq.n	90008a40 <f_open+0x1a0>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
90008a4a:	8974      	ldrh	r4, [r6, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
90008a4c:	68a9      	ldr	r1, [r5, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
90008a4e:	0264      	lsls	r4, r4, #9
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
90008a50:	61af      	str	r7, [r5, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
90008a52:	42bc      	cmp	r4, r7
90008a54:	d318      	bcc.n	90008a88 <f_open+0x1e8>
90008a56:	2400      	movs	r4, #0
				fp->clust = clst;
90008a58:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
90008a5a:	2c00      	cmp	r4, #0
90008a5c:	d19c      	bne.n	90008998 <f_open+0xf8>
90008a5e:	f3c7 0308 	ubfx	r3, r7, #0, #9
90008a62:	2b00      	cmp	r3, #0
90008a64:	d0ec      	beq.n	90008a40 <f_open+0x1a0>
					if ((sc = clust2sect(fs, clst)) == 0) {
90008a66:	4630      	mov	r0, r6
90008a68:	f7fe fe4e 	bl	90007708 <clust2sect>
90008a6c:	2800      	cmp	r0, #0
90008a6e:	d0bc      	beq.n	900089ea <f_open+0x14a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
90008a70:	eb00 2257 	add.w	r2, r0, r7, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
90008a74:	2301      	movs	r3, #1
90008a76:	4649      	mov	r1, r9
						fp->sect = sc + (DWORD)(ofs / SS(fs));
90008a78:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
90008a7a:	7870      	ldrb	r0, [r6, #1]
90008a7c:	f7fe fd60 	bl	90007540 <disk_read>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008a80:	1e04      	subs	r4, r0, #0
90008a82:	bf18      	it	ne
90008a84:	2401      	movne	r4, #1
90008a86:	e787      	b.n	90008998 <f_open+0xf8>
					clst = get_fat(&fp->obj, clst);
90008a88:	6828      	ldr	r0, [r5, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
90008a8a:	1b3f      	subs	r7, r7, r4
					clst = get_fat(&fp->obj, clst);
90008a8c:	f7ff f9a5 	bl	90007dda <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
90008a90:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
90008a92:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
90008a94:	d903      	bls.n	90008a9e <f_open+0x1fe>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
90008a96:	1c43      	adds	r3, r0, #1
90008a98:	d1db      	bne.n	90008a52 <f_open+0x1b2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
90008a9a:	2401      	movs	r4, #1
90008a9c:	e7dc      	b.n	90008a58 <f_open+0x1b8>
					if (clst <= 1) res = FR_INT_ERR;
90008a9e:	2402      	movs	r4, #2
90008aa0:	e7da      	b.n	90008a58 <f_open+0x1b8>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
90008aa2:	2412      	movs	r4, #18
90008aa4:	e778      	b.n	90008998 <f_open+0xf8>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008aa6:	2408      	movs	r4, #8
90008aa8:	e776      	b.n	90008998 <f_open+0xf8>
					res = FR_NO_FILE;
90008aaa:	2404      	movs	r4, #4
90008aac:	e774      	b.n	90008998 <f_open+0xf8>
90008aae:	4604      	mov	r4, r0
90008ab0:	e776      	b.n	900089a0 <f_open+0x100>
	if (!fp) return FR_INVALID_OBJECT;
90008ab2:	2409      	movs	r4, #9
90008ab4:	e776      	b.n	900089a4 <f_open+0x104>
		INIT_NAMBUF(fs);
90008ab6:	2411      	movs	r4, #17
90008ab8:	e774      	b.n	900089a4 <f_open+0x104>
90008aba:	bf00      	nop
90008abc:	20000754 	.word	0x20000754

90008ac0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
90008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008ac4:	b087      	sub	sp, #28
90008ac6:	4617      	mov	r7, r2
90008ac8:	4689      	mov	r9, r1
90008aca:	4604      	mov	r4, r0
90008acc:	9301      	str	r3, [sp, #4]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
90008ace:	2300      	movs	r3, #0
90008ad0:	9a01      	ldr	r2, [sp, #4]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
90008ad2:	a905      	add	r1, sp, #20
	*br = 0;	/* Clear read byte counter */
90008ad4:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
90008ad6:	f7fe fe6a 	bl	900077ae <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
90008ada:	4605      	mov	r5, r0
90008adc:	bb20      	cbnz	r0, 90008b28 <f_read+0x68>
90008ade:	7d65      	ldrb	r5, [r4, #21]
90008ae0:	bb15      	cbnz	r5, 90008b28 <f_read+0x68>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
90008ae2:	7d23      	ldrb	r3, [r4, #20]
90008ae4:	f013 0301 	ands.w	r3, r3, #1
90008ae8:	9302      	str	r3, [sp, #8]
90008aea:	f000 8098 	beq.w	90008c1e <f_read+0x15e>
	remain = fp->obj.objsize - fp->fptr;
90008aee:	68e6      	ldr	r6, [r4, #12]
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
90008af0:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	remain = fp->obj.objsize - fp->fptr;
90008af4:	69a3      	ldr	r3, [r4, #24]
90008af6:	1af6      	subs	r6, r6, r3
90008af8:	42be      	cmp	r6, r7
90008afa:	bf28      	it	cs
90008afc:	463e      	movcs	r6, r7
	for ( ;  btr;								/* Repeat until all data read */
90008afe:	b19e      	cbz	r6, 90008b28 <f_read+0x68>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
90008b00:	69a1      	ldr	r1, [r4, #24]
90008b02:	f3c1 0308 	ubfx	r3, r1, #0, #9
90008b06:	2b00      	cmp	r3, #0
90008b08:	d17b      	bne.n	90008c02 <f_read+0x142>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
90008b0a:	f8dd a014 	ldr.w	sl, [sp, #20]
90008b0e:	f8ba 800a 	ldrh.w	r8, [sl, #10]
90008b12:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
90008b16:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
90008b1a:	d11b      	bne.n	90008b54 <f_read+0x94>
				if (fp->fptr == 0) {			/* On the top of the file? */
90008b1c:	b941      	cbnz	r1, 90008b30 <f_read+0x70>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
90008b1e:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
90008b20:	2801      	cmp	r0, #1
90008b22:	d810      	bhi.n	90008b46 <f_read+0x86>
90008b24:	2502      	movs	r5, #2
90008b26:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
90008b28:	4628      	mov	r0, r5
90008b2a:	b007      	add	sp, #28
90008b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
90008b30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008b32:	b11b      	cbz	r3, 90008b3c <f_read+0x7c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
90008b34:	4620      	mov	r0, r4
90008b36:	f7fe fdf2 	bl	9000771e <clmt_clust>
90008b3a:	e7f1      	b.n	90008b20 <f_read+0x60>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
90008b3c:	69e1      	ldr	r1, [r4, #28]
90008b3e:	6820      	ldr	r0, [r4, #0]
90008b40:	f7ff f94b 	bl	90007dda <get_fat.isra.0>
90008b44:	e7ec      	b.n	90008b20 <f_read+0x60>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90008b46:	1c43      	adds	r3, r0, #1
90008b48:	d103      	bne.n	90008b52 <f_read+0x92>
90008b4a:	2301      	movs	r3, #1
90008b4c:	9d02      	ldr	r5, [sp, #8]
90008b4e:	7563      	strb	r3, [r4, #21]
90008b50:	e7ea      	b.n	90008b28 <f_read+0x68>
				fp->clust = clst;				/* Update current cluster */
90008b52:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
90008b54:	69e1      	ldr	r1, [r4, #28]
90008b56:	4650      	mov	r0, sl
90008b58:	f7fe fdd6 	bl	90007708 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
90008b5c:	2800      	cmp	r0, #0
90008b5e:	d0e1      	beq.n	90008b24 <f_read+0x64>
			if (cc) {							/* Read maximum contiguous sectors directly */
90008b60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
90008b64:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
90008b68:	d32e      	bcc.n	90008bc8 <f_read+0x108>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90008b6a:	f8ba 200a 	ldrh.w	r2, [sl, #10]
90008b6e:	eb08 2156 	add.w	r1, r8, r6, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
90008b72:	0a73      	lsrs	r3, r6, #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008b74:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90008b78:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008b7a:	4649      	mov	r1, r9
					cc = fs->csize - csect;
90008b7c:	bf88      	it	hi
90008b7e:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008b82:	463a      	mov	r2, r7
90008b84:	9303      	str	r3, [sp, #12]
90008b86:	f7fe fcdb 	bl	90007540 <disk_read>
90008b8a:	2800      	cmp	r0, #0
90008b8c:	d1dd      	bne.n	90008b4a <f_read+0x8a>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
90008b8e:	f994 2014 	ldrsb.w	r2, [r4, #20]
90008b92:	9b03      	ldr	r3, [sp, #12]
90008b94:	2a00      	cmp	r2, #0
90008b96:	da0b      	bge.n	90008bb0 <f_read+0xf0>
90008b98:	6a20      	ldr	r0, [r4, #32]
90008b9a:	1bc0      	subs	r0, r0, r7
90008b9c:	4298      	cmp	r0, r3
90008b9e:	d207      	bcs.n	90008bb0 <f_read+0xf0>
	if (cnt) {
90008ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
90008ba4:	4659      	mov	r1, fp
90008ba6:	eb09 2040 	add.w	r0, r9, r0, lsl #9
90008baa:	f7fe fe8e 	bl	900078ca <mem_cpy.part.0>
90008bae:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
90008bb0:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
90008bb2:	69a3      	ldr	r3, [r4, #24]
90008bb4:	44b9      	add	r9, r7
90008bb6:	9a01      	ldr	r2, [sp, #4]
90008bb8:	1bf6      	subs	r6, r6, r7
90008bba:	443b      	add	r3, r7
90008bbc:	61a3      	str	r3, [r4, #24]
90008bbe:	9b01      	ldr	r3, [sp, #4]
90008bc0:	681b      	ldr	r3, [r3, #0]
90008bc2:	443b      	add	r3, r7
90008bc4:	6013      	str	r3, [r2, #0]
90008bc6:	e79a      	b.n	90008afe <f_read+0x3e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
90008bc8:	6a22      	ldr	r2, [r4, #32]
90008bca:	42ba      	cmp	r2, r7
90008bcc:	d018      	beq.n	90008c00 <f_read+0x140>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
90008bce:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008bd2:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
90008bd6:	2b00      	cmp	r3, #0
90008bd8:	da09      	bge.n	90008bee <f_read+0x12e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008bda:	2301      	movs	r3, #1
90008bdc:	4659      	mov	r1, fp
90008bde:	f7fe fcbd 	bl	9000755c <disk_write>
90008be2:	2800      	cmp	r0, #0
90008be4:	d1b1      	bne.n	90008b4a <f_read+0x8a>
					fp->flag &= (BYTE)~FA_DIRTY;
90008be6:	7d23      	ldrb	r3, [r4, #20]
90008be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90008bec:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
90008bee:	2301      	movs	r3, #1
90008bf0:	463a      	mov	r2, r7
90008bf2:	4659      	mov	r1, fp
90008bf4:	f89a 0001 	ldrb.w	r0, [sl, #1]
90008bf8:	f7fe fca2 	bl	90007540 <disk_read>
90008bfc:	2800      	cmp	r0, #0
90008bfe:	d1a4      	bne.n	90008b4a <f_read+0x8a>
			fp->sect = sect;
90008c00:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
90008c02:	69a1      	ldr	r1, [r4, #24]
90008c04:	4648      	mov	r0, r9
90008c06:	f3c1 0108 	ubfx	r1, r1, #0, #9
90008c0a:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
90008c0e:	4459      	add	r1, fp
90008c10:	42b7      	cmp	r7, r6
90008c12:	bf28      	it	cs
90008c14:	4637      	movcs	r7, r6
	if (cnt) {
90008c16:	463a      	mov	r2, r7
90008c18:	f7fe fe57 	bl	900078ca <mem_cpy.part.0>
}
90008c1c:	e7c9      	b.n	90008bb2 <f_read+0xf2>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
90008c1e:	2507      	movs	r5, #7
90008c20:	e782      	b.n	90008b28 <f_read+0x68>

90008c22 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
90008c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008c26:	469a      	mov	sl, r3
90008c28:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
90008c2a:	2300      	movs	r3, #0
{
90008c2c:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
90008c2e:	a903      	add	r1, sp, #12
{
90008c30:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
90008c32:	f8ca 3000 	str.w	r3, [sl]
{
90008c36:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
90008c38:	f7fe fdb9 	bl	900077ae <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
90008c3c:	4605      	mov	r5, r0
90008c3e:	bb60      	cbnz	r0, 90008c9a <f_write+0x78>
90008c40:	7d65      	ldrb	r5, [r4, #21]
90008c42:	bb55      	cbnz	r5, 90008c9a <f_write+0x78>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
90008c44:	7d23      	ldrb	r3, [r4, #20]
90008c46:	079a      	lsls	r2, r3, #30
90008c48:	f140 80af 	bpl.w	90008daa <f_write+0x188>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
90008c4c:	69a3      	ldr	r3, [r4, #24]
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
90008c4e:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
90008c52:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
90008c54:	bf28      	it	cs
90008c56:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
90008c58:	b1de      	cbz	r6, 90008c92 <f_write+0x70>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
90008c5a:	69a1      	ldr	r1, [r4, #24]
90008c5c:	f3c1 0308 	ubfx	r3, r1, #0, #9
90008c60:	2b00      	cmp	r3, #0
90008c62:	f040 8090 	bne.w	90008d86 <f_write+0x164>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
90008c66:	f8dd 900c 	ldr.w	r9, [sp, #12]
90008c6a:	f8b9 700a 	ldrh.w	r7, [r9, #10]
90008c6e:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
90008c70:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
90008c74:	d124      	bne.n	90008cc0 <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
90008c76:	b931      	cbnz	r1, 90008c86 <f_write+0x64>
					clst = fp->obj.sclust;	/* Follow from the origin */
90008c78:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
90008c7a:	b9a0      	cbnz	r0, 90008ca6 <f_write+0x84>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
90008c7c:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
90008c7e:	4620      	mov	r0, r4
90008c80:	f7ff f939 	bl	90007ef6 <create_chain>
90008c84:	e004      	b.n	90008c90 <f_write+0x6e>
					if (fp->cltbl) {
90008c86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008c88:	b15b      	cbz	r3, 90008ca2 <f_write+0x80>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
90008c8a:	4620      	mov	r0, r4
90008c8c:	f7fe fd47 	bl	9000771e <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
90008c90:	b948      	cbnz	r0, 90008ca6 <f_write+0x84>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
90008c92:	7d23      	ldrb	r3, [r4, #20]
90008c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90008c98:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
90008c9a:	4628      	mov	r0, r5
90008c9c:	b005      	add	sp, #20
90008c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
90008ca2:	69e1      	ldr	r1, [r4, #28]
90008ca4:	e7eb      	b.n	90008c7e <f_write+0x5c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
90008ca6:	2801      	cmp	r0, #1
90008ca8:	d102      	bne.n	90008cb0 <f_write+0x8e>
90008caa:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90008cac:	7565      	strb	r5, [r4, #21]
90008cae:	e7f4      	b.n	90008c9a <f_write+0x78>
90008cb0:	1c43      	adds	r3, r0, #1
90008cb2:	d101      	bne.n	90008cb8 <f_write+0x96>
90008cb4:	2501      	movs	r5, #1
90008cb6:	e7f9      	b.n	90008cac <f_write+0x8a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
90008cb8:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
90008cba:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
90008cbc:	b903      	cbnz	r3, 90008cc0 <f_write+0x9e>
90008cbe:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
90008cc0:	f994 3014 	ldrsb.w	r3, [r4, #20]
90008cc4:	2b00      	cmp	r3, #0
90008cc6:	da0c      	bge.n	90008ce2 <f_write+0xc0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008cc8:	2301      	movs	r3, #1
90008cca:	6a22      	ldr	r2, [r4, #32]
90008ccc:	4659      	mov	r1, fp
90008cce:	f899 0001 	ldrb.w	r0, [r9, #1]
90008cd2:	f7fe fc43 	bl	9000755c <disk_write>
90008cd6:	2800      	cmp	r0, #0
90008cd8:	d1ec      	bne.n	90008cb4 <f_write+0x92>
				fp->flag &= (BYTE)~FA_DIRTY;
90008cda:	7d23      	ldrb	r3, [r4, #20]
90008cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90008ce0:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
90008ce2:	69e1      	ldr	r1, [r4, #28]
90008ce4:	4648      	mov	r0, r9
90008ce6:	f7fe fd0f 	bl	90007708 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
90008cea:	2800      	cmp	r0, #0
90008cec:	d0dd      	beq.n	90008caa <f_write+0x88>
			if (cc) {						/* Write maximum contiguous sectors directly */
90008cee:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
90008cf2:	eb07 0200 	add.w	r2, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
90008cf6:	d334      	bcc.n	90008d62 <f_write+0x140>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90008cf8:	f8b9 100a 	ldrh.w	r1, [r9, #10]
90008cfc:	eb07 2056 	add.w	r0, r7, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
90008d00:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90008d02:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008d04:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
90008d08:	bf88      	it	hi
90008d0a:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008d0c:	4641      	mov	r1, r8
90008d0e:	e9cd 2300 	strd	r2, r3, [sp]
90008d12:	f7fe fc23 	bl	9000755c <disk_write>
90008d16:	2800      	cmp	r0, #0
90008d18:	d1cc      	bne.n	90008cb4 <f_write+0x92>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
90008d1a:	6a21      	ldr	r1, [r4, #32]
90008d1c:	9a00      	ldr	r2, [sp, #0]
90008d1e:	9b01      	ldr	r3, [sp, #4]
90008d20:	1a89      	subs	r1, r1, r2
90008d22:	4299      	cmp	r1, r3
90008d24:	d20c      	bcs.n	90008d40 <f_write+0x11e>
90008d26:	f44f 7200 	mov.w	r2, #512	; 0x200
90008d2a:	eb08 2141 	add.w	r1, r8, r1, lsl #9
90008d2e:	4658      	mov	r0, fp
90008d30:	9300      	str	r3, [sp, #0]
	if (cnt) {
90008d32:	f7fe fdca 	bl	900078ca <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
90008d36:	7d22      	ldrb	r2, [r4, #20]
90008d38:	9b00      	ldr	r3, [sp, #0]
90008d3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
90008d3e:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
90008d40:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
90008d42:	69a3      	ldr	r3, [r4, #24]
90008d44:	44b8      	add	r8, r7
90008d46:	68e2      	ldr	r2, [r4, #12]
90008d48:	1bf6      	subs	r6, r6, r7
90008d4a:	443b      	add	r3, r7
90008d4c:	61a3      	str	r3, [r4, #24]
90008d4e:	429a      	cmp	r2, r3
90008d50:	bf2c      	ite	cs
90008d52:	60e2      	strcs	r2, [r4, #12]
90008d54:	60e3      	strcc	r3, [r4, #12]
90008d56:	f8da 3000 	ldr.w	r3, [sl]
90008d5a:	443b      	add	r3, r7
90008d5c:	f8ca 3000 	str.w	r3, [sl]
90008d60:	e77a      	b.n	90008c58 <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
90008d62:	6a21      	ldr	r1, [r4, #32]
				fp->fptr < fp->obj.objsize &&
90008d64:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
90008d66:	4291      	cmp	r1, r2
90008d68:	d00c      	beq.n	90008d84 <f_write+0x162>
90008d6a:	68e1      	ldr	r1, [r4, #12]
90008d6c:	4299      	cmp	r1, r3
90008d6e:	d909      	bls.n	90008d84 <f_write+0x162>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
90008d70:	2301      	movs	r3, #1
90008d72:	4659      	mov	r1, fp
90008d74:	f899 0001 	ldrb.w	r0, [r9, #1]
90008d78:	9200      	str	r2, [sp, #0]
90008d7a:	f7fe fbe1 	bl	90007540 <disk_read>
				fp->fptr < fp->obj.objsize &&
90008d7e:	9a00      	ldr	r2, [sp, #0]
90008d80:	2800      	cmp	r0, #0
90008d82:	d197      	bne.n	90008cb4 <f_write+0x92>
			fp->sect = sect;
90008d84:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
90008d86:	69a0      	ldr	r0, [r4, #24]
90008d88:	4641      	mov	r1, r8
90008d8a:	f3c0 0008 	ubfx	r0, r0, #0, #9
90008d8e:	f5c0 7700 	rsb	r7, r0, #512	; 0x200
90008d92:	4458      	add	r0, fp
90008d94:	42b7      	cmp	r7, r6
90008d96:	bf28      	it	cs
90008d98:	4637      	movcs	r7, r6
	if (cnt) {
90008d9a:	463a      	mov	r2, r7
90008d9c:	f7fe fd95 	bl	900078ca <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
90008da0:	7d23      	ldrb	r3, [r4, #20]
90008da2:	f063 037f 	orn	r3, r3, #127	; 0x7f
90008da6:	7523      	strb	r3, [r4, #20]
90008da8:	e7cb      	b.n	90008d42 <f_write+0x120>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
90008daa:	2507      	movs	r5, #7
90008dac:	e775      	b.n	90008c9a <f_write+0x78>

90008dae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
90008dae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
90008db2:	a901      	add	r1, sp, #4
{
90008db4:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
90008db6:	f7fe fcfa 	bl	900077ae <validate>
	if (res == FR_OK) {
90008dba:	4604      	mov	r4, r0
90008dbc:	2800      	cmp	r0, #0
90008dbe:	d13b      	bne.n	90008e38 <f_sync+0x8a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
90008dc0:	7d2b      	ldrb	r3, [r5, #20]
90008dc2:	f013 0440 	ands.w	r4, r3, #64	; 0x40
90008dc6:	d037      	beq.n	90008e38 <f_sync+0x8a>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
90008dc8:	061b      	lsls	r3, r3, #24
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
90008dca:	9f01      	ldr	r7, [sp, #4]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
90008dcc:	d50b      	bpl.n	90008de6 <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
90008dce:	2301      	movs	r3, #1
90008dd0:	6a2a      	ldr	r2, [r5, #32]
90008dd2:	f105 0130 	add.w	r1, r5, #48	; 0x30
90008dd6:	7878      	ldrb	r0, [r7, #1]
90008dd8:	f7fe fbc0 	bl	9000755c <disk_write>
90008ddc:	bb80      	cbnz	r0, 90008e40 <f_sync+0x92>
				fp->flag &= (BYTE)~FA_DIRTY;
90008dde:	7d2b      	ldrb	r3, [r5, #20]
90008de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90008de4:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
90008de6:	f7fe fbd5 	bl	90007594 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
90008dea:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
90008dec:	4680      	mov	r8, r0
				res = move_window(fs, fp->dir_sect);
90008dee:	4638      	mov	r0, r7
90008df0:	f7fe fda0 	bl	90007934 <move_window>
				if (res == FR_OK) {
90008df4:	4604      	mov	r4, r0
90008df6:	b9f8      	cbnz	r0, 90008e38 <f_sync+0x8a>
					dir = fp->dir_ptr;
90008df8:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
90008dfa:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
90008dfc:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
90008dfe:	f043 0320 	orr.w	r3, r3, #32
90008e02:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
90008e04:	68aa      	ldr	r2, [r5, #8]
90008e06:	6828      	ldr	r0, [r5, #0]
90008e08:	f7fe fc9a 	bl	90007740 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
90008e0c:	68e9      	ldr	r1, [r5, #12]
90008e0e:	f106 001c 	add.w	r0, r6, #28
90008e12:	f7fe fbc3 	bl	9000759c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
90008e16:	4641      	mov	r1, r8
90008e18:	f106 0016 	add.w	r0, r6, #22
90008e1c:	f7fe fbbe 	bl	9000759c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
90008e20:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
90008e22:	74b4      	strb	r4, [r6, #18]
					res = sync_fs(fs);					/* Restore it to the directory */
90008e24:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val;
90008e26:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
90008e28:	70fb      	strb	r3, [r7, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
90008e2a:	f7fe ff83 	bl	90007d34 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
90008e2e:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
90008e30:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
90008e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
90008e36:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
90008e38:	4620      	mov	r0, r4
90008e3a:	b002      	add	sp, #8
90008e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
90008e40:	2401      	movs	r4, #1
90008e42:	e7f9      	b.n	90008e38 <f_sync+0x8a>

90008e44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
90008e44:	b513      	push	{r0, r1, r4, lr}
90008e46:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
90008e48:	f7ff ffb1 	bl	90008dae <f_sync>
	if (res == FR_OK)
90008e4c:	b948      	cbnz	r0, 90008e62 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
90008e4e:	a901      	add	r1, sp, #4
90008e50:	4620      	mov	r0, r4
90008e52:	f7fe fcac 	bl	900077ae <validate>
		if (res == FR_OK) {
90008e56:	b920      	cbnz	r0, 90008e62 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
90008e58:	6920      	ldr	r0, [r4, #16]
90008e5a:	f7fe fc29 	bl	900076b0 <dec_lock>
			if (res == FR_OK)
90008e5e:	b900      	cbnz	r0, 90008e62 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
90008e60:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
90008e62:	b002      	add	sp, #8
90008e64:	bd10      	pop	{r4, pc}

90008e66 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
90008e66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008e6a:	b085      	sub	sp, #20
90008e6c:	460d      	mov	r5, r1
90008e6e:	4604      	mov	r4, r0
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
90008e70:	a903      	add	r1, sp, #12
90008e72:	f7fe fc9c 	bl	900077ae <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
90008e76:	4606      	mov	r6, r0
90008e78:	b9e8      	cbnz	r0, 90008eb6 <f_lseek+0x50>
90008e7a:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
90008e7c:	b9de      	cbnz	r6, 90008eb6 <f_lseek+0x50>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
90008e7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008e80:	2b00      	cmp	r3, #0
90008e82:	d07c      	beq.n	90008f7e <f_lseek+0x118>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
90008e84:	1c6a      	adds	r2, r5, #1
90008e86:	d139      	bne.n	90008efc <f_lseek+0x96>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
90008e88:	461d      	mov	r5, r3
			cl = fp->obj.sclust;		/* Origin of the chain */
90008e8a:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
90008e8e:	2702      	movs	r7, #2
90008e90:	f855 bb04 	ldr.w	fp, [r5], #4
			if (cl) {
90008e94:	f1b8 0f00 	cmp.w	r8, #0
90008e98:	d028      	beq.n	90008eec <f_lseek+0x86>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
90008e9a:	4640      	mov	r0, r8
90008e9c:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
90008ea0:	4601      	mov	r1, r0
90008ea2:	4681      	mov	r9, r0
90008ea4:	6820      	ldr	r0, [r4, #0]
						pcl = cl; ncl++;
90008ea6:	f10a 0a01 	add.w	sl, sl, #1
						cl = get_fat(&fp->obj, cl);
90008eaa:	f7fe ff96 	bl	90007dda <get_fat.isra.0>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
90008eae:	2801      	cmp	r0, #1
90008eb0:	d807      	bhi.n	90008ec2 <f_lseek+0x5c>
90008eb2:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90008eb4:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
90008eb6:	4630      	mov	r0, r6
90008eb8:	b005      	add	sp, #20
90008eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90008ebe:	4680      	mov	r8, r0
90008ec0:	e7eb      	b.n	90008e9a <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90008ec2:	1c43      	adds	r3, r0, #1
90008ec4:	d101      	bne.n	90008eca <f_lseek+0x64>
90008ec6:	2601      	movs	r6, #1
90008ec8:	e7f4      	b.n	90008eb4 <f_lseek+0x4e>
					} while (cl == pcl + 1);
90008eca:	f109 0901 	add.w	r9, r9, #1
90008ece:	4581      	cmp	r9, r0
90008ed0:	d0e6      	beq.n	90008ea0 <f_lseek+0x3a>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
90008ed2:	3702      	adds	r7, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
90008ed4:	45bb      	cmp	fp, r7
						*tbl++ = ncl; *tbl++ = tcl;
90008ed6:	bf21      	itttt	cs
90008ed8:	462b      	movcs	r3, r5
90008eda:	f843 ab08 	strcs.w	sl, [r3], #8
90008ede:	f8c5 8004 	strcs.w	r8, [r5, #4]
90008ee2:	461d      	movcs	r5, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
90008ee4:	9b03      	ldr	r3, [sp, #12]
90008ee6:	699b      	ldr	r3, [r3, #24]
90008ee8:	4283      	cmp	r3, r0
90008eea:	d8e8      	bhi.n	90008ebe <f_lseek+0x58>
			*fp->cltbl = ulen;	/* Number of items used */
90008eec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
90008eee:	455f      	cmp	r7, fp
			*fp->cltbl = ulen;	/* Number of items used */
90008ef0:	601f      	str	r7, [r3, #0]
			if (ulen <= tlen) {
90008ef2:	f200 80d3 	bhi.w	9000909c <f_lseek+0x236>
				*tbl = 0;		/* Terminate table */
90008ef6:	2300      	movs	r3, #0
90008ef8:	602b      	str	r3, [r5, #0]
90008efa:	e7dc      	b.n	90008eb6 <f_lseek+0x50>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
90008efc:	68e7      	ldr	r7, [r4, #12]
90008efe:	42af      	cmp	r7, r5
90008f00:	bf28      	it	cs
90008f02:	462f      	movcs	r7, r5
			fp->fptr = ofs;				/* Set file pointer */
90008f04:	61a7      	str	r7, [r4, #24]
			if (ofs) {
90008f06:	2f00      	cmp	r7, #0
90008f08:	d0d5      	beq.n	90008eb6 <f_lseek+0x50>
				fp->clust = clmt_clust(fp, ofs - 1);
90008f0a:	f107 39ff 	add.w	r9, r7, #4294967295
90008f0e:	4620      	mov	r0, r4
90008f10:	4649      	mov	r1, r9
90008f12:	f7fe fc04 	bl	9000771e <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
90008f16:	f8dd 800c 	ldr.w	r8, [sp, #12]
				fp->clust = clmt_clust(fp, ofs - 1);
90008f1a:	4601      	mov	r1, r0
90008f1c:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
90008f1e:	4640      	mov	r0, r8
90008f20:	f7fe fbf2 	bl	90007708 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
90008f24:	2800      	cmp	r0, #0
90008f26:	d0c4      	beq.n	90008eb2 <f_lseek+0x4c>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90008f28:	f3c7 0708 	ubfx	r7, r7, #0, #9
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
90008f2c:	f8b8 500a 	ldrh.w	r5, [r8, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90008f30:	2f00      	cmp	r7, #0
90008f32:	d0c0      	beq.n	90008eb6 <f_lseek+0x50>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
90008f34:	3d01      	subs	r5, #1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90008f36:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
90008f38:	ea05 2559 	and.w	r5, r5, r9, lsr #9
90008f3c:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90008f3e:	42aa      	cmp	r2, r5
90008f40:	d0b9      	beq.n	90008eb6 <f_lseek+0x50>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
90008f42:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008f46:	f104 0130 	add.w	r1, r4, #48	; 0x30
90008f4a:	f898 0001 	ldrb.w	r0, [r8, #1]
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
90008f4e:	2b00      	cmp	r3, #0
90008f50:	da0a      	bge.n	90008f68 <f_lseek+0x102>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008f52:	2301      	movs	r3, #1
90008f54:	9101      	str	r1, [sp, #4]
90008f56:	f7fe fb01 	bl	9000755c <disk_write>
90008f5a:	2800      	cmp	r0, #0
90008f5c:	d1b3      	bne.n	90008ec6 <f_lseek+0x60>
						fp->flag &= (BYTE)~FA_DIRTY;
90008f5e:	7d23      	ldrb	r3, [r4, #20]
90008f60:	9901      	ldr	r1, [sp, #4]
90008f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90008f66:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
90008f68:	2301      	movs	r3, #1
90008f6a:	462a      	mov	r2, r5
90008f6c:	f898 0001 	ldrb.w	r0, [r8, #1]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
90008f70:	f7fe fae6 	bl	90007540 <disk_read>
90008f74:	4606      	mov	r6, r0
90008f76:	2800      	cmp	r0, #0
90008f78:	d1a5      	bne.n	90008ec6 <f_lseek+0x60>
			fp->sect = nsect;
90008f7a:	6225      	str	r5, [r4, #32]
90008f7c:	e79b      	b.n	90008eb6 <f_lseek+0x50>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
90008f7e:	68e3      	ldr	r3, [r4, #12]
90008f80:	42ab      	cmp	r3, r5
90008f82:	d204      	bcs.n	90008f8e <f_lseek+0x128>
90008f84:	7d22      	ldrb	r2, [r4, #20]
90008f86:	f012 0f02 	tst.w	r2, #2
90008f8a:	bf08      	it	eq
90008f8c:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
90008f8e:	2200      	movs	r2, #0
		ifptr = fp->fptr;
90008f90:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
90008f92:	61a2      	str	r2, [r4, #24]
		if (ofs) {
90008f94:	bb55      	cbnz	r5, 90008fec <f_lseek+0x186>
		fp->fptr = nsect = 0;
90008f96:	2500      	movs	r5, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
90008f98:	68e2      	ldr	r2, [r4, #12]
90008f9a:	69a3      	ldr	r3, [r4, #24]
90008f9c:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
90008f9e:	bf84      	itt	hi
90008fa0:	7d22      	ldrbhi	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
90008fa2:	60e3      	strhi	r3, [r4, #12]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
90008fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
90008fa8:	bf84      	itt	hi
90008faa:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
90008fae:	7522      	strbhi	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
90008fb0:	2b00      	cmp	r3, #0
90008fb2:	d080      	beq.n	90008eb6 <f_lseek+0x50>
90008fb4:	6a22      	ldr	r2, [r4, #32]
90008fb6:	42aa      	cmp	r2, r5
90008fb8:	f43f af7d 	beq.w	90008eb6 <f_lseek+0x50>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
90008fbc:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008fc0:	f104 0130 	add.w	r1, r4, #48	; 0x30
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
90008fc4:	9e03      	ldr	r6, [sp, #12]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
90008fc6:	2b00      	cmp	r3, #0
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008fc8:	7870      	ldrb	r0, [r6, #1]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
90008fca:	da0b      	bge.n	90008fe4 <f_lseek+0x17e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008fcc:	2301      	movs	r3, #1
90008fce:	9101      	str	r1, [sp, #4]
90008fd0:	f7fe fac4 	bl	9000755c <disk_write>
90008fd4:	2800      	cmp	r0, #0
90008fd6:	f47f af76 	bne.w	90008ec6 <f_lseek+0x60>
				fp->flag &= (BYTE)~FA_DIRTY;
90008fda:	7d23      	ldrb	r3, [r4, #20]
90008fdc:	9901      	ldr	r1, [sp, #4]
90008fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90008fe2:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
90008fe4:	2301      	movs	r3, #1
90008fe6:	462a      	mov	r2, r5
90008fe8:	7870      	ldrb	r0, [r6, #1]
90008fea:	e7c1      	b.n	90008f70 <f_lseek+0x10a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
90008fec:	9f03      	ldr	r7, [sp, #12]
90008fee:	f8b7 800a 	ldrh.w	r8, [r7, #10]
90008ff2:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
90008ff6:	b313      	cbz	r3, 9000903e <f_lseek+0x1d8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
90008ff8:	3b01      	subs	r3, #1
90008ffa:	1e6a      	subs	r2, r5, #1
90008ffc:	fbb3 f1f8 	udiv	r1, r3, r8
90009000:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
90009004:	428a      	cmp	r2, r1
90009006:	d31a      	bcc.n	9000903e <f_lseek+0x1d8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
90009008:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
9000900c:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
9000900e:	4013      	ands	r3, r2
				ofs -= fp->fptr;
90009010:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
90009012:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
90009014:	2900      	cmp	r1, #0
90009016:	d0be      	beq.n	90008f96 <f_lseek+0x130>
				while (ofs > bcs) {						/* Cluster following loop */
90009018:	4545      	cmp	r5, r8
					ofs -= bcs; fp->fptr += bcs;
9000901a:	69a3      	ldr	r3, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
9000901c:	d81e      	bhi.n	9000905c <f_lseek+0x1f6>
				fp->fptr += ofs;
9000901e:	69a3      	ldr	r3, [r4, #24]
90009020:	442b      	add	r3, r5
90009022:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
90009024:	f3c5 0308 	ubfx	r3, r5, #0, #9
90009028:	2b00      	cmp	r3, #0
9000902a:	d0b4      	beq.n	90008f96 <f_lseek+0x130>
					nsect = clust2sect(fs, clst);	/* Current sector */
9000902c:	4638      	mov	r0, r7
9000902e:	f7fe fb6b 	bl	90007708 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
90009032:	2800      	cmp	r0, #0
90009034:	f43f af3d 	beq.w	90008eb2 <f_lseek+0x4c>
					nsect += (DWORD)(ofs / SS(fs));
90009038:	eb00 2555 	add.w	r5, r0, r5, lsr #9
9000903c:	e7ac      	b.n	90008f98 <f_lseek+0x132>
				clst = fp->obj.sclust;					/* start from the first cluster */
9000903e:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
90009040:	b951      	cbnz	r1, 90009058 <f_lseek+0x1f2>
					clst = create_chain(&fp->obj, 0);
90009042:	4620      	mov	r0, r4
90009044:	f7fe ff57 	bl	90007ef6 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
90009048:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
9000904a:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
9000904c:	f43f af31 	beq.w	90008eb2 <f_lseek+0x4c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90009050:	1c48      	adds	r0, r1, #1
90009052:	f43f af38 	beq.w	90008ec6 <f_lseek+0x60>
					fp->obj.sclust = clst;
90009056:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
90009058:	61e1      	str	r1, [r4, #28]
9000905a:	e7db      	b.n	90009014 <f_lseek+0x1ae>
					ofs -= bcs; fp->fptr += bcs;
9000905c:	4443      	add	r3, r8
9000905e:	eba5 0908 	sub.w	r9, r5, r8
90009062:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
90009064:	7d23      	ldrb	r3, [r4, #20]
90009066:	079a      	lsls	r2, r3, #30
90009068:	d506      	bpl.n	90009078 <f_lseek+0x212>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
9000906a:	4620      	mov	r0, r4
9000906c:	f7fe ff43 	bl	90007ef6 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
90009070:	4605      	mov	r5, r0
90009072:	b928      	cbnz	r0, 90009080 <f_lseek+0x21a>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
90009074:	4601      	mov	r1, r0
90009076:	e7d2      	b.n	9000901e <f_lseek+0x1b8>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
90009078:	6820      	ldr	r0, [r4, #0]
9000907a:	f7fe feae 	bl	90007dda <get_fat.isra.0>
9000907e:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90009080:	1c6b      	adds	r3, r5, #1
90009082:	f43f af20 	beq.w	90008ec6 <f_lseek+0x60>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
90009086:	2d01      	cmp	r5, #1
90009088:	f67f af13 	bls.w	90008eb2 <f_lseek+0x4c>
9000908c:	69bb      	ldr	r3, [r7, #24]
9000908e:	42ab      	cmp	r3, r5
90009090:	f67f af0f 	bls.w	90008eb2 <f_lseek+0x4c>
					fp->clust = clst;
90009094:	4629      	mov	r1, r5
90009096:	61e5      	str	r5, [r4, #28]
					ofs -= bcs; fp->fptr += bcs;
90009098:	464d      	mov	r5, r9
9000909a:	e7bd      	b.n	90009018 <f_lseek+0x1b2>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
9000909c:	2611      	movs	r6, #17
9000909e:	e70a      	b.n	90008eb6 <f_lseek+0x50>

900090a0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
900090a0:	b5f0      	push	{r4, r5, r6, r7, lr}
900090a2:	b085      	sub	sp, #20
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
900090a4:	4605      	mov	r5, r0
{
900090a6:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
900090a8:	2800      	cmp	r0, #0
900090aa:	d046      	beq.n	9000913a <f_opendir+0x9a>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
900090ac:	2200      	movs	r2, #0
900090ae:	a903      	add	r1, sp, #12
900090b0:	a801      	add	r0, sp, #4
900090b2:	f7fe fc95 	bl	900079e0 <find_volume>
	if (res == FR_OK) {
900090b6:	4604      	mov	r4, r0
900090b8:	2800      	cmp	r0, #0
900090ba:	d133      	bne.n	90009124 <f_opendir+0x84>
		obj->fs = fs;
900090bc:	9f03      	ldr	r7, [sp, #12]
		INIT_NAMBUF(fs);
900090be:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
900090c2:	602f      	str	r7, [r5, #0]
		INIT_NAMBUF(fs);
900090c4:	f000 f8c9 	bl	9000925a <ff_memalloc>
900090c8:	4606      	mov	r6, r0
900090ca:	2800      	cmp	r0, #0
900090cc:	d037      	beq.n	9000913e <f_opendir+0x9e>
900090ce:	60f8      	str	r0, [r7, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
900090d0:	4628      	mov	r0, r5
900090d2:	9901      	ldr	r1, [sp, #4]
900090d4:	f7ff fa86 	bl	900085e4 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
900090d8:	4604      	mov	r4, r0
900090da:	b9e8      	cbnz	r0, 90009118 <f_opendir+0x78>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
900090dc:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
900090e0:	2b00      	cmp	r3, #0
900090e2:	db07      	blt.n	900090f4 <f_opendir+0x54>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
900090e4:	79ab      	ldrb	r3, [r5, #6]
900090e6:	06db      	lsls	r3, r3, #27
900090e8:	d523      	bpl.n	90009132 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
900090ea:	7838      	ldrb	r0, [r7, #0]
900090ec:	6a29      	ldr	r1, [r5, #32]
900090ee:	f7fe fe6c 	bl	90007dca <ld_clust.isra.0>
900090f2:	60a8      	str	r0, [r5, #8]
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
900090f4:	88fb      	ldrh	r3, [r7, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
900090f6:	2100      	movs	r1, #0
900090f8:	4628      	mov	r0, r5
				obj->id = fs->id;
900090fa:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
900090fc:	f7fe ff53 	bl	90007fa6 <dir_sdi>
#if _FS_LOCK != 0
				if (res == FR_OK) {
90009100:	4604      	mov	r4, r0
90009102:	b948      	cbnz	r0, 90009118 <f_opendir+0x78>
					if (obj->sclust) {
90009104:	68ab      	ldr	r3, [r5, #8]
90009106:	b193      	cbz	r3, 9000912e <f_opendir+0x8e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
90009108:	4601      	mov	r1, r0
9000910a:	4628      	mov	r0, r5
9000910c:	f7fe fa8e 	bl	9000762c <inc_lock>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
90009110:	2800      	cmp	r0, #0
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
90009112:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
90009114:	bf08      	it	eq
90009116:	2412      	moveq	r4, #18
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
90009118:	4630      	mov	r0, r6
9000911a:	f000 f8a0 	bl	9000925e <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
9000911e:	2c04      	cmp	r4, #4
90009120:	d009      	beq.n	90009136 <f_opendir+0x96>
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
90009122:	b10c      	cbz	r4, 90009128 <f_opendir+0x88>
90009124:	2300      	movs	r3, #0
90009126:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
90009128:	4620      	mov	r0, r4
9000912a:	b005      	add	sp, #20
9000912c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
9000912e:	6128      	str	r0, [r5, #16]
90009130:	e7f2      	b.n	90009118 <f_opendir+0x78>
					res = FR_NO_PATH;
90009132:	2405      	movs	r4, #5
90009134:	e7f0      	b.n	90009118 <f_opendir+0x78>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
90009136:	2405      	movs	r4, #5
90009138:	e7f4      	b.n	90009124 <f_opendir+0x84>
	if (!dp) return FR_INVALID_OBJECT;
9000913a:	2409      	movs	r4, #9
9000913c:	e7f4      	b.n	90009128 <f_opendir+0x88>
		INIT_NAMBUF(fs);
9000913e:	2411      	movs	r4, #17
90009140:	e7f2      	b.n	90009128 <f_opendir+0x88>

90009142 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
90009142:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
90009144:	a901      	add	r1, sp, #4
{
90009146:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
90009148:	f7fe fb31 	bl	900077ae <validate>
	if (res == FR_OK) {
9000914c:	4604      	mov	r4, r0
9000914e:	b918      	cbnz	r0, 90009158 <f_closedir+0x16>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
90009150:	6928      	ldr	r0, [r5, #16]
90009152:	b920      	cbnz	r0, 9000915e <f_closedir+0x1c>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
90009154:	2300      	movs	r3, #0
90009156:	602b      	str	r3, [r5, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
90009158:	4620      	mov	r0, r4
9000915a:	b003      	add	sp, #12
9000915c:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
9000915e:	f7fe faa7 	bl	900076b0 <dec_lock>
		if (res == FR_OK)
90009162:	2800      	cmp	r0, #0
90009164:	d0f6      	beq.n	90009154 <f_closedir+0x12>
90009166:	4604      	mov	r4, r0
90009168:	e7f6      	b.n	90009158 <f_closedir+0x16>

9000916a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
9000916a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
9000916e:	460f      	mov	r7, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
90009170:	a901      	add	r1, sp, #4
{
90009172:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
90009174:	f7fe fb1b 	bl	900077ae <validate>
	if (res == FR_OK) {
90009178:	4604      	mov	r4, r0
9000917a:	bb30      	cbnz	r0, 900091ca <f_readdir+0x60>
		if (!fno) {
9000917c:	b937      	cbnz	r7, 9000918c <f_readdir+0x22>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
9000917e:	4639      	mov	r1, r7
90009180:	4628      	mov	r0, r5
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
90009182:	b002      	add	sp, #8
90009184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
90009188:	f7fe bf0d 	b.w	90007fa6 <dir_sdi>
			INIT_NAMBUF(fs);
9000918c:	f44f 7000 	mov.w	r0, #512	; 0x200
90009190:	f000 f863 	bl	9000925a <ff_memalloc>
90009194:	4606      	mov	r6, r0
90009196:	b1e0      	cbz	r0, 900091d2 <f_readdir+0x68>
90009198:	9b01      	ldr	r3, [sp, #4]
9000919a:	60d8      	str	r0, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
9000919c:	4628      	mov	r0, r5
9000919e:	f7ff f9a7 	bl	900084f0 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
900091a2:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
900091a6:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
900091a8:	d10c      	bne.n	900091c4 <f_readdir+0x5a>
				get_fileinfo(dp, fno);		/* Get the object information */
900091aa:	4639      	mov	r1, r7
900091ac:	4628      	mov	r0, r5
900091ae:	f7fe fb18 	bl	900077e2 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
900091b2:	4641      	mov	r1, r8
900091b4:	4628      	mov	r0, r5
900091b6:	f7fe ff36 	bl	90008026 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
900091ba:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
900091bc:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
900091be:	bf14      	ite	ne
900091c0:	4604      	movne	r4, r0
900091c2:	2400      	moveq	r4, #0
			FREE_NAMBUF();
900091c4:	4630      	mov	r0, r6
900091c6:	f000 f84a 	bl	9000925e <ff_memfree>
}
900091ca:	4620      	mov	r0, r4
900091cc:	b002      	add	sp, #8
900091ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			INIT_NAMBUF(fs);
900091d2:	2411      	movs	r4, #17
900091d4:	e7f9      	b.n	900091ca <f_readdir+0x60>
	...

900091d8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
900091d8:	4b0f      	ldr	r3, [pc, #60]	; (90009218 <FATFS_LinkDriverEx+0x40>)
{
900091da:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
900091dc:	7b9c      	ldrb	r4, [r3, #14]
900091de:	2c01      	cmp	r4, #1
900091e0:	d817      	bhi.n	90009212 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
900091e2:	7b9d      	ldrb	r5, [r3, #14]
900091e4:	2400      	movs	r4, #0
900091e6:	b2ed      	uxtb	r5, r5
900091e8:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
900091ea:	7b9d      	ldrb	r5, [r3, #14]
900091ec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
900091f0:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
900091f2:	7b98      	ldrb	r0, [r3, #14]
900091f4:	4418      	add	r0, r3
900091f6:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
900091f8:	7b9a      	ldrb	r2, [r3, #14]
900091fa:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
900091fc:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
900091fe:	b2c0      	uxtb	r0, r0
90009200:	7398      	strb	r0, [r3, #14]
    path[1] = ':';
90009202:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
90009204:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
90009206:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
90009208:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
9000920a:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
9000920c:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
9000920e:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
90009210:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
90009212:	2001      	movs	r0, #1
90009214:	e7fc      	b.n	90009210 <FATFS_LinkDriverEx+0x38>
90009216:	bf00      	nop
90009218:	20000780 	.word	0x20000780

9000921c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
9000921c:	2200      	movs	r2, #0
9000921e:	f7ff bfdb 	b.w	900091d8 <FATFS_LinkDriverEx>
	...

90009224 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
90009224:	4a0a      	ldr	r2, [pc, #40]	; (90009250 <FATFS_UnLinkDriverEx+0x2c>)
90009226:	7b93      	ldrb	r3, [r2, #14]
90009228:	b17b      	cbz	r3, 9000924a <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
9000922a:	7803      	ldrb	r3, [r0, #0]
9000922c:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
9000922e:	b2db      	uxtb	r3, r3
90009230:	eb02 0183 	add.w	r1, r2, r3, lsl #2
90009234:	6848      	ldr	r0, [r1, #4]
90009236:	b140      	cbz	r0, 9000924a <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
90009238:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
9000923a:	4413      	add	r3, r2
9000923c:	7318      	strb	r0, [r3, #12]
      disk.nbr--;
9000923e:	7b93      	ldrb	r3, [r2, #14]
      disk.drv[DiskNum] = 0;
90009240:	6048      	str	r0, [r1, #4]
      disk.nbr--;
90009242:	3b01      	subs	r3, #1
90009244:	b2db      	uxtb	r3, r3
90009246:	7393      	strb	r3, [r2, #14]
      ret = 0;
90009248:	4770      	bx	lr
  uint8_t ret = 1;
9000924a:	2001      	movs	r0, #1
    }
  }

  return ret;
}
9000924c:	4770      	bx	lr
9000924e:	bf00      	nop
90009250:	20000780 	.word	0x20000780

90009254 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
90009254:	2100      	movs	r1, #0
90009256:	f7ff bfe5 	b.w	90009224 <FATFS_UnLinkDriverEx>

9000925a <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
9000925a:	f001 bf39 	b.w	9000b0d0 <malloc>

9000925e <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
9000925e:	f001 bf3f 	b.w	9000b0e0 <free>
	...

90009264 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
90009264:	287f      	cmp	r0, #127	; 0x7f
{
90009266:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
90009268:	d906      	bls.n	90009278 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
9000926a:	b131      	cbz	r1, 9000927a <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
9000926c:	28ff      	cmp	r0, #255	; 0xff
9000926e:	d811      	bhi.n	90009294 <ff_convert+0x30>
90009270:	3880      	subs	r0, #128	; 0x80
90009272:	4b09      	ldr	r3, [pc, #36]	; (90009298 <ff_convert+0x34>)
90009274:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
90009278:	bd10      	pop	{r4, pc}
9000927a:	4a07      	ldr	r2, [pc, #28]	; (90009298 <ff_convert+0x34>)
				if (chr == Tbl[c]) break;
9000927c:	f832 4b02 	ldrh.w	r4, [r2], #2
90009280:	b28b      	uxth	r3, r1
90009282:	4284      	cmp	r4, r0
90009284:	d003      	beq.n	9000928e <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
90009286:	3101      	adds	r1, #1
90009288:	2980      	cmp	r1, #128	; 0x80
9000928a:	d1f7      	bne.n	9000927c <ff_convert+0x18>
9000928c:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
9000928e:	3380      	adds	r3, #128	; 0x80
90009290:	b2d8      	uxtb	r0, r3
90009292:	e7f1      	b.n	90009278 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
90009294:	2000      	movs	r0, #0
90009296:	e7ef      	b.n	90009278 <ff_convert+0x14>
90009298:	90010292 	.word	0x90010292

9000929c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
9000929c:	4b1f      	ldr	r3, [pc, #124]	; (9000931c <ff_wtoupper+0x80>)
9000929e:	f1a3 02bc 	sub.w	r2, r3, #188	; 0xbc
900092a2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
900092a6:	bf28      	it	cs
900092a8:	4613      	movcs	r3, r2
{
900092aa:	b570      	push	{r4, r5, r6, lr}
900092ac:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
900092ae:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
900092b2:	460a      	mov	r2, r1
900092b4:	b1ab      	cbz	r3, 900092e2 <ff_wtoupper+0x46>
900092b6:	4298      	cmp	r0, r3
900092b8:	d313      	bcc.n	900092e2 <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
900092ba:	f831 4c02 	ldrh.w	r4, [r1, #-2]
900092be:	0a25      	lsrs	r5, r4, #8
900092c0:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
900092c2:	fa53 f484 	uxtab	r4, r3, r4
900092c6:	42a0      	cmp	r0, r4
900092c8:	da21      	bge.n	9000930e <ff_wtoupper+0x72>
			switch (cmd) {
900092ca:	2d08      	cmp	r5, #8
900092cc:	d809      	bhi.n	900092e2 <ff_wtoupper+0x46>
900092ce:	e8df f005 	tbb	[pc, r5]
900092d2:	0905      	.short	0x0905
900092d4:	1513110f 	.word	0x1513110f
900092d8:	1917      	.short	0x1917
900092da:	1b          	.byte	0x1b
900092db:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
900092dc:	1ac0      	subs	r0, r0, r3
900092de:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
900092e2:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
900092e4:	1ac3      	subs	r3, r0, r3
900092e6:	f003 0301 	and.w	r3, r3, #1
900092ea:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
900092ec:	b280      	uxth	r0, r0
900092ee:	e7f8      	b.n	900092e2 <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
900092f0:	3810      	subs	r0, #16
900092f2:	e7fb      	b.n	900092ec <ff_wtoupper+0x50>
			case 3:	chr -= 32; break;				/* Shift -32 */
900092f4:	3820      	subs	r0, #32
900092f6:	e7f9      	b.n	900092ec <ff_wtoupper+0x50>
			case 4:	chr -= 48; break;				/* Shift -48 */
900092f8:	3830      	subs	r0, #48	; 0x30
900092fa:	e7f7      	b.n	900092ec <ff_wtoupper+0x50>
			case 5:	chr -= 26; break;				/* Shift -26 */
900092fc:	381a      	subs	r0, #26
900092fe:	e7f5      	b.n	900092ec <ff_wtoupper+0x50>
			case 6:	chr += 8; break;				/* Shift +8 */
90009300:	3008      	adds	r0, #8
90009302:	e7f3      	b.n	900092ec <ff_wtoupper+0x50>
			case 7: chr -= 80; break;				/* Shift -80 */
90009304:	3850      	subs	r0, #80	; 0x50
90009306:	e7f1      	b.n	900092ec <ff_wtoupper+0x50>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
90009308:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
9000930c:	e7ee      	b.n	900092ec <ff_wtoupper+0x50>
		if (!cmd) p += nc;
9000930e:	3104      	adds	r1, #4
90009310:	2d00      	cmp	r5, #0
90009312:	d1cc      	bne.n	900092ae <ff_wtoupper+0x12>
90009314:	eb02 0346 	add.w	r3, r2, r6, lsl #1
90009318:	e7c8      	b.n	900092ac <ff_wtoupper+0x10>
9000931a:	bf00      	nop
9000931c:	9001044e 	.word	0x9001044e

90009320 <AUDIO_StorageParse>:
  * @brief  Copies disk content in the explorer list.
  * @param  None
  * @retval Operation result
  */
FRESULT AUDIO_StorageParse(void)
{
90009320:	b5f0      	push	{r4, r5, r6, r7, lr}
90009322:	b0d5      	sub	sp, #340	; 0x154
  FRESULT res = FR_OK; //Resultado de la operacion
  FILINFO fno; // Informacion del fichero
  DIR dir;
  char *fn;
  
  res = f_opendir(&dir, USBDISKPath);
90009324:	491f      	ldr	r1, [pc, #124]	; (900093a4 <AUDIO_StorageParse+0x84>)
  FileList.ptr = 0;
90009326:	4c20      	ldr	r4, [pc, #128]	; (900093a8 <AUDIO_StorageParse+0x88>)
  res = f_opendir(&dir, USBDISKPath);
90009328:	a801      	add	r0, sp, #4
9000932a:	f7ff feb9 	bl	900090a0 <f_opendir>
  FileList.ptr = 0;
9000932e:	2300      	movs	r3, #0
  
  if(res == FR_OK)
90009330:	4605      	mov	r5, r0
  FileList.ptr = 0;
90009332:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
  if(res == FR_OK)
90009336:	b920      	cbnz	r0, 90009342 <AUDIO_StorageParse+0x22>
  {
    while(USBH_MSC_IsReady(&hUSBHost))
90009338:	4f1c      	ldr	r7, [pc, #112]	; (900093ac <AUDIO_StorageParse+0x8c>)
9000933a:	4638      	mov	r0, r7
9000933c:	f7fc ff0d 	bl	9000615a <USBH_MSC_IsReady>
90009340:	b948      	cbnz	r0, 90009356 <AUDIO_StorageParse+0x36>
          FileList.ptr++;
        }
      }   
    }
  }
  NumObs = FileList.ptr;
90009342:	f8b4 33d8 	ldrh.w	r3, [r4, #984]	; 0x3d8
  f_closedir(&dir);
90009346:	a801      	add	r0, sp, #4
  NumObs = FileList.ptr;
90009348:	f8a4 33da 	strh.w	r3, [r4, #986]	; 0x3da
  f_closedir(&dir);
9000934c:	f7ff fef9 	bl	90009142 <f_closedir>
  return res;
}
90009350:	4628      	mov	r0, r5
90009352:	b055      	add	sp, #340	; 0x154
90009354:	bdf0      	pop	{r4, r5, r6, r7, pc}
      res = f_readdir(&dir, &fno);
90009356:	a90e      	add	r1, sp, #56	; 0x38
90009358:	a801      	add	r0, sp, #4
9000935a:	f7ff ff06 	bl	9000916a <f_readdir>
      if(res != FR_OK || fno.fname[0] == 0)
9000935e:	b9f8      	cbnz	r0, 900093a0 <AUDIO_StorageParse+0x80>
90009360:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
90009364:	2b00      	cmp	r3, #0
90009366:	d0ec      	beq.n	90009342 <AUDIO_StorageParse+0x22>
      if(fno.fname[0] == '.')
90009368:	2b2e      	cmp	r3, #46	; 0x2e
9000936a:	d0e6      	beq.n	9000933a <AUDIO_StorageParse+0x1a>
      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
9000936c:	f8b4 03d8 	ldrh.w	r0, [r4, #984]	; 0x3d8
90009370:	2817      	cmp	r0, #23
90009372:	d8e2      	bhi.n	9000933a <AUDIO_StorageParse+0x1a>
        if((fno.fattrib & AM_DIR) == 0)
90009374:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
90009378:	06db      	lsls	r3, r3, #27
9000937a:	d4de      	bmi.n	9000933a <AUDIO_StorageParse+0x1a>
          strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
9000937c:	2629      	movs	r6, #41	; 0x29
9000937e:	2228      	movs	r2, #40	; 0x28
90009380:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
90009384:	fb06 4000 	mla	r0, r6, r0, r4
90009388:	3001      	adds	r0, #1
9000938a:	f002 f995 	bl	9000b6b8 <strncpy>
          FileList.file[FileList.ptr].type = FILETYPE_FILE;
9000938e:	f8b4 33d8 	ldrh.w	r3, [r4, #984]	; 0x3d8
90009392:	2201      	movs	r2, #1
90009394:	435e      	muls	r6, r3
          FileList.ptr++;
90009396:	4413      	add	r3, r2
          FileList.file[FileList.ptr].type = FILETYPE_FILE;
90009398:	55a2      	strb	r2, [r4, r6]
          FileList.ptr++;
9000939a:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
9000939e:	e7cc      	b.n	9000933a <AUDIO_StorageParse+0x1a>
900093a0:	4605      	mov	r5, r0
900093a2:	e7ce      	b.n	90009342 <AUDIO_StorageParse+0x22>
900093a4:	20000b6d 	.word	0x20000b6d
900093a8:	20000790 	.word	0x20000790
900093ac:	20000da8 	.word	0x20000da8

900093b0 <AUDIO_GetWavObjectNumber>:
  * @retval None
  */
uint16_t AUDIO_GetWavObjectNumber(void)
{
  return NumObs;
}
900093b0:	4b01      	ldr	r3, [pc, #4]	; (900093b8 <AUDIO_GetWavObjectNumber+0x8>)
900093b2:	f8b3 03da 	ldrh.w	r0, [r3, #986]	; 0x3da
900093b6:	4770      	bx	lr
900093b8:	20000790 	.word	0x20000790

900093bc <USBH_UserProcess>:
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{
  switch(id)
900093bc:	2904      	cmp	r1, #4
{
900093be:	460b      	mov	r3, r1
900093c0:	b510      	push	{r4, lr}
  switch(id)
900093c2:	d042      	beq.n	9000944a <USBH_UserProcess+0x8e>
900093c4:	2905      	cmp	r1, #5
900093c6:	d01a      	beq.n	900093fe <USBH_UserProcess+0x42>
900093c8:	2902      	cmp	r1, #2
900093ca:	d13d      	bne.n	90009448 <USBH_UserProcess+0x8c>
      LCD_ErrLog("ERROR : Cannot UnLink FatFS Driver! \n");
    }
    break;

  case HOST_USER_CLASS_ACTIVE:
    appli_state = APPLICATION_READY;
900093cc:	4c21      	ldr	r4, [pc, #132]	; (90009454 <USBH_UserProcess+0x98>)
    /* Link the USB Host disk I/O driver */
    if (FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
900093ce:	4822      	ldr	r0, [pc, #136]	; (90009458 <USBH_UserProcess+0x9c>)
    appli_state = APPLICATION_READY;
900093d0:	4621      	mov	r1, r4
900093d2:	f801 3b01 	strb.w	r3, [r1], #1
    if (FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
900093d6:	f7ff ff21 	bl	9000921c <FATFS_LinkDriver>
900093da:	4602      	mov	r2, r0
900093dc:	2800      	cmp	r0, #0
900093de:	d133      	bne.n	90009448 <USBH_UserProcess+0x8c>
    {
      if (f_mount(&USBH_FatFs, "", 0) != FR_OK)
900093e0:	491e      	ldr	r1, [pc, #120]	; (9000945c <USBH_UserProcess+0xa0>)
900093e2:	f104 0008 	add.w	r0, r4, #8
900093e6:	f7ff fa2f 	bl	90008848 <f_mount>
900093ea:	2800      	cmp	r0, #0
900093ec:	d02c      	beq.n	90009448 <USBH_UserProcess+0x8c>
      {
        LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
900093ee:	4b1c      	ldr	r3, [pc, #112]	; (90009460 <USBH_UserProcess+0xa4>)
900093f0:	4c1c      	ldr	r4, [pc, #112]	; (90009464 <USBH_UserProcess+0xa8>)
900093f2:	481d      	ldr	r0, [pc, #116]	; (90009468 <USBH_UserProcess+0xac>)
900093f4:	6023      	str	r3, [r4, #0]
900093f6:	f001 ffe9 	bl	9000b3cc <iprintf>
900093fa:	481c      	ldr	r0, [pc, #112]	; (9000946c <USBH_UserProcess+0xb0>)
900093fc:	e01f      	b.n	9000943e <USBH_UserProcess+0x82>
    appli_state = APPLICATION_DISCONNECT;
900093fe:	2203      	movs	r2, #3
90009400:	4b14      	ldr	r3, [pc, #80]	; (90009454 <USBH_UserProcess+0x98>)
    if (f_mount(NULL, "", 0) != FR_OK)
90009402:	4916      	ldr	r1, [pc, #88]	; (9000945c <USBH_UserProcess+0xa0>)
    appli_state = APPLICATION_DISCONNECT;
90009404:	701a      	strb	r2, [r3, #0]
    if (f_mount(NULL, "", 0) != FR_OK)
90009406:	2200      	movs	r2, #0
90009408:	4610      	mov	r0, r2
9000940a:	f7ff fa1d 	bl	90008848 <f_mount>
9000940e:	b158      	cbz	r0, 90009428 <USBH_UserProcess+0x6c>
      LCD_ErrLog("ERROR : Cannot DeInitialize FatFs! \n");
90009410:	4b13      	ldr	r3, [pc, #76]	; (90009460 <USBH_UserProcess+0xa4>)
90009412:	4c14      	ldr	r4, [pc, #80]	; (90009464 <USBH_UserProcess+0xa8>)
90009414:	4814      	ldr	r0, [pc, #80]	; (90009468 <USBH_UserProcess+0xac>)
90009416:	6023      	str	r3, [r4, #0]
90009418:	f001 ffd8 	bl	9000b3cc <iprintf>
9000941c:	4814      	ldr	r0, [pc, #80]	; (90009470 <USBH_UserProcess+0xb4>)
9000941e:	f002 f843 	bl	9000b4a8 <puts>
90009422:	f04f 33ff 	mov.w	r3, #4294967295
90009426:	6023      	str	r3, [r4, #0]
    if (FATFS_UnLinkDriver(USBDISKPath) != 0)
90009428:	4812      	ldr	r0, [pc, #72]	; (90009474 <USBH_UserProcess+0xb8>)
9000942a:	f7ff ff13 	bl	90009254 <FATFS_UnLinkDriver>
9000942e:	b158      	cbz	r0, 90009448 <USBH_UserProcess+0x8c>
      LCD_ErrLog("ERROR : Cannot UnLink FatFS Driver! \n");
90009430:	4b0b      	ldr	r3, [pc, #44]	; (90009460 <USBH_UserProcess+0xa4>)
90009432:	4c0c      	ldr	r4, [pc, #48]	; (90009464 <USBH_UserProcess+0xa8>)
90009434:	480c      	ldr	r0, [pc, #48]	; (90009468 <USBH_UserProcess+0xac>)
90009436:	6023      	str	r3, [r4, #0]
90009438:	f001 ffc8 	bl	9000b3cc <iprintf>
9000943c:	480e      	ldr	r0, [pc, #56]	; (90009478 <USBH_UserProcess+0xbc>)
        LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
9000943e:	f002 f833 	bl	9000b4a8 <puts>
90009442:	f04f 33ff 	mov.w	r3, #4294967295
90009446:	6023      	str	r3, [r4, #0]
    break;
   
  default:
    break; 
  }
}
90009448:	bd10      	pop	{r4, pc}
    appli_state = APPLICATION_START;
9000944a:	4b02      	ldr	r3, [pc, #8]	; (90009454 <USBH_UserProcess+0x98>)
9000944c:	2201      	movs	r2, #1
9000944e:	701a      	strb	r2, [r3, #0]
}
90009450:	e7fa      	b.n	90009448 <USBH_UserProcess+0x8c>
90009452:	bf00      	nop
90009454:	20000b6c 	.word	0x20000b6c
90009458:	90010668 	.word	0x90010668
9000945c:	90010bf1 	.word	0x90010bf1
90009460:	ffff0000 	.word	0xffff0000
90009464:	2000d1dc 	.word	0x2000d1dc
90009468:	900107a0 	.word	0x900107a0
9000946c:	90010c3b 	.word	0x90010c3b
90009470:	90010bf2 	.word	0x90010bf2
90009474:	20000b6d 	.word	0x20000b6d
90009478:	90010c16 	.word	0x90010c16

9000947c <main>:
  SCB->VTOR = QSPI_BASE | VECT_TAB_OFFSET;
9000947c:	4b5a      	ldr	r3, [pc, #360]	; (900095e8 <main+0x16c>)
9000947e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
{
90009482:	b500      	push	{lr}
  SCB->VTOR = QSPI_BASE | VECT_TAB_OFFSET;
90009484:	609a      	str	r2, [r3, #8]
{
90009486:	b0b3      	sub	sp, #204	; 0xcc
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90009488:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000948c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90009490:	2100      	movs	r1, #0
90009492:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90009496:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000949a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
9000949e:	695a      	ldr	r2, [r3, #20]
900094a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
900094a4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900094a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900094aa:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
900094ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900094b2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
900094b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900094ba:	f643 70e0 	movw	r0, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900094be:	f3c2 01c9 	ubfx	r1, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900094c2:	f3c2 324e 	ubfx	r2, r2, #13, #15
900094c6:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900094c8:	ea02 0600 	and.w	r6, r2, r0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900094cc:	460c      	mov	r4, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900094ce:	ea46 7584 	orr.w	r5, r6, r4, lsl #30
      } while (ways-- != 0U);
900094d2:	3c01      	subs	r4, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900094d4:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
900094d8:	d2f9      	bcs.n	900094ce <main+0x52>
    } while(sets-- != 0U);
900094da:	3a20      	subs	r2, #32
900094dc:	f112 0f20 	cmn.w	r2, #32
900094e0:	d1f2      	bne.n	900094c8 <main+0x4c>
900094e2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900094e6:	695a      	ldr	r2, [r3, #20]
900094e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
900094ec:	615a      	str	r2, [r3, #20]
900094ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900094f2:	f3bf 8f6f 	isb	sy
  HAL_Init();
900094f6:	f7f9 f937 	bl	90002768 <HAL_Init>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900094fa:	2601      	movs	r6, #1
900094fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90009500:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;  
90009502:	f04f 0e19 	mov.w	lr, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90009506:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
90009508:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
9000950a:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
9000950e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
90009512:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;  
90009516:	f44f 73c8 	mov.w	r3, #400	; 0x190
9000951a:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 8;
9000951e:	2308      	movs	r3, #8
90009520:	9310      	str	r3, [sp, #64]	; 0x40
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90009522:	f7fa fec5 	bl	900042b0 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
90009526:	b100      	cbz	r0, 9000952a <main+0xae>
  {
    while(1) { ; }
90009528:	e7fe      	b.n	90009528 <main+0xac>
  }

  /* Activate the OverDrive to reach the 200 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
9000952a:	f7fa fe89 	bl	90004240 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
9000952e:	b100      	cbz	r0, 90009532 <main+0xb6>
  {
    while(1) { ; }
90009530:	e7fe      	b.n	90009530 <main+0xb4>
  }

  /* Select PLLSAI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
90009532:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
90009536:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
9000953a:	a811      	add	r0, sp, #68	; 0x44
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
9000953c:	9619      	str	r6, [sp, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
9000953e:	9311      	str	r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
90009540:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
90009544:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
90009546:	2304      	movs	r3, #4
90009548:	e9cd c316 	strd	ip, r3, [sp, #88]	; 0x58
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
9000954c:	f7fb f936 	bl	900047bc <HAL_RCCEx_PeriphCLKConfig>
  if(ret != HAL_OK)
90009550:	b100      	cbz	r0, 90009554 <main+0xd8>
  {
    while(1) { ; }
90009552:	e7fe      	b.n	90009552 <main+0xd6>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
90009554:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90009556:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
9000955a:	9002      	str	r0, [sp, #8]

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
9000955c:	2106      	movs	r1, #6
9000955e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90009560:	e9cd 3500 	strd	r3, r5, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90009564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90009568:	e9cd 2303 	strd	r2, r3, [sp, #12]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
9000956c:	f7fb f888 	bl	90004680 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
90009570:	4605      	mov	r5, r0
90009572:	b100      	cbz	r0, 90009576 <main+0xfa>
  {
    while(1) { ; }
90009574:	e7fe      	b.n	90009574 <main+0xf8>
  BSP_LED_Init(LED1);
90009576:	f7f8 fe0d 	bl	90002194 <BSP_LED_Init>
  BSP_LCD_Init();
9000957a:	f7f8 fcd5 	bl	90001f28 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS); 
9000957e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
90009582:	4630      	mov	r0, r6
90009584:	f7f8 f8e4 	bl	90001750 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
90009588:	4630      	mov	r0, r6
9000958a:	f7f8 f91d 	bl	900017c8 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
9000958e:	f7f8 fc0d 	bl	90001dac <BSP_LCD_DisplayOn>
  LCD_LOG_Init();
90009592:	f001 fd55 	bl	9000b040 <LCD_LOG_Init>
  LCD_UsrLog("USB Host library started.\n"); 
90009596:	4b15      	ldr	r3, [pc, #84]	; (900095ec <main+0x170>)
90009598:	4815      	ldr	r0, [pc, #84]	; (900095f0 <main+0x174>)
9000959a:	601c      	str	r4, [r3, #0]
9000959c:	f001 ff84 	bl	9000b4a8 <puts>
  USBH_UsrLog("Starting Audio Demo");
900095a0:	4814      	ldr	r0, [pc, #80]	; (900095f4 <main+0x178>)
900095a2:	f001 ff13 	bl	9000b3cc <iprintf>
900095a6:	200a      	movs	r0, #10
900095a8:	f001 ff22 	bl	9000b3f0 <putchar>
  AUDIO_PLAYER_Init();
900095ac:	f000 fa80 	bl	90009ab0 <AUDIO_PLAYER_Init>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
900095b0:	f7f8 f8b6 	bl	90001720 <BSP_LCD_GetXSize>
900095b4:	4604      	mov	r4, r0
900095b6:	f7f8 f8bf 	bl	90001738 <BSP_LCD_GetYSize>
900095ba:	b281      	uxth	r1, r0
900095bc:	b2a0      	uxth	r0, r4
    USBH_Process(&hUSBHost);
900095be:	4c0e      	ldr	r4, [pc, #56]	; (900095f8 <main+0x17c>)
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
900095c0:	f7f8 ffb2 	bl	90002528 <BSP_TS_Init>
  USBH_Init(&hUSBHost, USBH_UserProcess, 0);
900095c4:	462a      	mov	r2, r5
900095c6:	490d      	ldr	r1, [pc, #52]	; (900095fc <main+0x180>)
900095c8:	480b      	ldr	r0, [pc, #44]	; (900095f8 <main+0x17c>)
900095ca:	f7fd f919 	bl	90006800 <USBH_Init>
  USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
900095ce:	490c      	ldr	r1, [pc, #48]	; (90009600 <main+0x184>)
900095d0:	4809      	ldr	r0, [pc, #36]	; (900095f8 <main+0x17c>)
900095d2:	f7fd f941 	bl	90006858 <USBH_RegisterClass>
  USBH_Start(&hUSBHost);
900095d6:	4808      	ldr	r0, [pc, #32]	; (900095f8 <main+0x17c>)
900095d8:	f7fd f9c0 	bl	9000695c <USBH_Start>
    USBH_Process(&hUSBHost);
900095dc:	4620      	mov	r0, r4
900095de:	f7fd f9c7 	bl	90006970 <USBH_Process>
    AUDIO_MenuProcess();
900095e2:	f000 f861 	bl	900096a8 <AUDIO_MenuProcess>
  while (1)
900095e6:	e7f9      	b.n	900095dc <main+0x160>
900095e8:	e000ed00 	.word	0xe000ed00
900095ec:	2000d1dc 	.word	0x2000d1dc
900095f0:	90010c5d 	.word	0x90010c5d
900095f4:	90010c77 	.word	0x90010c77
900095f8:	20000da8 	.word	0x20000da8
900095fc:	900093bd 	.word	0x900093bd
90009600:	20000094 	.word	0x20000094

90009604 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{
90009604:	b510      	push	{r4, lr}
90009606:	b0a2      	sub	sp, #136	; 0x88
90009608:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
9000960a:	a801      	add	r0, sp, #4
9000960c:	f7fb fb60 	bl	90004cd0 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
90009610:	f642 3311 	movw	r3, #11025	; 0x2b11
90009614:	429c      	cmp	r4, r3
90009616:	d007      	beq.n	90009628 <BSP_AUDIO_OUT_ClockConfig+0x24>
90009618:	f245 6322 	movw	r3, #22050	; 0x5622
9000961c:	429c      	cmp	r4, r3
9000961e:	d003      	beq.n	90009628 <BSP_AUDIO_OUT_ClockConfig+0x24>
90009620:	f64a 4344 	movw	r3, #44100	; 0xac44
90009624:	429c      	cmp	r4, r3
90009626:	d113      	bne.n	90009650 <BSP_AUDIO_OUT_ClockConfig+0x4c>
  {
    /* Configure PLLSAI prescalers */
    /* PLLI2S_VCO: VCO_429M
    SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
90009628:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
9000962c:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
9000962e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
90009632:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
90009634:	2308      	movs	r3, #8
90009636:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
90009638:	f240 13ad 	movw	r3, #429	; 0x1ad
9000963c:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
9000963e:	2302      	movs	r3, #2
90009640:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
90009642:	2313      	movs	r3, #19
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
90009644:	a801      	add	r0, sp, #4
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
90009646:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
90009648:	f7fb f8b8 	bl	900047bc <HAL_RCCEx_PeriphCLKConfig>
  }
}
9000964c:	b022      	add	sp, #136	; 0x88
9000964e:	bd10      	pop	{r4, pc}
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
90009650:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
90009654:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
90009656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
9000965a:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
9000965c:	2308      	movs	r3, #8
9000965e:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;
90009660:	f44f 73ac 	mov.w	r3, #344	; 0x158
90009664:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
90009666:	2307      	movs	r3, #7
90009668:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
9000966a:	2301      	movs	r3, #1
9000966c:	e7ea      	b.n	90009644 <BSP_AUDIO_OUT_ClockConfig+0x40>
	...

90009670 <BSP_LCD_ClockConfig>:
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90009670:	4807      	ldr	r0, [pc, #28]	; (90009690 <BSP_LCD_ClockConfig+0x20>)
90009672:	2308      	movs	r3, #8
90009674:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90009678:	23c0      	movs	r3, #192	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
9000967a:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
9000967e:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
90009680:	2305      	movs	r3, #5
90009682:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
90009684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90009688:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
9000968a:	f7fb b897 	b.w	900047bc <HAL_RCCEx_PeriphCLKConfig>
9000968e:	bf00      	nop
90009690:	20000b6c 	.word	0x20000b6c

90009694 <LCD_ClearTextZone>:
  * @brief  Clears the text zone.
  * @param  None
  * @retval None
  */
static void LCD_ClearTextZone(void)
{
90009694:	b510      	push	{r4, lr}
90009696:	2403      	movs	r4, #3
  uint8_t i = 0;
  
  for(i= 0; i < 13; i++)
  {
    BSP_LCD_ClearStringLine(i + 3);
90009698:	4620      	mov	r0, r4
  for(i= 0; i < 13; i++)
9000969a:	3401      	adds	r4, #1
    BSP_LCD_ClearStringLine(i + 3);
9000969c:	f7f8 faf6 	bl	90001c8c <BSP_LCD_ClearStringLine>
  for(i= 0; i < 13; i++)
900096a0:	2c10      	cmp	r4, #16
900096a2:	d1f9      	bne.n	90009698 <LCD_ClearTextZone+0x4>
  }
}
900096a4:	bd10      	pop	{r4, pc}
	...

900096a8 <AUDIO_MenuProcess>:
{
900096a8:	b570      	push	{r4, r5, r6, lr}
  if(appli_state == APPLICATION_READY)
900096aa:	4d59      	ldr	r5, [pc, #356]	; (90009810 <AUDIO_MenuProcess+0x168>)
{
900096ac:	b08c      	sub	sp, #48	; 0x30
  if(appli_state == APPLICATION_READY)
900096ae:	782b      	ldrb	r3, [r5, #0]
900096b0:	2b02      	cmp	r3, #2
900096b2:	d134      	bne.n	9000971e <AUDIO_MenuProcess+0x76>
    switch(AudioDemo.state)
900096b4:	4c57      	ldr	r4, [pc, #348]	; (90009814 <AUDIO_MenuProcess+0x16c>)
900096b6:	7823      	ldrb	r3, [r4, #0]
900096b8:	2b08      	cmp	r3, #8
900096ba:	d830      	bhi.n	9000971e <AUDIO_MenuProcess+0x76>
900096bc:	e8df f003 	tbb	[pc, r3]
900096c0:	637d3e05 	.word	0x637d3e05
900096c4:	2f2f2f2f 	.word	0x2f2f2f2f
900096c8:	8f          	.byte	0x8f
900096c9:	00          	.byte	0x00
      AudioDemo.state = WAIT;
900096ca:	2601      	movs	r6, #1
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
900096cc:	4852      	ldr	r0, [pc, #328]	; (90009818 <AUDIO_MenuProcess+0x170>)
      AudioDemo.state = WAIT;
900096ce:	7026      	strb	r6, [r4, #0]
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
900096d0:	f7f8 f88c 	bl	900017ec <BSP_LCD_SetBackColor>
	  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
900096d4:	4851      	ldr	r0, [pc, #324]	; (9000981c <AUDIO_MenuProcess+0x174>)
900096d6:	f7f8 f895 	bl	90001804 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
900096da:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
900096de:	f7f8 f879 	bl	900017d4 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"       ___          ___      __   _      __    ____________  ___");
900096e2:	494f      	ldr	r1, [pc, #316]	; (90009820 <AUDIO_MenuProcess+0x178>)
900096e4:	2002      	movs	r0, #2
900096e6:	f7f8 fa0b 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(3, (uint8_t *)"      / _ |__ _____/ (_)__  / /  (_)__  / /__ / __/_  __/  |/  /");
900096ea:	494e      	ldr	r1, [pc, #312]	; (90009824 <AUDIO_MenuProcess+0x17c>)
900096ec:	2003      	movs	r0, #3
900096ee:	f7f8 fa07 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"     / __ / // / _  / / _ \\/ /__/ / _ \\/  '_/_\\ \\  / / / /|_/ / ");
900096f2:	494d      	ldr	r1, [pc, #308]	; (90009828 <AUDIO_MenuProcess+0x180>)
900096f4:	2004      	movs	r0, #4
900096f6:	f7f8 fa03 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    /_/ |_\\_,_/\\_,_/_/\\___/____/_/_//_/_/\\_\\/___/ /_/ /_/  /_/  ");
900096fa:	494c      	ldr	r1, [pc, #304]	; (9000982c <AUDIO_MenuProcess+0x184>)
900096fc:	2005      	movs	r0, #5
900096fe:	f7f8 f9ff 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
90009702:	484b      	ldr	r0, [pc, #300]	; (90009830 <AUDIO_MenuProcess+0x188>)
90009704:	f7f8 f87e 	bl	90001804 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"    >> TRANSMITTER");
90009708:	494a      	ldr	r1, [pc, #296]	; (90009834 <AUDIO_MenuProcess+0x18c>)
9000970a:	200a      	movs	r0, #10
9000970c:	f7f8 f9f8 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"    >> RECEIVER");
90009710:	200d      	movs	r0, #13
90009712:	4949      	ldr	r1, [pc, #292]	; (90009838 <AUDIO_MenuProcess+0x190>)
90009714:	f7f8 f9f4 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SelectLayer(1);
90009718:	4630      	mov	r0, r6
9000971a:	f7f8 f855 	bl	900017c8 <BSP_LCD_SelectLayer>
  if(appli_state == APPLICATION_DISCONNECT)
9000971e:	782b      	ldrb	r3, [r5, #0]
90009720:	2b03      	cmp	r3, #3
90009722:	d109      	bne.n	90009738 <AUDIO_MenuProcess+0x90>
    appli_state = APPLICATION_IDLE;     
90009724:	2300      	movs	r3, #0
90009726:	702b      	strb	r3, [r5, #0]
    LCD_LOG_UpdateDisplay(); 
90009728:	f001 fc94 	bl	9000b054 <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
9000972c:	4b39      	ldr	r3, [pc, #228]	; (90009814 <AUDIO_MenuProcess+0x16c>)
9000972e:	2206      	movs	r2, #6
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);    
90009730:	2002      	movs	r0, #2
    AudioDemo.state = AUDIO_DEMO_IDLE; 
90009732:	701a      	strb	r2, [r3, #0]
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);    
90009734:	f7f7 fd3a 	bl	900011ac <BSP_AUDIO_OUT_Stop>
}
90009738:	b00c      	add	sp, #48	; 0x30
9000973a:	bd70      	pop	{r4, r5, r6, pc}
    	BSP_TS_GetState(&TS_State);
9000973c:	a801      	add	r0, sp, #4
9000973e:	f7f8 ff3d 	bl	900025bc <BSP_TS_GetState>
    	if(TS_State.touchDetected == 1)
90009742:	f89d 3004 	ldrb.w	r3, [sp, #4]
90009746:	2b01      	cmp	r3, #1
90009748:	d1e9      	bne.n	9000971e <AUDIO_MenuProcess+0x76>
    		if ((TS_State.touchX[0] > TOUCH_TRANSMITTER_XMIN) &&
9000974a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
9000974e:	3b29      	subs	r3, #41	; 0x29
90009750:	b29b      	uxth	r3, r3
90009752:	2ba8      	cmp	r3, #168	; 0xa8
90009754:	d809      	bhi.n	9000976a <AUDIO_MenuProcess+0xc2>
    			(TS_State.touchY[0] > TOUCH_TRANSMITTER_YMIN) &&
90009756:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    			(TS_State.touchX[0] < TOUCH_TRANSMITTER_XMAX) &&
9000975a:	f1a3 0297 	sub.w	r2, r3, #151	; 0x97
9000975e:	2a1c      	cmp	r2, #28
90009760:	d80b      	bhi.n	9000977a <AUDIO_MenuProcess+0xd2>
    			AudioDemo.state = TRANSMITTER;
90009762:	2303      	movs	r3, #3
90009764:	7023      	strb	r3, [r4, #0]
    			AUDIO_StorageParse();
90009766:	f7ff fddb 	bl	90009320 <AUDIO_StorageParse>
          BSP_TS_GetState(&TS_State);
9000976a:	a801      	add	r0, sp, #4
9000976c:	f7f8 ff26 	bl	900025bc <BSP_TS_GetState>
        }while(TS_State.touchDetected > 0);
90009770:	f89d 3004 	ldrb.w	r3, [sp, #4]
90009774:	2b00      	cmp	r3, #0
90009776:	d1f8      	bne.n	9000976a <AUDIO_MenuProcess+0xc2>
90009778:	e7d1      	b.n	9000971e <AUDIO_MenuProcess+0x76>
    				 (TS_State.touchX[0] < TOUCH_RECEIVER_XMAX) &&
9000977a:	3bc9      	subs	r3, #201	; 0xc9
9000977c:	2b1c      	cmp	r3, #28
9000977e:	d8f4      	bhi.n	9000976a <AUDIO_MenuProcess+0xc2>
    			AudioDemo.state = RECEIVER;
90009780:	2302      	movs	r3, #2
90009782:	7023      	strb	r3, [r4, #0]
90009784:	e7f1      	b.n	9000976a <AUDIO_MenuProcess+0xc2>
    	if(AudioState == AUDIO_STATE_IDLE)
90009786:	78a3      	ldrb	r3, [r4, #2]
90009788:	b983      	cbnz	r3, 900097ac <AUDIO_MenuProcess+0x104>
    		BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
9000978a:	4823      	ldr	r0, [pc, #140]	; (90009818 <AUDIO_MenuProcess+0x170>)
9000978c:	f7f8 f852 	bl	90001834 <BSP_LCD_Clear>
    		BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
90009790:	4827      	ldr	r0, [pc, #156]	; (90009830 <AUDIO_MenuProcess+0x188>)
90009792:	f7f8 f837 	bl	90001804 <BSP_LCD_SetFont>
    		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009796:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
9000979a:	f7f8 f81b 	bl	900017d4 <BSP_LCD_SetTextColor>
    		BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >> --TRANSMITTER--");
9000979e:	4927      	ldr	r1, [pc, #156]	; (9000983c <AUDIO_MenuProcess+0x194>)
900097a0:	2004      	movs	r0, #4
900097a2:	f7f8 f9ad 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
    		AudioState = AUDIO_STATE_INIT;
900097a6:	2302      	movs	r3, #2
900097a8:	70a3      	strb	r3, [r4, #2]
900097aa:	e7b8      	b.n	9000971e <AUDIO_MenuProcess+0x76>
    		if(TRANSMITTER_Process() == AUDIO_ERROR_IO)
900097ac:	f000 f9d6 	bl	90009b5c <TRANSMITTER_Process>
900097b0:	2801      	cmp	r0, #1
900097b2:	d1b4      	bne.n	9000971e <AUDIO_MenuProcess+0x76>
				AudioDemo.state = IDLE;
900097b4:	2300      	movs	r3, #0
            AudioDemo.state = AUDIO_DEMO_IDLE;
900097b6:	7023      	strb	r3, [r4, #0]
900097b8:	e7b1      	b.n	9000971e <AUDIO_MenuProcess+0x76>
		LCD_ClearTextZone();
900097ba:	f7ff ff6b 	bl	90009694 <LCD_ClearTextZone>
		BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
900097be:	481c      	ldr	r0, [pc, #112]	; (90009830 <AUDIO_MenuProcess+0x188>)
900097c0:	f7f8 f820 	bl	90001804 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
900097c4:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
900097c8:	f7f8 f804 	bl	900017d4 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >> --RECEIVER--");
900097cc:	491c      	ldr	r1, [pc, #112]	; (90009840 <AUDIO_MenuProcess+0x198>)
900097ce:	2004      	movs	r0, #4
900097d0:	f7f8 f996 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    >> Ready to receive...");
900097d4:	491b      	ldr	r1, [pc, #108]	; (90009844 <AUDIO_MenuProcess+0x19c>)
900097d6:	2005      	movs	r0, #5
900097d8:	f7f8 f992 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		break;
900097dc:	e79f      	b.n	9000971e <AUDIO_MenuProcess+0x76>
        if(AudioState == AUDIO_STATE_IDLE)
900097de:	78a3      	ldrb	r3, [r4, #2]
900097e0:	b963      	cbnz	r3, 900097fc <AUDIO_MenuProcess+0x154>
          AudioState = AUDIO_STATE_INIT;
900097e2:	2302      	movs	r3, #2
900097e4:	70a3      	strb	r3, [r4, #2]
          LCD_ClearTextZone();
900097e6:	f7ff ff55 	bl	90009694 <LCD_ClearTextZone>
          if(AUDIO_REC_Start() == AUDIO_ERROR_IO)
900097ea:	f001 f807 	bl	9000a7fc <AUDIO_REC_Start>
900097ee:	2801      	cmp	r0, #1
900097f0:	d195      	bne.n	9000971e <AUDIO_MenuProcess+0x76>
    LCD_LOG_UpdateDisplay(); 
900097f2:	f001 fc2f 	bl	9000b054 <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
900097f6:	2306      	movs	r3, #6
900097f8:	7023      	strb	r3, [r4, #0]
900097fa:	e7dc      	b.n	900097b6 <AUDIO_MenuProcess+0x10e>
          status = AUDIO_REC_Process();
900097fc:	f001 f980 	bl	9000ab00 <AUDIO_REC_Process>
          if((status == AUDIO_ERROR_IO) || (status == AUDIO_ERROR_EOF))
90009800:	3801      	subs	r0, #1
90009802:	b2c0      	uxtb	r0, r0
90009804:	2801      	cmp	r0, #1
90009806:	d88a      	bhi.n	9000971e <AUDIO_MenuProcess+0x76>
            LCD_ClearTextZone();
90009808:	f7ff ff44 	bl	90009694 <LCD_ClearTextZone>
9000980c:	e7f1      	b.n	900097f2 <AUDIO_MenuProcess+0x14a>
9000980e:	bf00      	nop
90009810:	20000b6c 	.word	0x20000b6c
90009814:	200012f0 	.word	0x200012f0
90009818:	ff008000 	.word	0xff008000
9000981c:	20000070 	.word	0x20000070
90009820:	90010c8b 	.word	0x90010c8b
90009824:	90010ccc 	.word	0x90010ccc
90009828:	90010d0d 	.word	0x90010d0d
9000982c:	90010d4e 	.word	0x90010d4e
90009830:	20000078 	.word	0x20000078
90009834:	90010d8f 	.word	0x90010d8f
90009838:	90010da2 	.word	0x90010da2
9000983c:	90010db2 	.word	0x90010db2
90009840:	90010dc9 	.word	0x90010dc9
90009844:	90010ddd 	.word	0x90010ddd

90009848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90009848:	f8df d034 	ldr.w	sp, [pc, #52]	; 90009880 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
9000984c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
9000984e:	e003      	b.n	90009858 <LoopCopyDataInit>

90009850 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90009850:	4b0c      	ldr	r3, [pc, #48]	; (90009884 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
90009852:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
90009854:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
90009856:	3104      	adds	r1, #4

90009858 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90009858:	480b      	ldr	r0, [pc, #44]	; (90009888 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
9000985a:	4b0c      	ldr	r3, [pc, #48]	; (9000988c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
9000985c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
9000985e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90009860:	d3f6      	bcc.n	90009850 <CopyDataInit>
  ldr  r2, =_sbss
90009862:	4a0b      	ldr	r2, [pc, #44]	; (90009890 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
90009864:	e002      	b.n	9000986c <LoopFillZerobss>

90009866 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
90009866:	2300      	movs	r3, #0
  str  r3, [r2], #4
90009868:	f842 3b04 	str.w	r3, [r2], #4

9000986c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
9000986c:	4b09      	ldr	r3, [pc, #36]	; (90009894 <LoopFillZerobss+0x28>)
  cmp  r2, r3
9000986e:	429a      	cmp	r2, r3
  bcc  FillZerobss
90009870:	d3f9      	bcc.n	90009866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
90009872:	f000 f82f 	bl	900098d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
90009876:	f001 ff89 	bl	9000b78c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
9000987a:	f7ff fdff 	bl	9000947c <main>
  bx  lr    
9000987e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90009880:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
90009884:	9001148c 	.word	0x9001148c
  ldr  r0, =_sdata
90009888:	20000000 	.word	0x20000000
  ldr  r3, =_edata
9000988c:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
90009890:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
90009894:	20010bf8 	.word	0x20010bf8

90009898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90009898:	e7fe      	b.n	90009898 <ADC_IRQHandler>

9000989a <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
9000989a:	4770      	bx	lr

9000989c <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
9000989c:	e7fe      	b.n	9000989c <HardFault_Handler>

9000989e <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
9000989e:	e7fe      	b.n	9000989e <MemManage_Handler>

900098a0 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
900098a0:	e7fe      	b.n	900098a0 <BusFault_Handler>

900098a2 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
900098a2:	e7fe      	b.n	900098a2 <UsageFault_Handler>

900098a4 <SVC_Handler>:
900098a4:	4770      	bx	lr

900098a6 <DebugMon_Handler>:
900098a6:	4770      	bx	lr

900098a8 <PendSV_Handler>:
900098a8:	4770      	bx	lr

900098aa <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
900098aa:	f7f8 bf6f 	b.w	9000278c <HAL_IncTick>
	...

900098b0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
  HAL_HCD_IRQHandler(&hhcd);
900098b0:	4801      	ldr	r0, [pc, #4]	; (900098b8 <OTG_FS_IRQHandler+0x8>)
900098b2:	f7f9 bd21 	b.w	900032f8 <HAL_HCD_IRQHandler>
900098b6:	bf00      	nop
900098b8:	200086b0 	.word	0x200086b0

900098bc <DMA2_Stream4_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
900098bc:	4b01      	ldr	r3, [pc, #4]	; (900098c4 <DMA2_Stream4_IRQHandler+0x8>)
900098be:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
900098c0:	f7f9 b92e 	b.w	90002b20 <HAL_DMA_IRQHandler>
900098c4:	2000016c 	.word	0x2000016c

900098c8 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
900098c8:	4b01      	ldr	r3, [pc, #4]	; (900098d0 <DMA2_Stream7_IRQHandler+0x8>)
900098ca:	6f18      	ldr	r0, [r3, #112]	; 0x70
900098cc:	f7f9 b928 	b.w	90002b20 <HAL_DMA_IRQHandler>
900098d0:	200001f0 	.word	0x200001f0

900098d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
900098d4:	490f      	ldr	r1, [pc, #60]	; (90009914 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900098d6:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
900098d8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
900098dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
900098e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
900098e4:	4b0c      	ldr	r3, [pc, #48]	; (90009918 <SystemInit+0x44>)
900098e6:	681a      	ldr	r2, [r3, #0]
900098e8:	f042 0201 	orr.w	r2, r2, #1
900098ec:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
900098ee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
900098f0:	681a      	ldr	r2, [r3, #0]
900098f2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
900098f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
900098fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
900098fc:	4a07      	ldr	r2, [pc, #28]	; (9000991c <SystemInit+0x48>)
900098fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
90009900:	681a      	ldr	r2, [r3, #0]
90009902:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
90009906:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
90009908:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
9000990a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
9000990e:	608b      	str	r3, [r1, #8]
#endif
}
90009910:	4770      	bx	lr
90009912:	bf00      	nop
90009914:	e000ed00 	.word	0xe000ed00
90009918:	40023800 	.word	0x40023800
9000991c:	24003010 	.word	0x24003010

90009920 <InsertarBit>:
/**
 * @brief  Escribe la secuencia en el archivo WAV.
 * @param  byteLeido: byte leido del fichero que txt que se quiere transmitir
 */
static void InsertarBit(uint8_t bit)
{
90009920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t byteswritten = 0;

	if (WaveBuffer.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE)
90009922:	4d29      	ldr	r5, [pc, #164]	; (900099c8 <InsertarBit+0xa8>)
	uint32_t byteswritten = 0;
90009924:	2700      	movs	r7, #0
{
90009926:	4606      	mov	r6, r0
	if (WaveBuffer.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE)
90009928:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
9000992c:	f5a5 4480 	sub.w	r4, r5, #16384	; 0x4000
	uint32_t byteswritten = 0;
90009930:	9701      	str	r7, [sp, #4]
	if (WaveBuffer.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE)
90009932:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
90009936:	d10e      	bne.n	90009956 <InsertarBit+0x36>
	{
		// Si se ha llenado el buffer se escribe el buffer en el fichero
		f_write(&MessageWavFile, (uint8_t*)WaveBuffer.pcm_buff, 2*WaveBuffer.pcm_ptr, (void*)&byteswritten);
90009938:	ab01      	add	r3, sp, #4
9000993a:	f44f 4290 	mov.w	r2, #18432	; 0x4800
9000993e:	4621      	mov	r1, r4
90009940:	4822      	ldr	r0, [pc, #136]	; (900099cc <InsertarBit+0xac>)
90009942:	f7ff f96e 	bl	90008c22 <f_write>
		WaveBuffer.pcm_ptr = 0;
		WaveBuffer.fptr += byteswritten;
90009946:	f8d5 380c 	ldr.w	r3, [r5, #2060]	; 0x80c
9000994a:	9a01      	ldr	r2, [sp, #4]
		WaveBuffer.pcm_ptr = 0;
9000994c:	f8c5 7800 	str.w	r7, [r5, #2048]	; 0x800
		WaveBuffer.fptr += byteswritten;
90009950:	4413      	add	r3, r2
90009952:	f8c5 380c 	str.w	r3, [r5, #2060]	; 0x80c
	}

	if (bit == 1)
90009956:	2e01      	cmp	r6, #1
90009958:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
9000995c:	d016      	beq.n	9000998c <InsertarBit+0x6c>
9000995e:	f103 0140 	add.w	r1, r3, #64	; 0x40
		// En este caso, el bit leido es un cero, por lo que la seal a transmitir es la correspondiente a 5512.5 Hz, y
		// se transmiten todas las muestras del seno. 
		for (uint8_t periodo = 0; periodo < 4; periodo++)
		{
			// Se configura el número de periodos a transmitir, en este caso serian 2 periodos por cada bit.
			for (uint8_t j = 0; j < 8; j++)
90009962:	4e1b      	ldr	r6, [pc, #108]	; (900099d0 <InsertarBit+0xb0>)
90009964:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	if (bit == 1)
90009968:	2000      	movs	r0, #0
			for (uint8_t j = 0; j < 8; j++)
9000996a:	3001      	adds	r0, #1
			{
				// De igual forma qque anteriormente, se insertan las muestras en el bufferm dos veces.
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
9000996c:	f836 7b02 	ldrh.w	r7, [r6], #2
			for (uint8_t j = 0; j < 8; j++)
90009970:	3204      	adds	r2, #4
90009972:	2808      	cmp	r0, #8
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009974:	f822 7c04 	strh.w	r7, [r2, #-4]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
90009978:	f822 7c02 	strh.w	r7, [r2, #-2]
			for (uint8_t j = 0; j < 8; j++)
9000997c:	d1f5      	bne.n	9000996a <InsertarBit+0x4a>
				
				// Se actualiza el puntero del buffer.
				WaveBuffer.pcm_ptr += 2;
9000997e:	3310      	adds	r3, #16
		for (uint8_t periodo = 0; periodo < 4; periodo++)
90009980:	428b      	cmp	r3, r1
90009982:	d1ee      	bne.n	90009962 <InsertarBit+0x42>
90009984:	f8c5 1800 	str.w	r1, [r5, #2048]	; 0x800
			}
		}
	}
}
90009988:	b003      	add	sp, #12
9000998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bit == 1)
9000998c:	2200      	movs	r2, #0
9000998e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009992:	f647 76ff 	movw	r6, #32767	; 0x7fff
90009996:	f248 0401 	movw	r4, #32769	; 0x8001
9000999a:	4610      	mov	r0, r2
		for (uint8_t periodo = 0; periodo < 8; periodo++)
9000999c:	3201      	adds	r2, #1
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
9000999e:	8008      	strh	r0, [r1, #0]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
900099a0:	8048      	strh	r0, [r1, #2]
		for (uint8_t periodo = 0; periodo < 8; periodo++)
900099a2:	3110      	adds	r1, #16
900099a4:	2a08      	cmp	r2, #8
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
900099a6:	f821 6c0c 	strh.w	r6, [r1, #-12]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
900099aa:	f821 6c0a 	strh.w	r6, [r1, #-10]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
900099ae:	f821 0c08 	strh.w	r0, [r1, #-8]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
900099b2:	f821 0c06 	strh.w	r0, [r1, #-6]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
900099b6:	f821 4c04 	strh.w	r4, [r1, #-4]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
900099ba:	f821 4c02 	strh.w	r4, [r1, #-2]
		for (uint8_t periodo = 0; periodo < 8; periodo++)
900099be:	d1ed      	bne.n	9000999c <InsertarBit+0x7c>
				WaveBuffer.pcm_ptr += 2;
900099c0:	f103 0140 	add.w	r1, r3, #64	; 0x40
900099c4:	e7de      	b.n	90009984 <InsertarBit+0x64>
900099c6:	bf00      	nop
900099c8:	20005e98 	.word	0x20005e98
900099cc:	200012f4 	.word	0x200012f4
900099d0:	90010658 	.word	0x90010658

900099d4 <AUDIO_AcquireTouchButtons>:
/**
 * @brief  Test touch screen state and modify audio state machine according to that
 * @param  None
 * @retval None
 */
static void AUDIO_AcquireTouchButtons(void) {
900099d4:	b510      	push	{r4, lr}
	static TS_StateTypeDef TS_State = { 0 };

	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
900099d6:	4c34      	ldr	r4, [pc, #208]	; (90009aa8 <AUDIO_AcquireTouchButtons+0xd4>)
900099d8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
	{
		BSP_TS_GetState(&TS_State);
900099dc:	f504 700c 	add.w	r0, r4, #560	; 0x230
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
900099e0:	2b01      	cmp	r3, #1
900099e2:	d103      	bne.n	900099ec <AUDIO_AcquireTouchButtons+0x18>
					&& (TS_State.touchY[0] < TOUCH_VOL_PLUS_YMAX)) {
				AudioState = AUDIO_STATE_VOLUME_UP;
			}
		}
	}
}
900099e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BSP_TS_GetState(&TS_State);
900099e8:	f7f8 bde8 	b.w	900025bc <BSP_TS_GetState>
		BSP_TS_GetState(&TS_State);
900099ec:	f7f8 fde6 	bl	900025bc <BSP_TS_GetState>
		if (TS_State.touchDetected == 1) {
900099f0:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
900099f4:	2b01      	cmp	r3, #1
900099f6:	d112      	bne.n	90009a1e <AUDIO_AcquireTouchButtons+0x4a>
			if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN)
900099f8:	f8b4 3232 	ldrh.w	r3, [r4, #562]	; 0x232
900099fc:	f1a3 0265 	sub.w	r2, r3, #101	; 0x65
90009a00:	2a16      	cmp	r2, #22
90009a02:	d80d      	bhi.n	90009a20 <AUDIO_AcquireTouchButtons+0x4c>
					&& (TS_State.touchY[0] > TOUCH_PAUSE_YMIN)
90009a04:	f8b4 223c 	ldrh.w	r2, [r4, #572]	; 0x23c
90009a08:	3ad5      	subs	r2, #213	; 0xd5
90009a0a:	b292      	uxth	r2, r2
90009a0c:	2a26      	cmp	r2, #38	; 0x26
90009a0e:	d819      	bhi.n	90009a44 <AUDIO_AcquireTouchButtons+0x70>
				if (AudioState == AUDIO_STATE_PLAY) {
90009a10:	4b26      	ldr	r3, [pc, #152]	; (90009aac <AUDIO_AcquireTouchButtons+0xd8>)
90009a12:	781a      	ldrb	r2, [r3, #0]
90009a14:	2a03      	cmp	r2, #3
					AudioState = AUDIO_STATE_PAUSE;
90009a16:	bf0c      	ite	eq
90009a18:	220b      	moveq	r2, #11
					AudioState = AUDIO_STATE_RESUME;
90009a1a:	220c      	movne	r2, #12
				AudioState = AUDIO_STATE_VOLUME_UP;
90009a1c:	701a      	strb	r2, [r3, #0]
}
90009a1e:	bd10      	pop	{r4, pc}
			} else if ((TS_State.touchX[0] > TOUCH_NEXT_XMIN)
90009a20:	f46f 7196 	mvn.w	r1, #300	; 0x12c
90009a24:	185a      	adds	r2, r3, r1
90009a26:	2abf      	cmp	r2, #191	; 0xbf
90009a28:	d808      	bhi.n	90009a3c <AUDIO_AcquireTouchButtons+0x68>
					&& (TS_State.touchY[0] > TOUCH_NEXT_YMIN)
90009a2a:	f8b4 223c 	ldrh.w	r2, [r4, #572]	; 0x23c
90009a2e:	3a88      	subs	r2, #136	; 0x88
90009a30:	b292      	uxth	r2, r2
90009a32:	2a21      	cmp	r2, #33	; 0x21
90009a34:	d81c      	bhi.n	90009a70 <AUDIO_AcquireTouchButtons+0x9c>
				AudioState = AUDIO_STATE_NEXT;
90009a36:	4b1d      	ldr	r3, [pc, #116]	; (90009aac <AUDIO_AcquireTouchButtons+0xd8>)
90009a38:	2206      	movs	r2, #6
90009a3a:	e7ef      	b.n	90009a1c <AUDIO_AcquireTouchButtons+0x48>
			} else if ((TS_State.touchX[0] > TOUCH_PREVIOUS_XMIN)
90009a3c:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
90009a40:	2a71      	cmp	r2, #113	; 0x71
90009a42:	d808      	bhi.n	90009a56 <AUDIO_AcquireTouchButtons+0x82>
					&& (TS_State.touchY[0] > TOUCH_PREVIOUS_YMIN)
90009a44:	f8b4 223c 	ldrh.w	r2, [r4, #572]	; 0x23c
90009a48:	3a88      	subs	r2, #136	; 0x88
90009a4a:	b292      	uxth	r2, r2
90009a4c:	2a21      	cmp	r2, #33	; 0x21
90009a4e:	d802      	bhi.n	90009a56 <AUDIO_AcquireTouchButtons+0x82>
				AudioState = AUDIO_STATE_PREVIOUS;
90009a50:	4b16      	ldr	r3, [pc, #88]	; (90009aac <AUDIO_AcquireTouchButtons+0xd8>)
90009a52:	2207      	movs	r2, #7
90009a54:	e7e2      	b.n	90009a1c <AUDIO_AcquireTouchButtons+0x48>
			} else if ((TS_State.touchX[0] > TOUCH_STOP_XMIN)
90009a56:	f1a3 02ab 	sub.w	r2, r3, #171	; 0xab
90009a5a:	2a26      	cmp	r2, #38	; 0x26
90009a5c:	d808      	bhi.n	90009a70 <AUDIO_AcquireTouchButtons+0x9c>
					&& (TS_State.touchY[0] > TOUCH_STOP_YMIN)
90009a5e:	f8b4 323c 	ldrh.w	r3, [r4, #572]	; 0x23c
90009a62:	3bd5      	subs	r3, #213	; 0xd5
90009a64:	b29b      	uxth	r3, r3
90009a66:	2b26      	cmp	r3, #38	; 0x26
90009a68:	d8d9      	bhi.n	90009a1e <AUDIO_AcquireTouchButtons+0x4a>
				AudioState = AUDIO_STATE_STOP;
90009a6a:	4b10      	ldr	r3, [pc, #64]	; (90009aac <AUDIO_AcquireTouchButtons+0xd8>)
90009a6c:	220a      	movs	r2, #10
90009a6e:	e7d5      	b.n	90009a1c <AUDIO_AcquireTouchButtons+0x48>
			} else if ((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN)
90009a70:	f1a3 0215 	sub.w	r2, r3, #21
90009a74:	2a30      	cmp	r2, #48	; 0x30
90009a76:	d808      	bhi.n	90009a8a <AUDIO_AcquireTouchButtons+0xb6>
					&& (TS_State.touchY[0] > TOUCH_VOL_MINUS_YMIN)
90009a78:	f8b4 323c 	ldrh.w	r3, [r4, #572]	; 0x23c
90009a7c:	3bd5      	subs	r3, #213	; 0xd5
90009a7e:	b29b      	uxth	r3, r3
90009a80:	2b26      	cmp	r3, #38	; 0x26
90009a82:	d8cc      	bhi.n	90009a1e <AUDIO_AcquireTouchButtons+0x4a>
				AudioState = AUDIO_STATE_VOLUME_DOWN;
90009a84:	4b09      	ldr	r3, [pc, #36]	; (90009aac <AUDIO_AcquireTouchButtons+0xd8>)
90009a86:	220e      	movs	r2, #14
90009a88:	e7c8      	b.n	90009a1c <AUDIO_AcquireTouchButtons+0x48>
			} else if ((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN)
90009a8a:	f46f 72c9 	mvn.w	r2, #402	; 0x192
90009a8e:	4413      	add	r3, r2
90009a90:	2b30      	cmp	r3, #48	; 0x30
90009a92:	d8c4      	bhi.n	90009a1e <AUDIO_AcquireTouchButtons+0x4a>
					&& (TS_State.touchY[0] > TOUCH_VOL_PLUS_YMIN)
90009a94:	f8b4 323c 	ldrh.w	r3, [r4, #572]	; 0x23c
90009a98:	3bd5      	subs	r3, #213	; 0xd5
90009a9a:	b29b      	uxth	r3, r3
90009a9c:	2b26      	cmp	r3, #38	; 0x26
90009a9e:	d8be      	bhi.n	90009a1e <AUDIO_AcquireTouchButtons+0x4a>
				AudioState = AUDIO_STATE_VOLUME_UP;
90009aa0:	4b02      	ldr	r3, [pc, #8]	; (90009aac <AUDIO_AcquireTouchButtons+0xd8>)
90009aa2:	220d      	movs	r2, #13
90009aa4:	e7ba      	b.n	90009a1c <AUDIO_AcquireTouchButtons+0x48>
90009aa6:	bf00      	nop
90009aa8:	200012f4 	.word	0x200012f4
90009aac:	200012f2 	.word	0x200012f2

90009ab0 <AUDIO_PLAYER_Init>:
AUDIO_ErrorTypeDef AUDIO_PLAYER_Init(void) {
90009ab0:	b508      	push	{r3, lr}
	if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, uwVolume, I2S_AUDIOFREQ_44K)
90009ab2:	4b06      	ldr	r3, [pc, #24]	; (90009acc <AUDIO_PLAYER_Init+0x1c>)
90009ab4:	f64a 4244 	movw	r2, #44100	; 0xac44
90009ab8:	2004      	movs	r0, #4
90009aba:	6819      	ldr	r1, [r3, #0]
90009abc:	b2c9      	uxtb	r1, r1
90009abe:	f7f7 fc47 	bl	90001350 <BSP_AUDIO_OUT_Init>
}
90009ac2:	3800      	subs	r0, #0
90009ac4:	bf18      	it	ne
90009ac6:	2001      	movne	r0, #1
90009ac8:	bd08      	pop	{r3, pc}
90009aca:	bf00      	nop
90009acc:	200000b8 	.word	0x200000b8

90009ad0 <ReadFileIntoBuffer>:
AUDIO_ErrorTypeDef ReadFileIntoBuffer(uint8_t idx) {
90009ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	f_close(&FileHandler);
90009ad2:	4d1e      	ldr	r5, [pc, #120]	; (90009b4c <ReadFileIntoBuffer+0x7c>)
AUDIO_ErrorTypeDef ReadFileIntoBuffer(uint8_t idx) {
90009ad4:	4606      	mov	r6, r0
	if(f_open(&FileHandler, (char*) FileList.file[idx].name, FA_OPEN_EXISTING | FA_READ) == FR_OK)
90009ad6:	2401      	movs	r4, #1
90009ad8:	4f1d      	ldr	r7, [pc, #116]	; (90009b50 <ReadFileIntoBuffer+0x80>)
	f_close(&FileHandler);
90009ada:	f505 7017 	add.w	r0, r5, #604	; 0x25c
90009ade:	f7ff f9b1 	bl	90008e44 <f_close>
	if(f_open(&FileHandler, (char*) FileList.file[idx].name, FA_OPEN_EXISTING | FA_READ) == FR_OK)
90009ae2:	2129      	movs	r1, #41	; 0x29
90009ae4:	4622      	mov	r2, r4
90009ae6:	f505 7017 	add.w	r0, r5, #604	; 0x25c
90009aea:	fb11 4106 	smlabb	r1, r1, r6, r4
90009aee:	4439      	add	r1, r7
90009af0:	f7fe fed6 	bl	900088a0 <f_open>
90009af4:	4601      	mov	r1, r0
90009af6:	b9e8      	cbnz	r0, 90009b34 <ReadFileIntoBuffer+0x64>
		if (FileList.ptr > idx)
90009af8:	f8b7 33d8 	ldrh.w	r3, [r7, #984]	; 0x3d8
90009afc:	42b3      	cmp	r3, r6
90009afe:	d802      	bhi.n	90009b06 <ReadFileIntoBuffer+0x36>
		return AUDIO_ERROR_IO;
90009b00:	2001      	movs	r0, #1
}
90009b02:	b003      	add	sp, #12
90009b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
			BufferFile.state = BUFFER_OFFSET_NONE;
90009b06:	f885 088c 	strb.w	r0, [r5, #2188]	; 0x88c
			f_lseek(&FileHandler, 0);
90009b0a:	f505 7017 	add.w	r0, r5, #604	; 0x25c
90009b0e:	f7ff f9aa 	bl	90008e66 <f_lseek>
			if (f_read(&FileHandler, &BufferFile.buff[0], DATA_FILE_BUFFER_SIZE, (void*) &bytesread) == FR_OK)
90009b12:	ab01      	add	r3, sp, #4
90009b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
90009b18:	f205 418c 	addw	r1, r5, #1164	; 0x48c
90009b1c:	f505 7017 	add.w	r0, r5, #604	; 0x25c
90009b20:	f7fe ffce 	bl	90008ac0 <f_read>
90009b24:	2800      	cmp	r0, #0
90009b26:	d1eb      	bne.n	90009b00 <ReadFileIntoBuffer+0x30>
				if (bytesread != 0)
90009b28:	9b01      	ldr	r3, [sp, #4]
90009b2a:	2b00      	cmp	r3, #0
90009b2c:	d0e8      	beq.n	90009b00 <ReadFileIntoBuffer+0x30>
					BufferFile.fptr = bytesread;
90009b2e:	f8c5 3890 	str.w	r3, [r5, #2192]	; 0x890
					return AUDIO_ERROR_NONE;
90009b32:	e7e6      	b.n	90009b02 <ReadFileIntoBuffer+0x32>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
90009b34:	4807      	ldr	r0, [pc, #28]	; (90009b54 <ReadFileIntoBuffer+0x84>)
90009b36:	f7f7 fe4d 	bl	900017d4 <BSP_LCD_SetTextColor>
		BSP_LCD_ClearStringLine(3);
90009b3a:	2003      	movs	r0, #3
90009b3c:	f7f8 f8a6 	bl	90001c8c <BSP_LCD_ClearStringLine>
		BSP_LCD_DisplayStringAtLine(3, (uint8_t *)"    >>  FATAL ERROR FETCHING THE INFORMATION OF THE USB");
90009b40:	2003      	movs	r0, #3
90009b42:	4905      	ldr	r1, [pc, #20]	; (90009b58 <ReadFileIntoBuffer+0x88>)
90009b44:	f7f7 ffdc 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		return AUDIO_ERROR_IO;
90009b48:	4620      	mov	r0, r4
90009b4a:	e7da      	b.n	90009b02 <ReadFileIntoBuffer+0x32>
90009b4c:	200012f4 	.word	0x200012f4
90009b50:	20000790 	.word	0x20000790
90009b54:	ffff0000 	.word	0xffff0000
90009b58:	90010df8 	.word	0x90010df8

90009b5c <TRANSMITTER_Process>:
AUDIO_ErrorTypeDef TRANSMITTER_Process(void) {
90009b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (AudioState) {
90009b60:	4eb0      	ldr	r6, [pc, #704]	; (90009e24 <TRANSMITTER_Process+0x2c8>)
AUDIO_ErrorTypeDef TRANSMITTER_Process(void) {
90009b62:	b092      	sub	sp, #72	; 0x48
	uint32_t byteswritten = 0;
90009b64:	2200      	movs	r2, #0
	switch (AudioState) {
90009b66:	7833      	ldrb	r3, [r6, #0]
	uint32_t byteswritten = 0;
90009b68:	9202      	str	r2, [sp, #8]
	switch (AudioState) {
90009b6a:	3b01      	subs	r3, #1
90009b6c:	2b14      	cmp	r3, #20
90009b6e:	d864      	bhi.n	90009c3a <TRANSMITTER_Process+0xde>
90009b70:	e8df f013 	tbh	[pc, r3, lsl #1]
90009b74:	00ee0128 	.word	0x00ee0128
90009b78:	00630015 	.word	0x00630015
90009b7c:	00660063 	.word	0x00660063
90009b80:	00630077 	.word	0x00630077
90009b84:	00630063 	.word	0x00630063
90009b88:	00a80086 	.word	0x00a80086
90009b8c:	00e700ce 	.word	0x00e700ce
90009b90:	00630063 	.word	0x00630063
90009b94:	03b301ac 	.word	0x03b301ac
90009b98:	03bd0063 	.word	0x03bd0063
90009b9c:	03ee      	.short	0x03ee
		if (BufferCtl.fptr >= WaveFormat.FileSize) {
90009b9e:	4ca2      	ldr	r4, [pc, #648]	; (90009e28 <TRANSMITTER_Process+0x2cc>)
90009ba0:	4da2      	ldr	r5, [pc, #648]	; (90009e2c <TRANSMITTER_Process+0x2d0>)
90009ba2:	6862      	ldr	r2, [r4, #4]
90009ba4:	f8d5 3ac8 	ldr.w	r3, [r5, #2760]	; 0xac8
90009ba8:	429a      	cmp	r2, r3
90009baa:	d304      	bcc.n	90009bb6 <TRANSMITTER_Process+0x5a>
			BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
90009bac:	2002      	movs	r0, #2
90009bae:	f7f7 fafd 	bl	900011ac <BSP_AUDIO_OUT_Stop>
			AudioState = AUDIO_STATE_NEXT;
90009bb2:	2306      	movs	r3, #6
90009bb4:	7033      	strb	r3, [r6, #0]
		if (BufferCtl.state == BUFFER_OFFSET_HALF) {
90009bb6:	7823      	ldrb	r3, [r4, #0]
90009bb8:	2b01      	cmp	r3, #1
90009bba:	d10c      	bne.n	90009bd6 <TRANSMITTER_Process+0x7a>
			if (f_read(&WavFile, &BufferCtl.buff[0],
90009bbc:	ab01      	add	r3, sp, #4
90009bbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90009bc2:	499b      	ldr	r1, [pc, #620]	; (90009e30 <TRANSMITTER_Process+0x2d4>)
90009bc4:	489b      	ldr	r0, [pc, #620]	; (90009e34 <TRANSMITTER_Process+0x2d8>)
90009bc6:	f7fe ff7b 	bl	90008ac0 <f_read>
90009bca:	b158      	cbz	r0, 90009be4 <TRANSMITTER_Process+0x88>
				BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
90009bcc:	2002      	movs	r0, #2
90009bce:	f7f7 faed 	bl	900011ac <BSP_AUDIO_OUT_Stop>
		audio_error = AUDIO_ERROR_IO;
90009bd2:	2501      	movs	r5, #1
		break;
90009bd4:	e2da      	b.n	9000a18c <TRANSMITTER_Process+0x630>
		if (BufferCtl.state == BUFFER_OFFSET_FULL) {
90009bd6:	2b02      	cmp	r3, #2
90009bd8:	d109      	bne.n	90009bee <TRANSMITTER_Process+0x92>
			if (f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE / 2],
90009bda:	ab01      	add	r3, sp, #4
90009bdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90009be0:	4995      	ldr	r1, [pc, #596]	; (90009e38 <TRANSMITTER_Process+0x2dc>)
90009be2:	e7ef      	b.n	90009bc4 <TRANSMITTER_Process+0x68>
			BufferCtl.fptr += bytesread;
90009be4:	6863      	ldr	r3, [r4, #4]
90009be6:	9a01      	ldr	r2, [sp, #4]
			BufferCtl.state = BUFFER_OFFSET_NONE;
90009be8:	7020      	strb	r0, [r4, #0]
			BufferCtl.fptr += bytesread;
90009bea:	4413      	add	r3, r2
90009bec:	6063      	str	r3, [r4, #4]
		elapsed_time = BufferCtl.fptr / WaveFormat.ByteRate;
90009bee:	f8d5 2ae0 	ldr.w	r2, [r5, #2784]	; 0xae0
90009bf2:	6863      	ldr	r3, [r4, #4]
90009bf4:	fbb3 f3f2 	udiv	r3, r3, r2
		if (prev_elapsed_time != elapsed_time) {
90009bf8:	4a90      	ldr	r2, [pc, #576]	; (90009e3c <TRANSMITTER_Process+0x2e0>)
90009bfa:	69d1      	ldr	r1, [r2, #28]
90009bfc:	4299      	cmp	r1, r3
90009bfe:	d01c      	beq.n	90009c3a <TRANSMITTER_Process+0xde>
					(int) (elapsed_time % 60));
90009c00:	213c      	movs	r1, #60	; 0x3c
			prev_elapsed_time = elapsed_time;
90009c02:	61d3      	str	r3, [r2, #28]
			sprintf((char*) str, "[%02d:%02d]", (int) (elapsed_time / 60),
90009c04:	a803      	add	r0, sp, #12
					(int) (elapsed_time % 60));
90009c06:	fbb3 f2f1 	udiv	r2, r3, r1
			sprintf((char*) str, "[%02d:%02d]", (int) (elapsed_time / 60),
90009c0a:	fb01 3312 	mls	r3, r1, r2, r3
90009c0e:	498c      	ldr	r1, [pc, #560]	; (90009e40 <TRANSMITTER_Process+0x2e4>)
90009c10:	f001 fc52 	bl	9000b4b8 <siprintf>
			BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
90009c14:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
90009c18:	f7f7 fddc 	bl	900017d4 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(263, LINE(8), str, LEFT_MODE);
90009c1c:	f7f7 fdfe 	bl	9000181c <BSP_LCD_GetFont>
90009c20:	88c1      	ldrh	r1, [r0, #6]
90009c22:	2303      	movs	r3, #3
90009c24:	f240 1007 	movw	r0, #263	; 0x107
90009c28:	00c9      	lsls	r1, r1, #3
90009c2a:	aa03      	add	r2, sp, #12
90009c2c:	b289      	uxth	r1, r1
90009c2e:	f7f7 ff11 	bl	90001a54 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
90009c32:	f04f 30ff 	mov.w	r0, #4294967295
90009c36:	f7f7 fdcd 	bl	900017d4 <BSP_LCD_SetTextColor>
		AUDIO_AcquireTouchButtons();
90009c3a:	f7ff fecb 	bl	900099d4 <AUDIO_AcquireTouchButtons>
		break;
90009c3e:	e0bf      	b.n	90009dc0 <TRANSMITTER_Process+0x264>
		if (++FilePos >= AUDIO_GetWavObjectNumber()) {
90009c40:	4d7a      	ldr	r5, [pc, #488]	; (90009e2c <TRANSMITTER_Process+0x2d0>)
90009c42:	f8b5 4af0 	ldrh.w	r4, [r5, #2800]	; 0xaf0
90009c46:	3401      	adds	r4, #1
90009c48:	b224      	sxth	r4, r4
90009c4a:	f8a5 4af0 	strh.w	r4, [r5, #2800]	; 0xaf0
90009c4e:	f7ff fbaf 	bl	900093b0 <AUDIO_GetWavObjectNumber>
90009c52:	4284      	cmp	r4, r0
			FilePos = 0;
90009c54:	bfa4      	itt	ge
90009c56:	2300      	movge	r3, #0
90009c58:	f8a5 3af0 	strhge.w	r3, [r5, #2800]	; 0xaf0
		AudioState = AUDIO_STATE_INIT;
90009c5c:	2302      	movs	r3, #2
				AudioState = AUDIO_STATE_RETURN;
90009c5e:	7033      	strb	r3, [r6, #0]
90009c60:	e0ae      	b.n	90009dc0 <TRANSMITTER_Process+0x264>
		if (--FilePos < 0) {
90009c62:	4c72      	ldr	r4, [pc, #456]	; (90009e2c <TRANSMITTER_Process+0x2d0>)
90009c64:	f8b4 3af0 	ldrh.w	r3, [r4, #2800]	; 0xaf0
90009c68:	3b01      	subs	r3, #1
90009c6a:	b21b      	sxth	r3, r3
90009c6c:	2b00      	cmp	r3, #0
90009c6e:	f8a4 3af0 	strh.w	r3, [r4, #2800]	; 0xaf0
90009c72:	daf3      	bge.n	90009c5c <TRANSMITTER_Process+0x100>
			FilePos = AUDIO_GetWavObjectNumber() - 1;
90009c74:	f7ff fb9c 	bl	900093b0 <AUDIO_GetWavObjectNumber>
90009c78:	3801      	subs	r0, #1
90009c7a:	f8a4 0af0 	strh.w	r0, [r4, #2800]	; 0xaf0
90009c7e:	e7ed      	b.n	90009c5c <TRANSMITTER_Process+0x100>
		BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
90009c80:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
90009c84:	f7f7 fda6 	bl	900017d4 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t*) "  [PAUSE]",
90009c88:	f7f7 fdc8 	bl	9000181c <BSP_LCD_GetFont>
90009c8c:	88c1      	ldrh	r1, [r0, #6]
90009c8e:	2303      	movs	r3, #3
90009c90:	4a6c      	ldr	r2, [pc, #432]	; (90009e44 <TRANSMITTER_Process+0x2e8>)
90009c92:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
90009c96:	20fa      	movs	r0, #250	; 0xfa
90009c98:	b289      	uxth	r1, r1
90009c9a:	f7f7 fedb 	bl	90001a54 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_RED); /* Display red pause rectangles */
90009c9e:	486a      	ldr	r0, [pc, #424]	; (90009e48 <TRANSMITTER_Process+0x2ec>)
90009ca0:	f7f7 fd98 	bl	900017d4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN, 15,
90009ca4:	2328      	movs	r3, #40	; 0x28
90009ca6:	220f      	movs	r2, #15
90009ca8:	21d4      	movs	r1, #212	; 0xd4
90009caa:	2064      	movs	r0, #100	; 0x64
90009cac:	f7f7 ffb2 	bl	90001c14 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15,
90009cb0:	2328      	movs	r3, #40	; 0x28
90009cb2:	220f      	movs	r2, #15
90009cb4:	21d4      	movs	r1, #212	; 0xd4
90009cb6:	2078      	movs	r0, #120	; 0x78
90009cb8:	f7f7 ffac 	bl	90001c14 <BSP_LCD_FillRect>
		BSP_AUDIO_OUT_Pause();
90009cbc:	f7f7 fa52 	bl	90001164 <BSP_AUDIO_OUT_Pause>
		AudioState = AUDIO_STATE_WAIT;
90009cc0:	2301      	movs	r3, #1
90009cc2:	e7cc      	b.n	90009c5e <TRANSMITTER_Process+0x102>
		BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
90009cc4:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
90009cc8:	f7f7 fd84 	bl	900017d4 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t*) "  [PLAY ]",
90009ccc:	f7f7 fda6 	bl	9000181c <BSP_LCD_GetFont>
90009cd0:	88c1      	ldrh	r1, [r0, #6]
90009cd2:	2303      	movs	r3, #3
90009cd4:	4a5d      	ldr	r2, [pc, #372]	; (90009e4c <TRANSMITTER_Process+0x2f0>)
90009cd6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
90009cda:	20fa      	movs	r0, #250	; 0xfa
90009cdc:	b289      	uxth	r1, r1
90009cde:	f7f7 feb9 	bl	90001a54 <BSP_LCD_DisplayStringAt>
		BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN, 15,
90009ce2:	2328      	movs	r3, #40	; 0x28
90009ce4:	220f      	movs	r2, #15
90009ce6:	21d4      	movs	r1, #212	; 0xd4
90009ce8:	2064      	movs	r0, #100	; 0x64
90009cea:	f7f7 ff93 	bl	90001c14 <BSP_LCD_FillRect>
		BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15,
90009cee:	2328      	movs	r3, #40	; 0x28
90009cf0:	220f      	movs	r2, #15
90009cf2:	21d4      	movs	r1, #212	; 0xd4
90009cf4:	2078      	movs	r0, #120	; 0x78
90009cf6:	f7f7 ff8d 	bl	90001c14 <BSP_LCD_FillRect>
		BSP_AUDIO_OUT_Resume();
90009cfa:	f7f7 fa45 	bl	90001188 <BSP_AUDIO_OUT_Resume>
		if (uwVolume == 0) {
90009cfe:	4b4f      	ldr	r3, [pc, #316]	; (90009e3c <TRANSMITTER_Process+0x2e0>)
90009d00:	681a      	ldr	r2, [r3, #0]
90009d02:	b91a      	cbnz	r2, 90009d0c <TRANSMITTER_Process+0x1b0>
			BSP_AUDIO_OUT_SetVolume(uwVolume);
90009d04:	6818      	ldr	r0, [r3, #0]
90009d06:	b2c0      	uxtb	r0, r0
90009d08:	f7f7 fa6a 	bl	900011e0 <BSP_AUDIO_OUT_SetVolume>
		AudioState = AUDIO_STATE_PLAY;
90009d0c:	2303      	movs	r3, #3
90009d0e:	e7a6      	b.n	90009c5e <TRANSMITTER_Process+0x102>
		if (uwVolume <= 90) {
90009d10:	4c4a      	ldr	r4, [pc, #296]	; (90009e3c <TRANSMITTER_Process+0x2e0>)
90009d12:	6823      	ldr	r3, [r4, #0]
90009d14:	2b5a      	cmp	r3, #90	; 0x5a
90009d16:	d802      	bhi.n	90009d1e <TRANSMITTER_Process+0x1c2>
			uwVolume += 10;
90009d18:	6823      	ldr	r3, [r4, #0]
90009d1a:	330a      	adds	r3, #10
90009d1c:	6023      	str	r3, [r4, #0]
		BSP_AUDIO_OUT_SetVolume(uwVolume);
90009d1e:	6820      	ldr	r0, [r4, #0]
90009d20:	b2c0      	uxtb	r0, r0
90009d22:	f7f7 fa5d 	bl	900011e0 <BSP_AUDIO_OUT_SetVolume>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
90009d26:	f04f 30ff 	mov.w	r0, #4294967295
90009d2a:	f7f7 fd53 	bl	900017d4 <BSP_LCD_SetTextColor>
		sprintf((char*) str, "Volume : %lu ", uwVolume);
90009d2e:	6822      	ldr	r2, [r4, #0]
90009d30:	4947      	ldr	r1, [pc, #284]	; (90009e50 <TRANSMITTER_Process+0x2f4>)
90009d32:	a803      	add	r0, sp, #12
90009d34:	f001 fbc0 	bl	9000b4b8 <siprintf>
		BSP_LCD_DisplayStringAtLine(9, str);
90009d38:	a903      	add	r1, sp, #12
90009d3a:	2009      	movs	r0, #9
90009d3c:	f7f7 fee0 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
90009d40:	e7e4      	b.n	90009d0c <TRANSMITTER_Process+0x1b0>
		if (uwVolume >= 10) {
90009d42:	4c3e      	ldr	r4, [pc, #248]	; (90009e3c <TRANSMITTER_Process+0x2e0>)
90009d44:	6823      	ldr	r3, [r4, #0]
90009d46:	2b09      	cmp	r3, #9
90009d48:	d9e9      	bls.n	90009d1e <TRANSMITTER_Process+0x1c2>
			uwVolume -= 10;
90009d4a:	6823      	ldr	r3, [r4, #0]
90009d4c:	3b0a      	subs	r3, #10
90009d4e:	e7e5      	b.n	90009d1c <TRANSMITTER_Process+0x1c0>
		sprintf((char*) strFileName, "    >> Prepared file to TX (%d/%d):", FilePos + 1, FileList.ptr);
90009d50:	4c36      	ldr	r4, [pc, #216]	; (90009e2c <TRANSMITTER_Process+0x2d0>)
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009d52:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009d56:	f7f7 fd3d 	bl	900017d4 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
90009d5a:	483e      	ldr	r0, [pc, #248]	; (90009e54 <TRANSMITTER_Process+0x2f8>)
90009d5c:	f7f7 fd52 	bl	90001804 <BSP_LCD_SetFont>
		sprintf((char*) strFileName, "    >> Prepared file to TX (%d/%d):", FilePos + 1, FileList.ptr);
90009d60:	4d3d      	ldr	r5, [pc, #244]	; (90009e58 <TRANSMITTER_Process+0x2fc>)
90009d62:	f9b4 2af0 	ldrsh.w	r2, [r4, #2800]	; 0xaf0
90009d66:	a803      	add	r0, sp, #12
90009d68:	f8b5 33d8 	ldrh.w	r3, [r5, #984]	; 0x3d8
90009d6c:	3201      	adds	r2, #1
90009d6e:	493b      	ldr	r1, [pc, #236]	; (90009e5c <TRANSMITTER_Process+0x300>)
90009d70:	f001 fba2 	bl	9000b4b8 <siprintf>
		BSP_LCD_ClearStringLine(6);
90009d74:	2006      	movs	r0, #6
90009d76:	f7f7 ff89 	bl	90001c8c <BSP_LCD_ClearStringLine>
		BSP_LCD_DisplayStringAtLine(6, strFileName);
90009d7a:	a903      	add	r1, sp, #12
90009d7c:	2006      	movs	r0, #6
90009d7e:	f7f7 febf 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		sprintf((char*) strFileName, "       %s", (char*) FileList.file[FilePos].name);
90009d82:	2329      	movs	r3, #41	; 0x29
90009d84:	f8b4 2af0 	ldrh.w	r2, [r4, #2800]	; 0xaf0
90009d88:	2401      	movs	r4, #1
90009d8a:	4935      	ldr	r1, [pc, #212]	; (90009e60 <TRANSMITTER_Process+0x304>)
90009d8c:	a803      	add	r0, sp, #12
90009d8e:	fb12 4203 	smlabb	r2, r2, r3, r4
90009d92:	442a      	add	r2, r5
90009d94:	f001 fb90 	bl	9000b4b8 <siprintf>
		BSP_LCD_ClearStringLine(7);
90009d98:	2007      	movs	r0, #7
90009d9a:	f7f7 ff77 	bl	90001c8c <BSP_LCD_ClearStringLine>
		BSP_LCD_DisplayStringAtLine(7, strFileName);
90009d9e:	a903      	add	r1, sp, #12
90009da0:	2007      	movs	r0, #7
90009da2:	f7f7 fead 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(9, (uint8_t*) "   >>  PREVIOUS FILE         NEXT FILE");
90009da6:	492f      	ldr	r1, [pc, #188]	; (90009e64 <TRANSMITTER_Process+0x308>)
90009da8:	2009      	movs	r0, #9
90009daa:	f7f7 fea9 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(12, (uint8_t*) "                >>  BEGING TRANSMISSION");
90009dae:	492e      	ldr	r1, [pc, #184]	; (90009e68 <TRANSMITTER_Process+0x30c>)
90009db0:	200c      	movs	r0, #12
90009db2:	f7f7 fea5 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(15, (uint8_t*) "                >>  BACK TO MAIN MENU");
90009db6:	492d      	ldr	r1, [pc, #180]	; (90009e6c <TRANSMITTER_Process+0x310>)
90009db8:	200f      	movs	r0, #15
90009dba:	f7f7 fea1 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		AudioState = AUDIO_STATE_WAIT;
90009dbe:	7034      	strb	r4, [r6, #0]
	AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
90009dc0:	2500      	movs	r5, #0
90009dc2:	e1e3      	b.n	9000a18c <TRANSMITTER_Process+0x630>
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
90009dc4:	4c19      	ldr	r4, [pc, #100]	; (90009e2c <TRANSMITTER_Process+0x2d0>)
90009dc6:	f894 3af4 	ldrb.w	r3, [r4, #2804]	; 0xaf4
		BSP_TS_GetState(&TS_State);
90009dca:	f604 20f4 	addw	r0, r4, #2804	; 0xaf4
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
90009dce:	2b01      	cmp	r3, #1
90009dd0:	d106      	bne.n	90009de0 <TRANSMITTER_Process+0x284>
		BSP_TS_GetState(&TS_State);
90009dd2:	f7f8 fbf3 	bl	900025bc <BSP_TS_GetState>
		BSP_LCD_DisplayStringAtLine(14, (uint8_t*) "DEMOSTRACION PARA LOS VIEJITOS");
90009dd6:	4926      	ldr	r1, [pc, #152]	; (90009e70 <TRANSMITTER_Process+0x314>)
90009dd8:	200e      	movs	r0, #14
			BSP_LCD_DisplayStringAtLine(4, strFileName);
90009dda:	f7f7 fe91 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
90009dde:	e7ef      	b.n	90009dc0 <TRANSMITTER_Process+0x264>
		BSP_TS_GetState(&TS_State);
90009de0:	f7f8 fbec 	bl	900025bc <BSP_TS_GetState>
		if (TS_State.touchDetected == 1) {
90009de4:	f894 3af4 	ldrb.w	r3, [r4, #2804]	; 0xaf4
90009de8:	2b01      	cmp	r3, #1
90009dea:	d1f4      	bne.n	90009dd6 <TRANSMITTER_Process+0x27a>
			if ((TS_State.touchX[0] > TOUCH_PREVIOUS_XMIN) &&
90009dec:	f8b4 3af6 	ldrh.w	r3, [r4, #2806]	; 0xaf6
90009df0:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
90009df4:	2a71      	cmp	r2, #113	; 0x71
90009df6:	d808      	bhi.n	90009e0a <TRANSMITTER_Process+0x2ae>
				(TS_State.touchX[0] < TOUCH_PREVIOUS_XMAX) &&
90009df8:	f8b4 2b00 	ldrh.w	r2, [r4, #2816]	; 0xb00
90009dfc:	3a88      	subs	r2, #136	; 0x88
90009dfe:	b292      	uxth	r2, r2
90009e00:	2a21      	cmp	r2, #33	; 0x21
90009e02:	d84e      	bhi.n	90009ea2 <TRANSMITTER_Process+0x346>
				AudioState = AUDIO_STATE_PREVIOUS;
90009e04:	2307      	movs	r3, #7
				AudioState = AUDIO_STATE_BEGING_TRANSMISSION;
90009e06:	7033      	strb	r3, [r6, #0]
90009e08:	e7e5      	b.n	90009dd6 <TRANSMITTER_Process+0x27a>
			}else if ((TS_State.touchX[0] > TOUCH_NEXT_XMIN) &&
90009e0a:	f46f 7196 	mvn.w	r1, #300	; 0x12c
90009e0e:	185a      	adds	r2, r3, r1
90009e10:	2abf      	cmp	r2, #191	; 0xbf
90009e12:	d82f      	bhi.n	90009e74 <TRANSMITTER_Process+0x318>
					  (TS_State.touchX[0] < TOUCH_NEXT_XMAX) &&
90009e14:	f8b4 2b00 	ldrh.w	r2, [r4, #2816]	; 0xb00
90009e18:	3a88      	subs	r2, #136	; 0x88
90009e1a:	b292      	uxth	r2, r2
90009e1c:	2a21      	cmp	r2, #33	; 0x21
90009e1e:	d829      	bhi.n	90009e74 <TRANSMITTER_Process+0x318>
				AudioState = AUDIO_STATE_NEXT;
90009e20:	2306      	movs	r3, #6
90009e22:	e7f0      	b.n	90009e06 <TRANSMITTER_Process+0x2aa>
90009e24:	200012f2 	.word	0x200012f2
90009e28:	200086a8 	.word	0x200086a8
90009e2c:	200012f4 	.word	0x200012f4
90009e30:	200066a8 	.word	0x200066a8
90009e34:	20001b88 	.word	0x20001b88
90009e38:	200076a8 	.word	0x200076a8
90009e3c:	200000b8 	.word	0x200000b8
90009e40:	90010e84 	.word	0x90010e84
90009e44:	90010ed1 	.word	0x90010ed1
90009e48:	ffff0000 	.word	0xffff0000
90009e4c:	90010ec7 	.word	0x90010ec7
90009e50:	90010edb 	.word	0x90010edb
90009e54:	20000078 	.word	0x20000078
90009e58:	20000790 	.word	0x20000790
90009e5c:	90010ee9 	.word	0x90010ee9
90009e60:	90010f0d 	.word	0x90010f0d
90009e64:	90010f17 	.word	0x90010f17
90009e68:	90010f3e 	.word	0x90010f3e
90009e6c:	90010f66 	.word	0x90010f66
90009e70:	90010f8c 	.word	0x90010f8c
			}else if ((TS_State.touchX[0] > TOUCH_RETURN_XMIN) &&
90009e74:	f1a3 02c4 	sub.w	r2, r3, #196	; 0xc4
90009e78:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
90009e7c:	d211      	bcs.n	90009ea2 <TRANSMITTER_Process+0x346>
					  (TS_State.touchX[0] < TOUCH_RETURN_XMAX) &&
90009e7e:	f8b4 2b00 	ldrh.w	r2, [r4, #2816]	; 0xb00
90009e82:	3ae7      	subs	r2, #231	; 0xe7
90009e84:	b292      	uxth	r2, r2
90009e86:	2a1c      	cmp	r2, #28
90009e88:	d80b      	bhi.n	90009ea2 <TRANSMITTER_Process+0x346>
				BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
90009e8a:	48cf      	ldr	r0, [pc, #828]	; (9000a1c8 <TRANSMITTER_Process+0x66c>)
90009e8c:	f7f7 fcd2 	bl	90001834 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009e90:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009e94:	f7f7 fc9e 	bl	900017d4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
90009e98:	48cc      	ldr	r0, [pc, #816]	; (9000a1cc <TRANSMITTER_Process+0x670>)
90009e9a:	f7f7 fcb3 	bl	90001804 <BSP_LCD_SetFont>
				AudioState = AUDIO_STATE_RETURN;
90009e9e:	2315      	movs	r3, #21
90009ea0:	e7b1      	b.n	90009e06 <TRANSMITTER_Process+0x2aa>
			}else if((TS_State.touchX[0] > TOUCH_BEGIN_TRANSMISSION_XMIN) &&
90009ea2:	3bba      	subs	r3, #186	; 0xba
90009ea4:	2bf3      	cmp	r3, #243	; 0xf3
90009ea6:	d896      	bhi.n	90009dd6 <TRANSMITTER_Process+0x27a>
					 (TS_State.touchX[0] < TOUCH_BEGIN_TRANSMISSION_XMAX) &&
90009ea8:	f8b4 3b00 	ldrh.w	r3, [r4, #2816]	; 0xb00
90009eac:	3bb5      	subs	r3, #181	; 0xb5
90009eae:	b29b      	uxth	r3, r3
90009eb0:	2b21      	cmp	r3, #33	; 0x21
90009eb2:	d890      	bhi.n	90009dd6 <TRANSMITTER_Process+0x27a>
				BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
90009eb4:	48c4      	ldr	r0, [pc, #784]	; (9000a1c8 <TRANSMITTER_Process+0x66c>)
90009eb6:	f7f7 fcbd 	bl	90001834 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009eba:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009ebe:	f7f7 fc89 	bl	900017d4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
90009ec2:	48c2      	ldr	r0, [pc, #776]	; (9000a1cc <TRANSMITTER_Process+0x670>)
90009ec4:	f7f7 fc9e 	bl	90001804 <BSP_LCD_SetFont>
				AudioState = AUDIO_STATE_BEGING_TRANSMISSION;
90009ec8:	2311      	movs	r3, #17
90009eca:	e79c      	b.n	90009e06 <TRANSMITTER_Process+0x2aa>
		sprintf((char*) strFileName, "          / \\  `.  __..-,O  / \\_/ \\_/ %s", (char*) FileList.file[FilePos].name);
90009ecc:	4cc0      	ldr	r4, [pc, #768]	; (9000a1d0 <TRANSMITTER_Process+0x674>)
		BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"    >> PREPARING THE TRANSMISSION... CREATING .wav FILE FROM THE SELECTED FILE");
90009ece:	2002      	movs	r0, #2
90009ed0:	49c0      	ldr	r1, [pc, #768]	; (9000a1d4 <TRANSMITTER_Process+0x678>)
		sprintf((char*) strFileName, "          / \\  `.  __..-,O  / \\_/ \\_/ %s", (char*) FileList.file[FilePos].name);
90009ed2:	2701      	movs	r7, #1
		BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"    >> PREPARING THE TRANSMISSION... CREATING .wav FILE FROM THE SELECTED FILE");
90009ed4:	f7f7 fe14 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		sprintf((char*) strFileName, "          / \\  `.  __..-,O  / \\_/ \\_/ %s", (char*) FileList.file[FilePos].name);
90009ed8:	f8b4 3af0 	ldrh.w	r3, [r4, #2800]	; 0xaf0
90009edc:	2229      	movs	r2, #41	; 0x29
90009ede:	49be      	ldr	r1, [pc, #760]	; (9000a1d8 <TRANSMITTER_Process+0x67c>)
90009ee0:	a803      	add	r0, sp, #12
90009ee2:	fb13 7302 	smlabb	r3, r3, r2, r7
90009ee6:	4abd      	ldr	r2, [pc, #756]	; (9000a1dc <TRANSMITTER_Process+0x680>)
90009ee8:	441a      	add	r2, r3
90009eea:	f001 fae5 	bl	9000b4b8 <siprintf>
		BSP_LCD_DisplayStringAtLine(6, (uint8_t *)"           ,-.               _   _");
90009eee:	49bc      	ldr	r1, [pc, #752]	; (9000a1e0 <TRANSMITTER_Process+0x684>)
90009ef0:	2006      	movs	r0, #6
90009ef2:	f7f7 fe05 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(7, strFileName);
90009ef6:	a903      	add	r1, sp, #12
90009ef8:	2007      	movs	r0, #7
90009efa:	f7f7 fe01 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(8, (uint8_t *)"         :   \\ --''_..-'.'");
90009efe:	49b9      	ldr	r1, [pc, #740]	; (9000a1e4 <TRANSMITTER_Process+0x688>)
90009f00:	2008      	movs	r0, #8
90009f02:	f7f7 fdfd 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"         |    . .-' `. '.");
90009f06:	49b8      	ldr	r1, [pc, #736]	; (9000a1e8 <TRANSMITTER_Process+0x68c>)
90009f08:	2009      	movs	r0, #9
90009f0a:	f7f7 fdf9 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"         :     .     .`.'");
90009f0e:	49b7      	ldr	r1, [pc, #732]	; (9000a1ec <TRANSMITTER_Process+0x690>)
90009f10:	200a      	movs	r0, #10
90009f12:	f7f7 fdf5 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(11, (uint8_t *)"          \\     `.  /  ..");
90009f16:	49b6      	ldr	r1, [pc, #728]	; (9000a1f0 <TRANSMITTER_Process+0x694>)
90009f18:	200b      	movs	r0, #11
90009f1a:	f7f7 fdf1 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"           \\      `.   ' .");
90009f1e:	49b5      	ldr	r1, [pc, #724]	; (9000a1f4 <TRANSMITTER_Process+0x698>)
90009f20:	200c      	movs	r0, #12
90009f22:	f7f7 fded 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"            `,       `.   \\");
90009f26:	49b4      	ldr	r1, [pc, #720]	; (9000a1f8 <TRANSMITTER_Process+0x69c>)
90009f28:	200d      	movs	r0, #13
90009f2a:	f7f7 fde9 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"           ,|,`.        `-.\\");
90009f2e:	49b3      	ldr	r1, [pc, #716]	; (9000a1fc <TRANSMITTER_Process+0x6a0>)
90009f30:	200e      	movs	r0, #14
90009f32:	f7f7 fde5 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(15, (uint8_t *)"          '.||  ``-...__..-`");
90009f36:	49b2      	ldr	r1, [pc, #712]	; (9000a200 <TRANSMITTER_Process+0x6a4>)
90009f38:	200f      	movs	r0, #15
90009f3a:	f7f7 fde1 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(16, (uint8_t *)"           |  |");
90009f3e:	49b1      	ldr	r1, [pc, #708]	; (9000a204 <TRANSMITTER_Process+0x6a8>)
90009f40:	2010      	movs	r0, #16
90009f42:	f7f7 fddd 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(17, (uint8_t *)"           |__|");
90009f46:	49b0      	ldr	r1, [pc, #704]	; (9000a208 <TRANSMITTER_Process+0x6ac>)
90009f48:	2011      	movs	r0, #17
90009f4a:	f7f7 fdd9 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(18, (uint8_t *)"           /||\\");
90009f4e:	49af      	ldr	r1, [pc, #700]	; (9000a20c <TRANSMITTER_Process+0x6b0>)
90009f50:	2012      	movs	r0, #18
90009f52:	f7f7 fdd5 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(19, (uint8_t *)"          //||\\\\");
90009f56:	49ae      	ldr	r1, [pc, #696]	; (9000a210 <TRANSMITTER_Process+0x6b4>)
90009f58:	2013      	movs	r0, #19
90009f5a:	f7f7 fdd1 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(20, (uint8_t *)"         // || \\\\");
90009f5e:	49ad      	ldr	r1, [pc, #692]	; (9000a214 <TRANSMITTER_Process+0x6b8>)
90009f60:	2014      	movs	r0, #20
90009f62:	f7f7 fdcd 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(21, (uint8_t *)"      __//__||__\\\\__");
90009f66:	49ac      	ldr	r1, [pc, #688]	; (9000a218 <TRANSMITTER_Process+0x6bc>)
90009f68:	2015      	movs	r0, #21
90009f6a:	f7f7 fdc9 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		ReadFileIntoBuffer(FilePos);
90009f6e:	f894 0af0 	ldrb.w	r0, [r4, #2800]	; 0xaf0
90009f72:	f7ff fdad 	bl	90009ad0 <ReadFileIntoBuffer>
		uint8_t fileCreation = f_open(&MessageWavFile, (char*) "mensajeModulado.wav", FA_CREATE_ALWAYS | FA_WRITE);
90009f76:	220a      	movs	r2, #10
90009f78:	49a8      	ldr	r1, [pc, #672]	; (9000a21c <TRANSMITTER_Process+0x6c0>)
90009f7a:	4620      	mov	r0, r4
90009f7c:	f7fe fc90 	bl	900088a0 <f_open>
		if(fileCreation == FR_OK)
90009f80:	4605      	mov	r5, r0
90009f82:	2800      	cmp	r0, #0
90009f84:	f040 8116 	bne.w	9000a1b4 <TRANSMITTER_Process+0x658>
{
  /* Initialize the encoder structure */
  MessageWaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
  MessageWaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
  MessageWaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
  MessageWaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
90009f88:	4ba5      	ldr	r3, [pc, #660]	; (9000a220 <TRANSMITTER_Process+0x6c4>)
  MessageWaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
90009f8a:	2102      	movs	r1, #2
  pHeader[17]  = 0x00;
  pHeader[18]  = 0x00;
  pHeader[19]  = 0x00;

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
90009f8c:	f884 7b60 	strb.w	r7, [r4, #2912]	; 0xb60
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
  pHeader[23]  = 0x00;

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
90009f90:	2744      	movs	r7, #68	; 0x44
  MessageWaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
90009f92:	f8c4 3b24 	str.w	r3, [r4, #2852]	; 0xb24
  MessageWaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
90009f96:	f64a 4344 	movw	r3, #44100	; 0xac44
  pHeader[5] = 0x4C;
90009f9a:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
  pHeader[14]  = 't';
90009f9e:	f04f 0e74 	mov.w	lr, #116	; 0x74
  MessageWaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
90009fa2:	f8c4 3b38 	str.w	r3, [r4, #2872]	; 0xb38
  MessageWaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
90009fa6:	222c      	movs	r2, #44	; 0x2c
  MessageWaveFormat.ByteRate = (MessageWaveFormat.SampleRate * \
90009fa8:	4b9e      	ldr	r3, [pc, #632]	; (9000a224 <TRANSMITTER_Process+0x6c8>)
  pHeader[4] = 0x00;
90009faa:	f884 0b50 	strb.w	r0, [r4, #2896]	; 0xb50
  pHeader[6] = 0x1D;
90009fae:	201d      	movs	r0, #29
  MessageWaveFormat.ByteRate = (MessageWaveFormat.SampleRate * \
90009fb0:	f8c4 3b3c 	str.w	r3, [r4, #2876]	; 0xb3c
  MessageWaveFormat.BlockAlign = MessageWaveFormat.NbrChannels * \
90009fb4:	4b9c      	ldr	r3, [pc, #624]	; (9000a228 <TRANSMITTER_Process+0x6cc>)
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
90009fb6:	f884 7b64 	strb.w	r7, [r4, #2916]	; 0xb64
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
90009fba:	27ac      	movs	r7, #172	; 0xac
  MessageWaveFormat.BlockAlign = MessageWaveFormat.NbrChannels * \
90009fbc:	f8c4 3b40 	str.w	r3, [r4, #2880]	; 0xb40
  pHeader[0] = 'R';
90009fc0:	2352      	movs	r3, #82	; 0x52
  MessageWaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
90009fc2:	f8c4 2b30 	str.w	r2, [r4, #2864]	; 0xb30
  pHeader[0] = 'R';
90009fc6:	f884 3b4c 	strb.w	r3, [r4, #2892]	; 0xb4c
  pHeader[1] = 'I';
90009fca:	2349      	movs	r3, #73	; 0x49
  MessageWaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
90009fcc:	f8a4 1b36 	strh.w	r1, [r4, #2870]	; 0xb36
  pHeader[1] = 'I';
90009fd0:	f884 3b4d 	strb.w	r3, [r4, #2893]	; 0xb4d
  pHeader[2] = 'F';
90009fd4:	2346      	movs	r3, #70	; 0x46
  pHeader[5] = 0x4C;
90009fd6:	f884 cb51 	strb.w	ip, [r4, #2897]	; 0xb51
  pHeader[2] = 'F';
90009fda:	f884 3b4e 	strb.w	r3, [r4, #2894]	; 0xb4e
  pHeader[3] = 'F';
90009fde:	f884 3b4f 	strb.w	r3, [r4, #2895]	; 0xb4f
  pHeader[8]  = 'W';
90009fe2:	2357      	movs	r3, #87	; 0x57
  pHeader[6] = 0x1D;
90009fe4:	f884 0b52 	strb.w	r0, [r4, #2898]	; 0xb52
  pHeader[8]  = 'W';
90009fe8:	f884 3b54 	strb.w	r3, [r4, #2900]	; 0xb54
  pHeader[9]  = 'A';
90009fec:	2341      	movs	r3, #65	; 0x41
  pHeader[7] = 0x00;
90009fee:	f884 5b53 	strb.w	r5, [r4, #2899]	; 0xb53
  pHeader[9]  = 'A';
90009ff2:	f884 3b55 	strb.w	r3, [r4, #2901]	; 0xb55
  pHeader[10] = 'V';
90009ff6:	2356      	movs	r3, #86	; 0x56
  pHeader[14]  = 't';
90009ff8:	f884 eb5a 	strb.w	lr, [r4, #2906]	; 0xb5a
  pHeader[10] = 'V';
90009ffc:	f884 3b56 	strb.w	r3, [r4, #2902]	; 0xb56
  pHeader[11] = 'E';
9000a000:	2345      	movs	r3, #69	; 0x45
  pHeader[17]  = 0x00;
9000a002:	f884 5b5d 	strb.w	r5, [r4, #2909]	; 0xb5d
  pHeader[11] = 'E';
9000a006:	f884 3b57 	strb.w	r3, [r4, #2903]	; 0xb57
  pHeader[12]  = 'f';
9000a00a:	2366      	movs	r3, #102	; 0x66
  pHeader[18]  = 0x00;
9000a00c:	f884 5b5e 	strb.w	r5, [r4, #2910]	; 0xb5e
  pHeader[12]  = 'f';
9000a010:	f884 3b58 	strb.w	r3, [r4, #2904]	; 0xb58
  pHeader[13]  = 'm';
9000a014:	236d      	movs	r3, #109	; 0x6d
  pHeader[19]  = 0x00;
9000a016:	f884 5b5f 	strb.w	r5, [r4, #2911]	; 0xb5f
  pHeader[13]  = 'm';
9000a01a:	f884 3b59 	strb.w	r3, [r4, #2905]	; 0xb59
  pHeader[15]  = ' ';
9000a01e:	2320      	movs	r3, #32
  pHeader[21]  = 0x00;
9000a020:	f884 5b61 	strb.w	r5, [r4, #2913]	; 0xb61
  pHeader[15]  = ' ';
9000a024:	f884 3b5b 	strb.w	r3, [r4, #2907]	; 0xb5b
  pHeader[16]  = 0x10;
9000a028:	2310      	movs	r3, #16
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
9000a02a:	f884 1b62 	strb.w	r1, [r4, #2914]	; 0xb62
  pHeader[16]  = 0x10;
9000a02e:	f884 3b5c 	strb.w	r3, [r4, #2908]	; 0xb5c
  pHeader[23]  = 0x00;
9000a032:	f884 5b63 	strb.w	r5, [r4, #2915]	; 0xb63
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
9000a036:	f884 7b65 	strb.w	r7, [r4, #2917]	; 0xb65
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
9000a03a:	27b1      	movs	r7, #177	; 0xb1
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
9000a03c:	f884 5b66 	strb.w	r5, [r4, #2918]	; 0xb66
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
9000a040:	f884 3b68 	strb.w	r3, [r4, #2920]	; 0xb68
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
  pHeader[33]  = 0x00;

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
9000a044:	f884 3b6e 	strb.w	r3, [r4, #2926]	; 0xb6e
  pHeader[35]  = 0x00;

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
9000a048:	2364      	movs	r3, #100	; 0x64
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
9000a04a:	f884 7b69 	strb.w	r7, [r4, #2921]	; 0xb69
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
9000a04e:	2704      	movs	r7, #4
  pHeader[36]  = 'd';
9000a050:	f884 3b70 	strb.w	r3, [r4, #2928]	; 0xb70
  pHeader[37]  = 'a';
9000a054:	2361      	movs	r3, #97	; 0x61
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
9000a056:	f884 5b67 	strb.w	r5, [r4, #2919]	; 0xb67
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
9000a05a:	f884 1b6a 	strb.w	r1, [r4, #2922]	; 0xb6a
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
9000a05e:	f604 314c 	addw	r1, r4, #2892	; 0xb4c
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
9000a062:	f884 5b6b 	strb.w	r5, [r4, #2923]	; 0xb6b
  pHeader[33]  = 0x00;
9000a066:	f884 5b6d 	strb.w	r5, [r4, #2925]	; 0xb6d
  pHeader[35]  = 0x00;
9000a06a:	f884 5b6f 	strb.w	r5, [r4, #2927]	; 0xb6f
  pHeader[37]  = 'a';
9000a06e:	f884 3b71 	strb.w	r3, [r4, #2929]	; 0xb71
  pHeader[38]  = 't';
  pHeader[39]  = 'a';
9000a072:	f884 3b73 	strb.w	r3, [r4, #2931]	; 0xb73
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
9000a076:	ab02      	add	r3, sp, #8

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
9000a078:	f884 5b74 	strb.w	r5, [r4, #2932]	; 0xb74
  pHeader[41]  = 0x4C;
  pHeader[42]  = 0x1D;
9000a07c:	f884 0b76 	strb.w	r0, [r4, #2934]	; 0xb76
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
9000a080:	4620      	mov	r0, r4
  pHeader[43]  = 0x00;
9000a082:	f884 5b77 	strb.w	r5, [r4, #2935]	; 0xb77
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
9000a086:	f884 7b6c 	strb.w	r7, [r4, #2924]	; 0xb6c
  pHeader[38]  = 't';
9000a08a:	f884 eb72 	strb.w	lr, [r4, #2930]	; 0xb72
  pHeader[41]  = 0x4C;
9000a08e:	f884 cb75 	strb.w	ip, [r4, #2933]	; 0xb75
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
9000a092:	f7fe fdc6 	bl	90008c22 <f_write>
			if(headerWrite == FR_OK)
9000a096:	4605      	mov	r5, r0
9000a098:	2800      	cmp	r0, #0
9000a09a:	d17b      	bne.n	9000a194 <TRANSMITTER_Process+0x638>
				WaveBuffer.fptr = byteswritten;
9000a09c:	4b63      	ldr	r3, [pc, #396]	; (9000a22c <TRANSMITTER_Process+0x6d0>)
9000a09e:	9a02      	ldr	r2, [sp, #8]
				WaveBuffer.pcm_ptr = 0;
9000a0a0:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
				WaveBuffer.fptr = byteswritten;
9000a0a4:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
				WaveBuffer.offset = 0;
9000a0a8:	f8c3 0808 	str.w	r0, [r3, #2056]	; 0x808
				WaveBuffer.wr_state = BUFFER_EMPTY;
9000a0ac:	f883 0804 	strb.w	r0, [r3, #2052]	; 0x804
			parity = 0;
9000a0b0:	2700      	movs	r7, #0
		for (uint8_t i = 0; i < BufferFile.fptr; i++)
9000a0b2:	b2fb      	uxtb	r3, r7
9000a0b4:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
9000a0b8:	4293      	cmp	r3, r2
9000a0ba:	f0c0 80c3 	bcc.w	9000a244 <TRANSMITTER_Process+0x6e8>
		InsertarBit(1); // BIT STOP
9000a0be:	2001      	movs	r0, #1
		uint8_t fileWriting = f_write(&MessageWavFile, (uint8_t*)WaveBuffer.pcm_buff, 2*WaveBuffer.pcm_ptr, (void*)&byteswritten);
9000a0c0:	4f5a      	ldr	r7, [pc, #360]	; (9000a22c <TRANSMITTER_Process+0x6d0>)
		InsertarBit(1); // BIT STOP
9000a0c2:	f7ff fc2d 	bl	90009920 <InsertarBit>
		InsertarBit(1); // BIT FINALIZACION
9000a0c6:	2001      	movs	r0, #1
9000a0c8:	f7ff fc2a 	bl	90009920 <InsertarBit>
		uint8_t fileWriting = f_write(&MessageWavFile, (uint8_t*)WaveBuffer.pcm_buff, 2*WaveBuffer.pcm_ptr, (void*)&byteswritten);
9000a0cc:	f8d7 2800 	ldr.w	r2, [r7, #2048]	; 0x800
9000a0d0:	ab02      	add	r3, sp, #8
9000a0d2:	f5a7 4180 	sub.w	r1, r7, #16384	; 0x4000
9000a0d6:	0052      	lsls	r2, r2, #1
9000a0d8:	483d      	ldr	r0, [pc, #244]	; (9000a1d0 <TRANSMITTER_Process+0x674>)
9000a0da:	f7fe fda2 	bl	90008c22 <f_write>
		if(fileWriting == FR_OK)
9000a0de:	4605      	mov	r5, r0
9000a0e0:	2800      	cmp	r0, #0
9000a0e2:	f040 80f1 	bne.w	9000a2c8 <TRANSMITTER_Process+0x76c>
			WaveBuffer.fptr += byteswritten;
9000a0e6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
			uint8_t seeker = f_lseek(&MessageWavFile, 0);
9000a0ea:	4601      	mov	r1, r0
			WaveBuffer.fptr += byteswritten;
9000a0ec:	9a02      	ldr	r2, [sp, #8]
			uint8_t seeker = f_lseek(&MessageWavFile, 0);
9000a0ee:	4838      	ldr	r0, [pc, #224]	; (9000a1d0 <TRANSMITTER_Process+0x674>)
			WaveBuffer.fptr += byteswritten;
9000a0f0:	4413      	add	r3, r2
9000a0f2:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
			uint8_t seeker = f_lseek(&MessageWavFile, 0);
9000a0f6:	f7fe feb6 	bl	90008e66 <f_lseek>
			if(seeker == FR_OK)
9000a0fa:	4680      	mov	r8, r0
9000a0fc:	2800      	cmp	r0, #0
9000a0fe:	f040 80d3 	bne.w	9000a2a8 <TRANSMITTER_Process+0x74c>
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(WaveBuffer.fptr);
9000a102:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
9000a106:	494a      	ldr	r1, [pc, #296]	; (9000a230 <TRANSMITTER_Process+0x6d4>)
  pHeader[5] = (uint8_t)(WaveBuffer.fptr >> 8);
9000a108:	0a1a      	lsrs	r2, r3, #8
  pHeader[4] = (uint8_t)(WaveBuffer.fptr);
9000a10a:	f884 3b50 	strb.w	r3, [r4, #2896]	; 0xb50
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
9000a10e:	f6a1 304c 	subw	r0, r1, #2892	; 0xb4c
  pHeader[5] = (uint8_t)(WaveBuffer.fptr >> 8);
9000a112:	f884 2b51 	strb.w	r2, [r4, #2897]	; 0xb51
  pHeader[6] = (uint8_t)(WaveBuffer.fptr >> 16);
9000a116:	0c1a      	lsrs	r2, r3, #16
9000a118:	f884 2b52 	strb.w	r2, [r4, #2898]	; 0xb52
  pHeader[7] = (uint8_t)(WaveBuffer.fptr >> 24);
9000a11c:	0e1a      	lsrs	r2, r3, #24
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  WaveBuffer.fptr -=44;
9000a11e:	3b2c      	subs	r3, #44	; 0x2c
  pHeader[7] = (uint8_t)(WaveBuffer.fptr >> 24);
9000a120:	f884 2b53 	strb.w	r2, [r4, #2899]	; 0xb53
  pHeader[40] = (uint8_t)(WaveBuffer.fptr);
  pHeader[41] = (uint8_t)(WaveBuffer.fptr >> 8);
9000a124:	0a1a      	lsrs	r2, r3, #8
  WaveBuffer.fptr -=44;
9000a126:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
  pHeader[40] = (uint8_t)(WaveBuffer.fptr);
9000a12a:	f884 3b74 	strb.w	r3, [r4, #2932]	; 0xb74
  pHeader[41] = (uint8_t)(WaveBuffer.fptr >> 8);
9000a12e:	f884 2b75 	strb.w	r2, [r4, #2933]	; 0xb75
  pHeader[42] = (uint8_t)(WaveBuffer.fptr >> 16);
9000a132:	0c1a      	lsrs	r2, r3, #16
  pHeader[43] = (uint8_t)(WaveBuffer.fptr >> 24);
9000a134:	0e1b      	lsrs	r3, r3, #24
  pHeader[42] = (uint8_t)(WaveBuffer.fptr >> 16);
9000a136:	f884 2b76 	strb.w	r2, [r4, #2934]	; 0xb76
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
9000a13a:	222c      	movs	r2, #44	; 0x2c
  pHeader[43] = (uint8_t)(WaveBuffer.fptr >> 24);
9000a13c:	f884 3b77 	strb.w	r3, [r4, #2935]	; 0xb77
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
9000a140:	ab02      	add	r3, sp, #8
9000a142:	f7fe fd6e 	bl	90008c22 <f_write>
				if(updateHeader == FR_OK)
9000a146:	4605      	mov	r5, r0
9000a148:	2800      	cmp	r0, #0
9000a14a:	f040 809f 	bne.w	9000a28c <TRANSMITTER_Process+0x730>
					WaveBuffer.fptr += byteswritten;
9000a14e:	9a02      	ldr	r2, [sp, #8]
9000a150:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
					f_close(&MessageWavFile);
9000a154:	481e      	ldr	r0, [pc, #120]	; (9000a1d0 <TRANSMITTER_Process+0x674>)
					WaveBuffer.fptr += byteswritten;
9000a156:	4413      	add	r3, r2
9000a158:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
					f_close(&MessageWavFile);
9000a15c:	f7fe fe72 	bl	90008e44 <f_close>
					BSP_LCD_ClearStringLine(4);
9000a160:	2004      	movs	r0, #4
9000a162:	f7f7 fd93 	bl	90001c8c <BSP_LCD_ClearStringLine>
					BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >>  .wav FILE CREATED. READY TO TRANSMIT!");
9000a166:	4933      	ldr	r1, [pc, #204]	; (9000a234 <TRANSMITTER_Process+0x6d8>)
9000a168:	2004      	movs	r0, #4
9000a16a:	f7f7 fcc9 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
					BSP_LCD_ClearStringLine(9);
9000a16e:	2009      	movs	r0, #9
9000a170:	f7f7 fd8c 	bl	90001c8c <BSP_LCD_ClearStringLine>
					BSP_LCD_ClearStringLine(14);
9000a174:	200e      	movs	r0, #14
9000a176:	f7f7 fd89 	bl	90001c8c <BSP_LCD_ClearStringLine>
					BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
9000a17a:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
9000a17e:	f7f7 fb29 	bl	900017d4 <BSP_LCD_SetTextColor>
					BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000a182:	4812      	ldr	r0, [pc, #72]	; (9000a1cc <TRANSMITTER_Process+0x670>)
9000a184:	f7f7 fb3e 	bl	90001804 <BSP_LCD_SetFont>
					AudioState = AUDIO_STATE_WAV_CREATED;
9000a188:	2312      	movs	r3, #18
9000a18a:	7033      	strb	r3, [r6, #0]
}
9000a18c:	4628      	mov	r0, r5
9000a18e:	b012      	add	sp, #72	; 0x48
9000a190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a194:	4828      	ldr	r0, [pc, #160]	; (9000a238 <TRANSMITTER_Process+0x6dc>)
9000a196:	f7f7 fb1d 	bl	900017d4 <BSP_LCD_SetTextColor>
				BSP_LCD_ClearStringLine(4);
9000a19a:	4638      	mov	r0, r7
9000a19c:	f7f7 fd76 	bl	90001c8c <BSP_LCD_ClearStringLine>
				sprintf((char*) strFileName,"    >>  ERROR WRITING THE .wav HEADER. ERROR CODE: %d", headerWrite);
9000a1a0:	462a      	mov	r2, r5
9000a1a2:	4926      	ldr	r1, [pc, #152]	; (9000a23c <TRANSMITTER_Process+0x6e0>)
			sprintf((char*) strFileName,"    >>  ERROR CREATING THE .wav FILE. ERROR CODE: %d", fileCreation);
9000a1a4:	a803      	add	r0, sp, #12
9000a1a6:	f001 f987 	bl	9000b4b8 <siprintf>
			BSP_LCD_DisplayStringAtLine(4, strFileName);
9000a1aa:	a903      	add	r1, sp, #12
9000a1ac:	2004      	movs	r0, #4
9000a1ae:	f7f7 fca7 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
9000a1b2:	e77d      	b.n	9000a0b0 <TRANSMITTER_Process+0x554>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a1b4:	4820      	ldr	r0, [pc, #128]	; (9000a238 <TRANSMITTER_Process+0x6dc>)
9000a1b6:	f7f7 fb0d 	bl	900017d4 <BSP_LCD_SetTextColor>
			BSP_LCD_ClearStringLine(4);
9000a1ba:	2004      	movs	r0, #4
9000a1bc:	f7f7 fd66 	bl	90001c8c <BSP_LCD_ClearStringLine>
			sprintf((char*) strFileName,"    >>  ERROR CREATING THE .wav FILE. ERROR CODE: %d", fileCreation);
9000a1c0:	462a      	mov	r2, r5
9000a1c2:	491f      	ldr	r1, [pc, #124]	; (9000a240 <TRANSMITTER_Process+0x6e4>)
9000a1c4:	e7ee      	b.n	9000a1a4 <TRANSMITTER_Process+0x648>
9000a1c6:	bf00      	nop
9000a1c8:	ff008000 	.word	0xff008000
9000a1cc:	20000070 	.word	0x20000070
9000a1d0:	200012f4 	.word	0x200012f4
9000a1d4:	90010fab 	.word	0x90010fab
9000a1d8:	90010ffa 	.word	0x90010ffa
9000a1dc:	20000790 	.word	0x20000790
9000a1e0:	90011023 	.word	0x90011023
9000a1e4:	90011046 	.word	0x90011046
9000a1e8:	90011061 	.word	0x90011061
9000a1ec:	9001107b 	.word	0x9001107b
9000a1f0:	90011095 	.word	0x90011095
9000a1f4:	900110af 	.word	0x900110af
9000a1f8:	900110ca 	.word	0x900110ca
9000a1fc:	900110e6 	.word	0x900110e6
9000a200:	90011103 	.word	0x90011103
9000a204:	90011120 	.word	0x90011120
9000a208:	90011130 	.word	0x90011130
9000a20c:	90011140 	.word	0x90011140
9000a210:	90011150 	.word	0x90011150
9000a214:	90011161 	.word	0x90011161
9000a218:	90011173 	.word	0x90011173
9000a21c:	90011188 	.word	0x90011188
9000a220:	001d4c00 	.word	0x001d4c00
9000a224:	0002b110 	.word	0x0002b110
9000a228:	00100004 	.word	0x00100004
9000a22c:	20005e98 	.word	0x20005e98
9000a230:	20001e40 	.word	0x20001e40
9000a234:	90011207 	.word	0x90011207
9000a238:	ffff0000 	.word	0xffff0000
9000a23c:	9001119c 	.word	0x9001119c
9000a240:	900111d2 	.word	0x900111d2
			byteLeido = BufferFile.buff[i];
9000a244:	4423      	add	r3, r4
			InsertarBit(1); // BIT STOP
9000a246:	2001      	movs	r0, #1
			InsertarBit(0); // BIT START
9000a248:	2507      	movs	r5, #7
			byteLeido = BufferFile.buff[i];
9000a24a:	f893 848c 	ldrb.w	r8, [r3, #1164]	; 0x48c
			InsertarBit(1); // BIT STOP
9000a24e:	f7ff fb67 	bl	90009920 <InsertarBit>
			InsertarBit(1); // BIT STOP 2
9000a252:	2001      	movs	r0, #1
9000a254:	f7ff fb64 	bl	90009920 <InsertarBit>
			InsertarBit(0); // BIT START
9000a258:	2000      	movs	r0, #0
9000a25a:	f7ff fb61 	bl	90009920 <InsertarBit>
				InsertarBit((byteLeido >> j) & 1);
9000a25e:	fa48 f005 	asr.w	r0, r8, r5
9000a262:	f000 0001 	and.w	r0, r0, #1
9000a266:	f7ff fb5b 	bl	90009920 <InsertarBit>
			for (int8_t j = 7; j >= 0; j--)
9000a26a:	3d01      	subs	r5, #1
9000a26c:	d2f7      	bcs.n	9000a25e <TRANSMITTER_Process+0x702>
9000a26e:	2300      	movs	r3, #0
			parity = 0;
9000a270:	4618      	mov	r0, r3
				parity ^= (byteLeido >> i) & 1;
9000a272:	fa48 f203 	asr.w	r2, r8, r3
			for (uint8_t i = 0; i < 8; i++) {
9000a276:	3301      	adds	r3, #1
				parity ^= (byteLeido >> i) & 1;
9000a278:	f002 0201 	and.w	r2, r2, #1
			for (uint8_t i = 0; i < 8; i++) {
9000a27c:	2b08      	cmp	r3, #8
				parity ^= (byteLeido >> i) & 1;
9000a27e:	ea80 0002 	eor.w	r0, r0, r2
			for (uint8_t i = 0; i < 8; i++) {
9000a282:	d1f6      	bne.n	9000a272 <TRANSMITTER_Process+0x716>
			InsertarBit(parity);
9000a284:	3701      	adds	r7, #1
9000a286:	f7ff fb4b 	bl	90009920 <InsertarBit>
		for (uint8_t i = 0; i < BufferFile.fptr; i++)
9000a28a:	e712      	b.n	9000a0b2 <TRANSMITTER_Process+0x556>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a28c:	4831      	ldr	r0, [pc, #196]	; (9000a354 <TRANSMITTER_Process+0x7f8>)
9000a28e:	f7f7 faa1 	bl	900017d4 <BSP_LCD_SetTextColor>
					BSP_LCD_ClearStringLine(4);
9000a292:	2004      	movs	r0, #4
9000a294:	f7f7 fcfa 	bl	90001c8c <BSP_LCD_ClearStringLine>
					sprintf((char*) strFileName,"    >>  ERROR UPDATING THE .wav FILE HEADER. ERROR CODE: %d", updateHeader);
9000a298:	462a      	mov	r2, r5
9000a29a:	492f      	ldr	r1, [pc, #188]	; (9000a358 <TRANSMITTER_Process+0x7fc>)
			sprintf((char*) strFileName,"    >>  ERROR WRITING THE .wav FILE. ERROR CODE: %d", fileWriting);
9000a29c:	a803      	add	r0, sp, #12
9000a29e:	f001 f90b 	bl	9000b4b8 <siprintf>
			BSP_LCD_DisplayStringAtLine(4, strFileName);
9000a2a2:	a903      	add	r1, sp, #12
9000a2a4:	2004      	movs	r0, #4
9000a2a6:	e598      	b.n	90009dda <TRANSMITTER_Process+0x27e>
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a2a8:	482a      	ldr	r0, [pc, #168]	; (9000a354 <TRANSMITTER_Process+0x7f8>)
9000a2aa:	f7f7 fa93 	bl	900017d4 <BSP_LCD_SetTextColor>
				BSP_LCD_ClearStringLine(4);
9000a2ae:	2004      	movs	r0, #4
9000a2b0:	f7f7 fcec 	bl	90001c8c <BSP_LCD_ClearStringLine>
				sprintf((char*) strFileName,"    >>  ERROR SEEKING THE .wav FILE. ERROR CODE: %d", seeker);
9000a2b4:	4642      	mov	r2, r8
9000a2b6:	4929      	ldr	r1, [pc, #164]	; (9000a35c <TRANSMITTER_Process+0x800>)
9000a2b8:	a803      	add	r0, sp, #12
9000a2ba:	f001 f8fd 	bl	9000b4b8 <siprintf>
				BSP_LCD_DisplayStringAtLine(4, strFileName);
9000a2be:	a903      	add	r1, sp, #12
9000a2c0:	2004      	movs	r0, #4
9000a2c2:	f7f7 fc1d 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
9000a2c6:	e761      	b.n	9000a18c <TRANSMITTER_Process+0x630>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a2c8:	4822      	ldr	r0, [pc, #136]	; (9000a354 <TRANSMITTER_Process+0x7f8>)
9000a2ca:	f7f7 fa83 	bl	900017d4 <BSP_LCD_SetTextColor>
			BSP_LCD_ClearStringLine(4);
9000a2ce:	2004      	movs	r0, #4
9000a2d0:	f7f7 fcdc 	bl	90001c8c <BSP_LCD_ClearStringLine>
			sprintf((char*) strFileName,"    >>  ERROR WRITING THE .wav FILE. ERROR CODE: %d", fileWriting);
9000a2d4:	462a      	mov	r2, r5
9000a2d6:	4922      	ldr	r1, [pc, #136]	; (9000a360 <TRANSMITTER_Process+0x804>)
9000a2d8:	e7e0      	b.n	9000a29c <TRANSMITTER_Process+0x740>
		BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"         |    . .-' `. '.       >>    START TRANSMISSION");
9000a2da:	4922      	ldr	r1, [pc, #136]	; (9000a364 <TRANSMITTER_Process+0x808>)
9000a2dc:	2009      	movs	r0, #9
9000a2de:	f7f7 fc0f 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"           ,|,`.        `-.\\    >>    BACK TO MENU");
9000a2e2:	4921      	ldr	r1, [pc, #132]	; (9000a368 <TRANSMITTER_Process+0x80c>)
9000a2e4:	200e      	movs	r0, #14
9000a2e6:	f7f7 fc0b 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
		AudioState = AUDIO_STATE_WAIT_FOR_TRANSMISSION;
9000a2ea:	2314      	movs	r3, #20
9000a2ec:	e4b7      	b.n	90009c5e <TRANSMITTER_Process+0x102>
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
9000a2ee:	4c1f      	ldr	r4, [pc, #124]	; (9000a36c <TRANSMITTER_Process+0x810>)
		BSP_LCD_DisplayStringAtLine(20,(uint8_t *) "Estoy en el estado AUDIO_STATE_WAIT_FOR_TRANSMISSION");
9000a2f0:	2014      	movs	r0, #20
9000a2f2:	491f      	ldr	r1, [pc, #124]	; (9000a370 <TRANSMITTER_Process+0x814>)
9000a2f4:	f7f7 fc04 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
9000a2f8:	f894 3b78 	ldrb.w	r3, [r4, #2936]	; 0xb78
		BSP_TS_GetState(&TS_State);
9000a2fc:	f604 3078 	addw	r0, r4, #2936	; 0xb78
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
9000a300:	2b01      	cmp	r3, #1
9000a302:	d102      	bne.n	9000a30a <TRANSMITTER_Process+0x7ae>
		BSP_TS_GetState(&TS_State);
9000a304:	f7f8 f95a 	bl	900025bc <BSP_TS_GetState>
9000a308:	e55a      	b.n	90009dc0 <TRANSMITTER_Process+0x264>
		BSP_TS_GetState(&TS_State);
9000a30a:	f7f8 f957 	bl	900025bc <BSP_TS_GetState>
		if (TS_State.touchDetected == 1) {
9000a30e:	f894 3b78 	ldrb.w	r3, [r4, #2936]	; 0xb78
9000a312:	2b01      	cmp	r3, #1
9000a314:	f47f ad54 	bne.w	90009dc0 <TRANSMITTER_Process+0x264>
			if ((TS_State.touchX[0] > TOUCH_START_TX_XMIN) &&
9000a318:	f8b4 3b7a 	ldrh.w	r3, [r4, #2938]	; 0xb7a
9000a31c:	f46f 722f 	mvn.w	r2, #700	; 0x2bc
9000a320:	4413      	add	r3, r2
			}else if ((TS_State.touchX[0] > TOUCH_BTM_XMIN) &&
9000a322:	b29b      	uxth	r3, r3
9000a324:	2bc6      	cmp	r3, #198	; 0xc6
9000a326:	f63f ad4b 	bhi.w	90009dc0 <TRANSMITTER_Process+0x264>
					  (TS_State.touchX[0] < TOUCH_BTM_XMAX) &&
9000a32a:	f8b4 3b84 	ldrh.w	r3, [r4, #2948]	; 0xb84
9000a32e:	3ba1      	subs	r3, #161	; 0xa1
9000a330:	b29b      	uxth	r3, r3
9000a332:	2b1c      	cmp	r3, #28
9000a334:	f63f ad44 	bhi.w	90009dc0 <TRANSMITTER_Process+0x264>
				BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
9000a338:	480e      	ldr	r0, [pc, #56]	; (9000a374 <TRANSMITTER_Process+0x818>)
9000a33a:	f7f7 fa7b 	bl	90001834 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
9000a33e:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
9000a342:	f7f7 fa47 	bl	900017d4 <BSP_LCD_SetTextColor>
				BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000a346:	480c      	ldr	r0, [pc, #48]	; (9000a378 <TRANSMITTER_Process+0x81c>)
9000a348:	f7f7 fa5c 	bl	90001804 <BSP_LCD_SetFont>
				AudioState = AUDIO_STATE_RETURN;
9000a34c:	2315      	movs	r3, #21
9000a34e:	e486      	b.n	90009c5e <TRANSMITTER_Process+0x102>
		AudioState = AUDIO_STATE_IDLE;
9000a350:	7032      	strb	r2, [r6, #0]
9000a352:	e43e      	b.n	90009bd2 <TRANSMITTER_Process+0x76>
9000a354:	ffff0000 	.word	0xffff0000
9000a358:	90011235 	.word	0x90011235
9000a35c:	90011271 	.word	0x90011271
9000a360:	900112a5 	.word	0x900112a5
9000a364:	900112d9 	.word	0x900112d9
9000a368:	90011312 	.word	0x90011312
9000a36c:	200012f4 	.word	0x200012f4
9000a370:	90011345 	.word	0x90011345
9000a374:	ff008000 	.word	0xff008000
9000a378:	20000070 	.word	0x20000070

9000a37c <HAL_HCD_MspInit>:
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hhcd->Instance == USB_OTG_FS)
9000a37c:	6803      	ldr	r3, [r0, #0]
9000a37e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
9000a382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000a386:	b090      	sub	sp, #64	; 0x40
  if(hhcd->Instance == USB_OTG_FS)
9000a388:	d146      	bne.n	9000a418 <HAL_HCD_MspInit+0x9c>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a38a:	4c63      	ldr	r4, [pc, #396]	; (9000a518 <HAL_HCD_MspInit+0x19c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
    
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a38c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a38e:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a390:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a392:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a394:	4861      	ldr	r0, [pc, #388]	; (9000a51c <HAL_HCD_MspInit+0x1a0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a396:	f043 0301 	orr.w	r3, r3, #1
9000a39a:	6323      	str	r3, [r4, #48]	; 0x30
9000a39c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a39e:	f003 0301 	and.w	r3, r3, #1
9000a3a2:	9301      	str	r3, [sp, #4]
9000a3a4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
9000a3a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a3a8:	f043 0308 	orr.w	r3, r3, #8
9000a3ac:	6323      	str	r3, [r4, #48]	; 0x30
9000a3ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a3b0:	f003 0308 	and.w	r3, r3, #8
9000a3b4:	9302      	str	r3, [sp, #8]
9000a3b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a3b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
9000a3bc:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a3c0:	2303      	movs	r3, #3
9000a3c2:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
9000a3c6:	230a      	movs	r3, #10
9000a3c8:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a3ca:	f7f8 fdb5 	bl	90002f38 <HAL_GPIO_Init>
    
    /* Configure POWER_SWITCH IO pin */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
9000a3ce:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000a3d0:	a90b      	add	r1, sp, #44	; 0x2c
9000a3d2:	4853      	ldr	r0, [pc, #332]	; (9000a520 <HAL_HCD_MspInit+0x1a4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a3d4:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a3d6:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000a3da:	f7f8 fdad 	bl	90002f38 <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
9000a3de:	6b63      	ldr	r3, [r4, #52]	; 0x34
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
9000a3e0:	2043      	movs	r0, #67	; 0x43
9000a3e2:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
9000a3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
9000a3e8:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
9000a3ea:	6363      	str	r3, [r4, #52]	; 0x34
9000a3ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000a3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000a3f2:	9303      	str	r3, [sp, #12]
9000a3f4:	9b03      	ldr	r3, [sp, #12]
9000a3f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
9000a3f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
9000a3fc:	6463      	str	r3, [r4, #68]	; 0x44
9000a3fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
9000a400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
9000a404:	9304      	str	r3, [sp, #16]
9000a406:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
9000a408:	f7f8 f9f6 	bl	900027f8 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
9000a40c:	2043      	movs	r0, #67	; 0x43
    
    /* Set USBHS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
    
    /* Enable USBHS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
9000a40e:	f7f8 fa25 	bl	9000285c <HAL_NVIC_EnableIRQ>
  }   
}
9000a412:	b010      	add	sp, #64	; 0x40
9000a414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hhcd->Instance == USB_OTG_HS)
9000a418:	4a42      	ldr	r2, [pc, #264]	; (9000a524 <HAL_HCD_MspInit+0x1a8>)
9000a41a:	4293      	cmp	r3, r2
9000a41c:	d1f9      	bne.n	9000a412 <HAL_HCD_MspInit+0x96>
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a41e:	4c3e      	ldr	r4, [pc, #248]	; (9000a518 <HAL_HCD_MspInit+0x19c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a420:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a422:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a424:	260a      	movs	r6, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a426:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a428:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a42c:	a90b      	add	r1, sp, #44	; 0x2c
9000a42e:	483b      	ldr	r0, [pc, #236]	; (9000a51c <HAL_HCD_MspInit+0x1a0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a430:	f043 0301 	orr.w	r3, r3, #1
9000a434:	6323      	str	r3, [r4, #48]	; 0x30
9000a436:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a438:	f003 0301 	and.w	r3, r3, #1
9000a43c:	9305      	str	r3, [sp, #20]
9000a43e:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
9000a440:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a442:	f043 0302 	orr.w	r3, r3, #2
9000a446:	6323      	str	r3, [r4, #48]	; 0x30
9000a448:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a44a:	f003 0302 	and.w	r3, r3, #2
9000a44e:	9306      	str	r3, [sp, #24]
9000a450:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
9000a452:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a454:	f043 0304 	orr.w	r3, r3, #4
9000a458:	6323      	str	r3, [r4, #48]	; 0x30
9000a45a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a45c:	f003 0304 	and.w	r3, r3, #4
9000a460:	9307      	str	r3, [sp, #28]
9000a462:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000a464:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000a46a:	6323      	str	r3, [r4, #48]	; 0x30
9000a46c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a46e:	960f      	str	r6, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000a470:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000a474:	9308      	str	r3, [sp, #32]
9000a476:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a478:	2320      	movs	r3, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a47a:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a47e:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a482:	f7f8 fd59 	bl	90002f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
9000a486:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a488:	a90b      	add	r1, sp, #44	; 0x2c
9000a48a:	4824      	ldr	r0, [pc, #144]	; (9000a51c <HAL_HCD_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a48c:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a48e:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a492:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a496:	f7f8 fd4f 	bl	90002f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_5 |\
9000a49a:	f643 4323 	movw	r3, #15395	; 0x3c23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
9000a49e:	a90b      	add	r1, sp, #44	; 0x2c
9000a4a0:	4821      	ldr	r0, [pc, #132]	; (9000a528 <HAL_HCD_MspInit+0x1ac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a4a2:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a4a4:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a4a6:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
9000a4aa:	f7f8 fd45 	bl	90002f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
9000a4ae:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); 
9000a4b0:	a90b      	add	r1, sp, #44	; 0x2c
9000a4b2:	481e      	ldr	r0, [pc, #120]	; (9000a52c <HAL_HCD_MspInit+0x1b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a4b4:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a4b6:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a4b8:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); 
9000a4bc:	f7f8 fd3c 	bl	90002f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
9000a4c0:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000a4c2:	a90b      	add	r1, sp, #44	; 0x2c
9000a4c4:	481a      	ldr	r0, [pc, #104]	; (9000a530 <HAL_HCD_MspInit+0x1b4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a4c6:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a4c8:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a4ca:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000a4ce:	f7f8 fd33 	bl	90002f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
9000a4d2:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000a4d4:	a90b      	add	r1, sp, #44	; 0x2c
9000a4d6:	4815      	ldr	r0, [pc, #84]	; (9000a52c <HAL_HCD_MspInit+0x1b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a4d8:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a4da:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a4dc:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000a4e0:	f7f8 fd2a 	bl	90002f38 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000a4e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000a4e6:	204d      	movs	r0, #77	; 0x4d
9000a4e8:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000a4ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000a4ee:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000a4f0:	6323      	str	r3, [r4, #48]	; 0x30
9000a4f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a4f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
9000a4f8:	9309      	str	r3, [sp, #36]	; 0x24
9000a4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
9000a4fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a4fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
9000a502:	6323      	str	r3, [r4, #48]	; 0x30
9000a504:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
9000a50a:	930a      	str	r3, [sp, #40]	; 0x28
9000a50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000a50e:	f7f8 f973 	bl	900027f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
9000a512:	204d      	movs	r0, #77	; 0x4d
9000a514:	e77b      	b.n	9000a40e <HAL_HCD_MspInit+0x92>
9000a516:	bf00      	nop
9000a518:	40023800 	.word	0x40023800
9000a51c:	40020000 	.word	0x40020000
9000a520:	40020c00 	.word	0x40020c00
9000a524:	40040000 	.word	0x40040000
9000a528:	40020400 	.word	0x40020400
9000a52c:	40020800 	.word	0x40020800
9000a530:	40021c00 	.word	0x40021c00

9000a534 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
9000a534:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a538:	f7fc bd0f 	b.w	90006f5a <USBH_LL_IncTimer>

9000a53c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
9000a53c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a540:	f7fc bd21 	b.w	90006f86 <USBH_LL_Connect>

9000a544 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
9000a544:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a548:	f7fc bd27 	b.w	90006f9a <USBH_LL_Disconnect>

9000a54c <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
9000a54c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a550:	f7fc bd11 	b.w	90006f76 <USBH_LL_PortEnabled>

9000a554 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
9000a554:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a558:	f7fc bd11 	b.w	90006f7e <USBH_LL_PortDisabled>

9000a55c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
}
9000a55c:	4770      	bx	lr
	...

9000a560 <USBH_LL_Init>:
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
9000a560:	b570      	push	{r4, r5, r6, lr}
#ifdef USE_USB_FS  
  /* Set the LL driver parameters */
  hhcd.Instance = USB_OTG_FS;
9000a562:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
9000a566:	4c0f      	ldr	r4, [pc, #60]	; (9000a5a4 <USBH_LL_Init+0x44>)
  hhcd.Init.Host_channels = 11; 
  hhcd.Init.dma_enable = 0;
9000a568:	2500      	movs	r5, #0
{
9000a56a:	4606      	mov	r6, r0
  hhcd.Instance = USB_OTG_FS;
9000a56c:	6023      	str	r3, [r4, #0]
  hhcd.Init.Host_channels = 11; 
9000a56e:	230b      	movs	r3, #11
  hhcd.Init.Sof_enable = 0;
  hhcd.Init.speed = HCD_SPEED_FULL;
  hhcd.Init.vbus_sensing_enable = 0;
  
  /* Link the driver to the stack */
  hhcd.pData = phost;
9000a570:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hhcd.Init.Host_channels = 11; 
9000a574:	60a3      	str	r3, [r4, #8]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED; 
9000a576:	2302      	movs	r3, #2
  phost->pData = &hhcd;
9000a578:	f8c0 44bc 	str.w	r4, [r0, #1212]	; 0x4bc
  
  /* Initialize the LL Driver */
  HAL_HCD_Init(&hhcd);
9000a57c:	4620      	mov	r0, r4
  hhcd.Init.dma_enable = 0;
9000a57e:	6125      	str	r5, [r4, #16]
  hhcd.Init.low_power_enable = 0;
9000a580:	6225      	str	r5, [r4, #32]
  hhcd.Init.vbus_sensing_enable = 0;
9000a582:	62e5      	str	r5, [r4, #44]	; 0x2c
  hhcd.Init.Sof_enable = 0;
9000a584:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hhcd.Init.speed = HCD_SPEED_FULL;
9000a588:	2301      	movs	r3, #1
9000a58a:	60e3      	str	r3, [r4, #12]
  HAL_HCD_Init(&hhcd);
9000a58c:	f7f8 fe03 	bl	90003196 <HAL_HCD_Init>
  phost->pData = &hhcd;
  /* Initialize the LL driver */
  HAL_HCD_Init(&hhcd);
#endif /*USE_USB_HS*/ 

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd));
9000a590:	4620      	mov	r0, r4
9000a592:	f7f9 fa07 	bl	900039a4 <HAL_HCD_GetCurrentFrame>
9000a596:	4601      	mov	r1, r0
9000a598:	4630      	mov	r0, r6
9000a59a:	f7fc fcdb 	bl	90006f54 <USBH_LL_SetTimer>
  
  return USBH_OK;
}
9000a59e:	4628      	mov	r0, r5
9000a5a0:	bd70      	pop	{r4, r5, r6, pc}
9000a5a2:	bf00      	nop
9000a5a4:	200086b0 	.word	0x200086b0

9000a5a8 <USBH_LL_Start>:
  * @brief  Starts the Low Level portion of the Host driver.   
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
9000a5a8:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
9000a5aa:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a5ae:	f7f9 f9c3 	bl	90003938 <HAL_HCD_Start>
  return USBH_OK; 
}
9000a5b2:	2000      	movs	r0, #0
9000a5b4:	bd08      	pop	{r3, pc}

9000a5b6 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
9000a5b6:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
9000a5b8:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a5bc:	f7f9 f9d2 	bl	90003964 <HAL_HCD_Stop>
  return USBH_OK; 
}
9000a5c0:	2000      	movs	r0, #0
9000a5c2:	bd08      	pop	{r3, pc}

9000a5c4 <USBH_LL_GetSpeed>:
  * @brief  Returns the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
9000a5c4:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
  
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
9000a5c6:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a5ca:	f7f9 f9ee 	bl	900039aa <HAL_HCD_GetCurrentSpeed>
9000a5ce:	2803      	cmp	r0, #3
9000a5d0:	bf28      	it	cs
9000a5d2:	2001      	movcs	r0, #1
  default:  
    speed = USBH_SPEED_FULL;    
    break;    
  }
  return speed;
}
9000a5d4:	b2c0      	uxtb	r0, r0
9000a5d6:	bd08      	pop	{r3, pc}

9000a5d8 <USBH_LL_ResetPort>:
  * @brief  Resets the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
9000a5d8:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
9000a5da:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a5de:	f7f9 f9d3 	bl	90003988 <HAL_HCD_ResetPort>
  return USBH_OK; 
}
9000a5e2:	2000      	movs	r0, #0
9000a5e4:	bd08      	pop	{r3, pc}

9000a5e6 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)  
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
9000a5e6:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a5ea:	f7f9 b9d6 	b.w	9000399a <HAL_HCD_HC_GetXferCount>

9000a5ee <USBH_LL_OpenPipe>:
                                    uint8_t epnum,                                      
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
9000a5ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_Init(phost->pData,
9000a5f0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
9000a5f4:	9402      	str	r4, [sp, #8]
9000a5f6:	f89d 401c 	ldrb.w	r4, [sp, #28]
9000a5fa:	9401      	str	r4, [sp, #4]
9000a5fc:	f89d 4018 	ldrb.w	r4, [sp, #24]
9000a600:	9400      	str	r4, [sp, #0]
9000a602:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a606:	f7f8 fd7e 	bl	90003106 <HAL_HCD_HC_Init>
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
}
9000a60a:	2000      	movs	r0, #0
9000a60c:	b004      	add	sp, #16
9000a60e:	bd10      	pop	{r4, pc}

9000a610 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
9000a610:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe);
9000a612:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a616:	f7f8 fdac 	bl	90003172 <HAL_HCD_HC_Halt>
  return USBH_OK; 
}
9000a61a:	2000      	movs	r0, #0
9000a61c:	bd08      	pop	{r3, pc}

9000a61e <USBH_LL_SubmitURB>:
                                     uint8_t ep_type,  
                                     uint8_t token, 
                                     uint8_t* pbuff, 
                                     uint16_t length,
                                     uint8_t do_ping) 
{
9000a61e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_SubmitRequest(phost->pData,
9000a620:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
9000a624:	9403      	str	r4, [sp, #12]
9000a626:	f8bd 4020 	ldrh.w	r4, [sp, #32]
9000a62a:	9402      	str	r4, [sp, #8]
9000a62c:	9c07      	ldr	r4, [sp, #28]
9000a62e:	9401      	str	r4, [sp, #4]
9000a630:	f89d 4018 	ldrb.w	r4, [sp, #24]
9000a634:	9400      	str	r4, [sp, #0]
9000a636:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a63a:	f7f8 fdf9 	bl	90003230 <HAL_HCD_HC_SubmitRequest>
                           token, 
                           pbuff, 
                           length,
                           do_ping);
  return USBH_OK;   
}
9000a63e:	2000      	movs	r0, #0
9000a640:	b004      	add	sp, #16
9000a642:	bd10      	pop	{r4, pc}

9000a644 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe) 
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
9000a644:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a648:	f7f9 b9a1 	b.w	9000398e <HAL_HCD_HC_GetURBState>

9000a64c <USBH_LL_DriverVBUS>:
  *           0: VBUS Active 
  *           1: VBUS Inactive
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
9000a64c:	b508      	push	{r3, lr}
#ifdef USE_USB_FS
  if(state == 0)
9000a64e:	b949      	cbnz	r1, 9000a664 <USBH_LL_DriverVBUS+0x18>
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
9000a650:	2201      	movs	r2, #1
  }
  else
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
9000a652:	2120      	movs	r1, #32
9000a654:	4804      	ldr	r0, [pc, #16]	; (9000a668 <USBH_LL_DriverVBUS+0x1c>)
9000a656:	f7f8 fd51 	bl	900030fc <HAL_GPIO_WritePin>
  }
  
  HAL_Delay(200);
9000a65a:	20c8      	movs	r0, #200	; 0xc8
9000a65c:	f7f8 f8a8 	bl	900027b0 <HAL_Delay>
#endif /* USE_USB_FS */
  return USBH_OK;  
}
9000a660:	2000      	movs	r0, #0
9000a662:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
9000a664:	2200      	movs	r2, #0
9000a666:	e7f4      	b.n	9000a652 <USBH_LL_DriverVBUS+0x6>
9000a668:	40020c00 	.word	0x40020c00

9000a66c <USBH_LL_SetToggle>:
  * @param  toggle: toggle (0/1)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
  if(hhcd.hc[pipe].ep_is_in)
9000a66c:	4b06      	ldr	r3, [pc, #24]	; (9000a688 <USBH_LL_SetToggle+0x1c>)
9000a66e:	2028      	movs	r0, #40	; 0x28
9000a670:	fb00 3101 	mla	r1, r0, r1, r3
9000a674:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
9000a678:	b11b      	cbz	r3, 9000a682 <USBH_LL_SetToggle+0x16>
  {
    hhcd.hc[pipe].toggle_in = toggle;
9000a67a:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
  }
  return USBH_OK; 
}
9000a67e:	2000      	movs	r0, #0
9000a680:	4770      	bx	lr
    hhcd.hc[pipe].toggle_out = toggle;
9000a682:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
9000a686:	e7fa      	b.n	9000a67e <USBH_LL_SetToggle+0x12>
9000a688:	200086b0 	.word	0x200086b0

9000a68c <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
  uint8_t toggle = 0;
  
  if(hhcd.hc[pipe].ep_is_in)
9000a68c:	4b06      	ldr	r3, [pc, #24]	; (9000a6a8 <USBH_LL_GetToggle+0x1c>)
9000a68e:	2228      	movs	r2, #40	; 0x28
9000a690:	fb02 3101 	mla	r1, r2, r1, r3
9000a694:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
9000a698:	b113      	cbz	r3, 9000a6a0 <USBH_LL_GetToggle+0x14>
  {
    toggle = hhcd.hc[pipe].toggle_in;
9000a69a:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
9000a69e:	4770      	bx	lr
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
9000a6a0:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle; 
}
9000a6a4:	4770      	bx	lr
9000a6a6:	bf00      	nop
9000a6a8:	200086b0 	.word	0x200086b0

9000a6ac <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);  
9000a6ac:	f7f8 b880 	b.w	900027b0 <HAL_Delay>

9000a6b0 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
9000a6b0:	2000      	movs	r0, #0
9000a6b2:	4770      	bx	lr

9000a6b4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
9000a6b4:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
9000a6b6:	4804      	ldr	r0, [pc, #16]	; (9000a6c8 <USBH_status+0x14>)
{
9000a6b8:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
9000a6ba:	f7fb fd5b 	bl	90006174 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
9000a6be:	fab0 f080 	clz	r0, r0
9000a6c2:	0940      	lsrs	r0, r0, #5
9000a6c4:	bd08      	pop	{r3, pc}
9000a6c6:	bf00      	nop
9000a6c8:	20000da8 	.word	0x20000da8

9000a6cc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
9000a6cc:	b510      	push	{r4, lr}
9000a6ce:	4603      	mov	r3, r0
9000a6d0:	b08e      	sub	sp, #56	; 0x38
9000a6d2:	4608      	mov	r0, r1
9000a6d4:	4614      	mov	r4, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
9000a6d6:	2903      	cmp	r1, #3
9000a6d8:	d803      	bhi.n	9000a6e2 <USBH_ioctl+0x16>
9000a6da:	e8df f001 	tbb	[pc, r1]
9000a6de:	0503      	.short	0x0503
9000a6e0:	1a10      	.short	0x1a10
9000a6e2:	2004      	movs	r0, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
9000a6e4:	b00e      	add	sp, #56	; 0x38
9000a6e6:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000a6e8:	aa01      	add	r2, sp, #4
9000a6ea:	4619      	mov	r1, r3
9000a6ec:	480e      	ldr	r0, [pc, #56]	; (9000a728 <USBH_ioctl+0x5c>)
9000a6ee:	f7fb fd52 	bl	90006196 <USBH_MSC_GetLUNInfo>
9000a6f2:	b108      	cbz	r0, 9000a6f8 <USBH_ioctl+0x2c>
      res = RES_ERROR;
9000a6f4:	2001      	movs	r0, #1
9000a6f6:	e7f5      	b.n	9000a6e4 <USBH_ioctl+0x18>
      *(DWORD*)buff = info.capacity.block_nbr;
9000a6f8:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
9000a6fa:	6023      	str	r3, [r4, #0]
      res = RES_OK;
9000a6fc:	e7f2      	b.n	9000a6e4 <USBH_ioctl+0x18>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000a6fe:	aa01      	add	r2, sp, #4
9000a700:	4619      	mov	r1, r3
9000a702:	4809      	ldr	r0, [pc, #36]	; (9000a728 <USBH_ioctl+0x5c>)
9000a704:	f7fb fd47 	bl	90006196 <USBH_MSC_GetLUNInfo>
9000a708:	2800      	cmp	r0, #0
9000a70a:	d1f3      	bne.n	9000a6f4 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size;
9000a70c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
9000a710:	e7f3      	b.n	9000a6fa <USBH_ioctl+0x2e>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000a712:	aa01      	add	r2, sp, #4
9000a714:	4619      	mov	r1, r3
9000a716:	4804      	ldr	r0, [pc, #16]	; (9000a728 <USBH_ioctl+0x5c>)
9000a718:	f7fb fd3d 	bl	90006196 <USBH_MSC_GetLUNInfo>
9000a71c:	2800      	cmp	r0, #0
9000a71e:	d1e9      	bne.n	9000a6f4 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
9000a720:	f8bd 300c 	ldrh.w	r3, [sp, #12]
9000a724:	0a5b      	lsrs	r3, r3, #9
9000a726:	e7e8      	b.n	9000a6fa <USBH_ioctl+0x2e>
9000a728:	20000da8 	.word	0x20000da8

9000a72c <USBH_read>:
{
9000a72c:	b510      	push	{r4, lr}
9000a72e:	b090      	sub	sp, #64	; 0x40
9000a730:	4604      	mov	r4, r0
  if(USBH_MSC_Read(&hUSBHost, lun, sector, buff, count) == USBH_OK)
9000a732:	9300      	str	r3, [sp, #0]
9000a734:	460b      	mov	r3, r1
9000a736:	4601      	mov	r1, r0
9000a738:	480f      	ldr	r0, [pc, #60]	; (9000a778 <USBH_read+0x4c>)
9000a73a:	f7fb fd44 	bl	900061c6 <USBH_MSC_Read>
9000a73e:	b1b0      	cbz	r0, 9000a76e <USBH_read+0x42>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
9000a740:	aa03      	add	r2, sp, #12
9000a742:	4621      	mov	r1, r4
9000a744:	480c      	ldr	r0, [pc, #48]	; (9000a778 <USBH_read+0x4c>)
9000a746:	f7fb fd26 	bl	90006196 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
9000a74a:	f89d 3019 	ldrb.w	r3, [sp, #25]
9000a74e:	2b28      	cmp	r3, #40	; 0x28
9000a750:	d003      	beq.n	9000a75a <USBH_read+0x2e>
9000a752:	2b3a      	cmp	r3, #58	; 0x3a
9000a754:	d001      	beq.n	9000a75a <USBH_read+0x2e>
9000a756:	2b04      	cmp	r3, #4
9000a758:	d10b      	bne.n	9000a772 <USBH_read+0x46>
      USBH_ErrLog ("USB Disk is not ready!");
9000a75a:	4808      	ldr	r0, [pc, #32]	; (9000a77c <USBH_read+0x50>)
9000a75c:	f000 fe36 	bl	9000b3cc <iprintf>
9000a760:	4807      	ldr	r0, [pc, #28]	; (9000a780 <USBH_read+0x54>)
9000a762:	f000 fe33 	bl	9000b3cc <iprintf>
9000a766:	200a      	movs	r0, #10
9000a768:	f000 fe42 	bl	9000b3f0 <putchar>
      res = RES_NOTRDY;
9000a76c:	2003      	movs	r0, #3
}
9000a76e:	b010      	add	sp, #64	; 0x40
9000a770:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
9000a772:	2001      	movs	r0, #1
  return res;
9000a774:	e7fb      	b.n	9000a76e <USBH_read+0x42>
9000a776:	bf00      	nop
9000a778:	20000da8 	.word	0x20000da8
9000a77c:	900107a0 	.word	0x900107a0
9000a780:	9001137a 	.word	0x9001137a

9000a784 <USBH_write>:
{
9000a784:	b510      	push	{r4, lr}
9000a786:	b090      	sub	sp, #64	; 0x40
9000a788:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSBHost, lun, sector, (BYTE *)buff, count) == USBH_OK)
9000a78a:	9300      	str	r3, [sp, #0]
9000a78c:	460b      	mov	r3, r1
9000a78e:	4601      	mov	r1, r0
9000a790:	4816      	ldr	r0, [pc, #88]	; (9000a7ec <USBH_write+0x68>)
9000a792:	f7fb fd59 	bl	90006248 <USBH_MSC_Write>
9000a796:	b160      	cbz	r0, 9000a7b2 <USBH_write+0x2e>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
9000a798:	aa03      	add	r2, sp, #12
9000a79a:	4621      	mov	r1, r4
9000a79c:	4813      	ldr	r0, [pc, #76]	; (9000a7ec <USBH_write+0x68>)
9000a79e:	f7fb fcfa 	bl	90006196 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
9000a7a2:	f89d 3019 	ldrb.w	r3, [sp, #25]
9000a7a6:	2b27      	cmp	r3, #39	; 0x27
9000a7a8:	d009      	beq.n	9000a7be <USBH_write+0x3a>
9000a7aa:	d804      	bhi.n	9000a7b6 <USBH_write+0x32>
9000a7ac:	2b04      	cmp	r3, #4
9000a7ae:	d011      	beq.n	9000a7d4 <USBH_write+0x50>
9000a7b0:	2001      	movs	r0, #1
}
9000a7b2:	b010      	add	sp, #64	; 0x40
9000a7b4:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
9000a7b6:	2b28      	cmp	r3, #40	; 0x28
9000a7b8:	d00c      	beq.n	9000a7d4 <USBH_write+0x50>
9000a7ba:	2b3a      	cmp	r3, #58	; 0x3a
9000a7bc:	e7f7      	b.n	9000a7ae <USBH_write+0x2a>
      USBH_ErrLog("USB Disk is Write protected!");
9000a7be:	480c      	ldr	r0, [pc, #48]	; (9000a7f0 <USBH_write+0x6c>)
9000a7c0:	f000 fe04 	bl	9000b3cc <iprintf>
9000a7c4:	480b      	ldr	r0, [pc, #44]	; (9000a7f4 <USBH_write+0x70>)
9000a7c6:	f000 fe01 	bl	9000b3cc <iprintf>
9000a7ca:	200a      	movs	r0, #10
9000a7cc:	f000 fe10 	bl	9000b3f0 <putchar>
      res = RES_WRPRT;
9000a7d0:	2002      	movs	r0, #2
      break;
9000a7d2:	e7ee      	b.n	9000a7b2 <USBH_write+0x2e>
      USBH_ErrLog("USB Disk is not ready!");
9000a7d4:	4806      	ldr	r0, [pc, #24]	; (9000a7f0 <USBH_write+0x6c>)
9000a7d6:	f000 fdf9 	bl	9000b3cc <iprintf>
9000a7da:	4807      	ldr	r0, [pc, #28]	; (9000a7f8 <USBH_write+0x74>)
9000a7dc:	f000 fdf6 	bl	9000b3cc <iprintf>
9000a7e0:	200a      	movs	r0, #10
9000a7e2:	f000 fe05 	bl	9000b3f0 <putchar>
      res = RES_NOTRDY;
9000a7e6:	2003      	movs	r0, #3
      break;
9000a7e8:	e7e3      	b.n	9000a7b2 <USBH_write+0x2e>
9000a7ea:	bf00      	nop
9000a7ec:	20000da8 	.word	0x20000da8
9000a7f0:	900107a0 	.word	0x900107a0
9000a7f4:	90011391 	.word	0x90011391
9000a7f8:	9001137a 	.word	0x9001137a

9000a7fc <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
9000a7fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t byteswritten = 0;
9000a800:	2300      	movs	r3, #0
{
9000a802:	b091      	sub	sp, #68	; 0x44
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20]; 
  
  uwVolume_rec = 100;
9000a804:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 9000aafc <AUDIO_REC_Start+0x300>
9000a808:	2464      	movs	r4, #100	; 0x64

  /* Create a new file system */
  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
9000a80a:	220a      	movs	r2, #10
9000a80c:	49a7      	ldr	r1, [pc, #668]	; (9000aaac <AUDIO_REC_Start+0x2b0>)
9000a80e:	48a8      	ldr	r0, [pc, #672]	; (9000aab0 <AUDIO_REC_Start+0x2b4>)
  uint32_t byteswritten = 0;
9000a810:	9300      	str	r3, [sp, #0]
  uwVolume_rec = 100;
9000a812:	f8c8 4000 	str.w	r4, [r8]
  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
9000a816:	f7fe f843 	bl	900088a0 <f_open>
9000a81a:	b120      	cbz	r0, 9000a826 <AUDIO_REC_Start+0x2a>
          return AUDIO_ERROR_NONE;
        }
      }
    }
  }
  return AUDIO_ERROR_IO; 
9000a81c:	2401      	movs	r4, #1
}
9000a81e:	4620      	mov	r0, r4
9000a820:	b011      	add	sp, #68	; 0x44
9000a822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{  
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
9000a826:	4ba3      	ldr	r3, [pc, #652]	; (9000aab4 <AUDIO_REC_Start+0x2b8>)
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
9000a828:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
9000a82c:	f44f 567a 	mov.w	r6, #16000	; 0x3e80
  pHeader[4] = 0x00;
  pHeader[5] = 0x4C;
  pHeader[6] = 0x1D;
  pHeader[7] = 0x00;
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
9000a830:	2757      	movs	r7, #87	; 0x57
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
9000a832:	4aa1      	ldr	r2, [pc, #644]	; (9000aab8 <AUDIO_REC_Start+0x2bc>)
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
9000a834:	2502      	movs	r5, #2
  pHeader[17]  = 0x00;
  pHeader[18]  = 0x00;
  pHeader[19]  = 0x00;
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
9000a836:	f04f 0901 	mov.w	r9, #1
  pHeader[5] = 0x4C;
9000a83a:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
9000a83e:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
9000a840:	222c      	movs	r2, #44	; 0x2c
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
9000a842:	82dd      	strh	r5, [r3, #22]
  pHeader[14]  = 't';
9000a844:	f04f 0e74 	mov.w	lr, #116	; 0x74
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
9000a848:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
9000a84a:	e9c3 6106 	strd	r6, r1, [r3, #24]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
9000a84e:	499b      	ldr	r1, [pc, #620]	; (9000aabc <AUDIO_REC_Start+0x2c0>)
9000a850:	6219      	str	r1, [r3, #32]
  pHeader[0] = 'R';
9000a852:	2352      	movs	r3, #82	; 0x52
9000a854:	499a      	ldr	r1, [pc, #616]	; (9000aac0 <AUDIO_REC_Start+0x2c4>)
  pHeader[8]  = 'W';
9000a856:	720f      	strb	r7, [r1, #8]
  pHeader[9]  = 'A';
9000a858:	2741      	movs	r7, #65	; 0x41
  pHeader[0] = 'R';
9000a85a:	700b      	strb	r3, [r1, #0]
  pHeader[1] = 'I';
9000a85c:	2349      	movs	r3, #73	; 0x49
  pHeader[9]  = 'A';
9000a85e:	724f      	strb	r7, [r1, #9]
  pHeader[10] = 'V';
9000a860:	2756      	movs	r7, #86	; 0x56
  pHeader[20]  = 0x01;
9000a862:	f881 9014 	strb.w	r9, [r1, #20]
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
  pHeader[23]  = 0x00;
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
9000a866:	f04f 0980 	mov.w	r9, #128	; 0x80
  pHeader[10] = 'V';
9000a86a:	728f      	strb	r7, [r1, #10]
  pHeader[11] = 'E';
9000a86c:	2745      	movs	r7, #69	; 0x45
  pHeader[1] = 'I';
9000a86e:	704b      	strb	r3, [r1, #1]
  pHeader[2] = 'F';
9000a870:	2346      	movs	r3, #70	; 0x46
  pHeader[11] = 'E';
9000a872:	72cf      	strb	r7, [r1, #11]
  pHeader[12]  = 'f';
9000a874:	2766      	movs	r7, #102	; 0x66
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
9000a876:	f881 9018 	strb.w	r9, [r1, #24]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
9000a87a:	f04f 093e 	mov.w	r9, #62	; 0x3e
  pHeader[12]  = 'f';
9000a87e:	730f      	strb	r7, [r1, #12]
  pHeader[13]  = 'm';
9000a880:	276d      	movs	r7, #109	; 0x6d
  pHeader[2] = 'F';
9000a882:	708b      	strb	r3, [r1, #2]
  pHeader[13]  = 'm';
9000a884:	734f      	strb	r7, [r1, #13]
  pHeader[15]  = ' ';
9000a886:	2720      	movs	r7, #32
  pHeader[3] = 'F';
9000a888:	70cb      	strb	r3, [r1, #3]
  pHeader[6] = 0x1D;
9000a88a:	231d      	movs	r3, #29
  pHeader[15]  = ' ';
9000a88c:	73cf      	strb	r7, [r1, #15]
  pHeader[16]  = 0x10;
9000a88e:	2710      	movs	r7, #16
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
9000a890:	f881 9019 	strb.w	r9, [r1, #25]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
9000a894:	f04f 09fa 	mov.w	r9, #250	; 0xfa
  pHeader[4] = 0x00;
9000a898:	7108      	strb	r0, [r1, #4]
  pHeader[6] = 0x1D;
9000a89a:	718b      	strb	r3, [r1, #6]
  pHeader[7] = 0x00;
9000a89c:	71c8      	strb	r0, [r1, #7]
  pHeader[17]  = 0x00;
9000a89e:	7448      	strb	r0, [r1, #17]
  pHeader[18]  = 0x00;
9000a8a0:	7488      	strb	r0, [r1, #18]
  pHeader[19]  = 0x00;
9000a8a2:	74c8      	strb	r0, [r1, #19]
  pHeader[21]  = 0x00;
9000a8a4:	7548      	strb	r0, [r1, #21]
  pHeader[23]  = 0x00;
9000a8a6:	75c8      	strb	r0, [r1, #23]
  pHeader[5] = 0x4C;
9000a8a8:	f881 c005 	strb.w	ip, [r1, #5]
  pHeader[14]  = 't';
9000a8ac:	f881 e00e 	strb.w	lr, [r1, #14]
  pHeader[16]  = 0x10;
9000a8b0:	740f      	strb	r7, [r1, #16]
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
9000a8b2:	758d      	strb	r5, [r1, #22]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
9000a8b4:	7688      	strb	r0, [r1, #26]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
9000a8b6:	f881 901d 	strb.w	r9, [r1, #29]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
9000a8ba:	f04f 0904 	mov.w	r9, #4
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
  pHeader[35]  = 0x00;
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
9000a8be:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pHeader[37]  = 'a';
9000a8c2:	2461      	movs	r4, #97	; 0x61
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
9000a8c4:	76c8      	strb	r0, [r1, #27]
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
9000a8c6:	7708      	strb	r0, [r1, #28]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
9000a8c8:	7788      	strb	r0, [r1, #30]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
9000a8ca:	77c8      	strb	r0, [r1, #31]
  pHeader[33]  = 0x00;
9000a8cc:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pHeader[35]  = 0x00;
9000a8d0:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  pHeader[37]  = 'a';
9000a8d4:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pHeader[38]  = 't';
  pHeader[39]  = 'a';
9000a8d8:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
9000a8dc:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
  pHeader[41]  = 0x4C;
  pHeader[42]  = 0x1D;
9000a8e0:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
9000a8e4:	466b      	mov	r3, sp
  pHeader[43]  = 0x00;
9000a8e6:	f881 002b 	strb.w	r0, [r1, #43]	; 0x2b
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
9000a8ea:	f881 9020 	strb.w	r9, [r1, #32]
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
9000a8ee:	4870      	ldr	r0, [pc, #448]	; (9000aab0 <AUDIO_REC_Start+0x2b4>)
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
9000a8f0:	f881 7022 	strb.w	r7, [r1, #34]	; 0x22
  pHeader[38]  = 't';
9000a8f4:	f881 e026 	strb.w	lr, [r1, #38]	; 0x26
  pHeader[41]  = 0x4C;
9000a8f8:	f881 c029 	strb.w	ip, [r1, #41]	; 0x29
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
9000a8fc:	f7fe f991 	bl	90008c22 <f_write>
9000a900:	4604      	mov	r4, r0
9000a902:	2800      	cmp	r0, #0
9000a904:	d18a      	bne.n	9000a81c <AUDIO_REC_Start+0x20>
      AudioState = AUDIO_STATE_PRERECORD;
9000a906:	4b6f      	ldr	r3, [pc, #444]	; (9000aac4 <AUDIO_REC_Start+0x2c8>)
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
9000a908:	f04f 30ff 	mov.w	r0, #4294967295
      AudioState = AUDIO_STATE_PRERECORD;
9000a90c:	f883 9000 	strb.w	r9, [r3]
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
9000a910:	f7f6 ff60 	bl	900017d4 <BSP_LCD_SetTextColor>
      sprintf((char *)str, "Recording file: %s", 
9000a914:	4a65      	ldr	r2, [pc, #404]	; (9000aaac <AUDIO_REC_Start+0x2b0>)
9000a916:	eb0d 0009 	add.w	r0, sp, r9
9000a91a:	496b      	ldr	r1, [pc, #428]	; (9000aac8 <AUDIO_REC_Start+0x2cc>)
9000a91c:	f000 fdcc 	bl	9000b4b8 <siprintf>
      BSP_LCD_ClearStringLine(4);
9000a920:	4648      	mov	r0, r9
9000a922:	f7f7 f9b3 	bl	90001c8c <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(4, str);
9000a926:	eb0d 0109 	add.w	r1, sp, r9
9000a92a:	4648      	mov	r0, r9
9000a92c:	f7f7 f8e8 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN); 
9000a930:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a934:	f7f6 ff4e 	bl	900017d4 <BSP_LCD_SetTextColor>
      sprintf((char *)str,  "Sample rate : %d Hz", (int)DEFAULT_AUDIO_IN_FREQ);
9000a938:	4632      	mov	r2, r6
9000a93a:	4964      	ldr	r1, [pc, #400]	; (9000aacc <AUDIO_REC_Start+0x2d0>)
9000a93c:	eb0d 0009 	add.w	r0, sp, r9
9000a940:	f000 fdba 	bl	9000b4b8 <siprintf>
      BSP_LCD_ClearStringLine(6);
9000a944:	2006      	movs	r0, #6
9000a946:	f7f7 f9a1 	bl	90001c8c <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(6, str);
9000a94a:	eb0d 0109 	add.w	r1, sp, r9
9000a94e:	2006      	movs	r0, #6
9000a950:	f7f7 f8d6 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str,  "Channels number : %d", (int)DEFAULT_AUDIO_IN_CHANNEL_NBR);
9000a954:	462a      	mov	r2, r5
9000a956:	495e      	ldr	r1, [pc, #376]	; (9000aad0 <AUDIO_REC_Start+0x2d4>)
9000a958:	eb0d 0009 	add.w	r0, sp, r9
9000a95c:	f000 fdac 	bl	9000b4b8 <siprintf>
      BSP_LCD_ClearStringLine(7);      
9000a960:	2007      	movs	r0, #7
9000a962:	f7f7 f993 	bl	90001c8c <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
9000a966:	eb0d 0109 	add.w	r1, sp, r9
9000a96a:	2007      	movs	r0, #7
9000a96c:	f7f7 f8c8 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str,  "Volume : %d ", (int)uwVolume_rec);
9000a970:	f8d8 2000 	ldr.w	r2, [r8]
9000a974:	4957      	ldr	r1, [pc, #348]	; (9000aad4 <AUDIO_REC_Start+0x2d8>)
9000a976:	eb0d 0009 	add.w	r0, sp, r9
9000a97a:	f000 fd9d 	bl	9000b4b8 <siprintf>
      BSP_LCD_ClearStringLine(7);
9000a97e:	2007      	movs	r0, #7
9000a980:	f7f7 f984 	bl	90001c8c <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
9000a984:	eb0d 0109 	add.w	r1, sp, r9
9000a988:	2007      	movs	r0, #7
9000a98a:	f7f7 f8b9 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str, "File Size :");
9000a98e:	4952      	ldr	r1, [pc, #328]	; (9000aad8 <AUDIO_REC_Start+0x2dc>)
9000a990:	eb0d 0009 	add.w	r0, sp, r9
9000a994:	f000 ff21 	bl	9000b7da <strcpy>
      BSP_LCD_ClearStringLine(8);
9000a998:	2008      	movs	r0, #8
9000a99a:	f7f7 f977 	bl	90001c8c <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(8, str);
9000a99e:	eb0d 0109 	add.w	r1, sp, r9
9000a9a2:	2008      	movs	r0, #8
9000a9a4:	f7f7 f8ac 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
  * @param  None
  * @retval None
  */
static void AUDIO_REC_DisplayButtons(void)
{
  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
9000a9a8:	484c      	ldr	r0, [pc, #304]	; (9000aadc <AUDIO_REC_Start+0x2e0>)
9000a9aa:	f7f6 ff2b 	bl	90001804 <BSP_LCD_SetFont>
  BSP_LCD_ClearStringLine(13);            /* Clear dedicated zone */
9000a9ae:	200d      	movs	r0, #13
9000a9b0:	f7f7 f96c 	bl	90001c8c <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(14);
9000a9b4:	200e      	movs	r0, #14
9000a9b6:	f7f7 f969 	bl	90001c8c <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(15);
9000a9ba:	200f      	movs	r0, #15
9000a9bc:	f7f7 f966 	bl	90001c8c <BSP_LCD_ClearStringLine>

  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000a9c0:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a9c4:	f7f6 ff06 	bl	900017d4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2, /* Record circle */
9000a9c8:	2214      	movs	r2, #20
9000a9ca:	21e8      	movs	r1, #232	; 0xe8
9000a9cc:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000a9d0:	f7f7 f984 	bl	90001cdc <BSP_LCD_FillCircle>
                     (TOUCH_RECORD_YMAX+TOUCH_RECORD_YMIN)/2,
                     (TOUCH_RECORD_XMAX-TOUCH_RECORD_XMIN)/2);
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);    /* Pause rectangles */
9000a9d4:	2328      	movs	r3, #40	; 0x28
9000a9d6:	220f      	movs	r2, #15
9000a9d8:	21d4      	movs	r1, #212	; 0xd4
9000a9da:	207d      	movs	r0, #125	; 0x7d
9000a9dc:	f7f7 f91a 	bl	90001c14 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000a9e0:	2328      	movs	r3, #40	; 0x28
9000a9e2:	220f      	movs	r2, #15
9000a9e4:	21d4      	movs	r1, #212	; 0xd4
9000a9e6:	2091      	movs	r0, #145	; 0x91
9000a9e8:	f7f7 f914 	bl	90001c14 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
9000a9ec:	2328      	movs	r3, #40	; 0x28
9000a9ee:	21d4      	movs	r1, #212	; 0xd4
9000a9f0:	20cd      	movs	r0, #205	; 0xcd
9000a9f2:	461a      	mov	r2, r3
9000a9f4:	f7f7 f90e 	bl	90001c14 <BSP_LCD_FillRect>
                   TOUCH_STOP_XMAX - TOUCH_STOP_XMIN,
                   TOUCH_STOP_YMAX - TOUCH_STOP_YMIN);
  BSP_LCD_DrawRect(TOUCH_VOL_MINUS_XMIN, TOUCH_VOL_MINUS_YMIN , /* VOl- rectangle */
9000a9f8:	2328      	movs	r3, #40	; 0x28
9000a9fa:	2232      	movs	r2, #50	; 0x32
9000a9fc:	21d4      	movs	r1, #212	; 0xd4
9000a9fe:	2014      	movs	r0, #20
9000aa00:	f7f6 ff90 	bl	90001924 <BSP_LCD_DrawRect>
                   TOUCH_VOL_MINUS_XMAX - TOUCH_VOL_MINUS_XMIN,
                   TOUCH_VOL_MINUS_YMAX - TOUCH_VOL_MINUS_YMIN);
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl-", LEFT_MODE);
9000aa04:	f7f6 ff0a 	bl	9000181c <BSP_LCD_GetFont>
9000aa08:	88c1      	ldrh	r1, [r0, #6]
9000aa0a:	2303      	movs	r3, #3
9000aa0c:	4a34      	ldr	r2, [pc, #208]	; (9000aae0 <AUDIO_REC_Start+0x2e4>)
9000aa0e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
9000aa12:	2018      	movs	r0, #24
9000aa14:	0049      	lsls	r1, r1, #1
9000aa16:	b289      	uxth	r1, r1
9000aa18:	f7f7 f81c 	bl	90001a54 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(TOUCH_VOL_PLUS_XMIN, TOUCH_VOL_PLUS_YMIN , /* VOl+ rectangle */
9000aa1c:	2328      	movs	r3, #40	; 0x28
9000aa1e:	2232      	movs	r2, #50	; 0x32
9000aa20:	21d4      	movs	r1, #212	; 0xd4
9000aa22:	f44f 70c9 	mov.w	r0, #402	; 0x192
9000aa26:	f7f6 ff7d 	bl	90001924 <BSP_LCD_DrawRect>
                   TOUCH_VOL_PLUS_XMAX - TOUCH_VOL_PLUS_XMIN,
                   TOUCH_VOL_PLUS_YMAX - TOUCH_VOL_PLUS_YMIN);
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl+", RIGHT_MODE);
9000aa2a:	f7f6 fef7 	bl	9000181c <BSP_LCD_GetFont>
9000aa2e:	88c1      	ldrh	r1, [r0, #6]
9000aa30:	462b      	mov	r3, r5
9000aa32:	4a2c      	ldr	r2, [pc, #176]	; (9000aae4 <AUDIO_REC_Start+0x2e8>)
9000aa34:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
9000aa38:	2018      	movs	r0, #24
9000aa3a:	0049      	lsls	r1, r1, #1
9000aa3c:	b289      	uxth	r1, r1
9000aa3e:	f7f7 f809 	bl	90001a54 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
9000aa42:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
9000aa46:	f7f6 fec5 	bl	900017d4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000aa4a:	4827      	ldr	r0, [pc, #156]	; (9000aae8 <AUDIO_REC_Start+0x2ec>)
9000aa4c:	f7f6 feda 	bl	90001804 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAtLine(15, (uint8_t *)"Use record button to start record, stop to exit");
9000aa50:	4926      	ldr	r1, [pc, #152]	; (9000aaec <AUDIO_REC_Start+0x2f0>)
9000aa52:	200f      	movs	r0, #15
9000aa54:	f7f7 f854 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000aa58:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000aa5c:	f7f6 feba 	bl	900017d4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [     ]", LEFT_MODE);
9000aa60:	f7f6 fedc 	bl	9000181c <BSP_LCD_GetFont>
9000aa64:	88c1      	ldrh	r1, [r0, #6]
9000aa66:	2303      	movs	r3, #3
9000aa68:	4a21      	ldr	r2, [pc, #132]	; (9000aaf0 <AUDIO_REC_Start+0x2f4>)
9000aa6a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000aa6e:	20f7      	movs	r0, #247	; 0xf7
9000aa70:	0049      	lsls	r1, r1, #1
9000aa72:	b289      	uxth	r1, r1
9000aa74:	f7f6 ffee 	bl	90001a54 <BSP_LCD_DisplayStringAt>
        if(byteswritten != 0)
9000aa78:	9b00      	ldr	r3, [sp, #0]
9000aa7a:	2b00      	cmp	r3, #0
9000aa7c:	f43f aece 	beq.w	9000a81c <AUDIO_REC_Start+0x20>
          BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
9000aa80:	462a      	mov	r2, r5
9000aa82:	4639      	mov	r1, r7
9000aa84:	4630      	mov	r0, r6
9000aa86:	f7f6 fe09 	bl	9000169c <BSP_AUDIO_IN_Init>
          BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
9000aa8a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
9000aa8e:	4819      	ldr	r0, [pc, #100]	; (9000aaf4 <AUDIO_REC_Start+0x2f8>)
9000aa90:	f7f6 fcc8 	bl	90001424 <BSP_AUDIO_IN_Record>
          BufferCtl.fptr = byteswritten;
9000aa94:	4b18      	ldr	r3, [pc, #96]	; (9000aaf8 <AUDIO_REC_Start+0x2fc>)
9000aa96:	9a00      	ldr	r2, [sp, #0]
          BufferCtl.pcm_ptr = 0;
9000aa98:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
          BufferCtl.fptr = byteswritten;
9000aa9c:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
          BufferCtl.offset = 0;
9000aaa0:	f8c3 4808 	str.w	r4, [r3, #2056]	; 0x808
          BufferCtl.wr_state = BUFFER_EMPTY;
9000aaa4:	f883 4804 	strb.w	r4, [r3, #2052]	; 0x804
          return AUDIO_ERROR_NONE;
9000aaa8:	e6b9      	b.n	9000a81e <AUDIO_REC_Start+0x22>
9000aaaa:	bf00      	nop
9000aaac:	900113ae 	.word	0x900113ae
9000aab0:	20001b88 	.word	0x20001b88
9000aab4:	20001db8 	.word	0x20001db8
9000aab8:	001d4c00 	.word	0x001d4c00
9000aabc:	00100004 	.word	0x00100004
9000aac0:	20008974 	.word	0x20008974
9000aac4:	200012f2 	.word	0x200012f2
9000aac8:	900113b7 	.word	0x900113b7
9000aacc:	90010e49 	.word	0x90010e49
9000aad0:	90010e5d 	.word	0x90010e5d
9000aad4:	900113ca 	.word	0x900113ca
9000aad8:	900113d7 	.word	0x900113d7
9000aadc:	20000078 	.word	0x20000078
9000aae0:	90010ea5 	.word	0x90010ea5
9000aae4:	90010eaa 	.word	0x90010eaa
9000aae8:	20000070 	.word	0x20000070
9000aaec:	900113e3 	.word	0x900113e3
9000aaf0:	90011413 	.word	0x90011413
9000aaf4:	200089cc 	.word	0x200089cc
9000aaf8:	2000c9cc 	.word	0x2000c9cc
9000aafc:	200000d8 	.word	0x200000d8

9000ab00 <AUDIO_REC_Process>:
{
9000ab00:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t byteswritten = 0;
9000ab02:	2300      	movs	r3, #0
{
9000ab04:	b087      	sub	sp, #28
  switch(AudioState)
9000ab06:	4ca2      	ldr	r4, [pc, #648]	; (9000ad90 <AUDIO_REC_Process+0x290>)
  uint32_t byteswritten = 0;
9000ab08:	9301      	str	r3, [sp, #4]
  switch(AudioState)
9000ab0a:	7823      	ldrb	r3, [r4, #0]
9000ab0c:	3b01      	subs	r3, #1
9000ab0e:	2b0d      	cmp	r3, #13
9000ab10:	d817      	bhi.n	9000ab42 <AUDIO_REC_Process+0x42>
9000ab12:	e8df f013 	tbh	[pc, r3, lsl #1]
9000ab16:	0229      	.short	0x0229
9000ab18:	00160016 	.word	0x00160016
9000ab1c:	0078000e 	.word	0x0078000e
9000ab20:	00390039 	.word	0x00390039
9000ab24:	00160016 	.word	0x00160016
9000ab28:	01ad0159 	.word	0x01ad0159
9000ab2c:	020601da 	.word	0x020601da
9000ab30:	0222      	.short	0x0222
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000ab32:	4d98      	ldr	r5, [pc, #608]	; (9000ad94 <AUDIO_REC_Process+0x294>)
9000ab34:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000ab38:	2b01      	cmp	r3, #1
9000ab3a:	d104      	bne.n	9000ab46 <AUDIO_REC_Process+0x46>
      BSP_TS_GetState(&TS_State);
9000ab3c:	4896      	ldr	r0, [pc, #600]	; (9000ad98 <AUDIO_REC_Process+0x298>)
9000ab3e:	f7f7 fd3d 	bl	900025bc <BSP_TS_GetState>
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
9000ab42:	2500      	movs	r5, #0
9000ab44:	e0df      	b.n	9000ad06 <AUDIO_REC_Process+0x206>
      BSP_TS_GetState(&TS_State);
9000ab46:	f105 002c 	add.w	r0, r5, #44	; 0x2c
9000ab4a:	f7f7 fd37 	bl	900025bc <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
9000ab4e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
9000ab52:	2a01      	cmp	r2, #1
9000ab54:	d13d      	bne.n	9000abd2 <AUDIO_REC_Process+0xd2>
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
9000ab56:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
9000ab58:	f1a3 01ce 	sub.w	r1, r3, #206	; 0xce
9000ab5c:	2926      	cmp	r1, #38	; 0x26
9000ab5e:	d807      	bhi.n	9000ab70 <AUDIO_REC_Process+0x70>
9000ab60:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
9000ab62:	3ad5      	subs	r2, #213	; 0xd5
9000ab64:	b292      	uxth	r2, r2
9000ab66:	2a26      	cmp	r2, #38	; 0x26
9000ab68:	d835      	bhi.n	9000abd6 <AUDIO_REC_Process+0xd6>
      AudioState = AUDIO_STATE_STOP;
9000ab6a:	230a      	movs	r3, #10
          AudioState = AUDIO_STATE_PRERECORD;
9000ab6c:	7023      	strb	r3, [r4, #0]
9000ab6e:	e7e8      	b.n	9000ab42 <AUDIO_REC_Process+0x42>
        else if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
9000ab70:	f46f 7696 	mvn.w	r6, #300	; 0x12c
9000ab74:	1999      	adds	r1, r3, r6
9000ab76:	2926      	cmp	r1, #38	; 0x26
9000ab78:	d808      	bhi.n	9000ab8c <AUDIO_REC_Process+0x8c>
9000ab7a:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000ab7c:	3bd5      	subs	r3, #213	; 0xd5
9000ab7e:	b29b      	uxth	r3, r3
9000ab80:	2b26      	cmp	r3, #38	; 0x26
9000ab82:	d83b      	bhi.n	9000abfc <AUDIO_REC_Process+0xfc>
          display_update = 1;
9000ab84:	4b85      	ldr	r3, [pc, #532]	; (9000ad9c <AUDIO_REC_Process+0x29c>)
9000ab86:	605a      	str	r2, [r3, #4]
    AudioState = AUDIO_STATE_RECORD;
9000ab88:	2305      	movs	r3, #5
9000ab8a:	e7ef      	b.n	9000ab6c <AUDIO_REC_Process+0x6c>
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
9000ab8c:	f1a3 0215 	sub.w	r2, r3, #21
9000ab90:	2a30      	cmp	r2, #48	; 0x30
9000ab92:	d820      	bhi.n	9000abd6 <AUDIO_REC_Process+0xd6>
9000ab94:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000ab96:	3bd5      	subs	r3, #213	; 0xd5
9000ab98:	b29b      	uxth	r3, r3
9000ab9a:	2b26      	cmp	r3, #38	; 0x26
9000ab9c:	d82e      	bhi.n	9000abfc <AUDIO_REC_Process+0xfc>
          AudioState = AUDIO_STATE_VOLUME_DOWN;
9000ab9e:	230e      	movs	r3, #14
9000aba0:	7023      	strb	r3, [r4, #0]
          if(uwVolume_rec >= 5)
9000aba2:	4b7e      	ldr	r3, [pc, #504]	; (9000ad9c <AUDIO_REC_Process+0x29c>)
9000aba4:	681a      	ldr	r2, [r3, #0]
9000aba6:	2a04      	cmp	r2, #4
9000aba8:	d902      	bls.n	9000abb0 <AUDIO_REC_Process+0xb0>
        	  uwVolume_rec -= 5;
9000abaa:	681a      	ldr	r2, [r3, #0]
9000abac:	3a05      	subs	r2, #5
        	  uwVolume_rec += 5;
9000abae:	601a      	str	r2, [r3, #0]
          sprintf((char *)str,  "Volume : %d ", (int)uwVolume_rec);
9000abb0:	4d7a      	ldr	r5, [pc, #488]	; (9000ad9c <AUDIO_REC_Process+0x29c>)
9000abb2:	a802      	add	r0, sp, #8
9000abb4:	497a      	ldr	r1, [pc, #488]	; (9000ada0 <AUDIO_REC_Process+0x2a0>)
9000abb6:	682a      	ldr	r2, [r5, #0]
9000abb8:	f000 fc7e 	bl	9000b4b8 <siprintf>
          BSP_LCD_ClearStringLine(7);
9000abbc:	2007      	movs	r0, #7
9000abbe:	f7f7 f865 	bl	90001c8c <BSP_LCD_ClearStringLine>
          BSP_LCD_DisplayStringAtLine(7, str);
9000abc2:	2007      	movs	r0, #7
9000abc4:	a902      	add	r1, sp, #8
9000abc6:	f7f6 ff9b 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
          BSP_AUDIO_IN_SetVolume(uwVolume_rec);
9000abca:	6828      	ldr	r0, [r5, #0]
9000abcc:	b2c0      	uxtb	r0, r0
9000abce:	f7f6 fc5d 	bl	9000148c <BSP_AUDIO_IN_SetVolume>
          AudioState = AUDIO_STATE_PRERECORD;
9000abd2:	2304      	movs	r3, #4
9000abd4:	e7ca      	b.n	9000ab6c <AUDIO_REC_Process+0x6c>
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
9000abd6:	f46f 70c9 	mvn.w	r0, #402	; 0x192
9000abda:	4403      	add	r3, r0
9000abdc:	2b30      	cmp	r3, #48	; 0x30
9000abde:	d80d      	bhi.n	9000abfc <AUDIO_REC_Process+0xfc>
9000abe0:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000abe2:	3bd5      	subs	r3, #213	; 0xd5
9000abe4:	b29b      	uxth	r3, r3
9000abe6:	2b26      	cmp	r3, #38	; 0x26
9000abe8:	d808      	bhi.n	9000abfc <AUDIO_REC_Process+0xfc>
          AudioState = AUDIO_STATE_VOLUME_UP;
9000abea:	230d      	movs	r3, #13
9000abec:	7023      	strb	r3, [r4, #0]
          if(uwVolume_rec <= 95)
9000abee:	4b6b      	ldr	r3, [pc, #428]	; (9000ad9c <AUDIO_REC_Process+0x29c>)
9000abf0:	681a      	ldr	r2, [r3, #0]
9000abf2:	2a5f      	cmp	r2, #95	; 0x5f
9000abf4:	d8dc      	bhi.n	9000abb0 <AUDIO_REC_Process+0xb0>
        	  uwVolume_rec += 5;
9000abf6:	681a      	ldr	r2, [r3, #0]
9000abf8:	3205      	adds	r2, #5
9000abfa:	e7d8      	b.n	9000abae <AUDIO_REC_Process+0xae>
        if ((AudioState == AUDIO_STATE_VOLUME_DOWN) || (AudioState == AUDIO_STATE_VOLUME_UP))
9000abfc:	7823      	ldrb	r3, [r4, #0]
9000abfe:	3b0d      	subs	r3, #13
9000ac00:	2b01      	cmp	r3, #1
9000ac02:	d89e      	bhi.n	9000ab42 <AUDIO_REC_Process+0x42>
9000ac04:	e7d4      	b.n	9000abb0 <AUDIO_REC_Process+0xb0>
    if (display_update)
9000ac06:	4f65      	ldr	r7, [pc, #404]	; (9000ad9c <AUDIO_REC_Process+0x29c>)
9000ac08:	687b      	ldr	r3, [r7, #4]
9000ac0a:	b1eb      	cbz	r3, 9000ac48 <AUDIO_REC_Process+0x148>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red record circle */
9000ac0c:	4865      	ldr	r0, [pc, #404]	; (9000ada4 <AUDIO_REC_Process+0x2a4>)
9000ac0e:	f7f6 fde1 	bl	900017d4 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000ac12:	2214      	movs	r2, #20
9000ac14:	21e8      	movs	r1, #232	; 0xe8
9000ac16:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000ac1a:	f7f7 f85f 	bl	90001cdc <BSP_LCD_FillCircle>
      BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000ac1e:	4862      	ldr	r0, [pc, #392]	; (9000ada8 <AUDIO_REC_Process+0x2a8>)
9000ac20:	f7f6 fdf0 	bl	90001804 <BSP_LCD_SetFont>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000ac24:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000ac28:	f7f6 fdd4 	bl	900017d4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [RECORD]", LEFT_MODE);
9000ac2c:	f7f6 fdf6 	bl	9000181c <BSP_LCD_GetFont>
9000ac30:	88c1      	ldrh	r1, [r0, #6]
9000ac32:	2303      	movs	r3, #3
9000ac34:	4a5d      	ldr	r2, [pc, #372]	; (9000adac <AUDIO_REC_Process+0x2ac>)
9000ac36:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000ac3a:	20f7      	movs	r0, #247	; 0xf7
9000ac3c:	0049      	lsls	r1, r1, #1
9000ac3e:	b289      	uxth	r1, r1
9000ac40:	f7f6 ff08 	bl	90001a54 <BSP_LCD_DisplayStringAt>
      display_update = 0;
9000ac44:	2300      	movs	r3, #0
9000ac46:	607b      	str	r3, [r7, #4]
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000ac48:	4d52      	ldr	r5, [pc, #328]	; (9000ad94 <AUDIO_REC_Process+0x294>)
9000ac4a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
      BSP_TS_GetState(&TS_State);
9000ac4e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000ac52:	2b01      	cmp	r3, #1
9000ac54:	d10c      	bne.n	9000ac70 <AUDIO_REC_Process+0x170>
      BSP_TS_GetState(&TS_State);
9000ac56:	f7f7 fcb1 	bl	900025bc <BSP_TS_GetState>
    if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
9000ac5a:	4955      	ldr	r1, [pc, #340]	; (9000adb0 <AUDIO_REC_Process+0x2b0>)
9000ac5c:	4b55      	ldr	r3, [pc, #340]	; (9000adb4 <AUDIO_REC_Process+0x2b4>)
9000ac5e:	f501 4680 	add.w	r6, r1, #16384	; 0x4000
9000ac62:	f8d6 280c 	ldr.w	r2, [r6, #2060]	; 0x80c
9000ac66:	429a      	cmp	r2, r3
9000ac68:	d937      	bls.n	9000acda <AUDIO_REC_Process+0x1da>
      display_update = 1;
9000ac6a:	2301      	movs	r3, #1
9000ac6c:	607b      	str	r3, [r7, #4]
9000ac6e:	e77c      	b.n	9000ab6a <AUDIO_REC_Process+0x6a>
      BSP_TS_GetState(&TS_State);
9000ac70:	f7f7 fca4 	bl	900025bc <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
9000ac74:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000ac78:	2b01      	cmp	r3, #1
9000ac7a:	d1ee      	bne.n	9000ac5a <AUDIO_REC_Process+0x15a>
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
9000ac7c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
9000ac7e:	f1a3 02ce 	sub.w	r2, r3, #206	; 0xce
9000ac82:	2a26      	cmp	r2, #38	; 0x26
9000ac84:	d807      	bhi.n	9000ac96 <AUDIO_REC_Process+0x196>
9000ac86:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
9000ac88:	3ad5      	subs	r2, #213	; 0xd5
9000ac8a:	b292      	uxth	r2, r2
9000ac8c:	2a26      	cmp	r2, #38	; 0x26
9000ac8e:	d818      	bhi.n	9000acc2 <AUDIO_REC_Process+0x1c2>
          AudioState = AUDIO_STATE_STOP;
9000ac90:	230a      	movs	r3, #10
          AudioState = AUDIO_STATE_VOLUME_UP;
9000ac92:	7023      	strb	r3, [r4, #0]
9000ac94:	e7e1      	b.n	9000ac5a <AUDIO_REC_Process+0x15a>
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
9000ac96:	f1a3 027e 	sub.w	r2, r3, #126	; 0x7e
9000ac9a:	2a16      	cmp	r2, #22
9000ac9c:	d806      	bhi.n	9000acac <AUDIO_REC_Process+0x1ac>
9000ac9e:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000aca0:	3bd5      	subs	r3, #213	; 0xd5
9000aca2:	b29b      	uxth	r3, r3
9000aca4:	2b26      	cmp	r3, #38	; 0x26
9000aca6:	d8d8      	bhi.n	9000ac5a <AUDIO_REC_Process+0x15a>
          AudioState = AUDIO_STATE_PAUSE;
9000aca8:	230b      	movs	r3, #11
9000acaa:	e7f2      	b.n	9000ac92 <AUDIO_REC_Process+0x192>
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
9000acac:	f1a3 0215 	sub.w	r2, r3, #21
9000acb0:	2a30      	cmp	r2, #48	; 0x30
9000acb2:	d806      	bhi.n	9000acc2 <AUDIO_REC_Process+0x1c2>
9000acb4:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000acb6:	3bd5      	subs	r3, #213	; 0xd5
9000acb8:	b29b      	uxth	r3, r3
9000acba:	2b26      	cmp	r3, #38	; 0x26
9000acbc:	d8cd      	bhi.n	9000ac5a <AUDIO_REC_Process+0x15a>
          AudioState = AUDIO_STATE_VOLUME_DOWN;
9000acbe:	230e      	movs	r3, #14
9000acc0:	e7e7      	b.n	9000ac92 <AUDIO_REC_Process+0x192>
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
9000acc2:	f46f 71c9 	mvn.w	r1, #402	; 0x192
9000acc6:	440b      	add	r3, r1
9000acc8:	2b30      	cmp	r3, #48	; 0x30
9000acca:	d8c6      	bhi.n	9000ac5a <AUDIO_REC_Process+0x15a>
9000accc:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000acce:	3bd5      	subs	r3, #213	; 0xd5
9000acd0:	b29b      	uxth	r3, r3
9000acd2:	2b26      	cmp	r3, #38	; 0x26
9000acd4:	d8c1      	bhi.n	9000ac5a <AUDIO_REC_Process+0x15a>
          AudioState = AUDIO_STATE_VOLUME_UP;
9000acd6:	230d      	movs	r3, #13
9000acd8:	e7db      	b.n	9000ac92 <AUDIO_REC_Process+0x192>
    if(BufferCtl.wr_state == BUFFER_FULL)
9000acda:	f896 5804 	ldrb.w	r5, [r6, #2052]	; 0x804
9000acde:	2d01      	cmp	r5, #1
9000ace0:	d11c      	bne.n	9000ad1c <AUDIO_REC_Process+0x21c>
      if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset), 
9000ace2:	f8d6 0808 	ldr.w	r0, [r6, #2056]	; 0x808
9000ace6:	ab01      	add	r3, sp, #4
9000ace8:	f44f 5210 	mov.w	r2, #9216	; 0x2400
9000acec:	eb01 0140 	add.w	r1, r1, r0, lsl #1
9000acf0:	4831      	ldr	r0, [pc, #196]	; (9000adb8 <AUDIO_REC_Process+0x2b8>)
9000acf2:	f7fd ff96 	bl	90008c22 <f_write>
9000acf6:	b148      	cbz	r0, 9000ad0c <AUDIO_REC_Process+0x20c>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000acf8:	482a      	ldr	r0, [pc, #168]	; (9000ada4 <AUDIO_REC_Process+0x2a4>)
9000acfa:	f7f6 fd6b 	bl	900017d4 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"RECORD FAIL");
9000acfe:	492f      	ldr	r1, [pc, #188]	; (9000adbc <AUDIO_REC_Process+0x2bc>)
9000ad00:	200e      	movs	r0, #14
9000ad02:	f7f6 fefd 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
}
9000ad06:	4628      	mov	r0, r5
9000ad08:	b007      	add	sp, #28
9000ad0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      BufferCtl.fptr += byteswritten;
9000ad0c:	f8d6 380c 	ldr.w	r3, [r6, #2060]	; 0x80c
9000ad10:	9a01      	ldr	r2, [sp, #4]
      BufferCtl.wr_state =  BUFFER_EMPTY;
9000ad12:	f886 0804 	strb.w	r0, [r6, #2052]	; 0x804
      BufferCtl.fptr += byteswritten;
9000ad16:	4413      	add	r3, r2
9000ad18:	f8c6 380c 	str.w	r3, [r6, #2060]	; 0x80c
    elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2); 
9000ad1c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
9000ad20:	f8d6 380c 	ldr.w	r3, [r6, #2060]	; 0x80c
9000ad24:	fbb3 f3f2 	udiv	r3, r3, r2
    if(prev_elapsed_time != elapsed_time)
9000ad28:	68ba      	ldr	r2, [r7, #8]
9000ad2a:	429a      	cmp	r2, r3
9000ad2c:	f43f af09 	beq.w	9000ab42 <AUDIO_REC_Process+0x42>
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
9000ad30:	213c      	movs	r1, #60	; 0x3c
      prev_elapsed_time = elapsed_time;
9000ad32:	60bb      	str	r3, [r7, #8]
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
9000ad34:	a802      	add	r0, sp, #8
9000ad36:	fbb3 f2f1 	udiv	r2, r3, r1
9000ad3a:	fb01 3312 	mls	r3, r1, r2, r3
9000ad3e:	4920      	ldr	r1, [pc, #128]	; (9000adc0 <AUDIO_REC_Process+0x2c0>)
9000ad40:	f000 fbba 	bl	9000b4b8 <siprintf>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
9000ad44:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000ad48:	f7f6 fd44 	bl	900017d4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(263, LINE(8), str, LEFT_MODE);
9000ad4c:	f7f6 fd66 	bl	9000181c <BSP_LCD_GetFont>
9000ad50:	88c1      	ldrh	r1, [r0, #6]
9000ad52:	2303      	movs	r3, #3
9000ad54:	aa02      	add	r2, sp, #8
9000ad56:	00c9      	lsls	r1, r1, #3
9000ad58:	f240 1007 	movw	r0, #263	; 0x107
9000ad5c:	b289      	uxth	r1, r1
9000ad5e:	f7f6 fe79 	bl	90001a54 <BSP_LCD_DisplayStringAt>
      sprintf((char *)str, "%4d KB", (int)((int32_t)BufferCtl.fptr/1024));
9000ad62:	f8d6 280c 	ldr.w	r2, [r6, #2060]	; 0x80c
9000ad66:	4917      	ldr	r1, [pc, #92]	; (9000adc4 <AUDIO_REC_Process+0x2c4>)
9000ad68:	a802      	add	r0, sp, #8
9000ad6a:	2a00      	cmp	r2, #0
9000ad6c:	bfb8      	it	lt
9000ad6e:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
9000ad72:	1292      	asrs	r2, r2, #10
9000ad74:	f000 fba0 	bl	9000b4b8 <siprintf>
      BSP_LCD_DisplayStringAt(83, LINE(8), str, LEFT_MODE);
9000ad78:	f7f6 fd50 	bl	9000181c <BSP_LCD_GetFont>
9000ad7c:	88c1      	ldrh	r1, [r0, #6]
9000ad7e:	2303      	movs	r3, #3
9000ad80:	aa02      	add	r2, sp, #8
9000ad82:	00c9      	lsls	r1, r1, #3
9000ad84:	2053      	movs	r0, #83	; 0x53
9000ad86:	b289      	uxth	r1, r1
9000ad88:	f7f6 fe64 	bl	90001a54 <BSP_LCD_DisplayStringAt>
9000ad8c:	e6d9      	b.n	9000ab42 <AUDIO_REC_Process+0x42>
9000ad8e:	bf00      	nop
9000ad90:	200012f2 	.word	0x200012f2
9000ad94:	20008974 	.word	0x20008974
9000ad98:	200089a0 	.word	0x200089a0
9000ad9c:	200000d8 	.word	0x200000d8
9000ada0:	900113ca 	.word	0x900113ca
9000ada4:	ffff0000 	.word	0xffff0000
9000ada8:	20000070 	.word	0x20000070
9000adac:	9001141d 	.word	0x9001141d
9000adb0:	200089cc 	.word	0x200089cc
9000adb4:	001d4bff 	.word	0x001d4bff
9000adb8:	20001b88 	.word	0x20001b88
9000adbc:	90011428 	.word	0x90011428
9000adc0:	90010e84 	.word	0x90010e84
9000adc4:	90011434 	.word	0x90011434
    BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
9000adc8:	2002      	movs	r0, #2
9000adca:	f7f6 fb35 	bl	90001438 <BSP_AUDIO_IN_Stop>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);   /* Display blue cyan record circle */
9000adce:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000add2:	f7f6 fcff 	bl	900017d4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000add6:	2214      	movs	r2, #20
9000add8:	21e8      	movs	r1, #232	; 0xe8
9000adda:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000adde:	f7f6 ff7d 	bl	90001cdc <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000ade2:	4872      	ldr	r0, [pc, #456]	; (9000afac <AUDIO_REC_Process+0x4ac>)
9000ade4:	f7f6 fcf6 	bl	900017d4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
9000ade8:	2328      	movs	r3, #40	; 0x28
9000adea:	21d4      	movs	r1, #212	; 0xd4
9000adec:	20cd      	movs	r0, #205	; 0xcd
9000adee:	461a      	mov	r2, r3
9000adf0:	f7f6 ff10 	bl	90001c14 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000adf4:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000adf8:	f7f6 fcec 	bl	900017d4 <BSP_LCD_SetTextColor>
    display_update = 1;
9000adfc:	4b6c      	ldr	r3, [pc, #432]	; (9000afb0 <AUDIO_REC_Process+0x4b0>)
9000adfe:	2201      	movs	r2, #1
    HAL_Delay(150);
9000ae00:	2096      	movs	r0, #150	; 0x96
    display_update = 1;
9000ae02:	605a      	str	r2, [r3, #4]
    HAL_Delay(150);
9000ae04:	f7f7 fcd4 	bl	900027b0 <HAL_Delay>
    if(f_lseek(&WavFile, 0) == FR_OK)
9000ae08:	2100      	movs	r1, #0
9000ae0a:	486a      	ldr	r0, [pc, #424]	; (9000afb4 <AUDIO_REC_Process+0x4b4>)
9000ae0c:	f7fe f82b 	bl	90008e66 <f_lseek>
9000ae10:	b9f0      	cbnz	r0, 9000ae50 <AUDIO_REC_Process+0x350>
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
9000ae12:	4a69      	ldr	r2, [pc, #420]	; (9000afb8 <AUDIO_REC_Process+0x4b8>)
9000ae14:	4969      	ldr	r1, [pc, #420]	; (9000afbc <AUDIO_REC_Process+0x4bc>)
9000ae16:	f8d2 380c 	ldr.w	r3, [r2, #2060]	; 0x80c
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
9000ae1a:	0a18      	lsrs	r0, r3, #8
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
9000ae1c:	710b      	strb	r3, [r1, #4]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
9000ae1e:	7148      	strb	r0, [r1, #5]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
9000ae20:	0c18      	lsrs	r0, r3, #16
9000ae22:	7188      	strb	r0, [r1, #6]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
9000ae24:	0e18      	lsrs	r0, r3, #24
  BufferCtl.fptr -=44;
9000ae26:	3b2c      	subs	r3, #44	; 0x2c
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
9000ae28:	71c8      	strb	r0, [r1, #7]
  BufferCtl.fptr -=44;
9000ae2a:	f8c2 380c 	str.w	r3, [r2, #2060]	; 0x80c
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
9000ae2e:	0a1a      	lsrs	r2, r3, #8
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
9000ae30:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
9000ae34:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
9000ae38:	0c1a      	lsrs	r2, r3, #16
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
9000ae3a:	0e1b      	lsrs	r3, r3, #24
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
9000ae3c:	485d      	ldr	r0, [pc, #372]	; (9000afb4 <AUDIO_REC_Process+0x4b4>)
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
9000ae3e:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
9000ae42:	222c      	movs	r2, #44	; 0x2c
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
9000ae44:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
9000ae48:	ab01      	add	r3, sp, #4
9000ae4a:	f7fd feea 	bl	90008c22 <f_write>
9000ae4e:	b168      	cbz	r0, 9000ae6c <AUDIO_REC_Process+0x36c>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000ae50:	4856      	ldr	r0, [pc, #344]	; (9000afac <AUDIO_REC_Process+0x4ac>)
        audio_error = AUDIO_ERROR_IO;
9000ae52:	2501      	movs	r5, #1
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000ae54:	f7f6 fcbe 	bl	900017d4 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"RECORD FAIL");          
9000ae58:	4959      	ldr	r1, [pc, #356]	; (9000afc0 <AUDIO_REC_Process+0x4c0>)
9000ae5a:	200e      	movs	r0, #14
9000ae5c:	f7f6 fe50 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
    AudioState = AUDIO_STATE_IDLE;      
9000ae60:	2300      	movs	r3, #0
    f_close(&WavFile);
9000ae62:	4854      	ldr	r0, [pc, #336]	; (9000afb4 <AUDIO_REC_Process+0x4b4>)
    AudioState = AUDIO_STATE_IDLE;      
9000ae64:	7023      	strb	r3, [r4, #0]
    f_close(&WavFile);
9000ae66:	f7fd ffed 	bl	90008e44 <f_close>
    break;
9000ae6a:	e74c      	b.n	9000ad06 <AUDIO_REC_Process+0x206>
        audio_error = AUDIO_ERROR_EOF;
9000ae6c:	2502      	movs	r5, #2
9000ae6e:	e7f7      	b.n	9000ae60 <AUDIO_REC_Process+0x360>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Displays red pause rectangles */
9000ae70:	484e      	ldr	r0, [pc, #312]	; (9000afac <AUDIO_REC_Process+0x4ac>)
9000ae72:	f7f6 fcaf 	bl	900017d4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000ae76:	2328      	movs	r3, #40	; 0x28
9000ae78:	220f      	movs	r2, #15
9000ae7a:	21d4      	movs	r1, #212	; 0xd4
9000ae7c:	207d      	movs	r0, #125	; 0x7d
9000ae7e:	f7f6 fec9 	bl	90001c14 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000ae82:	2328      	movs	r3, #40	; 0x28
9000ae84:	220f      	movs	r2, #15
9000ae86:	21d4      	movs	r1, #212	; 0xd4
9000ae88:	2091      	movs	r0, #145	; 0x91
9000ae8a:	f7f6 fec3 	bl	90001c14 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);   /* Display blue cyan record circle */
9000ae8e:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000ae92:	f7f6 fc9f 	bl	900017d4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000ae96:	2214      	movs	r2, #20
9000ae98:	21e8      	movs	r1, #232	; 0xe8
9000ae9a:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000ae9e:	f7f6 ff1d 	bl	90001cdc <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000aea2:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000aea6:	f7f6 fc95 	bl	900017d4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [PAUSE] ", LEFT_MODE);    
9000aeaa:	f7f6 fcb7 	bl	9000181c <BSP_LCD_GetFont>
9000aeae:	88c1      	ldrh	r1, [r0, #6]
9000aeb0:	2303      	movs	r3, #3
9000aeb2:	4a44      	ldr	r2, [pc, #272]	; (9000afc4 <AUDIO_REC_Process+0x4c4>)
9000aeb4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000aeb8:	20f7      	movs	r0, #247	; 0xf7
9000aeba:	0049      	lsls	r1, r1, #1
9000aebc:	b289      	uxth	r1, r1
9000aebe:	f7f6 fdc9 	bl	90001a54 <BSP_LCD_DisplayStringAt>
    BSP_AUDIO_IN_Pause();
9000aec2:	f7f6 fad3 	bl	9000146c <BSP_AUDIO_IN_Pause>
    AudioState = AUDIO_STATE_WAIT;
9000aec6:	2301      	movs	r3, #1
9000aec8:	e650      	b.n	9000ab6c <AUDIO_REC_Process+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);    /* Displays blue cyan pause rectangles */
9000aeca:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000aece:	f7f6 fc81 	bl	900017d4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000aed2:	2328      	movs	r3, #40	; 0x28
9000aed4:	220f      	movs	r2, #15
9000aed6:	21d4      	movs	r1, #212	; 0xd4
9000aed8:	207d      	movs	r0, #125	; 0x7d
9000aeda:	f7f6 fe9b 	bl	90001c14 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000aede:	2328      	movs	r3, #40	; 0x28
9000aee0:	220f      	movs	r2, #15
9000aee2:	21d4      	movs	r1, #212	; 0xd4
9000aee4:	2091      	movs	r0, #145	; 0x91
9000aee6:	f7f6 fe95 	bl	90001c14 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red record circle */
9000aeea:	4830      	ldr	r0, [pc, #192]	; (9000afac <AUDIO_REC_Process+0x4ac>)
9000aeec:	f7f6 fc72 	bl	900017d4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000aef0:	2214      	movs	r2, #20
9000aef2:	21e8      	movs	r1, #232	; 0xe8
9000aef4:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000aef8:	f7f6 fef0 	bl	90001cdc <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000aefc:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000af00:	f7f6 fc68 	bl	900017d4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [RECORD]", LEFT_MODE);   
9000af04:	f7f6 fc8a 	bl	9000181c <BSP_LCD_GetFont>
9000af08:	88c1      	ldrh	r1, [r0, #6]
9000af0a:	2303      	movs	r3, #3
9000af0c:	4a2e      	ldr	r2, [pc, #184]	; (9000afc8 <AUDIO_REC_Process+0x4c8>)
9000af0e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000af12:	20f7      	movs	r0, #247	; 0xf7
9000af14:	0049      	lsls	r1, r1, #1
9000af16:	b289      	uxth	r1, r1
9000af18:	f7f6 fd9c 	bl	90001a54 <BSP_LCD_DisplayStringAt>
    BSP_AUDIO_IN_Resume();
9000af1c:	f7f6 faae 	bl	9000147c <BSP_AUDIO_IN_Resume>
    AudioState = AUDIO_STATE_RECORD;
9000af20:	e632      	b.n	9000ab88 <AUDIO_REC_Process+0x88>
    if(uwVolume_rec <= 95)
9000af22:	4d23      	ldr	r5, [pc, #140]	; (9000afb0 <AUDIO_REC_Process+0x4b0>)
9000af24:	682b      	ldr	r3, [r5, #0]
9000af26:	2b5f      	cmp	r3, #95	; 0x5f
9000af28:	d802      	bhi.n	9000af30 <AUDIO_REC_Process+0x430>
    	uwVolume_rec += 5;
9000af2a:	682b      	ldr	r3, [r5, #0]
9000af2c:	3305      	adds	r3, #5
    	uwVolume_rec -= 5;
9000af2e:	602b      	str	r3, [r5, #0]
    sprintf((char *)str,  "Volume : %d ", (int)uwVolume_rec);
9000af30:	682a      	ldr	r2, [r5, #0]
9000af32:	a802      	add	r0, sp, #8
9000af34:	4925      	ldr	r1, [pc, #148]	; (9000afcc <AUDIO_REC_Process+0x4cc>)
9000af36:	f000 fabf 	bl	9000b4b8 <siprintf>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000af3a:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000af3e:	f7f6 fc49 	bl	900017d4 <BSP_LCD_SetTextColor>
    BSP_LCD_ClearStringLine(7);
9000af42:	2007      	movs	r0, #7
9000af44:	f7f6 fea2 	bl	90001c8c <BSP_LCD_ClearStringLine>
    BSP_LCD_DisplayStringAtLine(7, str);
9000af48:	a902      	add	r1, sp, #8
9000af4a:	2007      	movs	r0, #7
9000af4c:	f7f6 fdd8 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
    BSP_AUDIO_IN_SetVolume(uwVolume_rec);
9000af50:	6828      	ldr	r0, [r5, #0]
9000af52:	b2c0      	uxtb	r0, r0
9000af54:	f7f6 fa9a 	bl	9000148c <BSP_AUDIO_IN_SetVolume>
    AudioState = AUDIO_STATE_RECORD;
9000af58:	e616      	b.n	9000ab88 <AUDIO_REC_Process+0x88>
    if(uwVolume_rec >= 5)
9000af5a:	4d15      	ldr	r5, [pc, #84]	; (9000afb0 <AUDIO_REC_Process+0x4b0>)
9000af5c:	682b      	ldr	r3, [r5, #0]
9000af5e:	2b04      	cmp	r3, #4
9000af60:	d9e6      	bls.n	9000af30 <AUDIO_REC_Process+0x430>
    	uwVolume_rec -= 5;
9000af62:	682b      	ldr	r3, [r5, #0]
9000af64:	3b05      	subs	r3, #5
9000af66:	e7e2      	b.n	9000af2e <AUDIO_REC_Process+0x42e>
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000af68:	4d14      	ldr	r5, [pc, #80]	; (9000afbc <AUDIO_REC_Process+0x4bc>)
9000af6a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000af6e:	2b01      	cmp	r3, #1
9000af70:	f43f ade4 	beq.w	9000ab3c <AUDIO_REC_Process+0x3c>
      BSP_TS_GetState(&TS_State);
9000af74:	f105 002c 	add.w	r0, r5, #44	; 0x2c
9000af78:	f7f7 fb20 	bl	900025bc <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
9000af7c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000af80:	2b01      	cmp	r3, #1
9000af82:	f47f adde 	bne.w	9000ab42 <AUDIO_REC_Process+0x42>
        if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
9000af86:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
9000af88:	f46f 7296 	mvn.w	r2, #300	; 0x12c
9000af8c:	189a      	adds	r2, r3, r2
9000af8e:	2a26      	cmp	r2, #38	; 0x26
9000af90:	d807      	bhi.n	9000afa2 <AUDIO_REC_Process+0x4a2>
9000af92:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000af94:	3bd5      	subs	r3, #213	; 0xd5
9000af96:	b29b      	uxth	r3, r3
9000af98:	2b26      	cmp	r3, #38	; 0x26
9000af9a:	f63f add2 	bhi.w	9000ab42 <AUDIO_REC_Process+0x42>
          AudioState = AUDIO_STATE_RESUME;
9000af9e:	230c      	movs	r3, #12
9000afa0:	e5e4      	b.n	9000ab6c <AUDIO_REC_Process+0x6c>
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
9000afa2:	3b7e      	subs	r3, #126	; 0x7e
9000afa4:	2b16      	cmp	r3, #22
9000afa6:	d9f4      	bls.n	9000af92 <AUDIO_REC_Process+0x492>
9000afa8:	e5cb      	b.n	9000ab42 <AUDIO_REC_Process+0x42>
9000afaa:	bf00      	nop
9000afac:	ffff0000 	.word	0xffff0000
9000afb0:	200000d8 	.word	0x200000d8
9000afb4:	20001b88 	.word	0x20001b88
9000afb8:	2000c9cc 	.word	0x2000c9cc
9000afbc:	20008974 	.word	0x20008974
9000afc0:	90011428 	.word	0x90011428
9000afc4:	9001143b 	.word	0x9001143b
9000afc8:	9001141d 	.word	0x9001141d
9000afcc:	900113ca 	.word	0x900113ca

9000afd0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
9000afd0:	4b0f      	ldr	r3, [pc, #60]	; (9000b010 <BSP_AUDIO_IN_TransferComplete_CallBack+0x40>)
9000afd2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
9000afd6:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
9000afda:	f5b2 5f90 	cmp.w	r2, #4608	; 0x1200
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
9000afde:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
9000afe2:	d106      	bne.n	9000aff2 <BSP_AUDIO_IN_TransferComplete_CallBack+0x22>
    BufferCtl.wr_state   =  BUFFER_FULL;
9000afe4:	2201      	movs	r2, #1
9000afe6:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
    BufferCtl.offset  = 0;
9000afea:	2200      	movs	r2, #0
9000afec:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
9000aff0:	4770      	bx	lr
9000aff2:	f5b2 5f10 	cmp.w	r2, #9216	; 0x2400
9000aff6:	d309      	bcc.n	9000b00c <BSP_AUDIO_IN_TransferComplete_CallBack+0x3c>
    BufferCtl.wr_state   =  BUFFER_FULL;
9000aff8:	2201      	movs	r2, #1
9000affa:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
9000affe:	f44f 5290 	mov.w	r2, #4608	; 0x1200
9000b002:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
    BufferCtl.pcm_ptr = 0;
9000b006:	2200      	movs	r2, #0
9000b008:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
9000b00c:	4770      	bx	lr
9000b00e:	bf00      	nop
9000b010:	2000c9cc 	.word	0x2000c9cc

9000b014 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
9000b014:	f7ff bfdc 	b.w	9000afd0 <BSP_AUDIO_IN_TransferComplete_CallBack>

9000b018 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
9000b018:	4b08      	ldr	r3, [pc, #32]	; (9000b03c <LCD_LOG_DeInit+0x24>)
9000b01a:	f04f 32ff 	mov.w	r2, #4294967295
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
9000b01e:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
9000b020:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
9000b022:	2200      	movs	r2, #0
  LCD_CacheBuffer_yptr_invert= ENABLE;
9000b024:	7399      	strb	r1, [r3, #14]
  LCD_CacheBuffer_xptr = 0;
9000b026:	809a      	strh	r2, [r3, #4]
  LCD_CacheBuffer_yptr_top = 0;
9000b028:	80da      	strh	r2, [r3, #6]
  LCD_CacheBuffer_yptr_bottom = 0;
9000b02a:	811a      	strh	r2, [r3, #8]
  LCD_CacheBuffer_yptr_top_bak = 0;
9000b02c:	815a      	strh	r2, [r3, #10]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
9000b02e:	819a      	strh	r2, [r3, #12]
  LCD_ScrollActive = DISABLE;
9000b030:	73da      	strb	r2, [r3, #15]
  LCD_Lock = DISABLE;
9000b032:	741a      	strb	r2, [r3, #16]
  LCD_Scrolled = DISABLE;
9000b034:	745a      	strb	r2, [r3, #17]
  LCD_ScrollBackStep = 0;
9000b036:	825a      	strh	r2, [r3, #18]
}
9000b038:	4770      	bx	lr
9000b03a:	bf00      	nop
9000b03c:	2000d1dc 	.word	0x2000d1dc

9000b040 <LCD_LOG_Init>:
{
9000b040:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
9000b042:	f7ff ffe9 	bl	9000b018 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
9000b046:	4802      	ldr	r0, [pc, #8]	; (9000b050 <LCD_LOG_Init+0x10>)
}
9000b048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
9000b04c:	f7f6 bbf2 	b.w	90001834 <BSP_LCD_Clear>
9000b050:	ff008000 	.word	0xff008000

9000b054 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
9000b054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
9000b058:	4c1b      	ldr	r4, [pc, #108]	; (9000b0c8 <LCD_LOG_UpdateDisplay+0x74>)
9000b05a:	4f1c      	ldr	r7, [pc, #112]	; (9000b0cc <LCD_LOG_UpdateDisplay+0x78>)
9000b05c:	8923      	ldrh	r3, [r4, #8]
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
9000b05e:	88e2      	ldrh	r2, [r4, #6]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
9000b060:	2b08      	cmp	r3, #8
9000b062:	d811      	bhi.n	9000b088 <LCD_LOG_UpdateDisplay+0x34>
9000b064:	4293      	cmp	r3, r2
9000b066:	d311      	bcc.n	9000b08c <LCD_LOG_UpdateDisplay+0x38>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
9000b068:	2584      	movs	r5, #132	; 0x84
9000b06a:	fb05 7303 	mla	r3, r5, r3, r7
9000b06e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
9000b072:	f7f6 fbaf 	bl	900017d4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
9000b076:	8921      	ldrh	r1, [r4, #8]
9000b078:	1d08      	adds	r0, r1, #4
9000b07a:	fb05 7101 	mla	r1, r5, r1, r7
9000b07e:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
9000b080:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
9000b084:	f7f6 bd3c 	b.w	90001b00 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
9000b088:	4293      	cmp	r3, r2
9000b08a:	d201      	bcs.n	9000b090 <LCD_LOG_UpdateDisplay+0x3c>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
9000b08c:	336e      	adds	r3, #110	; 0x6e
9000b08e:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
9000b090:	3b09      	subs	r3, #9
9000b092:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
9000b094:	f04f 086e 	mov.w	r8, #110	; 0x6e
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
9000b098:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
9000b09c:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
9000b09e:	19a5      	adds	r5, r4, r6
9000b0a0:	fbb5 f3f8 	udiv	r3, r5, r8
9000b0a4:	fb08 5513 	mls	r5, r8, r3, r5
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
9000b0a8:	fb09 7505 	mla	r5, r9, r5, r7
9000b0ac:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
9000b0b0:	f7f6 fb90 	bl	900017d4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
9000b0b4:	1d30      	adds	r0, r6, #4
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
9000b0b6:	3601      	adds	r6, #1
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
9000b0b8:	4629      	mov	r1, r5
9000b0ba:	b280      	uxth	r0, r0
9000b0bc:	f7f6 fd20 	bl	90001b00 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
9000b0c0:	2e0a      	cmp	r6, #10
9000b0c2:	d1ec      	bne.n	9000b09e <LCD_LOG_UpdateDisplay+0x4a>
}
9000b0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b0c8:	2000d1dc 	.word	0x2000d1dc
9000b0cc:	2000d1f0 	.word	0x2000d1f0

9000b0d0 <malloc>:
9000b0d0:	4b02      	ldr	r3, [pc, #8]	; (9000b0dc <malloc+0xc>)
9000b0d2:	4601      	mov	r1, r0
9000b0d4:	6818      	ldr	r0, [r3, #0]
9000b0d6:	f000 b82b 	b.w	9000b130 <_malloc_r>
9000b0da:	bf00      	nop
9000b0dc:	2000013c 	.word	0x2000013c

9000b0e0 <free>:
9000b0e0:	4b02      	ldr	r3, [pc, #8]	; (9000b0ec <free+0xc>)
9000b0e2:	4601      	mov	r1, r0
9000b0e4:	6818      	ldr	r0, [r3, #0]
9000b0e6:	f000 bb81 	b.w	9000b7ec <_free_r>
9000b0ea:	bf00      	nop
9000b0ec:	2000013c 	.word	0x2000013c

9000b0f0 <sbrk_aligned>:
9000b0f0:	b570      	push	{r4, r5, r6, lr}
9000b0f2:	4e0e      	ldr	r6, [pc, #56]	; (9000b12c <sbrk_aligned+0x3c>)
9000b0f4:	460c      	mov	r4, r1
9000b0f6:	6831      	ldr	r1, [r6, #0]
9000b0f8:	4605      	mov	r5, r0
9000b0fa:	b911      	cbnz	r1, 9000b102 <sbrk_aligned+0x12>
9000b0fc:	f000 fb24 	bl	9000b748 <_sbrk_r>
9000b100:	6030      	str	r0, [r6, #0]
9000b102:	4621      	mov	r1, r4
9000b104:	4628      	mov	r0, r5
9000b106:	f000 fb1f 	bl	9000b748 <_sbrk_r>
9000b10a:	1c43      	adds	r3, r0, #1
9000b10c:	d00a      	beq.n	9000b124 <sbrk_aligned+0x34>
9000b10e:	1cc4      	adds	r4, r0, #3
9000b110:	f024 0403 	bic.w	r4, r4, #3
9000b114:	42a0      	cmp	r0, r4
9000b116:	d007      	beq.n	9000b128 <sbrk_aligned+0x38>
9000b118:	1a21      	subs	r1, r4, r0
9000b11a:	4628      	mov	r0, r5
9000b11c:	f000 fb14 	bl	9000b748 <_sbrk_r>
9000b120:	3001      	adds	r0, #1
9000b122:	d101      	bne.n	9000b128 <sbrk_aligned+0x38>
9000b124:	f04f 34ff 	mov.w	r4, #4294967295
9000b128:	4620      	mov	r0, r4
9000b12a:	bd70      	pop	{r4, r5, r6, pc}
9000b12c:	20010aac 	.word	0x20010aac

9000b130 <_malloc_r>:
9000b130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000b134:	1ccd      	adds	r5, r1, #3
9000b136:	f025 0503 	bic.w	r5, r5, #3
9000b13a:	3508      	adds	r5, #8
9000b13c:	2d0c      	cmp	r5, #12
9000b13e:	bf38      	it	cc
9000b140:	250c      	movcc	r5, #12
9000b142:	2d00      	cmp	r5, #0
9000b144:	4607      	mov	r7, r0
9000b146:	db01      	blt.n	9000b14c <_malloc_r+0x1c>
9000b148:	42a9      	cmp	r1, r5
9000b14a:	d905      	bls.n	9000b158 <_malloc_r+0x28>
9000b14c:	230c      	movs	r3, #12
9000b14e:	603b      	str	r3, [r7, #0]
9000b150:	2600      	movs	r6, #0
9000b152:	4630      	mov	r0, r6
9000b154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b158:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 9000b22c <_malloc_r+0xfc>
9000b15c:	f000 f868 	bl	9000b230 <__malloc_lock>
9000b160:	f8d8 3000 	ldr.w	r3, [r8]
9000b164:	461c      	mov	r4, r3
9000b166:	bb5c      	cbnz	r4, 9000b1c0 <_malloc_r+0x90>
9000b168:	4629      	mov	r1, r5
9000b16a:	4638      	mov	r0, r7
9000b16c:	f7ff ffc0 	bl	9000b0f0 <sbrk_aligned>
9000b170:	1c43      	adds	r3, r0, #1
9000b172:	4604      	mov	r4, r0
9000b174:	d155      	bne.n	9000b222 <_malloc_r+0xf2>
9000b176:	f8d8 4000 	ldr.w	r4, [r8]
9000b17a:	4626      	mov	r6, r4
9000b17c:	2e00      	cmp	r6, #0
9000b17e:	d145      	bne.n	9000b20c <_malloc_r+0xdc>
9000b180:	2c00      	cmp	r4, #0
9000b182:	d048      	beq.n	9000b216 <_malloc_r+0xe6>
9000b184:	6823      	ldr	r3, [r4, #0]
9000b186:	4631      	mov	r1, r6
9000b188:	4638      	mov	r0, r7
9000b18a:	eb04 0903 	add.w	r9, r4, r3
9000b18e:	f000 fadb 	bl	9000b748 <_sbrk_r>
9000b192:	4581      	cmp	r9, r0
9000b194:	d13f      	bne.n	9000b216 <_malloc_r+0xe6>
9000b196:	6821      	ldr	r1, [r4, #0]
9000b198:	1a6d      	subs	r5, r5, r1
9000b19a:	4629      	mov	r1, r5
9000b19c:	4638      	mov	r0, r7
9000b19e:	f7ff ffa7 	bl	9000b0f0 <sbrk_aligned>
9000b1a2:	3001      	adds	r0, #1
9000b1a4:	d037      	beq.n	9000b216 <_malloc_r+0xe6>
9000b1a6:	6823      	ldr	r3, [r4, #0]
9000b1a8:	442b      	add	r3, r5
9000b1aa:	6023      	str	r3, [r4, #0]
9000b1ac:	f8d8 3000 	ldr.w	r3, [r8]
9000b1b0:	2b00      	cmp	r3, #0
9000b1b2:	d038      	beq.n	9000b226 <_malloc_r+0xf6>
9000b1b4:	685a      	ldr	r2, [r3, #4]
9000b1b6:	42a2      	cmp	r2, r4
9000b1b8:	d12b      	bne.n	9000b212 <_malloc_r+0xe2>
9000b1ba:	2200      	movs	r2, #0
9000b1bc:	605a      	str	r2, [r3, #4]
9000b1be:	e00f      	b.n	9000b1e0 <_malloc_r+0xb0>
9000b1c0:	6822      	ldr	r2, [r4, #0]
9000b1c2:	1b52      	subs	r2, r2, r5
9000b1c4:	d41f      	bmi.n	9000b206 <_malloc_r+0xd6>
9000b1c6:	2a0b      	cmp	r2, #11
9000b1c8:	d917      	bls.n	9000b1fa <_malloc_r+0xca>
9000b1ca:	1961      	adds	r1, r4, r5
9000b1cc:	42a3      	cmp	r3, r4
9000b1ce:	6025      	str	r5, [r4, #0]
9000b1d0:	bf18      	it	ne
9000b1d2:	6059      	strne	r1, [r3, #4]
9000b1d4:	6863      	ldr	r3, [r4, #4]
9000b1d6:	bf08      	it	eq
9000b1d8:	f8c8 1000 	streq.w	r1, [r8]
9000b1dc:	5162      	str	r2, [r4, r5]
9000b1de:	604b      	str	r3, [r1, #4]
9000b1e0:	4638      	mov	r0, r7
9000b1e2:	f104 060b 	add.w	r6, r4, #11
9000b1e6:	f000 f829 	bl	9000b23c <__malloc_unlock>
9000b1ea:	f026 0607 	bic.w	r6, r6, #7
9000b1ee:	1d23      	adds	r3, r4, #4
9000b1f0:	1af2      	subs	r2, r6, r3
9000b1f2:	d0ae      	beq.n	9000b152 <_malloc_r+0x22>
9000b1f4:	1b9b      	subs	r3, r3, r6
9000b1f6:	50a3      	str	r3, [r4, r2]
9000b1f8:	e7ab      	b.n	9000b152 <_malloc_r+0x22>
9000b1fa:	42a3      	cmp	r3, r4
9000b1fc:	6862      	ldr	r2, [r4, #4]
9000b1fe:	d1dd      	bne.n	9000b1bc <_malloc_r+0x8c>
9000b200:	f8c8 2000 	str.w	r2, [r8]
9000b204:	e7ec      	b.n	9000b1e0 <_malloc_r+0xb0>
9000b206:	4623      	mov	r3, r4
9000b208:	6864      	ldr	r4, [r4, #4]
9000b20a:	e7ac      	b.n	9000b166 <_malloc_r+0x36>
9000b20c:	4634      	mov	r4, r6
9000b20e:	6876      	ldr	r6, [r6, #4]
9000b210:	e7b4      	b.n	9000b17c <_malloc_r+0x4c>
9000b212:	4613      	mov	r3, r2
9000b214:	e7cc      	b.n	9000b1b0 <_malloc_r+0x80>
9000b216:	230c      	movs	r3, #12
9000b218:	603b      	str	r3, [r7, #0]
9000b21a:	4638      	mov	r0, r7
9000b21c:	f000 f80e 	bl	9000b23c <__malloc_unlock>
9000b220:	e797      	b.n	9000b152 <_malloc_r+0x22>
9000b222:	6025      	str	r5, [r4, #0]
9000b224:	e7dc      	b.n	9000b1e0 <_malloc_r+0xb0>
9000b226:	605b      	str	r3, [r3, #4]
9000b228:	deff      	udf	#255	; 0xff
9000b22a:	bf00      	nop
9000b22c:	20010aa8 	.word	0x20010aa8

9000b230 <__malloc_lock>:
9000b230:	4801      	ldr	r0, [pc, #4]	; (9000b238 <__malloc_lock+0x8>)
9000b232:	f000 bad0 	b.w	9000b7d6 <__retarget_lock_acquire_recursive>
9000b236:	bf00      	nop
9000b238:	20010bf0 	.word	0x20010bf0

9000b23c <__malloc_unlock>:
9000b23c:	4801      	ldr	r0, [pc, #4]	; (9000b244 <__malloc_unlock+0x8>)
9000b23e:	f000 bacb 	b.w	9000b7d8 <__retarget_lock_release_recursive>
9000b242:	bf00      	nop
9000b244:	20010bf0 	.word	0x20010bf0

9000b248 <std>:
9000b248:	2300      	movs	r3, #0
9000b24a:	b510      	push	{r4, lr}
9000b24c:	4604      	mov	r4, r0
9000b24e:	e9c0 3300 	strd	r3, r3, [r0]
9000b252:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000b256:	6083      	str	r3, [r0, #8]
9000b258:	8181      	strh	r1, [r0, #12]
9000b25a:	6643      	str	r3, [r0, #100]	; 0x64
9000b25c:	81c2      	strh	r2, [r0, #14]
9000b25e:	6183      	str	r3, [r0, #24]
9000b260:	4619      	mov	r1, r3
9000b262:	2208      	movs	r2, #8
9000b264:	305c      	adds	r0, #92	; 0x5c
9000b266:	f000 fa1f 	bl	9000b6a8 <memset>
9000b26a:	4b0d      	ldr	r3, [pc, #52]	; (9000b2a0 <std+0x58>)
9000b26c:	6263      	str	r3, [r4, #36]	; 0x24
9000b26e:	4b0d      	ldr	r3, [pc, #52]	; (9000b2a4 <std+0x5c>)
9000b270:	62a3      	str	r3, [r4, #40]	; 0x28
9000b272:	4b0d      	ldr	r3, [pc, #52]	; (9000b2a8 <std+0x60>)
9000b274:	62e3      	str	r3, [r4, #44]	; 0x2c
9000b276:	4b0d      	ldr	r3, [pc, #52]	; (9000b2ac <std+0x64>)
9000b278:	6323      	str	r3, [r4, #48]	; 0x30
9000b27a:	4b0d      	ldr	r3, [pc, #52]	; (9000b2b0 <std+0x68>)
9000b27c:	6224      	str	r4, [r4, #32]
9000b27e:	429c      	cmp	r4, r3
9000b280:	d006      	beq.n	9000b290 <std+0x48>
9000b282:	f103 0268 	add.w	r2, r3, #104	; 0x68
9000b286:	4294      	cmp	r4, r2
9000b288:	d002      	beq.n	9000b290 <std+0x48>
9000b28a:	33d0      	adds	r3, #208	; 0xd0
9000b28c:	429c      	cmp	r4, r3
9000b28e:	d105      	bne.n	9000b29c <std+0x54>
9000b290:	f104 0058 	add.w	r0, r4, #88	; 0x58
9000b294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000b298:	f000 ba9c 	b.w	9000b7d4 <__retarget_lock_init_recursive>
9000b29c:	bd10      	pop	{r4, pc}
9000b29e:	bf00      	nop
9000b2a0:	9000b4f9 	.word	0x9000b4f9
9000b2a4:	9000b51b 	.word	0x9000b51b
9000b2a8:	9000b553 	.word	0x9000b553
9000b2ac:	9000b577 	.word	0x9000b577
9000b2b0:	20010ab0 	.word	0x20010ab0

9000b2b4 <stdio_exit_handler>:
9000b2b4:	4a02      	ldr	r2, [pc, #8]	; (9000b2c0 <stdio_exit_handler+0xc>)
9000b2b6:	4903      	ldr	r1, [pc, #12]	; (9000b2c4 <stdio_exit_handler+0x10>)
9000b2b8:	4803      	ldr	r0, [pc, #12]	; (9000b2c8 <stdio_exit_handler+0x14>)
9000b2ba:	f000 b869 	b.w	9000b390 <_fwalk_sglue>
9000b2be:	bf00      	nop
9000b2c0:	200000e4 	.word	0x200000e4
9000b2c4:	9000c1e9 	.word	0x9000c1e9
9000b2c8:	200000f0 	.word	0x200000f0

9000b2cc <cleanup_stdio>:
9000b2cc:	6841      	ldr	r1, [r0, #4]
9000b2ce:	4b0c      	ldr	r3, [pc, #48]	; (9000b300 <cleanup_stdio+0x34>)
9000b2d0:	4299      	cmp	r1, r3
9000b2d2:	b510      	push	{r4, lr}
9000b2d4:	4604      	mov	r4, r0
9000b2d6:	d001      	beq.n	9000b2dc <cleanup_stdio+0x10>
9000b2d8:	f000 ff86 	bl	9000c1e8 <_fflush_r>
9000b2dc:	68a1      	ldr	r1, [r4, #8]
9000b2de:	4b09      	ldr	r3, [pc, #36]	; (9000b304 <cleanup_stdio+0x38>)
9000b2e0:	4299      	cmp	r1, r3
9000b2e2:	d002      	beq.n	9000b2ea <cleanup_stdio+0x1e>
9000b2e4:	4620      	mov	r0, r4
9000b2e6:	f000 ff7f 	bl	9000c1e8 <_fflush_r>
9000b2ea:	68e1      	ldr	r1, [r4, #12]
9000b2ec:	4b06      	ldr	r3, [pc, #24]	; (9000b308 <cleanup_stdio+0x3c>)
9000b2ee:	4299      	cmp	r1, r3
9000b2f0:	d004      	beq.n	9000b2fc <cleanup_stdio+0x30>
9000b2f2:	4620      	mov	r0, r4
9000b2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000b2f8:	f000 bf76 	b.w	9000c1e8 <_fflush_r>
9000b2fc:	bd10      	pop	{r4, pc}
9000b2fe:	bf00      	nop
9000b300:	20010ab0 	.word	0x20010ab0
9000b304:	20010b18 	.word	0x20010b18
9000b308:	20010b80 	.word	0x20010b80

9000b30c <global_stdio_init.part.0>:
9000b30c:	b510      	push	{r4, lr}
9000b30e:	4b0b      	ldr	r3, [pc, #44]	; (9000b33c <global_stdio_init.part.0+0x30>)
9000b310:	4c0b      	ldr	r4, [pc, #44]	; (9000b340 <global_stdio_init.part.0+0x34>)
9000b312:	4a0c      	ldr	r2, [pc, #48]	; (9000b344 <global_stdio_init.part.0+0x38>)
9000b314:	601a      	str	r2, [r3, #0]
9000b316:	4620      	mov	r0, r4
9000b318:	2200      	movs	r2, #0
9000b31a:	2104      	movs	r1, #4
9000b31c:	f7ff ff94 	bl	9000b248 <std>
9000b320:	f104 0068 	add.w	r0, r4, #104	; 0x68
9000b324:	2201      	movs	r2, #1
9000b326:	2109      	movs	r1, #9
9000b328:	f7ff ff8e 	bl	9000b248 <std>
9000b32c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
9000b330:	2202      	movs	r2, #2
9000b332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000b336:	2112      	movs	r1, #18
9000b338:	f7ff bf86 	b.w	9000b248 <std>
9000b33c:	20010be8 	.word	0x20010be8
9000b340:	20010ab0 	.word	0x20010ab0
9000b344:	9000b2b5 	.word	0x9000b2b5

9000b348 <__sfp_lock_acquire>:
9000b348:	4801      	ldr	r0, [pc, #4]	; (9000b350 <__sfp_lock_acquire+0x8>)
9000b34a:	f000 ba44 	b.w	9000b7d6 <__retarget_lock_acquire_recursive>
9000b34e:	bf00      	nop
9000b350:	20010bf1 	.word	0x20010bf1

9000b354 <__sfp_lock_release>:
9000b354:	4801      	ldr	r0, [pc, #4]	; (9000b35c <__sfp_lock_release+0x8>)
9000b356:	f000 ba3f 	b.w	9000b7d8 <__retarget_lock_release_recursive>
9000b35a:	bf00      	nop
9000b35c:	20010bf1 	.word	0x20010bf1

9000b360 <__sinit>:
9000b360:	b510      	push	{r4, lr}
9000b362:	4604      	mov	r4, r0
9000b364:	f7ff fff0 	bl	9000b348 <__sfp_lock_acquire>
9000b368:	6a23      	ldr	r3, [r4, #32]
9000b36a:	b11b      	cbz	r3, 9000b374 <__sinit+0x14>
9000b36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000b370:	f7ff bff0 	b.w	9000b354 <__sfp_lock_release>
9000b374:	4b04      	ldr	r3, [pc, #16]	; (9000b388 <__sinit+0x28>)
9000b376:	6223      	str	r3, [r4, #32]
9000b378:	4b04      	ldr	r3, [pc, #16]	; (9000b38c <__sinit+0x2c>)
9000b37a:	681b      	ldr	r3, [r3, #0]
9000b37c:	2b00      	cmp	r3, #0
9000b37e:	d1f5      	bne.n	9000b36c <__sinit+0xc>
9000b380:	f7ff ffc4 	bl	9000b30c <global_stdio_init.part.0>
9000b384:	e7f2      	b.n	9000b36c <__sinit+0xc>
9000b386:	bf00      	nop
9000b388:	9000b2cd 	.word	0x9000b2cd
9000b38c:	20010be8 	.word	0x20010be8

9000b390 <_fwalk_sglue>:
9000b390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000b394:	4607      	mov	r7, r0
9000b396:	4688      	mov	r8, r1
9000b398:	4614      	mov	r4, r2
9000b39a:	2600      	movs	r6, #0
9000b39c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000b3a0:	f1b9 0901 	subs.w	r9, r9, #1
9000b3a4:	d505      	bpl.n	9000b3b2 <_fwalk_sglue+0x22>
9000b3a6:	6824      	ldr	r4, [r4, #0]
9000b3a8:	2c00      	cmp	r4, #0
9000b3aa:	d1f7      	bne.n	9000b39c <_fwalk_sglue+0xc>
9000b3ac:	4630      	mov	r0, r6
9000b3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b3b2:	89ab      	ldrh	r3, [r5, #12]
9000b3b4:	2b01      	cmp	r3, #1
9000b3b6:	d907      	bls.n	9000b3c8 <_fwalk_sglue+0x38>
9000b3b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000b3bc:	3301      	adds	r3, #1
9000b3be:	d003      	beq.n	9000b3c8 <_fwalk_sglue+0x38>
9000b3c0:	4629      	mov	r1, r5
9000b3c2:	4638      	mov	r0, r7
9000b3c4:	47c0      	blx	r8
9000b3c6:	4306      	orrs	r6, r0
9000b3c8:	3568      	adds	r5, #104	; 0x68
9000b3ca:	e7e9      	b.n	9000b3a0 <_fwalk_sglue+0x10>

9000b3cc <iprintf>:
9000b3cc:	b40f      	push	{r0, r1, r2, r3}
9000b3ce:	b507      	push	{r0, r1, r2, lr}
9000b3d0:	4906      	ldr	r1, [pc, #24]	; (9000b3ec <iprintf+0x20>)
9000b3d2:	ab04      	add	r3, sp, #16
9000b3d4:	6808      	ldr	r0, [r1, #0]
9000b3d6:	f853 2b04 	ldr.w	r2, [r3], #4
9000b3da:	6881      	ldr	r1, [r0, #8]
9000b3dc:	9301      	str	r3, [sp, #4]
9000b3de:	f000 fbd3 	bl	9000bb88 <_vfiprintf_r>
9000b3e2:	b003      	add	sp, #12
9000b3e4:	f85d eb04 	ldr.w	lr, [sp], #4
9000b3e8:	b004      	add	sp, #16
9000b3ea:	4770      	bx	lr
9000b3ec:	2000013c 	.word	0x2000013c

9000b3f0 <putchar>:
9000b3f0:	4b02      	ldr	r3, [pc, #8]	; (9000b3fc <putchar+0xc>)
9000b3f2:	4601      	mov	r1, r0
9000b3f4:	6818      	ldr	r0, [r3, #0]
9000b3f6:	6882      	ldr	r2, [r0, #8]
9000b3f8:	f000 bf80 	b.w	9000c2fc <_putc_r>
9000b3fc:	2000013c 	.word	0x2000013c

9000b400 <_puts_r>:
9000b400:	6a03      	ldr	r3, [r0, #32]
9000b402:	b570      	push	{r4, r5, r6, lr}
9000b404:	6884      	ldr	r4, [r0, #8]
9000b406:	4605      	mov	r5, r0
9000b408:	460e      	mov	r6, r1
9000b40a:	b90b      	cbnz	r3, 9000b410 <_puts_r+0x10>
9000b40c:	f7ff ffa8 	bl	9000b360 <__sinit>
9000b410:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000b412:	07db      	lsls	r3, r3, #31
9000b414:	d405      	bmi.n	9000b422 <_puts_r+0x22>
9000b416:	89a3      	ldrh	r3, [r4, #12]
9000b418:	0598      	lsls	r0, r3, #22
9000b41a:	d402      	bmi.n	9000b422 <_puts_r+0x22>
9000b41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000b41e:	f000 f9da 	bl	9000b7d6 <__retarget_lock_acquire_recursive>
9000b422:	89a3      	ldrh	r3, [r4, #12]
9000b424:	0719      	lsls	r1, r3, #28
9000b426:	d513      	bpl.n	9000b450 <_puts_r+0x50>
9000b428:	6923      	ldr	r3, [r4, #16]
9000b42a:	b18b      	cbz	r3, 9000b450 <_puts_r+0x50>
9000b42c:	3e01      	subs	r6, #1
9000b42e:	68a3      	ldr	r3, [r4, #8]
9000b430:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000b434:	3b01      	subs	r3, #1
9000b436:	60a3      	str	r3, [r4, #8]
9000b438:	b9e9      	cbnz	r1, 9000b476 <_puts_r+0x76>
9000b43a:	2b00      	cmp	r3, #0
9000b43c:	da2e      	bge.n	9000b49c <_puts_r+0x9c>
9000b43e:	4622      	mov	r2, r4
9000b440:	210a      	movs	r1, #10
9000b442:	4628      	mov	r0, r5
9000b444:	f000 f89b 	bl	9000b57e <__swbuf_r>
9000b448:	3001      	adds	r0, #1
9000b44a:	d007      	beq.n	9000b45c <_puts_r+0x5c>
9000b44c:	250a      	movs	r5, #10
9000b44e:	e007      	b.n	9000b460 <_puts_r+0x60>
9000b450:	4621      	mov	r1, r4
9000b452:	4628      	mov	r0, r5
9000b454:	f000 f8d0 	bl	9000b5f8 <__swsetup_r>
9000b458:	2800      	cmp	r0, #0
9000b45a:	d0e7      	beq.n	9000b42c <_puts_r+0x2c>
9000b45c:	f04f 35ff 	mov.w	r5, #4294967295
9000b460:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000b462:	07da      	lsls	r2, r3, #31
9000b464:	d405      	bmi.n	9000b472 <_puts_r+0x72>
9000b466:	89a3      	ldrh	r3, [r4, #12]
9000b468:	059b      	lsls	r3, r3, #22
9000b46a:	d402      	bmi.n	9000b472 <_puts_r+0x72>
9000b46c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000b46e:	f000 f9b3 	bl	9000b7d8 <__retarget_lock_release_recursive>
9000b472:	4628      	mov	r0, r5
9000b474:	bd70      	pop	{r4, r5, r6, pc}
9000b476:	2b00      	cmp	r3, #0
9000b478:	da04      	bge.n	9000b484 <_puts_r+0x84>
9000b47a:	69a2      	ldr	r2, [r4, #24]
9000b47c:	429a      	cmp	r2, r3
9000b47e:	dc06      	bgt.n	9000b48e <_puts_r+0x8e>
9000b480:	290a      	cmp	r1, #10
9000b482:	d004      	beq.n	9000b48e <_puts_r+0x8e>
9000b484:	6823      	ldr	r3, [r4, #0]
9000b486:	1c5a      	adds	r2, r3, #1
9000b488:	6022      	str	r2, [r4, #0]
9000b48a:	7019      	strb	r1, [r3, #0]
9000b48c:	e7cf      	b.n	9000b42e <_puts_r+0x2e>
9000b48e:	4622      	mov	r2, r4
9000b490:	4628      	mov	r0, r5
9000b492:	f000 f874 	bl	9000b57e <__swbuf_r>
9000b496:	3001      	adds	r0, #1
9000b498:	d1c9      	bne.n	9000b42e <_puts_r+0x2e>
9000b49a:	e7df      	b.n	9000b45c <_puts_r+0x5c>
9000b49c:	6823      	ldr	r3, [r4, #0]
9000b49e:	250a      	movs	r5, #10
9000b4a0:	1c5a      	adds	r2, r3, #1
9000b4a2:	6022      	str	r2, [r4, #0]
9000b4a4:	701d      	strb	r5, [r3, #0]
9000b4a6:	e7db      	b.n	9000b460 <_puts_r+0x60>

9000b4a8 <puts>:
9000b4a8:	4b02      	ldr	r3, [pc, #8]	; (9000b4b4 <puts+0xc>)
9000b4aa:	4601      	mov	r1, r0
9000b4ac:	6818      	ldr	r0, [r3, #0]
9000b4ae:	f7ff bfa7 	b.w	9000b400 <_puts_r>
9000b4b2:	bf00      	nop
9000b4b4:	2000013c 	.word	0x2000013c

9000b4b8 <siprintf>:
9000b4b8:	b40e      	push	{r1, r2, r3}
9000b4ba:	b500      	push	{lr}
9000b4bc:	b09c      	sub	sp, #112	; 0x70
9000b4be:	ab1d      	add	r3, sp, #116	; 0x74
9000b4c0:	9002      	str	r0, [sp, #8]
9000b4c2:	9006      	str	r0, [sp, #24]
9000b4c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
9000b4c8:	4809      	ldr	r0, [pc, #36]	; (9000b4f0 <siprintf+0x38>)
9000b4ca:	9107      	str	r1, [sp, #28]
9000b4cc:	9104      	str	r1, [sp, #16]
9000b4ce:	4909      	ldr	r1, [pc, #36]	; (9000b4f4 <siprintf+0x3c>)
9000b4d0:	f853 2b04 	ldr.w	r2, [r3], #4
9000b4d4:	9105      	str	r1, [sp, #20]
9000b4d6:	6800      	ldr	r0, [r0, #0]
9000b4d8:	9301      	str	r3, [sp, #4]
9000b4da:	a902      	add	r1, sp, #8
9000b4dc:	f000 fa2c 	bl	9000b938 <_svfiprintf_r>
9000b4e0:	9b02      	ldr	r3, [sp, #8]
9000b4e2:	2200      	movs	r2, #0
9000b4e4:	701a      	strb	r2, [r3, #0]
9000b4e6:	b01c      	add	sp, #112	; 0x70
9000b4e8:	f85d eb04 	ldr.w	lr, [sp], #4
9000b4ec:	b003      	add	sp, #12
9000b4ee:	4770      	bx	lr
9000b4f0:	2000013c 	.word	0x2000013c
9000b4f4:	ffff0208 	.word	0xffff0208

9000b4f8 <__sread>:
9000b4f8:	b510      	push	{r4, lr}
9000b4fa:	460c      	mov	r4, r1
9000b4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000b500:	f000 f910 	bl	9000b724 <_read_r>
9000b504:	2800      	cmp	r0, #0
9000b506:	bfab      	itete	ge
9000b508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
9000b50a:	89a3      	ldrhlt	r3, [r4, #12]
9000b50c:	181b      	addge	r3, r3, r0
9000b50e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9000b512:	bfac      	ite	ge
9000b514:	6563      	strge	r3, [r4, #84]	; 0x54
9000b516:	81a3      	strhlt	r3, [r4, #12]
9000b518:	bd10      	pop	{r4, pc}

9000b51a <__swrite>:
9000b51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000b51e:	461f      	mov	r7, r3
9000b520:	898b      	ldrh	r3, [r1, #12]
9000b522:	05db      	lsls	r3, r3, #23
9000b524:	4605      	mov	r5, r0
9000b526:	460c      	mov	r4, r1
9000b528:	4616      	mov	r6, r2
9000b52a:	d505      	bpl.n	9000b538 <__swrite+0x1e>
9000b52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000b530:	2302      	movs	r3, #2
9000b532:	2200      	movs	r2, #0
9000b534:	f000 f8e4 	bl	9000b700 <_lseek_r>
9000b538:	89a3      	ldrh	r3, [r4, #12]
9000b53a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000b53e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000b542:	81a3      	strh	r3, [r4, #12]
9000b544:	4632      	mov	r2, r6
9000b546:	463b      	mov	r3, r7
9000b548:	4628      	mov	r0, r5
9000b54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000b54e:	f000 b90b 	b.w	9000b768 <_write_r>

9000b552 <__sseek>:
9000b552:	b510      	push	{r4, lr}
9000b554:	460c      	mov	r4, r1
9000b556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000b55a:	f000 f8d1 	bl	9000b700 <_lseek_r>
9000b55e:	1c43      	adds	r3, r0, #1
9000b560:	89a3      	ldrh	r3, [r4, #12]
9000b562:	bf15      	itete	ne
9000b564:	6560      	strne	r0, [r4, #84]	; 0x54
9000b566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9000b56a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9000b56e:	81a3      	strheq	r3, [r4, #12]
9000b570:	bf18      	it	ne
9000b572:	81a3      	strhne	r3, [r4, #12]
9000b574:	bd10      	pop	{r4, pc}

9000b576 <__sclose>:
9000b576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000b57a:	f000 b8b1 	b.w	9000b6e0 <_close_r>

9000b57e <__swbuf_r>:
9000b57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000b580:	460e      	mov	r6, r1
9000b582:	4614      	mov	r4, r2
9000b584:	4605      	mov	r5, r0
9000b586:	b118      	cbz	r0, 9000b590 <__swbuf_r+0x12>
9000b588:	6a03      	ldr	r3, [r0, #32]
9000b58a:	b90b      	cbnz	r3, 9000b590 <__swbuf_r+0x12>
9000b58c:	f7ff fee8 	bl	9000b360 <__sinit>
9000b590:	69a3      	ldr	r3, [r4, #24]
9000b592:	60a3      	str	r3, [r4, #8]
9000b594:	89a3      	ldrh	r3, [r4, #12]
9000b596:	071a      	lsls	r2, r3, #28
9000b598:	d525      	bpl.n	9000b5e6 <__swbuf_r+0x68>
9000b59a:	6923      	ldr	r3, [r4, #16]
9000b59c:	b31b      	cbz	r3, 9000b5e6 <__swbuf_r+0x68>
9000b59e:	6823      	ldr	r3, [r4, #0]
9000b5a0:	6922      	ldr	r2, [r4, #16]
9000b5a2:	1a98      	subs	r0, r3, r2
9000b5a4:	6963      	ldr	r3, [r4, #20]
9000b5a6:	b2f6      	uxtb	r6, r6
9000b5a8:	4283      	cmp	r3, r0
9000b5aa:	4637      	mov	r7, r6
9000b5ac:	dc04      	bgt.n	9000b5b8 <__swbuf_r+0x3a>
9000b5ae:	4621      	mov	r1, r4
9000b5b0:	4628      	mov	r0, r5
9000b5b2:	f000 fe19 	bl	9000c1e8 <_fflush_r>
9000b5b6:	b9e0      	cbnz	r0, 9000b5f2 <__swbuf_r+0x74>
9000b5b8:	68a3      	ldr	r3, [r4, #8]
9000b5ba:	3b01      	subs	r3, #1
9000b5bc:	60a3      	str	r3, [r4, #8]
9000b5be:	6823      	ldr	r3, [r4, #0]
9000b5c0:	1c5a      	adds	r2, r3, #1
9000b5c2:	6022      	str	r2, [r4, #0]
9000b5c4:	701e      	strb	r6, [r3, #0]
9000b5c6:	6962      	ldr	r2, [r4, #20]
9000b5c8:	1c43      	adds	r3, r0, #1
9000b5ca:	429a      	cmp	r2, r3
9000b5cc:	d004      	beq.n	9000b5d8 <__swbuf_r+0x5a>
9000b5ce:	89a3      	ldrh	r3, [r4, #12]
9000b5d0:	07db      	lsls	r3, r3, #31
9000b5d2:	d506      	bpl.n	9000b5e2 <__swbuf_r+0x64>
9000b5d4:	2e0a      	cmp	r6, #10
9000b5d6:	d104      	bne.n	9000b5e2 <__swbuf_r+0x64>
9000b5d8:	4621      	mov	r1, r4
9000b5da:	4628      	mov	r0, r5
9000b5dc:	f000 fe04 	bl	9000c1e8 <_fflush_r>
9000b5e0:	b938      	cbnz	r0, 9000b5f2 <__swbuf_r+0x74>
9000b5e2:	4638      	mov	r0, r7
9000b5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000b5e6:	4621      	mov	r1, r4
9000b5e8:	4628      	mov	r0, r5
9000b5ea:	f000 f805 	bl	9000b5f8 <__swsetup_r>
9000b5ee:	2800      	cmp	r0, #0
9000b5f0:	d0d5      	beq.n	9000b59e <__swbuf_r+0x20>
9000b5f2:	f04f 37ff 	mov.w	r7, #4294967295
9000b5f6:	e7f4      	b.n	9000b5e2 <__swbuf_r+0x64>

9000b5f8 <__swsetup_r>:
9000b5f8:	b538      	push	{r3, r4, r5, lr}
9000b5fa:	4b2a      	ldr	r3, [pc, #168]	; (9000b6a4 <__swsetup_r+0xac>)
9000b5fc:	4605      	mov	r5, r0
9000b5fe:	6818      	ldr	r0, [r3, #0]
9000b600:	460c      	mov	r4, r1
9000b602:	b118      	cbz	r0, 9000b60c <__swsetup_r+0x14>
9000b604:	6a03      	ldr	r3, [r0, #32]
9000b606:	b90b      	cbnz	r3, 9000b60c <__swsetup_r+0x14>
9000b608:	f7ff feaa 	bl	9000b360 <__sinit>
9000b60c:	89a3      	ldrh	r3, [r4, #12]
9000b60e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000b612:	0718      	lsls	r0, r3, #28
9000b614:	d422      	bmi.n	9000b65c <__swsetup_r+0x64>
9000b616:	06d9      	lsls	r1, r3, #27
9000b618:	d407      	bmi.n	9000b62a <__swsetup_r+0x32>
9000b61a:	2309      	movs	r3, #9
9000b61c:	602b      	str	r3, [r5, #0]
9000b61e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
9000b622:	81a3      	strh	r3, [r4, #12]
9000b624:	f04f 30ff 	mov.w	r0, #4294967295
9000b628:	e034      	b.n	9000b694 <__swsetup_r+0x9c>
9000b62a:	0758      	lsls	r0, r3, #29
9000b62c:	d512      	bpl.n	9000b654 <__swsetup_r+0x5c>
9000b62e:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000b630:	b141      	cbz	r1, 9000b644 <__swsetup_r+0x4c>
9000b632:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000b636:	4299      	cmp	r1, r3
9000b638:	d002      	beq.n	9000b640 <__swsetup_r+0x48>
9000b63a:	4628      	mov	r0, r5
9000b63c:	f000 f8d6 	bl	9000b7ec <_free_r>
9000b640:	2300      	movs	r3, #0
9000b642:	6363      	str	r3, [r4, #52]	; 0x34
9000b644:	89a3      	ldrh	r3, [r4, #12]
9000b646:	f023 0324 	bic.w	r3, r3, #36	; 0x24
9000b64a:	81a3      	strh	r3, [r4, #12]
9000b64c:	2300      	movs	r3, #0
9000b64e:	6063      	str	r3, [r4, #4]
9000b650:	6923      	ldr	r3, [r4, #16]
9000b652:	6023      	str	r3, [r4, #0]
9000b654:	89a3      	ldrh	r3, [r4, #12]
9000b656:	f043 0308 	orr.w	r3, r3, #8
9000b65a:	81a3      	strh	r3, [r4, #12]
9000b65c:	6923      	ldr	r3, [r4, #16]
9000b65e:	b94b      	cbnz	r3, 9000b674 <__swsetup_r+0x7c>
9000b660:	89a3      	ldrh	r3, [r4, #12]
9000b662:	f403 7320 	and.w	r3, r3, #640	; 0x280
9000b666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000b66a:	d003      	beq.n	9000b674 <__swsetup_r+0x7c>
9000b66c:	4621      	mov	r1, r4
9000b66e:	4628      	mov	r0, r5
9000b670:	f000 fe08 	bl	9000c284 <__smakebuf_r>
9000b674:	89a0      	ldrh	r0, [r4, #12]
9000b676:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000b67a:	f010 0301 	ands.w	r3, r0, #1
9000b67e:	d00a      	beq.n	9000b696 <__swsetup_r+0x9e>
9000b680:	2300      	movs	r3, #0
9000b682:	60a3      	str	r3, [r4, #8]
9000b684:	6963      	ldr	r3, [r4, #20]
9000b686:	425b      	negs	r3, r3
9000b688:	61a3      	str	r3, [r4, #24]
9000b68a:	6923      	ldr	r3, [r4, #16]
9000b68c:	b943      	cbnz	r3, 9000b6a0 <__swsetup_r+0xa8>
9000b68e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
9000b692:	d1c4      	bne.n	9000b61e <__swsetup_r+0x26>
9000b694:	bd38      	pop	{r3, r4, r5, pc}
9000b696:	0781      	lsls	r1, r0, #30
9000b698:	bf58      	it	pl
9000b69a:	6963      	ldrpl	r3, [r4, #20]
9000b69c:	60a3      	str	r3, [r4, #8]
9000b69e:	e7f4      	b.n	9000b68a <__swsetup_r+0x92>
9000b6a0:	2000      	movs	r0, #0
9000b6a2:	e7f7      	b.n	9000b694 <__swsetup_r+0x9c>
9000b6a4:	2000013c 	.word	0x2000013c

9000b6a8 <memset>:
9000b6a8:	4402      	add	r2, r0
9000b6aa:	4603      	mov	r3, r0
9000b6ac:	4293      	cmp	r3, r2
9000b6ae:	d100      	bne.n	9000b6b2 <memset+0xa>
9000b6b0:	4770      	bx	lr
9000b6b2:	f803 1b01 	strb.w	r1, [r3], #1
9000b6b6:	e7f9      	b.n	9000b6ac <memset+0x4>

9000b6b8 <strncpy>:
9000b6b8:	b510      	push	{r4, lr}
9000b6ba:	3901      	subs	r1, #1
9000b6bc:	4603      	mov	r3, r0
9000b6be:	b132      	cbz	r2, 9000b6ce <strncpy+0x16>
9000b6c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
9000b6c4:	f803 4b01 	strb.w	r4, [r3], #1
9000b6c8:	3a01      	subs	r2, #1
9000b6ca:	2c00      	cmp	r4, #0
9000b6cc:	d1f7      	bne.n	9000b6be <strncpy+0x6>
9000b6ce:	441a      	add	r2, r3
9000b6d0:	2100      	movs	r1, #0
9000b6d2:	4293      	cmp	r3, r2
9000b6d4:	d100      	bne.n	9000b6d8 <strncpy+0x20>
9000b6d6:	bd10      	pop	{r4, pc}
9000b6d8:	f803 1b01 	strb.w	r1, [r3], #1
9000b6dc:	e7f9      	b.n	9000b6d2 <strncpy+0x1a>
	...

9000b6e0 <_close_r>:
9000b6e0:	b538      	push	{r3, r4, r5, lr}
9000b6e2:	4d06      	ldr	r5, [pc, #24]	; (9000b6fc <_close_r+0x1c>)
9000b6e4:	2300      	movs	r3, #0
9000b6e6:	4604      	mov	r4, r0
9000b6e8:	4608      	mov	r0, r1
9000b6ea:	602b      	str	r3, [r5, #0]
9000b6ec:	f000 febc 	bl	9000c468 <_close>
9000b6f0:	1c43      	adds	r3, r0, #1
9000b6f2:	d102      	bne.n	9000b6fa <_close_r+0x1a>
9000b6f4:	682b      	ldr	r3, [r5, #0]
9000b6f6:	b103      	cbz	r3, 9000b6fa <_close_r+0x1a>
9000b6f8:	6023      	str	r3, [r4, #0]
9000b6fa:	bd38      	pop	{r3, r4, r5, pc}
9000b6fc:	20010bec 	.word	0x20010bec

9000b700 <_lseek_r>:
9000b700:	b538      	push	{r3, r4, r5, lr}
9000b702:	4d07      	ldr	r5, [pc, #28]	; (9000b720 <_lseek_r+0x20>)
9000b704:	4604      	mov	r4, r0
9000b706:	4608      	mov	r0, r1
9000b708:	4611      	mov	r1, r2
9000b70a:	2200      	movs	r2, #0
9000b70c:	602a      	str	r2, [r5, #0]
9000b70e:	461a      	mov	r2, r3
9000b710:	f000 fec2 	bl	9000c498 <_lseek>
9000b714:	1c43      	adds	r3, r0, #1
9000b716:	d102      	bne.n	9000b71e <_lseek_r+0x1e>
9000b718:	682b      	ldr	r3, [r5, #0]
9000b71a:	b103      	cbz	r3, 9000b71e <_lseek_r+0x1e>
9000b71c:	6023      	str	r3, [r4, #0]
9000b71e:	bd38      	pop	{r3, r4, r5, pc}
9000b720:	20010bec 	.word	0x20010bec

9000b724 <_read_r>:
9000b724:	b538      	push	{r3, r4, r5, lr}
9000b726:	4d07      	ldr	r5, [pc, #28]	; (9000b744 <_read_r+0x20>)
9000b728:	4604      	mov	r4, r0
9000b72a:	4608      	mov	r0, r1
9000b72c:	4611      	mov	r1, r2
9000b72e:	2200      	movs	r2, #0
9000b730:	602a      	str	r2, [r5, #0]
9000b732:	461a      	mov	r2, r3
9000b734:	f000 feb8 	bl	9000c4a8 <_read>
9000b738:	1c43      	adds	r3, r0, #1
9000b73a:	d102      	bne.n	9000b742 <_read_r+0x1e>
9000b73c:	682b      	ldr	r3, [r5, #0]
9000b73e:	b103      	cbz	r3, 9000b742 <_read_r+0x1e>
9000b740:	6023      	str	r3, [r4, #0]
9000b742:	bd38      	pop	{r3, r4, r5, pc}
9000b744:	20010bec 	.word	0x20010bec

9000b748 <_sbrk_r>:
9000b748:	b538      	push	{r3, r4, r5, lr}
9000b74a:	4d06      	ldr	r5, [pc, #24]	; (9000b764 <_sbrk_r+0x1c>)
9000b74c:	2300      	movs	r3, #0
9000b74e:	4604      	mov	r4, r0
9000b750:	4608      	mov	r0, r1
9000b752:	602b      	str	r3, [r5, #0]
9000b754:	f000 feb0 	bl	9000c4b8 <_sbrk>
9000b758:	1c43      	adds	r3, r0, #1
9000b75a:	d102      	bne.n	9000b762 <_sbrk_r+0x1a>
9000b75c:	682b      	ldr	r3, [r5, #0]
9000b75e:	b103      	cbz	r3, 9000b762 <_sbrk_r+0x1a>
9000b760:	6023      	str	r3, [r4, #0]
9000b762:	bd38      	pop	{r3, r4, r5, pc}
9000b764:	20010bec 	.word	0x20010bec

9000b768 <_write_r>:
9000b768:	b538      	push	{r3, r4, r5, lr}
9000b76a:	4d07      	ldr	r5, [pc, #28]	; (9000b788 <_write_r+0x20>)
9000b76c:	4604      	mov	r4, r0
9000b76e:	4608      	mov	r0, r1
9000b770:	4611      	mov	r1, r2
9000b772:	2200      	movs	r2, #0
9000b774:	602a      	str	r2, [r5, #0]
9000b776:	461a      	mov	r2, r3
9000b778:	f000 feac 	bl	9000c4d4 <_write>
9000b77c:	1c43      	adds	r3, r0, #1
9000b77e:	d102      	bne.n	9000b786 <_write_r+0x1e>
9000b780:	682b      	ldr	r3, [r5, #0]
9000b782:	b103      	cbz	r3, 9000b786 <_write_r+0x1e>
9000b784:	6023      	str	r3, [r4, #0]
9000b786:	bd38      	pop	{r3, r4, r5, pc}
9000b788:	20010bec 	.word	0x20010bec

9000b78c <__libc_init_array>:
9000b78c:	b570      	push	{r4, r5, r6, lr}
9000b78e:	4d0d      	ldr	r5, [pc, #52]	; (9000b7c4 <__libc_init_array+0x38>)
9000b790:	4c0d      	ldr	r4, [pc, #52]	; (9000b7c8 <__libc_init_array+0x3c>)
9000b792:	1b64      	subs	r4, r4, r5
9000b794:	10a4      	asrs	r4, r4, #2
9000b796:	2600      	movs	r6, #0
9000b798:	42a6      	cmp	r6, r4
9000b79a:	d109      	bne.n	9000b7b0 <__libc_init_array+0x24>
9000b79c:	4d0b      	ldr	r5, [pc, #44]	; (9000b7cc <__libc_init_array+0x40>)
9000b79e:	4c0c      	ldr	r4, [pc, #48]	; (9000b7d0 <__libc_init_array+0x44>)
9000b7a0:	f000 fea0 	bl	9000c4e4 <_init>
9000b7a4:	1b64      	subs	r4, r4, r5
9000b7a6:	10a4      	asrs	r4, r4, #2
9000b7a8:	2600      	movs	r6, #0
9000b7aa:	42a6      	cmp	r6, r4
9000b7ac:	d105      	bne.n	9000b7ba <__libc_init_array+0x2e>
9000b7ae:	bd70      	pop	{r4, r5, r6, pc}
9000b7b0:	f855 3b04 	ldr.w	r3, [r5], #4
9000b7b4:	4798      	blx	r3
9000b7b6:	3601      	adds	r6, #1
9000b7b8:	e7ee      	b.n	9000b798 <__libc_init_array+0xc>
9000b7ba:	f855 3b04 	ldr.w	r3, [r5], #4
9000b7be:	4798      	blx	r3
9000b7c0:	3601      	adds	r6, #1
9000b7c2:	e7f2      	b.n	9000b7aa <__libc_init_array+0x1e>
9000b7c4:	90011484 	.word	0x90011484
9000b7c8:	90011484 	.word	0x90011484
9000b7cc:	90011484 	.word	0x90011484
9000b7d0:	90011488 	.word	0x90011488

9000b7d4 <__retarget_lock_init_recursive>:
9000b7d4:	4770      	bx	lr

9000b7d6 <__retarget_lock_acquire_recursive>:
9000b7d6:	4770      	bx	lr

9000b7d8 <__retarget_lock_release_recursive>:
9000b7d8:	4770      	bx	lr

9000b7da <strcpy>:
9000b7da:	4603      	mov	r3, r0
9000b7dc:	f811 2b01 	ldrb.w	r2, [r1], #1
9000b7e0:	f803 2b01 	strb.w	r2, [r3], #1
9000b7e4:	2a00      	cmp	r2, #0
9000b7e6:	d1f9      	bne.n	9000b7dc <strcpy+0x2>
9000b7e8:	4770      	bx	lr
	...

9000b7ec <_free_r>:
9000b7ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
9000b7ee:	2900      	cmp	r1, #0
9000b7f0:	d044      	beq.n	9000b87c <_free_r+0x90>
9000b7f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000b7f6:	9001      	str	r0, [sp, #4]
9000b7f8:	2b00      	cmp	r3, #0
9000b7fa:	f1a1 0404 	sub.w	r4, r1, #4
9000b7fe:	bfb8      	it	lt
9000b800:	18e4      	addlt	r4, r4, r3
9000b802:	f7ff fd15 	bl	9000b230 <__malloc_lock>
9000b806:	4a1e      	ldr	r2, [pc, #120]	; (9000b880 <_free_r+0x94>)
9000b808:	9801      	ldr	r0, [sp, #4]
9000b80a:	6813      	ldr	r3, [r2, #0]
9000b80c:	b933      	cbnz	r3, 9000b81c <_free_r+0x30>
9000b80e:	6063      	str	r3, [r4, #4]
9000b810:	6014      	str	r4, [r2, #0]
9000b812:	b003      	add	sp, #12
9000b814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9000b818:	f7ff bd10 	b.w	9000b23c <__malloc_unlock>
9000b81c:	42a3      	cmp	r3, r4
9000b81e:	d908      	bls.n	9000b832 <_free_r+0x46>
9000b820:	6825      	ldr	r5, [r4, #0]
9000b822:	1961      	adds	r1, r4, r5
9000b824:	428b      	cmp	r3, r1
9000b826:	bf01      	itttt	eq
9000b828:	6819      	ldreq	r1, [r3, #0]
9000b82a:	685b      	ldreq	r3, [r3, #4]
9000b82c:	1949      	addeq	r1, r1, r5
9000b82e:	6021      	streq	r1, [r4, #0]
9000b830:	e7ed      	b.n	9000b80e <_free_r+0x22>
9000b832:	461a      	mov	r2, r3
9000b834:	685b      	ldr	r3, [r3, #4]
9000b836:	b10b      	cbz	r3, 9000b83c <_free_r+0x50>
9000b838:	42a3      	cmp	r3, r4
9000b83a:	d9fa      	bls.n	9000b832 <_free_r+0x46>
9000b83c:	6811      	ldr	r1, [r2, #0]
9000b83e:	1855      	adds	r5, r2, r1
9000b840:	42a5      	cmp	r5, r4
9000b842:	d10b      	bne.n	9000b85c <_free_r+0x70>
9000b844:	6824      	ldr	r4, [r4, #0]
9000b846:	4421      	add	r1, r4
9000b848:	1854      	adds	r4, r2, r1
9000b84a:	42a3      	cmp	r3, r4
9000b84c:	6011      	str	r1, [r2, #0]
9000b84e:	d1e0      	bne.n	9000b812 <_free_r+0x26>
9000b850:	681c      	ldr	r4, [r3, #0]
9000b852:	685b      	ldr	r3, [r3, #4]
9000b854:	6053      	str	r3, [r2, #4]
9000b856:	440c      	add	r4, r1
9000b858:	6014      	str	r4, [r2, #0]
9000b85a:	e7da      	b.n	9000b812 <_free_r+0x26>
9000b85c:	d902      	bls.n	9000b864 <_free_r+0x78>
9000b85e:	230c      	movs	r3, #12
9000b860:	6003      	str	r3, [r0, #0]
9000b862:	e7d6      	b.n	9000b812 <_free_r+0x26>
9000b864:	6825      	ldr	r5, [r4, #0]
9000b866:	1961      	adds	r1, r4, r5
9000b868:	428b      	cmp	r3, r1
9000b86a:	bf04      	itt	eq
9000b86c:	6819      	ldreq	r1, [r3, #0]
9000b86e:	685b      	ldreq	r3, [r3, #4]
9000b870:	6063      	str	r3, [r4, #4]
9000b872:	bf04      	itt	eq
9000b874:	1949      	addeq	r1, r1, r5
9000b876:	6021      	streq	r1, [r4, #0]
9000b878:	6054      	str	r4, [r2, #4]
9000b87a:	e7ca      	b.n	9000b812 <_free_r+0x26>
9000b87c:	b003      	add	sp, #12
9000b87e:	bd30      	pop	{r4, r5, pc}
9000b880:	20010aa8 	.word	0x20010aa8

9000b884 <__ssputs_r>:
9000b884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000b888:	688e      	ldr	r6, [r1, #8]
9000b88a:	461f      	mov	r7, r3
9000b88c:	42be      	cmp	r6, r7
9000b88e:	680b      	ldr	r3, [r1, #0]
9000b890:	4682      	mov	sl, r0
9000b892:	460c      	mov	r4, r1
9000b894:	4690      	mov	r8, r2
9000b896:	d82c      	bhi.n	9000b8f2 <__ssputs_r+0x6e>
9000b898:	898a      	ldrh	r2, [r1, #12]
9000b89a:	f412 6f90 	tst.w	r2, #1152	; 0x480
9000b89e:	d026      	beq.n	9000b8ee <__ssputs_r+0x6a>
9000b8a0:	6965      	ldr	r5, [r4, #20]
9000b8a2:	6909      	ldr	r1, [r1, #16]
9000b8a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000b8a8:	eba3 0901 	sub.w	r9, r3, r1
9000b8ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000b8b0:	1c7b      	adds	r3, r7, #1
9000b8b2:	444b      	add	r3, r9
9000b8b4:	106d      	asrs	r5, r5, #1
9000b8b6:	429d      	cmp	r5, r3
9000b8b8:	bf38      	it	cc
9000b8ba:	461d      	movcc	r5, r3
9000b8bc:	0553      	lsls	r3, r2, #21
9000b8be:	d527      	bpl.n	9000b910 <__ssputs_r+0x8c>
9000b8c0:	4629      	mov	r1, r5
9000b8c2:	f7ff fc35 	bl	9000b130 <_malloc_r>
9000b8c6:	4606      	mov	r6, r0
9000b8c8:	b360      	cbz	r0, 9000b924 <__ssputs_r+0xa0>
9000b8ca:	6921      	ldr	r1, [r4, #16]
9000b8cc:	464a      	mov	r2, r9
9000b8ce:	f000 fd85 	bl	9000c3dc <memcpy>
9000b8d2:	89a3      	ldrh	r3, [r4, #12]
9000b8d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
9000b8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000b8dc:	81a3      	strh	r3, [r4, #12]
9000b8de:	6126      	str	r6, [r4, #16]
9000b8e0:	6165      	str	r5, [r4, #20]
9000b8e2:	444e      	add	r6, r9
9000b8e4:	eba5 0509 	sub.w	r5, r5, r9
9000b8e8:	6026      	str	r6, [r4, #0]
9000b8ea:	60a5      	str	r5, [r4, #8]
9000b8ec:	463e      	mov	r6, r7
9000b8ee:	42be      	cmp	r6, r7
9000b8f0:	d900      	bls.n	9000b8f4 <__ssputs_r+0x70>
9000b8f2:	463e      	mov	r6, r7
9000b8f4:	6820      	ldr	r0, [r4, #0]
9000b8f6:	4632      	mov	r2, r6
9000b8f8:	4641      	mov	r1, r8
9000b8fa:	f000 fd33 	bl	9000c364 <memmove>
9000b8fe:	68a3      	ldr	r3, [r4, #8]
9000b900:	1b9b      	subs	r3, r3, r6
9000b902:	60a3      	str	r3, [r4, #8]
9000b904:	6823      	ldr	r3, [r4, #0]
9000b906:	4433      	add	r3, r6
9000b908:	6023      	str	r3, [r4, #0]
9000b90a:	2000      	movs	r0, #0
9000b90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000b910:	462a      	mov	r2, r5
9000b912:	f000 fd71 	bl	9000c3f8 <_realloc_r>
9000b916:	4606      	mov	r6, r0
9000b918:	2800      	cmp	r0, #0
9000b91a:	d1e0      	bne.n	9000b8de <__ssputs_r+0x5a>
9000b91c:	6921      	ldr	r1, [r4, #16]
9000b91e:	4650      	mov	r0, sl
9000b920:	f7ff ff64 	bl	9000b7ec <_free_r>
9000b924:	230c      	movs	r3, #12
9000b926:	f8ca 3000 	str.w	r3, [sl]
9000b92a:	89a3      	ldrh	r3, [r4, #12]
9000b92c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000b930:	81a3      	strh	r3, [r4, #12]
9000b932:	f04f 30ff 	mov.w	r0, #4294967295
9000b936:	e7e9      	b.n	9000b90c <__ssputs_r+0x88>

9000b938 <_svfiprintf_r>:
9000b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000b93c:	4698      	mov	r8, r3
9000b93e:	898b      	ldrh	r3, [r1, #12]
9000b940:	061b      	lsls	r3, r3, #24
9000b942:	b09d      	sub	sp, #116	; 0x74
9000b944:	4607      	mov	r7, r0
9000b946:	460d      	mov	r5, r1
9000b948:	4614      	mov	r4, r2
9000b94a:	d50e      	bpl.n	9000b96a <_svfiprintf_r+0x32>
9000b94c:	690b      	ldr	r3, [r1, #16]
9000b94e:	b963      	cbnz	r3, 9000b96a <_svfiprintf_r+0x32>
9000b950:	2140      	movs	r1, #64	; 0x40
9000b952:	f7ff fbed 	bl	9000b130 <_malloc_r>
9000b956:	6028      	str	r0, [r5, #0]
9000b958:	6128      	str	r0, [r5, #16]
9000b95a:	b920      	cbnz	r0, 9000b966 <_svfiprintf_r+0x2e>
9000b95c:	230c      	movs	r3, #12
9000b95e:	603b      	str	r3, [r7, #0]
9000b960:	f04f 30ff 	mov.w	r0, #4294967295
9000b964:	e0d0      	b.n	9000bb08 <_svfiprintf_r+0x1d0>
9000b966:	2340      	movs	r3, #64	; 0x40
9000b968:	616b      	str	r3, [r5, #20]
9000b96a:	2300      	movs	r3, #0
9000b96c:	9309      	str	r3, [sp, #36]	; 0x24
9000b96e:	2320      	movs	r3, #32
9000b970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000b974:	f8cd 800c 	str.w	r8, [sp, #12]
9000b978:	2330      	movs	r3, #48	; 0x30
9000b97a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 9000bb20 <_svfiprintf_r+0x1e8>
9000b97e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000b982:	f04f 0901 	mov.w	r9, #1
9000b986:	4623      	mov	r3, r4
9000b988:	469a      	mov	sl, r3
9000b98a:	f813 2b01 	ldrb.w	r2, [r3], #1
9000b98e:	b10a      	cbz	r2, 9000b994 <_svfiprintf_r+0x5c>
9000b990:	2a25      	cmp	r2, #37	; 0x25
9000b992:	d1f9      	bne.n	9000b988 <_svfiprintf_r+0x50>
9000b994:	ebba 0b04 	subs.w	fp, sl, r4
9000b998:	d00b      	beq.n	9000b9b2 <_svfiprintf_r+0x7a>
9000b99a:	465b      	mov	r3, fp
9000b99c:	4622      	mov	r2, r4
9000b99e:	4629      	mov	r1, r5
9000b9a0:	4638      	mov	r0, r7
9000b9a2:	f7ff ff6f 	bl	9000b884 <__ssputs_r>
9000b9a6:	3001      	adds	r0, #1
9000b9a8:	f000 80a9 	beq.w	9000bafe <_svfiprintf_r+0x1c6>
9000b9ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000b9ae:	445a      	add	r2, fp
9000b9b0:	9209      	str	r2, [sp, #36]	; 0x24
9000b9b2:	f89a 3000 	ldrb.w	r3, [sl]
9000b9b6:	2b00      	cmp	r3, #0
9000b9b8:	f000 80a1 	beq.w	9000bafe <_svfiprintf_r+0x1c6>
9000b9bc:	2300      	movs	r3, #0
9000b9be:	f04f 32ff 	mov.w	r2, #4294967295
9000b9c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000b9c6:	f10a 0a01 	add.w	sl, sl, #1
9000b9ca:	9304      	str	r3, [sp, #16]
9000b9cc:	9307      	str	r3, [sp, #28]
9000b9ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000b9d2:	931a      	str	r3, [sp, #104]	; 0x68
9000b9d4:	4654      	mov	r4, sl
9000b9d6:	2205      	movs	r2, #5
9000b9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
9000b9dc:	4850      	ldr	r0, [pc, #320]	; (9000bb20 <_svfiprintf_r+0x1e8>)
9000b9de:	f7f4 fc17 	bl	90000210 <memchr>
9000b9e2:	9a04      	ldr	r2, [sp, #16]
9000b9e4:	b9d8      	cbnz	r0, 9000ba1e <_svfiprintf_r+0xe6>
9000b9e6:	06d0      	lsls	r0, r2, #27
9000b9e8:	bf44      	itt	mi
9000b9ea:	2320      	movmi	r3, #32
9000b9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000b9f0:	0711      	lsls	r1, r2, #28
9000b9f2:	bf44      	itt	mi
9000b9f4:	232b      	movmi	r3, #43	; 0x2b
9000b9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000b9fa:	f89a 3000 	ldrb.w	r3, [sl]
9000b9fe:	2b2a      	cmp	r3, #42	; 0x2a
9000ba00:	d015      	beq.n	9000ba2e <_svfiprintf_r+0xf6>
9000ba02:	9a07      	ldr	r2, [sp, #28]
9000ba04:	4654      	mov	r4, sl
9000ba06:	2000      	movs	r0, #0
9000ba08:	f04f 0c0a 	mov.w	ip, #10
9000ba0c:	4621      	mov	r1, r4
9000ba0e:	f811 3b01 	ldrb.w	r3, [r1], #1
9000ba12:	3b30      	subs	r3, #48	; 0x30
9000ba14:	2b09      	cmp	r3, #9
9000ba16:	d94d      	bls.n	9000bab4 <_svfiprintf_r+0x17c>
9000ba18:	b1b0      	cbz	r0, 9000ba48 <_svfiprintf_r+0x110>
9000ba1a:	9207      	str	r2, [sp, #28]
9000ba1c:	e014      	b.n	9000ba48 <_svfiprintf_r+0x110>
9000ba1e:	eba0 0308 	sub.w	r3, r0, r8
9000ba22:	fa09 f303 	lsl.w	r3, r9, r3
9000ba26:	4313      	orrs	r3, r2
9000ba28:	9304      	str	r3, [sp, #16]
9000ba2a:	46a2      	mov	sl, r4
9000ba2c:	e7d2      	b.n	9000b9d4 <_svfiprintf_r+0x9c>
9000ba2e:	9b03      	ldr	r3, [sp, #12]
9000ba30:	1d19      	adds	r1, r3, #4
9000ba32:	681b      	ldr	r3, [r3, #0]
9000ba34:	9103      	str	r1, [sp, #12]
9000ba36:	2b00      	cmp	r3, #0
9000ba38:	bfbb      	ittet	lt
9000ba3a:	425b      	neglt	r3, r3
9000ba3c:	f042 0202 	orrlt.w	r2, r2, #2
9000ba40:	9307      	strge	r3, [sp, #28]
9000ba42:	9307      	strlt	r3, [sp, #28]
9000ba44:	bfb8      	it	lt
9000ba46:	9204      	strlt	r2, [sp, #16]
9000ba48:	7823      	ldrb	r3, [r4, #0]
9000ba4a:	2b2e      	cmp	r3, #46	; 0x2e
9000ba4c:	d10c      	bne.n	9000ba68 <_svfiprintf_r+0x130>
9000ba4e:	7863      	ldrb	r3, [r4, #1]
9000ba50:	2b2a      	cmp	r3, #42	; 0x2a
9000ba52:	d134      	bne.n	9000babe <_svfiprintf_r+0x186>
9000ba54:	9b03      	ldr	r3, [sp, #12]
9000ba56:	1d1a      	adds	r2, r3, #4
9000ba58:	681b      	ldr	r3, [r3, #0]
9000ba5a:	9203      	str	r2, [sp, #12]
9000ba5c:	2b00      	cmp	r3, #0
9000ba5e:	bfb8      	it	lt
9000ba60:	f04f 33ff 	movlt.w	r3, #4294967295
9000ba64:	3402      	adds	r4, #2
9000ba66:	9305      	str	r3, [sp, #20]
9000ba68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 9000bb30 <_svfiprintf_r+0x1f8>
9000ba6c:	7821      	ldrb	r1, [r4, #0]
9000ba6e:	2203      	movs	r2, #3
9000ba70:	4650      	mov	r0, sl
9000ba72:	f7f4 fbcd 	bl	90000210 <memchr>
9000ba76:	b138      	cbz	r0, 9000ba88 <_svfiprintf_r+0x150>
9000ba78:	9b04      	ldr	r3, [sp, #16]
9000ba7a:	eba0 000a 	sub.w	r0, r0, sl
9000ba7e:	2240      	movs	r2, #64	; 0x40
9000ba80:	4082      	lsls	r2, r0
9000ba82:	4313      	orrs	r3, r2
9000ba84:	3401      	adds	r4, #1
9000ba86:	9304      	str	r3, [sp, #16]
9000ba88:	f814 1b01 	ldrb.w	r1, [r4], #1
9000ba8c:	4825      	ldr	r0, [pc, #148]	; (9000bb24 <_svfiprintf_r+0x1ec>)
9000ba8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000ba92:	2206      	movs	r2, #6
9000ba94:	f7f4 fbbc 	bl	90000210 <memchr>
9000ba98:	2800      	cmp	r0, #0
9000ba9a:	d038      	beq.n	9000bb0e <_svfiprintf_r+0x1d6>
9000ba9c:	4b22      	ldr	r3, [pc, #136]	; (9000bb28 <_svfiprintf_r+0x1f0>)
9000ba9e:	bb1b      	cbnz	r3, 9000bae8 <_svfiprintf_r+0x1b0>
9000baa0:	9b03      	ldr	r3, [sp, #12]
9000baa2:	3307      	adds	r3, #7
9000baa4:	f023 0307 	bic.w	r3, r3, #7
9000baa8:	3308      	adds	r3, #8
9000baaa:	9303      	str	r3, [sp, #12]
9000baac:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000baae:	4433      	add	r3, r6
9000bab0:	9309      	str	r3, [sp, #36]	; 0x24
9000bab2:	e768      	b.n	9000b986 <_svfiprintf_r+0x4e>
9000bab4:	fb0c 3202 	mla	r2, ip, r2, r3
9000bab8:	460c      	mov	r4, r1
9000baba:	2001      	movs	r0, #1
9000babc:	e7a6      	b.n	9000ba0c <_svfiprintf_r+0xd4>
9000babe:	2300      	movs	r3, #0
9000bac0:	3401      	adds	r4, #1
9000bac2:	9305      	str	r3, [sp, #20]
9000bac4:	4619      	mov	r1, r3
9000bac6:	f04f 0c0a 	mov.w	ip, #10
9000baca:	4620      	mov	r0, r4
9000bacc:	f810 2b01 	ldrb.w	r2, [r0], #1
9000bad0:	3a30      	subs	r2, #48	; 0x30
9000bad2:	2a09      	cmp	r2, #9
9000bad4:	d903      	bls.n	9000bade <_svfiprintf_r+0x1a6>
9000bad6:	2b00      	cmp	r3, #0
9000bad8:	d0c6      	beq.n	9000ba68 <_svfiprintf_r+0x130>
9000bada:	9105      	str	r1, [sp, #20]
9000badc:	e7c4      	b.n	9000ba68 <_svfiprintf_r+0x130>
9000bade:	fb0c 2101 	mla	r1, ip, r1, r2
9000bae2:	4604      	mov	r4, r0
9000bae4:	2301      	movs	r3, #1
9000bae6:	e7f0      	b.n	9000baca <_svfiprintf_r+0x192>
9000bae8:	ab03      	add	r3, sp, #12
9000baea:	9300      	str	r3, [sp, #0]
9000baec:	462a      	mov	r2, r5
9000baee:	4b0f      	ldr	r3, [pc, #60]	; (9000bb2c <_svfiprintf_r+0x1f4>)
9000baf0:	a904      	add	r1, sp, #16
9000baf2:	4638      	mov	r0, r7
9000baf4:	f3af 8000 	nop.w
9000baf8:	1c42      	adds	r2, r0, #1
9000bafa:	4606      	mov	r6, r0
9000bafc:	d1d6      	bne.n	9000baac <_svfiprintf_r+0x174>
9000bafe:	89ab      	ldrh	r3, [r5, #12]
9000bb00:	065b      	lsls	r3, r3, #25
9000bb02:	f53f af2d 	bmi.w	9000b960 <_svfiprintf_r+0x28>
9000bb06:	9809      	ldr	r0, [sp, #36]	; 0x24
9000bb08:	b01d      	add	sp, #116	; 0x74
9000bb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000bb0e:	ab03      	add	r3, sp, #12
9000bb10:	9300      	str	r3, [sp, #0]
9000bb12:	462a      	mov	r2, r5
9000bb14:	4b05      	ldr	r3, [pc, #20]	; (9000bb2c <_svfiprintf_r+0x1f4>)
9000bb16:	a904      	add	r1, sp, #16
9000bb18:	4638      	mov	r0, r7
9000bb1a:	f000 f9bd 	bl	9000be98 <_printf_i>
9000bb1e:	e7eb      	b.n	9000baf8 <_svfiprintf_r+0x1c0>
9000bb20:	90011446 	.word	0x90011446
9000bb24:	90011450 	.word	0x90011450
9000bb28:	00000000 	.word	0x00000000
9000bb2c:	9000b885 	.word	0x9000b885
9000bb30:	9001144c 	.word	0x9001144c

9000bb34 <__sfputc_r>:
9000bb34:	6893      	ldr	r3, [r2, #8]
9000bb36:	3b01      	subs	r3, #1
9000bb38:	2b00      	cmp	r3, #0
9000bb3a:	b410      	push	{r4}
9000bb3c:	6093      	str	r3, [r2, #8]
9000bb3e:	da08      	bge.n	9000bb52 <__sfputc_r+0x1e>
9000bb40:	6994      	ldr	r4, [r2, #24]
9000bb42:	42a3      	cmp	r3, r4
9000bb44:	db01      	blt.n	9000bb4a <__sfputc_r+0x16>
9000bb46:	290a      	cmp	r1, #10
9000bb48:	d103      	bne.n	9000bb52 <__sfputc_r+0x1e>
9000bb4a:	f85d 4b04 	ldr.w	r4, [sp], #4
9000bb4e:	f7ff bd16 	b.w	9000b57e <__swbuf_r>
9000bb52:	6813      	ldr	r3, [r2, #0]
9000bb54:	1c58      	adds	r0, r3, #1
9000bb56:	6010      	str	r0, [r2, #0]
9000bb58:	7019      	strb	r1, [r3, #0]
9000bb5a:	4608      	mov	r0, r1
9000bb5c:	f85d 4b04 	ldr.w	r4, [sp], #4
9000bb60:	4770      	bx	lr

9000bb62 <__sfputs_r>:
9000bb62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000bb64:	4606      	mov	r6, r0
9000bb66:	460f      	mov	r7, r1
9000bb68:	4614      	mov	r4, r2
9000bb6a:	18d5      	adds	r5, r2, r3
9000bb6c:	42ac      	cmp	r4, r5
9000bb6e:	d101      	bne.n	9000bb74 <__sfputs_r+0x12>
9000bb70:	2000      	movs	r0, #0
9000bb72:	e007      	b.n	9000bb84 <__sfputs_r+0x22>
9000bb74:	f814 1b01 	ldrb.w	r1, [r4], #1
9000bb78:	463a      	mov	r2, r7
9000bb7a:	4630      	mov	r0, r6
9000bb7c:	f7ff ffda 	bl	9000bb34 <__sfputc_r>
9000bb80:	1c43      	adds	r3, r0, #1
9000bb82:	d1f3      	bne.n	9000bb6c <__sfputs_r+0xa>
9000bb84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000bb88 <_vfiprintf_r>:
9000bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000bb8c:	460d      	mov	r5, r1
9000bb8e:	b09d      	sub	sp, #116	; 0x74
9000bb90:	4614      	mov	r4, r2
9000bb92:	4698      	mov	r8, r3
9000bb94:	4606      	mov	r6, r0
9000bb96:	b118      	cbz	r0, 9000bba0 <_vfiprintf_r+0x18>
9000bb98:	6a03      	ldr	r3, [r0, #32]
9000bb9a:	b90b      	cbnz	r3, 9000bba0 <_vfiprintf_r+0x18>
9000bb9c:	f7ff fbe0 	bl	9000b360 <__sinit>
9000bba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000bba2:	07d9      	lsls	r1, r3, #31
9000bba4:	d405      	bmi.n	9000bbb2 <_vfiprintf_r+0x2a>
9000bba6:	89ab      	ldrh	r3, [r5, #12]
9000bba8:	059a      	lsls	r2, r3, #22
9000bbaa:	d402      	bmi.n	9000bbb2 <_vfiprintf_r+0x2a>
9000bbac:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000bbae:	f7ff fe12 	bl	9000b7d6 <__retarget_lock_acquire_recursive>
9000bbb2:	89ab      	ldrh	r3, [r5, #12]
9000bbb4:	071b      	lsls	r3, r3, #28
9000bbb6:	d501      	bpl.n	9000bbbc <_vfiprintf_r+0x34>
9000bbb8:	692b      	ldr	r3, [r5, #16]
9000bbba:	b99b      	cbnz	r3, 9000bbe4 <_vfiprintf_r+0x5c>
9000bbbc:	4629      	mov	r1, r5
9000bbbe:	4630      	mov	r0, r6
9000bbc0:	f7ff fd1a 	bl	9000b5f8 <__swsetup_r>
9000bbc4:	b170      	cbz	r0, 9000bbe4 <_vfiprintf_r+0x5c>
9000bbc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000bbc8:	07dc      	lsls	r4, r3, #31
9000bbca:	d504      	bpl.n	9000bbd6 <_vfiprintf_r+0x4e>
9000bbcc:	f04f 30ff 	mov.w	r0, #4294967295
9000bbd0:	b01d      	add	sp, #116	; 0x74
9000bbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000bbd6:	89ab      	ldrh	r3, [r5, #12]
9000bbd8:	0598      	lsls	r0, r3, #22
9000bbda:	d4f7      	bmi.n	9000bbcc <_vfiprintf_r+0x44>
9000bbdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000bbde:	f7ff fdfb 	bl	9000b7d8 <__retarget_lock_release_recursive>
9000bbe2:	e7f3      	b.n	9000bbcc <_vfiprintf_r+0x44>
9000bbe4:	2300      	movs	r3, #0
9000bbe6:	9309      	str	r3, [sp, #36]	; 0x24
9000bbe8:	2320      	movs	r3, #32
9000bbea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000bbee:	f8cd 800c 	str.w	r8, [sp, #12]
9000bbf2:	2330      	movs	r3, #48	; 0x30
9000bbf4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 9000bda8 <_vfiprintf_r+0x220>
9000bbf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000bbfc:	f04f 0901 	mov.w	r9, #1
9000bc00:	4623      	mov	r3, r4
9000bc02:	469a      	mov	sl, r3
9000bc04:	f813 2b01 	ldrb.w	r2, [r3], #1
9000bc08:	b10a      	cbz	r2, 9000bc0e <_vfiprintf_r+0x86>
9000bc0a:	2a25      	cmp	r2, #37	; 0x25
9000bc0c:	d1f9      	bne.n	9000bc02 <_vfiprintf_r+0x7a>
9000bc0e:	ebba 0b04 	subs.w	fp, sl, r4
9000bc12:	d00b      	beq.n	9000bc2c <_vfiprintf_r+0xa4>
9000bc14:	465b      	mov	r3, fp
9000bc16:	4622      	mov	r2, r4
9000bc18:	4629      	mov	r1, r5
9000bc1a:	4630      	mov	r0, r6
9000bc1c:	f7ff ffa1 	bl	9000bb62 <__sfputs_r>
9000bc20:	3001      	adds	r0, #1
9000bc22:	f000 80a9 	beq.w	9000bd78 <_vfiprintf_r+0x1f0>
9000bc26:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000bc28:	445a      	add	r2, fp
9000bc2a:	9209      	str	r2, [sp, #36]	; 0x24
9000bc2c:	f89a 3000 	ldrb.w	r3, [sl]
9000bc30:	2b00      	cmp	r3, #0
9000bc32:	f000 80a1 	beq.w	9000bd78 <_vfiprintf_r+0x1f0>
9000bc36:	2300      	movs	r3, #0
9000bc38:	f04f 32ff 	mov.w	r2, #4294967295
9000bc3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000bc40:	f10a 0a01 	add.w	sl, sl, #1
9000bc44:	9304      	str	r3, [sp, #16]
9000bc46:	9307      	str	r3, [sp, #28]
9000bc48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000bc4c:	931a      	str	r3, [sp, #104]	; 0x68
9000bc4e:	4654      	mov	r4, sl
9000bc50:	2205      	movs	r2, #5
9000bc52:	f814 1b01 	ldrb.w	r1, [r4], #1
9000bc56:	4854      	ldr	r0, [pc, #336]	; (9000bda8 <_vfiprintf_r+0x220>)
9000bc58:	f7f4 fada 	bl	90000210 <memchr>
9000bc5c:	9a04      	ldr	r2, [sp, #16]
9000bc5e:	b9d8      	cbnz	r0, 9000bc98 <_vfiprintf_r+0x110>
9000bc60:	06d1      	lsls	r1, r2, #27
9000bc62:	bf44      	itt	mi
9000bc64:	2320      	movmi	r3, #32
9000bc66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000bc6a:	0713      	lsls	r3, r2, #28
9000bc6c:	bf44      	itt	mi
9000bc6e:	232b      	movmi	r3, #43	; 0x2b
9000bc70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000bc74:	f89a 3000 	ldrb.w	r3, [sl]
9000bc78:	2b2a      	cmp	r3, #42	; 0x2a
9000bc7a:	d015      	beq.n	9000bca8 <_vfiprintf_r+0x120>
9000bc7c:	9a07      	ldr	r2, [sp, #28]
9000bc7e:	4654      	mov	r4, sl
9000bc80:	2000      	movs	r0, #0
9000bc82:	f04f 0c0a 	mov.w	ip, #10
9000bc86:	4621      	mov	r1, r4
9000bc88:	f811 3b01 	ldrb.w	r3, [r1], #1
9000bc8c:	3b30      	subs	r3, #48	; 0x30
9000bc8e:	2b09      	cmp	r3, #9
9000bc90:	d94d      	bls.n	9000bd2e <_vfiprintf_r+0x1a6>
9000bc92:	b1b0      	cbz	r0, 9000bcc2 <_vfiprintf_r+0x13a>
9000bc94:	9207      	str	r2, [sp, #28]
9000bc96:	e014      	b.n	9000bcc2 <_vfiprintf_r+0x13a>
9000bc98:	eba0 0308 	sub.w	r3, r0, r8
9000bc9c:	fa09 f303 	lsl.w	r3, r9, r3
9000bca0:	4313      	orrs	r3, r2
9000bca2:	9304      	str	r3, [sp, #16]
9000bca4:	46a2      	mov	sl, r4
9000bca6:	e7d2      	b.n	9000bc4e <_vfiprintf_r+0xc6>
9000bca8:	9b03      	ldr	r3, [sp, #12]
9000bcaa:	1d19      	adds	r1, r3, #4
9000bcac:	681b      	ldr	r3, [r3, #0]
9000bcae:	9103      	str	r1, [sp, #12]
9000bcb0:	2b00      	cmp	r3, #0
9000bcb2:	bfbb      	ittet	lt
9000bcb4:	425b      	neglt	r3, r3
9000bcb6:	f042 0202 	orrlt.w	r2, r2, #2
9000bcba:	9307      	strge	r3, [sp, #28]
9000bcbc:	9307      	strlt	r3, [sp, #28]
9000bcbe:	bfb8      	it	lt
9000bcc0:	9204      	strlt	r2, [sp, #16]
9000bcc2:	7823      	ldrb	r3, [r4, #0]
9000bcc4:	2b2e      	cmp	r3, #46	; 0x2e
9000bcc6:	d10c      	bne.n	9000bce2 <_vfiprintf_r+0x15a>
9000bcc8:	7863      	ldrb	r3, [r4, #1]
9000bcca:	2b2a      	cmp	r3, #42	; 0x2a
9000bccc:	d134      	bne.n	9000bd38 <_vfiprintf_r+0x1b0>
9000bcce:	9b03      	ldr	r3, [sp, #12]
9000bcd0:	1d1a      	adds	r2, r3, #4
9000bcd2:	681b      	ldr	r3, [r3, #0]
9000bcd4:	9203      	str	r2, [sp, #12]
9000bcd6:	2b00      	cmp	r3, #0
9000bcd8:	bfb8      	it	lt
9000bcda:	f04f 33ff 	movlt.w	r3, #4294967295
9000bcde:	3402      	adds	r4, #2
9000bce0:	9305      	str	r3, [sp, #20]
9000bce2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 9000bdb8 <_vfiprintf_r+0x230>
9000bce6:	7821      	ldrb	r1, [r4, #0]
9000bce8:	2203      	movs	r2, #3
9000bcea:	4650      	mov	r0, sl
9000bcec:	f7f4 fa90 	bl	90000210 <memchr>
9000bcf0:	b138      	cbz	r0, 9000bd02 <_vfiprintf_r+0x17a>
9000bcf2:	9b04      	ldr	r3, [sp, #16]
9000bcf4:	eba0 000a 	sub.w	r0, r0, sl
9000bcf8:	2240      	movs	r2, #64	; 0x40
9000bcfa:	4082      	lsls	r2, r0
9000bcfc:	4313      	orrs	r3, r2
9000bcfe:	3401      	adds	r4, #1
9000bd00:	9304      	str	r3, [sp, #16]
9000bd02:	f814 1b01 	ldrb.w	r1, [r4], #1
9000bd06:	4829      	ldr	r0, [pc, #164]	; (9000bdac <_vfiprintf_r+0x224>)
9000bd08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000bd0c:	2206      	movs	r2, #6
9000bd0e:	f7f4 fa7f 	bl	90000210 <memchr>
9000bd12:	2800      	cmp	r0, #0
9000bd14:	d03f      	beq.n	9000bd96 <_vfiprintf_r+0x20e>
9000bd16:	4b26      	ldr	r3, [pc, #152]	; (9000bdb0 <_vfiprintf_r+0x228>)
9000bd18:	bb1b      	cbnz	r3, 9000bd62 <_vfiprintf_r+0x1da>
9000bd1a:	9b03      	ldr	r3, [sp, #12]
9000bd1c:	3307      	adds	r3, #7
9000bd1e:	f023 0307 	bic.w	r3, r3, #7
9000bd22:	3308      	adds	r3, #8
9000bd24:	9303      	str	r3, [sp, #12]
9000bd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000bd28:	443b      	add	r3, r7
9000bd2a:	9309      	str	r3, [sp, #36]	; 0x24
9000bd2c:	e768      	b.n	9000bc00 <_vfiprintf_r+0x78>
9000bd2e:	fb0c 3202 	mla	r2, ip, r2, r3
9000bd32:	460c      	mov	r4, r1
9000bd34:	2001      	movs	r0, #1
9000bd36:	e7a6      	b.n	9000bc86 <_vfiprintf_r+0xfe>
9000bd38:	2300      	movs	r3, #0
9000bd3a:	3401      	adds	r4, #1
9000bd3c:	9305      	str	r3, [sp, #20]
9000bd3e:	4619      	mov	r1, r3
9000bd40:	f04f 0c0a 	mov.w	ip, #10
9000bd44:	4620      	mov	r0, r4
9000bd46:	f810 2b01 	ldrb.w	r2, [r0], #1
9000bd4a:	3a30      	subs	r2, #48	; 0x30
9000bd4c:	2a09      	cmp	r2, #9
9000bd4e:	d903      	bls.n	9000bd58 <_vfiprintf_r+0x1d0>
9000bd50:	2b00      	cmp	r3, #0
9000bd52:	d0c6      	beq.n	9000bce2 <_vfiprintf_r+0x15a>
9000bd54:	9105      	str	r1, [sp, #20]
9000bd56:	e7c4      	b.n	9000bce2 <_vfiprintf_r+0x15a>
9000bd58:	fb0c 2101 	mla	r1, ip, r1, r2
9000bd5c:	4604      	mov	r4, r0
9000bd5e:	2301      	movs	r3, #1
9000bd60:	e7f0      	b.n	9000bd44 <_vfiprintf_r+0x1bc>
9000bd62:	ab03      	add	r3, sp, #12
9000bd64:	9300      	str	r3, [sp, #0]
9000bd66:	462a      	mov	r2, r5
9000bd68:	4b12      	ldr	r3, [pc, #72]	; (9000bdb4 <_vfiprintf_r+0x22c>)
9000bd6a:	a904      	add	r1, sp, #16
9000bd6c:	4630      	mov	r0, r6
9000bd6e:	f3af 8000 	nop.w
9000bd72:	4607      	mov	r7, r0
9000bd74:	1c78      	adds	r0, r7, #1
9000bd76:	d1d6      	bne.n	9000bd26 <_vfiprintf_r+0x19e>
9000bd78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000bd7a:	07d9      	lsls	r1, r3, #31
9000bd7c:	d405      	bmi.n	9000bd8a <_vfiprintf_r+0x202>
9000bd7e:	89ab      	ldrh	r3, [r5, #12]
9000bd80:	059a      	lsls	r2, r3, #22
9000bd82:	d402      	bmi.n	9000bd8a <_vfiprintf_r+0x202>
9000bd84:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000bd86:	f7ff fd27 	bl	9000b7d8 <__retarget_lock_release_recursive>
9000bd8a:	89ab      	ldrh	r3, [r5, #12]
9000bd8c:	065b      	lsls	r3, r3, #25
9000bd8e:	f53f af1d 	bmi.w	9000bbcc <_vfiprintf_r+0x44>
9000bd92:	9809      	ldr	r0, [sp, #36]	; 0x24
9000bd94:	e71c      	b.n	9000bbd0 <_vfiprintf_r+0x48>
9000bd96:	ab03      	add	r3, sp, #12
9000bd98:	9300      	str	r3, [sp, #0]
9000bd9a:	462a      	mov	r2, r5
9000bd9c:	4b05      	ldr	r3, [pc, #20]	; (9000bdb4 <_vfiprintf_r+0x22c>)
9000bd9e:	a904      	add	r1, sp, #16
9000bda0:	4630      	mov	r0, r6
9000bda2:	f000 f879 	bl	9000be98 <_printf_i>
9000bda6:	e7e4      	b.n	9000bd72 <_vfiprintf_r+0x1ea>
9000bda8:	90011446 	.word	0x90011446
9000bdac:	90011450 	.word	0x90011450
9000bdb0:	00000000 	.word	0x00000000
9000bdb4:	9000bb63 	.word	0x9000bb63
9000bdb8:	9001144c 	.word	0x9001144c

9000bdbc <_printf_common>:
9000bdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000bdc0:	4616      	mov	r6, r2
9000bdc2:	4699      	mov	r9, r3
9000bdc4:	688a      	ldr	r2, [r1, #8]
9000bdc6:	690b      	ldr	r3, [r1, #16]
9000bdc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
9000bdcc:	4293      	cmp	r3, r2
9000bdce:	bfb8      	it	lt
9000bdd0:	4613      	movlt	r3, r2
9000bdd2:	6033      	str	r3, [r6, #0]
9000bdd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
9000bdd8:	4607      	mov	r7, r0
9000bdda:	460c      	mov	r4, r1
9000bddc:	b10a      	cbz	r2, 9000bde2 <_printf_common+0x26>
9000bdde:	3301      	adds	r3, #1
9000bde0:	6033      	str	r3, [r6, #0]
9000bde2:	6823      	ldr	r3, [r4, #0]
9000bde4:	0699      	lsls	r1, r3, #26
9000bde6:	bf42      	ittt	mi
9000bde8:	6833      	ldrmi	r3, [r6, #0]
9000bdea:	3302      	addmi	r3, #2
9000bdec:	6033      	strmi	r3, [r6, #0]
9000bdee:	6825      	ldr	r5, [r4, #0]
9000bdf0:	f015 0506 	ands.w	r5, r5, #6
9000bdf4:	d106      	bne.n	9000be04 <_printf_common+0x48>
9000bdf6:	f104 0a19 	add.w	sl, r4, #25
9000bdfa:	68e3      	ldr	r3, [r4, #12]
9000bdfc:	6832      	ldr	r2, [r6, #0]
9000bdfe:	1a9b      	subs	r3, r3, r2
9000be00:	42ab      	cmp	r3, r5
9000be02:	dc26      	bgt.n	9000be52 <_printf_common+0x96>
9000be04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
9000be08:	1e13      	subs	r3, r2, #0
9000be0a:	6822      	ldr	r2, [r4, #0]
9000be0c:	bf18      	it	ne
9000be0e:	2301      	movne	r3, #1
9000be10:	0692      	lsls	r2, r2, #26
9000be12:	d42b      	bmi.n	9000be6c <_printf_common+0xb0>
9000be14:	f104 0243 	add.w	r2, r4, #67	; 0x43
9000be18:	4649      	mov	r1, r9
9000be1a:	4638      	mov	r0, r7
9000be1c:	47c0      	blx	r8
9000be1e:	3001      	adds	r0, #1
9000be20:	d01e      	beq.n	9000be60 <_printf_common+0xa4>
9000be22:	6823      	ldr	r3, [r4, #0]
9000be24:	6922      	ldr	r2, [r4, #16]
9000be26:	f003 0306 	and.w	r3, r3, #6
9000be2a:	2b04      	cmp	r3, #4
9000be2c:	bf02      	ittt	eq
9000be2e:	68e5      	ldreq	r5, [r4, #12]
9000be30:	6833      	ldreq	r3, [r6, #0]
9000be32:	1aed      	subeq	r5, r5, r3
9000be34:	68a3      	ldr	r3, [r4, #8]
9000be36:	bf0c      	ite	eq
9000be38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000be3c:	2500      	movne	r5, #0
9000be3e:	4293      	cmp	r3, r2
9000be40:	bfc4      	itt	gt
9000be42:	1a9b      	subgt	r3, r3, r2
9000be44:	18ed      	addgt	r5, r5, r3
9000be46:	2600      	movs	r6, #0
9000be48:	341a      	adds	r4, #26
9000be4a:	42b5      	cmp	r5, r6
9000be4c:	d11a      	bne.n	9000be84 <_printf_common+0xc8>
9000be4e:	2000      	movs	r0, #0
9000be50:	e008      	b.n	9000be64 <_printf_common+0xa8>
9000be52:	2301      	movs	r3, #1
9000be54:	4652      	mov	r2, sl
9000be56:	4649      	mov	r1, r9
9000be58:	4638      	mov	r0, r7
9000be5a:	47c0      	blx	r8
9000be5c:	3001      	adds	r0, #1
9000be5e:	d103      	bne.n	9000be68 <_printf_common+0xac>
9000be60:	f04f 30ff 	mov.w	r0, #4294967295
9000be64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000be68:	3501      	adds	r5, #1
9000be6a:	e7c6      	b.n	9000bdfa <_printf_common+0x3e>
9000be6c:	18e1      	adds	r1, r4, r3
9000be6e:	1c5a      	adds	r2, r3, #1
9000be70:	2030      	movs	r0, #48	; 0x30
9000be72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9000be76:	4422      	add	r2, r4
9000be78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
9000be7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
9000be80:	3302      	adds	r3, #2
9000be82:	e7c7      	b.n	9000be14 <_printf_common+0x58>
9000be84:	2301      	movs	r3, #1
9000be86:	4622      	mov	r2, r4
9000be88:	4649      	mov	r1, r9
9000be8a:	4638      	mov	r0, r7
9000be8c:	47c0      	blx	r8
9000be8e:	3001      	adds	r0, #1
9000be90:	d0e6      	beq.n	9000be60 <_printf_common+0xa4>
9000be92:	3601      	adds	r6, #1
9000be94:	e7d9      	b.n	9000be4a <_printf_common+0x8e>
	...

9000be98 <_printf_i>:
9000be98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000be9c:	7e0f      	ldrb	r7, [r1, #24]
9000be9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000bea0:	2f78      	cmp	r7, #120	; 0x78
9000bea2:	4691      	mov	r9, r2
9000bea4:	4680      	mov	r8, r0
9000bea6:	460c      	mov	r4, r1
9000bea8:	469a      	mov	sl, r3
9000beaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
9000beae:	d807      	bhi.n	9000bec0 <_printf_i+0x28>
9000beb0:	2f62      	cmp	r7, #98	; 0x62
9000beb2:	d80a      	bhi.n	9000beca <_printf_i+0x32>
9000beb4:	2f00      	cmp	r7, #0
9000beb6:	f000 80d4 	beq.w	9000c062 <_printf_i+0x1ca>
9000beba:	2f58      	cmp	r7, #88	; 0x58
9000bebc:	f000 80c0 	beq.w	9000c040 <_printf_i+0x1a8>
9000bec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000bec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
9000bec8:	e03a      	b.n	9000bf40 <_printf_i+0xa8>
9000beca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
9000bece:	2b15      	cmp	r3, #21
9000bed0:	d8f6      	bhi.n	9000bec0 <_printf_i+0x28>
9000bed2:	a101      	add	r1, pc, #4	; (adr r1, 9000bed8 <_printf_i+0x40>)
9000bed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000bed8:	9000bf31 	.word	0x9000bf31
9000bedc:	9000bf45 	.word	0x9000bf45
9000bee0:	9000bec1 	.word	0x9000bec1
9000bee4:	9000bec1 	.word	0x9000bec1
9000bee8:	9000bec1 	.word	0x9000bec1
9000beec:	9000bec1 	.word	0x9000bec1
9000bef0:	9000bf45 	.word	0x9000bf45
9000bef4:	9000bec1 	.word	0x9000bec1
9000bef8:	9000bec1 	.word	0x9000bec1
9000befc:	9000bec1 	.word	0x9000bec1
9000bf00:	9000bec1 	.word	0x9000bec1
9000bf04:	9000c049 	.word	0x9000c049
9000bf08:	9000bf71 	.word	0x9000bf71
9000bf0c:	9000c003 	.word	0x9000c003
9000bf10:	9000bec1 	.word	0x9000bec1
9000bf14:	9000bec1 	.word	0x9000bec1
9000bf18:	9000c06b 	.word	0x9000c06b
9000bf1c:	9000bec1 	.word	0x9000bec1
9000bf20:	9000bf71 	.word	0x9000bf71
9000bf24:	9000bec1 	.word	0x9000bec1
9000bf28:	9000bec1 	.word	0x9000bec1
9000bf2c:	9000c00b 	.word	0x9000c00b
9000bf30:	682b      	ldr	r3, [r5, #0]
9000bf32:	1d1a      	adds	r2, r3, #4
9000bf34:	681b      	ldr	r3, [r3, #0]
9000bf36:	602a      	str	r2, [r5, #0]
9000bf38:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000bf3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000bf40:	2301      	movs	r3, #1
9000bf42:	e09f      	b.n	9000c084 <_printf_i+0x1ec>
9000bf44:	6820      	ldr	r0, [r4, #0]
9000bf46:	682b      	ldr	r3, [r5, #0]
9000bf48:	0607      	lsls	r7, r0, #24
9000bf4a:	f103 0104 	add.w	r1, r3, #4
9000bf4e:	6029      	str	r1, [r5, #0]
9000bf50:	d501      	bpl.n	9000bf56 <_printf_i+0xbe>
9000bf52:	681e      	ldr	r6, [r3, #0]
9000bf54:	e003      	b.n	9000bf5e <_printf_i+0xc6>
9000bf56:	0646      	lsls	r6, r0, #25
9000bf58:	d5fb      	bpl.n	9000bf52 <_printf_i+0xba>
9000bf5a:	f9b3 6000 	ldrsh.w	r6, [r3]
9000bf5e:	2e00      	cmp	r6, #0
9000bf60:	da03      	bge.n	9000bf6a <_printf_i+0xd2>
9000bf62:	232d      	movs	r3, #45	; 0x2d
9000bf64:	4276      	negs	r6, r6
9000bf66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000bf6a:	485a      	ldr	r0, [pc, #360]	; (9000c0d4 <_printf_i+0x23c>)
9000bf6c:	230a      	movs	r3, #10
9000bf6e:	e012      	b.n	9000bf96 <_printf_i+0xfe>
9000bf70:	682b      	ldr	r3, [r5, #0]
9000bf72:	6820      	ldr	r0, [r4, #0]
9000bf74:	1d19      	adds	r1, r3, #4
9000bf76:	6029      	str	r1, [r5, #0]
9000bf78:	0605      	lsls	r5, r0, #24
9000bf7a:	d501      	bpl.n	9000bf80 <_printf_i+0xe8>
9000bf7c:	681e      	ldr	r6, [r3, #0]
9000bf7e:	e002      	b.n	9000bf86 <_printf_i+0xee>
9000bf80:	0641      	lsls	r1, r0, #25
9000bf82:	d5fb      	bpl.n	9000bf7c <_printf_i+0xe4>
9000bf84:	881e      	ldrh	r6, [r3, #0]
9000bf86:	4853      	ldr	r0, [pc, #332]	; (9000c0d4 <_printf_i+0x23c>)
9000bf88:	2f6f      	cmp	r7, #111	; 0x6f
9000bf8a:	bf0c      	ite	eq
9000bf8c:	2308      	moveq	r3, #8
9000bf8e:	230a      	movne	r3, #10
9000bf90:	2100      	movs	r1, #0
9000bf92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
9000bf96:	6865      	ldr	r5, [r4, #4]
9000bf98:	60a5      	str	r5, [r4, #8]
9000bf9a:	2d00      	cmp	r5, #0
9000bf9c:	bfa2      	ittt	ge
9000bf9e:	6821      	ldrge	r1, [r4, #0]
9000bfa0:	f021 0104 	bicge.w	r1, r1, #4
9000bfa4:	6021      	strge	r1, [r4, #0]
9000bfa6:	b90e      	cbnz	r6, 9000bfac <_printf_i+0x114>
9000bfa8:	2d00      	cmp	r5, #0
9000bfaa:	d04b      	beq.n	9000c044 <_printf_i+0x1ac>
9000bfac:	4615      	mov	r5, r2
9000bfae:	fbb6 f1f3 	udiv	r1, r6, r3
9000bfb2:	fb03 6711 	mls	r7, r3, r1, r6
9000bfb6:	5dc7      	ldrb	r7, [r0, r7]
9000bfb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
9000bfbc:	4637      	mov	r7, r6
9000bfbe:	42bb      	cmp	r3, r7
9000bfc0:	460e      	mov	r6, r1
9000bfc2:	d9f4      	bls.n	9000bfae <_printf_i+0x116>
9000bfc4:	2b08      	cmp	r3, #8
9000bfc6:	d10b      	bne.n	9000bfe0 <_printf_i+0x148>
9000bfc8:	6823      	ldr	r3, [r4, #0]
9000bfca:	07de      	lsls	r6, r3, #31
9000bfcc:	d508      	bpl.n	9000bfe0 <_printf_i+0x148>
9000bfce:	6923      	ldr	r3, [r4, #16]
9000bfd0:	6861      	ldr	r1, [r4, #4]
9000bfd2:	4299      	cmp	r1, r3
9000bfd4:	bfde      	ittt	le
9000bfd6:	2330      	movle	r3, #48	; 0x30
9000bfd8:	f805 3c01 	strble.w	r3, [r5, #-1]
9000bfdc:	f105 35ff 	addle.w	r5, r5, #4294967295
9000bfe0:	1b52      	subs	r2, r2, r5
9000bfe2:	6122      	str	r2, [r4, #16]
9000bfe4:	f8cd a000 	str.w	sl, [sp]
9000bfe8:	464b      	mov	r3, r9
9000bfea:	aa03      	add	r2, sp, #12
9000bfec:	4621      	mov	r1, r4
9000bfee:	4640      	mov	r0, r8
9000bff0:	f7ff fee4 	bl	9000bdbc <_printf_common>
9000bff4:	3001      	adds	r0, #1
9000bff6:	d14a      	bne.n	9000c08e <_printf_i+0x1f6>
9000bff8:	f04f 30ff 	mov.w	r0, #4294967295
9000bffc:	b004      	add	sp, #16
9000bffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c002:	6823      	ldr	r3, [r4, #0]
9000c004:	f043 0320 	orr.w	r3, r3, #32
9000c008:	6023      	str	r3, [r4, #0]
9000c00a:	4833      	ldr	r0, [pc, #204]	; (9000c0d8 <_printf_i+0x240>)
9000c00c:	2778      	movs	r7, #120	; 0x78
9000c00e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
9000c012:	6823      	ldr	r3, [r4, #0]
9000c014:	6829      	ldr	r1, [r5, #0]
9000c016:	061f      	lsls	r7, r3, #24
9000c018:	f851 6b04 	ldr.w	r6, [r1], #4
9000c01c:	d402      	bmi.n	9000c024 <_printf_i+0x18c>
9000c01e:	065f      	lsls	r7, r3, #25
9000c020:	bf48      	it	mi
9000c022:	b2b6      	uxthmi	r6, r6
9000c024:	07df      	lsls	r7, r3, #31
9000c026:	bf48      	it	mi
9000c028:	f043 0320 	orrmi.w	r3, r3, #32
9000c02c:	6029      	str	r1, [r5, #0]
9000c02e:	bf48      	it	mi
9000c030:	6023      	strmi	r3, [r4, #0]
9000c032:	b91e      	cbnz	r6, 9000c03c <_printf_i+0x1a4>
9000c034:	6823      	ldr	r3, [r4, #0]
9000c036:	f023 0320 	bic.w	r3, r3, #32
9000c03a:	6023      	str	r3, [r4, #0]
9000c03c:	2310      	movs	r3, #16
9000c03e:	e7a7      	b.n	9000bf90 <_printf_i+0xf8>
9000c040:	4824      	ldr	r0, [pc, #144]	; (9000c0d4 <_printf_i+0x23c>)
9000c042:	e7e4      	b.n	9000c00e <_printf_i+0x176>
9000c044:	4615      	mov	r5, r2
9000c046:	e7bd      	b.n	9000bfc4 <_printf_i+0x12c>
9000c048:	682b      	ldr	r3, [r5, #0]
9000c04a:	6826      	ldr	r6, [r4, #0]
9000c04c:	6961      	ldr	r1, [r4, #20]
9000c04e:	1d18      	adds	r0, r3, #4
9000c050:	6028      	str	r0, [r5, #0]
9000c052:	0635      	lsls	r5, r6, #24
9000c054:	681b      	ldr	r3, [r3, #0]
9000c056:	d501      	bpl.n	9000c05c <_printf_i+0x1c4>
9000c058:	6019      	str	r1, [r3, #0]
9000c05a:	e002      	b.n	9000c062 <_printf_i+0x1ca>
9000c05c:	0670      	lsls	r0, r6, #25
9000c05e:	d5fb      	bpl.n	9000c058 <_printf_i+0x1c0>
9000c060:	8019      	strh	r1, [r3, #0]
9000c062:	2300      	movs	r3, #0
9000c064:	6123      	str	r3, [r4, #16]
9000c066:	4615      	mov	r5, r2
9000c068:	e7bc      	b.n	9000bfe4 <_printf_i+0x14c>
9000c06a:	682b      	ldr	r3, [r5, #0]
9000c06c:	1d1a      	adds	r2, r3, #4
9000c06e:	602a      	str	r2, [r5, #0]
9000c070:	681d      	ldr	r5, [r3, #0]
9000c072:	6862      	ldr	r2, [r4, #4]
9000c074:	2100      	movs	r1, #0
9000c076:	4628      	mov	r0, r5
9000c078:	f7f4 f8ca 	bl	90000210 <memchr>
9000c07c:	b108      	cbz	r0, 9000c082 <_printf_i+0x1ea>
9000c07e:	1b40      	subs	r0, r0, r5
9000c080:	6060      	str	r0, [r4, #4]
9000c082:	6863      	ldr	r3, [r4, #4]
9000c084:	6123      	str	r3, [r4, #16]
9000c086:	2300      	movs	r3, #0
9000c088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000c08c:	e7aa      	b.n	9000bfe4 <_printf_i+0x14c>
9000c08e:	6923      	ldr	r3, [r4, #16]
9000c090:	462a      	mov	r2, r5
9000c092:	4649      	mov	r1, r9
9000c094:	4640      	mov	r0, r8
9000c096:	47d0      	blx	sl
9000c098:	3001      	adds	r0, #1
9000c09a:	d0ad      	beq.n	9000bff8 <_printf_i+0x160>
9000c09c:	6823      	ldr	r3, [r4, #0]
9000c09e:	079b      	lsls	r3, r3, #30
9000c0a0:	d413      	bmi.n	9000c0ca <_printf_i+0x232>
9000c0a2:	68e0      	ldr	r0, [r4, #12]
9000c0a4:	9b03      	ldr	r3, [sp, #12]
9000c0a6:	4298      	cmp	r0, r3
9000c0a8:	bfb8      	it	lt
9000c0aa:	4618      	movlt	r0, r3
9000c0ac:	e7a6      	b.n	9000bffc <_printf_i+0x164>
9000c0ae:	2301      	movs	r3, #1
9000c0b0:	4632      	mov	r2, r6
9000c0b2:	4649      	mov	r1, r9
9000c0b4:	4640      	mov	r0, r8
9000c0b6:	47d0      	blx	sl
9000c0b8:	3001      	adds	r0, #1
9000c0ba:	d09d      	beq.n	9000bff8 <_printf_i+0x160>
9000c0bc:	3501      	adds	r5, #1
9000c0be:	68e3      	ldr	r3, [r4, #12]
9000c0c0:	9903      	ldr	r1, [sp, #12]
9000c0c2:	1a5b      	subs	r3, r3, r1
9000c0c4:	42ab      	cmp	r3, r5
9000c0c6:	dcf2      	bgt.n	9000c0ae <_printf_i+0x216>
9000c0c8:	e7eb      	b.n	9000c0a2 <_printf_i+0x20a>
9000c0ca:	2500      	movs	r5, #0
9000c0cc:	f104 0619 	add.w	r6, r4, #25
9000c0d0:	e7f5      	b.n	9000c0be <_printf_i+0x226>
9000c0d2:	bf00      	nop
9000c0d4:	90011457 	.word	0x90011457
9000c0d8:	90011468 	.word	0x90011468

9000c0dc <__sflush_r>:
9000c0dc:	898a      	ldrh	r2, [r1, #12]
9000c0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c0e2:	4605      	mov	r5, r0
9000c0e4:	0710      	lsls	r0, r2, #28
9000c0e6:	460c      	mov	r4, r1
9000c0e8:	d458      	bmi.n	9000c19c <__sflush_r+0xc0>
9000c0ea:	684b      	ldr	r3, [r1, #4]
9000c0ec:	2b00      	cmp	r3, #0
9000c0ee:	dc05      	bgt.n	9000c0fc <__sflush_r+0x20>
9000c0f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9000c0f2:	2b00      	cmp	r3, #0
9000c0f4:	dc02      	bgt.n	9000c0fc <__sflush_r+0x20>
9000c0f6:	2000      	movs	r0, #0
9000c0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000c0fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000c0fe:	2e00      	cmp	r6, #0
9000c100:	d0f9      	beq.n	9000c0f6 <__sflush_r+0x1a>
9000c102:	2300      	movs	r3, #0
9000c104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
9000c108:	682f      	ldr	r7, [r5, #0]
9000c10a:	6a21      	ldr	r1, [r4, #32]
9000c10c:	602b      	str	r3, [r5, #0]
9000c10e:	d032      	beq.n	9000c176 <__sflush_r+0x9a>
9000c110:	6d60      	ldr	r0, [r4, #84]	; 0x54
9000c112:	89a3      	ldrh	r3, [r4, #12]
9000c114:	075a      	lsls	r2, r3, #29
9000c116:	d505      	bpl.n	9000c124 <__sflush_r+0x48>
9000c118:	6863      	ldr	r3, [r4, #4]
9000c11a:	1ac0      	subs	r0, r0, r3
9000c11c:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000c11e:	b10b      	cbz	r3, 9000c124 <__sflush_r+0x48>
9000c120:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000c122:	1ac0      	subs	r0, r0, r3
9000c124:	2300      	movs	r3, #0
9000c126:	4602      	mov	r2, r0
9000c128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000c12a:	6a21      	ldr	r1, [r4, #32]
9000c12c:	4628      	mov	r0, r5
9000c12e:	47b0      	blx	r6
9000c130:	1c43      	adds	r3, r0, #1
9000c132:	89a3      	ldrh	r3, [r4, #12]
9000c134:	d106      	bne.n	9000c144 <__sflush_r+0x68>
9000c136:	6829      	ldr	r1, [r5, #0]
9000c138:	291d      	cmp	r1, #29
9000c13a:	d82b      	bhi.n	9000c194 <__sflush_r+0xb8>
9000c13c:	4a29      	ldr	r2, [pc, #164]	; (9000c1e4 <__sflush_r+0x108>)
9000c13e:	410a      	asrs	r2, r1
9000c140:	07d6      	lsls	r6, r2, #31
9000c142:	d427      	bmi.n	9000c194 <__sflush_r+0xb8>
9000c144:	2200      	movs	r2, #0
9000c146:	6062      	str	r2, [r4, #4]
9000c148:	04d9      	lsls	r1, r3, #19
9000c14a:	6922      	ldr	r2, [r4, #16]
9000c14c:	6022      	str	r2, [r4, #0]
9000c14e:	d504      	bpl.n	9000c15a <__sflush_r+0x7e>
9000c150:	1c42      	adds	r2, r0, #1
9000c152:	d101      	bne.n	9000c158 <__sflush_r+0x7c>
9000c154:	682b      	ldr	r3, [r5, #0]
9000c156:	b903      	cbnz	r3, 9000c15a <__sflush_r+0x7e>
9000c158:	6560      	str	r0, [r4, #84]	; 0x54
9000c15a:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000c15c:	602f      	str	r7, [r5, #0]
9000c15e:	2900      	cmp	r1, #0
9000c160:	d0c9      	beq.n	9000c0f6 <__sflush_r+0x1a>
9000c162:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000c166:	4299      	cmp	r1, r3
9000c168:	d002      	beq.n	9000c170 <__sflush_r+0x94>
9000c16a:	4628      	mov	r0, r5
9000c16c:	f7ff fb3e 	bl	9000b7ec <_free_r>
9000c170:	2000      	movs	r0, #0
9000c172:	6360      	str	r0, [r4, #52]	; 0x34
9000c174:	e7c0      	b.n	9000c0f8 <__sflush_r+0x1c>
9000c176:	2301      	movs	r3, #1
9000c178:	4628      	mov	r0, r5
9000c17a:	47b0      	blx	r6
9000c17c:	1c41      	adds	r1, r0, #1
9000c17e:	d1c8      	bne.n	9000c112 <__sflush_r+0x36>
9000c180:	682b      	ldr	r3, [r5, #0]
9000c182:	2b00      	cmp	r3, #0
9000c184:	d0c5      	beq.n	9000c112 <__sflush_r+0x36>
9000c186:	2b1d      	cmp	r3, #29
9000c188:	d001      	beq.n	9000c18e <__sflush_r+0xb2>
9000c18a:	2b16      	cmp	r3, #22
9000c18c:	d101      	bne.n	9000c192 <__sflush_r+0xb6>
9000c18e:	602f      	str	r7, [r5, #0]
9000c190:	e7b1      	b.n	9000c0f6 <__sflush_r+0x1a>
9000c192:	89a3      	ldrh	r3, [r4, #12]
9000c194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000c198:	81a3      	strh	r3, [r4, #12]
9000c19a:	e7ad      	b.n	9000c0f8 <__sflush_r+0x1c>
9000c19c:	690f      	ldr	r7, [r1, #16]
9000c19e:	2f00      	cmp	r7, #0
9000c1a0:	d0a9      	beq.n	9000c0f6 <__sflush_r+0x1a>
9000c1a2:	0793      	lsls	r3, r2, #30
9000c1a4:	680e      	ldr	r6, [r1, #0]
9000c1a6:	bf08      	it	eq
9000c1a8:	694b      	ldreq	r3, [r1, #20]
9000c1aa:	600f      	str	r7, [r1, #0]
9000c1ac:	bf18      	it	ne
9000c1ae:	2300      	movne	r3, #0
9000c1b0:	eba6 0807 	sub.w	r8, r6, r7
9000c1b4:	608b      	str	r3, [r1, #8]
9000c1b6:	f1b8 0f00 	cmp.w	r8, #0
9000c1ba:	dd9c      	ble.n	9000c0f6 <__sflush_r+0x1a>
9000c1bc:	6a21      	ldr	r1, [r4, #32]
9000c1be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9000c1c0:	4643      	mov	r3, r8
9000c1c2:	463a      	mov	r2, r7
9000c1c4:	4628      	mov	r0, r5
9000c1c6:	47b0      	blx	r6
9000c1c8:	2800      	cmp	r0, #0
9000c1ca:	dc06      	bgt.n	9000c1da <__sflush_r+0xfe>
9000c1cc:	89a3      	ldrh	r3, [r4, #12]
9000c1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000c1d2:	81a3      	strh	r3, [r4, #12]
9000c1d4:	f04f 30ff 	mov.w	r0, #4294967295
9000c1d8:	e78e      	b.n	9000c0f8 <__sflush_r+0x1c>
9000c1da:	4407      	add	r7, r0
9000c1dc:	eba8 0800 	sub.w	r8, r8, r0
9000c1e0:	e7e9      	b.n	9000c1b6 <__sflush_r+0xda>
9000c1e2:	bf00      	nop
9000c1e4:	dfbffffe 	.word	0xdfbffffe

9000c1e8 <_fflush_r>:
9000c1e8:	b538      	push	{r3, r4, r5, lr}
9000c1ea:	690b      	ldr	r3, [r1, #16]
9000c1ec:	4605      	mov	r5, r0
9000c1ee:	460c      	mov	r4, r1
9000c1f0:	b913      	cbnz	r3, 9000c1f8 <_fflush_r+0x10>
9000c1f2:	2500      	movs	r5, #0
9000c1f4:	4628      	mov	r0, r5
9000c1f6:	bd38      	pop	{r3, r4, r5, pc}
9000c1f8:	b118      	cbz	r0, 9000c202 <_fflush_r+0x1a>
9000c1fa:	6a03      	ldr	r3, [r0, #32]
9000c1fc:	b90b      	cbnz	r3, 9000c202 <_fflush_r+0x1a>
9000c1fe:	f7ff f8af 	bl	9000b360 <__sinit>
9000c202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c206:	2b00      	cmp	r3, #0
9000c208:	d0f3      	beq.n	9000c1f2 <_fflush_r+0xa>
9000c20a:	6e62      	ldr	r2, [r4, #100]	; 0x64
9000c20c:	07d0      	lsls	r0, r2, #31
9000c20e:	d404      	bmi.n	9000c21a <_fflush_r+0x32>
9000c210:	0599      	lsls	r1, r3, #22
9000c212:	d402      	bmi.n	9000c21a <_fflush_r+0x32>
9000c214:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c216:	f7ff fade 	bl	9000b7d6 <__retarget_lock_acquire_recursive>
9000c21a:	4628      	mov	r0, r5
9000c21c:	4621      	mov	r1, r4
9000c21e:	f7ff ff5d 	bl	9000c0dc <__sflush_r>
9000c222:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000c224:	07da      	lsls	r2, r3, #31
9000c226:	4605      	mov	r5, r0
9000c228:	d4e4      	bmi.n	9000c1f4 <_fflush_r+0xc>
9000c22a:	89a3      	ldrh	r3, [r4, #12]
9000c22c:	059b      	lsls	r3, r3, #22
9000c22e:	d4e1      	bmi.n	9000c1f4 <_fflush_r+0xc>
9000c230:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c232:	f7ff fad1 	bl	9000b7d8 <__retarget_lock_release_recursive>
9000c236:	e7dd      	b.n	9000c1f4 <_fflush_r+0xc>

9000c238 <__swhatbuf_r>:
9000c238:	b570      	push	{r4, r5, r6, lr}
9000c23a:	460c      	mov	r4, r1
9000c23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c240:	2900      	cmp	r1, #0
9000c242:	b096      	sub	sp, #88	; 0x58
9000c244:	4615      	mov	r5, r2
9000c246:	461e      	mov	r6, r3
9000c248:	da0d      	bge.n	9000c266 <__swhatbuf_r+0x2e>
9000c24a:	89a3      	ldrh	r3, [r4, #12]
9000c24c:	f013 0f80 	tst.w	r3, #128	; 0x80
9000c250:	f04f 0100 	mov.w	r1, #0
9000c254:	bf0c      	ite	eq
9000c256:	f44f 6380 	moveq.w	r3, #1024	; 0x400
9000c25a:	2340      	movne	r3, #64	; 0x40
9000c25c:	2000      	movs	r0, #0
9000c25e:	6031      	str	r1, [r6, #0]
9000c260:	602b      	str	r3, [r5, #0]
9000c262:	b016      	add	sp, #88	; 0x58
9000c264:	bd70      	pop	{r4, r5, r6, pc}
9000c266:	466a      	mov	r2, sp
9000c268:	f000 f896 	bl	9000c398 <_fstat_r>
9000c26c:	2800      	cmp	r0, #0
9000c26e:	dbec      	blt.n	9000c24a <__swhatbuf_r+0x12>
9000c270:	9901      	ldr	r1, [sp, #4]
9000c272:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
9000c276:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
9000c27a:	4259      	negs	r1, r3
9000c27c:	4159      	adcs	r1, r3
9000c27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000c282:	e7eb      	b.n	9000c25c <__swhatbuf_r+0x24>

9000c284 <__smakebuf_r>:
9000c284:	898b      	ldrh	r3, [r1, #12]
9000c286:	b573      	push	{r0, r1, r4, r5, r6, lr}
9000c288:	079d      	lsls	r5, r3, #30
9000c28a:	4606      	mov	r6, r0
9000c28c:	460c      	mov	r4, r1
9000c28e:	d507      	bpl.n	9000c2a0 <__smakebuf_r+0x1c>
9000c290:	f104 0347 	add.w	r3, r4, #71	; 0x47
9000c294:	6023      	str	r3, [r4, #0]
9000c296:	6123      	str	r3, [r4, #16]
9000c298:	2301      	movs	r3, #1
9000c29a:	6163      	str	r3, [r4, #20]
9000c29c:	b002      	add	sp, #8
9000c29e:	bd70      	pop	{r4, r5, r6, pc}
9000c2a0:	ab01      	add	r3, sp, #4
9000c2a2:	466a      	mov	r2, sp
9000c2a4:	f7ff ffc8 	bl	9000c238 <__swhatbuf_r>
9000c2a8:	9900      	ldr	r1, [sp, #0]
9000c2aa:	4605      	mov	r5, r0
9000c2ac:	4630      	mov	r0, r6
9000c2ae:	f7fe ff3f 	bl	9000b130 <_malloc_r>
9000c2b2:	b948      	cbnz	r0, 9000c2c8 <__smakebuf_r+0x44>
9000c2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c2b8:	059a      	lsls	r2, r3, #22
9000c2ba:	d4ef      	bmi.n	9000c29c <__smakebuf_r+0x18>
9000c2bc:	f023 0303 	bic.w	r3, r3, #3
9000c2c0:	f043 0302 	orr.w	r3, r3, #2
9000c2c4:	81a3      	strh	r3, [r4, #12]
9000c2c6:	e7e3      	b.n	9000c290 <__smakebuf_r+0xc>
9000c2c8:	89a3      	ldrh	r3, [r4, #12]
9000c2ca:	6020      	str	r0, [r4, #0]
9000c2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000c2d0:	81a3      	strh	r3, [r4, #12]
9000c2d2:	9b00      	ldr	r3, [sp, #0]
9000c2d4:	6163      	str	r3, [r4, #20]
9000c2d6:	9b01      	ldr	r3, [sp, #4]
9000c2d8:	6120      	str	r0, [r4, #16]
9000c2da:	b15b      	cbz	r3, 9000c2f4 <__smakebuf_r+0x70>
9000c2dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c2e0:	4630      	mov	r0, r6
9000c2e2:	f000 f86b 	bl	9000c3bc <_isatty_r>
9000c2e6:	b128      	cbz	r0, 9000c2f4 <__smakebuf_r+0x70>
9000c2e8:	89a3      	ldrh	r3, [r4, #12]
9000c2ea:	f023 0303 	bic.w	r3, r3, #3
9000c2ee:	f043 0301 	orr.w	r3, r3, #1
9000c2f2:	81a3      	strh	r3, [r4, #12]
9000c2f4:	89a3      	ldrh	r3, [r4, #12]
9000c2f6:	431d      	orrs	r5, r3
9000c2f8:	81a5      	strh	r5, [r4, #12]
9000c2fa:	e7cf      	b.n	9000c29c <__smakebuf_r+0x18>

9000c2fc <_putc_r>:
9000c2fc:	b570      	push	{r4, r5, r6, lr}
9000c2fe:	460d      	mov	r5, r1
9000c300:	4614      	mov	r4, r2
9000c302:	4606      	mov	r6, r0
9000c304:	b118      	cbz	r0, 9000c30e <_putc_r+0x12>
9000c306:	6a03      	ldr	r3, [r0, #32]
9000c308:	b90b      	cbnz	r3, 9000c30e <_putc_r+0x12>
9000c30a:	f7ff f829 	bl	9000b360 <__sinit>
9000c30e:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000c310:	07d8      	lsls	r0, r3, #31
9000c312:	d405      	bmi.n	9000c320 <_putc_r+0x24>
9000c314:	89a3      	ldrh	r3, [r4, #12]
9000c316:	0599      	lsls	r1, r3, #22
9000c318:	d402      	bmi.n	9000c320 <_putc_r+0x24>
9000c31a:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c31c:	f7ff fa5b 	bl	9000b7d6 <__retarget_lock_acquire_recursive>
9000c320:	68a3      	ldr	r3, [r4, #8]
9000c322:	3b01      	subs	r3, #1
9000c324:	2b00      	cmp	r3, #0
9000c326:	60a3      	str	r3, [r4, #8]
9000c328:	da05      	bge.n	9000c336 <_putc_r+0x3a>
9000c32a:	69a2      	ldr	r2, [r4, #24]
9000c32c:	4293      	cmp	r3, r2
9000c32e:	db12      	blt.n	9000c356 <_putc_r+0x5a>
9000c330:	b2eb      	uxtb	r3, r5
9000c332:	2b0a      	cmp	r3, #10
9000c334:	d00f      	beq.n	9000c356 <_putc_r+0x5a>
9000c336:	6823      	ldr	r3, [r4, #0]
9000c338:	1c5a      	adds	r2, r3, #1
9000c33a:	6022      	str	r2, [r4, #0]
9000c33c:	701d      	strb	r5, [r3, #0]
9000c33e:	b2ed      	uxtb	r5, r5
9000c340:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000c342:	07da      	lsls	r2, r3, #31
9000c344:	d405      	bmi.n	9000c352 <_putc_r+0x56>
9000c346:	89a3      	ldrh	r3, [r4, #12]
9000c348:	059b      	lsls	r3, r3, #22
9000c34a:	d402      	bmi.n	9000c352 <_putc_r+0x56>
9000c34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c34e:	f7ff fa43 	bl	9000b7d8 <__retarget_lock_release_recursive>
9000c352:	4628      	mov	r0, r5
9000c354:	bd70      	pop	{r4, r5, r6, pc}
9000c356:	4629      	mov	r1, r5
9000c358:	4622      	mov	r2, r4
9000c35a:	4630      	mov	r0, r6
9000c35c:	f7ff f90f 	bl	9000b57e <__swbuf_r>
9000c360:	4605      	mov	r5, r0
9000c362:	e7ed      	b.n	9000c340 <_putc_r+0x44>

9000c364 <memmove>:
9000c364:	4288      	cmp	r0, r1
9000c366:	b510      	push	{r4, lr}
9000c368:	eb01 0402 	add.w	r4, r1, r2
9000c36c:	d902      	bls.n	9000c374 <memmove+0x10>
9000c36e:	4284      	cmp	r4, r0
9000c370:	4623      	mov	r3, r4
9000c372:	d807      	bhi.n	9000c384 <memmove+0x20>
9000c374:	1e43      	subs	r3, r0, #1
9000c376:	42a1      	cmp	r1, r4
9000c378:	d008      	beq.n	9000c38c <memmove+0x28>
9000c37a:	f811 2b01 	ldrb.w	r2, [r1], #1
9000c37e:	f803 2f01 	strb.w	r2, [r3, #1]!
9000c382:	e7f8      	b.n	9000c376 <memmove+0x12>
9000c384:	4402      	add	r2, r0
9000c386:	4601      	mov	r1, r0
9000c388:	428a      	cmp	r2, r1
9000c38a:	d100      	bne.n	9000c38e <memmove+0x2a>
9000c38c:	bd10      	pop	{r4, pc}
9000c38e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000c392:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000c396:	e7f7      	b.n	9000c388 <memmove+0x24>

9000c398 <_fstat_r>:
9000c398:	b538      	push	{r3, r4, r5, lr}
9000c39a:	4d07      	ldr	r5, [pc, #28]	; (9000c3b8 <_fstat_r+0x20>)
9000c39c:	2300      	movs	r3, #0
9000c39e:	4604      	mov	r4, r0
9000c3a0:	4608      	mov	r0, r1
9000c3a2:	4611      	mov	r1, r2
9000c3a4:	602b      	str	r3, [r5, #0]
9000c3a6:	f000 f867 	bl	9000c478 <_fstat>
9000c3aa:	1c43      	adds	r3, r0, #1
9000c3ac:	d102      	bne.n	9000c3b4 <_fstat_r+0x1c>
9000c3ae:	682b      	ldr	r3, [r5, #0]
9000c3b0:	b103      	cbz	r3, 9000c3b4 <_fstat_r+0x1c>
9000c3b2:	6023      	str	r3, [r4, #0]
9000c3b4:	bd38      	pop	{r3, r4, r5, pc}
9000c3b6:	bf00      	nop
9000c3b8:	20010bec 	.word	0x20010bec

9000c3bc <_isatty_r>:
9000c3bc:	b538      	push	{r3, r4, r5, lr}
9000c3be:	4d06      	ldr	r5, [pc, #24]	; (9000c3d8 <_isatty_r+0x1c>)
9000c3c0:	2300      	movs	r3, #0
9000c3c2:	4604      	mov	r4, r0
9000c3c4:	4608      	mov	r0, r1
9000c3c6:	602b      	str	r3, [r5, #0]
9000c3c8:	f000 f85e 	bl	9000c488 <_isatty>
9000c3cc:	1c43      	adds	r3, r0, #1
9000c3ce:	d102      	bne.n	9000c3d6 <_isatty_r+0x1a>
9000c3d0:	682b      	ldr	r3, [r5, #0]
9000c3d2:	b103      	cbz	r3, 9000c3d6 <_isatty_r+0x1a>
9000c3d4:	6023      	str	r3, [r4, #0]
9000c3d6:	bd38      	pop	{r3, r4, r5, pc}
9000c3d8:	20010bec 	.word	0x20010bec

9000c3dc <memcpy>:
9000c3dc:	440a      	add	r2, r1
9000c3de:	4291      	cmp	r1, r2
9000c3e0:	f100 33ff 	add.w	r3, r0, #4294967295
9000c3e4:	d100      	bne.n	9000c3e8 <memcpy+0xc>
9000c3e6:	4770      	bx	lr
9000c3e8:	b510      	push	{r4, lr}
9000c3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
9000c3ee:	f803 4f01 	strb.w	r4, [r3, #1]!
9000c3f2:	4291      	cmp	r1, r2
9000c3f4:	d1f9      	bne.n	9000c3ea <memcpy+0xe>
9000c3f6:	bd10      	pop	{r4, pc}

9000c3f8 <_realloc_r>:
9000c3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c3fc:	4680      	mov	r8, r0
9000c3fe:	4614      	mov	r4, r2
9000c400:	460e      	mov	r6, r1
9000c402:	b921      	cbnz	r1, 9000c40e <_realloc_r+0x16>
9000c404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000c408:	4611      	mov	r1, r2
9000c40a:	f7fe be91 	b.w	9000b130 <_malloc_r>
9000c40e:	b92a      	cbnz	r2, 9000c41c <_realloc_r+0x24>
9000c410:	f7ff f9ec 	bl	9000b7ec <_free_r>
9000c414:	4625      	mov	r5, r4
9000c416:	4628      	mov	r0, r5
9000c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000c41c:	f000 f81b 	bl	9000c456 <_malloc_usable_size_r>
9000c420:	4284      	cmp	r4, r0
9000c422:	4607      	mov	r7, r0
9000c424:	d802      	bhi.n	9000c42c <_realloc_r+0x34>
9000c426:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000c42a:	d812      	bhi.n	9000c452 <_realloc_r+0x5a>
9000c42c:	4621      	mov	r1, r4
9000c42e:	4640      	mov	r0, r8
9000c430:	f7fe fe7e 	bl	9000b130 <_malloc_r>
9000c434:	4605      	mov	r5, r0
9000c436:	2800      	cmp	r0, #0
9000c438:	d0ed      	beq.n	9000c416 <_realloc_r+0x1e>
9000c43a:	42bc      	cmp	r4, r7
9000c43c:	4622      	mov	r2, r4
9000c43e:	4631      	mov	r1, r6
9000c440:	bf28      	it	cs
9000c442:	463a      	movcs	r2, r7
9000c444:	f7ff ffca 	bl	9000c3dc <memcpy>
9000c448:	4631      	mov	r1, r6
9000c44a:	4640      	mov	r0, r8
9000c44c:	f7ff f9ce 	bl	9000b7ec <_free_r>
9000c450:	e7e1      	b.n	9000c416 <_realloc_r+0x1e>
9000c452:	4635      	mov	r5, r6
9000c454:	e7df      	b.n	9000c416 <_realloc_r+0x1e>

9000c456 <_malloc_usable_size_r>:
9000c456:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000c45a:	1f18      	subs	r0, r3, #4
9000c45c:	2b00      	cmp	r3, #0
9000c45e:	bfbc      	itt	lt
9000c460:	580b      	ldrlt	r3, [r1, r0]
9000c462:	18c0      	addlt	r0, r0, r3
9000c464:	4770      	bx	lr
	...

9000c468 <_close>:
9000c468:	4b02      	ldr	r3, [pc, #8]	; (9000c474 <_close+0xc>)
9000c46a:	2258      	movs	r2, #88	; 0x58
9000c46c:	601a      	str	r2, [r3, #0]
9000c46e:	f04f 30ff 	mov.w	r0, #4294967295
9000c472:	4770      	bx	lr
9000c474:	20010bec 	.word	0x20010bec

9000c478 <_fstat>:
9000c478:	4b02      	ldr	r3, [pc, #8]	; (9000c484 <_fstat+0xc>)
9000c47a:	2258      	movs	r2, #88	; 0x58
9000c47c:	601a      	str	r2, [r3, #0]
9000c47e:	f04f 30ff 	mov.w	r0, #4294967295
9000c482:	4770      	bx	lr
9000c484:	20010bec 	.word	0x20010bec

9000c488 <_isatty>:
9000c488:	4b02      	ldr	r3, [pc, #8]	; (9000c494 <_isatty+0xc>)
9000c48a:	2258      	movs	r2, #88	; 0x58
9000c48c:	601a      	str	r2, [r3, #0]
9000c48e:	2000      	movs	r0, #0
9000c490:	4770      	bx	lr
9000c492:	bf00      	nop
9000c494:	20010bec 	.word	0x20010bec

9000c498 <_lseek>:
9000c498:	4b02      	ldr	r3, [pc, #8]	; (9000c4a4 <_lseek+0xc>)
9000c49a:	2258      	movs	r2, #88	; 0x58
9000c49c:	601a      	str	r2, [r3, #0]
9000c49e:	f04f 30ff 	mov.w	r0, #4294967295
9000c4a2:	4770      	bx	lr
9000c4a4:	20010bec 	.word	0x20010bec

9000c4a8 <_read>:
9000c4a8:	4b02      	ldr	r3, [pc, #8]	; (9000c4b4 <_read+0xc>)
9000c4aa:	2258      	movs	r2, #88	; 0x58
9000c4ac:	601a      	str	r2, [r3, #0]
9000c4ae:	f04f 30ff 	mov.w	r0, #4294967295
9000c4b2:	4770      	bx	lr
9000c4b4:	20010bec 	.word	0x20010bec

9000c4b8 <_sbrk>:
9000c4b8:	4a04      	ldr	r2, [pc, #16]	; (9000c4cc <_sbrk+0x14>)
9000c4ba:	6811      	ldr	r1, [r2, #0]
9000c4bc:	4603      	mov	r3, r0
9000c4be:	b909      	cbnz	r1, 9000c4c4 <_sbrk+0xc>
9000c4c0:	4903      	ldr	r1, [pc, #12]	; (9000c4d0 <_sbrk+0x18>)
9000c4c2:	6011      	str	r1, [r2, #0]
9000c4c4:	6810      	ldr	r0, [r2, #0]
9000c4c6:	4403      	add	r3, r0
9000c4c8:	6013      	str	r3, [r2, #0]
9000c4ca:	4770      	bx	lr
9000c4cc:	20010bf4 	.word	0x20010bf4
9000c4d0:	20010bf8 	.word	0x20010bf8

9000c4d4 <_write>:
9000c4d4:	4b02      	ldr	r3, [pc, #8]	; (9000c4e0 <_write+0xc>)
9000c4d6:	2258      	movs	r2, #88	; 0x58
9000c4d8:	601a      	str	r2, [r3, #0]
9000c4da:	f04f 30ff 	mov.w	r0, #4294967295
9000c4de:	4770      	bx	lr
9000c4e0:	20010bec 	.word	0x20010bec

9000c4e4 <_init>:
9000c4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c4e6:	bf00      	nop
9000c4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000c4ea:	bc08      	pop	{r3}
9000c4ec:	469e      	mov	lr, r3
9000c4ee:	4770      	bx	lr

9000c4f0 <_fini>:
9000c4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c4f2:	bf00      	nop
9000c4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000c4f6:	bc08      	pop	{r3}
9000c4f8:	469e      	mov	lr, r3
9000c4fa:	4770      	bx	lr
