
AudioLinkSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b678  900001d0  900001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000502c  9000b848  9000b848  0001b848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  90010874  90010874  00020874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  9001087c  9001087c  0002087c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90010880  90010880  00020880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000011c  20000000  90010884  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00014b78  2000011c  900109a0  0003011c  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  20014c94  900109a0  00034c94  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00039787  00000000  00000000  0003018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008435  00000000  00000000  00069916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00015c93  00000000  00000000  00071d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b70  00000000  00000000  000879e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e05  00000000  00000000  00089550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002faac  00000000  00000000  0008b355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035ac4  00000000  00000000  000bae01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001073a4  00000000  00000000  000f08c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00005bbc  00000000  00000000  001f7c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005f  00000000  00000000  001fd828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001d0 <__do_global_dtors_aux>:
900001d0:	b510      	push	{r4, lr}
900001d2:	4c05      	ldr	r4, [pc, #20]	; (900001e8 <__do_global_dtors_aux+0x18>)
900001d4:	7823      	ldrb	r3, [r4, #0]
900001d6:	b933      	cbnz	r3, 900001e6 <__do_global_dtors_aux+0x16>
900001d8:	4b04      	ldr	r3, [pc, #16]	; (900001ec <__do_global_dtors_aux+0x1c>)
900001da:	b113      	cbz	r3, 900001e2 <__do_global_dtors_aux+0x12>
900001dc:	4804      	ldr	r0, [pc, #16]	; (900001f0 <__do_global_dtors_aux+0x20>)
900001de:	f3af 8000 	nop.w
900001e2:	2301      	movs	r3, #1
900001e4:	7023      	strb	r3, [r4, #0]
900001e6:	bd10      	pop	{r4, pc}
900001e8:	2000011c 	.word	0x2000011c
900001ec:	00000000 	.word	0x00000000
900001f0:	9000b830 	.word	0x9000b830

900001f4 <frame_dummy>:
900001f4:	b508      	push	{r3, lr}
900001f6:	4b03      	ldr	r3, [pc, #12]	; (90000204 <frame_dummy+0x10>)
900001f8:	b11b      	cbz	r3, 90000202 <frame_dummy+0xe>
900001fa:	4903      	ldr	r1, [pc, #12]	; (90000208 <frame_dummy+0x14>)
900001fc:	4803      	ldr	r0, [pc, #12]	; (9000020c <frame_dummy+0x18>)
900001fe:	f3af 8000 	nop.w
90000202:	bd08      	pop	{r3, pc}
90000204:	00000000 	.word	0x00000000
90000208:	20000120 	.word	0x20000120
9000020c:	9000b830 	.word	0x9000b830

90000210 <memchr>:
90000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000214:	2a10      	cmp	r2, #16
90000216:	db2b      	blt.n	90000270 <memchr+0x60>
90000218:	f010 0f07 	tst.w	r0, #7
9000021c:	d008      	beq.n	90000230 <memchr+0x20>
9000021e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000222:	3a01      	subs	r2, #1
90000224:	428b      	cmp	r3, r1
90000226:	d02d      	beq.n	90000284 <memchr+0x74>
90000228:	f010 0f07 	tst.w	r0, #7
9000022c:	b342      	cbz	r2, 90000280 <memchr+0x70>
9000022e:	d1f6      	bne.n	9000021e <memchr+0xe>
90000230:	b4f0      	push	{r4, r5, r6, r7}
90000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000023a:	f022 0407 	bic.w	r4, r2, #7
9000023e:	f07f 0700 	mvns.w	r7, #0
90000242:	2300      	movs	r3, #0
90000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000248:	3c08      	subs	r4, #8
9000024a:	ea85 0501 	eor.w	r5, r5, r1
9000024e:	ea86 0601 	eor.w	r6, r6, r1
90000252:	fa85 f547 	uadd8	r5, r5, r7
90000256:	faa3 f587 	sel	r5, r3, r7
9000025a:	fa86 f647 	uadd8	r6, r6, r7
9000025e:	faa5 f687 	sel	r6, r5, r7
90000262:	b98e      	cbnz	r6, 90000288 <memchr+0x78>
90000264:	d1ee      	bne.n	90000244 <memchr+0x34>
90000266:	bcf0      	pop	{r4, r5, r6, r7}
90000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000026c:	f002 0207 	and.w	r2, r2, #7
90000270:	b132      	cbz	r2, 90000280 <memchr+0x70>
90000272:	f810 3b01 	ldrb.w	r3, [r0], #1
90000276:	3a01      	subs	r2, #1
90000278:	ea83 0301 	eor.w	r3, r3, r1
9000027c:	b113      	cbz	r3, 90000284 <memchr+0x74>
9000027e:	d1f8      	bne.n	90000272 <memchr+0x62>
90000280:	2000      	movs	r0, #0
90000282:	4770      	bx	lr
90000284:	3801      	subs	r0, #1
90000286:	4770      	bx	lr
90000288:	2d00      	cmp	r5, #0
9000028a:	bf06      	itte	eq
9000028c:	4635      	moveq	r5, r6
9000028e:	3803      	subeq	r0, #3
90000290:	3807      	subne	r0, #7
90000292:	f015 0f01 	tst.w	r5, #1
90000296:	d107      	bne.n	900002a8 <memchr+0x98>
90000298:	3001      	adds	r0, #1
9000029a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000029e:	bf02      	ittt	eq
900002a0:	3001      	addeq	r0, #1
900002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900002a6:	3001      	addeq	r0, #1
900002a8:	bcf0      	pop	{r4, r5, r6, r7}
900002aa:	3801      	subs	r0, #1
900002ac:	4770      	bx	lr
900002ae:	bf00      	nop

900002b0 <__aeabi_uldivmod>:
900002b0:	b953      	cbnz	r3, 900002c8 <__aeabi_uldivmod+0x18>
900002b2:	b94a      	cbnz	r2, 900002c8 <__aeabi_uldivmod+0x18>
900002b4:	2900      	cmp	r1, #0
900002b6:	bf08      	it	eq
900002b8:	2800      	cmpeq	r0, #0
900002ba:	bf1c      	itt	ne
900002bc:	f04f 31ff 	movne.w	r1, #4294967295
900002c0:	f04f 30ff 	movne.w	r0, #4294967295
900002c4:	f000 b970 	b.w	900005a8 <__aeabi_idiv0>
900002c8:	f1ad 0c08 	sub.w	ip, sp, #8
900002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900002d0:	f000 f806 	bl	900002e0 <__udivmoddi4>
900002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
900002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900002dc:	b004      	add	sp, #16
900002de:	4770      	bx	lr

900002e0 <__udivmoddi4>:
900002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900002e4:	9e08      	ldr	r6, [sp, #32]
900002e6:	460d      	mov	r5, r1
900002e8:	4604      	mov	r4, r0
900002ea:	460f      	mov	r7, r1
900002ec:	2b00      	cmp	r3, #0
900002ee:	d14a      	bne.n	90000386 <__udivmoddi4+0xa6>
900002f0:	428a      	cmp	r2, r1
900002f2:	4694      	mov	ip, r2
900002f4:	d965      	bls.n	900003c2 <__udivmoddi4+0xe2>
900002f6:	fab2 f382 	clz	r3, r2
900002fa:	b143      	cbz	r3, 9000030e <__udivmoddi4+0x2e>
900002fc:	fa02 fc03 	lsl.w	ip, r2, r3
90000300:	f1c3 0220 	rsb	r2, r3, #32
90000304:	409f      	lsls	r7, r3
90000306:	fa20 f202 	lsr.w	r2, r0, r2
9000030a:	4317      	orrs	r7, r2
9000030c:	409c      	lsls	r4, r3
9000030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
90000312:	fa1f f58c 	uxth.w	r5, ip
90000316:	fbb7 f1fe 	udiv	r1, r7, lr
9000031a:	0c22      	lsrs	r2, r4, #16
9000031c:	fb0e 7711 	mls	r7, lr, r1, r7
90000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
90000324:	fb01 f005 	mul.w	r0, r1, r5
90000328:	4290      	cmp	r0, r2
9000032a:	d90a      	bls.n	90000342 <__udivmoddi4+0x62>
9000032c:	eb1c 0202 	adds.w	r2, ip, r2
90000330:	f101 37ff 	add.w	r7, r1, #4294967295
90000334:	f080 811c 	bcs.w	90000570 <__udivmoddi4+0x290>
90000338:	4290      	cmp	r0, r2
9000033a:	f240 8119 	bls.w	90000570 <__udivmoddi4+0x290>
9000033e:	3902      	subs	r1, #2
90000340:	4462      	add	r2, ip
90000342:	1a12      	subs	r2, r2, r0
90000344:	b2a4      	uxth	r4, r4
90000346:	fbb2 f0fe 	udiv	r0, r2, lr
9000034a:	fb0e 2210 	mls	r2, lr, r0, r2
9000034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
90000352:	fb00 f505 	mul.w	r5, r0, r5
90000356:	42a5      	cmp	r5, r4
90000358:	d90a      	bls.n	90000370 <__udivmoddi4+0x90>
9000035a:	eb1c 0404 	adds.w	r4, ip, r4
9000035e:	f100 32ff 	add.w	r2, r0, #4294967295
90000362:	f080 8107 	bcs.w	90000574 <__udivmoddi4+0x294>
90000366:	42a5      	cmp	r5, r4
90000368:	f240 8104 	bls.w	90000574 <__udivmoddi4+0x294>
9000036c:	4464      	add	r4, ip
9000036e:	3802      	subs	r0, #2
90000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000374:	1b64      	subs	r4, r4, r5
90000376:	2100      	movs	r1, #0
90000378:	b11e      	cbz	r6, 90000382 <__udivmoddi4+0xa2>
9000037a:	40dc      	lsrs	r4, r3
9000037c:	2300      	movs	r3, #0
9000037e:	e9c6 4300 	strd	r4, r3, [r6]
90000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000386:	428b      	cmp	r3, r1
90000388:	d908      	bls.n	9000039c <__udivmoddi4+0xbc>
9000038a:	2e00      	cmp	r6, #0
9000038c:	f000 80ed 	beq.w	9000056a <__udivmoddi4+0x28a>
90000390:	2100      	movs	r1, #0
90000392:	e9c6 0500 	strd	r0, r5, [r6]
90000396:	4608      	mov	r0, r1
90000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000039c:	fab3 f183 	clz	r1, r3
900003a0:	2900      	cmp	r1, #0
900003a2:	d149      	bne.n	90000438 <__udivmoddi4+0x158>
900003a4:	42ab      	cmp	r3, r5
900003a6:	d302      	bcc.n	900003ae <__udivmoddi4+0xce>
900003a8:	4282      	cmp	r2, r0
900003aa:	f200 80f8 	bhi.w	9000059e <__udivmoddi4+0x2be>
900003ae:	1a84      	subs	r4, r0, r2
900003b0:	eb65 0203 	sbc.w	r2, r5, r3
900003b4:	2001      	movs	r0, #1
900003b6:	4617      	mov	r7, r2
900003b8:	2e00      	cmp	r6, #0
900003ba:	d0e2      	beq.n	90000382 <__udivmoddi4+0xa2>
900003bc:	e9c6 4700 	strd	r4, r7, [r6]
900003c0:	e7df      	b.n	90000382 <__udivmoddi4+0xa2>
900003c2:	b902      	cbnz	r2, 900003c6 <__udivmoddi4+0xe6>
900003c4:	deff      	udf	#255	; 0xff
900003c6:	fab2 f382 	clz	r3, r2
900003ca:	2b00      	cmp	r3, #0
900003cc:	f040 8090 	bne.w	900004f0 <__udivmoddi4+0x210>
900003d0:	1a8a      	subs	r2, r1, r2
900003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
900003d6:	fa1f fe8c 	uxth.w	lr, ip
900003da:	2101      	movs	r1, #1
900003dc:	fbb2 f5f7 	udiv	r5, r2, r7
900003e0:	fb07 2015 	mls	r0, r7, r5, r2
900003e4:	0c22      	lsrs	r2, r4, #16
900003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900003ea:	fb0e f005 	mul.w	r0, lr, r5
900003ee:	4290      	cmp	r0, r2
900003f0:	d908      	bls.n	90000404 <__udivmoddi4+0x124>
900003f2:	eb1c 0202 	adds.w	r2, ip, r2
900003f6:	f105 38ff 	add.w	r8, r5, #4294967295
900003fa:	d202      	bcs.n	90000402 <__udivmoddi4+0x122>
900003fc:	4290      	cmp	r0, r2
900003fe:	f200 80cb 	bhi.w	90000598 <__udivmoddi4+0x2b8>
90000402:	4645      	mov	r5, r8
90000404:	1a12      	subs	r2, r2, r0
90000406:	b2a4      	uxth	r4, r4
90000408:	fbb2 f0f7 	udiv	r0, r2, r7
9000040c:	fb07 2210 	mls	r2, r7, r0, r2
90000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
90000414:	fb0e fe00 	mul.w	lr, lr, r0
90000418:	45a6      	cmp	lr, r4
9000041a:	d908      	bls.n	9000042e <__udivmoddi4+0x14e>
9000041c:	eb1c 0404 	adds.w	r4, ip, r4
90000420:	f100 32ff 	add.w	r2, r0, #4294967295
90000424:	d202      	bcs.n	9000042c <__udivmoddi4+0x14c>
90000426:	45a6      	cmp	lr, r4
90000428:	f200 80bb 	bhi.w	900005a2 <__udivmoddi4+0x2c2>
9000042c:	4610      	mov	r0, r2
9000042e:	eba4 040e 	sub.w	r4, r4, lr
90000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
90000436:	e79f      	b.n	90000378 <__udivmoddi4+0x98>
90000438:	f1c1 0720 	rsb	r7, r1, #32
9000043c:	408b      	lsls	r3, r1
9000043e:	fa22 fc07 	lsr.w	ip, r2, r7
90000442:	ea4c 0c03 	orr.w	ip, ip, r3
90000446:	fa05 f401 	lsl.w	r4, r5, r1
9000044a:	fa20 f307 	lsr.w	r3, r0, r7
9000044e:	40fd      	lsrs	r5, r7
90000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
90000454:	4323      	orrs	r3, r4
90000456:	fbb5 f8f9 	udiv	r8, r5, r9
9000045a:	fa1f fe8c 	uxth.w	lr, ip
9000045e:	fb09 5518 	mls	r5, r9, r8, r5
90000462:	0c1c      	lsrs	r4, r3, #16
90000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
90000468:	fb08 f50e 	mul.w	r5, r8, lr
9000046c:	42a5      	cmp	r5, r4
9000046e:	fa02 f201 	lsl.w	r2, r2, r1
90000472:	fa00 f001 	lsl.w	r0, r0, r1
90000476:	d90b      	bls.n	90000490 <__udivmoddi4+0x1b0>
90000478:	eb1c 0404 	adds.w	r4, ip, r4
9000047c:	f108 3aff 	add.w	sl, r8, #4294967295
90000480:	f080 8088 	bcs.w	90000594 <__udivmoddi4+0x2b4>
90000484:	42a5      	cmp	r5, r4
90000486:	f240 8085 	bls.w	90000594 <__udivmoddi4+0x2b4>
9000048a:	f1a8 0802 	sub.w	r8, r8, #2
9000048e:	4464      	add	r4, ip
90000490:	1b64      	subs	r4, r4, r5
90000492:	b29d      	uxth	r5, r3
90000494:	fbb4 f3f9 	udiv	r3, r4, r9
90000498:	fb09 4413 	mls	r4, r9, r3, r4
9000049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
900004a0:	fb03 fe0e 	mul.w	lr, r3, lr
900004a4:	45a6      	cmp	lr, r4
900004a6:	d908      	bls.n	900004ba <__udivmoddi4+0x1da>
900004a8:	eb1c 0404 	adds.w	r4, ip, r4
900004ac:	f103 35ff 	add.w	r5, r3, #4294967295
900004b0:	d26c      	bcs.n	9000058c <__udivmoddi4+0x2ac>
900004b2:	45a6      	cmp	lr, r4
900004b4:	d96a      	bls.n	9000058c <__udivmoddi4+0x2ac>
900004b6:	3b02      	subs	r3, #2
900004b8:	4464      	add	r4, ip
900004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900004be:	fba3 9502 	umull	r9, r5, r3, r2
900004c2:	eba4 040e 	sub.w	r4, r4, lr
900004c6:	42ac      	cmp	r4, r5
900004c8:	46c8      	mov	r8, r9
900004ca:	46ae      	mov	lr, r5
900004cc:	d356      	bcc.n	9000057c <__udivmoddi4+0x29c>
900004ce:	d053      	beq.n	90000578 <__udivmoddi4+0x298>
900004d0:	b156      	cbz	r6, 900004e8 <__udivmoddi4+0x208>
900004d2:	ebb0 0208 	subs.w	r2, r0, r8
900004d6:	eb64 040e 	sbc.w	r4, r4, lr
900004da:	fa04 f707 	lsl.w	r7, r4, r7
900004de:	40ca      	lsrs	r2, r1
900004e0:	40cc      	lsrs	r4, r1
900004e2:	4317      	orrs	r7, r2
900004e4:	e9c6 7400 	strd	r7, r4, [r6]
900004e8:	4618      	mov	r0, r3
900004ea:	2100      	movs	r1, #0
900004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900004f0:	f1c3 0120 	rsb	r1, r3, #32
900004f4:	fa02 fc03 	lsl.w	ip, r2, r3
900004f8:	fa20 f201 	lsr.w	r2, r0, r1
900004fc:	fa25 f101 	lsr.w	r1, r5, r1
90000500:	409d      	lsls	r5, r3
90000502:	432a      	orrs	r2, r5
90000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000508:	fa1f fe8c 	uxth.w	lr, ip
9000050c:	fbb1 f0f7 	udiv	r0, r1, r7
90000510:	fb07 1510 	mls	r5, r7, r0, r1
90000514:	0c11      	lsrs	r1, r2, #16
90000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
9000051a:	fb00 f50e 	mul.w	r5, r0, lr
9000051e:	428d      	cmp	r5, r1
90000520:	fa04 f403 	lsl.w	r4, r4, r3
90000524:	d908      	bls.n	90000538 <__udivmoddi4+0x258>
90000526:	eb1c 0101 	adds.w	r1, ip, r1
9000052a:	f100 38ff 	add.w	r8, r0, #4294967295
9000052e:	d22f      	bcs.n	90000590 <__udivmoddi4+0x2b0>
90000530:	428d      	cmp	r5, r1
90000532:	d92d      	bls.n	90000590 <__udivmoddi4+0x2b0>
90000534:	3802      	subs	r0, #2
90000536:	4461      	add	r1, ip
90000538:	1b49      	subs	r1, r1, r5
9000053a:	b292      	uxth	r2, r2
9000053c:	fbb1 f5f7 	udiv	r5, r1, r7
90000540:	fb07 1115 	mls	r1, r7, r5, r1
90000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90000548:	fb05 f10e 	mul.w	r1, r5, lr
9000054c:	4291      	cmp	r1, r2
9000054e:	d908      	bls.n	90000562 <__udivmoddi4+0x282>
90000550:	eb1c 0202 	adds.w	r2, ip, r2
90000554:	f105 38ff 	add.w	r8, r5, #4294967295
90000558:	d216      	bcs.n	90000588 <__udivmoddi4+0x2a8>
9000055a:	4291      	cmp	r1, r2
9000055c:	d914      	bls.n	90000588 <__udivmoddi4+0x2a8>
9000055e:	3d02      	subs	r5, #2
90000560:	4462      	add	r2, ip
90000562:	1a52      	subs	r2, r2, r1
90000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
90000568:	e738      	b.n	900003dc <__udivmoddi4+0xfc>
9000056a:	4631      	mov	r1, r6
9000056c:	4630      	mov	r0, r6
9000056e:	e708      	b.n	90000382 <__udivmoddi4+0xa2>
90000570:	4639      	mov	r1, r7
90000572:	e6e6      	b.n	90000342 <__udivmoddi4+0x62>
90000574:	4610      	mov	r0, r2
90000576:	e6fb      	b.n	90000370 <__udivmoddi4+0x90>
90000578:	4548      	cmp	r0, r9
9000057a:	d2a9      	bcs.n	900004d0 <__udivmoddi4+0x1f0>
9000057c:	ebb9 0802 	subs.w	r8, r9, r2
90000580:	eb65 0e0c 	sbc.w	lr, r5, ip
90000584:	3b01      	subs	r3, #1
90000586:	e7a3      	b.n	900004d0 <__udivmoddi4+0x1f0>
90000588:	4645      	mov	r5, r8
9000058a:	e7ea      	b.n	90000562 <__udivmoddi4+0x282>
9000058c:	462b      	mov	r3, r5
9000058e:	e794      	b.n	900004ba <__udivmoddi4+0x1da>
90000590:	4640      	mov	r0, r8
90000592:	e7d1      	b.n	90000538 <__udivmoddi4+0x258>
90000594:	46d0      	mov	r8, sl
90000596:	e77b      	b.n	90000490 <__udivmoddi4+0x1b0>
90000598:	3d02      	subs	r5, #2
9000059a:	4462      	add	r2, ip
9000059c:	e732      	b.n	90000404 <__udivmoddi4+0x124>
9000059e:	4608      	mov	r0, r1
900005a0:	e70a      	b.n	900003b8 <__udivmoddi4+0xd8>
900005a2:	4464      	add	r4, ip
900005a4:	3802      	subs	r0, #2
900005a6:	e742      	b.n	9000042e <__udivmoddi4+0x14e>

900005a8 <__aeabi_idiv0>:
900005a8:	4770      	bx	lr
900005aa:	bf00      	nop

900005ac <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
900005ac:	4770      	bx	lr

900005ae <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
900005ae:	2000      	movs	r0, #0
900005b0:	4770      	bx	lr
	...

900005b4 <ft5336_Init>:
{
900005b4:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
900005b6:	4c05      	ldr	r4, [pc, #20]	; (900005cc <ft5336_Init+0x18>)
  TS_IO_Delay(200);
900005b8:	20c8      	movs	r0, #200	; 0xc8
900005ba:	f001 fc8f 	bl	90001edc <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
900005be:	7823      	ldrb	r3, [r4, #0]
900005c0:	b91b      	cbnz	r3, 900005ca <ft5336_Init+0x16>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
900005c2:	f001 fc61 	bl	90001e88 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
900005c6:	2301      	movs	r3, #1
900005c8:	7023      	strb	r3, [r4, #0]
}
900005ca:	bd10      	pop	{r4, pc}
900005cc:	20000138 	.word	0x20000138

900005d0 <ft5336_TS_DetectTouch>:
{
900005d0:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
900005d2:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
900005d4:	2102      	movs	r1, #2
900005d6:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
900005d8:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
900005dc:	f001 fc68 	bl	90001eb0 <TS_IO_Read>
900005e0:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
900005e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
900005e8:	f003 030f 	and.w	r3, r3, #15
900005ec:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
900005f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
900005f4:	2b05      	cmp	r3, #5
900005f6:	d901      	bls.n	900005fc <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
900005f8:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
900005fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
90000600:	4b03      	ldr	r3, [pc, #12]	; (90000610 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
90000602:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
90000606:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
90000608:	2200      	movs	r2, #0
9000060a:	709a      	strb	r2, [r3, #2]
}
9000060c:	b002      	add	sp, #8
9000060e:	bd10      	pop	{r4, pc}
90000610:	20000138 	.word	0x20000138

90000614 <ft5336_TS_GetXY>:
{
90000614:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90000618:	4c2b      	ldr	r4, [pc, #172]	; (900006c8 <ft5336_TS_GetXY+0xb4>)
{
9000061a:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
9000061c:	f04f 0800 	mov.w	r8, #0
{
90000620:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90000622:	78a3      	ldrb	r3, [r4, #2]
90000624:	7862      	ldrb	r2, [r4, #1]
  volatile uint8_t ucReadData = 0;
90000626:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
9000062a:	429a      	cmp	r2, r3
9000062c:	d945      	bls.n	900006ba <ft5336_TS_GetXY+0xa6>
    switch(ft5336_handle.currActiveTouchIdx)
9000062e:	2b09      	cmp	r3, #9
90000630:	d846      	bhi.n	900006c0 <ft5336_TS_GetXY+0xac>
90000632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
90000636:	005b      	lsls	r3, r3, #1
90000638:	b2db      	uxtb	r3, r3
9000063a:	1d19      	adds	r1, r3, #4
9000063c:	f103 0a03 	add.w	sl, r3, #3
90000640:	f103 0906 	add.w	r9, r3, #6
90000644:	3305      	adds	r3, #5
90000646:	b2c9      	uxtb	r1, r1
90000648:	fa5f fa8a 	uxtb.w	sl, sl
9000064c:	fa5f f989 	uxtb.w	r9, r9
90000650:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
90000654:	b2c6      	uxtb	r6, r0
90000656:	4630      	mov	r0, r6
90000658:	f001 fc2a 	bl	90001eb0 <TS_IO_Read>
9000065c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000660:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
90000664:	4651      	mov	r1, sl
90000666:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000668:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
9000066a:	f001 fc21 	bl	90001eb0 <TS_IO_Read>
9000066e:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000672:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000674:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000678:	4630      	mov	r0, r6
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
9000067a:	88a2      	ldrh	r2, [r4, #4]
9000067c:	021b      	lsls	r3, r3, #8
9000067e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90000682:	4313      	orrs	r3, r2
    *X = coord;
90000684:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000686:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000688:	f001 fc12 	bl	90001eb0 <TS_IO_Read>
9000068c:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
90000690:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000692:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
90000696:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000698:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
9000069a:	f001 fc09 	bl	90001eb0 <TS_IO_Read>
9000069e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
900006a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
900006a6:	88a2      	ldrh	r2, [r4, #4]
900006a8:	021b      	lsls	r3, r3, #8
900006aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
900006ae:	4313      	orrs	r3, r2
900006b0:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
900006b2:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
900006b4:	78a3      	ldrb	r3, [r4, #2]
900006b6:	3301      	adds	r3, #1
900006b8:	70a3      	strb	r3, [r4, #2]
}
900006ba:	b002      	add	sp, #8
900006bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
900006c0:	46c1      	mov	r9, r8
900006c2:	46c2      	mov	sl, r8
900006c4:	4641      	mov	r1, r8
900006c6:	e7c5      	b.n	90000654 <ft5336_TS_GetXY+0x40>
900006c8:	20000138 	.word	0x20000138

900006cc <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
900006cc:	2201      	movs	r2, #1
900006ce:	21a4      	movs	r1, #164	; 0xa4
900006d0:	b2c0      	uxtb	r0, r0
900006d2:	f001 bbdb 	b.w	90001e8c <TS_IO_Write>

900006d6 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
900006d6:	2200      	movs	r2, #0
900006d8:	21a4      	movs	r1, #164	; 0xa4
900006da:	b2c0      	uxtb	r0, r0
900006dc:	f001 bbd6 	b.w	90001e8c <TS_IO_Write>

900006e0 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
900006e0:	f7ff bff9 	b.w	900006d6 <ft5336_TS_DisableIT>

900006e4 <ft5336_TS_ClearIT>:
900006e4:	4770      	bx	lr
	...

900006e8 <ft5336_ReadID>:
{
900006e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
900006ea:	2300      	movs	r3, #0
  return(ft5336_handle.i2cInitialized);
900006ec:	4c0f      	ldr	r4, [pc, #60]	; (9000072c <ft5336_ReadID+0x44>)
{
900006ee:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
900006f0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
900006f4:	7823      	ldrb	r3, [r4, #0]
900006f6:	b91b      	cbnz	r3, 90000700 <ft5336_ReadID+0x18>
    TS_IO_Init();
900006f8:	f001 fbc6 	bl	90001e88 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
900006fc:	2301      	movs	r3, #1
900006fe:	7023      	strb	r3, [r4, #0]
{
90000700:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000702:	b2ed      	uxtb	r5, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
90000704:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000706:	21a8      	movs	r1, #168	; 0xa8
90000708:	4628      	mov	r0, r5
9000070a:	f001 fbd1 	bl	90001eb0 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
9000070e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000712:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
90000716:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000071a:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
9000071c:	d103      	bne.n	90000726 <ft5336_ReadID+0x3e>
  return (ucReadId);
9000071e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
90000722:	b003      	add	sp, #12
90000724:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
90000726:	2b51      	cmp	r3, #81	; 0x51
90000728:	d1ec      	bne.n	90000704 <ft5336_ReadID+0x1c>
9000072a:	e7f8      	b.n	9000071e <ft5336_ReadID+0x36>
9000072c:	20000138 	.word	0x20000138

90000730 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
90000730:	2300      	movs	r3, #0
{
90000732:	b513      	push	{r0, r1, r4, lr}
90000734:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
90000736:	b2c0      	uxtb	r0, r0
90000738:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
9000073a:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
9000073e:	f001 fbb7 	bl	90001eb0 <TS_IO_Read>
90000742:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
90000746:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000074a:	6023      	str	r3, [r4, #0]
}
9000074c:	b002      	add	sp, #8
9000074e:	bd10      	pop	{r4, pc}

90000750 <ft5336_TS_GetTouchInfo>:
{
90000750:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90000754:	461d      	mov	r5, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
90000756:	4b1d      	ldr	r3, [pc, #116]	; (900007cc <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
90000758:	2400      	movs	r4, #0
{
9000075a:	4616      	mov	r6, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
9000075c:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
9000075e:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
90000762:	428b      	cmp	r3, r1
90000764:	d92c      	bls.n	900007c0 <ft5336_TS_GetTouchInfo+0x70>
    switch(touchIdx)
90000766:	2909      	cmp	r1, #9
90000768:	d82d      	bhi.n	900007c6 <ft5336_TS_GetTouchInfo+0x76>
9000076a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000076e:	004c      	lsls	r4, r1, #1
90000770:	b2e4      	uxtb	r4, r4
90000772:	1ce1      	adds	r1, r4, #3
90000774:	1de7      	adds	r7, r4, #7
90000776:	3408      	adds	r4, #8
90000778:	b2c9      	uxtb	r1, r1
9000077a:	b2ff      	uxtb	r7, r7
9000077c:	b2e4      	uxtb	r4, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
9000077e:	fa5f f880 	uxtb.w	r8, r0
90000782:	4640      	mov	r0, r8
90000784:	f001 fb94 	bl	90001eb0 <TS_IO_Read>
90000788:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
9000078c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
90000790:	4639      	mov	r1, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
90000792:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
90000794:	4640      	mov	r0, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
90000796:	099b      	lsrs	r3, r3, #6
90000798:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
9000079a:	f001 fb89 	bl	90001eb0 <TS_IO_Read>
9000079e:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
900007a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
900007a6:	4621      	mov	r1, r4
900007a8:	4640      	mov	r0, r8
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
900007aa:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
900007ac:	f001 fb80 	bl	90001eb0 <TS_IO_Read>
900007b0:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
900007b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
900007b8:	0912      	lsrs	r2, r2, #4
900007ba:	f002 0204 	and.w	r2, r2, #4
900007be:	602a      	str	r2, [r5, #0]
}
900007c0:	b002      	add	sp, #8
900007c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
900007c6:	4627      	mov	r7, r4
900007c8:	4621      	mov	r1, r4
900007ca:	e7d8      	b.n	9000077e <ft5336_TS_GetTouchInfo+0x2e>
900007cc:	20000138 	.word	0x20000138

900007d0 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
900007d0:	2901      	cmp	r1, #1
{
900007d2:	b507      	push	{r0, r1, r2, lr}
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
900007d4:	b2c0      	uxtb	r0, r0
  switch (Output) 
900007d6:	d00f      	beq.n	900007f8 <wm8994_SetOutputMode+0x28>
900007d8:	2903      	cmp	r1, #3
900007da:	d12f      	bne.n	9000083c <wm8994_SetOutputMode+0x6c>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
900007dc:	f640 720f 	movw	r2, #3855	; 0xf0f
900007e0:	2105      	movs	r1, #5
900007e2:	9001      	str	r0, [sp, #4]
900007e4:	f001 fb22 	bl	90001e2c <AUDIO_IO_Write>
900007e8:	2201      	movs	r2, #1
900007ea:	f240 6101 	movw	r1, #1537	; 0x601
900007ee:	9801      	ldr	r0, [sp, #4]
900007f0:	f001 fb1c 	bl	90001e2c <AUDIO_IO_Write>
900007f4:	2201      	movs	r2, #1
900007f6:	e00c      	b.n	90000812 <wm8994_SetOutputMode+0x42>
900007f8:	f640 420c 	movw	r2, #3084	; 0xc0c
900007fc:	2105      	movs	r1, #5
900007fe:	9001      	str	r0, [sp, #4]
90000800:	f001 fb14 	bl	90001e2c <AUDIO_IO_Write>
90000804:	2200      	movs	r2, #0
90000806:	f240 6101 	movw	r1, #1537	; 0x601
9000080a:	9801      	ldr	r0, [sp, #4]
9000080c:	f001 fb0e 	bl	90001e2c <AUDIO_IO_Write>
90000810:	2200      	movs	r2, #0
90000812:	f240 6102 	movw	r1, #1538	; 0x602
90000816:	9801      	ldr	r0, [sp, #4]
90000818:	f001 fb08 	bl	90001e2c <AUDIO_IO_Write>
9000081c:	2202      	movs	r2, #2
9000081e:	f240 6104 	movw	r1, #1540	; 0x604
90000822:	9801      	ldr	r0, [sp, #4]
90000824:	f001 fb02 	bl	90001e2c <AUDIO_IO_Write>
90000828:	2202      	movs	r2, #2
9000082a:	9801      	ldr	r0, [sp, #4]
9000082c:	f240 6105 	movw	r1, #1541	; 0x605
90000830:	f001 fafc 	bl	90001e2c <AUDIO_IO_Write>
}
90000834:	2000      	movs	r0, #0
90000836:	b003      	add	sp, #12
90000838:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
9000083c:	f240 3203 	movw	r2, #771	; 0x303
90000840:	2105      	movs	r1, #5
90000842:	9001      	str	r0, [sp, #4]
90000844:	f001 faf2 	bl	90001e2c <AUDIO_IO_Write>
90000848:	2201      	movs	r2, #1
9000084a:	f240 6101 	movw	r1, #1537	; 0x601
9000084e:	9801      	ldr	r0, [sp, #4]
90000850:	f001 faec 	bl	90001e2c <AUDIO_IO_Write>
90000854:	2201      	movs	r2, #1
90000856:	f240 6102 	movw	r1, #1538	; 0x602
9000085a:	9801      	ldr	r0, [sp, #4]
9000085c:	f001 fae6 	bl	90001e2c <AUDIO_IO_Write>
90000860:	2200      	movs	r2, #0
90000862:	f240 6104 	movw	r1, #1540	; 0x604
90000866:	9801      	ldr	r0, [sp, #4]
90000868:	f001 fae0 	bl	90001e2c <AUDIO_IO_Write>
9000086c:	2200      	movs	r2, #0
9000086e:	e7dc      	b.n	9000082a <wm8994_SetOutputMode+0x5a>

90000870 <wm8994_SetFrequency>:
{
90000870:	b508      	push	{r3, lr}
  switch (AudioFreq)
90000872:	f245 6322 	movw	r3, #22050	; 0x5622
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
90000876:	b2c0      	uxtb	r0, r0
  switch (AudioFreq)
90000878:	4299      	cmp	r1, r3
9000087a:	d025      	beq.n	900008c8 <wm8994_SetFrequency+0x58>
9000087c:	d80b      	bhi.n	90000896 <wm8994_SetFrequency+0x26>
9000087e:	f642 3311 	movw	r3, #11025	; 0x2b11
90000882:	4299      	cmp	r1, r3
90000884:	d01e      	beq.n	900008c4 <wm8994_SetFrequency+0x54>
90000886:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
9000088a:	d017      	beq.n	900008bc <wm8994_SetFrequency+0x4c>
9000088c:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
90000890:	d00d      	beq.n	900008ae <wm8994_SetFrequency+0x3e>
 AUDIO_IO_Write(Addr, Reg, Value);
90000892:	2283      	movs	r2, #131	; 0x83
90000894:	e00c      	b.n	900008b0 <wm8994_SetFrequency+0x40>
  switch (AudioFreq)
90000896:	f64a 4344 	movw	r3, #44100	; 0xac44
9000089a:	4299      	cmp	r1, r3
9000089c:	d016      	beq.n	900008cc <wm8994_SetFrequency+0x5c>
9000089e:	4b0c      	ldr	r3, [pc, #48]	; (900008d0 <wm8994_SetFrequency+0x60>)
900008a0:	4299      	cmp	r1, r3
900008a2:	d00d      	beq.n	900008c0 <wm8994_SetFrequency+0x50>
900008a4:	f5b1 4ffa 	cmp.w	r1, #32000	; 0x7d00
900008a8:	d1f3      	bne.n	90000892 <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
900008aa:	2263      	movs	r2, #99	; 0x63
900008ac:	e000      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008ae:	2203      	movs	r2, #3
900008b0:	f44f 7104 	mov.w	r1, #528	; 0x210
900008b4:	f001 faba 	bl	90001e2c <AUDIO_IO_Write>
}
900008b8:	2000      	movs	r0, #0
900008ba:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
900008bc:	2233      	movs	r2, #51	; 0x33
900008be:	e7f7      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c0:	22a3      	movs	r2, #163	; 0xa3
900008c2:	e7f5      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c4:	2213      	movs	r2, #19
900008c6:	e7f3      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c8:	2243      	movs	r2, #67	; 0x43
900008ca:	e7f1      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008cc:	2273      	movs	r2, #115	; 0x73
900008ce:	e7ef      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008d0:	00017700 	.word	0x00017700

900008d4 <wm8994_Reset>:
900008d4:	2200      	movs	r2, #0
900008d6:	b2c0      	uxtb	r0, r0
{
900008d8:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
900008da:	4611      	mov	r1, r2
900008dc:	f001 faa6 	bl	90001e2c <AUDIO_IO_Write>
  outputEnabled = 0;
900008e0:	4b02      	ldr	r3, [pc, #8]	; (900008ec <wm8994_Reset+0x18>)
900008e2:	2000      	movs	r0, #0
  inputEnabled=0;
900008e4:	e9c3 0000 	strd	r0, r0, [r3]
}
900008e8:	bd08      	pop	{r3, pc}
900008ea:	bf00      	nop
900008ec:	20000140 	.word	0x20000140

900008f0 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
900008f0:	f001 ba9a 	b.w	90001e28 <AUDIO_IO_DeInit>

900008f4 <wm8994_ReadID>:
{
900008f4:	b510      	push	{r4, lr}
900008f6:	4604      	mov	r4, r0
  AUDIO_IO_Init();
900008f8:	f001 fa90 	bl	90001e1c <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
900008fc:	2100      	movs	r1, #0
900008fe:	b2e0      	uxtb	r0, r4
90000900:	f001 faa8 	bl	90001e54 <AUDIO_IO_Read>
}
90000904:	bd10      	pop	{r4, pc}
	...

90000908 <wm8994_SetMute>:
  if (outputEnabled != 0)
90000908:	4b10      	ldr	r3, [pc, #64]	; (9000094c <wm8994_SetMute+0x44>)
9000090a:	681b      	ldr	r3, [r3, #0]
{
9000090c:	b507      	push	{r0, r1, r2, lr}
  if (outputEnabled != 0)
9000090e:	b183      	cbz	r3, 90000932 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
90000910:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
90000912:	b2c0      	uxtb	r0, r0
    if(Cmd == AUDIO_MUTE_ON)
90000914:	d111      	bne.n	9000093a <wm8994_SetMute+0x32>
 AUDIO_IO_Write(Addr, Reg, Value);
90000916:	f44f 7200 	mov.w	r2, #512	; 0x200
9000091a:	f44f 6184 	mov.w	r1, #1056	; 0x420
9000091e:	9001      	str	r0, [sp, #4]
90000920:	f001 fa84 	bl	90001e2c <AUDIO_IO_Write>
90000924:	f44f 7200 	mov.w	r2, #512	; 0x200
90000928:	f240 4122 	movw	r1, #1058	; 0x422
9000092c:	9801      	ldr	r0, [sp, #4]
9000092e:	f001 fa7d 	bl	90001e2c <AUDIO_IO_Write>
}
90000932:	2000      	movs	r0, #0
90000934:	b003      	add	sp, #12
90000936:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
9000093a:	2210      	movs	r2, #16
9000093c:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000940:	9001      	str	r0, [sp, #4]
90000942:	f001 fa73 	bl	90001e2c <AUDIO_IO_Write>
90000946:	2210      	movs	r2, #16
90000948:	e7ee      	b.n	90000928 <wm8994_SetMute+0x20>
9000094a:	bf00      	nop
9000094c:	20000140 	.word	0x20000140

90000950 <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000950:	2100      	movs	r1, #0
90000952:	f7ff bfd9 	b.w	90000908 <wm8994_SetMute>

90000956 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000956:	2100      	movs	r1, #0
90000958:	f7ff bfd6 	b.w	90000908 <wm8994_SetMute>

9000095c <wm8994_Pause>:
{  
9000095c:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
9000095e:	2101      	movs	r1, #1
{  
90000960:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000962:	f7ff ffd1 	bl	90000908 <wm8994_SetMute>
90000966:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
90000968:	2201      	movs	r2, #1
9000096a:	b2e8      	uxtb	r0, r5
9000096c:	2102      	movs	r1, #2
9000096e:	f001 fa5d 	bl	90001e2c <AUDIO_IO_Write>
}
90000972:	4620      	mov	r0, r4
90000974:	bd38      	pop	{r3, r4, r5, pc}
	...

90000978 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000978:	2964      	cmp	r1, #100	; 0x64
9000097a:	f04f 0264 	mov.w	r2, #100	; 0x64
9000097e:	bf98      	it	ls
90000980:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
{
90000984:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000988:	bf98      	it	ls
9000098a:	fbb3 f3f2 	udivls	r3, r3, r2
  if (outputEnabled != 0)
9000098e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 90000a7c <wm8994_SetVolume+0x104>
{
90000992:	4605      	mov	r5, r0
90000994:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000996:	bf98      	it	ls
90000998:	b2df      	uxtbls	r7, r3
  if (outputEnabled != 0)
9000099a:	f8d8 6000 	ldr.w	r6, [r8]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
9000099e:	bf88      	it	hi
900009a0:	4617      	movhi	r7, r2
  if (outputEnabled != 0)
900009a2:	b32e      	cbz	r6, 900009f0 <wm8994_SetVolume+0x78>
    if(convertedvol > 0x3E)
900009a4:	2f3e      	cmp	r7, #62	; 0x3e
900009a6:	d91d      	bls.n	900009e4 <wm8994_SetVolume+0x6c>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
900009a8:	2100      	movs	r1, #0
900009aa:	f7ff ffad 	bl	90000908 <wm8994_SetMute>
900009ae:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
900009b0:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
900009b2:	f240 127f 	movw	r2, #383	; 0x17f
900009b6:	211c      	movs	r1, #28
900009b8:	9000      	str	r0, [sp, #0]
900009ba:	f001 fa37 	bl	90001e2c <AUDIO_IO_Write>
900009be:	f240 127f 	movw	r2, #383	; 0x17f
900009c2:	211d      	movs	r1, #29
900009c4:	9800      	ldr	r0, [sp, #0]
900009c6:	f001 fa31 	bl	90001e2c <AUDIO_IO_Write>
900009ca:	f240 127f 	movw	r2, #383	; 0x17f
900009ce:	2126      	movs	r1, #38	; 0x26
900009d0:	9800      	ldr	r0, [sp, #0]
900009d2:	f001 fa2b 	bl	90001e2c <AUDIO_IO_Write>
900009d6:	f240 127f 	movw	r2, #383	; 0x17f
900009da:	2127      	movs	r1, #39	; 0x27
900009dc:	9800      	ldr	r0, [sp, #0]
900009de:	f001 fa25 	bl	90001e2c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
900009e2:	e005      	b.n	900009f0 <wm8994_SetVolume+0x78>
    else if (Volume == 0)
900009e4:	2900      	cmp	r1, #0
900009e6:	d130      	bne.n	90000a4a <wm8994_SetVolume+0xd2>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
900009e8:	2101      	movs	r1, #1
900009ea:	f7ff ff8d 	bl	90000908 <wm8994_SetMute>
900009ee:	4606      	mov	r6, r0
  if (inputEnabled != 0)
900009f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
900009f4:	b32b      	cbz	r3, 90000a42 <wm8994_SetVolume+0xca>
    convertedvol = VOLUME_IN_CONVERT(Volume);
900009f6:	2c63      	cmp	r4, #99	; 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
900009f8:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
900009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
900009fe:	bf9a      	itte	ls
90000a00:	ebc4 1204 	rsbls	r2, r4, r4, lsl #4
90000a04:	2364      	movls	r3, #100	; 0x64
90000a06:	22ef      	movhi	r2, #239	; 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
90000a08:	9000      	str	r0, [sp, #0]
    convertedvol = VOLUME_IN_CONVERT(Volume);
90000a0a:	bf9e      	ittt	ls
90000a0c:	0112      	lslls	r2, r2, #4
90000a0e:	fbb2 f2f3 	udivls	r2, r2, r3
90000a12:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
90000a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
90000a18:	9201      	str	r2, [sp, #4]
90000a1a:	f001 fa07 	bl	90001e2c <AUDIO_IO_Write>
90000a1e:	9a01      	ldr	r2, [sp, #4]
90000a20:	f240 4101 	movw	r1, #1025	; 0x401
90000a24:	9800      	ldr	r0, [sp, #0]
90000a26:	f001 fa01 	bl	90001e2c <AUDIO_IO_Write>
90000a2a:	9a01      	ldr	r2, [sp, #4]
90000a2c:	f240 4104 	movw	r1, #1028	; 0x404
90000a30:	9800      	ldr	r0, [sp, #0]
90000a32:	f001 f9fb 	bl	90001e2c <AUDIO_IO_Write>
90000a36:	9a01      	ldr	r2, [sp, #4]
90000a38:	f240 4105 	movw	r1, #1029	; 0x405
90000a3c:	9800      	ldr	r0, [sp, #0]
90000a3e:	f001 f9f5 	bl	90001e2c <AUDIO_IO_Write>
}
90000a42:	4630      	mov	r0, r6
90000a44:	b002      	add	sp, #8
90000a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000a4a:	2100      	movs	r1, #0
90000a4c:	f7ff ff5c 	bl	90000908 <wm8994_SetMute>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
90000a50:	f447 72a0 	orr.w	r2, r7, #320	; 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000a54:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
90000a56:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
90000a58:	211c      	movs	r1, #28
90000a5a:	9201      	str	r2, [sp, #4]
90000a5c:	9000      	str	r0, [sp, #0]
90000a5e:	f001 f9e5 	bl	90001e2c <AUDIO_IO_Write>
90000a62:	9a01      	ldr	r2, [sp, #4]
90000a64:	211d      	movs	r1, #29
90000a66:	9800      	ldr	r0, [sp, #0]
90000a68:	f001 f9e0 	bl	90001e2c <AUDIO_IO_Write>
90000a6c:	9a01      	ldr	r2, [sp, #4]
90000a6e:	2126      	movs	r1, #38	; 0x26
90000a70:	9800      	ldr	r0, [sp, #0]
90000a72:	f001 f9db 	bl	90001e2c <AUDIO_IO_Write>
90000a76:	9a01      	ldr	r2, [sp, #4]
90000a78:	e7af      	b.n	900009da <wm8994_SetVolume+0x62>
90000a7a:	bf00      	nop
90000a7c:	20000140 	.word	0x20000140

90000a80 <wm8994_Init>:
{
90000a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000a84:	4681      	mov	r9, r0
90000a86:	4698      	mov	r8, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
90000a88:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
{
90000a8c:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
90000a8e:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
90000a92:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
90000a94:	f001 f9c2 	bl	90001e1c <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
90000a98:	2203      	movs	r2, #3
90000a9a:	f44f 7181 	mov.w	r1, #258	; 0x102
90000a9e:	4620      	mov	r0, r4
90000aa0:	f001 f9c4 	bl	90001e2c <AUDIO_IO_Write>
90000aa4:	2200      	movs	r2, #0
90000aa6:	f640 0117 	movw	r1, #2071	; 0x817
90000aaa:	4620      	mov	r0, r4
90000aac:	f001 f9be 	bl	90001e2c <AUDIO_IO_Write>
90000ab0:	2200      	movs	r2, #0
90000ab2:	f44f 7181 	mov.w	r1, #258	; 0x102
90000ab6:	4620      	mov	r0, r4
90000ab8:	f001 f9b8 	bl	90001e2c <AUDIO_IO_Write>
90000abc:	226c      	movs	r2, #108	; 0x6c
90000abe:	2139      	movs	r1, #57	; 0x39
90000ac0:	4620      	mov	r0, r4
90000ac2:	f001 f9b3 	bl	90001e2c <AUDIO_IO_Write>
  if (input_device > 0)
90000ac6:	b3c5      	cbz	r5, 90000b3a <wm8994_Init+0xba>
 AUDIO_IO_Write(Addr, Reg, Value);
90000ac8:	2213      	movs	r2, #19
90000aca:	2101      	movs	r1, #1
90000acc:	4620      	mov	r0, r4
90000ace:	f001 f9ad 	bl	90001e2c <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
90000ad2:	2032      	movs	r0, #50	; 0x32
90000ad4:	f8df b4ec 	ldr.w	fp, [pc, #1260]	; 90000fc4 <wm8994_Init+0x544>
90000ad8:	f001 f9d4 	bl	90001e84 <AUDIO_IO_Delay>
  if (output_device > 0)
90000adc:	2e00      	cmp	r6, #0
90000ade:	f000 809a 	beq.w	90000c16 <wm8994_Init+0x196>
    outputEnabled = 1;
90000ae2:	2701      	movs	r7, #1
    switch (output_device)
90000ae4:	2e02      	cmp	r6, #2
    outputEnabled = 1;
90000ae6:	f8cb 7000 	str.w	r7, [fp]
    switch (output_device)
90000aea:	d07a      	beq.n	90000be2 <wm8994_Init+0x162>
90000aec:	2e03      	cmp	r6, #3
90000aee:	d026      	beq.n	90000b3e <wm8994_Init+0xbe>
90000af0:	42be      	cmp	r6, r7
90000af2:	d176      	bne.n	90000be2 <wm8994_Init+0x162>
 AUDIO_IO_Write(Addr, Reg, Value);
90000af4:	f640 420c 	movw	r2, #3084	; 0xc0c
90000af8:	2105      	movs	r1, #5
90000afa:	4620      	mov	r0, r4
90000afc:	f001 f996 	bl	90001e2c <AUDIO_IO_Write>
90000b00:	2200      	movs	r2, #0
90000b02:	f240 6101 	movw	r1, #1537	; 0x601
90000b06:	4620      	mov	r0, r4
90000b08:	f001 f990 	bl	90001e2c <AUDIO_IO_Write>
90000b0c:	2200      	movs	r2, #0
90000b0e:	f240 6102 	movw	r1, #1538	; 0x602
90000b12:	4620      	mov	r0, r4
90000b14:	f001 f98a 	bl	90001e2c <AUDIO_IO_Write>
90000b18:	2202      	movs	r2, #2
90000b1a:	f240 6104 	movw	r1, #1540	; 0x604
90000b1e:	4620      	mov	r0, r4
90000b20:	f001 f984 	bl	90001e2c <AUDIO_IO_Write>
90000b24:	2202      	movs	r2, #2
90000b26:	f240 6105 	movw	r1, #1541	; 0x605
90000b2a:	4620      	mov	r0, r4
90000b2c:	f001 f97e 	bl	90001e2c <AUDIO_IO_Write>
  if (input_device > 0)
90000b30:	bb3d      	cbnz	r5, 90000b82 <wm8994_Init+0x102>
    inputEnabled = 0;
90000b32:	462f      	mov	r7, r5
90000b34:	f8cb 5004 	str.w	r5, [fp, #4]
90000b38:	e032      	b.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000b3a:	2203      	movs	r2, #3
90000b3c:	e7c5      	b.n	90000aca <wm8994_Init+0x4a>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000b3e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000b42:	f640 720f 	movw	r2, #3855	; 0xf0f
90000b46:	f04f 0105 	mov.w	r1, #5
90000b4a:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000b4c:	d13f      	bne.n	90000bce <wm8994_Init+0x14e>
 AUDIO_IO_Write(Addr, Reg, Value);
90000b4e:	f001 f96d 	bl	90001e2c <AUDIO_IO_Write>
90000b52:	4632      	mov	r2, r6
90000b54:	f240 6101 	movw	r1, #1537	; 0x601
90000b58:	4620      	mov	r0, r4
90000b5a:	f001 f967 	bl	90001e2c <AUDIO_IO_Write>
90000b5e:	4632      	mov	r2, r6
90000b60:	f240 6102 	movw	r1, #1538	; 0x602
90000b64:	4620      	mov	r0, r4
90000b66:	f001 f961 	bl	90001e2c <AUDIO_IO_Write>
90000b6a:	4632      	mov	r2, r6
90000b6c:	f240 6104 	movw	r1, #1540	; 0x604
90000b70:	4620      	mov	r0, r4
90000b72:	f001 f95b 	bl	90001e2c <AUDIO_IO_Write>
90000b76:	4632      	mov	r2, r6
90000b78:	f240 6105 	movw	r1, #1541	; 0x605
90000b7c:	4620      	mov	r0, r4
90000b7e:	f001 f955 	bl	90001e2c <AUDIO_IO_Write>
    inputEnabled = 1;
90000b82:	2701      	movs	r7, #1
    switch (input_device)
90000b84:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    inputEnabled = 1;
90000b88:	f8cb 7004 	str.w	r7, [fp, #4]
    switch (input_device)
90000b8c:	f000 809d 	beq.w	90000cca <wm8994_Init+0x24a>
90000b90:	d844      	bhi.n	90000c1c <wm8994_Init+0x19c>
90000b92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90000b96:	f000 80c7 	beq.w	90000d28 <wm8994_Init+0x2a8>
90000b9a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
90000b9e:	d06e      	beq.n	90000c7e <wm8994_Init+0x1fe>
  switch (AudioFreq)
90000ba0:	f5b8 4ffa 	cmp.w	r8, #32000	; 0x7d00
90000ba4:	f000 81cd 	beq.w	90000f42 <wm8994_Init+0x4c2>
90000ba8:	f200 80c8 	bhi.w	90000d3c <wm8994_Init+0x2bc>
90000bac:	f5b8 5f7a 	cmp.w	r8, #16000	; 0x3e80
90000bb0:	f000 81c5 	beq.w	90000f3e <wm8994_Init+0x4be>
90000bb4:	f200 80bb 	bhi.w	90000d2e <wm8994_Init+0x2ae>
90000bb8:	f5b8 5ffa 	cmp.w	r8, #8000	; 0x1f40
90000bbc:	f000 80ce 	beq.w	90000d5c <wm8994_Init+0x2dc>
90000bc0:	f642 3311 	movw	r3, #11025	; 0x2b11
90000bc4:	4598      	cmp	r8, r3
90000bc6:	f000 81c0 	beq.w	90000f4a <wm8994_Init+0x4ca>
 AUDIO_IO_Write(Addr, Reg, Value);
90000bca:	2283      	movs	r2, #131	; 0x83
90000bcc:	e0c7      	b.n	90000d5e <wm8994_Init+0x2de>
90000bce:	f001 f92d 	bl	90001e2c <AUDIO_IO_Write>
90000bd2:	463a      	mov	r2, r7
90000bd4:	f240 6101 	movw	r1, #1537	; 0x601
90000bd8:	4620      	mov	r0, r4
90000bda:	f001 f927 	bl	90001e2c <AUDIO_IO_Write>
90000bde:	463a      	mov	r2, r7
90000be0:	e795      	b.n	90000b0e <wm8994_Init+0x8e>
90000be2:	f240 3203 	movw	r2, #771	; 0x303
90000be6:	2105      	movs	r1, #5
90000be8:	4620      	mov	r0, r4
90000bea:	f001 f91f 	bl	90001e2c <AUDIO_IO_Write>
90000bee:	463a      	mov	r2, r7
90000bf0:	f240 6101 	movw	r1, #1537	; 0x601
90000bf4:	4620      	mov	r0, r4
90000bf6:	f001 f919 	bl	90001e2c <AUDIO_IO_Write>
90000bfa:	463a      	mov	r2, r7
90000bfc:	f240 6102 	movw	r1, #1538	; 0x602
90000c00:	4620      	mov	r0, r4
90000c02:	f001 f913 	bl	90001e2c <AUDIO_IO_Write>
90000c06:	2200      	movs	r2, #0
90000c08:	f240 6104 	movw	r1, #1540	; 0x604
90000c0c:	4620      	mov	r0, r4
90000c0e:	f001 f90d 	bl	90001e2c <AUDIO_IO_Write>
90000c12:	2200      	movs	r2, #0
90000c14:	e787      	b.n	90000b26 <wm8994_Init+0xa6>
    outputEnabled = 0;
90000c16:	f8cb 6000 	str.w	r6, [fp]
90000c1a:	e789      	b.n	90000b30 <wm8994_Init+0xb0>
    switch (input_device)
90000c1c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
90000c20:	d1be      	bne.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000c22:	f640 723c 	movw	r2, #3900	; 0xf3c
90000c26:	2104      	movs	r1, #4
90000c28:	4620      	mov	r0, r4
90000c2a:	f001 f8ff 	bl	90001e2c <AUDIO_IO_Write>
90000c2e:	22db      	movs	r2, #219	; 0xdb
90000c30:	f44f 618a 	mov.w	r1, #1104	; 0x450
90000c34:	4620      	mov	r0, r4
90000c36:	f001 f8f9 	bl	90001e2c <AUDIO_IO_Write>
90000c3a:	22db      	movs	r2, #219	; 0xdb
90000c3c:	f44f 6188 	mov.w	r1, #1088	; 0x440
90000c40:	4620      	mov	r0, r4
90000c42:	f001 f8f3 	bl	90001e2c <AUDIO_IO_Write>
90000c46:	f246 32a0 	movw	r2, #25504	; 0x63a0
90000c4a:	2102      	movs	r1, #2
90000c4c:	4620      	mov	r0, r4
90000c4e:	f001 f8ed 	bl	90001e2c <AUDIO_IO_Write>
90000c52:	2202      	movs	r2, #2
90000c54:	f240 6106 	movw	r1, #1542	; 0x606
90000c58:	4620      	mov	r0, r4
90000c5a:	f001 f8e7 	bl	90001e2c <AUDIO_IO_Write>
90000c5e:	2202      	movs	r2, #2
90000c60:	f240 6107 	movw	r1, #1543	; 0x607
90000c64:	4620      	mov	r0, r4
90000c66:	f001 f8e1 	bl	90001e2c <AUDIO_IO_Write>
90000c6a:	2202      	movs	r2, #2
90000c6c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
90000c70:	4620      	mov	r0, r4
90000c72:	f001 f8db 	bl	90001e2c <AUDIO_IO_Write>
90000c76:	2202      	movs	r2, #2
90000c78:	f240 6109 	movw	r1, #1545	; 0x609
90000c7c:	e04f      	b.n	90000d1e <wm8994_Init+0x29e>
90000c7e:	f44f 6243 	mov.w	r2, #3120	; 0xc30
90000c82:	2104      	movs	r1, #4
90000c84:	4620      	mov	r0, r4
90000c86:	f001 f8d1 	bl	90001e2c <AUDIO_IO_Write>
90000c8a:	22db      	movs	r2, #219	; 0xdb
90000c8c:	f44f 618a 	mov.w	r1, #1104	; 0x450
90000c90:	4620      	mov	r0, r4
90000c92:	f001 f8cb 	bl	90001e2c <AUDIO_IO_Write>
90000c96:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
90000c9a:	2102      	movs	r1, #2
90000c9c:	4620      	mov	r0, r4
90000c9e:	f001 f8c5 	bl	90001e2c <AUDIO_IO_Write>
90000ca2:	2202      	movs	r2, #2
90000ca4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
90000ca8:	4620      	mov	r0, r4
90000caa:	f001 f8bf 	bl	90001e2c <AUDIO_IO_Write>
90000cae:	2202      	movs	r2, #2
90000cb0:	f240 6109 	movw	r1, #1545	; 0x609
90000cb4:	4620      	mov	r0, r4
90000cb6:	f001 f8b9 	bl	90001e2c <AUDIO_IO_Write>
90000cba:	220e      	movs	r2, #14
90000cbc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
90000cc0:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
90000cc2:	2700      	movs	r7, #0
 AUDIO_IO_Write(Addr, Reg, Value);
90000cc4:	f001 f8b2 	bl	90001e2c <AUDIO_IO_Write>
      break; 
90000cc8:	e76a      	b.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000cca:	2211      	movs	r2, #17
90000ccc:	2128      	movs	r1, #40	; 0x28
90000cce:	4620      	mov	r0, r4
90000cd0:	f001 f8ac 	bl	90001e2c <AUDIO_IO_Write>
90000cd4:	2235      	movs	r2, #53	; 0x35
90000cd6:	2129      	movs	r1, #41	; 0x29
90000cd8:	4620      	mov	r0, r4
90000cda:	f001 f8a7 	bl	90001e2c <AUDIO_IO_Write>
90000cde:	2235      	movs	r2, #53	; 0x35
90000ce0:	212a      	movs	r1, #42	; 0x2a
90000ce2:	4620      	mov	r0, r4
90000ce4:	f001 f8a2 	bl	90001e2c <AUDIO_IO_Write>
90000ce8:	f240 3203 	movw	r2, #771	; 0x303
90000cec:	2104      	movs	r1, #4
90000cee:	4620      	mov	r0, r4
90000cf0:	f001 f89c 	bl	90001e2c <AUDIO_IO_Write>
90000cf4:	22db      	movs	r2, #219	; 0xdb
90000cf6:	f44f 6188 	mov.w	r1, #1088	; 0x440
90000cfa:	4620      	mov	r0, r4
90000cfc:	f001 f896 	bl	90001e2c <AUDIO_IO_Write>
90000d00:	f246 3250 	movw	r2, #25424	; 0x6350
90000d04:	2102      	movs	r1, #2
90000d06:	4620      	mov	r0, r4
90000d08:	f001 f890 	bl	90001e2c <AUDIO_IO_Write>
90000d0c:	2202      	movs	r2, #2
90000d0e:	f240 6106 	movw	r1, #1542	; 0x606
90000d12:	4620      	mov	r0, r4
90000d14:	f001 f88a 	bl	90001e2c <AUDIO_IO_Write>
90000d18:	2202      	movs	r2, #2
90000d1a:	f240 6107 	movw	r1, #1543	; 0x607
90000d1e:	4620      	mov	r0, r4
90000d20:	f001 f884 	bl	90001e2c <AUDIO_IO_Write>
90000d24:	220d      	movs	r2, #13
90000d26:	e7c9      	b.n	90000cbc <wm8994_Init+0x23c>
90000d28:	f44f 7243 	mov.w	r2, #780	; 0x30c
90000d2c:	e7de      	b.n	90000cec <wm8994_Init+0x26c>
  switch (AudioFreq)
90000d2e:	f245 6322 	movw	r3, #22050	; 0x5622
90000d32:	4598      	cmp	r8, r3
90000d34:	f47f af49 	bne.w	90000bca <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
90000d38:	2243      	movs	r2, #67	; 0x43
90000d3a:	e010      	b.n	90000d5e <wm8994_Init+0x2de>
  switch (AudioFreq)
90000d3c:	f64b 3380 	movw	r3, #48000	; 0xbb80
90000d40:	4598      	cmp	r8, r3
90000d42:	f43f af42 	beq.w	90000bca <wm8994_Init+0x14a>
90000d46:	4b9d      	ldr	r3, [pc, #628]	; (90000fbc <wm8994_Init+0x53c>)
90000d48:	4598      	cmp	r8, r3
90000d4a:	f000 80fc 	beq.w	90000f46 <wm8994_Init+0x4c6>
90000d4e:	f64a 4344 	movw	r3, #44100	; 0xac44
90000d52:	4598      	cmp	r8, r3
90000d54:	f47f af39 	bne.w	90000bca <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
90000d58:	2273      	movs	r2, #115	; 0x73
90000d5a:	e000      	b.n	90000d5e <wm8994_Init+0x2de>
90000d5c:	2203      	movs	r2, #3
90000d5e:	f44f 7104 	mov.w	r1, #528	; 0x210
90000d62:	4620      	mov	r0, r4
90000d64:	f001 f862 	bl	90001e2c <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000d68:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000d6c:	f44f 7140 	mov.w	r1, #768	; 0x300
90000d70:	4620      	mov	r0, r4
90000d72:	bf0c      	ite	eq
90000d74:	f244 0218 	movweq	r2, #16408	; 0x4018
90000d78:	f244 0210 	movwne	r2, #16400	; 0x4010
90000d7c:	f001 f856 	bl	90001e2c <AUDIO_IO_Write>
90000d80:	2200      	movs	r2, #0
90000d82:	f240 3102 	movw	r1, #770	; 0x302
90000d86:	4620      	mov	r0, r4
90000d88:	f001 f850 	bl	90001e2c <AUDIO_IO_Write>
90000d8c:	220a      	movs	r2, #10
90000d8e:	f44f 7102 	mov.w	r1, #520	; 0x208
90000d92:	4620      	mov	r0, r4
90000d94:	f001 f84a 	bl	90001e2c <AUDIO_IO_Write>
90000d98:	2201      	movs	r2, #1
90000d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
90000d9e:	4620      	mov	r0, r4
90000da0:	f001 f844 	bl	90001e2c <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
90000da4:	2e00      	cmp	r6, #0
90000da6:	f000 80a9 	beq.w	90000efc <wm8994_Init+0x47c>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
90000daa:	2e02      	cmp	r6, #2
90000dac:	d123      	bne.n	90000df6 <wm8994_Init+0x376>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dae:	f44f 7280 	mov.w	r2, #256	; 0x100
90000db2:	212d      	movs	r1, #45	; 0x2d
90000db4:	4620      	mov	r0, r4
      if(ColdStartup)
90000db6:	4e82      	ldr	r6, [pc, #520]	; (90000fc0 <wm8994_Init+0x540>)
 AUDIO_IO_Write(Addr, Reg, Value);
90000db8:	f001 f838 	bl	90001e2c <AUDIO_IO_Write>
90000dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
90000dc0:	212e      	movs	r1, #46	; 0x2e
90000dc2:	4620      	mov	r0, r4
90000dc4:	f001 f832 	bl	90001e2c <AUDIO_IO_Write>
      if(ColdStartup)
90000dc8:	7833      	ldrb	r3, [r6, #0]
90000dca:	2b00      	cmp	r3, #0
90000dcc:	f000 80bf 	beq.w	90000f4e <wm8994_Init+0x4ce>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dd0:	4620      	mov	r0, r4
90000dd2:	f44f 4201 	mov.w	r2, #33024	; 0x8100
90000dd6:	f44f 7188 	mov.w	r1, #272	; 0x110
90000dda:	f001 f827 	bl	90001e2c <AUDIO_IO_Write>
        ColdStartup=0;
90000dde:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
90000de0:	f44f 7096 	mov.w	r0, #300	; 0x12c
        ColdStartup=0;
90000de4:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
90000de6:	f001 f84d 	bl	90001e84 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dea:	2200      	movs	r2, #0
90000dec:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000df0:	4620      	mov	r0, r4
90000df2:	f001 f81b 	bl	90001e2c <AUDIO_IO_Write>
90000df6:	f44f 7240 	mov.w	r2, #768	; 0x300
90000dfa:	2103      	movs	r1, #3
90000dfc:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
90000dfe:	f243 3603 	movw	r6, #13059	; 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
90000e02:	f001 f813 	bl	90001e2c <AUDIO_IO_Write>
90000e06:	2200      	movs	r2, #0
90000e08:	2122      	movs	r1, #34	; 0x22
90000e0a:	4620      	mov	r0, r4
90000e0c:	f001 f80e 	bl	90001e2c <AUDIO_IO_Write>
90000e10:	2200      	movs	r2, #0
90000e12:	2123      	movs	r1, #35	; 0x23
90000e14:	4620      	mov	r0, r4
90000e16:	f001 f809 	bl	90001e2c <AUDIO_IO_Write>
90000e1a:	f44f 7240 	mov.w	r2, #768	; 0x300
90000e1e:	2136      	movs	r1, #54	; 0x36
90000e20:	4620      	mov	r0, r4
90000e22:	f001 f803 	bl	90001e2c <AUDIO_IO_Write>
90000e26:	f243 0203 	movw	r2, #12291	; 0x3003
90000e2a:	2101      	movs	r1, #1
90000e2c:	4620      	mov	r0, r4
90000e2e:	f000 fffd 	bl	90001e2c <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000e32:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000e36:	f04f 0151 	mov.w	r1, #81	; 0x51
90000e3a:	4620      	mov	r0, r4
90000e3c:	bf0c      	ite	eq
90000e3e:	f240 2205 	movweq	r2, #517	; 0x205
90000e42:	2205      	movne	r2, #5
90000e44:	f000 fff2 	bl	90001e2c <AUDIO_IO_Write>
90000e48:	f243 3203 	movw	r2, #13059	; 0x3303
90000e4c:	2101      	movs	r1, #1
90000e4e:	4620      	mov	r0, r4
90000e50:	f000 ffec 	bl	90001e2c <AUDIO_IO_Write>
90000e54:	2222      	movs	r2, #34	; 0x22
90000e56:	2160      	movs	r1, #96	; 0x60
90000e58:	4620      	mov	r0, r4
90000e5a:	f000 ffe7 	bl	90001e2c <AUDIO_IO_Write>
90000e5e:	f649 7225 	movw	r2, #40741	; 0x9f25
90000e62:	214c      	movs	r1, #76	; 0x4c
90000e64:	4620      	mov	r0, r4
90000e66:	f000 ffe1 	bl	90001e2c <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
90000e6a:	200f      	movs	r0, #15
90000e6c:	f001 f80a 	bl	90001e84 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000e70:	2201      	movs	r2, #1
90000e72:	212d      	movs	r1, #45	; 0x2d
90000e74:	4620      	mov	r0, r4
90000e76:	f000 ffd9 	bl	90001e2c <AUDIO_IO_Write>
90000e7a:	2201      	movs	r2, #1
90000e7c:	212e      	movs	r1, #46	; 0x2e
90000e7e:	4620      	mov	r0, r4
90000e80:	f000 ffd4 	bl	90001e2c <AUDIO_IO_Write>
90000e84:	f44f 724c 	mov.w	r2, #816	; 0x330
90000e88:	2103      	movs	r1, #3
90000e8a:	4620      	mov	r0, r4
90000e8c:	f000 ffce 	bl	90001e2c <AUDIO_IO_Write>
90000e90:	2233      	movs	r2, #51	; 0x33
90000e92:	2154      	movs	r1, #84	; 0x54
90000e94:	4620      	mov	r0, r4
90000e96:	f000 ffc9 	bl	90001e2c <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
90000e9a:	f240 1001 	movw	r0, #257	; 0x101
90000e9e:	f000 fff1 	bl	90001e84 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000ea2:	22ee      	movs	r2, #238	; 0xee
90000ea4:	2160      	movs	r1, #96	; 0x60
90000ea6:	4620      	mov	r0, r4
90000ea8:	f000 ffc0 	bl	90001e2c <AUDIO_IO_Write>
90000eac:	22c0      	movs	r2, #192	; 0xc0
90000eae:	f44f 61c2 	mov.w	r1, #1552	; 0x610
90000eb2:	4620      	mov	r0, r4
90000eb4:	f000 ffba 	bl	90001e2c <AUDIO_IO_Write>
90000eb8:	22c0      	movs	r2, #192	; 0xc0
90000eba:	f240 6111 	movw	r1, #1553	; 0x611
90000ebe:	4620      	mov	r0, r4
90000ec0:	f000 ffb4 	bl	90001e2c <AUDIO_IO_Write>
90000ec4:	2210      	movs	r2, #16
90000ec6:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000eca:	4620      	mov	r0, r4
90000ecc:	f000 ffae 	bl	90001e2c <AUDIO_IO_Write>
90000ed0:	22c0      	movs	r2, #192	; 0xc0
90000ed2:	f240 6112 	movw	r1, #1554	; 0x612
90000ed6:	4620      	mov	r0, r4
90000ed8:	f000 ffa8 	bl	90001e2c <AUDIO_IO_Write>
90000edc:	22c0      	movs	r2, #192	; 0xc0
90000ede:	f240 6113 	movw	r1, #1555	; 0x613
90000ee2:	4620      	mov	r0, r4
90000ee4:	f000 ffa2 	bl	90001e2c <AUDIO_IO_Write>
90000ee8:	2210      	movs	r2, #16
90000eea:	f240 4122 	movw	r1, #1058	; 0x422
90000eee:	4620      	mov	r0, r4
90000ef0:	f000 ff9c 	bl	90001e2c <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
90000ef4:	4651      	mov	r1, sl
90000ef6:	4648      	mov	r0, r9
90000ef8:	f7ff fd3e 	bl	90000978 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
90000efc:	b1e5      	cbz	r5, 90000f38 <wm8994_Init+0x4b8>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
90000efe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90000f02:	d002      	beq.n	90000f0a <wm8994_Init+0x48a>
90000f04:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
90000f08:	d12a      	bne.n	90000f60 <wm8994_Init+0x4e0>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f0a:	f046 0213 	orr.w	r2, r6, #19
90000f0e:	2101      	movs	r1, #1
90000f10:	4620      	mov	r0, r4
90000f12:	f000 ff8b 	bl	90001e2c <AUDIO_IO_Write>
90000f16:	2202      	movs	r2, #2
90000f18:	f44f 61c4 	mov.w	r1, #1568	; 0x620
90000f1c:	4620      	mov	r0, r4
90000f1e:	f000 ff85 	bl	90001e2c <AUDIO_IO_Write>
90000f22:	f44f 5260 	mov.w	r2, #14336	; 0x3800
90000f26:	f240 4111 	movw	r1, #1041	; 0x411
90000f2a:	4620      	mov	r0, r4
90000f2c:	f000 ff7e 	bl	90001e2c <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
90000f30:	4651      	mov	r1, sl
90000f32:	4648      	mov	r0, r9
90000f34:	f7ff fd20 	bl	90000978 <wm8994_SetVolume>
}
90000f38:	4638      	mov	r0, r7
90000f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
90000f3e:	2233      	movs	r2, #51	; 0x33
90000f40:	e70d      	b.n	90000d5e <wm8994_Init+0x2de>
90000f42:	2263      	movs	r2, #99	; 0x63
90000f44:	e70b      	b.n	90000d5e <wm8994_Init+0x2de>
90000f46:	22a3      	movs	r2, #163	; 0xa3
90000f48:	e709      	b.n	90000d5e <wm8994_Init+0x2de>
90000f4a:	2213      	movs	r2, #19
90000f4c:	e707      	b.n	90000d5e <wm8994_Init+0x2de>
90000f4e:	4620      	mov	r0, r4
90000f50:	f248 1208 	movw	r2, #33032	; 0x8108
90000f54:	f44f 7188 	mov.w	r1, #272	; 0x110
90000f58:	f000 ff68 	bl	90001e2c <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
90000f5c:	2032      	movs	r0, #50	; 0x32
90000f5e:	e742      	b.n	90000de6 <wm8994_Init+0x366>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000f60:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
90000f64:	d115      	bne.n	90000f92 <wm8994_Init+0x512>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f66:	f046 0213 	orr.w	r2, r6, #19
90000f6a:	2101      	movs	r1, #1
90000f6c:	4620      	mov	r0, r4
90000f6e:	f000 ff5d 	bl	90001e2c <AUDIO_IO_Write>
90000f72:	2202      	movs	r2, #2
90000f74:	f44f 61c4 	mov.w	r1, #1568	; 0x620
90000f78:	4620      	mov	r0, r4
90000f7a:	f000 ff57 	bl	90001e2c <AUDIO_IO_Write>
90000f7e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000f82:	f44f 6182 	mov.w	r1, #1040	; 0x410
90000f86:	4620      	mov	r0, r4
90000f88:	f000 ff50 	bl	90001e2c <AUDIO_IO_Write>
90000f8c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000f90:	e7c9      	b.n	90000f26 <wm8994_Init+0x4a6>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
90000f92:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
90000f96:	d002      	beq.n	90000f9e <wm8994_Init+0x51e>
90000f98:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
90000f9c:	d1c8      	bne.n	90000f30 <wm8994_Init+0x4b0>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f9e:	220b      	movs	r2, #11
90000fa0:	2118      	movs	r1, #24
90000fa2:	4620      	mov	r0, r4
90000fa4:	f000 ff42 	bl	90001e2c <AUDIO_IO_Write>
90000fa8:	220b      	movs	r2, #11
90000faa:	211a      	movs	r1, #26
90000fac:	4620      	mov	r0, r4
90000fae:	f000 ff3d 	bl	90001e2c <AUDIO_IO_Write>
90000fb2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000fb6:	f44f 6182 	mov.w	r1, #1040	; 0x410
90000fba:	e7b6      	b.n	90000f2a <wm8994_Init+0x4aa>
90000fbc:	00017700 	.word	0x00017700
90000fc0:	20000028 	.word	0x20000028
90000fc4:	20000140 	.word	0x20000140

90000fc8 <wm8994_Stop>:
{
90000fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
90000fca:	4f19      	ldr	r7, [pc, #100]	; (90001030 <wm8994_Stop+0x68>)
{
90000fcc:	4604      	mov	r4, r0
90000fce:	460e      	mov	r6, r1
  if (outputEnabled != 0)
90000fd0:	683d      	ldr	r5, [r7, #0]
90000fd2:	b355      	cbz	r5, 9000102a <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000fd4:	2101      	movs	r1, #1
90000fd6:	f7ff fc97 	bl	90000908 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
90000fda:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000fdc:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
90000fde:	d024      	beq.n	9000102a <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
90000fe0:	b2e0      	uxtb	r0, r4
 AUDIO_IO_Write(Addr, Reg, Value);
90000fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
90000fe6:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000fea:	9001      	str	r0, [sp, #4]
90000fec:	f000 ff1e 	bl	90001e2c <AUDIO_IO_Write>
90000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
90000ff4:	f240 4122 	movw	r1, #1058	; 0x422
90000ff8:	9801      	ldr	r0, [sp, #4]
90000ffa:	f000 ff17 	bl	90001e2c <AUDIO_IO_Write>
90000ffe:	2200      	movs	r2, #0
90001000:	212d      	movs	r1, #45	; 0x2d
90001002:	9801      	ldr	r0, [sp, #4]
90001004:	f000 ff12 	bl	90001e2c <AUDIO_IO_Write>
90001008:	2200      	movs	r2, #0
9000100a:	212e      	movs	r1, #46	; 0x2e
9000100c:	9801      	ldr	r0, [sp, #4]
9000100e:	f000 ff0d 	bl	90001e2c <AUDIO_IO_Write>
90001012:	2200      	movs	r2, #0
90001014:	2105      	movs	r1, #5
90001016:	9801      	ldr	r0, [sp, #4]
90001018:	f000 ff08 	bl	90001e2c <AUDIO_IO_Write>
9000101c:	2200      	movs	r2, #0
9000101e:	9801      	ldr	r0, [sp, #4]
90001020:	4611      	mov	r1, r2
90001022:	f000 ff03 	bl	90001e2c <AUDIO_IO_Write>
      outputEnabled = 0;
90001026:	2300      	movs	r3, #0
90001028:	603b      	str	r3, [r7, #0]
}
9000102a:	4628      	mov	r0, r5
9000102c:	b003      	add	sp, #12
9000102e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90001030:	20000140 	.word	0x20000140

90001034 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001034:	4b04      	ldr	r3, [pc, #16]	; (90001048 <SAIx_Out_DeInit+0x14>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001036:	4a05      	ldr	r2, [pc, #20]	; (9000104c <SAIx_Out_DeInit+0x18>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001038:	4805      	ldr	r0, [pc, #20]	; (90001050 <SAIx_Out_DeInit+0x1c>)
9000103a:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000103c:	6853      	ldr	r3, [r2, #4]
9000103e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001042:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
90001044:	f003 be3f 	b.w	90004cc6 <HAL_SAI_DeInit>
90001048:	40015c04 	.word	0x40015c04
9000104c:	40015c00 	.word	0x40015c00
90001050:	20000148 	.word	0x20000148

90001054 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
90001054:	4b05      	ldr	r3, [pc, #20]	; (9000106c <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
90001056:	4a06      	ldr	r2, [pc, #24]	; (90001070 <SAIx_In_DeInit+0x1c>)
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
90001058:	4806      	ldr	r0, [pc, #24]	; (90001074 <SAIx_In_DeInit+0x20>)
9000105a:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
9000105e:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001064:	6253      	str	r3, [r2, #36]	; 0x24

  HAL_SAI_DeInit(&haudio_in_sai);
90001066:	f003 be2e 	b.w	90004cc6 <HAL_SAI_DeInit>
9000106a:	bf00      	nop
9000106c:	40015c24 	.word	0x40015c24
90001070:	40015c00 	.word	0x40015c00
90001074:	20000148 	.word	0x20000148

90001078 <SAIx_In_Init>:
{
90001078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
9000107c:	4b35      	ldr	r3, [pc, #212]	; (90001154 <SAIx_In_Init+0xdc>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
9000107e:	2500      	movs	r5, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001080:	4c35      	ldr	r4, [pc, #212]	; (90001158 <SAIx_In_Init+0xe0>)
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
90001082:	2601      	movs	r6, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001084:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 90001160 <SAIx_In_Init+0xe8>
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
90001088:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
9000108c:	6023      	str	r3, [r4, #0]
{
9000108e:	4617      	mov	r7, r2
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001090:	f8d8 3004 	ldr.w	r3, [r8, #4]
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
90001094:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  haudio_out_sai.SlotInit.SlotNumber = 4;
90001098:	f04f 0904 	mov.w	r9, #4
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000109c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900010a0:	f8c8 3004 	str.w	r3, [r8, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
900010a4:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
900010a6:	61e2      	str	r2, [r4, #28]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010a8:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.Init.AudioMode = SaiOutMode;
900010aa:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
900010ac:	4620      	mov	r0, r4
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
900010ae:	9101      	str	r1, [sp, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
900010b0:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
900010b2:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
900010b4:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
900010b6:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
900010b8:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
900010ba:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
900010bc:	e9c4 350d 	strd	r3, r5, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
900010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
900010c4:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010c6:	2320      	movs	r3, #32
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
900010c8:	e9c4 9117 	strd	r9, r1, [r4, #92]	; 0x5c
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010cc:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
900010d0:	e9c4 b512 	strd	fp, r5, [r4, #72]	; 0x48
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
900010d4:	e9c4 a514 	strd	sl, r5, [r4, #80]	; 0x50
  HAL_SAI_Init(&haudio_out_sai);
900010d8:	f003 fd1e 	bl	90004b18 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
900010dc:	481f      	ldr	r0, [pc, #124]	; (9000115c <SAIx_In_Init+0xe4>)
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
900010de:	2380      	movs	r3, #128	; 0x80
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
900010e0:	2240      	movs	r2, #64	; 0x40
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
900010e2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
900010e6:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
900010ea:	9901      	ldr	r1, [sp, #4]
  __HAL_SAI_DISABLE(&haudio_in_sai);
900010ec:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
900010f0:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
900010f4:	2003      	movs	r0, #3
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
900010f6:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
900010fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  HAL_SAI_Init(&haudio_in_sai);
900010fe:	f104 0084 	add.w	r0, r4, #132	; 0x84
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
90001102:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
90001106:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
9000110a:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
9000110e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
90001112:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
90001116:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
9000111a:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
9000111e:	e9c4 352e 	strd	r3, r5, [r4, #184]	; 0xb8
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
90001122:	2320      	movs	r3, #32
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
90001124:	e9c4 b533 	strd	fp, r5, [r4, #204]	; 0xcc
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
90001128:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
9000112c:	e9c4 a535 	strd	sl, r5, [r4, #212]	; 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
90001130:	e9c4 5937 	strd	r5, r9, [r4, #220]	; 0xdc
  HAL_SAI_Init(&haudio_in_sai);
90001134:	f003 fcf0 	bl	90004b18 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
90001138:	6822      	ldr	r2, [r4, #0]
9000113a:	6813      	ldr	r3, [r2, #0]
9000113c:	ea43 030b 	orr.w	r3, r3, fp
90001140:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
90001142:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
90001146:	6813      	ldr	r3, [r2, #0]
90001148:	ea43 030b 	orr.w	r3, r3, fp
9000114c:	6013      	str	r3, [r2, #0]
}
9000114e:	b003      	add	sp, #12
90001150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001154:	40015c04 	.word	0x40015c04
90001158:	20000148 	.word	0x20000148
9000115c:	40015c24 	.word	0x40015c24
90001160:	40015c00 	.word	0x40015c00

90001164 <BSP_AUDIO_OUT_Error_CallBack>:
90001164:	4770      	bx	lr
	...

90001168 <BSP_AUDIO_OUT_MspInit>:
{ 
90001168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
9000116c:	4c4d      	ldr	r4, [pc, #308]	; (900012a4 <BSP_AUDIO_OUT_MspInit+0x13c>)
{ 
9000116e:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001170:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001174:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
90001176:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001178:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
9000117a:	f04f 080a 	mov.w	r8, #10
{ 
9000117e:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
90001180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
90001184:	a905      	add	r1, sp, #20
90001186:	4848      	ldr	r0, [pc, #288]	; (900012a8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
90001188:	f04f 0a40 	mov.w	sl, #64	; 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
9000118c:	6463      	str	r3, [r4, #68]	; 0x44
9000118e:	6c63      	ldr	r3, [r4, #68]	; 0x44
90001190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90001194:	9300      	str	r3, [sp, #0]
90001196:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
90001198:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000119e:	6323      	str	r3, [r4, #48]	; 0x30
900011a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
900011a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
900011a6:	9301      	str	r3, [sp, #4]
900011a8:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
900011aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
900011ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900011b0:	6323      	str	r3, [r4, #48]	; 0x30
900011b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
900011b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
900011b8:	9302      	str	r3, [sp, #8]
900011ba:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
900011bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
900011be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900011c2:	6323      	str	r3, [r4, #48]	; 0x30
900011c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
900011c6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
900011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
900011ce:	9303      	str	r3, [sp, #12]
900011d0:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900011d2:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
900011d4:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900011d8:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
900011dc:	f001 fc88 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
900011e0:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
900011e2:	a905      	add	r1, sp, #20
900011e4:	4830      	ldr	r0, [pc, #192]	; (900012a8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
900011e6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900011ea:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
900011ee:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
900011f2:	f001 fc7d 	bl	90002af0 <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
900011f6:	a905      	add	r1, sp, #20
900011f8:	482b      	ldr	r0, [pc, #172]	; (900012a8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
900011fa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900011fe:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001202:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
90001206:	f001 fc73 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
9000120a:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
9000120c:	a905      	add	r1, sp, #20
9000120e:	4826      	ldr	r0, [pc, #152]	; (900012a8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
90001210:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001214:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001218:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
9000121c:	f001 fc68 	bl	90002af0 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
90001220:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
90001222:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
90001224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90001228:	6323      	str	r3, [r4, #48]	; 0x30
9000122a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000122c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90001230:	9304      	str	r3, [sp, #16]
90001232:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
90001234:	4b1d      	ldr	r3, [pc, #116]	; (900012ac <BSP_AUDIO_OUT_MspInit+0x144>)
90001236:	429a      	cmp	r2, r3
90001238:	d129      	bne.n	9000128e <BSP_AUDIO_OUT_MspInit+0x126>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
9000123a:	4b1d      	ldr	r3, [pc, #116]	; (900012b0 <BSP_AUDIO_OUT_MspInit+0x148>)
9000123c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
90001240:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
90001244:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
90001248:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
9000124c:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
90001250:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
90001254:	f8c3 6144 	str.w	r6, [r3, #324]	; 0x144
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
90001258:	e9c3 2a44 	strd	r2, sl, [r3, #272]	; 0x110
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
9000125c:	f44f 6200 	mov.w	r2, #2048	; 0x800
90001260:	e9c3 1247 	strd	r1, r2, [r3, #284]	; 0x11c
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
90001264:	f44f 7280 	mov.w	r2, #256	; 0x100
90001268:	e9c3 0249 	strd	r0, r2, [r3, #292]	; 0x124
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
9000126c:	2204      	movs	r2, #4
9000126e:	e9c3 424b 	strd	r4, r2, [r3, #300]	; 0x12c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
90001272:	f503 7486 	add.w	r4, r3, #268	; 0x10c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
90001276:	4a0f      	ldr	r2, [pc, #60]	; (900012b4 <BSP_AUDIO_OUT_MspInit+0x14c>)
    HAL_DMA_DeInit(&hdma_sai_tx);
90001278:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
9000127a:	66f4      	str	r4, [r6, #108]	; 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
9000127c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
90001280:	e9c3 754d 	strd	r7, r5, [r3, #308]	; 0x134
    HAL_DMA_DeInit(&hdma_sai_tx);
90001284:	f001 f9c0 	bl	90002608 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
90001288:	4620      	mov	r0, r4
9000128a:	f001 f93f 	bl	9000250c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
9000128e:	2200      	movs	r2, #0
90001290:	210e      	movs	r1, #14
90001292:	203c      	movs	r0, #60	; 0x3c
90001294:	f001 f8d0 	bl	90002438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
90001298:	203c      	movs	r0, #60	; 0x3c
9000129a:	f001 f8ff 	bl	9000249c <HAL_NVIC_EnableIRQ>
}
9000129e:	b00a      	add	sp, #40	; 0x28
900012a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900012a4:	40023800 	.word	0x40023800
900012a8:	40022000 	.word	0x40022000
900012ac:	40015c04 	.word	0x40015c04
900012b0:	20000148 	.word	0x20000148
900012b4:	40026470 	.word	0x40026470

900012b8 <BSP_AUDIO_OUT_Init>:
{ 
900012b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900012bc:	4617      	mov	r7, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
900012be:	4c2f      	ldr	r4, [pc, #188]	; (9000137c <BSP_AUDIO_OUT_Init+0xc4>)
{ 
900012c0:	4681      	mov	r9, r0
900012c2:	468a      	mov	sl, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
900012c4:	4d2e      	ldr	r5, [pc, #184]	; (90001380 <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
900012c6:	f7ff feb5 	bl	90001034 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
900012ca:	4639      	mov	r1, r7
900012cc:	2200      	movs	r2, #0
900012ce:	4620      	mov	r0, r4
900012d0:	f007 ff7a 	bl	900091c8 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
900012d4:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
900012d6:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
900012d8:	f003 fda5 	bl	90004e26 <HAL_SAI_GetState>
900012dc:	4601      	mov	r1, r0
900012de:	b910      	cbnz	r0, 900012e6 <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
900012e0:	4620      	mov	r0, r4
900012e2:	f7ff ff41 	bl	90001168 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
900012e6:	4a27      	ldr	r2, [pc, #156]	; (90001384 <BSP_AUDIO_OUT_Init+0xcc>)
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
900012e8:	2104      	movs	r1, #4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
900012ea:	6025      	str	r5, [r4, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
900012ec:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
900012ee:	6853      	ldr	r3, [r2, #4]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
900012f0:	2601      	movs	r6, #1
  HAL_SAI_Init(&haudio_out_sai);
900012f2:	4822      	ldr	r0, [pc, #136]	; (9000137c <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
900012f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
900012f8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 90001388 <BSP_AUDIO_OUT_Init+0xd0>
  __HAL_SAI_DISABLE(&haudio_out_sai);
900012fc:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
900012fe:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
90001300:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
90001302:	61e7      	str	r7, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
90001304:	6065      	str	r5, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
90001306:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
90001308:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
9000130a:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
9000130c:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
9000130e:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
90001310:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
90001312:	e9c4 350d 	strd	r3, r5, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
90001316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
9000131a:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
9000131c:	2320      	movs	r3, #32
9000131e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
90001322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
90001326:	e9c4 3512 	strd	r3, r5, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
9000132a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
9000132e:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
90001332:	230f      	movs	r3, #15
90001334:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  HAL_SAI_Init(&haudio_out_sai);
90001338:	f003 fbee 	bl	90004b18 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
9000133c:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
9000133e:	2034      	movs	r0, #52	; 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
90001340:	6813      	ldr	r3, [r2, #0]
90001342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001346:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
90001348:	f8d8 3008 	ldr.w	r3, [r8, #8]
9000134c:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
9000134e:	f648 1394 	movw	r3, #35220	; 0x8994
90001352:	4298      	cmp	r0, r3
90001354:	d10f      	bne.n	90001376 <BSP_AUDIO_OUT_Init+0xbe>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
90001356:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
9000135a:	2034      	movs	r0, #52	; 0x34
9000135c:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
9000135e:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
90001362:	463b      	mov	r3, r7
90001364:	f8d8 4000 	ldr.w	r4, [r8]
90001368:	4652      	mov	r2, sl
9000136a:	4649      	mov	r1, r9
9000136c:	2034      	movs	r0, #52	; 0x34
9000136e:	47a0      	blx	r4
    ret = AUDIO_OK;
90001370:	4628      	mov	r0, r5
}
90001372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = AUDIO_ERROR;
90001376:	4630      	mov	r0, r6
90001378:	e7fb      	b.n	90001372 <BSP_AUDIO_OUT_Init+0xba>
9000137a:	bf00      	nop
9000137c:	20000148 	.word	0x20000148
90001380:	40015c04 	.word	0x40015c04
90001384:	40015c00 	.word	0x40015c00
90001388:	2000002c 	.word	0x2000002c

9000138c <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
9000138c:	b28a      	uxth	r2, r1
9000138e:	4601      	mov	r1, r0
90001390:	4802      	ldr	r0, [pc, #8]	; (9000139c <BSP_AUDIO_IN_Record+0x10>)
{
90001392:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
90001394:	f003 fcb6 	bl	90004d04 <HAL_SAI_Receive_DMA>
}
90001398:	2000      	movs	r0, #0
9000139a:	bd08      	pop	{r3, pc}
9000139c:	200001cc 	.word	0x200001cc

900013a0 <HAL_SAI_RxCpltCallback>:
{
900013a0:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
900013a2:	f008 f9a3 	bl	900096ec <BSP_AUDIO_IN_TransferComplete_CallBack>
}
900013a6:	bd08      	pop	{r3, pc}

900013a8 <HAL_SAI_RxHalfCpltCallback>:
{
900013a8:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
900013aa:	f008 f9c1 	bl	90009730 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
900013ae:	bd08      	pop	{r3, pc}

900013b0 <BSP_AUDIO_IN_Error_CallBack>:
900013b0:	4770      	bx	lr
	...

900013b4 <HAL_SAI_ErrorCallback>:
{
900013b4:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
900013b6:	480a      	ldr	r0, [pc, #40]	; (900013e0 <HAL_SAI_ErrorCallback+0x2c>)
900013b8:	f003 fd35 	bl	90004e26 <HAL_SAI_GetState>
900013bc:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
900013be:	4809      	ldr	r0, [pc, #36]	; (900013e4 <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
900013c0:	f005 05ef 	and.w	r5, r5, #239	; 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
900013c4:	f003 fd2f 	bl	90004e26 <HAL_SAI_GetState>
900013c8:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
900013ca:	2d02      	cmp	r5, #2
900013cc:	d101      	bne.n	900013d2 <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
900013ce:	f7ff fec9 	bl	90001164 <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
900013d2:	f004 04df 	and.w	r4, r4, #223	; 0xdf
900013d6:	2c02      	cmp	r4, #2
900013d8:	d101      	bne.n	900013de <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
900013da:	f7ff ffe9 	bl	900013b0 <BSP_AUDIO_IN_Error_CallBack>
}
900013de:	bd38      	pop	{r3, r4, r5, pc}
900013e0:	20000148 	.word	0x20000148
900013e4:	200001cc 	.word	0x200001cc

900013e8 <BSP_AUDIO_IN_MspInit>:
{
900013e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
900013ec:	4c3d      	ldr	r4, [pc, #244]	; (900014e4 <BSP_AUDIO_IN_MspInit+0xfc>)
{
900013ee:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900013f0:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
900013f2:	2500      	movs	r5, #0
  AUDIO_IN_SAIx_CLK_ENABLE();
900013f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900013f6:	f44f 6880 	mov.w	r8, #1024	; 0x400
{
900013fa:	4606      	mov	r6, r0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
900013fc:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
900013fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
90001402:	4839      	ldr	r0, [pc, #228]	; (900014e8 <BSP_AUDIO_IN_MspInit+0x100>)
  AUDIO_IN_SAIx_CLK_ENABLE();
90001404:	6463      	str	r3, [r4, #68]	; 0x44
90001406:	6c63      	ldr	r3, [r4, #68]	; 0x44
90001408:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000140c:	9301      	str	r3, [sp, #4]
9000140e:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
90001410:	6b23      	ldr	r3, [r4, #48]	; 0x30
90001412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90001416:	6323      	str	r3, [r4, #48]	; 0x30
90001418:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000141e:	9302      	str	r3, [sp, #8]
90001420:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
90001422:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001424:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
90001428:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
9000142a:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
9000142e:	f001 fb5f 	bl	90002af0 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
90001432:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
90001434:	a905      	add	r1, sp, #20
90001436:	482d      	ldr	r0, [pc, #180]	; (900014ec <BSP_AUDIO_IN_MspInit+0x104>)
  AUDIO_IN_INT_GPIO_ENABLE();
90001438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000143c:	6323      	str	r3, [r4, #48]	; 0x30
9000143e:	6b23      	ldr	r3, [r4, #48]	; 0x30
90001440:	f003 0380 	and.w	r3, r3, #128	; 0x80
90001444:	9303      	str	r3, [sp, #12]
90001446:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
90001448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
9000144c:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
90001450:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
90001454:	f001 fb4c 	bl	90002af0 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
90001458:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
9000145a:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
9000145c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90001460:	6323      	str	r3, [r4, #48]	; 0x30
90001462:	6b23      	ldr	r3, [r4, #48]	; 0x30
90001464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90001468:	9304      	str	r3, [sp, #16]
9000146a:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
9000146c:	4b20      	ldr	r3, [pc, #128]	; (900014f0 <BSP_AUDIO_IN_MspInit+0x108>)
9000146e:	429a      	cmp	r2, r3
90001470:	d125      	bne.n	900014be <BSP_AUDIO_IN_MspInit+0xd6>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
90001472:	4b20      	ldr	r3, [pc, #128]	; (900014f4 <BSP_AUDIO_IN_MspInit+0x10c>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
90001474:	f44f 6100 	mov.w	r1, #2048	; 0x800
90001478:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
9000147c:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
90001480:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
90001484:	f8c3 5190 	str.w	r5, [r3, #400]	; 0x190
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
90001488:	f8c3 519c 	str.w	r5, [r3, #412]	; 0x19c
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
9000148c:	6734      	str	r4, [r6, #112]	; 0x70
9000148e:	f8c3 61a4 	str.w	r6, [r3, #420]	; 0x1a4
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
90001492:	e9c3 1260 	strd	r1, r2, [r3, #384]	; 0x180
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
90001496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
9000149a:	e9c3 0262 	strd	r0, r2, [r3, #392]	; 0x188
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
9000149e:	2203      	movs	r2, #3
    HAL_DMA_DeInit(&hdma_sai_rx);
900014a0:	4620      	mov	r0, r4
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
900014a2:	e9c3 2565 	strd	r2, r5, [r3, #404]	; 0x194
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
900014a6:	4a14      	ldr	r2, [pc, #80]	; (900014f8 <BSP_AUDIO_IN_MspInit+0x110>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
900014a8:	e9c3 555c 	strd	r5, r5, [r3, #368]	; 0x170
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
900014ac:	e9c3 585e 	strd	r5, r8, [r3, #376]	; 0x178
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
900014b0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    HAL_DMA_DeInit(&hdma_sai_rx);
900014b4:	f001 f8a8 	bl	90002608 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
900014b8:	4620      	mov	r0, r4
900014ba:	f001 f827 	bl	9000250c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
900014be:	2200      	movs	r2, #0
900014c0:	210f      	movs	r1, #15
900014c2:	2046      	movs	r0, #70	; 0x46
900014c4:	f000 ffb8 	bl	90002438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
900014c8:	2046      	movs	r0, #70	; 0x46
900014ca:	f000 ffe7 	bl	9000249c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
900014ce:	2200      	movs	r2, #0
900014d0:	210f      	movs	r1, #15
900014d2:	2028      	movs	r0, #40	; 0x28
900014d4:	f000 ffb0 	bl	90002438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
900014d8:	2028      	movs	r0, #40	; 0x28
900014da:	f000 ffdf 	bl	9000249c <HAL_NVIC_EnableIRQ>
}
900014de:	b00a      	add	sp, #40	; 0x28
900014e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900014e4:	40023800 	.word	0x40023800
900014e8:	40021800 	.word	0x40021800
900014ec:	40021c00 	.word	0x40021c00
900014f0:	40015c24 	.word	0x40015c24
900014f4:	20000148 	.word	0x20000148
900014f8:	400264b8 	.word	0x400264b8

900014fc <BSP_AUDIO_IN_InitEx.part.0>:
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
900014fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
900014fe:	460c      	mov	r4, r1
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
90001500:	4d1e      	ldr	r5, [pc, #120]	; (9000157c <BSP_AUDIO_IN_InitEx.part.0+0x80>)
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
90001502:	4606      	mov	r6, r0
    SAIx_In_DeInit();
90001504:	f7ff fda6 	bl	90001054 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
90001508:	4621      	mov	r1, r4
9000150a:	2200      	movs	r2, #0
9000150c:	f105 0084 	add.w	r0, r5, #132	; 0x84
90001510:	f007 fe5a 	bl	900091c8 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
90001514:	4628      	mov	r0, r5
90001516:	4b1a      	ldr	r3, [pc, #104]	; (90001580 <BSP_AUDIO_IN_InitEx.part.0+0x84>)
90001518:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
9000151c:	f003 fc83 	bl	90004e26 <HAL_SAI_GetState>
90001520:	4601      	mov	r1, r0
90001522:	b948      	cbnz	r0, 90001538 <BSP_AUDIO_IN_InitEx.part.0+0x3c>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
90001524:	9001      	str	r0, [sp, #4]
90001526:	f105 0084 	add.w	r0, r5, #132	; 0x84
9000152a:	f7ff fe1d 	bl	90001168 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
9000152e:	9901      	ldr	r1, [sp, #4]
90001530:	f105 0084 	add.w	r0, r5, #132	; 0x84
90001534:	f7ff ff58 	bl	900013e8 <BSP_AUDIO_IN_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
90001538:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
9000153c:	4f11      	ldr	r7, [pc, #68]	; (90001584 <BSP_AUDIO_IN_InitEx.part.0+0x88>)
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
9000153e:	4622      	mov	r2, r4
90001540:	f04f 0001 	mov.w	r0, #1
90001544:	bf0c      	ite	eq
90001546:	210a      	moveq	r1, #10
90001548:	2105      	movne	r1, #5
9000154a:	f7ff fd95 	bl	90001078 <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
9000154e:	68bb      	ldr	r3, [r7, #8]
90001550:	2034      	movs	r0, #52	; 0x34
90001552:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
90001554:	f648 1394 	movw	r3, #35220	; 0x8994
90001558:	4298      	cmp	r0, r3
9000155a:	d10d      	bne.n	90001578 <BSP_AUDIO_IN_InitEx.part.0+0x7c>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
9000155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000155e:	2034      	movs	r0, #52	; 0x34
90001560:	4798      	blx	r3
      audio_drv = &wm8994_drv;
90001562:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
90001566:	4623      	mov	r3, r4
90001568:	683d      	ldr	r5, [r7, #0]
9000156a:	2264      	movs	r2, #100	; 0x64
9000156c:	4631      	mov	r1, r6
9000156e:	2034      	movs	r0, #52	; 0x34
90001570:	47a8      	blx	r5
      ret = AUDIO_OK;
90001572:	2000      	movs	r0, #0
}
90001574:	b003      	add	sp, #12
90001576:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = AUDIO_ERROR;
90001578:	2001      	movs	r0, #1
9000157a:	e7fb      	b.n	90001574 <BSP_AUDIO_IN_InitEx.part.0+0x78>
9000157c:	20000148 	.word	0x20000148
90001580:	40015c24 	.word	0x40015c24
90001584:	2000002c 	.word	0x2000002c

90001588 <BSP_AUDIO_IN_Init>:
{
90001588:	4601      	mov	r1, r0
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
9000158a:	f44f 7000 	mov.w	r0, #512	; 0x200
9000158e:	f7ff bfb5 	b.w	900014fc <BSP_AUDIO_IN_InitEx.part.0>
	...

90001594 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
90001594:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
90001598:	4c1a      	ldr	r4, [pc, #104]	; (90001604 <LL_FillBuffer+0x70>)
{
9000159a:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
9000159c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
900015a0:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900015a2:	2234      	movs	r2, #52	; 0x34
{
900015a4:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
900015a6:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
900015a8:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900015aa:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
{
900015ae:	460e      	mov	r6, r1
900015b0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900015b4:	fb02 4303 	mla	r3, r2, r3, r4
900015b8:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900015bc:	1eab      	subs	r3, r5, #2
900015be:	425d      	negs	r5, r3
900015c0:	415d      	adcs	r5, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
900015c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900015c4:	006d      	lsls	r5, r5, #1
  hDma2dHandler.Init.OutputOffset = OffLine;      
900015c6:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
900015c8:	4b0f      	ldr	r3, [pc, #60]	; (90001608 <LL_FillBuffer+0x74>)
900015ca:	60a5      	str	r5, [r4, #8]
900015cc:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
900015ce:	f001 f984 	bl	900028da <HAL_DMA2D_Init>
900015d2:	b9a0      	cbnz	r0, 900015fe <LL_FillBuffer+0x6a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
900015d4:	4649      	mov	r1, r9
900015d6:	4620      	mov	r0, r4
900015d8:	f001 fa42 	bl	90002a60 <HAL_DMA2D_ConfigLayer>
900015dc:	b978      	cbnz	r0, 900015fe <LL_FillBuffer+0x6a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
900015de:	463b      	mov	r3, r7
900015e0:	4632      	mov	r2, r6
900015e2:	4651      	mov	r1, sl
900015e4:	4620      	mov	r0, r4
900015e6:	f8cd 8000 	str.w	r8, [sp]
900015ea:	f001 f9a2 	bl	90002932 <HAL_DMA2D_Start>
900015ee:	b930      	cbnz	r0, 900015fe <LL_FillBuffer+0x6a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
900015f0:	210a      	movs	r1, #10
900015f2:	4620      	mov	r0, r4
      }
    }
  } 
}
900015f4:	b002      	add	sp, #8
900015f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
900015fa:	f001 b9b4 	b.w	90002966 <HAL_DMA2D_PollForTransfer>
}
900015fe:	b002      	add	sp, #8
90001600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90001604:	200003b4 	.word	0x200003b4
90001608:	4002b000 	.word	0x4002b000

9000160c <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
9000160c:	4b04      	ldr	r3, [pc, #16]	; (90001620 <BSP_LCD_GetXSize+0x14>)
9000160e:	2134      	movs	r1, #52	; 0x34
90001610:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001614:	fb01 3302 	mla	r3, r1, r2, r3
}
90001618:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
9000161c:	4770      	bx	lr
9000161e:	bf00      	nop
90001620:	200003b4 	.word	0x200003b4

90001624 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
90001624:	4b04      	ldr	r3, [pc, #16]	; (90001638 <BSP_LCD_GetYSize+0x14>)
90001626:	2134      	movs	r1, #52	; 0x34
90001628:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
9000162c:	fb01 3302 	mla	r3, r1, r2, r3
}
90001630:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
90001634:	4770      	bx	lr
90001636:	bf00      	nop
90001638:	200003b4 	.word	0x200003b4

9000163c <BSP_LCD_LayerDefaultInit>:
{     
9000163c:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
9000163e:	2400      	movs	r4, #0
{     
90001640:	b08e      	sub	sp, #56	; 0x38
90001642:	460e      	mov	r6, r1
90001644:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
90001646:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
90001648:	f7ff ffe0 	bl	9000160c <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
9000164c:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
90001650:	f7ff ffe8 	bl	90001624 <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
90001654:	23ff      	movs	r3, #255	; 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90001656:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  layer_cfg.Backcolor.Blue = 0;
9000165a:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
9000165e:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.FBStartAdress = FB_Address;
90001662:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha0 = 0;
90001664:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
90001668:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
9000166c:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
9000166e:	4c0f      	ldr	r4, [pc, #60]	; (900016ac <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90001670:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
90001674:	f7ff ffca 	bl	9000160c <BSP_LCD_GetXSize>
90001678:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
9000167a:	f7ff ffd3 	bl	90001624 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
9000167e:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90001680:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90001682:	a901      	add	r1, sp, #4
90001684:	f104 0040 	add.w	r0, r4, #64	; 0x40
90001688:	f002 fb86 	bl	90003d98 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
9000168c:	230c      	movs	r3, #12
9000168e:	fb03 4005 	mla	r0, r3, r5, r4
90001692:	f04f 33ff 	mov.w	r3, #4294967295
90001696:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
9000169a:	4b05      	ldr	r3, [pc, #20]	; (900016b0 <BSP_LCD_LayerDefaultInit+0x74>)
9000169c:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
900016a0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
900016a4:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
}
900016a8:	b00e      	add	sp, #56	; 0x38
900016aa:	bd70      	pop	{r4, r5, r6, pc}
900016ac:	200003b4 	.word	0x200003b4
900016b0:	2000005c 	.word	0x2000005c

900016b4 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
900016b4:	4b01      	ldr	r3, [pc, #4]	; (900016bc <BSP_LCD_SelectLayer+0x8>)
900016b6:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
} 
900016ba:	4770      	bx	lr
900016bc:	200003b4 	.word	0x200003b4

900016c0 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
900016c0:	4b04      	ldr	r3, [pc, #16]	; (900016d4 <BSP_LCD_SetTextColor+0x14>)
900016c2:	210c      	movs	r1, #12
900016c4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
900016c8:	fb01 3302 	mla	r3, r1, r2, r3
900016cc:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
900016d0:	4770      	bx	lr
900016d2:	bf00      	nop
900016d4:	200003b4 	.word	0x200003b4

900016d8 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
900016d8:	4b04      	ldr	r3, [pc, #16]	; (900016ec <BSP_LCD_SetBackColor+0x14>)
900016da:	210c      	movs	r1, #12
900016dc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
900016e0:	fb01 3302 	mla	r3, r1, r2, r3
900016e4:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
900016e8:	4770      	bx	lr
900016ea:	bf00      	nop
900016ec:	200003b4 	.word	0x200003b4

900016f0 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
900016f0:	4b04      	ldr	r3, [pc, #16]	; (90001704 <BSP_LCD_SetFont+0x14>)
900016f2:	210c      	movs	r1, #12
900016f4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
900016f8:	fb01 3302 	mla	r3, r1, r2, r3
900016fc:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
90001700:	4770      	bx	lr
90001702:	bf00      	nop
90001704:	200003b4 	.word	0x200003b4

90001708 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
90001708:	4b04      	ldr	r3, [pc, #16]	; (9000171c <BSP_LCD_GetFont+0x14>)
9000170a:	210c      	movs	r1, #12
9000170c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001710:	fb01 3302 	mla	r3, r1, r2, r3
}
90001714:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
90001718:	4770      	bx	lr
9000171a:	bf00      	nop
9000171c:	200003b4 	.word	0x200003b4

90001720 <BSP_LCD_Clear>:
{ 
90001720:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90001722:	4c0c      	ldr	r4, [pc, #48]	; (90001754 <BSP_LCD_Clear+0x34>)
{ 
90001724:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
90001726:	f7ff ff71 	bl	9000160c <BSP_LCD_GetXSize>
9000172a:	9003      	str	r0, [sp, #12]
9000172c:	f8d4 60e8 	ldr.w	r6, [r4, #232]	; 0xe8
90001730:	f7ff ff78 	bl	90001624 <BSP_LCD_GetYSize>
90001734:	2134      	movs	r1, #52	; 0x34
90001736:	4603      	mov	r3, r0
90001738:	9501      	str	r5, [sp, #4]
9000173a:	4630      	mov	r0, r6
9000173c:	fb01 4406 	mla	r4, r1, r6, r4
90001740:	2100      	movs	r1, #0
90001742:	9a03      	ldr	r2, [sp, #12]
90001744:	9100      	str	r1, [sp, #0]
90001746:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000174a:	f7ff ff23 	bl	90001594 <LL_FillBuffer>
}
9000174e:	b004      	add	sp, #16
90001750:	bd70      	pop	{r4, r5, r6, pc}
90001752:	bf00      	nop
90001754:	200003b4 	.word	0x200003b4

90001758 <BSP_LCD_DrawPixel>:
{
90001758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000175c:	4d0d      	ldr	r5, [pc, #52]	; (90001794 <BSP_LCD_DrawPixel+0x3c>)
{
9000175e:	4614      	mov	r4, r2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
90001760:	2234      	movs	r2, #52	; 0x34
{
90001762:	4606      	mov	r6, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001764:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
{
90001768:	460f      	mov	r7, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
9000176a:	fb02 5503 	mla	r5, r2, r3, r5
9000176e:	f7ff ff4d 	bl	9000160c <BSP_LCD_GetXSize>
90001772:	fb00 6007 	mla	r0, r0, r7, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001776:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
9000177a:	f8d5 809c 	ldr.w	r8, [r5, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000177e:	2b02      	cmp	r3, #2
90001780:	d104      	bne.n	9000178c <BSP_LCD_DrawPixel+0x34>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
90001782:	b2a4      	uxth	r4, r4
90001784:	f828 4010 	strh.w	r4, [r8, r0, lsl #1]
}
90001788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
9000178c:	f848 4020 	str.w	r4, [r8, r0, lsl #2]
}
90001790:	e7fa      	b.n	90001788 <BSP_LCD_DrawPixel+0x30>
90001792:	bf00      	nop
90001794:	200003b4 	.word	0x200003b4

90001798 <BSP_LCD_DisplayChar>:
{
90001798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000179c:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
9000179e:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
900017a0:	f04f 0800 	mov.w	r8, #0
{
900017a4:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
900017a8:	4929      	ldr	r1, [pc, #164]	; (90001850 <BSP_LCD_DisplayChar+0xb8>)
900017aa:	200c      	movs	r0, #12
900017ac:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	; 0xe8
900017b0:	fb00 110b 	mla	r1, r0, fp, r1
900017b4:	f8d1 10f4 	ldr.w	r1, [r1, #244]	; 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
900017b8:	f8b1 9004 	ldrh.w	r9, [r1, #4]
900017bc:	f8b1 a006 	ldrh.w	sl, [r1, #6]
900017c0:	f109 0607 	add.w	r6, r9, #7
900017c4:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
900017c6:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
900017ca:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
900017cc:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
900017d0:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
900017d4:	f109 32ff 	add.w	r2, r9, #4294967295
900017d8:	fa52 f380 	uxtab	r3, r2, r0
900017dc:	9302      	str	r3, [sp, #8]
900017de:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
900017e0:	45d0      	cmp	r8, sl
900017e2:	eb03 0108 	add.w	r1, r3, r8
900017e6:	b289      	uxth	r1, r1
900017e8:	d302      	bcc.n	900017f0 <BSP_LCD_DisplayChar+0x58>
}
900017ea:	b005      	add	sp, #20
900017ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
900017f0:	2e01      	cmp	r6, #1
      line =  pchar[0];      
900017f2:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
900017f4:	d004      	beq.n	90001800 <BSP_LCD_DisplayChar+0x68>
900017f6:	2e02      	cmp	r6, #2
900017f8:	d109      	bne.n	9000180e <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
900017fa:	882c      	ldrh	r4, [r5, #0]
900017fc:	ba64      	rev16	r4, r4
900017fe:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
90001800:	2700      	movs	r7, #0
90001802:	45b9      	cmp	r9, r7
90001804:	d80a      	bhi.n	9000181c <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
90001806:	f108 0801 	add.w	r8, r8, #1
9000180a:	4435      	add	r5, r6
9000180c:	e7e7      	b.n	900017de <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
9000180e:	786a      	ldrb	r2, [r5, #1]
90001810:	0424      	lsls	r4, r4, #16
90001812:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
90001816:	78aa      	ldrb	r2, [r5, #2]
90001818:	4314      	orrs	r4, r2
      break;
9000181a:	e7f1      	b.n	90001800 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
9000181c:	9b00      	ldr	r3, [sp, #0]
9000181e:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
90001820:	9103      	str	r1, [sp, #12]
90001822:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
90001824:	9b02      	ldr	r3, [sp, #8]
90001826:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
9000182a:	4b09      	ldr	r3, [pc, #36]	; (90001850 <BSP_LCD_DisplayChar+0xb8>)
9000182c:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
9000182e:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
90001830:	fa02 f20c 	lsl.w	r2, r2, ip
90001834:	4222      	tst	r2, r4
90001836:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
9000183a:	fb02 320b 	mla	r2, r2, fp, r3
9000183e:	bf14      	ite	ne
90001840:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
90001844:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
90001848:	f7ff ff86 	bl	90001758 <BSP_LCD_DrawPixel>
9000184c:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
9000184e:	e7d8      	b.n	90001802 <BSP_LCD_DisplayChar+0x6a>
90001850:	200003b4 	.word	0x200003b4

90001854 <BSP_LCD_DisplayStringAt>:
{
90001854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90001858:	4699      	mov	r9, r3
9000185a:	4605      	mov	r5, r0
9000185c:	460f      	mov	r7, r1
9000185e:	4616      	mov	r6, r2
  uint8_t  *ptr = Text;
90001860:	4613      	mov	r3, r2
90001862:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
90001864:	f813 2b01 	ldrb.w	r2, [r3], #1
90001868:	2a00      	cmp	r2, #0
9000186a:	d1fa      	bne.n	90001862 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
9000186c:	f7ff fece 	bl	9000160c <BSP_LCD_GetXSize>
90001870:	4b22      	ldr	r3, [pc, #136]	; (900018fc <BSP_LCD_DisplayStringAt+0xa8>)
90001872:	210c      	movs	r1, #12
  switch (Mode)
90001874:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90001878:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
9000187c:	fb01 3302 	mla	r3, r1, r2, r3
90001880:	f8d3 80f4 	ldr.w	r8, [r3, #244]	; 0xf4
90001884:	f8b8 3004 	ldrh.w	r3, [r8, #4]
90001888:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
9000188c:	d01d      	beq.n	900018ca <BSP_LCD_DisplayStringAt+0x76>
9000188e:	f1b9 0f02 	cmp.w	r9, #2
90001892:	d021      	beq.n	900018d8 <BSP_LCD_DisplayStringAt+0x84>
  if ((ref_column < 1) || (ref_column >= 0x8000))
90001894:	b22b      	sxth	r3, r5
    ref_column = 1;
90001896:	2400      	movs	r4, #0
90001898:	2b00      	cmp	r3, #0
9000189a:	bfd8      	it	le
9000189c:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
9000189e:	f7ff feb5 	bl	9000160c <BSP_LCD_GetXSize>
900018a2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
900018a6:	b2a2      	uxth	r2, r4
900018a8:	f816 9004 	ldrb.w	r9, [r6, r4]
900018ac:	3401      	adds	r4, #1
900018ae:	fb03 0012 	mls	r0, r3, r2, r0
900018b2:	b280      	uxth	r0, r0
900018b4:	4298      	cmp	r0, r3
900018b6:	bf34      	ite	cc
900018b8:	2000      	movcc	r0, #0
900018ba:	2001      	movcs	r0, #1
900018bc:	f1b9 0f00 	cmp.w	r9, #0
900018c0:	bf08      	it	eq
900018c2:	2000      	moveq	r0, #0
900018c4:	b978      	cbnz	r0, 900018e6 <BSP_LCD_DisplayStringAt+0x92>
}
900018c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
900018ca:	1b34      	subs	r4, r6, r4
900018cc:	4404      	add	r4, r0
900018ce:	435c      	muls	r4, r3
900018d0:	eb05 0454 	add.w	r4, r5, r4, lsr #1
900018d4:	b2a5      	uxth	r5, r4
      break;
900018d6:	e7dd      	b.n	90001894 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
900018d8:	1b34      	subs	r4, r6, r4
900018da:	4404      	add	r4, r0
900018dc:	fb14 f403 	smulbb	r4, r4, r3
900018e0:	1b60      	subs	r0, r4, r5
900018e2:	b285      	uxth	r5, r0
      break;
900018e4:	e7d6      	b.n	90001894 <BSP_LCD_DisplayStringAt+0x40>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
900018e6:	4628      	mov	r0, r5
900018e8:	464a      	mov	r2, r9
900018ea:	4639      	mov	r1, r7
900018ec:	f7ff ff54 	bl	90001798 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
900018f0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
900018f4:	442b      	add	r3, r5
900018f6:	b29d      	uxth	r5, r3
    i++;
900018f8:	e7d1      	b.n	9000189e <BSP_LCD_DisplayStringAt+0x4a>
900018fa:	bf00      	nop
900018fc:	200003b4 	.word	0x200003b4

90001900 <BSP_LCD_DisplayStringAtLine>:
{  
90001900:	b513      	push	{r0, r1, r4, lr}
90001902:	4604      	mov	r4, r0
90001904:	9101      	str	r1, [sp, #4]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
90001906:	f7ff feff 	bl	90001708 <BSP_LCD_GetFont>
9000190a:	88c3      	ldrh	r3, [r0, #6]
9000190c:	9a01      	ldr	r2, [sp, #4]
9000190e:	2000      	movs	r0, #0
90001910:	fb13 f104 	smulbb	r1, r3, r4
90001914:	2303      	movs	r3, #3
90001916:	b289      	uxth	r1, r1
}
90001918:	b002      	add	sp, #8
9000191a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
9000191e:	f7ff bf99 	b.w	90001854 <BSP_LCD_DisplayStringAt>
	...

90001924 <BSP_LCD_FillRect>:
{
90001924:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001928:	4d1b      	ldr	r5, [pc, #108]	; (90001998 <BSP_LCD_FillRect+0x74>)
{
9000192a:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
9000192c:	230c      	movs	r3, #12
{
9000192e:	4604      	mov	r4, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001930:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
{
90001934:	4617      	mov	r7, r2
90001936:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001938:	fb03 5306 	mla	r3, r3, r6, r5
9000193c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
90001940:	f7ff febe 	bl	900016c0 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001944:	2334      	movs	r3, #52	; 0x34
90001946:	fb03 5306 	mla	r3, r3, r6, r5
9000194a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
9000194e:	f8d3 a09c 	ldr.w	sl, [r3, #156]	; 0x9c
90001952:	2a02      	cmp	r2, #2
90001954:	d118      	bne.n	90001988 <BSP_LCD_FillRect+0x64>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001956:	f7ff fe59 	bl	9000160c <BSP_LCD_GetXSize>
9000195a:	fb00 4009 	mla	r0, r0, r9, r4
9000195e:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
90001962:	f7ff fe53 	bl	9000160c <BSP_LCD_GetXSize>
90001966:	230c      	movs	r3, #12
90001968:	1bc0      	subs	r0, r0, r7
9000196a:	463a      	mov	r2, r7
9000196c:	fb03 5106 	mla	r1, r3, r6, r5
90001970:	f8d1 30ec 	ldr.w	r3, [r1, #236]	; 0xec
90001974:	4651      	mov	r1, sl
90001976:	9000      	str	r0, [sp, #0]
90001978:	4630      	mov	r0, r6
9000197a:	9301      	str	r3, [sp, #4]
9000197c:	4643      	mov	r3, r8
9000197e:	f7ff fe09 	bl	90001594 <LL_FillBuffer>
}
90001982:	b002      	add	sp, #8
90001984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001988:	f7ff fe40 	bl	9000160c <BSP_LCD_GetXSize>
9000198c:	fb00 4109 	mla	r1, r0, r9, r4
90001990:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
90001994:	e7e5      	b.n	90001962 <BSP_LCD_FillRect+0x3e>
90001996:	bf00      	nop
90001998:	200003b4 	.word	0x200003b4

9000199c <BSP_LCD_ClearStringLine>:
{
9000199c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
9000199e:	4c12      	ldr	r4, [pc, #72]	; (900019e8 <BSP_LCD_ClearStringLine+0x4c>)
900019a0:	260c      	movs	r6, #12
900019a2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
900019a6:	fb06 4303 	mla	r3, r6, r3, r4
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
900019aa:	e9d3 523b 	ldrd	r5, r2, [r3, #236]	; 0xec
900019ae:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
900019b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900019b6:	88df      	ldrh	r7, [r3, #6]
900019b8:	fb10 f007 	smulbb	r0, r0, r7
900019bc:	b281      	uxth	r1, r0
900019be:	9101      	str	r1, [sp, #4]
900019c0:	f7ff fe24 	bl	9000160c <BSP_LCD_GetXSize>
900019c4:	463b      	mov	r3, r7
900019c6:	b282      	uxth	r2, r0
900019c8:	9901      	ldr	r1, [sp, #4]
900019ca:	2000      	movs	r0, #0
900019cc:	f7ff ffaa 	bl	90001924 <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = color_backup;
900019d0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
900019d4:	4628      	mov	r0, r5
  DrawProp[ActiveLayer].TextColor = color_backup;
900019d6:	fb06 4403 	mla	r4, r6, r3, r4
900019da:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
900019de:	b003      	add	sp, #12
900019e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
900019e4:	f7ff be6c 	b.w	900016c0 <BSP_LCD_SetTextColor>
900019e8:	200003b4 	.word	0x200003b4

900019ec <BSP_LCD_DisplayOn>:
{
900019ec:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
900019ee:	4b09      	ldr	r3, [pc, #36]	; (90001a14 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
900019f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
900019f4:	4808      	ldr	r0, [pc, #32]	; (90001a18 <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
900019f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900019f8:	6993      	ldr	r3, [r2, #24]
900019fa:	f043 0301 	orr.w	r3, r3, #1
900019fe:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
90001a00:	2201      	movs	r2, #1
90001a02:	f001 f957 	bl	90002cb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
90001a06:	2201      	movs	r2, #1
90001a08:	2108      	movs	r1, #8
90001a0a:	4804      	ldr	r0, [pc, #16]	; (90001a1c <BSP_LCD_DisplayOn+0x30>)
}
90001a0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
90001a10:	f001 b950 	b.w	90002cb4 <HAL_GPIO_WritePin>
90001a14:	200003b4 	.word	0x200003b4
90001a18:	40022000 	.word	0x40022000
90001a1c:	40022800 	.word	0x40022800

90001a20 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
90001a20:	4b4b      	ldr	r3, [pc, #300]	; (90001b50 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001a22:	484c      	ldr	r0, [pc, #304]	; (90001b54 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
90001a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90001a26:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
90001a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
90001a2c:	645a      	str	r2, [r3, #68]	; 0x44
{
90001a2e:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
90001a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001a32:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
90001a34:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001a36:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
90001a38:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
90001a3c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90001a40:	4e45      	ldr	r6, [pc, #276]	; (90001b58 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
90001a42:	9200      	str	r2, [sp, #0]
90001a44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
90001a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001a48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
90001a4c:	631a      	str	r2, [r3, #48]	; 0x30
90001a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001a50:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
90001a54:	9201      	str	r2, [sp, #4]
90001a56:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001a5a:	f042 0210 	orr.w	r2, r2, #16
90001a5e:	631a      	str	r2, [r3, #48]	; 0x30
90001a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001a62:	f002 0210 	and.w	r2, r2, #16
90001a66:	9202      	str	r2, [sp, #8]
90001a68:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90001a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90001a70:	631a      	str	r2, [r3, #48]	; 0x30
90001a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001a74:	f002 0240 	and.w	r2, r2, #64	; 0x40
90001a78:	9203      	str	r2, [sp, #12]
90001a7a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90001a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001a7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90001a82:	631a      	str	r2, [r3, #48]	; 0x30
90001a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001a86:	f402 7280 	and.w	r2, r2, #256	; 0x100
90001a8a:	9204      	str	r2, [sp, #16]
90001a8c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90001a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90001a94:	631a      	str	r2, [r3, #48]	; 0x30
90001a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001a98:	f402 7200 	and.w	r2, r2, #512	; 0x200
90001a9c:	9205      	str	r2, [sp, #20]
90001a9e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90001aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001aa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90001aa6:	631a      	str	r2, [r3, #48]	; 0x30
90001aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001aaa:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90001aae:	9206      	str	r2, [sp, #24]
90001ab0:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
90001ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90001ab8:	631a      	str	r2, [r3, #48]	; 0x30
90001aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001abc:	f402 7280 	and.w	r2, r2, #256	; 0x100
90001ac0:	9207      	str	r2, [sp, #28]
90001ac2:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90001ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90001aca:	631a      	str	r2, [r3, #48]	; 0x30
90001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
90001ace:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
90001ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90001ad4:	9308      	str	r3, [sp, #32]
90001ad6:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001ad8:	2310      	movs	r3, #16
90001ada:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001ade:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90001ae0:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90001ae4:	f001 f804 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
90001ae8:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90001aea:	a909      	add	r1, sp, #36	; 0x24
90001aec:	481b      	ldr	r0, [pc, #108]	; (90001b5c <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
90001aee:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001af0:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90001af4:	f000 fffc 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
90001af8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90001afc:	a909      	add	r1, sp, #36	; 0x24
90001afe:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001b00:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001b02:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90001b06:	f000 fff3 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
90001b0a:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90001b0e:	a909      	add	r1, sp, #36	; 0x24
90001b10:	4813      	ldr	r0, [pc, #76]	; (90001b60 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001b12:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001b14:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90001b18:	f000 ffea 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
90001b1c:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90001b1e:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90001b20:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90001b22:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90001b24:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90001b28:	4c0e      	ldr	r4, [pc, #56]	; (90001b64 <BSP_LCD_MspInit+0x144>)
90001b2a:	4620      	mov	r0, r4
90001b2c:	f000 ffe0 	bl	90002af0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90001b30:	a909      	add	r1, sp, #36	; 0x24
90001b32:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
90001b34:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90001b36:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90001b38:	f000 ffda 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
90001b3c:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90001b3e:	a909      	add	r1, sp, #36	; 0x24
90001b40:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
90001b42:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90001b46:	f000 ffd3 	bl	90002af0 <HAL_GPIO_Init>
}
90001b4a:	b00f      	add	sp, #60	; 0x3c
90001b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
90001b4e:	bf00      	nop
90001b50:	40023800 	.word	0x40023800
90001b54:	40021000 	.word	0x40021000
90001b58:	40022000 	.word	0x40022000
90001b5c:	40021800 	.word	0x40021800
90001b60:	40022400 	.word	0x40022400
90001b64:	40022800 	.word	0x40022800

90001b68 <BSP_LCD_Init>:
{    
90001b68:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90001b6a:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
90001b6c:	4c24      	ldr	r4, [pc, #144]	; (90001c00 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90001b6e:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90001b70:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90001b72:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90001b76:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90001b7a:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90001b7e:	230b      	movs	r3, #11
90001b80:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90001b84:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90001b88:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90001b8a:	e9c4 3019 	strd	r3, r0, [r4, #100]	; 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90001b8e:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90001b92:	f104 0040 	add.w	r0, r4, #64	; 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90001b96:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	; 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90001b9a:	f007 fb4b 	bl	90009234 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90001b9e:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
90001ba2:	f44f 7388 	mov.w	r3, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
90001ba6:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90001ba8:	e9c4 e328 	strd	lr, r3, [r4, #160]	; 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
90001bac:	2300      	movs	r3, #0
90001bae:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
90001bb2:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
90001bb6:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001bba:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hLtdcHandler.Instance = LTDC;
90001bbe:	4b11      	ldr	r3, [pc, #68]	; (90001c04 <BSP_LCD_Init+0x9c>)
90001bc0:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
90001bc4:	f002 f915 	bl	90003df2 <HAL_LTDC_GetState>
90001bc8:	4601      	mov	r1, r0
90001bca:	b918      	cbnz	r0, 90001bd4 <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
90001bcc:	f104 0040 	add.w	r0, r4, #64	; 0x40
90001bd0:	f7ff ff26 	bl	90001a20 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
90001bd4:	480c      	ldr	r0, [pc, #48]	; (90001c08 <BSP_LCD_Init+0xa0>)
90001bd6:	f002 f873 	bl	90003cc0 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
90001bda:	2201      	movs	r2, #1
90001bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90001be0:	480a      	ldr	r0, [pc, #40]	; (90001c0c <BSP_LCD_Init+0xa4>)
90001be2:	f001 f867 	bl	90002cb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
90001be6:	2201      	movs	r2, #1
90001be8:	2108      	movs	r1, #8
90001bea:	4809      	ldr	r0, [pc, #36]	; (90001c10 <BSP_LCD_Init+0xa8>)
90001bec:	f001 f862 	bl	90002cb4 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
90001bf0:	f000 fa7c 	bl	900020ec <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
90001bf4:	4807      	ldr	r0, [pc, #28]	; (90001c14 <BSP_LCD_Init+0xac>)
90001bf6:	f7ff fd7b 	bl	900016f0 <BSP_LCD_SetFont>
}
90001bfa:	2000      	movs	r0, #0
90001bfc:	bd10      	pop	{r4, pc}
90001bfe:	bf00      	nop
90001c00:	200003b4 	.word	0x200003b4
90001c04:	40016800 	.word	0x40016800
90001c08:	200003f4 	.word	0x200003f4
90001c0c:	40022000 	.word	0x40022000
90001c10:	40022800 	.word	0x40022800
90001c14:	2000005c 	.word	0x2000005c

90001c18 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
90001c18:	b570      	push	{r4, r5, r6, lr}
90001c1a:	b08a      	sub	sp, #40	; 0x28
90001c1c:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
90001c1e:	f001 ffc7 	bl	90003bb0 <HAL_I2C_GetState>
90001c22:	2800      	cmp	r0, #0
90001c24:	f040 8096 	bne.w	90001d54 <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90001c28:	4b4b      	ldr	r3, [pc, #300]	; (90001d58 <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
90001c2a:	2600      	movs	r6, #0
90001c2c:	4c4b      	ldr	r4, [pc, #300]	; (90001d5c <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90001c2e:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
90001c30:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
90001c32:	bf0c      	ite	eq
90001c34:	4a4a      	ldreq	r2, [pc, #296]	; (90001d60 <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
90001c36:	4a4b      	ldrne	r2, [pc, #300]	; (90001d64 <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90001c38:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
90001c3a:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
90001c3c:	4a4a      	ldr	r2, [pc, #296]	; (90001d68 <I2Cx_Init+0x150>)
90001c3e:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001c42:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001c46:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90001c4a:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90001c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90001c50:	d143      	bne.n	90001cda <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90001c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90001c56:	2080      	movs	r0, #128	; 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90001c58:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90001c5c:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90001c5e:	6323      	str	r3, [r4, #48]	; 0x30
90001c60:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
90001c62:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90001c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
90001c68:	9301      	str	r3, [sp, #4]
90001c6a:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90001c6c:	2312      	movs	r3, #18
90001c6e:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90001c72:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90001c74:	483d      	ldr	r0, [pc, #244]	; (90001d6c <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90001c76:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90001c7a:	f000 ff39 	bl	90002af0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
90001c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90001c82:	a905      	add	r1, sp, #20
90001c84:	4839      	ldr	r0, [pc, #228]	; (90001d6c <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
90001c86:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90001c88:	f000 ff32 	bl	90002af0 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
90001c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
90001c8e:	4632      	mov	r2, r6
90001c90:	210f      	movs	r1, #15
90001c92:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
90001c94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90001c98:	6423      	str	r3, [r4, #64]	; 0x40
90001c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
90001c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90001ca0:	9302      	str	r3, [sp, #8]
90001ca2:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
90001ca4:	6a23      	ldr	r3, [r4, #32]
90001ca6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90001caa:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
90001cac:	6a23      	ldr	r3, [r4, #32]
90001cae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
90001cb2:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
90001cb4:	f000 fbc0 	bl	90002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
90001cb8:	2048      	movs	r0, #72	; 0x48
90001cba:	f000 fbef 	bl	9000249c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
90001cbe:	2049      	movs	r0, #73	; 0x49
90001cc0:	4632      	mov	r2, r6
90001cc2:	210f      	movs	r1, #15
90001cc4:	f000 fbb8 	bl	90002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
90001cc8:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
90001cca:	f000 fbe7 	bl	9000249c <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
90001cce:	4628      	mov	r0, r5
  }
}
90001cd0:	b00a      	add	sp, #40	; 0x28
90001cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
90001cd6:	f001 bd8d 	b.w	900037f4 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90001cda:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90001cde:	f44f 7280 	mov.w	r2, #256	; 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
90001ce2:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90001ce4:	4822      	ldr	r0, [pc, #136]	; (90001d70 <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90001ce6:	6323      	str	r3, [r4, #48]	; 0x30
90001ce8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
90001cea:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90001cec:	f003 0302 	and.w	r3, r3, #2
90001cf0:	9303      	str	r3, [sp, #12]
90001cf2:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90001cf4:	2312      	movs	r3, #18
90001cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
90001cfa:	2304      	movs	r3, #4
90001cfc:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90001d00:	a905      	add	r1, sp, #20
90001d02:	f000 fef5 	bl	90002af0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
90001d06:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90001d0a:	a905      	add	r1, sp, #20
90001d0c:	4818      	ldr	r0, [pc, #96]	; (90001d70 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
90001d0e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90001d10:	f000 feee 	bl	90002af0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
90001d14:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
90001d16:	4632      	mov	r2, r6
90001d18:	210f      	movs	r1, #15
90001d1a:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
90001d1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90001d20:	6423      	str	r3, [r4, #64]	; 0x40
90001d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
90001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90001d28:	9304      	str	r3, [sp, #16]
90001d2a:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
90001d2c:	6a23      	ldr	r3, [r4, #32]
90001d2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90001d32:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
90001d34:	6a23      	ldr	r3, [r4, #32]
90001d36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
90001d3a:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
90001d3c:	f000 fb7c 	bl	90002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
90001d40:	201f      	movs	r0, #31
90001d42:	f000 fbab 	bl	9000249c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
90001d46:	2020      	movs	r0, #32
90001d48:	4632      	mov	r2, r6
90001d4a:	210f      	movs	r1, #15
90001d4c:	f000 fb74 	bl	90002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
90001d50:	2020      	movs	r0, #32
90001d52:	e7ba      	b.n	90001cca <I2Cx_Init+0xb2>
}
90001d54:	b00a      	add	sp, #40	; 0x28
90001d56:	bd70      	pop	{r4, r5, r6, pc}
90001d58:	2000053c 	.word	0x2000053c
90001d5c:	40023800 	.word	0x40023800
90001d60:	40005c00 	.word	0x40005c00
90001d64:	40005400 	.word	0x40005400
90001d68:	40912732 	.word	0x40912732
90001d6c:	40021c00 	.word	0x40021c00
90001d70:	40020400 	.word	0x40020400

90001d74 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
90001d74:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90001d76:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
90001d7a:	b085      	sub	sp, #20
90001d7c:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90001d7e:	9402      	str	r4, [sp, #8]
90001d80:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
90001d84:	9401      	str	r4, [sp, #4]
90001d86:	9c08      	ldr	r4, [sp, #32]
90001d88:	9400      	str	r4, [sp, #0]
90001d8a:	f001 fd9e 	bl	900038ca <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
90001d8e:	4604      	mov	r4, r0
90001d90:	b128      	cbz	r0, 90001d9e <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
90001d92:	4628      	mov	r0, r5
90001d94:	f001 fd80 	bl	90003898 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
90001d98:	4628      	mov	r0, r5
90001d9a:	f7ff ff3d 	bl	90001c18 <I2Cx_Init>
}
90001d9e:	4620      	mov	r0, r4
90001da0:	b005      	add	sp, #20
90001da2:	bd30      	pop	{r4, r5, pc}

90001da4 <I2Cx_ReadMultiple>:
{
90001da4:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90001da6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
90001daa:	b085      	sub	sp, #20
90001dac:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90001dae:	9402      	str	r4, [sp, #8]
90001db0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
90001db4:	9401      	str	r4, [sp, #4]
90001db6:	9c08      	ldr	r4, [sp, #32]
90001db8:	9400      	str	r4, [sp, #0]
90001dba:	f001 fe3d 	bl	90003a38 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
90001dbe:	4604      	mov	r4, r0
90001dc0:	b128      	cbz	r0, 90001dce <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
90001dc2:	4628      	mov	r0, r5
90001dc4:	f001 fd68 	bl	90003898 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
90001dc8:	4628      	mov	r0, r5
90001dca:	f7ff ff25 	bl	90001c18 <I2Cx_Init>
}
90001dce:	4620      	mov	r0, r4
90001dd0:	b005      	add	sp, #20
90001dd2:	bd30      	pop	{r4, r5, pc}

90001dd4 <BSP_LED_Init>:
{
90001dd4:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
90001dd6:	4604      	mov	r4, r0
{
90001dd8:	b087      	sub	sp, #28
  if (Led == LED1)
90001dda:	b9c8      	cbnz	r0, 90001e10 <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
90001ddc:	4b0d      	ldr	r3, [pc, #52]	; (90001e14 <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
90001dde:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
90001de0:	a901      	add	r1, sp, #4
90001de2:	480d      	ldr	r0, [pc, #52]	; (90001e18 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
90001de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90001dea:	631a      	str	r2, [r3, #48]	; 0x30
90001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001df2:	9300      	str	r3, [sp, #0]
90001df4:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
90001df6:	2301      	movs	r3, #1
90001df8:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
90001dfc:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001dfe:	2303      	movs	r3, #3
90001e00:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
90001e02:	f000 fe75 	bl	90002af0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
90001e06:	4622      	mov	r2, r4
90001e08:	4629      	mov	r1, r5
90001e0a:	4803      	ldr	r0, [pc, #12]	; (90001e18 <BSP_LED_Init+0x44>)
90001e0c:	f000 ff52 	bl	90002cb4 <HAL_GPIO_WritePin>
}
90001e10:	b007      	add	sp, #28
90001e12:	bd30      	pop	{r4, r5, pc}
90001e14:	40023800 	.word	0x40023800
90001e18:	40022000 	.word	0x40022000

90001e1c <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
90001e1c:	4801      	ldr	r0, [pc, #4]	; (90001e24 <AUDIO_IO_Init+0x8>)
90001e1e:	f7ff befb 	b.w	90001c18 <I2Cx_Init>
90001e22:	bf00      	nop
90001e24:	2000053c 	.word	0x2000053c

90001e28 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
90001e28:	4770      	bx	lr
	...

90001e2c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
90001e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
90001e2e:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
90001e30:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
90001e32:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
90001e36:	f10d 020e 	add.w	r2, sp, #14
90001e3a:	9301      	str	r3, [sp, #4]
90001e3c:	9200      	str	r2, [sp, #0]
90001e3e:	460a      	mov	r2, r1
90001e40:	4601      	mov	r1, r0
90001e42:	4803      	ldr	r0, [pc, #12]	; (90001e50 <AUDIO_IO_Write+0x24>)
90001e44:	f7ff ff96 	bl	90001d74 <I2Cx_WriteMultiple>
}
90001e48:	b005      	add	sp, #20
90001e4a:	f85d fb04 	ldr.w	pc, [sp], #4
90001e4e:	bf00      	nop
90001e50:	2000053c 	.word	0x2000053c

90001e54 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
90001e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
90001e56:	2300      	movs	r3, #0
{
90001e58:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
90001e5a:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
90001e5e:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
90001e62:	2302      	movs	r3, #2
90001e64:	9100      	str	r1, [sp, #0]
90001e66:	4601      	mov	r1, r0
90001e68:	9301      	str	r3, [sp, #4]
90001e6a:	4805      	ldr	r0, [pc, #20]	; (90001e80 <AUDIO_IO_Read+0x2c>)
90001e6c:	f7ff ff9a 	bl	90001da4 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
90001e70:	f8bd 000e 	ldrh.w	r0, [sp, #14]
90001e74:	ba40      	rev16	r0, r0
  
  read_value = tmp;
  
  return read_value;
}
90001e76:	b280      	uxth	r0, r0
90001e78:	b005      	add	sp, #20
90001e7a:	f85d fb04 	ldr.w	pc, [sp], #4
90001e7e:	bf00      	nop
90001e80:	2000053c 	.word	0x2000053c

90001e84 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
90001e84:	f000 bab4 	b.w	900023f0 <HAL_Delay>

90001e88 <TS_IO_Init>:
90001e88:	f7ff bfc8 	b.w	90001e1c <AUDIO_IO_Init>

90001e8c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
90001e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90001e8e:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
90001e92:	f10d 020f 	add.w	r2, sp, #15
90001e96:	2301      	movs	r3, #1
90001e98:	9200      	str	r2, [sp, #0]
90001e9a:	460a      	mov	r2, r1
90001e9c:	4601      	mov	r1, r0
90001e9e:	9301      	str	r3, [sp, #4]
90001ea0:	4802      	ldr	r0, [pc, #8]	; (90001eac <TS_IO_Write+0x20>)
90001ea2:	f7ff ff67 	bl	90001d74 <I2Cx_WriteMultiple>
}
90001ea6:	b005      	add	sp, #20
90001ea8:	f85d fb04 	ldr.w	pc, [sp], #4
90001eac:	2000053c 	.word	0x2000053c

90001eb0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
90001eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
90001eb2:	2300      	movs	r3, #0
{
90001eb4:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
90001eb6:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
90001eba:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
90001ebe:	2301      	movs	r3, #1
90001ec0:	9100      	str	r1, [sp, #0]
90001ec2:	4601      	mov	r1, r0
90001ec4:	9301      	str	r3, [sp, #4]
90001ec6:	4804      	ldr	r0, [pc, #16]	; (90001ed8 <TS_IO_Read+0x28>)
90001ec8:	f7ff ff6c 	bl	90001da4 <I2Cx_ReadMultiple>

  return read_value;
}
90001ecc:	f89d 000f 	ldrb.w	r0, [sp, #15]
90001ed0:	b005      	add	sp, #20
90001ed2:	f85d fb04 	ldr.w	pc, [sp], #4
90001ed6:	bf00      	nop
90001ed8:	2000053c 	.word	0x2000053c

90001edc <TS_IO_Delay>:
90001edc:	f000 ba88 	b.w	900023f0 <HAL_Delay>

90001ee0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
90001ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
90001ee4:	4c21      	ldr	r4, [pc, #132]	; (90001f6c <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001ee6:	2710      	movs	r7, #16
90001ee8:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
90001eea:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001eee:	19e5      	adds	r5, r4, r7
90001ef0:	4621      	mov	r1, r4
{
90001ef2:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001ef8:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
90001efa:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001efe:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
90001f02:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001f06:	f002 ffb2 	bl	90004e6e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
90001f0a:	4630      	mov	r0, r6
90001f0c:	f000 fa70 	bl	900023f0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
90001f10:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
90001f12:	4621      	mov	r1, r4
90001f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001f18:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001f1a:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
90001f1e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
90001f22:	f002 ffa4 	bl	90004e6e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
90001f26:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001f28:	4621      	mov	r1, r4
90001f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001f2e:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001f30:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
90001f34:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
90001f36:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001f3a:	f002 ff98 	bl	90004e6e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90001f3e:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001f42:	4621      	mov	r1, r4
90001f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90001f48:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
90001f4a:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001f4c:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
90001f4e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90001f50:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
90001f54:	9b01      	ldr	r3, [sp, #4]
90001f56:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90001f58:	f002 ff89 	bl	90004e6e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90001f5c:	4649      	mov	r1, r9
90001f5e:	4628      	mov	r0, r5
}
90001f60:	b003      	add	sp, #12
90001f62:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90001f66:	f002 bf99 	b.w	90004e9c <HAL_SDRAM_ProgramRefreshRate>
90001f6a:	bf00      	nop
90001f6c:	200005d4 	.word	0x200005d4

90001f70 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90001f70:	4b55      	ldr	r3, [pc, #340]	; (900020c8 <BSP_SDRAM_MspInit+0x158>)
90001f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90001f74:	f042 0201 	orr.w	r2, r2, #1
{  
90001f78:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90001f7a:	639a      	str	r2, [r3, #56]	; 0x38
{  
90001f7c:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
90001f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
90001f80:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
90001f82:	a909      	add	r1, sp, #36	; 0x24
90001f84:	4851      	ldr	r0, [pc, #324]	; (900020cc <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
90001f86:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90001f8a:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
90001f8c:	9201      	str	r2, [sp, #4]
90001f8e:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
90001f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001f92:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
90001f96:	631a      	str	r2, [r3, #48]	; 0x30
90001f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001f9a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
90001f9e:	9202      	str	r2, [sp, #8]
90001fa0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90001fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001fa4:	f042 0204 	orr.w	r2, r2, #4
90001fa8:	631a      	str	r2, [r3, #48]	; 0x30
90001faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001fac:	f002 0204 	and.w	r2, r2, #4
90001fb0:	9203      	str	r2, [sp, #12]
90001fb2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90001fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001fb6:	f042 0208 	orr.w	r2, r2, #8
90001fba:	631a      	str	r2, [r3, #48]	; 0x30
90001fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001fbe:	f002 0208 	and.w	r2, r2, #8
90001fc2:	9204      	str	r2, [sp, #16]
90001fc4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001fc8:	f042 0210 	orr.w	r2, r2, #16
90001fcc:	631a      	str	r2, [r3, #48]	; 0x30
90001fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001fd0:	f002 0210 	and.w	r2, r2, #16
90001fd4:	9205      	str	r2, [sp, #20]
90001fd6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90001fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001fda:	f042 0220 	orr.w	r2, r2, #32
90001fde:	631a      	str	r2, [r3, #48]	; 0x30
90001fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001fe2:	f002 0220 	and.w	r2, r2, #32
90001fe6:	9206      	str	r2, [sp, #24]
90001fe8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90001fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90001ff0:	631a      	str	r2, [r3, #48]	; 0x30
90001ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001ff4:	f002 0240 	and.w	r2, r2, #64	; 0x40
90001ff8:	9207      	str	r2, [sp, #28]
90001ffa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90001ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001ffe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90002002:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002004:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000200c:	9308      	str	r3, [sp, #32]
9000200e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002010:	2302      	movs	r3, #2
90002012:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90002016:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002018:	230c      	movs	r3, #12
9000201a:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
9000201c:	2308      	movs	r3, #8
9000201e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
90002020:	f000 fd66 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90002024:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002028:	a909      	add	r1, sp, #36	; 0x24
9000202a:	4829      	ldr	r0, [pc, #164]	; (900020d0 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
9000202c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
9000202e:	f000 fd5f 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002032:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002036:	a909      	add	r1, sp, #36	; 0x24
90002038:	4826      	ldr	r0, [pc, #152]	; (900020d4 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
9000203a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
9000203c:	f000 fd58 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002040:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002044:	a909      	add	r1, sp, #36	; 0x24
90002046:	4824      	ldr	r0, [pc, #144]	; (900020d8 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002048:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
9000204a:	f000 fd51 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
9000204e:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002052:	a909      	add	r1, sp, #36	; 0x24
90002054:	4821      	ldr	r0, [pc, #132]	; (900020dc <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90002056:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002058:	f000 fd4a 	bl	90002af0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
9000205c:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
9000205e:	a909      	add	r1, sp, #36	; 0x24
90002060:	481f      	ldr	r0, [pc, #124]	; (900020e0 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90002062:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90002064:	f000 fd44 	bl	90002af0 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
90002068:	4b1e      	ldr	r3, [pc, #120]	; (900020e4 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
9000206a:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
9000206c:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90002070:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90002074:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
90002076:	675c      	str	r4, [r3, #116]	; 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
90002078:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
9000207a:	e9c3 4212 	strd	r4, r2, [r3, #72]	; 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
9000207e:	f44f 6280 	mov.w	r2, #1024	; 0x400
90002082:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90002086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
9000208a:	e9c3 0216 	strd	r0, r2, [r3, #88]	; 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
9000208e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
90002092:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
90002096:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
90002098:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
9000209c:	4a12      	ldr	r2, [pc, #72]	; (900020e8 <BSP_SDRAM_MspInit+0x178>)
9000209e:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
900020a2:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
900020a4:	6335      	str	r5, [r6, #48]	; 0x30
900020a6:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dma_handle);
900020a8:	f000 faae 	bl	90002608 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
900020ac:	4628      	mov	r0, r5
900020ae:	f000 fa2d 	bl	9000250c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
900020b2:	4622      	mov	r2, r4
900020b4:	210f      	movs	r1, #15
900020b6:	2038      	movs	r0, #56	; 0x38
900020b8:	f000 f9be 	bl	90002438 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
900020bc:	2038      	movs	r0, #56	; 0x38
900020be:	f000 f9ed 	bl	9000249c <HAL_NVIC_EnableIRQ>
}
900020c2:	b00e      	add	sp, #56	; 0x38
900020c4:	bd70      	pop	{r4, r5, r6, pc}
900020c6:	bf00      	nop
900020c8:	40023800 	.word	0x40023800
900020cc:	40020800 	.word	0x40020800
900020d0:	40020c00 	.word	0x40020c00
900020d4:	40021000 	.word	0x40021000
900020d8:	40021400 	.word	0x40021400
900020dc:	40021800 	.word	0x40021800
900020e0:	40021c00 	.word	0x40021c00
900020e4:	200005d4 	.word	0x200005d4
900020e8:	40026410 	.word	0x40026410

900020ec <BSP_SDRAM_Init>:
{ 
900020ec:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900020ee:	4b1b      	ldr	r3, [pc, #108]	; (9000215c <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
900020f0:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900020f2:	4c1b      	ldr	r4, [pc, #108]	; (90002160 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
900020f4:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900020f6:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900020f8:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900020fc:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
900020fe:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
90002100:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
90002102:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  Timing.ExitSelfRefreshDelay = 7;
90002106:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
9000210a:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
9000210e:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
90002110:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002114:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
90002118:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
9000211a:	f44f 7380 	mov.w	r3, #256	; 0x100
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
9000211e:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002122:	63a1      	str	r1, [r4, #56]	; 0x38
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002124:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
9000212c:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002130:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90002134:	f7ff ff1c 	bl	90001f70 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
90002138:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
9000213c:	4c09      	ldr	r4, [pc, #36]	; (90002164 <BSP_SDRAM_Init+0x78>)
9000213e:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
90002142:	f002 fe74 	bl	90004e2e <HAL_SDRAM_Init>
90002146:	3800      	subs	r0, #0
90002148:	bf18      	it	ne
9000214a:	2001      	movne	r0, #1
9000214c:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
9000214e:	f240 6003 	movw	r0, #1539	; 0x603
90002152:	f7ff fec5 	bl	90001ee0 <BSP_SDRAM_Initialization_sequence>
}
90002156:	7820      	ldrb	r0, [r4, #0]
90002158:	bd10      	pop	{r4, pc}
9000215a:	bf00      	nop
9000215c:	a0000140 	.word	0xa0000140
90002160:	200005d4 	.word	0x200005d4
90002164:	20000084 	.word	0x20000084

90002168 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
90002168:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
9000216a:	4c0b      	ldr	r4, [pc, #44]	; (90002198 <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
9000216c:	4d0b      	ldr	r5, [pc, #44]	; (9000219c <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
9000216e:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90002170:	2070      	movs	r0, #112	; 0x70
90002172:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
90002174:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90002176:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
90002178:	686b      	ldr	r3, [r5, #4]
9000217a:	2070      	movs	r0, #112	; 0x70
9000217c:	4798      	blx	r3
9000217e:	2851      	cmp	r0, #81	; 0x51
90002180:	d108      	bne.n	90002194 <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
90002182:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
90002184:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
90002186:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
90002188:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
9000218a:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
9000218c:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
9000218e:	4798      	blx	r3
  uint8_t status = TS_OK;
90002190:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
90002192:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
90002194:	2003      	movs	r0, #3
90002196:	e7fc      	b.n	90002192 <BSP_TS_Init+0x2a>
90002198:	200006f4 	.word	0x200006f4
9000219c:	20000000 	.word	0x20000000

900021a0 <BSP_TS_Get_GestureId>:
{
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
900021a0:	4b15      	ldr	r3, [pc, #84]	; (900021f8 <BSP_TS_Get_GestureId+0x58>)
{
900021a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
900021a4:	2400      	movs	r4, #0
{
900021a6:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
900021a8:	a901      	add	r1, sp, #4
900021aa:	7a18      	ldrb	r0, [r3, #8]
  uint32_t gestureId = 0;
900021ac:	9401      	str	r4, [sp, #4]
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
900021ae:	f7fe fabf 	bl	90000730 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
900021b2:	9b01      	ldr	r3, [sp, #4]
900021b4:	2b18      	cmp	r3, #24
900021b6:	d019      	beq.n	900021ec <BSP_TS_Get_GestureId+0x4c>
900021b8:	d808      	bhi.n	900021cc <BSP_TS_Get_GestureId+0x2c>
900021ba:	2b10      	cmp	r3, #16
900021bc:	d011      	beq.n	900021e2 <BSP_TS_Get_GestureId+0x42>
900021be:	2b14      	cmp	r3, #20
900021c0:	d012      	beq.n	900021e8 <BSP_TS_Get_GestureId+0x48>
900021c2:	b15b      	cbz	r3, 900021dc <BSP_TS_Get_GestureId+0x3c>
900021c4:	2401      	movs	r4, #1
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
900021c6:	4620      	mov	r0, r4
900021c8:	b003      	add	sp, #12
900021ca:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
900021cc:	2b40      	cmp	r3, #64	; 0x40
900021ce:	d00f      	beq.n	900021f0 <BSP_TS_Get_GestureId+0x50>
900021d0:	2b49      	cmp	r3, #73	; 0x49
900021d2:	d00f      	beq.n	900021f4 <BSP_TS_Get_GestureId+0x54>
900021d4:	2b1c      	cmp	r3, #28
900021d6:	d1f5      	bne.n	900021c4 <BSP_TS_Get_GestureId+0x24>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
900021d8:	2304      	movs	r3, #4
900021da:	e003      	b.n	900021e4 <BSP_TS_Get_GestureId+0x44>
  uint8_t  ts_status = TS_OK;
900021dc:	461c      	mov	r4, r3
      TS_State->gestureId = GEST_ID_NO_GESTURE;
900021de:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
900021e0:	e7f1      	b.n	900021c6 <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_UP;
900021e2:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
900021e4:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
900021e6:	e7ee      	b.n	900021c6 <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
900021e8:	2302      	movs	r3, #2
900021ea:	e7fb      	b.n	900021e4 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
900021ec:	2303      	movs	r3, #3
900021ee:	e7f9      	b.n	900021e4 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
900021f0:	2305      	movs	r3, #5
900021f2:	e7f7      	b.n	900021e4 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
900021f4:	2306      	movs	r3, #6
900021f6:	e7f5      	b.n	900021e4 <BSP_TS_Get_GestureId+0x44>
900021f8:	200006f4 	.word	0x200006f4

900021fc <BSP_TS_GetState>:
{
900021fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
90002200:	4c56      	ldr	r4, [pc, #344]	; (9000235c <BSP_TS_GetState+0x160>)
{
90002202:	b097      	sub	sp, #92	; 0x5c
  uint32_t weight = 0;
90002204:	2300      	movs	r3, #0
{
90002206:	4605      	mov	r5, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
90002208:	6862      	ldr	r2, [r4, #4]
9000220a:	7a20      	ldrb	r0, [r4, #8]
9000220c:	6912      	ldr	r2, [r2, #16]
  uint32_t event = 0;
9000220e:	9309      	str	r3, [sp, #36]	; 0x24
  uint32_t area = 0;
90002210:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
90002214:	4790      	blx	r2
90002216:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
90002218:	b1b8      	cbz	r0, 9000224a <BSP_TS_GetState+0x4e>
9000221a:	ab0d      	add	r3, sp, #52	; 0x34
9000221c:	f105 0615 	add.w	r6, r5, #21
90002220:	f105 0b02 	add.w	fp, r5, #2
90002224:	f104 090c 	add.w	r9, r4, #12
90002228:	9304      	str	r3, [sp, #16]
9000222a:	ab0a      	add	r3, sp, #40	; 0x28
9000222c:	f104 0a20 	add.w	sl, r4, #32
90002230:	af10      	add	r7, sp, #64	; 0x40
90002232:	9303      	str	r3, [sp, #12]
90002234:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
    for(index=0; index < TS_State->touchDetected; index++)
90002238:	2300      	movs	r3, #0
9000223a:	9305      	str	r3, [sp, #20]
9000223c:	782b      	ldrb	r3, [r5, #0]
9000223e:	9a05      	ldr	r2, [sp, #20]
90002240:	4293      	cmp	r3, r2
90002242:	d805      	bhi.n	90002250 <BSP_TS_GetState+0x54>
    ts_status = BSP_TS_Get_GestureId(TS_State);
90002244:	4628      	mov	r0, r5
90002246:	f7ff ffab 	bl	900021a0 <BSP_TS_Get_GestureId>
}
9000224a:	b017      	add	sp, #92	; 0x5c
9000224c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
90002250:	6863      	ldr	r3, [r4, #4]
90002252:	4642      	mov	r2, r8
90002254:	4639      	mov	r1, r7
90002256:	7a20      	ldrb	r0, [r4, #8]
90002258:	695b      	ldr	r3, [r3, #20]
9000225a:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
9000225c:	7a63      	ldrb	r3, [r4, #9]
9000225e:	2b01      	cmp	r3, #1
90002260:	d14a      	bne.n	900022f8 <BSP_TS_GetState+0xfc>
        x[index] = brute_x[index];
90002262:	883a      	ldrh	r2, [r7, #0]
90002264:	9903      	ldr	r1, [sp, #12]
90002266:	800a      	strh	r2, [r1, #0]
        y[index] = brute_y[index];
90002268:	f8b8 2000 	ldrh.w	r2, [r8]
        y[index] = 4096 - brute_y[index];
9000226c:	9904      	ldr	r1, [sp, #16]
9000226e:	800a      	strh	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_XY)
90002270:	071b      	lsls	r3, r3, #28
90002272:	d506      	bpl.n	90002282 <BSP_TS_GetState+0x86>
        y[index] = brute_x[index];
90002274:	883b      	ldrh	r3, [r7, #0]
90002276:	9a04      	ldr	r2, [sp, #16]
90002278:	8013      	strh	r3, [r2, #0]
        x[index] = brute_y[index];
9000227a:	f8b8 3000 	ldrh.w	r3, [r8]
9000227e:	9a03      	ldr	r2, [sp, #12]
90002280:	8013      	strh	r3, [r2, #0]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90002282:	9b03      	ldr	r3, [sp, #12]
90002284:	f8d9 2000 	ldr.w	r2, [r9]
90002288:	f833 cb02 	ldrh.w	ip, [r3], #2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
9000228c:	9904      	ldr	r1, [sp, #16]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
9000228e:	4594      	cmp	ip, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002290:	f8da 0000 	ldr.w	r0, [sl]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90002294:	9303      	str	r3, [sp, #12]
90002296:	b293      	uxth	r3, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002298:	f831 2b02 	ldrh.w	r2, [r1], #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
9000229c:	bf8c      	ite	hi
9000229e:	ebac 0303 	subhi.w	r3, ip, r3
900022a2:	eba3 030c 	subls.w	r3, r3, ip
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
900022a6:	9104      	str	r1, [sp, #16]
900022a8:	4282      	cmp	r2, r0
900022aa:	b281      	uxth	r1, r0
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
900022ac:	7a20      	ldrb	r0, [r4, #8]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
900022ae:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
900022b0:	bf8c      	ite	hi
900022b2:	1a51      	subhi	r1, r2, r1
900022b4:	1a89      	subls	r1, r1, r2
900022b6:	b289      	uxth	r1, r1
      if ((x_diff + y_diff) > 5)
900022b8:	440b      	add	r3, r1
900022ba:	2b05      	cmp	r3, #5
        _x[index] = x[index];
900022bc:	bfc4      	itt	gt
900022be:	f8c9 c000 	strgt.w	ip, [r9]
        _y[index] = y[index];
900022c2:	f8ca 2000 	strgt.w	r2, [sl]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
900022c6:	2870      	cmp	r0, #112	; 0x70
900022c8:	d124      	bne.n	90002314 <BSP_TS_GetState+0x118>
        TS_State->touchX[index] = x[index];
900022ca:	f8ab c000 	strh.w	ip, [fp]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
900022ce:	ab09      	add	r3, sp, #36	; 0x24
        TS_State->touchY[index] = y[index];
900022d0:	f8ab 200a 	strh.w	r2, [fp, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
900022d4:	9905      	ldr	r1, [sp, #20]
900022d6:	aa07      	add	r2, sp, #28
900022d8:	9300      	str	r3, [sp, #0]
900022da:	ab08      	add	r3, sp, #32
900022dc:	f7fe fa38 	bl	90000750 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
900022e0:	9b07      	ldr	r3, [sp, #28]
900022e2:	f806 3f01 	strb.w	r3, [r6, #1]!
      TS_State->touchArea[index]   = area;
900022e6:	9b08      	ldr	r3, [sp, #32]
900022e8:	72b3      	strb	r3, [r6, #10]
      switch(event)
900022ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
900022ec:	2b03      	cmp	r3, #3
900022ee:	d821      	bhi.n	90002334 <BSP_TS_GetState+0x138>
900022f0:	e8df f003 	tbb	[pc, r3]
900022f4:	312f2d1e 	.word	0x312f2d1e
      if(tsOrientation & TS_SWAP_X)
900022f8:	0799      	lsls	r1, r3, #30
        x[index] = 4096 - brute_x[index];
900022fa:	bf41      	itttt	mi
900022fc:	883a      	ldrhmi	r2, [r7, #0]
900022fe:	9903      	ldrmi	r1, [sp, #12]
90002300:	f5c2 5280 	rsbmi	r2, r2, #4096	; 0x1000
90002304:	800a      	strhmi	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_Y)
90002306:	075a      	lsls	r2, r3, #29
90002308:	d5b2      	bpl.n	90002270 <BSP_TS_GetState+0x74>
        y[index] = 4096 - brute_y[index];
9000230a:	f8b8 2000 	ldrh.w	r2, [r8]
9000230e:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
90002312:	e7ab      	b.n	9000226c <BSP_TS_GetState+0x70>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
90002314:	f8d9 2000 	ldr.w	r2, [r9]
90002318:	8823      	ldrh	r3, [r4, #0]
9000231a:	4353      	muls	r3, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
9000231c:	8862      	ldrh	r2, [r4, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
9000231e:	0b1b      	lsrs	r3, r3, #12
90002320:	f8ab 3000 	strh.w	r3, [fp]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
90002324:	f8da 3000 	ldr.w	r3, [sl]
90002328:	435a      	muls	r2, r3
9000232a:	f3c2 320f 	ubfx	r2, r2, #12, #16
9000232e:	e7ce      	b.n	900022ce <BSP_TS_GetState+0xd2>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
90002330:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
90002332:	7173      	strb	r3, [r6, #5]
    for(index=0; index < TS_State->touchDetected; index++)
90002334:	9b05      	ldr	r3, [sp, #20]
90002336:	f10b 0b02 	add.w	fp, fp, #2
9000233a:	f109 0904 	add.w	r9, r9, #4
9000233e:	f10a 0a04 	add.w	sl, sl, #4
90002342:	3301      	adds	r3, #1
90002344:	3702      	adds	r7, #2
90002346:	f108 0802 	add.w	r8, r8, #2
9000234a:	9305      	str	r3, [sp, #20]
9000234c:	e776      	b.n	9000223c <BSP_TS_GetState+0x40>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
9000234e:	2302      	movs	r3, #2
90002350:	e7ef      	b.n	90002332 <BSP_TS_GetState+0x136>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
90002352:	2303      	movs	r3, #3
90002354:	e7ed      	b.n	90002332 <BSP_TS_GetState+0x136>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
90002356:	2300      	movs	r3, #0
90002358:	e7eb      	b.n	90002332 <BSP_TS_GetState+0x136>
9000235a:	bf00      	nop
9000235c:	200006f4 	.word	0x200006f4

90002360 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90002360:	4770      	bx	lr
	...

90002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90002364:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90002366:	4e0e      	ldr	r6, [pc, #56]	; (900023a0 <HAL_InitTick+0x3c>)
90002368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
9000236c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
9000236e:	7832      	ldrb	r2, [r6, #0]
90002370:	fbb3 f3f2 	udiv	r3, r3, r2
90002374:	4a0b      	ldr	r2, [pc, #44]	; (900023a4 <HAL_InitTick+0x40>)
90002376:	6810      	ldr	r0, [r2, #0]
90002378:	fbb0 f0f3 	udiv	r0, r0, r3
9000237c:	f000 f89c 	bl	900024b8 <HAL_SYSTICK_Config>
90002380:	4604      	mov	r4, r0
90002382:	b950      	cbnz	r0, 9000239a <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90002384:	2d0f      	cmp	r5, #15
90002386:	d808      	bhi.n	9000239a <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90002388:	4602      	mov	r2, r0
9000238a:	4629      	mov	r1, r5
9000238c:	f04f 30ff 	mov.w	r0, #4294967295
90002390:	f000 f852 	bl	90002438 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90002394:	4620      	mov	r0, r4
90002396:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
90002398:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000239a:	2001      	movs	r0, #1
9000239c:	e7fc      	b.n	90002398 <HAL_InitTick+0x34>
9000239e:	bf00      	nop
900023a0:	20000088 	.word	0x20000088
900023a4:	200000b8 	.word	0x200000b8

900023a8 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
900023a8:	4a07      	ldr	r2, [pc, #28]	; (900023c8 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900023aa:	2003      	movs	r0, #3
{
900023ac:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
900023ae:	6813      	ldr	r3, [r2, #0]
900023b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900023b4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900023b6:	f000 f82d 	bl	90002414 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
900023ba:	200f      	movs	r0, #15
900023bc:	f7ff ffd2 	bl	90002364 <HAL_InitTick>
  HAL_MspInit();
900023c0:	f7ff ffce 	bl	90002360 <HAL_MspInit>
}
900023c4:	2000      	movs	r0, #0
900023c6:	bd08      	pop	{r3, pc}
900023c8:	40023c00 	.word	0x40023c00

900023cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
900023cc:	4a03      	ldr	r2, [pc, #12]	; (900023dc <HAL_IncTick+0x10>)
900023ce:	4b04      	ldr	r3, [pc, #16]	; (900023e0 <HAL_IncTick+0x14>)
900023d0:	6811      	ldr	r1, [r2, #0]
900023d2:	781b      	ldrb	r3, [r3, #0]
900023d4:	440b      	add	r3, r1
900023d6:	6013      	str	r3, [r2, #0]
}
900023d8:	4770      	bx	lr
900023da:	bf00      	nop
900023dc:	20000728 	.word	0x20000728
900023e0:	20000088 	.word	0x20000088

900023e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
900023e4:	4b01      	ldr	r3, [pc, #4]	; (900023ec <HAL_GetTick+0x8>)
900023e6:	6818      	ldr	r0, [r3, #0]
}
900023e8:	4770      	bx	lr
900023ea:	bf00      	nop
900023ec:	20000728 	.word	0x20000728

900023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900023f0:	b538      	push	{r3, r4, r5, lr}
900023f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
900023f4:	f7ff fff6 	bl	900023e4 <HAL_GetTick>
900023f8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
900023fa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
900023fc:	bf1e      	ittt	ne
900023fe:	4b04      	ldrne	r3, [pc, #16]	; (90002410 <HAL_Delay+0x20>)
90002400:	781b      	ldrbne	r3, [r3, #0]
90002402:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
90002404:	f7ff ffee 	bl	900023e4 <HAL_GetTick>
90002408:	1b43      	subs	r3, r0, r5
9000240a:	42a3      	cmp	r3, r4
9000240c:	d3fa      	bcc.n	90002404 <HAL_Delay+0x14>
  {
  }
}
9000240e:	bd38      	pop	{r3, r4, r5, pc}
90002410:	20000088 	.word	0x20000088

90002414 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90002414:	4907      	ldr	r1, [pc, #28]	; (90002434 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90002416:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90002418:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000241a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000241e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
90002422:	0412      	lsls	r2, r2, #16
90002424:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90002426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
90002428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
9000242c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
90002430:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
90002432:	4770      	bx	lr
90002434:	e000ed00 	.word	0xe000ed00

90002438 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90002438:	4b16      	ldr	r3, [pc, #88]	; (90002494 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
9000243a:	b530      	push	{r4, r5, lr}
9000243c:	68dc      	ldr	r4, [r3, #12]
9000243e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002442:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002446:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002448:	2b04      	cmp	r3, #4
9000244a:	bf28      	it	cs
9000244c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000244e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002450:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002454:	bf8c      	ite	hi
90002456:	3c03      	subhi	r4, #3
90002458:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000245a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
9000245e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002460:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002464:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002468:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000246c:	fa03 f304 	lsl.w	r3, r3, r4
90002470:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002474:	ea4f 1303 	mov.w	r3, r3, lsl #4
90002478:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
9000247a:	db06      	blt.n	9000248a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000247c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
90002480:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
90002484:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90002488:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000248a:	f000 000f 	and.w	r0, r0, #15
9000248e:	4a02      	ldr	r2, [pc, #8]	; (90002498 <HAL_NVIC_SetPriority+0x60>)
90002490:	5413      	strb	r3, [r2, r0]
90002492:	e7f9      	b.n	90002488 <HAL_NVIC_SetPriority+0x50>
90002494:	e000ed00 	.word	0xe000ed00
90002498:	e000ed14 	.word	0xe000ed14

9000249c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
9000249c:	2800      	cmp	r0, #0
9000249e:	db07      	blt.n	900024b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900024a0:	0941      	lsrs	r1, r0, #5
900024a2:	2301      	movs	r3, #1
900024a4:	f000 001f 	and.w	r0, r0, #31
900024a8:	4a02      	ldr	r2, [pc, #8]	; (900024b4 <HAL_NVIC_EnableIRQ+0x18>)
900024aa:	4083      	lsls	r3, r0
900024ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
900024b0:	4770      	bx	lr
900024b2:	bf00      	nop
900024b4:	e000e100 	.word	0xe000e100

900024b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
900024b8:	3801      	subs	r0, #1
900024ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
900024be:	d20b      	bcs.n	900024d8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900024c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900024c4:	4a05      	ldr	r2, [pc, #20]	; (900024dc <HAL_SYSTICK_Config+0x24>)
900024c6:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
900024c8:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900024ca:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900024cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900024d0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900024d2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900024d4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
900024d6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
900024d8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
900024da:	4770      	bx	lr
900024dc:	e000ed00 	.word	0xe000ed00

900024e0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
900024e0:	6803      	ldr	r3, [r0, #0]
900024e2:	2118      	movs	r1, #24
900024e4:	b2da      	uxtb	r2, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
900024e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
900024ea:	3a10      	subs	r2, #16
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
900024ec:	f023 0303 	bic.w	r3, r3, #3
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
900024f0:	fbb2 f1f1 	udiv	r1, r2, r1
{
900024f4:	b510      	push	{r4, lr}
  if (stream_number > 3U)
900024f6:	2a5f      	cmp	r2, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
900024f8:	4c03      	ldr	r4, [pc, #12]	; (90002508 <DMA_CalcBaseAndBitshift+0x28>)
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
900024fa:	bf88      	it	hi
900024fc:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
900024fe:	5c61      	ldrb	r1, [r4, r1]
90002500:	6583      	str	r3, [r0, #88]	; 0x58
90002502:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
90002504:	4618      	mov	r0, r3
90002506:	bd10      	pop	{r4, pc}
90002508:	9000f524 	.word	0x9000f524

9000250c <HAL_DMA_Init>:
{
9000250c:	b570      	push	{r4, r5, r6, lr}
9000250e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90002510:	f7ff ff68 	bl	900023e4 <HAL_GetTick>
90002514:	4605      	mov	r5, r0
  if(hdma == NULL)
90002516:	2c00      	cmp	r4, #0
90002518:	d071      	beq.n	900025fe <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
9000251a:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
9000251c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
9000251e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
90002522:	2302      	movs	r3, #2
90002524:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
90002528:	6813      	ldr	r3, [r2, #0]
9000252a:	f023 0301 	bic.w	r3, r3, #1
9000252e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
90002530:	6822      	ldr	r2, [r4, #0]
90002532:	6813      	ldr	r3, [r2, #0]
90002534:	07d8      	lsls	r0, r3, #31
90002536:	d42e      	bmi.n	90002596 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
90002538:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
9000253a:	4832      	ldr	r0, [pc, #200]	; (90002604 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
9000253c:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
9000253e:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90002540:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
90002544:	432b      	orrs	r3, r5
90002546:	68e5      	ldr	r5, [r4, #12]
90002548:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
9000254a:	6925      	ldr	r5, [r4, #16]
9000254c:	432b      	orrs	r3, r5
9000254e:	6965      	ldr	r5, [r4, #20]
90002550:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90002552:	69e5      	ldr	r5, [r4, #28]
90002554:	430b      	orrs	r3, r1
90002556:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
90002558:	6a25      	ldr	r5, [r4, #32]
9000255a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
9000255c:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
9000255e:	6a60      	ldr	r0, [r4, #36]	; 0x24
90002560:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
90002562:	bf02      	ittt	eq
90002564:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
90002568:	4335      	orreq	r5, r6
9000256a:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
9000256c:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
9000256e:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
90002570:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
90002572:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
90002576:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
9000257a:	d132      	bne.n	900025e2 <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
9000257c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
9000257e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
90002580:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90002582:	b375      	cbz	r5, 900025e2 <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
90002584:	b991      	cbnz	r1, 900025ac <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
90002586:	2801      	cmp	r0, #1
90002588:	d020      	beq.n	900025cc <HAL_DMA_Init+0xc0>
9000258a:	f030 0102 	bics.w	r1, r0, #2
9000258e:	d128      	bne.n	900025e2 <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90002590:	01e9      	lsls	r1, r5, #7
90002592:	d526      	bpl.n	900025e2 <HAL_DMA_Init+0xd6>
90002594:	e01d      	b.n	900025d2 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90002596:	f7ff ff25 	bl	900023e4 <HAL_GetTick>
9000259a:	1b40      	subs	r0, r0, r5
9000259c:	2805      	cmp	r0, #5
9000259e:	d9c7      	bls.n	90002530 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
900025a0:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
900025a2:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
900025a4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
900025a6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
900025aa:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
900025ac:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
900025b0:	d113      	bne.n	900025da <HAL_DMA_Init+0xce>
    switch (tmp)
900025b2:	2803      	cmp	r0, #3
900025b4:	d815      	bhi.n	900025e2 <HAL_DMA_Init+0xd6>
900025b6:	a101      	add	r1, pc, #4	; (adr r1, 900025bc <HAL_DMA_Init+0xb0>)
900025b8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
900025bc:	900025d3 	.word	0x900025d3
900025c0:	90002591 	.word	0x90002591
900025c4:	900025d3 	.word	0x900025d3
900025c8:	900025cd 	.word	0x900025cd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
900025cc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
900025d0:	d107      	bne.n	900025e2 <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
900025d2:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
900025d4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
900025d6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
900025d8:	e7e5      	b.n	900025a6 <HAL_DMA_Init+0x9a>
    switch (tmp)
900025da:	2802      	cmp	r0, #2
900025dc:	d9f9      	bls.n	900025d2 <HAL_DMA_Init+0xc6>
900025de:	2803      	cmp	r0, #3
900025e0:	d0d6      	beq.n	90002590 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
900025e2:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
900025e4:	4620      	mov	r0, r4
900025e6:	f7ff ff7b 	bl	900024e0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
900025ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
900025ec:	233f      	movs	r3, #63	; 0x3f
900025ee:	4093      	lsls	r3, r2
900025f0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
900025f2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
900025f4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
900025f6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
900025f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
900025fc:	e7d5      	b.n	900025aa <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
900025fe:	2001      	movs	r0, #1
90002600:	e7d3      	b.n	900025aa <HAL_DMA_Init+0x9e>
90002602:	bf00      	nop
90002604:	f010803f 	.word	0xf010803f

90002608 <HAL_DMA_DeInit>:
{
90002608:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
9000260a:	4605      	mov	r5, r0
9000260c:	b320      	cbz	r0, 90002658 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
9000260e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
90002612:	2b02      	cmp	r3, #2
90002614:	b2dc      	uxtb	r4, r3
90002616:	d01d      	beq.n	90002654 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
90002618:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
9000261a:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
9000261c:	681a      	ldr	r2, [r3, #0]
9000261e:	f022 0201 	bic.w	r2, r2, #1
90002622:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
90002624:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
90002626:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
90002628:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
9000262a:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
9000262c:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
9000262e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
90002630:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90002632:	f7ff ff55 	bl	900024e0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90002636:	6dea      	ldr	r2, [r5, #92]	; 0x5c
90002638:	233f      	movs	r3, #63	; 0x3f
9000263a:	4093      	lsls	r3, r2
9000263c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
9000263e:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
90002640:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
90002644:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
90002648:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
9000264c:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
90002650:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
90002654:	4620      	mov	r0, r4
90002656:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90002658:	2401      	movs	r4, #1
9000265a:	e7fb      	b.n	90002654 <HAL_DMA_DeInit+0x4c>

9000265c <HAL_DMA_Start_IT>:
{
9000265c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
9000265e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90002662:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
90002664:	2c01      	cmp	r4, #1
90002666:	d034      	beq.n	900026d2 <HAL_DMA_Start_IT+0x76>
90002668:	2401      	movs	r4, #1
9000266a:	2500      	movs	r5, #0
9000266c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
90002670:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
90002674:	2c01      	cmp	r4, #1
90002676:	f04f 0402 	mov.w	r4, #2
9000267a:	d128      	bne.n	900026ce <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
9000267c:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
90002680:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002682:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
90002684:	6825      	ldr	r5, [r4, #0]
90002686:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
9000268a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
9000268c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
9000268e:	6883      	ldr	r3, [r0, #8]
90002690:	2b40      	cmp	r3, #64	; 0x40
90002692:	d119      	bne.n	900026c8 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
90002694:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
90002696:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
90002698:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
9000269a:	233f      	movs	r3, #63	; 0x3f
9000269c:	4093      	lsls	r3, r2
9000269e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
900026a0:	6823      	ldr	r3, [r4, #0]
900026a2:	f043 0316 	orr.w	r3, r3, #22
900026a6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
900026a8:	6963      	ldr	r3, [r4, #20]
900026aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900026ae:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
900026b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
900026b2:	b11b      	cbz	r3, 900026bc <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
900026b4:	6823      	ldr	r3, [r4, #0]
900026b6:	f043 0308 	orr.w	r3, r3, #8
900026ba:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
900026bc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
900026be:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
900026c0:	f043 0301 	orr.w	r3, r3, #1
900026c4:	6023      	str	r3, [r4, #0]
}
900026c6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
900026c8:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
900026ca:	60e2      	str	r2, [r4, #12]
900026cc:	e7e4      	b.n	90002698 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
900026ce:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
900026d2:	2002      	movs	r0, #2
900026d4:	e7f7      	b.n	900026c6 <HAL_DMA_Start_IT+0x6a>
	...

900026d8 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
900026d8:	2300      	movs	r3, #0
{
900026da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
900026dc:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
900026de:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
900026e0:	4b5b      	ldr	r3, [pc, #364]	; (90002850 <HAL_DMA_IRQHandler+0x178>)
{
900026e2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
900026e4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
900026e6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
900026e8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
900026ea:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
900026ec:	409a      	lsls	r2, r3
900026ee:	4232      	tst	r2, r6
900026f0:	d00c      	beq.n	9000270c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
900026f2:	6801      	ldr	r1, [r0, #0]
900026f4:	6808      	ldr	r0, [r1, #0]
900026f6:	0740      	lsls	r0, r0, #29
900026f8:	d508      	bpl.n	9000270c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
900026fa:	6808      	ldr	r0, [r1, #0]
900026fc:	f020 0004 	bic.w	r0, r0, #4
90002700:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
90002702:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
90002704:	6d62      	ldr	r2, [r4, #84]	; 0x54
90002706:	f042 0201 	orr.w	r2, r2, #1
9000270a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
9000270c:	2201      	movs	r2, #1
9000270e:	409a      	lsls	r2, r3
90002710:	4232      	tst	r2, r6
90002712:	d008      	beq.n	90002726 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
90002714:	6821      	ldr	r1, [r4, #0]
90002716:	6949      	ldr	r1, [r1, #20]
90002718:	0609      	lsls	r1, r1, #24
9000271a:	d504      	bpl.n	90002726 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
9000271c:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
9000271e:	6d62      	ldr	r2, [r4, #84]	; 0x54
90002720:	f042 0202 	orr.w	r2, r2, #2
90002724:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
90002726:	2204      	movs	r2, #4
90002728:	409a      	lsls	r2, r3
9000272a:	4232      	tst	r2, r6
9000272c:	d008      	beq.n	90002740 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
9000272e:	6821      	ldr	r1, [r4, #0]
90002730:	6809      	ldr	r1, [r1, #0]
90002732:	0788      	lsls	r0, r1, #30
90002734:	d504      	bpl.n	90002740 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
90002736:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
90002738:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000273a:	f042 0204 	orr.w	r2, r2, #4
9000273e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
90002740:	2210      	movs	r2, #16
90002742:	409a      	lsls	r2, r3
90002744:	4232      	tst	r2, r6
90002746:	d010      	beq.n	9000276a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
90002748:	6823      	ldr	r3, [r4, #0]
9000274a:	6819      	ldr	r1, [r3, #0]
9000274c:	0709      	lsls	r1, r1, #28
9000274e:	d50c      	bpl.n	9000276a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
90002750:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
90002752:	681a      	ldr	r2, [r3, #0]
90002754:	0350      	lsls	r0, r2, #13
90002756:	d537      	bpl.n	900027c8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
90002758:	681b      	ldr	r3, [r3, #0]
9000275a:	0319      	lsls	r1, r3, #12
9000275c:	d401      	bmi.n	90002762 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
9000275e:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002760:	e000      	b.n	90002764 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
90002762:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
90002764:	b10b      	cbz	r3, 9000276a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
90002766:	4620      	mov	r0, r4
90002768:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
9000276a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000276c:	2220      	movs	r2, #32
9000276e:	408a      	lsls	r2, r1
90002770:	4232      	tst	r2, r6
90002772:	d03a      	beq.n	900027ea <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
90002774:	6823      	ldr	r3, [r4, #0]
90002776:	6818      	ldr	r0, [r3, #0]
90002778:	06c6      	lsls	r6, r0, #27
9000277a:	d536      	bpl.n	900027ea <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
9000277c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
9000277e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
90002782:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90002784:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
90002786:	d127      	bne.n	900027d8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90002788:	f022 0216 	bic.w	r2, r2, #22
9000278c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
9000278e:	695a      	ldr	r2, [r3, #20]
90002790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90002794:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
90002796:	6c22      	ldr	r2, [r4, #64]	; 0x40
90002798:	b90a      	cbnz	r2, 9000279e <HAL_DMA_IRQHandler+0xc6>
9000279a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
9000279c:	b11a      	cbz	r2, 900027a6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
9000279e:	681a      	ldr	r2, [r3, #0]
900027a0:	f022 0208 	bic.w	r2, r2, #8
900027a4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
900027a6:	233f      	movs	r3, #63	; 0x3f
900027a8:	408b      	lsls	r3, r1
900027aa:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
900027ac:	2300      	movs	r3, #0
900027ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
900027b2:	2301      	movs	r3, #1
900027b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
900027b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
900027ba:	2b00      	cmp	r3, #0
900027bc:	d045      	beq.n	9000284a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
900027be:	4620      	mov	r0, r4
}
900027c0:	b003      	add	sp, #12
900027c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
900027c6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
900027c8:	681a      	ldr	r2, [r3, #0]
900027ca:	05d2      	lsls	r2, r2, #23
900027cc:	d4c7      	bmi.n	9000275e <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
900027ce:	681a      	ldr	r2, [r3, #0]
900027d0:	f022 0208 	bic.w	r2, r2, #8
900027d4:	601a      	str	r2, [r3, #0]
900027d6:	e7c2      	b.n	9000275e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
900027d8:	0350      	lsls	r0, r2, #13
900027da:	d527      	bpl.n	9000282c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
900027dc:	681b      	ldr	r3, [r3, #0]
900027de:	0319      	lsls	r1, r3, #12
900027e0:	d431      	bmi.n	90002846 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
900027e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
900027e4:	b10b      	cbz	r3, 900027ea <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
900027e6:	4620      	mov	r0, r4
900027e8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
900027ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
900027ec:	b36b      	cbz	r3, 9000284a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
900027ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
900027f0:	07da      	lsls	r2, r3, #31
900027f2:	d519      	bpl.n	90002828 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
900027f4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
900027f8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
900027fa:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
900027fe:	2305      	movs	r3, #5
90002800:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
90002804:	6813      	ldr	r3, [r2, #0]
90002806:	f023 0301 	bic.w	r3, r3, #1
9000280a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
9000280c:	9b01      	ldr	r3, [sp, #4]
9000280e:	3301      	adds	r3, #1
90002810:	42bb      	cmp	r3, r7
90002812:	9301      	str	r3, [sp, #4]
90002814:	d802      	bhi.n	9000281c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
90002816:	6813      	ldr	r3, [r2, #0]
90002818:	07db      	lsls	r3, r3, #31
9000281a:	d4f7      	bmi.n	9000280c <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
9000281c:	2300      	movs	r3, #0
9000281e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
90002822:	2301      	movs	r3, #1
90002824:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
90002828:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
9000282a:	e7c6      	b.n	900027ba <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
9000282c:	681a      	ldr	r2, [r3, #0]
9000282e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
90002832:	d108      	bne.n	90002846 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
90002834:	6819      	ldr	r1, [r3, #0]
90002836:	f021 0110 	bic.w	r1, r1, #16
9000283a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
9000283c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
9000283e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
90002842:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
90002846:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90002848:	e7cc      	b.n	900027e4 <HAL_DMA_IRQHandler+0x10c>
}
9000284a:	b003      	add	sp, #12
9000284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000284e:	bf00      	nop
90002850:	200000b8 	.word	0x200000b8

90002854 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
90002854:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
90002856:	6804      	ldr	r4, [r0, #0]
90002858:	9d04      	ldr	r5, [sp, #16]
9000285a:	6c66      	ldr	r6, [r4, #68]	; 0x44
9000285c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
90002860:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
90002864:	4333      	orrs	r3, r6
90002866:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90002868:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
9000286a:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
9000286c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90002870:	d130      	bne.n	900028d4 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90002872:	6885      	ldr	r5, [r0, #8]
90002874:	b11d      	cbz	r5, 9000287e <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90002876:	2d01      	cmp	r5, #1
90002878:	d103      	bne.n	90002882 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
9000287a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
9000287e:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90002880:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90002882:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90002884:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90002888:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
9000288c:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
9000288e:	d107      	bne.n	900028a0 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
90002890:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
90002892:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90002894:	02c9      	lsls	r1, r1, #11
90002896:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
9000289a:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
9000289e:	e7ee      	b.n	9000287e <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
900028a0:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
900028a2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
900028a6:	d10a      	bne.n	900028be <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
900028a8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
900028aa:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
900028ac:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
900028ae:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
900028b0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
900028b4:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
900028b8:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
900028bc:	e7df      	b.n	9000287e <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
900028be:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
900028c0:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900028c2:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
900028c4:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
900028c6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
900028ca:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
900028ce:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
900028d2:	e7d4      	b.n	9000287e <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
900028d4:	60e1      	str	r1, [r4, #12]
}
900028d6:	e7d3      	b.n	90002880 <DMA2D_SetConfig+0x2c>

900028d8 <HAL_DMA2D_MspInit>:
}
900028d8:	4770      	bx	lr

900028da <HAL_DMA2D_Init>:
{
900028da:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
900028dc:	4604      	mov	r4, r0
900028de:	b330      	cbz	r0, 9000292e <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
900028e0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
900028e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900028e8:	b91b      	cbnz	r3, 900028f2 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
900028ea:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
900028ee:	f7ff fff3 	bl	900028d8 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
900028f2:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900028f4:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
900028f6:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
900028f8:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900028fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
900028fe:	6813      	ldr	r3, [r2, #0]
90002900:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
90002904:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90002906:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90002908:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
9000290a:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000290c:	f023 0307 	bic.w	r3, r3, #7
90002910:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90002912:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90002914:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90002916:	6c13      	ldr	r3, [r2, #64]	; 0x40
90002918:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
9000291c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
90002920:	430b      	orrs	r3, r1
90002922:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90002924:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90002926:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90002928:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
9000292c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
9000292e:	2001      	movs	r0, #1
90002930:	e7fc      	b.n	9000292c <HAL_DMA2D_Init+0x52>

90002932 <HAL_DMA2D_Start>:
{
90002932:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
90002934:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
90002938:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
9000293a:	2d01      	cmp	r5, #1
9000293c:	f04f 0502 	mov.w	r5, #2
90002940:	d00f      	beq.n	90002962 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002942:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
90002946:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90002948:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
9000294a:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
9000294e:	9500      	str	r5, [sp, #0]
90002950:	f7ff ff80 	bl	90002854 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
90002954:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
90002956:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
90002958:	6813      	ldr	r3, [r2, #0]
9000295a:	4333      	orrs	r3, r6
9000295c:	6013      	str	r3, [r2, #0]
}
9000295e:	b002      	add	sp, #8
90002960:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
90002962:	4628      	mov	r0, r5
90002964:	e7fb      	b.n	9000295e <HAL_DMA2D_Start+0x2c>

90002966 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
90002966:	2300      	movs	r3, #0
{
90002968:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
9000296a:	9301      	str	r3, [sp, #4]
{
9000296c:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
9000296e:	6803      	ldr	r3, [r0, #0]
{
90002970:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90002972:	681b      	ldr	r3, [r3, #0]
90002974:	07db      	lsls	r3, r3, #31
90002976:	d418      	bmi.n	900029aa <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
90002978:	6822      	ldr	r2, [r4, #0]
9000297a:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
9000297c:	6a52      	ldr	r2, [r2, #36]	; 0x24
9000297e:	4313      	orrs	r3, r2
  if (layer_start != 0U)
90002980:	069e      	lsls	r6, r3, #26
90002982:	d506      	bpl.n	90002992 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
90002984:	f7ff fd2e 	bl	900023e4 <HAL_GetTick>
90002988:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
9000298a:	6823      	ldr	r3, [r4, #0]
9000298c:	685a      	ldr	r2, [r3, #4]
9000298e:	06d2      	lsls	r2, r2, #27
90002990:	d53e      	bpl.n	90002a10 <HAL_DMA2D_PollForTransfer+0xaa>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
90002992:	6823      	ldr	r3, [r4, #0]
90002994:	2212      	movs	r2, #18
  return HAL_OK;
90002996:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
90002998:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000299a:	2301      	movs	r3, #1
9000299c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
900029a0:	2300      	movs	r3, #0
900029a2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
900029a6:	b002      	add	sp, #8
900029a8:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
900029aa:	f7ff fd1b 	bl	900023e4 <HAL_GetTick>
900029ae:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
900029b0:	6823      	ldr	r3, [r4, #0]
900029b2:	685a      	ldr	r2, [r3, #4]
900029b4:	0792      	lsls	r2, r2, #30
900029b6:	d4df      	bmi.n	90002978 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
900029b8:	685a      	ldr	r2, [r3, #4]
900029ba:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
900029bc:	9a01      	ldr	r2, [sp, #4]
900029be:	f012 0f21 	tst.w	r2, #33	; 0x21
900029c2:	d014      	beq.n	900029ee <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900029c4:	9a01      	ldr	r2, [sp, #4]
900029c6:	0695      	lsls	r5, r2, #26
900029c8:	d503      	bpl.n	900029d2 <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900029ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
900029cc:	f042 0202 	orr.w	r2, r2, #2
900029d0:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900029d2:	9a01      	ldr	r2, [sp, #4]
900029d4:	07d0      	lsls	r0, r2, #31
900029d6:	d503      	bpl.n	900029e0 <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900029d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
900029da:	f042 0201 	orr.w	r2, r2, #1
900029de:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900029e0:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900029e2:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
900029e4:	2304      	movs	r3, #4
        return HAL_ERROR;
900029e6:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
900029e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        return HAL_ERROR;
900029ec:	e7d8      	b.n	900029a0 <HAL_DMA2D_PollForTransfer+0x3a>
      if(Timeout != HAL_MAX_DELAY)
900029ee:	1c69      	adds	r1, r5, #1
900029f0:	d0df      	beq.n	900029b2 <HAL_DMA2D_PollForTransfer+0x4c>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
900029f2:	f7ff fcf7 	bl	900023e4 <HAL_GetTick>
900029f6:	1b80      	subs	r0, r0, r6
900029f8:	42a8      	cmp	r0, r5
900029fa:	d801      	bhi.n	90002a00 <HAL_DMA2D_PollForTransfer+0x9a>
900029fc:	2d00      	cmp	r5, #0
900029fe:	d1d7      	bne.n	900029b0 <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90002a00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
90002a02:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90002a04:	f043 0320 	orr.w	r3, r3, #32
90002a08:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
90002a0a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
90002a0e:	e7c7      	b.n	900029a0 <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
90002a10:	685a      	ldr	r2, [r3, #4]
90002a12:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
90002a14:	9a01      	ldr	r2, [sp, #4]
90002a16:	f012 0f29 	tst.w	r2, #41	; 0x29
90002a1a:	d016      	beq.n	90002a4a <HAL_DMA2D_PollForTransfer+0xe4>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90002a1c:	9a01      	ldr	r2, [sp, #4]
90002a1e:	0716      	lsls	r6, r2, #28
90002a20:	d503      	bpl.n	90002a2a <HAL_DMA2D_PollForTransfer+0xc4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90002a22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90002a24:	f042 0204 	orr.w	r2, r2, #4
90002a28:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90002a2a:	9a01      	ldr	r2, [sp, #4]
90002a2c:	0695      	lsls	r5, r2, #26
90002a2e:	d503      	bpl.n	90002a38 <HAL_DMA2D_PollForTransfer+0xd2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90002a30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90002a32:	f042 0202 	orr.w	r2, r2, #2
90002a36:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90002a38:	9a01      	ldr	r2, [sp, #4]
90002a3a:	07d0      	lsls	r0, r2, #31
90002a3c:	d503      	bpl.n	90002a46 <HAL_DMA2D_PollForTransfer+0xe0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90002a3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90002a40:	f042 0201 	orr.w	r2, r2, #1
90002a44:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90002a46:	2229      	movs	r2, #41	; 0x29
90002a48:	e7cb      	b.n	900029e2 <HAL_DMA2D_PollForTransfer+0x7c>
      if(Timeout != HAL_MAX_DELAY)
90002a4a:	1c69      	adds	r1, r5, #1
90002a4c:	d09e      	beq.n	9000298c <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
90002a4e:	f7ff fcc9 	bl	900023e4 <HAL_GetTick>
90002a52:	1b80      	subs	r0, r0, r6
90002a54:	42a8      	cmp	r0, r5
90002a56:	d8d3      	bhi.n	90002a00 <HAL_DMA2D_PollForTransfer+0x9a>
90002a58:	2d00      	cmp	r5, #0
90002a5a:	d196      	bne.n	9000298a <HAL_DMA2D_PollForTransfer+0x24>
90002a5c:	e7d0      	b.n	90002a00 <HAL_DMA2D_PollForTransfer+0x9a>
	...

90002a60 <HAL_DMA2D_ConfigLayer>:
{
90002a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
90002a62:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90002a66:	2b01      	cmp	r3, #1
90002a68:	f04f 0302 	mov.w	r3, #2
90002a6c:	d02b      	beq.n	90002ac6 <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90002a6e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
90002a72:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
90002a74:	eb00 1301 	add.w	r3, r0, r1, lsl #4
90002a78:	4f1c      	ldr	r7, [pc, #112]	; (90002aec <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
90002a7a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
90002a7e:	010e      	lsls	r6, r1, #4
90002a80:	6a5d      	ldr	r5, [r3, #36]	; 0x24
90002a82:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
90002a86:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002a8a:	3c09      	subs	r4, #9
90002a8c:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90002a8e:	bf96      	itet	ls
90002a90:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90002a94:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90002a98:	431a      	orrls	r2, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90002a9a:	6803      	ldr	r3, [r0, #0]
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
90002a9c:	b9a9      	cbnz	r1, 90002aca <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90002a9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002aa0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90002aa2:	ea01 0107 	and.w	r1, r1, r7
90002aa6:	ea42 0201 	orr.w	r2, r2, r1
90002aaa:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90002aac:	6982      	ldr	r2, [r0, #24]
90002aae:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002ab0:	d803      	bhi.n	90002aba <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
90002ab2:	6a42      	ldr	r2, [r0, #36]	; 0x24
90002ab4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90002ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
90002aba:	2301      	movs	r3, #1
90002abc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
90002ac0:	2300      	movs	r3, #0
90002ac2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
90002ac6:	4618      	mov	r0, r3
}
90002ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90002aca:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002acc:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90002ace:	ea01 0107 	and.w	r1, r1, r7
90002ad2:	ea42 0201 	orr.w	r2, r2, r1
90002ad6:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90002ad8:	eb00 0206 	add.w	r2, r0, r6
90002adc:	6992      	ldr	r2, [r2, #24]
90002ade:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90002ae0:	d8eb      	bhi.n	90002aba <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
90002ae2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
90002ae6:	621d      	str	r5, [r3, #32]
90002ae8:	e7e7      	b.n	90002aba <HAL_DMA2D_ConfigLayer+0x5a>
90002aea:	bf00      	nop
90002aec:	00fcfff0 	.word	0x00fcfff0

90002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90002af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90002af4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002af6:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 90002cac <HAL_GPIO_Init+0x1bc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
90002afa:	4a6a      	ldr	r2, [pc, #424]	; (90002ca4 <HAL_GPIO_Init+0x1b4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90002afc:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 90002cb0 <HAL_GPIO_Init+0x1c0>
    ioposition = ((uint32_t)0x01) << position;
90002b00:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90002b02:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
90002b04:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90002b06:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
90002b0a:	43ac      	bics	r4, r5
90002b0c:	f040 80b1 	bne.w	90002c72 <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90002b10:	684c      	ldr	r4, [r1, #4]
90002b12:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002b16:	2503      	movs	r5, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90002b18:	f024 0c10 	bic.w	ip, r4, #16
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002b1c:	fa05 f50e 	lsl.w	r5, r5, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90002b20:	f10c 37ff 	add.w	r7, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002b24:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90002b26:	2f01      	cmp	r7, #1
90002b28:	d810      	bhi.n	90002b4c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
90002b2a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90002b2c:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
90002b30:	68cf      	ldr	r7, [r1, #12]
90002b32:	fa07 f70e 	lsl.w	r7, r7, lr
90002b36:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
90002b3a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
90002b3c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
90002b3e:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
90002b42:	0927      	lsrs	r7, r4, #4
90002b44:	409f      	lsls	r7, r3
90002b46:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
90002b4a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
90002b4c:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90002b4e:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
90002b52:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
90002b56:	688f      	ldr	r7, [r1, #8]
90002b58:	fa07 f70e 	lsl.w	r7, r7, lr
90002b5c:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
90002b60:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90002b62:	d116      	bne.n	90002b92 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
90002b64:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90002b68:	f003 0b07 	and.w	fp, r3, #7
90002b6c:	f04f 0c0f 	mov.w	ip, #15
90002b70:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
90002b74:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
90002b78:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90002b7c:	fa0c fc0b 	lsl.w	ip, ip, fp
90002b80:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
90002b84:	690f      	ldr	r7, [r1, #16]
90002b86:	fa07 f70b 	lsl.w	r7, r7, fp
90002b8a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
90002b8e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
90002b92:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
90002b94:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90002b96:	f004 0503 	and.w	r5, r4, #3
90002b9a:	fa05 f50e 	lsl.w	r5, r5, lr
90002b9e:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
90002ba0:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
90002ba2:	00e5      	lsls	r5, r4, #3
90002ba4:	d565      	bpl.n	90002c72 <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002ba6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
90002baa:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90002bae:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002bb2:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
90002bb6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90002bba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90002bbe:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
90002bc2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
90002bc6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
90002bca:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
90002bce:	9501      	str	r5, [sp, #4]
90002bd0:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90002bd2:	250f      	movs	r5, #15
        temp = SYSCFG->EXTICR[position >> 2];
90002bd4:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90002bd8:	fa05 f50c 	lsl.w	r5, r5, ip
90002bdc:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90002be0:	4d31      	ldr	r5, [pc, #196]	; (90002ca8 <HAL_GPIO_Init+0x1b8>)
90002be2:	42a8      	cmp	r0, r5
90002be4:	d04c      	beq.n	90002c80 <HAL_GPIO_Init+0x190>
90002be6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002bea:	42a8      	cmp	r0, r5
90002bec:	d04a      	beq.n	90002c84 <HAL_GPIO_Init+0x194>
90002bee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002bf2:	42a8      	cmp	r0, r5
90002bf4:	d048      	beq.n	90002c88 <HAL_GPIO_Init+0x198>
90002bf6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002bfa:	42a8      	cmp	r0, r5
90002bfc:	d046      	beq.n	90002c8c <HAL_GPIO_Init+0x19c>
90002bfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002c02:	42a8      	cmp	r0, r5
90002c04:	d044      	beq.n	90002c90 <HAL_GPIO_Init+0x1a0>
90002c06:	4548      	cmp	r0, r9
90002c08:	d044      	beq.n	90002c94 <HAL_GPIO_Init+0x1a4>
90002c0a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
90002c0e:	42a8      	cmp	r0, r5
90002c10:	d042      	beq.n	90002c98 <HAL_GPIO_Init+0x1a8>
90002c12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002c16:	42a8      	cmp	r0, r5
90002c18:	d040      	beq.n	90002c9c <HAL_GPIO_Init+0x1ac>
90002c1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002c1e:	42a8      	cmp	r0, r5
90002c20:	d03e      	beq.n	90002ca0 <HAL_GPIO_Init+0x1b0>
90002c22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90002c26:	42a8      	cmp	r0, r5
90002c28:	bf0c      	ite	eq
90002c2a:	2509      	moveq	r5, #9
90002c2c:	250a      	movne	r5, #10
90002c2e:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
90002c32:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90002c36:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
90002c3a:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
90002c3c:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
90002c40:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
90002c42:	bf0c      	ite	eq
90002c44:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
90002c46:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
90002c48:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
90002c4c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
90002c4e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
90002c50:	bf0c      	ite	eq
90002c52:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
90002c54:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
90002c56:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
90002c5a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
90002c5c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
90002c5e:	bf0c      	ite	eq
90002c60:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
90002c62:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
90002c64:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
90002c66:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
90002c68:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
90002c6a:	bf54      	ite	pl
90002c6c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
90002c6e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
90002c70:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
90002c72:	3301      	adds	r3, #1
90002c74:	2b10      	cmp	r3, #16
90002c76:	f47f af43 	bne.w	90002b00 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
90002c7a:	b003      	add	sp, #12
90002c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90002c80:	2500      	movs	r5, #0
90002c82:	e7d4      	b.n	90002c2e <HAL_GPIO_Init+0x13e>
90002c84:	2501      	movs	r5, #1
90002c86:	e7d2      	b.n	90002c2e <HAL_GPIO_Init+0x13e>
90002c88:	2502      	movs	r5, #2
90002c8a:	e7d0      	b.n	90002c2e <HAL_GPIO_Init+0x13e>
90002c8c:	2503      	movs	r5, #3
90002c8e:	e7ce      	b.n	90002c2e <HAL_GPIO_Init+0x13e>
90002c90:	2504      	movs	r5, #4
90002c92:	e7cc      	b.n	90002c2e <HAL_GPIO_Init+0x13e>
90002c94:	2505      	movs	r5, #5
90002c96:	e7ca      	b.n	90002c2e <HAL_GPIO_Init+0x13e>
90002c98:	2506      	movs	r5, #6
90002c9a:	e7c8      	b.n	90002c2e <HAL_GPIO_Init+0x13e>
90002c9c:	2507      	movs	r5, #7
90002c9e:	e7c6      	b.n	90002c2e <HAL_GPIO_Init+0x13e>
90002ca0:	2508      	movs	r5, #8
90002ca2:	e7c4      	b.n	90002c2e <HAL_GPIO_Init+0x13e>
90002ca4:	40013c00 	.word	0x40013c00
90002ca8:	40020000 	.word	0x40020000
90002cac:	40023800 	.word	0x40023800
90002cb0:	40021400 	.word	0x40021400

90002cb4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
90002cb4:	b10a      	cbz	r2, 90002cba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90002cb6:	6181      	str	r1, [r0, #24]
  }
}
90002cb8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90002cba:	0409      	lsls	r1, r1, #16
90002cbc:	e7fb      	b.n	90002cb6 <HAL_GPIO_WritePin+0x2>

90002cbe <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
90002cbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002cc2:	4605      	mov	r5, r0
90002cc4:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
90002cc6:	f895 42b8 	ldrb.w	r4, [r5, #696]	; 0x2b8
{
90002cca:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
90002cce:	2c01      	cmp	r4, #1
{
90002cd0:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
90002cd4:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
90002cd8:	d025      	beq.n	90002d26 <HAL_HCD_HC_Init+0x68>
90002cda:	2401      	movs	r4, #1
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
90002cdc:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
90002cde:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
90002ce0:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  __HAL_LOCK(hhcd);
90002ce4:	f885 42b8 	strb.w	r4, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
90002ce8:	2428      	movs	r4, #40	; 0x28
90002cea:	fb04 5401 	mla	r4, r4, r1, r5
90002cee:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
90002cf2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
90002cf6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
90002cfa:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
90002cfe:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
90002d02:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
90002d06:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
90002d0a:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
90002d0e:	6828      	ldr	r0, [r5, #0]
90002d10:	f8cd e000 	str.w	lr, [sp]
90002d14:	e9cd 8901 	strd	r8, r9, [sp, #4]
90002d18:	f002 fafa 	bl	90005310 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
90002d1c:	f885 72b8 	strb.w	r7, [r5, #696]	; 0x2b8

  return status;
}
90002d20:	b005      	add	sp, #20
90002d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
90002d26:	2002      	movs	r0, #2
90002d28:	e7fa      	b.n	90002d20 <HAL_HCD_HC_Init+0x62>

90002d2a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
90002d2a:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
90002d2c:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
90002d30:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
90002d32:	2b01      	cmp	r3, #1
90002d34:	d009      	beq.n	90002d4a <HAL_HCD_HC_Halt+0x20>
90002d36:	2301      	movs	r3, #1
90002d38:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90002d3c:	6800      	ldr	r0, [r0, #0]
90002d3e:	f002 fb60 	bl	90005402 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
90002d42:	2000      	movs	r0, #0
90002d44:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
90002d48:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
90002d4a:	2002      	movs	r0, #2
90002d4c:	e7fc      	b.n	90002d48 <HAL_HCD_HC_Halt+0x1e>

90002d4e <HAL_HCD_Init>:
{
90002d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
90002d52:	4606      	mov	r6, r0
{
90002d54:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
90002d56:	2800      	cmp	r0, #0
90002d58:	d043      	beq.n	90002de2 <HAL_HCD_Init+0x94>
  if (hhcd->State == HAL_HCD_STATE_RESET)
90002d5a:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
90002d5e:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
90002d60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90002d64:	b91b      	cbnz	r3, 90002d6e <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
90002d66:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
90002d6a:	f007 f901 	bl	90009f70 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
90002d6e:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
90002d70:	466d      	mov	r5, sp
90002d72:	f106 0804 	add.w	r8, r6, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
90002d76:	4637      	mov	r7, r6
  hhcd->State = HAL_HCD_STATE_BUSY;
90002d78:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
90002d7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
90002d7e:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
90002d80:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
90002d84:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
90002d88:	bf08      	it	eq
90002d8a:	6133      	streq	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
90002d8c:	f002 f985 	bl	9000509a <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
90002d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90002d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
90002d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90002d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
90002d98:	e894 0003 	ldmia.w	r4, {r0, r1}
90002d9c:	e885 0003 	stmia.w	r5, {r0, r1}
90002da0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
90002da4:	6830      	ldr	r0, [r6, #0]
90002da6:	f002 f937 	bl	90005018 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
90002daa:	f857 0b10 	ldr.w	r0, [r7], #16
90002dae:	2101      	movs	r1, #1
90002db0:	f002 f979 	bl	900050a6 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
90002db4:	46ec      	mov	ip, sp
90002db6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90002db8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90002dbc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90002dbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90002dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
90002dc6:	e885 0003 	stmia.w	r5, {r0, r1}
90002dca:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
90002dce:	6830      	ldr	r0, [r6, #0]
90002dd0:	f002 fa26 	bl	90005220 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
90002dd4:	2301      	movs	r3, #1
  return HAL_OK;
90002dd6:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
90002dd8:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
}
90002ddc:	b00a      	add	sp, #40	; 0x28
90002dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
90002de2:	2001      	movs	r0, #1
90002de4:	e7fa      	b.n	90002ddc <HAL_HCD_Init+0x8e>
	...

90002de8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
90002de8:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
90002dea:	2628      	movs	r6, #40	; 0x28
{
90002dec:	f89d 7010 	ldrb.w	r7, [sp, #16]
90002df0:	9d05      	ldr	r5, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
90002df2:	fb06 0601 	mla	r6, r6, r1, r0
{
90002df6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
90002dfa:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
90002dfe:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
90002e02:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f

  if (token == 0U)
90002e06:	b97f      	cbnz	r7, 90002e28 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
90002e08:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
90002e0a:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
90002e0c:	f886 c03d 	strb.w	ip, [r6, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
90002e10:	f886 7042 	strb.w	r7, [r6, #66]	; 0x42
  switch (ep_type)
90002e14:	d03c      	beq.n	90002e90 <HAL_HCD_HC_SubmitRequest+0xa8>
90002e16:	42bb      	cmp	r3, r7
90002e18:	d03a      	beq.n	90002e90 <HAL_HCD_HC_SubmitRequest+0xa8>
90002e1a:	2b01      	cmp	r3, #1
90002e1c:	d11f      	bne.n	90002e5e <HAL_HCD_HC_SubmitRequest+0x76>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
90002e1e:	2328      	movs	r3, #40	; 0x28
90002e20:	2200      	movs	r2, #0
90002e22:	fb03 0301 	mla	r3, r3, r1, r0
90002e26:	e030      	b.n	90002e8a <HAL_HCD_HC_SubmitRequest+0xa2>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90002e28:	f04f 0c02 	mov.w	ip, #2
90002e2c:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch (ep_type)
90002e30:	2b03      	cmp	r3, #3
90002e32:	d814      	bhi.n	90002e5e <HAL_HCD_HC_SubmitRequest+0x76>
90002e34:	a601      	add	r6, pc, #4	; (adr r6, 90002e3c <HAL_HCD_HC_SubmitRequest+0x54>)
90002e36:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
90002e3a:	bf00      	nop
90002e3c:	90002e4d 	.word	0x90002e4d
90002e40:	90002e1f 	.word	0x90002e1f
90002e44:	90002e91 	.word	0x90002e91
90002e48:	90002e91 	.word	0x90002e91
      if ((token == 1U) && (direction == 0U)) /*send data */
90002e4c:	2f01      	cmp	r7, #1
90002e4e:	d106      	bne.n	90002e5e <HAL_HCD_HC_SubmitRequest+0x76>
90002e50:	b92a      	cbnz	r2, 90002e5e <HAL_HCD_HC_SubmitRequest+0x76>
        if (length == 0U)
90002e52:	2328      	movs	r3, #40	; 0x28
          hhcd->hc[ch_num].toggle_out = 1U;
90002e54:	fb03 0301 	mla	r3, r3, r1, r0
        if (length == 0U)
90002e58:	b99c      	cbnz	r4, 90002e82 <HAL_HCD_HC_SubmitRequest+0x9a>
          hhcd->hc[ch_num].toggle_out = 1U;
90002e5a:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
90002e5e:	2228      	movs	r2, #40	; 0x28
90002e60:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
90002e64:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
90002e68:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
90002e6a:	e9c3 5411 	strd	r5, r4, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_count = 0U;
90002e6e:	2400      	movs	r4, #0
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
90002e70:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
90002e72:	f8a3 405c 	strh.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
90002e76:	64dc      	str	r4, [r3, #76]	; 0x4c
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
90002e78:	7c02      	ldrb	r2, [r0, #16]
90002e7a:	6800      	ldr	r0, [r0, #0]
}
90002e7c:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
90002e7e:	f002 bb25 	b.w	900054cc <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
90002e82:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
90002e86:	2e00      	cmp	r6, #0
90002e88:	d1e9      	bne.n	90002e5e <HAL_HCD_HC_SubmitRequest+0x76>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
90002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
90002e8e:	e7e6      	b.n	90002e5e <HAL_HCD_HC_SubmitRequest+0x76>
      if (direction == 0U)
90002e90:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
90002e92:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
90002e96:	b92a      	cbnz	r2, 90002ea4 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
90002e98:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
90002e9c:	2e00      	cmp	r6, #0
90002e9e:	d0f4      	beq.n	90002e8a <HAL_HCD_HC_SubmitRequest+0xa2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90002ea0:	2202      	movs	r2, #2
90002ea2:	e7f2      	b.n	90002e8a <HAL_HCD_HC_SubmitRequest+0xa2>
        if (hhcd->hc[ch_num].toggle_in == 0U)
90002ea4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
90002ea8:	2a00      	cmp	r2, #0
90002eaa:	d1f9      	bne.n	90002ea0 <HAL_HCD_HC_SubmitRequest+0xb8>
90002eac:	e7ed      	b.n	90002e8a <HAL_HCD_HC_SubmitRequest+0xa2>
90002eae:	bf00      	nop

90002eb0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90002eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90002eb4:	6806      	ldr	r6, [r0, #0]
{
90002eb6:	b085      	sub	sp, #20
90002eb8:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90002eba:	4630      	mov	r0, r6
90002ebc:	f002 f951 	bl	90005162 <USB_GetMode>
90002ec0:	2801      	cmp	r0, #1
90002ec2:	f040 80e1 	bne.w	90003088 <HAL_HCD_IRQHandler+0x1d8>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90002ec6:	6828      	ldr	r0, [r5, #0]
90002ec8:	f002 f947 	bl	9000515a <USB_ReadInterrupts>
90002ecc:	2800      	cmp	r0, #0
90002ece:	f000 80db 	beq.w	90003088 <HAL_HCD_IRQHandler+0x1d8>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90002ed2:	6828      	ldr	r0, [r5, #0]
90002ed4:	f002 f941 	bl	9000515a <USB_ReadInterrupts>
90002ed8:	0284      	lsls	r4, r0, #10
90002eda:	d503      	bpl.n	90002ee4 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
90002edc:	682b      	ldr	r3, [r5, #0]
90002ede:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
90002ee2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90002ee4:	6828      	ldr	r0, [r5, #0]
90002ee6:	f002 f938 	bl	9000515a <USB_ReadInterrupts>
90002eea:	02c0      	lsls	r0, r0, #11
90002eec:	d503      	bpl.n	90002ef6 <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
90002eee:	682b      	ldr	r3, [r5, #0]
90002ef0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
90002ef4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90002ef6:	6828      	ldr	r0, [r5, #0]
90002ef8:	f002 f92f 	bl	9000515a <USB_ReadInterrupts>
90002efc:	0141      	lsls	r1, r0, #5
90002efe:	d503      	bpl.n	90002f08 <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90002f00:	682b      	ldr	r3, [r5, #0]
90002f02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002f06:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90002f08:	6828      	ldr	r0, [r5, #0]
90002f0a:	f002 f926 	bl	9000515a <USB_ReadInterrupts>
90002f0e:	0782      	lsls	r2, r0, #30
90002f10:	d502      	bpl.n	90002f18 <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90002f12:	682b      	ldr	r3, [r5, #0]
90002f14:	2202      	movs	r2, #2
90002f16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90002f18:	6828      	ldr	r0, [r5, #0]
90002f1a:	f002 f91e 	bl	9000515a <USB_ReadInterrupts>
90002f1e:	0083      	lsls	r3, r0, #2
90002f20:	d50e      	bpl.n	90002f40 <HAL_HCD_IRQHandler+0x90>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
90002f22:	682b      	ldr	r3, [r5, #0]
90002f24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
90002f28:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90002f2a:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
90002f2e:	07df      	lsls	r7, r3, #31
90002f30:	d406      	bmi.n	90002f40 <HAL_HCD_IRQHandler+0x90>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90002f32:	4628      	mov	r0, r5
90002f34:	f007 f900 	bl	9000a138 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90002f38:	2101      	movs	r1, #1
90002f3a:	6828      	ldr	r0, [r5, #0]
90002f3c:	f002 f915 	bl	9000516a <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
90002f40:	6828      	ldr	r0, [r5, #0]
90002f42:	f002 f90a 	bl	9000515a <USB_ReadInterrupts>
90002f46:	01c4      	lsls	r4, r0, #7
90002f48:	d53c      	bpl.n	90002fc4 <HAL_HCD_IRQHandler+0x114>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
90002f4a:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90002f4c:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
90002f50:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
90002f52:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
90002f56:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
90002f58:	9b03      	ldr	r3, [sp, #12]
90002f5a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
90002f5e:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90002f60:	9b02      	ldr	r3, [sp, #8]
90002f62:	0798      	lsls	r0, r3, #30
90002f64:	d509      	bpl.n	90002f7a <HAL_HCD_IRQHandler+0xca>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
90002f66:	9b02      	ldr	r3, [sp, #8]
90002f68:	07d9      	lsls	r1, r3, #31
90002f6a:	d502      	bpl.n	90002f72 <HAL_HCD_IRQHandler+0xc2>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90002f6c:	4628      	mov	r0, r5
90002f6e:	f007 f8df 	bl	9000a130 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
90002f72:	9b03      	ldr	r3, [sp, #12]
90002f74:	f043 0302 	orr.w	r3, r3, #2
90002f78:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
90002f7a:	9b02      	ldr	r3, [sp, #8]
90002f7c:	071a      	lsls	r2, r3, #28
90002f7e:	d517      	bpl.n	90002fb0 <HAL_HCD_IRQHandler+0x100>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
90002f80:	9b03      	ldr	r3, [sp, #12]
90002f82:	f043 0308 	orr.w	r3, r3, #8
90002f86:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90002f88:	9b02      	ldr	r3, [sp, #8]
90002f8a:	075b      	lsls	r3, r3, #29
90002f8c:	f140 8087 	bpl.w	9000309e <HAL_HCD_IRQHandler+0x1ee>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
90002f90:	69a9      	ldr	r1, [r5, #24]
90002f92:	2902      	cmp	r1, #2
90002f94:	d17b      	bne.n	9000308e <HAL_HCD_IRQHandler+0x1de>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90002f96:	9b02      	ldr	r3, [sp, #8]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90002f98:	6828      	ldr	r0, [r5, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90002f9a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
90002f9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90002fa2:	bf18      	it	ne
90002fa4:	2101      	movne	r1, #1
90002fa6:	f002 f8e0 	bl	9000516a <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
90002faa:	4628      	mov	r0, r5
90002fac:	f007 f8c8 	bl	9000a140 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90002fb0:	9b02      	ldr	r3, [sp, #8]
90002fb2:	069f      	lsls	r7, r3, #26
90002fb4:	d503      	bpl.n	90002fbe <HAL_HCD_IRQHandler+0x10e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90002fb6:	9b03      	ldr	r3, [sp, #12]
90002fb8:	f043 0320 	orr.w	r3, r3, #32
90002fbc:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
90002fbe:	9b03      	ldr	r3, [sp, #12]
90002fc0:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90002fc4:	6828      	ldr	r0, [r5, #0]
90002fc6:	f002 f8c8 	bl	9000515a <USB_ReadInterrupts>
90002fca:	0704      	lsls	r4, r0, #28
90002fcc:	d505      	bpl.n	90002fda <HAL_HCD_IRQHandler+0x12a>
      HAL_HCD_SOF_Callback(hhcd);
90002fce:	4628      	mov	r0, r5
90002fd0:	f007 f8aa 	bl	9000a128 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
90002fd4:	682b      	ldr	r3, [r5, #0]
90002fd6:	2208      	movs	r2, #8
90002fd8:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
90002fda:	6828      	ldr	r0, [r5, #0]
90002fdc:	f002 f8bd 	bl	9000515a <USB_ReadInterrupts>
90002fe0:	0180      	lsls	r0, r0, #6
90002fe2:	d512      	bpl.n	9000300a <HAL_HCD_IRQHandler+0x15a>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90002fe4:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90002fe6:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90002fea:	f002 fa05 	bl	900053f8 <USB_HC_ReadInterrupt>
    if (hhcd->hc[ch_num].state == HC_XFRC)
90002fee:	2728      	movs	r7, #40	; 0x28
90002ff0:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
90002ff4:	f04f 0902 	mov.w	r9, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90002ff8:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90002ffa:	9300      	str	r3, [sp, #0]
90002ffc:	68ab      	ldr	r3, [r5, #8]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90002ffe:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003000:	4553      	cmp	r3, sl
90003002:	d850      	bhi.n	900030a6 <HAL_HCD_IRQHandler+0x1f6>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
90003004:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003008:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
9000300a:	6828      	ldr	r0, [r5, #0]
9000300c:	f002 f8a5 	bl	9000515a <USB_ReadInterrupts>
90003010:	06c3      	lsls	r3, r0, #27
90003012:	d539      	bpl.n	90003088 <HAL_HCD_IRQHandler+0x1d8>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90003014:	682e      	ldr	r6, [r5, #0]
90003016:	69b3      	ldr	r3, [r6, #24]
90003018:	f023 0310 	bic.w	r3, r3, #16
9000301c:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
9000301e:	6a37      	ldr	r7, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90003020:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
90003024:	2b02      	cmp	r3, #2
90003026:	d12a      	bne.n	9000307e <HAL_HCD_IRQHandler+0x1ce>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
90003028:	f3c7 180a 	ubfx	r8, r7, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
9000302c:	f1b8 0f00 	cmp.w	r8, #0
90003030:	d025      	beq.n	9000307e <HAL_HCD_IRQHandler+0x1ce>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
90003032:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
90003036:	2428      	movs	r4, #40	; 0x28
90003038:	fb04 5407 	mla	r4, r4, r7, r5
9000303c:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000303e:	b1f1      	cbz	r1, 9000307e <HAL_HCD_IRQHandler+0x1ce>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
90003040:	4642      	mov	r2, r8
90003042:	4630      	mov	r0, r6
90003044:	f002 f87b 	bl	9000513e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
90003048:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
9000304a:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
9000304e:	017a      	lsls	r2, r7, #5
        hhcd->hc[ch_num].xfer_buff += pktcnt;
90003050:	4443      	add	r3, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
90003052:	eb06 1747 	add.w	r7, r6, r7, lsl #5
        hhcd->hc[ch_num].xfer_buff += pktcnt;
90003056:	6463      	str	r3, [r4, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
90003058:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
9000305a:	6939      	ldr	r1, [r7, #16]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
9000305c:	4443      	add	r3, r8
9000305e:	64e3      	str	r3, [r4, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
90003060:	4bb0      	ldr	r3, [pc, #704]	; (90003324 <HAL_HCD_IRQHandler+0x474>)
90003062:	400b      	ands	r3, r1
90003064:	b15b      	cbz	r3, 9000307e <HAL_HCD_IRQHandler+0x1ce>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
90003066:	58b3      	ldr	r3, [r6, r2]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90003068:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
9000306c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
90003070:	50b3      	str	r3, [r6, r2]
          hhcd->hc[ch_num].toggle_in ^= 1U;
90003072:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
90003076:	f083 0301 	eor.w	r3, r3, #1
9000307a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
9000307e:	682a      	ldr	r2, [r5, #0]
90003080:	6993      	ldr	r3, [r2, #24]
90003082:	f043 0310 	orr.w	r3, r3, #16
90003086:	6193      	str	r3, [r2, #24]
}
90003088:	b005      	add	sp, #20
9000308a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
9000308e:	68eb      	ldr	r3, [r5, #12]
90003090:	2b01      	cmp	r3, #1
90003092:	d18a      	bne.n	90002faa <HAL_HCD_IRQHandler+0xfa>
          USBx_HOST->HFIR = 60000U;
90003094:	f64e 2260 	movw	r2, #60000	; 0xea60
90003098:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
9000309c:	e785      	b.n	90002faa <HAL_HCD_IRQHandler+0xfa>
      HAL_HCD_PortDisabled_Callback(hhcd);
9000309e:	4628      	mov	r0, r5
900030a0:	f007 f852 	bl	9000a148 <HAL_HCD_PortDisabled_Callback>
900030a4:	e784      	b.n	90002fb0 <HAL_HCD_IRQHandler+0x100>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
900030a6:	f00a 030f 	and.w	r3, sl, #15
900030aa:	9a01      	ldr	r2, [sp, #4]
900030ac:	fa22 f303 	lsr.w	r3, r2, r3
900030b0:	07d9      	lsls	r1, r3, #31
900030b2:	f140 8093 	bpl.w	900031dc <HAL_HCD_IRQHandler+0x32c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
900030b6:	9b00      	ldr	r3, [sp, #0]
900030b8:	fa5f f68a 	uxtb.w	r6, sl
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
900030bc:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
900030c0:	6819      	ldr	r1, [r3, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
900030c2:	ea4f 1b46 	mov.w	fp, r6, lsl #5
900030c6:	eb08 1446 	add.w	r4, r8, r6, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
900030ca:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
900030ce:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
900030d0:	f000 811d 	beq.w	9000330e <HAL_HCD_IRQHandler+0x45e>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
900030d4:	074a      	lsls	r2, r1, #29
900030d6:	d513      	bpl.n	90003100 <HAL_HCD_IRQHandler+0x250>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
900030d8:	2104      	movs	r1, #4
900030da:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900030dc:	68e1      	ldr	r1, [r4, #12]
900030de:	f041 0102 	orr.w	r1, r1, #2
900030e2:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
900030e4:	68a1      	ldr	r1, [r4, #8]
900030e6:	0588      	lsls	r0, r1, #22
900030e8:	d54a      	bpl.n	90003180 <HAL_HCD_IRQHandler+0x2d0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900030ea:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900030ec:	4631      	mov	r1, r6
900030ee:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900030f0:	f043 0302 	orr.w	r3, r3, #2
900030f4:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900030f6:	f002 f984 	bl	90005402 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
900030fa:	f44f 7300 	mov.w	r3, #512	; 0x200
900030fe:	e0f9      	b.n	900032f4 <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
90003100:	68a1      	ldr	r1, [r4, #8]
90003102:	05cb      	lsls	r3, r1, #23
90003104:	d510      	bpl.n	90003128 <HAL_HCD_IRQHandler+0x278>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
90003106:	f44f 7180 	mov.w	r1, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
9000310a:	f04f 0c07 	mov.w	ip, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
9000310e:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
90003110:	fb07 5106 	mla	r1, r7, r6, r5
90003114:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003118:	68e1      	ldr	r1, [r4, #12]
9000311a:	f041 0102 	orr.w	r1, r1, #2
9000311e:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003120:	4631      	mov	r1, r6
90003122:	f002 f96e 	bl	90005402 <USB_HC_Halt>
90003126:	e7dd      	b.n	900030e4 <HAL_HCD_IRQHandler+0x234>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
90003128:	68a1      	ldr	r1, [r4, #8]
9000312a:	0689      	lsls	r1, r1, #26
9000312c:	d502      	bpl.n	90003134 <HAL_HCD_IRQHandler+0x284>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
9000312e:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
90003130:	60a1      	str	r1, [r4, #8]
90003132:	e7d7      	b.n	900030e4 <HAL_HCD_IRQHandler+0x234>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
90003134:	68a1      	ldr	r1, [r4, #8]
90003136:	070a      	lsls	r2, r1, #28
90003138:	d50e      	bpl.n	90003158 <HAL_HCD_IRQHandler+0x2a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000313a:	68e1      	ldr	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
9000313c:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003140:	f041 0102 	orr.w	r1, r1, #2
90003144:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
90003146:	fb07 5106 	mla	r1, r7, r6, r5
9000314a:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
9000314e:	2110      	movs	r1, #16
90003150:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
90003152:	2108      	movs	r1, #8
90003154:	60a1      	str	r1, [r4, #8]
90003156:	e7e3      	b.n	90003120 <HAL_HCD_IRQHandler+0x270>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
90003158:	68a1      	ldr	r1, [r4, #8]
9000315a:	054b      	lsls	r3, r1, #21
9000315c:	d5c2      	bpl.n	900030e4 <HAL_HCD_IRQHandler+0x234>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000315e:	68e1      	ldr	r1, [r4, #12]
90003160:	f041 0102 	orr.w	r1, r1, #2
90003164:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003166:	4631      	mov	r1, r6
90003168:	f002 f94b 	bl	90005402 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
9000316c:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
9000316e:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
90003170:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
90003172:	fb07 5106 	mla	r1, r7, r6, r5
90003176:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
9000317a:	f44f 6180 	mov.w	r1, #1024	; 0x400
9000317e:	e7d7      	b.n	90003130 <HAL_HCD_IRQHandler+0x280>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
90003180:	68a1      	ldr	r1, [r4, #8]
90003182:	07c9      	lsls	r1, r1, #31
90003184:	d54b      	bpl.n	9000321e <HAL_HCD_IRQHandler+0x36e>
    if (hhcd->Init.dma_enable != 0U)
90003186:	6929      	ldr	r1, [r5, #16]
90003188:	b149      	cbz	r1, 9000319e <HAL_HCD_IRQHandler+0x2ee>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
9000318a:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
9000318c:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
90003190:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
90003194:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
90003198:	1a09      	subs	r1, r1, r0
9000319a:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
9000319e:	fb07 5106 	mla	r1, r7, r6, r5
900031a2:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
900031a4:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
900031a6:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
900031aa:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
900031ac:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
900031ae:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
900031b2:	f012 0ffd 	tst.w	r2, #253	; 0xfd
900031b6:	d117      	bne.n	900031e8 <HAL_HCD_IRQHandler+0x338>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900031b8:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900031ba:	4631      	mov	r1, r6
900031bc:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900031be:	f043 0302 	orr.w	r3, r3, #2
900031c2:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900031c4:	f002 f91d 	bl	90005402 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
900031c8:	2310      	movs	r3, #16
900031ca:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
900031cc:	fb07 5606 	mla	r6, r7, r6, r5
900031d0:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
900031d4:	f083 0301 	eor.w	r3, r3, #1
900031d8:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
900031dc:	9b00      	ldr	r3, [sp, #0]
900031de:	f10a 0a01 	add.w	sl, sl, #1
900031e2:	3320      	adds	r3, #32
900031e4:	9300      	str	r3, [sp, #0]
900031e6:	e709      	b.n	90002ffc <HAL_HCD_IRQHandler+0x14c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
900031e8:	2a03      	cmp	r2, #3
900031ea:	d10d      	bne.n	90003208 <HAL_HCD_IRQHandler+0x358>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
900031ec:	f858 000b 	ldr.w	r0, [r8, fp]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
900031f0:	461a      	mov	r2, r3
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
900031f2:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
900031f6:	f848 000b 	str.w	r0, [r8, fp]
      hhcd->hc[ch_num].urb_state = URB_DONE;
900031fa:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
900031fe:	4631      	mov	r1, r6
90003200:	4628      	mov	r0, r5
90003202:	f006 ffa5 	bl	9000a150 <HAL_HCD_HC_NotifyURBChange_Callback>
90003206:	e7e1      	b.n	900031cc <HAL_HCD_IRQHandler+0x31c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
90003208:	2a01      	cmp	r2, #1
9000320a:	d1df      	bne.n	900031cc <HAL_HCD_IRQHandler+0x31c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
9000320c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
90003210:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
90003214:	f083 0301 	eor.w	r3, r3, #1
90003218:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
9000321c:	e7ef      	b.n	900031fe <HAL_HCD_IRQHandler+0x34e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
9000321e:	68a1      	ldr	r1, [r4, #8]
90003220:	078a      	lsls	r2, r1, #30
90003222:	d53f      	bpl.n	900032a4 <HAL_HCD_IRQHandler+0x3f4>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
90003224:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003226:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
9000322a:	f021 0102 	bic.w	r1, r1, #2
9000322e:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003230:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
90003234:	2901      	cmp	r1, #1
90003236:	d10c      	bne.n	90003252 <HAL_HCD_IRQHandler+0x3a2>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
90003238:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
9000323c:	fb07 5306 	mla	r3, r7, r6, r5
90003240:	4631      	mov	r1, r6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
90003242:	f8c4 9008 	str.w	r9, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
90003246:	4628      	mov	r0, r5
90003248:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
9000324c:	f006 ff80 	bl	9000a150 <HAL_HCD_HC_NotifyURBChange_Callback>
90003250:	e7c4      	b.n	900031dc <HAL_HCD_IRQHandler+0x32c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
90003252:	3903      	subs	r1, #3
90003254:	2905      	cmp	r1, #5
90003256:	d8f1      	bhi.n	9000323c <HAL_HCD_IRQHandler+0x38c>
90003258:	a001      	add	r0, pc, #4	; (adr r0, 90003260 <HAL_HCD_IRQHandler+0x3b0>)
9000325a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
9000325e:	bf00      	nop
90003260:	90003279 	.word	0x90003279
90003264:	9000323d 	.word	0x9000323d
90003268:	900034c3 	.word	0x900034c3
9000326c:	900034cf 	.word	0x900034cf
90003270:	90003293 	.word	0x90003293
90003274:	900034cf 	.word	0x900034cf
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
90003278:	fb07 5106 	mla	r1, r7, r6, r5
9000327c:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
90003280:	f858 100b 	ldr.w	r1, [r8, fp]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90003284:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
90003288:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
9000328c:	f848 100b 	str.w	r1, [r8, fp]
90003290:	e7d4      	b.n	9000323c <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].ErrCnt++;
90003292:	fb07 5206 	mla	r2, r7, r6, r5
90003296:	6d93      	ldr	r3, [r2, #88]	; 0x58
90003298:	3301      	adds	r3, #1
9000329a:	6593      	str	r3, [r2, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
9000329c:	2304      	movs	r3, #4
9000329e:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
900032a2:	e7cb      	b.n	9000323c <HAL_HCD_IRQHandler+0x38c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
900032a4:	68a1      	ldr	r1, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900032a6:	6828      	ldr	r0, [r5, #0]
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
900032a8:	f011 0180 	ands.w	r1, r1, #128	; 0x80
900032ac:	d010      	beq.n	900032d0 <HAL_HCD_IRQHandler+0x420>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900032ae:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
900032b0:	fb07 5206 	mla	r2, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900032b4:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900032b6:	f043 0302 	orr.w	r3, r3, #2
900032ba:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
900032bc:	6d93      	ldr	r3, [r2, #88]	; 0x58
900032be:	3301      	adds	r3, #1
900032c0:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
900032c2:	2306      	movs	r3, #6
900032c4:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900032c8:	f002 f89b 	bl	90005402 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
900032cc:	2380      	movs	r3, #128	; 0x80
900032ce:	e011      	b.n	900032f4 <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
900032d0:	68a3      	ldr	r3, [r4, #8]
900032d2:	06db      	lsls	r3, r3, #27
900032d4:	d582      	bpl.n	900031dc <HAL_HCD_IRQHandler+0x32c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
900032d6:	fb07 5206 	mla	r2, r7, r6, r5
900032da:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
900032de:	2b03      	cmp	r3, #3
900032e0:	d10a      	bne.n	900032f8 <HAL_HCD_IRQHandler+0x448>
      hhcd->hc[ch_num].ErrCnt = 0U;
900032e2:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900032e4:	68e3      	ldr	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900032e6:	4631      	mov	r1, r6
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900032e8:	f043 0302 	orr.w	r3, r3, #2
900032ec:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900032ee:	f002 f888 	bl	90005402 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
900032f2:	2310      	movs	r3, #16
900032f4:	60a3      	str	r3, [r4, #8]
900032f6:	e771      	b.n	900031dc <HAL_HCD_IRQHandler+0x32c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
900032f8:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
900032fc:	d1f9      	bne.n	900032f2 <HAL_HCD_IRQHandler+0x442>
      hhcd->hc[ch_num].ErrCnt = 0U;
900032fe:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
90003300:	692b      	ldr	r3, [r5, #16]
90003302:	2b00      	cmp	r3, #0
90003304:	d1f5      	bne.n	900032f2 <HAL_HCD_IRQHandler+0x442>
        hhcd->hc[ch_num].state = HC_NAK;
90003306:	2303      	movs	r3, #3
90003308:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
9000330c:	e7ea      	b.n	900032e4 <HAL_HCD_IRQHandler+0x434>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
9000330e:	f011 0c04 	ands.w	ip, r1, #4
90003312:	d009      	beq.n	90003328 <HAL_HCD_IRQHandler+0x478>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
90003314:	2304      	movs	r3, #4
90003316:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003318:	68e3      	ldr	r3, [r4, #12]
9000331a:	f043 0302 	orr.w	r3, r3, #2
9000331e:	60e3      	str	r3, [r4, #12]
90003320:	e75c      	b.n	900031dc <HAL_HCD_IRQHandler+0x32c>
90003322:	bf00      	nop
90003324:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
90003328:	68a1      	ldr	r1, [r4, #8]
9000332a:	f011 0120 	ands.w	r1, r1, #32
9000332e:	d014      	beq.n	9000335a <HAL_HCD_IRQHandler+0x4aa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
90003330:	2320      	movs	r3, #32
90003332:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
90003334:	fb07 5306 	mla	r3, r7, r6, r5
90003338:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
9000333c:	2a01      	cmp	r2, #1
9000333e:	f47f af4d 	bne.w	900031dc <HAL_HCD_IRQHandler+0x32c>
      hhcd->hc[ch_num].do_ping = 0U;
90003342:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003346:	4631      	mov	r1, r6
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
90003348:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000334c:	68e3      	ldr	r3, [r4, #12]
9000334e:	f043 0302 	orr.w	r3, r3, #2
90003352:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003354:	f002 f855 	bl	90005402 <USB_HC_Halt>
90003358:	e740      	b.n	900031dc <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
9000335a:	68a3      	ldr	r3, [r4, #8]
9000335c:	065a      	lsls	r2, r3, #25
9000335e:	d511      	bpl.n	90003384 <HAL_HCD_IRQHandler+0x4d4>
    hhcd->hc[ch_num].state = HC_NYET;
90003360:	fb07 5306 	mla	r3, r7, r6, r5
90003364:	2204      	movs	r2, #4
90003366:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
9000336a:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
9000336c:	6599      	str	r1, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000336e:	4631      	mov	r1, r6
    hhcd->hc[ch_num].do_ping = 1U;
90003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003374:	68e3      	ldr	r3, [r4, #12]
90003376:	f043 0302 	orr.w	r3, r3, #2
9000337a:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000337c:	f002 f841 	bl	90005402 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
90003380:	2340      	movs	r3, #64	; 0x40
90003382:	e7b7      	b.n	900032f4 <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
90003384:	68a1      	ldr	r1, [r4, #8]
90003386:	f411 7100 	ands.w	r1, r1, #512	; 0x200
9000338a:	d005      	beq.n	90003398 <HAL_HCD_IRQHandler+0x4e8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000338c:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000338e:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003390:	f043 0302 	orr.w	r3, r3, #2
90003394:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003396:	e6ae      	b.n	900030f6 <HAL_HCD_IRQHandler+0x246>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
90003398:	68a3      	ldr	r3, [r4, #8]
9000339a:	07db      	lsls	r3, r3, #31
9000339c:	d50f      	bpl.n	900033be <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000339e:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
900033a0:	fb07 5806 	mla	r8, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900033a4:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
900033a8:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900033ac:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900033ae:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900033b0:	f002 f827 	bl	90005402 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
900033b4:	2201      	movs	r2, #1
900033b6:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
900033b8:	f888 205d 	strb.w	r2, [r8, #93]	; 0x5d
900033bc:	e70e      	b.n	900031dc <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
900033be:	68a1      	ldr	r1, [r4, #8]
900033c0:	0709      	lsls	r1, r1, #28
900033c2:	d50e      	bpl.n	900033e2 <HAL_HCD_IRQHandler+0x532>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
900033c4:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900033c6:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_STALL;
900033c8:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
900033cc:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900033ce:	68e3      	ldr	r3, [r4, #12]
900033d0:	f043 0302 	orr.w	r3, r3, #2
900033d4:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900033d6:	f002 f814 	bl	90005402 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
900033da:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
900033dc:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
900033e0:	e6fc      	b.n	900031dc <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
900033e2:	68a1      	ldr	r1, [r4, #8]
900033e4:	06ca      	lsls	r2, r1, #27
900033e6:	d514      	bpl.n	90003412 <HAL_HCD_IRQHandler+0x562>
    hhcd->hc[ch_num].ErrCnt = 0U;
900033e8:	fb07 5306 	mla	r3, r7, r6, r5
900033ec:	2200      	movs	r2, #0
900033ee:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
900033f0:	2203      	movs	r2, #3
900033f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
900033f6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
900033fa:	2a00      	cmp	r2, #0
900033fc:	f47f af72 	bne.w	900032e4 <HAL_HCD_IRQHandler+0x434>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
90003400:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
90003404:	2a00      	cmp	r2, #0
90003406:	f47f af6d 	bne.w	900032e4 <HAL_HCD_IRQHandler+0x434>
        hhcd->hc[ch_num].do_ping = 1U;
9000340a:	2201      	movs	r2, #1
9000340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003410:	e768      	b.n	900032e4 <HAL_HCD_IRQHandler+0x434>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
90003412:	68a1      	ldr	r1, [r4, #8]
90003414:	060b      	lsls	r3, r1, #24
90003416:	d50c      	bpl.n	90003432 <HAL_HCD_IRQHandler+0x582>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003418:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000341a:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
9000341c:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003420:	f043 0302 	orr.w	r3, r3, #2
90003424:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003426:	f001 ffec 	bl	90005402 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
9000342a:	2306      	movs	r3, #6
9000342c:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
90003430:	e74c      	b.n	900032cc <HAL_HCD_IRQHandler+0x41c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
90003432:	68a1      	ldr	r1, [r4, #8]
90003434:	0549      	lsls	r1, r1, #21
90003436:	d50f      	bpl.n	90003458 <HAL_HCD_IRQHandler+0x5a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003438:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000343a:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_DATATGLERR;
9000343c:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003440:	f043 0302 	orr.w	r3, r3, #2
90003444:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003446:	f001 ffdc 	bl	90005402 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
9000344a:	2310      	movs	r3, #16
9000344c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
9000344e:	f44f 6380 	mov.w	r3, #1024	; 0x400
90003452:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
90003454:	2308      	movs	r3, #8
90003456:	e7c1      	b.n	900033dc <HAL_HCD_IRQHandler+0x52c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
90003458:	68a1      	ldr	r1, [r4, #8]
9000345a:	078a      	lsls	r2, r1, #30
9000345c:	f57f aebe 	bpl.w	900031dc <HAL_HCD_IRQHandler+0x32c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
90003460:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003462:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
90003466:	f021 0102 	bic.w	r1, r1, #2
9000346a:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
9000346c:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
90003470:	2901      	cmp	r1, #1
90003472:	d10e      	bne.n	90003492 <HAL_HCD_IRQHandler+0x5e2>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
90003474:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
90003478:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
9000347c:	3b02      	subs	r3, #2
9000347e:	2b01      	cmp	r3, #1
90003480:	f63f aedc 	bhi.w	9000323c <HAL_HCD_IRQHandler+0x38c>
        hhcd->hc[ch_num].toggle_out ^= 1U;
90003484:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
90003488:	f083 0301 	eor.w	r3, r3, #1
9000348c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
90003490:	e6d4      	b.n	9000323c <HAL_HCD_IRQHandler+0x38c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
90003492:	3903      	subs	r1, #3
90003494:	2905      	cmp	r1, #5
90003496:	f63f aed1 	bhi.w	9000323c <HAL_HCD_IRQHandler+0x38c>
9000349a:	a001      	add	r0, pc, #4	; (adr r0, 900034a0 <HAL_HCD_IRQHandler+0x5f0>)
9000349c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
900034a0:	900034b9 	.word	0x900034b9
900034a4:	900034b9 	.word	0x900034b9
900034a8:	900034c3 	.word	0x900034c3
900034ac:	900034cf 	.word	0x900034cf
900034b0:	9000323d 	.word	0x9000323d
900034b4:	900034cf 	.word	0x900034cf
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
900034b8:	fb07 5306 	mla	r3, r7, r6, r5
900034bc:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
900034c0:	e6bc      	b.n	9000323c <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
900034c2:	fb07 5306 	mla	r3, r7, r6, r5
900034c6:	2205      	movs	r2, #5
900034c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
900034cc:	e6b6      	b.n	9000323c <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].ErrCnt++;
900034ce:	fb07 5006 	mla	r0, r7, r6, r5
900034d2:	6d81      	ldr	r1, [r0, #88]	; 0x58
900034d4:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
900034d6:	2903      	cmp	r1, #3
        hhcd->hc[ch_num].ErrCnt = 0U;
900034d8:	bf8d      	iteet	hi
900034da:	2100      	movhi	r1, #0
      hhcd->hc[ch_num].ErrCnt++;
900034dc:	6581      	strls	r1, [r0, #88]	; 0x58
900034de:	2102      	movls	r1, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
900034e0:	6581      	strhi	r1, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
900034e2:	bf88      	it	hi
900034e4:	2104      	movhi	r1, #4
        hhcd->hc[ch_num].urb_state = URB_ERROR;
900034e6:	fb07 5006 	mla	r0, r7, r6, r5
900034ea:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
900034ee:	e6c7      	b.n	90003280 <HAL_HCD_IRQHandler+0x3d0>

900034f0 <HAL_HCD_Start>:
{
900034f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
900034f2:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
900034f6:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
900034f8:	2b01      	cmp	r3, #1
900034fa:	d00d      	beq.n	90003518 <HAL_HCD_Start+0x28>
900034fc:	2501      	movs	r5, #1
900034fe:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
90003502:	6800      	ldr	r0, [r0, #0]
90003504:	f001 fdc3 	bl	9000508e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
90003508:	4629      	mov	r1, r5
9000350a:	6820      	ldr	r0, [r4, #0]
9000350c:	f001 fe68 	bl	900051e0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
90003510:	2000      	movs	r0, #0
90003512:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
90003516:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
90003518:	2002      	movs	r0, #2
9000351a:	e7fc      	b.n	90003516 <HAL_HCD_Start+0x26>

9000351c <HAL_HCD_Stop>:
{
9000351c:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
9000351e:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
90003522:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
90003524:	2b01      	cmp	r3, #1
90003526:	d009      	beq.n	9000353c <HAL_HCD_Stop+0x20>
90003528:	2301      	movs	r3, #1
9000352a:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
9000352e:	6800      	ldr	r0, [r0, #0]
90003530:	f002 f87a 	bl	90005628 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
90003534:	2000      	movs	r0, #0
90003536:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
9000353a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
9000353c:	2002      	movs	r0, #2
9000353e:	e7fc      	b.n	9000353a <HAL_HCD_Stop+0x1e>

90003540 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
90003540:	6800      	ldr	r0, [r0, #0]
90003542:	f001 be2f 	b.w	900051a4 <USB_ResetPort>

90003546 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
90003546:	2328      	movs	r3, #40	; 0x28
90003548:	fb03 0101 	mla	r1, r3, r1, r0
}
9000354c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
90003550:	4770      	bx	lr

90003552 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
90003552:	2328      	movs	r3, #40	; 0x28
90003554:	fb03 0101 	mla	r1, r3, r1, r0
}
90003558:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
9000355a:	4770      	bx	lr

9000355c <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
9000355c:	6800      	ldr	r0, [r0, #0]
9000355e:	f001 bed2 	b.w	90005306 <USB_GetCurrentFrame>

90003562 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
90003562:	6800      	ldr	r0, [r0, #0]
90003564:	f001 bec4 	b.w	900052f0 <USB_GetHostSpeed>

90003568 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90003568:	6803      	ldr	r3, [r0, #0]
9000356a:	699a      	ldr	r2, [r3, #24]
9000356c:	0791      	lsls	r1, r2, #30
9000356e:	d501      	bpl.n	90003574 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
90003570:	2200      	movs	r2, #0
90003572:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90003574:	699a      	ldr	r2, [r3, #24]
90003576:	07d2      	lsls	r2, r2, #31
90003578:	d403      	bmi.n	90003582 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
9000357a:	699a      	ldr	r2, [r3, #24]
9000357c:	f042 0201 	orr.w	r2, r2, #1
90003580:	619a      	str	r2, [r3, #24]
  }
}
90003582:	4770      	bx	lr

90003584 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
90003584:	b530      	push	{r4, r5, lr}
90003586:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
90003588:	f3c1 0109 	ubfx	r1, r1, #0, #10
9000358c:	6804      	ldr	r4, [r0, #0]
9000358e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
90003592:	6860      	ldr	r0, [r4, #4]
90003594:	431a      	orrs	r2, r3
90003596:	4b04      	ldr	r3, [pc, #16]	; (900035a8 <I2C_TransferConfig+0x24>)
90003598:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
9000359c:	430a      	orrs	r2, r1
9000359e:	ea20 0003 	bic.w	r0, r0, r3
900035a2:	4302      	orrs	r2, r0
900035a4:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
900035a6:	bd30      	pop	{r4, r5, pc}
900035a8:	03ff63ff 	.word	0x03ff63ff

900035ac <I2C_IsAcknowledgeFailed>:
{
900035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
900035ae:	6803      	ldr	r3, [r0, #0]
{
900035b0:	4604      	mov	r4, r0
900035b2:	460e      	mov	r6, r1
900035b4:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
900035b6:	6998      	ldr	r0, [r3, #24]
900035b8:	f010 0010 	ands.w	r0, r0, #16
900035bc:	d116      	bne.n	900035ec <I2C_IsAcknowledgeFailed+0x40>
}
900035be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
900035c0:	1c72      	adds	r2, r6, #1
900035c2:	d014      	beq.n	900035ee <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900035c4:	f7fe ff0e 	bl	900023e4 <HAL_GetTick>
900035c8:	1bc0      	subs	r0, r0, r7
900035ca:	4286      	cmp	r6, r0
900035cc:	d300      	bcc.n	900035d0 <I2C_IsAcknowledgeFailed+0x24>
900035ce:	b96e      	cbnz	r6, 900035ec <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900035d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
900035d2:	f043 0320 	orr.w	r3, r3, #32
900035d6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900035d8:	2320      	movs	r3, #32
900035da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900035de:	2300      	movs	r3, #0
900035e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
900035e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
900035e8:	2001      	movs	r0, #1
900035ea:	e7e8      	b.n	900035be <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900035ec:	6825      	ldr	r5, [r4, #0]
900035ee:	69ab      	ldr	r3, [r5, #24]
900035f0:	069b      	lsls	r3, r3, #26
900035f2:	d5e5      	bpl.n	900035c0 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900035f4:	2310      	movs	r3, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900035f6:	2620      	movs	r6, #32
    I2C_Flush_TXDR(hi2c);
900035f8:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900035fa:	61eb      	str	r3, [r5, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900035fc:	61ee      	str	r6, [r5, #28]
    I2C_Flush_TXDR(hi2c);
900035fe:	f7ff ffb3 	bl	90003568 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
90003602:	686b      	ldr	r3, [r5, #4]
90003604:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
90003608:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
9000360c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
90003610:	f023 0301 	bic.w	r3, r3, #1
90003614:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
90003616:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003618:	f043 0304 	orr.w	r3, r3, #4
9000361c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000361e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
90003620:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90003624:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
90003628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
9000362c:	e7dc      	b.n	900035e8 <I2C_IsAcknowledgeFailed+0x3c>

9000362e <I2C_WaitOnTXISFlagUntilTimeout>:
{
9000362e:	b570      	push	{r4, r5, r6, lr}
90003630:	4604      	mov	r4, r0
90003632:	460d      	mov	r5, r1
90003634:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90003636:	6823      	ldr	r3, [r4, #0]
90003638:	699b      	ldr	r3, [r3, #24]
9000363a:	079b      	lsls	r3, r3, #30
9000363c:	d501      	bpl.n	90003642 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
9000363e:	2000      	movs	r0, #0
}
90003640:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
90003642:	4632      	mov	r2, r6
90003644:	4629      	mov	r1, r5
90003646:	4620      	mov	r0, r4
90003648:	f7ff ffb0 	bl	900035ac <I2C_IsAcknowledgeFailed>
9000364c:	b9a0      	cbnz	r0, 90003678 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
9000364e:	1c6a      	adds	r2, r5, #1
90003650:	d0f1      	beq.n	90003636 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003652:	f7fe fec7 	bl	900023e4 <HAL_GetTick>
90003656:	1b80      	subs	r0, r0, r6
90003658:	42a8      	cmp	r0, r5
9000365a:	d801      	bhi.n	90003660 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
9000365c:	2d00      	cmp	r5, #0
9000365e:	d1ea      	bne.n	90003636 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003660:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003662:	f043 0320 	orr.w	r3, r3, #32
90003666:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003668:	2320      	movs	r3, #32
9000366a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
9000366e:	2300      	movs	r3, #0
90003670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
90003674:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90003678:	2001      	movs	r0, #1
9000367a:	e7e1      	b.n	90003640 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

9000367c <I2C_WaitOnFlagUntilTimeout>:
{
9000367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90003680:	9f06      	ldr	r7, [sp, #24]
90003682:	4604      	mov	r4, r0
90003684:	4688      	mov	r8, r1
90003686:	4616      	mov	r6, r2
90003688:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000368a:	6822      	ldr	r2, [r4, #0]
9000368c:	6993      	ldr	r3, [r2, #24]
9000368e:	ea38 0303 	bics.w	r3, r8, r3
90003692:	bf0c      	ite	eq
90003694:	2301      	moveq	r3, #1
90003696:	2300      	movne	r3, #0
90003698:	42b3      	cmp	r3, r6
9000369a:	d001      	beq.n	900036a0 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
9000369c:	2000      	movs	r0, #0
9000369e:	e015      	b.n	900036cc <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
900036a0:	1c6b      	adds	r3, r5, #1
900036a2:	d0f3      	beq.n	9000368c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900036a4:	f7fe fe9e 	bl	900023e4 <HAL_GetTick>
900036a8:	1bc0      	subs	r0, r0, r7
900036aa:	42a8      	cmp	r0, r5
900036ac:	d801      	bhi.n	900036b2 <I2C_WaitOnFlagUntilTimeout+0x36>
900036ae:	2d00      	cmp	r5, #0
900036b0:	d1eb      	bne.n	9000368a <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900036b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
900036b4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900036b6:	f043 0320 	orr.w	r3, r3, #32
900036ba:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
900036bc:	2320      	movs	r3, #32
900036be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
900036c2:	2300      	movs	r3, #0
900036c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
900036c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
900036cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900036d0 <I2C_RequestMemoryWrite>:
{
900036d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
900036d4:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
900036d6:	4b18      	ldr	r3, [pc, #96]	; (90003738 <I2C_RequestMemoryWrite+0x68>)
{
900036d8:	4605      	mov	r5, r0
900036da:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
900036dc:	9300      	str	r3, [sp, #0]
900036de:	b2f2      	uxtb	r2, r6
900036e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
900036e4:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
900036e8:	f7ff ff4c 	bl	90003584 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900036ec:	4628      	mov	r0, r5
900036ee:	4642      	mov	r2, r8
900036f0:	4639      	mov	r1, r7
900036f2:	f7ff ff9c 	bl	9000362e <I2C_WaitOnTXISFlagUntilTimeout>
900036f6:	b118      	cbz	r0, 90003700 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
900036f8:	2001      	movs	r0, #1
}
900036fa:	b002      	add	sp, #8
900036fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003700:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003702:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003704:	d10d      	bne.n	90003722 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003706:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90003708:	2200      	movs	r2, #0
9000370a:	2180      	movs	r1, #128	; 0x80
9000370c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000370e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90003710:	463b      	mov	r3, r7
90003712:	f8cd 8000 	str.w	r8, [sp]
90003716:	f7ff ffb1 	bl	9000367c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
9000371a:	3800      	subs	r0, #0
9000371c:	bf18      	it	ne
9000371e:	2001      	movne	r0, #1
90003720:	e7eb      	b.n	900036fa <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003722:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003724:	4639      	mov	r1, r7
90003726:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003728:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000372a:	4642      	mov	r2, r8
9000372c:	f7ff ff7f 	bl	9000362e <I2C_WaitOnTXISFlagUntilTimeout>
90003730:	2800      	cmp	r0, #0
90003732:	d1e1      	bne.n	900036f8 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003734:	682b      	ldr	r3, [r5, #0]
90003736:	e7e6      	b.n	90003706 <I2C_RequestMemoryWrite+0x36>
90003738:	80002000 	.word	0x80002000

9000373c <I2C_RequestMemoryRead>:
{
9000373c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90003740:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003742:	4b18      	ldr	r3, [pc, #96]	; (900037a4 <I2C_RequestMemoryRead+0x68>)
{
90003744:	4605      	mov	r5, r0
90003746:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003748:	9300      	str	r3, [sp, #0]
9000374a:	b2f2      	uxtb	r2, r6
9000374c:	2300      	movs	r3, #0
{
9000374e:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003752:	f7ff ff17 	bl	90003584 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003756:	4628      	mov	r0, r5
90003758:	4642      	mov	r2, r8
9000375a:	4639      	mov	r1, r7
9000375c:	f7ff ff67 	bl	9000362e <I2C_WaitOnTXISFlagUntilTimeout>
90003760:	b118      	cbz	r0, 9000376a <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
90003762:	2001      	movs	r0, #1
}
90003764:	b002      	add	sp, #8
90003766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000376a:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000376c:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000376e:	d10d      	bne.n	9000378c <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003770:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90003772:	2200      	movs	r2, #0
90003774:	2140      	movs	r1, #64	; 0x40
90003776:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003778:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
9000377a:	463b      	mov	r3, r7
9000377c:	f8cd 8000 	str.w	r8, [sp]
90003780:	f7ff ff7c 	bl	9000367c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
90003784:	3800      	subs	r0, #0
90003786:	bf18      	it	ne
90003788:	2001      	movne	r0, #1
9000378a:	e7eb      	b.n	90003764 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000378c:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000378e:	4639      	mov	r1, r7
90003790:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003792:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003794:	4642      	mov	r2, r8
90003796:	f7ff ff4a 	bl	9000362e <I2C_WaitOnTXISFlagUntilTimeout>
9000379a:	2800      	cmp	r0, #0
9000379c:	d1e1      	bne.n	90003762 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000379e:	682b      	ldr	r3, [r5, #0]
900037a0:	e7e6      	b.n	90003770 <I2C_RequestMemoryRead+0x34>
900037a2:	bf00      	nop
900037a4:	80002000 	.word	0x80002000

900037a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
900037a8:	b570      	push	{r4, r5, r6, lr}
900037aa:	4604      	mov	r4, r0
900037ac:	460d      	mov	r5, r1
900037ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900037b0:	6823      	ldr	r3, [r4, #0]
900037b2:	699b      	ldr	r3, [r3, #24]
900037b4:	069b      	lsls	r3, r3, #26
900037b6:	d501      	bpl.n	900037bc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
900037b8:	2000      	movs	r0, #0
}
900037ba:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
900037bc:	4632      	mov	r2, r6
900037be:	4629      	mov	r1, r5
900037c0:	4620      	mov	r0, r4
900037c2:	f7ff fef3 	bl	900035ac <I2C_IsAcknowledgeFailed>
900037c6:	b990      	cbnz	r0, 900037ee <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900037c8:	f7fe fe0c 	bl	900023e4 <HAL_GetTick>
900037cc:	1b80      	subs	r0, r0, r6
900037ce:	42a8      	cmp	r0, r5
900037d0:	d801      	bhi.n	900037d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
900037d2:	2d00      	cmp	r5, #0
900037d4:	d1ec      	bne.n	900037b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900037d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
900037d8:	f043 0320 	orr.w	r3, r3, #32
900037dc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
900037de:	2320      	movs	r3, #32
900037e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
900037e4:	2300      	movs	r3, #0
900037e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
900037ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
900037ee:	2001      	movs	r0, #1
900037f0:	e7e3      	b.n	900037ba <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

900037f2 <HAL_I2C_MspInit>:
}
900037f2:	4770      	bx	lr

900037f4 <HAL_I2C_Init>:
{
900037f4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
900037f6:	4604      	mov	r4, r0
900037f8:	2800      	cmp	r0, #0
900037fa:	d04a      	beq.n	90003892 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
900037fc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90003800:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90003804:	b91b      	cbnz	r3, 9000380e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
90003806:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
9000380a:	f7ff fff2 	bl	900037f2 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
9000380e:	2324      	movs	r3, #36	; 0x24
90003810:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90003814:	6823      	ldr	r3, [r4, #0]
90003816:	681a      	ldr	r2, [r3, #0]
90003818:	f022 0201 	bic.w	r2, r2, #1
9000381c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000381e:	6862      	ldr	r2, [r4, #4]
90003820:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
90003824:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90003826:	689a      	ldr	r2, [r3, #8]
90003828:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000382c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000382e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90003832:	2901      	cmp	r1, #1
90003834:	d124      	bne.n	90003880 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90003836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000383a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000383c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000383e:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90003840:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
90003844:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90003848:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
9000384a:	68da      	ldr	r2, [r3, #12]
9000384c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90003850:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
90003852:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
90003856:	430a      	orrs	r2, r1
90003858:	69a1      	ldr	r1, [r4, #24]
9000385a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
9000385e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90003860:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
90003864:	430a      	orrs	r2, r1
90003866:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
90003868:	681a      	ldr	r2, [r3, #0]
9000386a:	f042 0201 	orr.w	r2, r2, #1
9000386e:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
90003870:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003872:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90003874:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90003878:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000387a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
9000387e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90003880:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90003884:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90003886:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90003888:	d1d8      	bne.n	9000383c <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000388a:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000388e:	605a      	str	r2, [r3, #4]
90003890:	e7d4      	b.n	9000383c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
90003892:	2001      	movs	r0, #1
90003894:	e7f3      	b.n	9000387e <HAL_I2C_Init+0x8a>

90003896 <HAL_I2C_MspDeInit>:
90003896:	4770      	bx	lr

90003898 <HAL_I2C_DeInit>:
{
90003898:	b510      	push	{r4, lr}
  if (hi2c == NULL)
9000389a:	4604      	mov	r4, r0
9000389c:	b198      	cbz	r0, 900038c6 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
9000389e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
900038a0:	2324      	movs	r3, #36	; 0x24
900038a2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
900038a6:	6813      	ldr	r3, [r2, #0]
900038a8:	f023 0301 	bic.w	r3, r3, #1
900038ac:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
900038ae:	f7ff fff2 	bl	90003896 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900038b2:	2000      	movs	r0, #0
900038b4:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
900038b6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
900038ba:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
900038be:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900038c0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
900038c4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
900038c6:	2001      	movs	r0, #1
900038c8:	e7fc      	b.n	900038c4 <HAL_I2C_DeInit+0x2c>

900038ca <HAL_I2C_Mem_Write>:
{
900038ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900038ce:	b085      	sub	sp, #20
900038d0:	469b      	mov	fp, r3
900038d2:	4604      	mov	r4, r0
900038d4:	460f      	mov	r7, r1
900038d6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
900038da:	4692      	mov	sl, r2
900038dc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
900038e0:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
900038e2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
900038e6:	2b20      	cmp	r3, #32
900038e8:	f040 80a3 	bne.w	90003a32 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
900038ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900038ee:	b10b      	cbz	r3, 900038f4 <HAL_I2C_Mem_Write+0x2a>
900038f0:	9b03      	ldr	r3, [sp, #12]
900038f2:	b933      	cbnz	r3, 90003902 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900038f4:	f44f 7300 	mov.w	r3, #512	; 0x200
900038f8:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
900038fa:	2001      	movs	r0, #1
}
900038fc:	b005      	add	sp, #20
900038fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
90003902:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90003906:	2b01      	cmp	r3, #1
90003908:	f000 8093 	beq.w	90003a32 <HAL_I2C_Mem_Write+0x168>
9000390c:	2501      	movs	r5, #1
9000390e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90003912:	f7fe fd67 	bl	900023e4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90003916:	2319      	movs	r3, #25
90003918:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
9000391a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
9000391c:	462a      	mov	r2, r5
9000391e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003922:	4620      	mov	r0, r4
90003924:	f7ff feaa 	bl	9000367c <I2C_WaitOnFlagUntilTimeout>
90003928:	4680      	mov	r8, r0
9000392a:	2800      	cmp	r0, #0
9000392c:	d1e5      	bne.n	900038fa <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000392e:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
90003930:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003932:	4652      	mov	r2, sl
90003934:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90003936:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000393a:	2340      	movs	r3, #64	; 0x40
9000393c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
90003940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003942:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003944:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
90003946:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
90003948:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
9000394a:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
9000394e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003950:	465b      	mov	r3, fp
90003952:	f7ff febd 	bl	900036d0 <I2C_RequestMemoryWrite>
90003956:	b110      	cbz	r0, 9000395e <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
90003958:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
9000395c:	e7cd      	b.n	900038fa <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000395e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003960:	b29b      	uxth	r3, r3
90003962:	2bff      	cmp	r3, #255	; 0xff
90003964:	d955      	bls.n	90003a12 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
90003966:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90003968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
9000396c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000396e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003970:	4639      	mov	r1, r7
90003972:	4620      	mov	r0, r4
90003974:	f7ff fe06 	bl	90003584 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90003978:	4632      	mov	r2, r6
9000397a:	4649      	mov	r1, r9
9000397c:	4620      	mov	r0, r4
9000397e:	f7ff fe56 	bl	9000362e <I2C_WaitOnTXISFlagUntilTimeout>
90003982:	2800      	cmp	r0, #0
90003984:	d1b9      	bne.n	900038fa <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90003986:	6a63      	ldr	r3, [r4, #36]	; 0x24
90003988:	6822      	ldr	r2, [r4, #0]
9000398a:	f813 1b01 	ldrb.w	r1, [r3], #1
9000398e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
90003990:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
90003992:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90003994:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
90003996:	3b01      	subs	r3, #1
      hi2c->XferSize--;
90003998:	3a01      	subs	r2, #1
      hi2c->XferCount--;
9000399a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
9000399c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
9000399e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900039a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
900039a2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900039a4:	b29b      	uxth	r3, r3
900039a6:	b1ab      	cbz	r3, 900039d4 <HAL_I2C_Mem_Write+0x10a>
900039a8:	b9a2      	cbnz	r2, 900039d4 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
900039aa:	464b      	mov	r3, r9
900039ac:	2180      	movs	r1, #128	; 0x80
900039ae:	4620      	mov	r0, r4
900039b0:	9600      	str	r6, [sp, #0]
900039b2:	f7ff fe63 	bl	9000367c <I2C_WaitOnFlagUntilTimeout>
900039b6:	2800      	cmp	r0, #0
900039b8:	d19f      	bne.n	900038fa <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900039ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900039bc:	b29b      	uxth	r3, r3
900039be:	2bff      	cmp	r3, #255	; 0xff
900039c0:	d92f      	bls.n	90003a22 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
900039c2:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
900039c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900039c8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
900039ca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900039cc:	4639      	mov	r1, r7
900039ce:	4620      	mov	r0, r4
900039d0:	f7ff fdd8 	bl	90003584 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
900039d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900039d6:	b29b      	uxth	r3, r3
900039d8:	2b00      	cmp	r3, #0
900039da:	d1cd      	bne.n	90003978 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900039dc:	4632      	mov	r2, r6
900039de:	4649      	mov	r1, r9
900039e0:	4620      	mov	r0, r4
900039e2:	f7ff fee1 	bl	900037a8 <I2C_WaitOnSTOPFlagUntilTimeout>
900039e6:	2800      	cmp	r0, #0
900039e8:	d187      	bne.n	900038fa <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900039ea:	6823      	ldr	r3, [r4, #0]
900039ec:	2120      	movs	r1, #32
900039ee:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
900039f0:	685a      	ldr	r2, [r3, #4]
900039f2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
900039f6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
900039fa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
900039fe:	f022 0201 	bic.w	r2, r2, #1
90003a02:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90003a04:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90003a08:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90003a0c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
90003a10:	e774      	b.n	900038fc <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
90003a12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003a14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003a18:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
90003a1a:	b292      	uxth	r2, r2
90003a1c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003a1e:	b2d2      	uxtb	r2, r2
90003a20:	e7a6      	b.n	90003970 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
90003a22:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003a24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003a28:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
90003a2a:	b292      	uxth	r2, r2
90003a2c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003a2e:	b2d2      	uxtb	r2, r2
90003a30:	e7cc      	b.n	900039cc <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
90003a32:	2002      	movs	r0, #2
90003a34:	e762      	b.n	900038fc <HAL_I2C_Mem_Write+0x32>
	...

90003a38 <HAL_I2C_Mem_Read>:
{
90003a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003a3c:	b085      	sub	sp, #20
90003a3e:	469b      	mov	fp, r3
90003a40:	4604      	mov	r4, r0
90003a42:	460f      	mov	r7, r1
90003a44:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90003a48:	4692      	mov	sl, r2
90003a4a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
90003a4e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
90003a50:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90003a54:	2b20      	cmp	r3, #32
90003a56:	f040 80a7 	bne.w	90003ba8 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
90003a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90003a5c:	b10b      	cbz	r3, 90003a62 <HAL_I2C_Mem_Read+0x2a>
90003a5e:	9b03      	ldr	r3, [sp, #12]
90003a60:	b933      	cbnz	r3, 90003a70 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90003a62:	f44f 7300 	mov.w	r3, #512	; 0x200
90003a66:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
90003a68:	2001      	movs	r0, #1
}
90003a6a:	b005      	add	sp, #20
90003a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
90003a70:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90003a74:	2b01      	cmp	r3, #1
90003a76:	f000 8097 	beq.w	90003ba8 <HAL_I2C_Mem_Read+0x170>
90003a7a:	2501      	movs	r5, #1
90003a7c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90003a80:	f7fe fcb0 	bl	900023e4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90003a84:	2319      	movs	r3, #25
90003a86:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
90003a88:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90003a8a:	462a      	mov	r2, r5
90003a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003a90:	4620      	mov	r0, r4
90003a92:	f7ff fdf3 	bl	9000367c <I2C_WaitOnFlagUntilTimeout>
90003a96:	4680      	mov	r8, r0
90003a98:	2800      	cmp	r0, #0
90003a9a:	d1e5      	bne.n	90003a68 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90003a9c:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
90003a9e:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003aa0:	4652      	mov	r2, sl
90003aa2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90003aa4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90003aa8:	2340      	movs	r3, #64	; 0x40
90003aaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
90003aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003ab0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003ab2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
90003ab4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
90003ab6:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003ab8:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
90003abc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90003abe:	465b      	mov	r3, fp
90003ac0:	f7ff fe3c 	bl	9000373c <I2C_RequestMemoryRead>
90003ac4:	b110      	cbz	r0, 90003acc <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
90003ac6:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
90003aca:	e7cd      	b.n	90003a68 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90003acc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003ace:	b29b      	uxth	r3, r3
90003ad0:	2bff      	cmp	r3, #255	; 0xff
90003ad2:	4b36      	ldr	r3, [pc, #216]	; (90003bac <HAL_I2C_Mem_Read+0x174>)
90003ad4:	d958      	bls.n	90003b88 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
90003ad6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
90003ad8:	9300      	str	r3, [sp, #0]
90003ada:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
90003ade:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90003ae0:	4639      	mov	r1, r7
90003ae2:	4620      	mov	r0, r4
90003ae4:	f7ff fd4e 	bl	90003584 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90003ae8:	464b      	mov	r3, r9
90003aea:	2200      	movs	r2, #0
90003aec:	2104      	movs	r1, #4
90003aee:	4620      	mov	r0, r4
90003af0:	9600      	str	r6, [sp, #0]
90003af2:	f7ff fdc3 	bl	9000367c <I2C_WaitOnFlagUntilTimeout>
90003af6:	2800      	cmp	r0, #0
90003af8:	d1b6      	bne.n	90003a68 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90003afa:	6823      	ldr	r3, [r4, #0]
90003afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90003afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
90003b00:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
90003b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
90003b04:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
90003b06:	3301      	adds	r3, #1
      hi2c->XferSize--;
90003b08:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
90003b0a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
90003b0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90003b0e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
90003b10:	3b01      	subs	r3, #1
      hi2c->XferSize--;
90003b12:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
90003b14:	b29b      	uxth	r3, r3
90003b16:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90003b18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003b1a:	b29b      	uxth	r3, r3
90003b1c:	b1ab      	cbz	r3, 90003b4a <HAL_I2C_Mem_Read+0x112>
90003b1e:	b9a2      	cbnz	r2, 90003b4a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90003b20:	464b      	mov	r3, r9
90003b22:	2180      	movs	r1, #128	; 0x80
90003b24:	4620      	mov	r0, r4
90003b26:	9600      	str	r6, [sp, #0]
90003b28:	f7ff fda8 	bl	9000367c <I2C_WaitOnFlagUntilTimeout>
90003b2c:	2800      	cmp	r0, #0
90003b2e:	d19b      	bne.n	90003a68 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90003b30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003b32:	b29b      	uxth	r3, r3
90003b34:	2bff      	cmp	r3, #255	; 0xff
90003b36:	d92f      	bls.n	90003b98 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90003b38:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90003b3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90003b3e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90003b40:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003b42:	4639      	mov	r1, r7
90003b44:	4620      	mov	r0, r4
90003b46:	f7ff fd1d 	bl	90003584 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
90003b4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90003b4c:	b29b      	uxth	r3, r3
90003b4e:	2b00      	cmp	r3, #0
90003b50:	d1ca      	bne.n	90003ae8 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90003b52:	4632      	mov	r2, r6
90003b54:	4649      	mov	r1, r9
90003b56:	4620      	mov	r0, r4
90003b58:	f7ff fe26 	bl	900037a8 <I2C_WaitOnSTOPFlagUntilTimeout>
90003b5c:	2800      	cmp	r0, #0
90003b5e:	d183      	bne.n	90003a68 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003b60:	6823      	ldr	r3, [r4, #0]
90003b62:	2120      	movs	r1, #32
90003b64:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90003b66:	685a      	ldr	r2, [r3, #4]
90003b68:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
90003b6c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
90003b70:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
90003b74:	f022 0201 	bic.w	r2, r2, #1
90003b78:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90003b7a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90003b7e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90003b82:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
90003b86:	e770      	b.n	90003a6a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
90003b88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90003b8a:	9300      	str	r3, [sp, #0]
90003b8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
90003b90:	b292      	uxth	r2, r2
90003b92:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90003b94:	b2d2      	uxtb	r2, r2
90003b96:	e7a3      	b.n	90003ae0 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
90003b98:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003b9e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
90003ba0:	b292      	uxth	r2, r2
90003ba2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90003ba4:	b2d2      	uxtb	r2, r2
90003ba6:	e7cc      	b.n	90003b42 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
90003ba8:	2002      	movs	r0, #2
90003baa:	e75e      	b.n	90003a6a <HAL_I2C_Mem_Read+0x32>
90003bac:	80002400 	.word	0x80002400

90003bb0 <HAL_I2C_GetState>:
  return hi2c->State;
90003bb0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90003bb4:	4770      	bx	lr
	...

90003bb8 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90003bb8:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90003bba:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90003bbc:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90003bc0:	3284      	adds	r2, #132	; 0x84
90003bc2:	1883      	adds	r3, r0, r2
{
90003bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90003bc8:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90003bca:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90003bce:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90003bd0:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90003bd4:	684c      	ldr	r4, [r1, #4]
90003bd6:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90003bda:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90003bde:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90003be2:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90003be4:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90003be6:	68c5      	ldr	r5, [r0, #12]
90003be8:	f3c5 450b 	ubfx	r5, r5, #16, #12
90003bec:	443d      	add	r5, r7
90003bee:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
90003bf2:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90003bf4:	68c6      	ldr	r6, [r0, #12]
90003bf6:	68cd      	ldr	r5, [r1, #12]
90003bf8:	f3c6 060a 	ubfx	r6, r6, #0, #11
90003bfc:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90003bfe:	689d      	ldr	r5, [r3, #8]
90003c00:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
90003c04:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90003c06:	688d      	ldr	r5, [r1, #8]
90003c08:	68c7      	ldr	r7, [r0, #12]
90003c0a:	3501      	adds	r5, #1
90003c0c:	f3c7 070a 	ubfx	r7, r7, #0, #11
90003c10:	443d      	add	r5, r7
90003c12:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90003c16:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90003c18:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90003c1a:	691d      	ldr	r5, [r3, #16]
90003c1c:	f025 0507 	bic.w	r5, r5, #7
90003c20:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90003c22:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90003c24:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90003c26:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90003c2a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90003c2e:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
90003c32:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
90003c36:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
90003c3a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
90003c3e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
90003c42:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90003c44:	695d      	ldr	r5, [r3, #20]
90003c46:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
90003c4a:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90003c4c:	694d      	ldr	r5, [r1, #20]
90003c4e:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90003c50:	69dd      	ldr	r5, [r3, #28]
90003c52:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
90003c56:	f025 0507 	bic.w	r5, r5, #7
90003c5a:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90003c5c:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
90003c60:	433d      	orrs	r5, r7
90003c62:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
90003c64:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
90003c66:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
90003c68:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
90003c6c:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90003c6e:	b1fe      	cbz	r6, 90003cb0 <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90003c70:	3e01      	subs	r6, #1
90003c72:	2e06      	cmp	r6, #6
90003c74:	d81e      	bhi.n	90003cb4 <LTDC_SetConfig+0xfc>
90003c76:	4d10      	ldr	r5, [pc, #64]	; (90003cb8 <LTDC_SetConfig+0x100>)
90003c78:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90003c7a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90003c7c:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90003c80:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90003c84:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90003c86:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90003c88:	3403      	adds	r4, #3
90003c8a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90003c8c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90003c8e:	436e      	muls	r6, r5
90003c90:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
90003c94:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90003c96:	6b1c      	ldr	r4, [r3, #48]	; 0x30
90003c98:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
90003c9c:	f024 0407 	bic.w	r4, r4, #7
90003ca0:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90003ca2:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90003ca4:	5883      	ldr	r3, [r0, r2]
90003ca6:	f043 0301 	orr.w	r3, r3, #1
90003caa:	5083      	str	r3, [r0, r2]
}
90003cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
90003cb0:	2504      	movs	r5, #4
90003cb2:	e7e2      	b.n	90003c7a <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90003cb4:	2501      	movs	r5, #1
90003cb6:	e7e0      	b.n	90003c7a <LTDC_SetConfig+0xc2>
90003cb8:	9000f52c 	.word	0x9000f52c

90003cbc <HAL_LTDC_MspInit>:
}
90003cbc:	4770      	bx	lr
	...

90003cc0 <HAL_LTDC_Init>:
{
90003cc0:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
90003cc2:	4604      	mov	r4, r0
90003cc4:	2800      	cmp	r0, #0
90003cc6:	d063      	beq.n	90003d90 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90003cc8:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
90003ccc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90003cd0:	b91b      	cbnz	r3, 90003cda <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
90003cd2:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
90003cd6:	f7ff fff1 	bl	90003cbc <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003cda:	2302      	movs	r3, #2
90003cdc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90003ce0:	6823      	ldr	r3, [r4, #0]
90003ce2:	699a      	ldr	r2, [r3, #24]
90003ce4:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90003ce8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90003cea:	6999      	ldr	r1, [r3, #24]
90003cec:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
90003cf0:	4302      	orrs	r2, r0
90003cf2:	68e0      	ldr	r0, [r4, #12]
90003cf4:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90003cf6:	6920      	ldr	r0, [r4, #16]
90003cf8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
90003cfa:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90003cfc:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90003cfe:	4925      	ldr	r1, [pc, #148]	; (90003d94 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90003d00:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90003d02:	689a      	ldr	r2, [r3, #8]
90003d04:	400a      	ands	r2, r1
90003d06:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90003d08:	689a      	ldr	r2, [r3, #8]
90003d0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90003d0e:	69a0      	ldr	r0, [r4, #24]
90003d10:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90003d12:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90003d14:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
90003d16:	68da      	ldr	r2, [r3, #12]
90003d18:	400a      	ands	r2, r1
90003d1a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90003d1c:	68da      	ldr	r2, [r3, #12]
90003d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90003d22:	6a20      	ldr	r0, [r4, #32]
90003d24:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90003d26:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90003d28:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
90003d2a:	691a      	ldr	r2, [r3, #16]
90003d2c:	400a      	ands	r2, r1
90003d2e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90003d30:	691a      	ldr	r2, [r3, #16]
90003d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90003d36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90003d38:	4302      	orrs	r2, r0
90003d3a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
90003d3c:	695a      	ldr	r2, [r3, #20]
90003d3e:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
90003d40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
90003d42:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
90003d44:	695a      	ldr	r2, [r3, #20]
90003d46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90003d4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
90003d4c:	430a      	orrs	r2, r1
90003d4e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90003d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90003d52:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90003d56:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90003d5a:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90003d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90003d60:	6add      	ldr	r5, [r3, #44]	; 0x2c
90003d62:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
90003d66:	432a      	orrs	r2, r5
90003d68:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90003d6c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90003d6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90003d72:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90003d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90003d76:	f042 0206 	orr.w	r2, r2, #6
90003d7a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
90003d7c:	699a      	ldr	r2, [r3, #24]
90003d7e:	f042 0201 	orr.w	r2, r2, #1
90003d82:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
90003d84:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90003d86:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
90003d8a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
90003d8e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90003d90:	2001      	movs	r0, #1
90003d92:	e7fc      	b.n	90003d8e <HAL_LTDC_Init+0xce>
90003d94:	f000f800 	.word	0xf000f800

90003d98 <HAL_LTDC_ConfigLayer>:
{
90003d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
90003d9c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
90003da0:	4606      	mov	r6, r0
90003da2:	460f      	mov	r7, r1
90003da4:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
90003da6:	2b01      	cmp	r3, #1
90003da8:	f04f 0002 	mov.w	r0, #2
90003dac:	d01f      	beq.n	90003dee <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90003dae:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
90003db0:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90003db4:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
90003db6:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90003dba:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
90003dbe:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90003dc2:	3438      	adds	r4, #56	; 0x38
90003dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90003dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90003dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90003dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90003dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90003dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90003dd0:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90003dd2:	4630      	mov	r0, r6
90003dd4:	4662      	mov	r2, ip
90003dd6:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90003dd8:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90003dda:	f7ff feed 	bl	90003bb8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90003dde:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
90003de0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90003de2:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
90003de6:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
90003dea:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
90003dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90003df2 <HAL_LTDC_GetState>:
  return hltdc->State;
90003df2:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
90003df6:	4770      	bx	lr

90003df8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
90003df8:	4b19      	ldr	r3, [pc, #100]	; (90003e60 <HAL_PWREx_EnableOverDrive+0x68>)
{
90003dfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
90003dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
90003dfe:	4c19      	ldr	r4, [pc, #100]	; (90003e64 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
90003e00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90003e04:	641a      	str	r2, [r3, #64]	; 0x40
90003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90003e0c:	9301      	str	r3, [sp, #4]
90003e0e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
90003e10:	6823      	ldr	r3, [r4, #0]
90003e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003e16:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90003e18:	f7fe fae4 	bl	900023e4 <HAL_GetTick>
90003e1c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90003e1e:	6863      	ldr	r3, [r4, #4]
90003e20:	03da      	lsls	r2, r3, #15
90003e22:	d50c      	bpl.n	90003e3e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90003e24:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90003e26:	4d0f      	ldr	r5, [pc, #60]	; (90003e64 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90003e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90003e2c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
90003e2e:	f7fe fad9 	bl	900023e4 <HAL_GetTick>
90003e32:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90003e34:	686b      	ldr	r3, [r5, #4]
90003e36:	039b      	lsls	r3, r3, #14
90003e38:	d50a      	bpl.n	90003e50 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
90003e3a:	2000      	movs	r0, #0
90003e3c:	e006      	b.n	90003e4c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90003e3e:	f7fe fad1 	bl	900023e4 <HAL_GetTick>
90003e42:	1b40      	subs	r0, r0, r5
90003e44:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
90003e48:	d9e9      	bls.n	90003e1e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
90003e4a:	2003      	movs	r0, #3
}
90003e4c:	b003      	add	sp, #12
90003e4e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90003e50:	f7fe fac8 	bl	900023e4 <HAL_GetTick>
90003e54:	1b00      	subs	r0, r0, r4
90003e56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
90003e5a:	d9eb      	bls.n	90003e34 <HAL_PWREx_EnableOverDrive+0x3c>
90003e5c:	e7f5      	b.n	90003e4a <HAL_PWREx_EnableOverDrive+0x52>
90003e5e:	bf00      	nop
90003e60:	40023800 	.word	0x40023800
90003e64:	40007000 	.word	0x40007000

90003e68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90003e68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90003e6c:	4604      	mov	r4, r0
90003e6e:	b340      	cbz	r0, 90003ec2 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90003e70:	6803      	ldr	r3, [r0, #0]
90003e72:	07db      	lsls	r3, r3, #31
90003e74:	d410      	bmi.n	90003e98 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90003e76:	6823      	ldr	r3, [r4, #0]
90003e78:	079f      	lsls	r7, r3, #30
90003e7a:	d461      	bmi.n	90003f40 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90003e7c:	6823      	ldr	r3, [r4, #0]
90003e7e:	0719      	lsls	r1, r3, #28
90003e80:	f100 80a6 	bmi.w	90003fd0 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90003e84:	6823      	ldr	r3, [r4, #0]
90003e86:	075a      	lsls	r2, r3, #29
90003e88:	f100 80c7 	bmi.w	9000401a <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90003e8c:	69a2      	ldr	r2, [r4, #24]
90003e8e:	2a00      	cmp	r2, #0
90003e90:	f040 8130 	bne.w	900040f4 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
90003e94:	2000      	movs	r0, #0
90003e96:	e02c      	b.n	90003ef2 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
90003e98:	4b94      	ldr	r3, [pc, #592]	; (900040ec <HAL_RCC_OscConfig+0x284>)
90003e9a:	689a      	ldr	r2, [r3, #8]
90003e9c:	f002 020c 	and.w	r2, r2, #12
90003ea0:	2a04      	cmp	r2, #4
90003ea2:	d007      	beq.n	90003eb4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90003ea4:	689a      	ldr	r2, [r3, #8]
90003ea6:	f002 020c 	and.w	r2, r2, #12
90003eaa:	2a08      	cmp	r2, #8
90003eac:	d10b      	bne.n	90003ec6 <HAL_RCC_OscConfig+0x5e>
90003eae:	685b      	ldr	r3, [r3, #4]
90003eb0:	025e      	lsls	r6, r3, #9
90003eb2:	d508      	bpl.n	90003ec6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90003eb4:	4b8d      	ldr	r3, [pc, #564]	; (900040ec <HAL_RCC_OscConfig+0x284>)
90003eb6:	681b      	ldr	r3, [r3, #0]
90003eb8:	039d      	lsls	r5, r3, #14
90003eba:	d5dc      	bpl.n	90003e76 <HAL_RCC_OscConfig+0xe>
90003ebc:	6863      	ldr	r3, [r4, #4]
90003ebe:	2b00      	cmp	r3, #0
90003ec0:	d1d9      	bne.n	90003e76 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
90003ec2:	2001      	movs	r0, #1
90003ec4:	e015      	b.n	90003ef2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90003ec6:	6863      	ldr	r3, [r4, #4]
90003ec8:	4d88      	ldr	r5, [pc, #544]	; (900040ec <HAL_RCC_OscConfig+0x284>)
90003eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90003ece:	d113      	bne.n	90003ef8 <HAL_RCC_OscConfig+0x90>
90003ed0:	682b      	ldr	r3, [r5, #0]
90003ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003ed6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90003ed8:	f7fe fa84 	bl	900023e4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90003edc:	4e83      	ldr	r6, [pc, #524]	; (900040ec <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
90003ede:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90003ee0:	6833      	ldr	r3, [r6, #0]
90003ee2:	0398      	lsls	r0, r3, #14
90003ee4:	d4c7      	bmi.n	90003e76 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90003ee6:	f7fe fa7d 	bl	900023e4 <HAL_GetTick>
90003eea:	1b40      	subs	r0, r0, r5
90003eec:	2864      	cmp	r0, #100	; 0x64
90003eee:	d9f7      	bls.n	90003ee0 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
90003ef0:	2003      	movs	r0, #3
}
90003ef2:	b002      	add	sp, #8
90003ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90003ef8:	b99b      	cbnz	r3, 90003f22 <HAL_RCC_OscConfig+0xba>
90003efa:	682b      	ldr	r3, [r5, #0]
90003efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90003f00:	602b      	str	r3, [r5, #0]
90003f02:	682b      	ldr	r3, [r5, #0]
90003f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90003f08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90003f0a:	f7fe fa6b 	bl	900023e4 <HAL_GetTick>
90003f0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90003f10:	682b      	ldr	r3, [r5, #0]
90003f12:	0399      	lsls	r1, r3, #14
90003f14:	d5af      	bpl.n	90003e76 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90003f16:	f7fe fa65 	bl	900023e4 <HAL_GetTick>
90003f1a:	1b80      	subs	r0, r0, r6
90003f1c:	2864      	cmp	r0, #100	; 0x64
90003f1e:	d9f7      	bls.n	90003f10 <HAL_RCC_OscConfig+0xa8>
90003f20:	e7e6      	b.n	90003ef0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90003f22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90003f26:	682b      	ldr	r3, [r5, #0]
90003f28:	d103      	bne.n	90003f32 <HAL_RCC_OscConfig+0xca>
90003f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90003f2e:	602b      	str	r3, [r5, #0]
90003f30:	e7ce      	b.n	90003ed0 <HAL_RCC_OscConfig+0x68>
90003f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90003f36:	602b      	str	r3, [r5, #0]
90003f38:	682b      	ldr	r3, [r5, #0]
90003f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90003f3e:	e7ca      	b.n	90003ed6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
90003f40:	4b6a      	ldr	r3, [pc, #424]	; (900040ec <HAL_RCC_OscConfig+0x284>)
90003f42:	689a      	ldr	r2, [r3, #8]
90003f44:	f012 0f0c 	tst.w	r2, #12
90003f48:	d007      	beq.n	90003f5a <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
90003f4a:	689a      	ldr	r2, [r3, #8]
90003f4c:	f002 020c 	and.w	r2, r2, #12
90003f50:	2a08      	cmp	r2, #8
90003f52:	d111      	bne.n	90003f78 <HAL_RCC_OscConfig+0x110>
90003f54:	685b      	ldr	r3, [r3, #4]
90003f56:	025a      	lsls	r2, r3, #9
90003f58:	d40e      	bmi.n	90003f78 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90003f5a:	4a64      	ldr	r2, [pc, #400]	; (900040ec <HAL_RCC_OscConfig+0x284>)
90003f5c:	6813      	ldr	r3, [r2, #0]
90003f5e:	079b      	lsls	r3, r3, #30
90003f60:	d502      	bpl.n	90003f68 <HAL_RCC_OscConfig+0x100>
90003f62:	68e3      	ldr	r3, [r4, #12]
90003f64:	2b01      	cmp	r3, #1
90003f66:	d1ac      	bne.n	90003ec2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90003f68:	6813      	ldr	r3, [r2, #0]
90003f6a:	6921      	ldr	r1, [r4, #16]
90003f6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
90003f70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
90003f74:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90003f76:	e781      	b.n	90003e7c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90003f78:	68e3      	ldr	r3, [r4, #12]
90003f7a:	4d5c      	ldr	r5, [pc, #368]	; (900040ec <HAL_RCC_OscConfig+0x284>)
90003f7c:	b1bb      	cbz	r3, 90003fae <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
90003f7e:	682b      	ldr	r3, [r5, #0]
90003f80:	f043 0301 	orr.w	r3, r3, #1
90003f84:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90003f86:	f7fe fa2d 	bl	900023e4 <HAL_GetTick>
90003f8a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90003f8c:	682b      	ldr	r3, [r5, #0]
90003f8e:	079f      	lsls	r7, r3, #30
90003f90:	d507      	bpl.n	90003fa2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90003f92:	682b      	ldr	r3, [r5, #0]
90003f94:	6922      	ldr	r2, [r4, #16]
90003f96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
90003f9a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
90003f9e:	602b      	str	r3, [r5, #0]
90003fa0:	e76c      	b.n	90003e7c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90003fa2:	f7fe fa1f 	bl	900023e4 <HAL_GetTick>
90003fa6:	1b80      	subs	r0, r0, r6
90003fa8:	2802      	cmp	r0, #2
90003faa:	d9ef      	bls.n	90003f8c <HAL_RCC_OscConfig+0x124>
90003fac:	e7a0      	b.n	90003ef0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
90003fae:	682b      	ldr	r3, [r5, #0]
90003fb0:	f023 0301 	bic.w	r3, r3, #1
90003fb4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90003fb6:	f7fe fa15 	bl	900023e4 <HAL_GetTick>
90003fba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90003fbc:	682b      	ldr	r3, [r5, #0]
90003fbe:	0798      	lsls	r0, r3, #30
90003fc0:	f57f af5c 	bpl.w	90003e7c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90003fc4:	f7fe fa0e 	bl	900023e4 <HAL_GetTick>
90003fc8:	1b80      	subs	r0, r0, r6
90003fca:	2802      	cmp	r0, #2
90003fcc:	d9f6      	bls.n	90003fbc <HAL_RCC_OscConfig+0x154>
90003fce:	e78f      	b.n	90003ef0 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90003fd0:	6963      	ldr	r3, [r4, #20]
90003fd2:	4d46      	ldr	r5, [pc, #280]	; (900040ec <HAL_RCC_OscConfig+0x284>)
90003fd4:	b183      	cbz	r3, 90003ff8 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
90003fd6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90003fd8:	f043 0301 	orr.w	r3, r3, #1
90003fdc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90003fde:	f7fe fa01 	bl	900023e4 <HAL_GetTick>
90003fe2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90003fe4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90003fe6:	079b      	lsls	r3, r3, #30
90003fe8:	f53f af4c 	bmi.w	90003e84 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90003fec:	f7fe f9fa 	bl	900023e4 <HAL_GetTick>
90003ff0:	1b80      	subs	r0, r0, r6
90003ff2:	2802      	cmp	r0, #2
90003ff4:	d9f6      	bls.n	90003fe4 <HAL_RCC_OscConfig+0x17c>
90003ff6:	e77b      	b.n	90003ef0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
90003ff8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90003ffa:	f023 0301 	bic.w	r3, r3, #1
90003ffe:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90004000:	f7fe f9f0 	bl	900023e4 <HAL_GetTick>
90004004:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90004006:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90004008:	079f      	lsls	r7, r3, #30
9000400a:	f57f af3b 	bpl.w	90003e84 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000400e:	f7fe f9e9 	bl	900023e4 <HAL_GetTick>
90004012:	1b80      	subs	r0, r0, r6
90004014:	2802      	cmp	r0, #2
90004016:	d9f6      	bls.n	90004006 <HAL_RCC_OscConfig+0x19e>
90004018:	e76a      	b.n	90003ef0 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
9000401a:	4b34      	ldr	r3, [pc, #208]	; (900040ec <HAL_RCC_OscConfig+0x284>)
9000401c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000401e:	00d0      	lsls	r0, r2, #3
90004020:	d427      	bmi.n	90004072 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
90004022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
90004024:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
90004026:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
9000402a:	641a      	str	r2, [r3, #64]	; 0x40
9000402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90004032:	9301      	str	r3, [sp, #4]
90004034:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90004036:	4d2e      	ldr	r5, [pc, #184]	; (900040f0 <HAL_RCC_OscConfig+0x288>)
90004038:	682b      	ldr	r3, [r5, #0]
9000403a:	05d9      	lsls	r1, r3, #23
9000403c:	d51b      	bpl.n	90004076 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000403e:	68a3      	ldr	r3, [r4, #8]
90004040:	4d2a      	ldr	r5, [pc, #168]	; (900040ec <HAL_RCC_OscConfig+0x284>)
90004042:	2b01      	cmp	r3, #1
90004044:	d127      	bne.n	90004096 <HAL_RCC_OscConfig+0x22e>
90004046:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90004048:	f043 0301 	orr.w	r3, r3, #1
9000404c:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000404e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
90004052:	f7fe f9c7 	bl	900023e4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90004056:	4e25      	ldr	r6, [pc, #148]	; (900040ec <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
90004058:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
9000405a:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000405c:	079b      	lsls	r3, r3, #30
9000405e:	d53f      	bpl.n	900040e0 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
90004060:	2f00      	cmp	r7, #0
90004062:	f43f af13 	beq.w	90003e8c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
90004066:	4a21      	ldr	r2, [pc, #132]	; (900040ec <HAL_RCC_OscConfig+0x284>)
90004068:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000406a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000406e:	6413      	str	r3, [r2, #64]	; 0x40
90004070:	e70c      	b.n	90003e8c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
90004072:	2700      	movs	r7, #0
90004074:	e7df      	b.n	90004036 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
90004076:	682b      	ldr	r3, [r5, #0]
90004078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000407c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000407e:	f7fe f9b1 	bl	900023e4 <HAL_GetTick>
90004082:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90004084:	682b      	ldr	r3, [r5, #0]
90004086:	05da      	lsls	r2, r3, #23
90004088:	d4d9      	bmi.n	9000403e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000408a:	f7fe f9ab 	bl	900023e4 <HAL_GetTick>
9000408e:	1b80      	subs	r0, r0, r6
90004090:	2864      	cmp	r0, #100	; 0x64
90004092:	d9f7      	bls.n	90004084 <HAL_RCC_OscConfig+0x21c>
90004094:	e72c      	b.n	90003ef0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90004096:	b9ab      	cbnz	r3, 900040c4 <HAL_RCC_OscConfig+0x25c>
90004098:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000409a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000409e:	f023 0301 	bic.w	r3, r3, #1
900040a2:	672b      	str	r3, [r5, #112]	; 0x70
900040a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
900040a6:	f023 0304 	bic.w	r3, r3, #4
900040aa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
900040ac:	f7fe f99a 	bl	900023e4 <HAL_GetTick>
900040b0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
900040b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
900040b4:	0798      	lsls	r0, r3, #30
900040b6:	d5d3      	bpl.n	90004060 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900040b8:	f7fe f994 	bl	900023e4 <HAL_GetTick>
900040bc:	1b80      	subs	r0, r0, r6
900040be:	4540      	cmp	r0, r8
900040c0:	d9f7      	bls.n	900040b2 <HAL_RCC_OscConfig+0x24a>
900040c2:	e715      	b.n	90003ef0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900040c4:	2b05      	cmp	r3, #5
900040c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
900040c8:	d103      	bne.n	900040d2 <HAL_RCC_OscConfig+0x26a>
900040ca:	f043 0304 	orr.w	r3, r3, #4
900040ce:	672b      	str	r3, [r5, #112]	; 0x70
900040d0:	e7b9      	b.n	90004046 <HAL_RCC_OscConfig+0x1de>
900040d2:	f023 0301 	bic.w	r3, r3, #1
900040d6:	672b      	str	r3, [r5, #112]	; 0x70
900040d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
900040da:	f023 0304 	bic.w	r3, r3, #4
900040de:	e7b5      	b.n	9000404c <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900040e0:	f7fe f980 	bl	900023e4 <HAL_GetTick>
900040e4:	1b40      	subs	r0, r0, r5
900040e6:	4540      	cmp	r0, r8
900040e8:	d9b7      	bls.n	9000405a <HAL_RCC_OscConfig+0x1f2>
900040ea:	e701      	b.n	90003ef0 <HAL_RCC_OscConfig+0x88>
900040ec:	40023800 	.word	0x40023800
900040f0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
900040f4:	4d38      	ldr	r5, [pc, #224]	; (900041d8 <HAL_RCC_OscConfig+0x370>)
900040f6:	68ab      	ldr	r3, [r5, #8]
900040f8:	f003 030c 	and.w	r3, r3, #12
900040fc:	2b08      	cmp	r3, #8
900040fe:	d041      	beq.n	90004184 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
90004100:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90004102:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
90004104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90004108:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000410a:	d12e      	bne.n	9000416a <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
9000410c:	f7fe f96a 	bl	900023e4 <HAL_GetTick>
90004110:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90004112:	682b      	ldr	r3, [r5, #0]
90004114:	0199      	lsls	r1, r3, #6
90004116:	d422      	bmi.n	9000415e <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90004118:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000411a:	085b      	lsrs	r3, r3, #1
9000411c:	1e5a      	subs	r2, r3, #1
9000411e:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
90004122:	430b      	orrs	r3, r1
90004124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90004128:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000412a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
9000412e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90004130:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90004134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
90004138:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
9000413a:	682b      	ldr	r3, [r5, #0]
9000413c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90004140:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90004142:	f7fe f94f 	bl	900023e4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90004146:	4d24      	ldr	r5, [pc, #144]	; (900041d8 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
90004148:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
9000414a:	682b      	ldr	r3, [r5, #0]
9000414c:	019a      	lsls	r2, r3, #6
9000414e:	f53f aea1 	bmi.w	90003e94 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90004152:	f7fe f947 	bl	900023e4 <HAL_GetTick>
90004156:	1b00      	subs	r0, r0, r4
90004158:	2802      	cmp	r0, #2
9000415a:	d9f6      	bls.n	9000414a <HAL_RCC_OscConfig+0x2e2>
9000415c:	e6c8      	b.n	90003ef0 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000415e:	f7fe f941 	bl	900023e4 <HAL_GetTick>
90004162:	1b80      	subs	r0, r0, r6
90004164:	2802      	cmp	r0, #2
90004166:	d9d4      	bls.n	90004112 <HAL_RCC_OscConfig+0x2aa>
90004168:	e6c2      	b.n	90003ef0 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
9000416a:	f7fe f93b 	bl	900023e4 <HAL_GetTick>
9000416e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90004170:	682b      	ldr	r3, [r5, #0]
90004172:	019b      	lsls	r3, r3, #6
90004174:	f57f ae8e 	bpl.w	90003e94 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90004178:	f7fe f934 	bl	900023e4 <HAL_GetTick>
9000417c:	1b00      	subs	r0, r0, r4
9000417e:	2802      	cmp	r0, #2
90004180:	d9f6      	bls.n	90004170 <HAL_RCC_OscConfig+0x308>
90004182:	e6b5      	b.n	90003ef0 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004184:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
90004186:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004188:	f43f ae9b 	beq.w	90003ec2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000418c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004190:	69e1      	ldr	r1, [r4, #28]
90004192:	428a      	cmp	r2, r1
90004194:	f47f ae95 	bne.w	90003ec2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90004198:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000419c:	6a21      	ldr	r1, [r4, #32]
9000419e:	428a      	cmp	r2, r1
900041a0:	f47f ae8f 	bne.w	90003ec2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
900041a4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
900041a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
900041aa:	401a      	ands	r2, r3
900041ac:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
900041b0:	f47f ae87 	bne.w	90003ec2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
900041b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900041b6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
900041ba:	0852      	lsrs	r2, r2, #1
900041bc:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
900041be:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
900041c2:	f47f ae7e 	bne.w	90003ec2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
900041c6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
900041ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
900041cc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
900041d0:	f43f ae60 	beq.w	90003e94 <HAL_RCC_OscConfig+0x2c>
900041d4:	e675      	b.n	90003ec2 <HAL_RCC_OscConfig+0x5a>
900041d6:	bf00      	nop
900041d8:	40023800 	.word	0x40023800

900041dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
900041dc:	4913      	ldr	r1, [pc, #76]	; (9000422c <HAL_RCC_GetSysClockFreq+0x50>)
{
900041de:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
900041e0:	688b      	ldr	r3, [r1, #8]
900041e2:	f003 030c 	and.w	r3, r3, #12
900041e6:	2b04      	cmp	r3, #4
900041e8:	d01b      	beq.n	90004222 <HAL_RCC_GetSysClockFreq+0x46>
900041ea:	2b08      	cmp	r3, #8
900041ec:	d11b      	bne.n	90004226 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
900041ee:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
900041f0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
900041f2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
900041f4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
900041f8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
900041fc:	f3c1 1188 	ubfx	r1, r1, #6, #9
90004200:	bf1a      	itte	ne
90004202:	480b      	ldrne	r0, [pc, #44]	; (90004230 <HAL_RCC_GetSysClockFreq+0x54>)
90004204:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90004206:	480b      	ldreq	r0, [pc, #44]	; (90004234 <HAL_RCC_GetSysClockFreq+0x58>)
90004208:	fba1 0100 	umull	r0, r1, r1, r0
9000420c:	f7fc f850 	bl	900002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
90004210:	4b06      	ldr	r3, [pc, #24]	; (9000422c <HAL_RCC_GetSysClockFreq+0x50>)
90004212:	685b      	ldr	r3, [r3, #4]
90004214:	f3c3 4301 	ubfx	r3, r3, #16, #2
90004218:	3301      	adds	r3, #1
9000421a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
9000421c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
90004220:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
90004222:	4803      	ldr	r0, [pc, #12]	; (90004230 <HAL_RCC_GetSysClockFreq+0x54>)
90004224:	e7fc      	b.n	90004220 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
90004226:	4803      	ldr	r0, [pc, #12]	; (90004234 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
90004228:	e7fa      	b.n	90004220 <HAL_RCC_GetSysClockFreq+0x44>
9000422a:	bf00      	nop
9000422c:	40023800 	.word	0x40023800
90004230:	017d7840 	.word	0x017d7840
90004234:	00f42400 	.word	0x00f42400

90004238 <HAL_RCC_ClockConfig>:
{
90004238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000423c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
9000423e:	4604      	mov	r4, r0
90004240:	b910      	cbnz	r0, 90004248 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
90004242:	2001      	movs	r0, #1
}
90004244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90004248:	4a45      	ldr	r2, [pc, #276]	; (90004360 <HAL_RCC_ClockConfig+0x128>)
9000424a:	6813      	ldr	r3, [r2, #0]
9000424c:	f003 030f 	and.w	r3, r3, #15
90004250:	428b      	cmp	r3, r1
90004252:	d328      	bcc.n	900042a6 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90004254:	6821      	ldr	r1, [r4, #0]
90004256:	078f      	lsls	r7, r1, #30
90004258:	d430      	bmi.n	900042bc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000425a:	07c8      	lsls	r0, r1, #31
9000425c:	d443      	bmi.n	900042e6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000425e:	4a40      	ldr	r2, [pc, #256]	; (90004360 <HAL_RCC_ClockConfig+0x128>)
90004260:	6813      	ldr	r3, [r2, #0]
90004262:	f003 030f 	and.w	r3, r3, #15
90004266:	42ab      	cmp	r3, r5
90004268:	d866      	bhi.n	90004338 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000426a:	6822      	ldr	r2, [r4, #0]
9000426c:	0751      	lsls	r1, r2, #29
9000426e:	d46f      	bmi.n	90004350 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004270:	0713      	lsls	r3, r2, #28
90004272:	d507      	bpl.n	90004284 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
90004274:	4a3b      	ldr	r2, [pc, #236]	; (90004364 <HAL_RCC_ClockConfig+0x12c>)
90004276:	6921      	ldr	r1, [r4, #16]
90004278:	6893      	ldr	r3, [r2, #8]
9000427a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
9000427e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
90004282:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
90004284:	f7ff ffaa 	bl	900041dc <HAL_RCC_GetSysClockFreq>
90004288:	4b36      	ldr	r3, [pc, #216]	; (90004364 <HAL_RCC_ClockConfig+0x12c>)
9000428a:	4a37      	ldr	r2, [pc, #220]	; (90004368 <HAL_RCC_ClockConfig+0x130>)
9000428c:	689b      	ldr	r3, [r3, #8]
9000428e:	f3c3 1303 	ubfx	r3, r3, #4, #4
90004292:	5cd3      	ldrb	r3, [r2, r3]
90004294:	40d8      	lsrs	r0, r3
90004296:	4b35      	ldr	r3, [pc, #212]	; (9000436c <HAL_RCC_ClockConfig+0x134>)
90004298:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
9000429a:	4b35      	ldr	r3, [pc, #212]	; (90004370 <HAL_RCC_ClockConfig+0x138>)
9000429c:	6818      	ldr	r0, [r3, #0]
9000429e:	f7fe f861 	bl	90002364 <HAL_InitTick>
  return HAL_OK;
900042a2:	2000      	movs	r0, #0
900042a4:	e7ce      	b.n	90004244 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
900042a6:	6813      	ldr	r3, [r2, #0]
900042a8:	f023 030f 	bic.w	r3, r3, #15
900042ac:	430b      	orrs	r3, r1
900042ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900042b0:	6813      	ldr	r3, [r2, #0]
900042b2:	f003 030f 	and.w	r3, r3, #15
900042b6:	428b      	cmp	r3, r1
900042b8:	d1c3      	bne.n	90004242 <HAL_RCC_ClockConfig+0xa>
900042ba:	e7cb      	b.n	90004254 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900042bc:	f011 0f04 	tst.w	r1, #4
900042c0:	4b28      	ldr	r3, [pc, #160]	; (90004364 <HAL_RCC_ClockConfig+0x12c>)
900042c2:	d003      	beq.n	900042cc <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
900042c4:	689a      	ldr	r2, [r3, #8]
900042c6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
900042ca:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900042cc:	070e      	lsls	r6, r1, #28
900042ce:	d503      	bpl.n	900042d8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
900042d0:	689a      	ldr	r2, [r3, #8]
900042d2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
900042d6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900042d8:	689a      	ldr	r2, [r3, #8]
900042da:	68a0      	ldr	r0, [r4, #8]
900042dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
900042e0:	4302      	orrs	r2, r0
900042e2:	609a      	str	r2, [r3, #8]
900042e4:	e7b9      	b.n	9000425a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
900042e6:	6861      	ldr	r1, [r4, #4]
900042e8:	4b1e      	ldr	r3, [pc, #120]	; (90004364 <HAL_RCC_ClockConfig+0x12c>)
900042ea:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
900042ec:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
900042ee:	d11b      	bne.n	90004328 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
900042f0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
900042f4:	d0a5      	beq.n	90004242 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
900042f6:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
900042f8:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900042fc:	4f19      	ldr	r7, [pc, #100]	; (90004364 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
900042fe:	f022 0203 	bic.w	r2, r2, #3
90004302:	430a      	orrs	r2, r1
90004304:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
90004306:	f7fe f86d 	bl	900023e4 <HAL_GetTick>
9000430a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000430c:	68bb      	ldr	r3, [r7, #8]
9000430e:	6862      	ldr	r2, [r4, #4]
90004310:	f003 030c 	and.w	r3, r3, #12
90004314:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
90004318:	d0a1      	beq.n	9000425e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000431a:	f7fe f863 	bl	900023e4 <HAL_GetTick>
9000431e:	1b80      	subs	r0, r0, r6
90004320:	4540      	cmp	r0, r8
90004322:	d9f3      	bls.n	9000430c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
90004324:	2003      	movs	r0, #3
90004326:	e78d      	b.n	90004244 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90004328:	2902      	cmp	r1, #2
9000432a:	d102      	bne.n	90004332 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
9000432c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
90004330:	e7e0      	b.n	900042f4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90004332:	f012 0f02 	tst.w	r2, #2
90004336:	e7dd      	b.n	900042f4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
90004338:	6813      	ldr	r3, [r2, #0]
9000433a:	f023 030f 	bic.w	r3, r3, #15
9000433e:	432b      	orrs	r3, r5
90004340:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90004342:	6813      	ldr	r3, [r2, #0]
90004344:	f003 030f 	and.w	r3, r3, #15
90004348:	42ab      	cmp	r3, r5
9000434a:	f47f af7a 	bne.w	90004242 <HAL_RCC_ClockConfig+0xa>
9000434e:	e78c      	b.n	9000426a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90004350:	4904      	ldr	r1, [pc, #16]	; (90004364 <HAL_RCC_ClockConfig+0x12c>)
90004352:	68e0      	ldr	r0, [r4, #12]
90004354:	688b      	ldr	r3, [r1, #8]
90004356:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
9000435a:	4303      	orrs	r3, r0
9000435c:	608b      	str	r3, [r1, #8]
9000435e:	e787      	b.n	90004270 <HAL_RCC_ClockConfig+0x38>
90004360:	40023c00 	.word	0x40023c00
90004364:	40023800 	.word	0x40023800
90004368:	9000fb28 	.word	0x9000fb28
9000436c:	200000b8 	.word	0x200000b8
90004370:	2000008c 	.word	0x2000008c

90004374 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90004374:	6803      	ldr	r3, [r0, #0]
{
90004376:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
9000437a:	f013 0601 	ands.w	r6, r3, #1
{
9000437e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90004380:	d00b      	beq.n	9000439a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90004382:	4aad      	ldr	r2, [pc, #692]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004384:	6891      	ldr	r1, [r2, #8]
90004386:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
9000438a:	6091      	str	r1, [r2, #8]
9000438c:	6b46      	ldr	r6, [r0, #52]	; 0x34
9000438e:	6891      	ldr	r1, [r2, #8]
90004390:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
90004392:	fab6 f686 	clz	r6, r6
90004396:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90004398:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
9000439a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
9000439e:	d012      	beq.n	900043c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900043a0:	49a5      	ldr	r1, [pc, #660]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900043a2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
900043a4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
900043a8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900043ac:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
900043b0:	bf08      	it	eq
900043b2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900043b4:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
900043b8:	bf16      	itet	ne
900043ba:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
900043be:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
900043c0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900043c2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
900043c6:	02d9      	lsls	r1, r3, #11
900043c8:	d510      	bpl.n	900043ec <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
900043ca:	489b      	ldr	r0, [pc, #620]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900043cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
900043ce:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
900043d2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
900043d6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
900043da:	ea42 0201 	orr.w	r2, r2, r1
900043de:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
900043e2:	f000 8186 	beq.w	900046f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
900043e6:	2900      	cmp	r1, #0
900043e8:	bf08      	it	eq
900043ea:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
900043ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
900043f0:	bf18      	it	ne
900043f2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
900043f4:	069a      	lsls	r2, r3, #26
900043f6:	d532      	bpl.n	9000445e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
900043f8:	4b8f      	ldr	r3, [pc, #572]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
900043fa:	4f90      	ldr	r7, [pc, #576]	; (9000463c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
900043fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900043fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90004402:	641a      	str	r2, [r3, #64]	; 0x40
90004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000440a:	9301      	str	r3, [sp, #4]
9000440c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
9000440e:	683b      	ldr	r3, [r7, #0]
90004410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90004414:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004416:	f7fd ffe5 	bl	900023e4 <HAL_GetTick>
9000441a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
9000441c:	683b      	ldr	r3, [r7, #0]
9000441e:	05db      	lsls	r3, r3, #23
90004420:	f140 8169 	bpl.w	900046f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90004424:	4f84      	ldr	r7, [pc, #528]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90004426:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90004428:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
9000442a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
9000442e:	f040 816d 	bne.w	9000470c <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90004432:	6b23      	ldr	r3, [r4, #48]	; 0x30
90004434:	f403 7240 	and.w	r2, r3, #768	; 0x300
90004438:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000443c:	4a7e      	ldr	r2, [pc, #504]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
9000443e:	f040 818a 	bne.w	90004756 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
90004442:	6891      	ldr	r1, [r2, #8]
90004444:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
90004448:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
9000444c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
90004450:	4301      	orrs	r1, r0
90004452:	6091      	str	r1, [r2, #8]
90004454:	f3c3 030b 	ubfx	r3, r3, #0, #12
90004458:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000445a:	430b      	orrs	r3, r1
9000445c:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
9000445e:	6823      	ldr	r3, [r4, #0]
90004460:	06da      	lsls	r2, r3, #27
90004462:	d50c      	bpl.n	9000447e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90004464:	4a74      	ldr	r2, [pc, #464]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004466:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
9000446a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000446e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
90004472:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
90004476:	6ba0      	ldr	r0, [r4, #56]	; 0x38
90004478:	4301      	orrs	r1, r0
9000447a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
9000447e:	045f      	lsls	r7, r3, #17
90004480:	d508      	bpl.n	90004494 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
90004482:	496d      	ldr	r1, [pc, #436]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004484:	6e60      	ldr	r0, [r4, #100]	; 0x64
90004486:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000448a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
9000448e:	4302      	orrs	r2, r0
90004490:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
90004494:	0418      	lsls	r0, r3, #16
90004496:	d508      	bpl.n	900044aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
90004498:	4967      	ldr	r1, [pc, #412]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
9000449a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
9000449c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900044a0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
900044a4:	4302      	orrs	r2, r0
900044a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
900044aa:	03d9      	lsls	r1, r3, #15
900044ac:	d508      	bpl.n	900044c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
900044ae:	4962      	ldr	r1, [pc, #392]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900044b0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
900044b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900044b6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
900044ba:	4302      	orrs	r2, r0
900044bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
900044c0:	039a      	lsls	r2, r3, #14
900044c2:	d508      	bpl.n	900044d6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
900044c4:	495c      	ldr	r1, [pc, #368]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900044c6:	6f20      	ldr	r0, [r4, #112]	; 0x70
900044c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900044cc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
900044d0:	4302      	orrs	r2, r0
900044d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
900044d6:	065f      	lsls	r7, r3, #25
900044d8:	d508      	bpl.n	900044ec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
900044da:	4957      	ldr	r1, [pc, #348]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900044dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
900044de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900044e2:	f022 0203 	bic.w	r2, r2, #3
900044e6:	4302      	orrs	r2, r0
900044e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
900044ec:	0618      	lsls	r0, r3, #24
900044ee:	d508      	bpl.n	90004502 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
900044f0:	4951      	ldr	r1, [pc, #324]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900044f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
900044f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900044f8:	f022 020c 	bic.w	r2, r2, #12
900044fc:	4302      	orrs	r2, r0
900044fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
90004502:	05d9      	lsls	r1, r3, #23
90004504:	d508      	bpl.n	90004518 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
90004506:	494c      	ldr	r1, [pc, #304]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004508:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000450a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000450e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
90004512:	4302      	orrs	r2, r0
90004514:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
90004518:	059a      	lsls	r2, r3, #22
9000451a:	d508      	bpl.n	9000452e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
9000451c:	4946      	ldr	r1, [pc, #280]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
9000451e:	6d20      	ldr	r0, [r4, #80]	; 0x50
90004520:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004524:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
90004528:	4302      	orrs	r2, r0
9000452a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
9000452e:	055f      	lsls	r7, r3, #21
90004530:	d508      	bpl.n	90004544 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
90004532:	4941      	ldr	r1, [pc, #260]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004534:	6d60      	ldr	r0, [r4, #84]	; 0x54
90004536:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000453a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
9000453e:	4302      	orrs	r2, r0
90004540:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
90004544:	0518      	lsls	r0, r3, #20
90004546:	d508      	bpl.n	9000455a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
90004548:	493b      	ldr	r1, [pc, #236]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
9000454a:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000454c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004550:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
90004554:	4302      	orrs	r2, r0
90004556:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
9000455a:	04d9      	lsls	r1, r3, #19
9000455c:	d508      	bpl.n	90004570 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
9000455e:	4936      	ldr	r1, [pc, #216]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004560:	6de0      	ldr	r0, [r4, #92]	; 0x5c
90004562:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004566:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
9000456a:	4302      	orrs	r2, r0
9000456c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
90004570:	049a      	lsls	r2, r3, #18
90004572:	d508      	bpl.n	90004586 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
90004574:	4930      	ldr	r1, [pc, #192]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004576:	6e20      	ldr	r0, [r4, #96]	; 0x60
90004578:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000457c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
90004580:	4302      	orrs	r2, r0
90004582:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90004586:	025f      	lsls	r7, r3, #9
90004588:	d508      	bpl.n	9000459c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000458a:	492b      	ldr	r1, [pc, #172]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
9000458c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000458e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004592:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
90004596:	4302      	orrs	r2, r0
90004598:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
9000459c:	0298      	lsls	r0, r3, #10
9000459e:	d50c      	bpl.n	900045ba <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900045a0:	4825      	ldr	r0, [pc, #148]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900045a2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
900045a4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
900045a8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900045ac:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
900045b0:	bf08      	it	eq
900045b2:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900045b4:	430a      	orrs	r2, r1
900045b6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
900045ba:	f013 0f08 	tst.w	r3, #8
900045be:	bf18      	it	ne
900045c0:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
900045c2:	0359      	lsls	r1, r3, #13
900045c4:	d508      	bpl.n	900045d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
900045c6:	491c      	ldr	r1, [pc, #112]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900045c8:	6f60      	ldr	r0, [r4, #116]	; 0x74
900045ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900045ce:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
900045d2:	4302      	orrs	r2, r0
900045d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
900045d8:	021a      	lsls	r2, r3, #8
900045da:	d509      	bpl.n	900045f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
900045dc:	4916      	ldr	r1, [pc, #88]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
900045de:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
900045e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900045e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
900045ea:	4302      	orrs	r2, r0
900045ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
900045f0:	2e01      	cmp	r6, #1
900045f2:	f000 80b4 	beq.w	9000475e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
900045f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
900045fa:	f000 80b0 	beq.w	9000475e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
900045fe:	2d01      	cmp	r5, #1
90004600:	d175      	bne.n	900046ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
90004602:	4d0d      	ldr	r5, [pc, #52]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004604:	682b      	ldr	r3, [r5, #0]
90004606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000460a:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000460c:	f7fd feea 	bl	900023e4 <HAL_GetTick>
90004610:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90004612:	682b      	ldr	r3, [r5, #0]
90004614:	009f      	lsls	r7, r3, #2
90004616:	f100 8126 	bmi.w	90004866 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
9000461a:	6821      	ldr	r1, [r4, #0]
9000461c:	030e      	lsls	r6, r1, #12
9000461e:	d501      	bpl.n	90004624 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90004620:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90004622:	b11b      	cbz	r3, 9000462c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
90004624:	02cd      	lsls	r5, r1, #11
90004626:	d522      	bpl.n	9000466e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
90004628:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000462a:	bb03      	cbnz	r3, 9000466e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
9000462c:	4a02      	ldr	r2, [pc, #8]	; (90004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
9000462e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90004632:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
90004636:	e003      	b.n	90004640 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
90004638:	40023800 	.word	0x40023800
9000463c:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
90004640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004644:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004648:	4303      	orrs	r3, r0
9000464a:	6960      	ldr	r0, [r4, #20]
9000464c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004650:	69a0      	ldr	r0, [r4, #24]
90004652:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
90004656:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
9000465a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
9000465e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90004660:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
90004664:	3801      	subs	r0, #1
90004666:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000466a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
9000466e:	0288      	lsls	r0, r1, #10
90004670:	d515      	bpl.n	9000469e <HAL_RCCEx_PeriphCLKConfig+0x32a>
90004672:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
90004674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90004678:	d111      	bne.n	9000469e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
9000467a:	4a82      	ldr	r2, [pc, #520]	; (90004884 <HAL_RCCEx_PeriphCLKConfig+0x510>)
9000467c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90004680:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
90004684:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90004688:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
9000468c:	4303      	orrs	r3, r0
9000468e:	6960      	ldr	r0, [r4, #20]
90004690:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004694:	6a20      	ldr	r0, [r4, #32]
90004696:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
9000469a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
9000469e:	070a      	lsls	r2, r1, #28
900046a0:	d519      	bpl.n	900046d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
900046a2:	4a78      	ldr	r2, [pc, #480]	; (90004884 <HAL_RCCEx_PeriphCLKConfig+0x510>)
900046a4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
900046a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
900046ac:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
900046b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
900046b4:	430b      	orrs	r3, r1
900046b6:	6961      	ldr	r1, [r4, #20]
900046b8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
900046bc:	69e1      	ldr	r1, [r4, #28]
900046be:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
900046c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
900046c6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
900046ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
900046cc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
900046d0:	430b      	orrs	r3, r1
900046d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
900046d6:	4c6b      	ldr	r4, [pc, #428]	; (90004884 <HAL_RCCEx_PeriphCLKConfig+0x510>)
900046d8:	6823      	ldr	r3, [r4, #0]
900046da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
900046de:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900046e0:	f7fd fe80 	bl	900023e4 <HAL_GetTick>
900046e4:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
900046e6:	6823      	ldr	r3, [r4, #0]
900046e8:	009b      	lsls	r3, r3, #2
900046ea:	f140 80c3 	bpl.w	90004874 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
900046ee:	2000      	movs	r0, #0
900046f0:	e009      	b.n	90004706 <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
900046f2:	2601      	movs	r6, #1
900046f4:	e67a      	b.n	900043ec <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900046f6:	f7fd fe75 	bl	900023e4 <HAL_GetTick>
900046fa:	eba0 0008 	sub.w	r0, r0, r8
900046fe:	2864      	cmp	r0, #100	; 0x64
90004700:	f67f ae8c 	bls.w	9000441c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
90004704:	2003      	movs	r0, #3
}
90004706:	b003      	add	sp, #12
90004708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
9000470c:	f402 7240 	and.w	r2, r2, #768	; 0x300
90004710:	429a      	cmp	r2, r3
90004712:	f43f ae8e 	beq.w	90004432 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90004716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
90004718:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000471a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
9000471e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90004722:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
90004724:	6f3a      	ldr	r2, [r7, #112]	; 0x70
90004726:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000472a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
9000472c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
9000472e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90004730:	07d8      	lsls	r0, r3, #31
90004732:	f57f ae7e 	bpl.w	90004432 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
90004736:	f7fd fe55 	bl	900023e4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
9000473a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
9000473e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90004740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90004742:	0799      	lsls	r1, r3, #30
90004744:	f53f ae75 	bmi.w	90004432 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90004748:	f7fd fe4c 	bl	900023e4 <HAL_GetTick>
9000474c:	eba0 0008 	sub.w	r0, r0, r8
90004750:	4548      	cmp	r0, r9
90004752:	d9f5      	bls.n	90004740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
90004754:	e7d6      	b.n	90004704 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90004756:	6891      	ldr	r1, [r2, #8]
90004758:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
9000475c:	e679      	b.n	90004452 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
9000475e:	4e49      	ldr	r6, [pc, #292]	; (90004884 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004760:	6833      	ldr	r3, [r6, #0]
90004762:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90004766:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90004768:	f7fd fe3c 	bl	900023e4 <HAL_GetTick>
9000476c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
9000476e:	6833      	ldr	r3, [r6, #0]
90004770:	011b      	lsls	r3, r3, #4
90004772:	d472      	bmi.n	9000485a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
90004774:	6822      	ldr	r2, [r4, #0]
90004776:	07d7      	lsls	r7, r2, #31
90004778:	d512      	bpl.n	900047a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
9000477a:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000477c:	b983      	cbnz	r3, 900047a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
9000477e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90004782:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
90004786:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
9000478a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
9000478e:	430b      	orrs	r3, r1
90004790:	6861      	ldr	r1, [r4, #4]
90004792:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90004796:	68a1      	ldr	r1, [r4, #8]
90004798:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
9000479c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
900047a0:	0316      	lsls	r6, r2, #12
900047a2:	d503      	bpl.n	900047ac <HAL_RCCEx_PeriphCLKConfig+0x438>
900047a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900047a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900047aa:	d005      	beq.n	900047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
900047ac:	02d0      	lsls	r0, r2, #11
900047ae:	d51e      	bpl.n	900047ee <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
900047b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
900047b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
900047b6:	d11a      	bne.n	900047ee <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
900047b8:	4932      	ldr	r1, [pc, #200]	; (90004884 <HAL_RCCEx_PeriphCLKConfig+0x510>)
900047ba:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
900047be:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
900047c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
900047c6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
900047ca:	4303      	orrs	r3, r0
900047cc:	6860      	ldr	r0, [r4, #4]
900047ce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
900047d2:	68e0      	ldr	r0, [r4, #12]
900047d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
900047d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
900047dc:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
900047e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
900047e2:	f020 001f 	bic.w	r0, r0, #31
900047e6:	3b01      	subs	r3, #1
900047e8:	4303      	orrs	r3, r0
900047ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
900047ee:	01d1      	lsls	r1, r2, #7
900047f0:	d511      	bpl.n	90004816 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
900047f2:	4924      	ldr	r1, [pc, #144]	; (90004884 <HAL_RCCEx_PeriphCLKConfig+0x510>)
900047f4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
900047f8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
900047fc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90004800:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004804:	4303      	orrs	r3, r0
90004806:	6860      	ldr	r0, [r4, #4]
90004808:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
9000480c:	6920      	ldr	r0, [r4, #16]
9000480e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90004812:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
90004816:	0192      	lsls	r2, r2, #6
90004818:	d50d      	bpl.n	90004836 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
9000481a:	6923      	ldr	r3, [r4, #16]
9000481c:	6862      	ldr	r2, [r4, #4]
9000481e:	041b      	lsls	r3, r3, #16
90004820:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90004824:	68e2      	ldr	r2, [r4, #12]
90004826:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000482a:	68a2      	ldr	r2, [r4, #8]
9000482c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
90004830:	4a14      	ldr	r2, [pc, #80]	; (90004884 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004832:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
90004836:	4e13      	ldr	r6, [pc, #76]	; (90004884 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004838:	6833      	ldr	r3, [r6, #0]
9000483a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000483e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90004840:	f7fd fdd0 	bl	900023e4 <HAL_GetTick>
90004844:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
90004846:	6833      	ldr	r3, [r6, #0]
90004848:	011b      	lsls	r3, r3, #4
9000484a:	f53f aed8 	bmi.w	900045fe <HAL_RCCEx_PeriphCLKConfig+0x28a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
9000484e:	f7fd fdc9 	bl	900023e4 <HAL_GetTick>
90004852:	1bc0      	subs	r0, r0, r7
90004854:	2864      	cmp	r0, #100	; 0x64
90004856:	d9f6      	bls.n	90004846 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90004858:	e754      	b.n	90004704 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
9000485a:	f7fd fdc3 	bl	900023e4 <HAL_GetTick>
9000485e:	1bc0      	subs	r0, r0, r7
90004860:	2864      	cmp	r0, #100	; 0x64
90004862:	d984      	bls.n	9000476e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
90004864:	e74e      	b.n	90004704 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90004866:	f7fd fdbd 	bl	900023e4 <HAL_GetTick>
9000486a:	1b80      	subs	r0, r0, r6
9000486c:	2864      	cmp	r0, #100	; 0x64
9000486e:	f67f aed0 	bls.w	90004612 <HAL_RCCEx_PeriphCLKConfig+0x29e>
90004872:	e747      	b.n	90004704 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90004874:	f7fd fdb6 	bl	900023e4 <HAL_GetTick>
90004878:	1b40      	subs	r0, r0, r5
9000487a:	2864      	cmp	r0, #100	; 0x64
9000487c:	f67f af33 	bls.w	900046e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
90004880:	e740      	b.n	90004704 <HAL_RCCEx_PeriphCLKConfig+0x390>
90004882:	bf00      	nop
90004884:	40023800 	.word	0x40023800

90004888 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
90004888:	4b53      	ldr	r3, [pc, #332]	; (900049d8 <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
9000488a:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
9000488c:	4b53      	ldr	r3, [pc, #332]	; (900049dc <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
9000488e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90004892:	f3c2 1288 	ubfx	r2, r2, #6, #9
90004896:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004898:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
9000489c:	f3c2 4201 	ubfx	r2, r2, #16, #2
900048a0:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
900048a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
900048a6:	f3c2 6203 	ubfx	r2, r2, #24, #4
900048aa:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
900048ac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
900048b0:	f3c2 7202 	ubfx	r2, r2, #28, #3
900048b4:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
900048b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
900048ba:	f3c2 1288 	ubfx	r2, r2, #6, #9
900048be:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
900048c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
900048c4:	f3c2 4201 	ubfx	r2, r2, #16, #2
900048c8:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
900048ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
900048ce:	f3c2 6203 	ubfx	r2, r2, #24, #4
900048d2:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
900048d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
900048d8:	f3c2 7202 	ubfx	r2, r2, #28, #3
900048dc:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
900048de:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
900048e2:	f002 021f 	and.w	r2, r2, #31
900048e6:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
900048e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
900048ec:	f3c2 2204 	ubfx	r2, r2, #8, #5
900048f0:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
900048f2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
900048f6:	f3c2 4201 	ubfx	r2, r2, #16, #2
900048fa:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
900048fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90004900:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
90004904:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
90004906:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
9000490a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
9000490e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
90004910:	689a      	ldr	r2, [r3, #8]
90004912:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
90004916:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
90004918:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000491c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
90004920:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
90004922:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004926:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
9000492a:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
9000492c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004930:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
90004934:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
90004936:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000493a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
9000493e:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
90004940:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004944:	f002 0203 	and.w	r2, r2, #3
90004948:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
9000494a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000494e:	f002 020c 	and.w	r2, r2, #12
90004952:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
90004954:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004958:	f002 0230 	and.w	r2, r2, #48	; 0x30
9000495c:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
9000495e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004962:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
90004966:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
90004968:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000496c:	f402 7240 	and.w	r2, r2, #768	; 0x300
90004970:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
90004972:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004976:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
9000497a:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
9000497c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004980:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
90004984:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
90004986:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000498a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
9000498e:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
90004990:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90004994:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
90004998:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
9000499a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000499e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
900049a2:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
900049a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900049a8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
900049ac:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
900049ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900049b2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
900049b6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
900049ba:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
900049bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
900049be:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
900049c2:	f402 7240 	and.w	r2, r2, #768	; 0x300
900049c6:	430a      	orrs	r2, r1
900049c8:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
900049ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900049ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
900049d2:	6383      	str	r3, [r0, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
900049d4:	4770      	bx	lr
900049d6:	bf00      	nop
900049d8:	00fffff1 	.word	0x00fffff1
900049dc:	40023800 	.word	0x40023800

900049e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
900049e0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
900049e4:	d140      	bne.n	90004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  {
    saiclocksource = RCC->DCKCFGR1;
900049e6:	4b2e      	ldr	r3, [pc, #184]	; (90004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
900049e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
900049ec:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
900049f0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
900049f4:	d046      	beq.n	90004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
900049f6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
900049fa:	d04c      	beq.n	90004a96 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
900049fc:	2a00      	cmp	r2, #0
900049fe:	d14c      	bne.n	90004a9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
90004a00:	685a      	ldr	r2, [r3, #4]
90004a02:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
90004a06:	685a      	ldr	r2, [r3, #4]
90004a08:	bf08      	it	eq
90004a0a:	4b26      	ldreq	r3, [pc, #152]	; (90004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
90004a0c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
90004a10:	bf18      	it	ne
90004a12:	4b25      	ldrne	r3, [pc, #148]	; (90004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
90004a14:	fbb3 f3f2 	udiv	r3, r3, r2
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
90004a18:	4a21      	ldr	r2, [pc, #132]	; (90004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
90004a1a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
90004a1e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
90004a22:	f3c0 1088 	ubfx	r0, r0, #6, #9
90004a26:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
90004a28:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
90004a2c:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
90004a30:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90004a34:	f3c3 2304 	ubfx	r3, r3, #8, #5
90004a38:	e012      	b.n	90004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
90004a3a:	4b1b      	ldr	r3, [pc, #108]	; (90004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
90004a3c:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
90004a40:	4a17      	ldr	r2, [pc, #92]	; (90004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
90004a42:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
90004a46:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
90004a4a:	f3c0 1088 	ubfx	r0, r0, #6, #9
90004a4e:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
90004a50:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
90004a54:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
90004a58:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90004a5c:	f003 031f 	and.w	r3, r3, #31
90004a60:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
90004a62:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
90004a66:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
90004a68:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
90004a6c:	d115      	bne.n	90004a9a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    saiclocksource = RCC->DCKCFGR1;
90004a6e:	4b0c      	ldr	r3, [pc, #48]	; (90004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
90004a70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
90004a74:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
90004a78:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
90004a7c:	d002      	beq.n	90004a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
90004a7e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
90004a82:	e7ba      	b.n	900049fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
90004a84:	685a      	ldr	r2, [r3, #4]
90004a86:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
90004a8a:	685a      	ldr	r2, [r3, #4]
90004a8c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
90004a90:	d1d3      	bne.n	90004a3a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
90004a92:	4b04      	ldr	r3, [pc, #16]	; (90004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
90004a94:	e7d2      	b.n	90004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = frequency/(tmpreg);
        break;
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
90004a96:	4805      	ldr	r0, [pc, #20]	; (90004aac <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
90004a98:	4770      	bx	lr
    switch (saiclocksource)
90004a9a:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
90004a9c:	4770      	bx	lr
90004a9e:	bf00      	nop
90004aa0:	40023800 	.word	0x40023800
90004aa4:	00f42400 	.word	0x00f42400
90004aa8:	017d7840 	.word	0x017d7840
90004aac:	00bb8000 	.word	0x00bb8000

90004ab0 <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
  {
    tmpIT|= SAI_IT_FREQ;
90004ab0:	2901      	cmp	r1, #1
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
90004ab2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
90004ab4:	6842      	ldr	r2, [r0, #4]
    tmpIT|= SAI_IT_FREQ;
90004ab6:	bf14      	ite	ne
90004ab8:	2301      	movne	r3, #1
90004aba:	2309      	moveq	r3, #9
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
90004abc:	2908      	cmp	r1, #8
90004abe:	d105      	bne.n	90004acc <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
90004ac0:	f022 0102 	bic.w	r1, r2, #2
90004ac4:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
90004ac6:	bf08      	it	eq
90004ac8:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
90004acc:	3a02      	subs	r2, #2
90004ace:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
90004ad0:	bf94      	ite	ls
90004ad2:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
90004ad6:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
90004ada:	4770      	bx	lr

90004adc <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
90004adc:	4b0c      	ldr	r3, [pc, #48]	; (90004b10 <SAI_Disable.isra.0+0x34>)
90004ade:	f641 3258 	movw	r2, #7000	; 0x1b58
90004ae2:	681b      	ldr	r3, [r3, #0]
90004ae4:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
90004ae8:	6802      	ldr	r2, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
90004aea:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
90004aec:	6811      	ldr	r1, [r2, #0]
90004aee:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
90004af2:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
90004af4:	3b01      	subs	r3, #1
90004af6:	d206      	bcs.n	90004b06 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
90004af8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
90004afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90004b00:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
90004b04:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
90004b06:	6811      	ldr	r1, [r2, #0]
90004b08:	03c9      	lsls	r1, r1, #15
90004b0a:	d4f3      	bmi.n	90004af4 <SAI_Disable.isra.0+0x18>

  return status;
}
90004b0c:	4770      	bx	lr
90004b0e:	bf00      	nop
90004b10:	200000b8 	.word	0x200000b8

90004b14 <HAL_SAI_MspInit>:
}
90004b14:	4770      	bx	lr
	...

90004b18 <HAL_SAI_Init>:
{
90004b18:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
90004b1a:	4604      	mov	r4, r0
90004b1c:	2800      	cmp	r0, #0
90004b1e:	f000 80c3 	beq.w	90004ca8 <HAL_SAI_Init+0x190>
  if(hsai->State == HAL_SAI_STATE_RESET)
90004b22:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
90004b26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90004b2a:	b91b      	cbnz	r3, 90004b34 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
90004b2c:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
90004b30:	f7ff fff0 	bl	90004b14 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
90004b34:	2302      	movs	r3, #2
  SAI_Disable(hsai);
90004b36:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
90004b38:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
90004b3c:	f7ff ffce 	bl	90004adc <SAI_Disable.isra.0>
  switch(hsai->Init.SynchroExt)
90004b40:	68e3      	ldr	r3, [r4, #12]
90004b42:	2b01      	cmp	r3, #1
90004b44:	f000 80a0 	beq.w	90004c88 <HAL_SAI_Init+0x170>
90004b48:	1e98      	subs	r0, r3, #2
90004b4a:	4243      	negs	r3, r0
90004b4c:	4143      	adcs	r3, r0
90004b4e:	015b      	lsls	r3, r3, #5
  switch(hsai->Init.Synchro)
90004b50:	68a5      	ldr	r5, [r4, #8]
90004b52:	2d02      	cmp	r5, #2
90004b54:	f000 809c 	beq.w	90004c90 <HAL_SAI_Init+0x178>
90004b58:	2d03      	cmp	r5, #3
90004b5a:	f000 8097 	beq.w	90004c8c <HAL_SAI_Init+0x174>
90004b5e:	1e69      	subs	r1, r5, #1
90004b60:	424d      	negs	r5, r1
90004b62:	414d      	adcs	r5, r1
90004b64:	02ad      	lsls	r5, r5, #10
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
90004b66:	6822      	ldr	r2, [r4, #0]
90004b68:	4950      	ldr	r1, [pc, #320]	; (90004cac <HAL_SAI_Init+0x194>)
90004b6a:	4851      	ldr	r0, [pc, #324]	; (90004cb0 <HAL_SAI_Init+0x198>)
90004b6c:	428a      	cmp	r2, r1
90004b6e:	d003      	beq.n	90004b78 <HAL_SAI_Init+0x60>
90004b70:	4e50      	ldr	r6, [pc, #320]	; (90004cb4 <HAL_SAI_Init+0x19c>)
90004b72:	42b2      	cmp	r2, r6
90004b74:	f040 808f 	bne.w	90004c96 <HAL_SAI_Init+0x17e>
    SAI1->GCR = tmpregisterGCR;
90004b78:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
90004b7c:	69e3      	ldr	r3, [r4, #28]
90004b7e:	b313      	cbz	r3, 90004bc6 <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
90004b80:	428a      	cmp	r2, r1
90004b82:	d003      	beq.n	90004b8c <HAL_SAI_Init+0x74>
90004b84:	4b4b      	ldr	r3, [pc, #300]	; (90004cb4 <HAL_SAI_Init+0x19c>)
90004b86:	429a      	cmp	r2, r3
90004b88:	f040 8088 	bne.w	90004c9c <HAL_SAI_Init+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
90004b8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
90004b90:	f7ff ff26 	bl	900049e0 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
90004b94:	6823      	ldr	r3, [r4, #0]
90004b96:	4a48      	ldr	r2, [pc, #288]	; (90004cb8 <HAL_SAI_Init+0x1a0>)
90004b98:	4293      	cmp	r3, r2
90004b9a:	d002      	beq.n	90004ba2 <HAL_SAI_Init+0x8a>
90004b9c:	3220      	adds	r2, #32
90004b9e:	4293      	cmp	r3, r2
90004ba0:	d103      	bne.n	90004baa <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
90004ba2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
90004ba6:	f7ff ff1b 	bl	900049e0 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
90004baa:	220a      	movs	r2, #10
90004bac:	69e3      	ldr	r3, [r4, #28]
90004bae:	4350      	muls	r0, r2
90004bb0:	025b      	lsls	r3, r3, #9
90004bb2:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
90004bb6:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
90004bba:	fb02 0013 	mls	r0, r2, r3, r0
90004bbe:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
90004bc0:	bf08      	it	eq
90004bc2:	3301      	addeq	r3, #1
90004bc4:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
90004bc6:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
90004bc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
90004bca:	f033 0202 	bics.w	r2, r3, #2
90004bce:	d167      	bne.n	90004ca0 <HAL_SAI_Init+0x188>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
90004bd0:	3901      	subs	r1, #1
90004bd2:	bf18      	it	ne
90004bd4:	2101      	movne	r1, #1
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
90004bd6:	6822      	ldr	r2, [r4, #0]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
90004bd8:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
90004bda:	4838      	ldr	r0, [pc, #224]	; (90004cbc <HAL_SAI_Init+0x1a4>)
90004bdc:	6816      	ldr	r6, [r2, #0]
90004bde:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
90004be0:	6b26      	ldr	r6, [r4, #48]	; 0x30
90004be2:	4333      	orrs	r3, r6
90004be4:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
90004be6:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
90004be8:	4333      	orrs	r3, r6
90004bea:	6ba6      	ldr	r6, [r4, #56]	; 0x38
90004bec:	6810      	ldr	r0, [r2, #0]
90004bee:	4333      	orrs	r3, r6
90004bf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
90004bf2:	4333      	orrs	r3, r6
90004bf4:	6926      	ldr	r6, [r4, #16]
90004bf6:	4333      	orrs	r3, r6
90004bf8:	6966      	ldr	r6, [r4, #20]
90004bfa:	4333      	orrs	r3, r6
90004bfc:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
90004bfe:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
90004c00:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
90004c04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
90004c06:	432b      	orrs	r3, r5
90004c08:	430b      	orrs	r3, r1
90004c0a:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
90004c0c:	6853      	ldr	r3, [r2, #4]
90004c0e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
90004c12:	f023 030f 	bic.w	r3, r3, #15
90004c16:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
90004c18:	69a3      	ldr	r3, [r4, #24]
90004c1a:	6851      	ldr	r1, [r2, #4]
90004c1c:	4303      	orrs	r3, r0
90004c1e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90004c20:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
90004c22:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
90004c24:	430b      	orrs	r3, r1
90004c26:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
90004c28:	4b25      	ldr	r3, [pc, #148]	; (90004cc0 <HAL_SAI_Init+0x1a8>)
90004c2a:	6891      	ldr	r1, [r2, #8]
90004c2c:	400b      	ands	r3, r1
90004c2e:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
90004c30:	6d23      	ldr	r3, [r4, #80]	; 0x50
90004c32:	6891      	ldr	r1, [r2, #8]
90004c34:	4303      	orrs	r3, r0
90004c36:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90004c38:	4303      	orrs	r3, r0
90004c3a:	430b      	orrs	r3, r1
90004c3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
90004c3e:	3901      	subs	r1, #1
90004c40:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
90004c42:	6c61      	ldr	r1, [r4, #68]	; 0x44
90004c44:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
90004c46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90004c4a:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
90004c4c:	68d3      	ldr	r3, [r2, #12]
90004c4e:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
90004c52:	f023 030f 	bic.w	r3, r3, #15
90004c56:	041b      	lsls	r3, r3, #16
90004c58:	0c1b      	lsrs	r3, r3, #16
90004c5a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
90004c5c:	68d1      	ldr	r1, [r2, #12]
90004c5e:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
90004c62:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90004c64:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
90004c66:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
90004c68:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
90004c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
90004c6e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90004c70:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
90004c72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90004c76:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
90004c78:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90004c7a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
90004c7e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
90004c82:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
90004c86:	bd70      	pop	{r4, r5, r6, pc}
  switch(hsai->Init.SynchroExt)
90004c88:	2310      	movs	r3, #16
90004c8a:	e761      	b.n	90004b50 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
90004c8c:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
90004c90:	f44f 6500 	mov.w	r5, #2048	; 0x800
90004c94:	e767      	b.n	90004b66 <HAL_SAI_Init+0x4e>
    SAI2->GCR = tmpregisterGCR;
90004c96:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
90004c9a:	e76f      	b.n	90004b7c <HAL_SAI_Init+0x64>
    uint32_t freq = 0;
90004c9c:	2000      	movs	r0, #0
90004c9e:	e779      	b.n	90004b94 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
90004ca0:	1e4a      	subs	r2, r1, #1
90004ca2:	4251      	negs	r1, r2
90004ca4:	4151      	adcs	r1, r2
90004ca6:	e796      	b.n	90004bd6 <HAL_SAI_Init+0xbe>
    return HAL_ERROR;
90004ca8:	2001      	movs	r0, #1
90004caa:	e7ec      	b.n	90004c86 <HAL_SAI_Init+0x16e>
90004cac:	40015804 	.word	0x40015804
90004cb0:	40015000 	.word	0x40015000
90004cb4:	40015824 	.word	0x40015824
90004cb8:	40015c04 	.word	0x40015c04
90004cbc:	ff05c010 	.word	0xff05c010
90004cc0:	fff88000 	.word	0xfff88000

90004cc4 <HAL_SAI_MspDeInit>:
90004cc4:	4770      	bx	lr

90004cc6 <HAL_SAI_DeInit>:
{
90004cc6:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
90004cc8:	4605      	mov	r5, r0
90004cca:	b1c0      	cbz	r0, 90004cfe <HAL_SAI_DeInit+0x38>
  hsai->State = HAL_SAI_STATE_BUSY;
90004ccc:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
90004cce:	6806      	ldr	r6, [r0, #0]
90004cd0:	2400      	movs	r4, #0
  hsai->State = HAL_SAI_STATE_BUSY;
90004cd2:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
90004cd6:	f04f 33ff 	mov.w	r3, #4294967295
  hsai->Instance->IMR = 0;
90004cda:	6134      	str	r4, [r6, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
90004cdc:	61b3      	str	r3, [r6, #24]
  SAI_Disable(hsai);
90004cde:	f7ff fefd 	bl	90004adc <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
90004ce2:	6873      	ldr	r3, [r6, #4]
90004ce4:	f043 0308 	orr.w	r3, r3, #8
90004ce8:	6073      	str	r3, [r6, #4]
  HAL_SAI_MspDeInit(hsai);
90004cea:	f7ff ffeb 	bl	90004cc4 <HAL_SAI_MspDeInit>
  return HAL_OK;
90004cee:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90004cf0:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  __HAL_UNLOCK(hsai);
90004cf4:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
90004cf8:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d
}
90004cfc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90004cfe:	2001      	movs	r0, #1
90004d00:	e7fc      	b.n	90004cfc <HAL_SAI_DeInit+0x36>
	...

90004d04 <HAL_SAI_Receive_DMA>:
{
90004d04:	4613      	mov	r3, r2
  if((pData == NULL) || (Size == 0))
90004d06:	460a      	mov	r2, r1
{
90004d08:	b570      	push	{r4, r5, r6, lr}
90004d0a:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
90004d0c:	2900      	cmp	r1, #0
90004d0e:	d03f      	beq.n	90004d90 <HAL_SAI_Receive_DMA+0x8c>
90004d10:	2b00      	cmp	r3, #0
90004d12:	d03d      	beq.n	90004d90 <HAL_SAI_Receive_DMA+0x8c>
  if(hsai->State == HAL_SAI_STATE_READY)
90004d14:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
90004d18:	2901      	cmp	r1, #1
90004d1a:	b2cd      	uxtb	r5, r1
90004d1c:	d13a      	bne.n	90004d94 <HAL_SAI_Receive_DMA+0x90>
    __HAL_LOCK(hsai);
90004d1e:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
90004d22:	2901      	cmp	r1, #1
90004d24:	d036      	beq.n	90004d94 <HAL_SAI_Receive_DMA+0x90>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90004d26:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
90004d28:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
90004d2a:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90004d2e:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    hsai->pBuffPtr = pData;
90004d32:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_RX;
90004d34:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    hsai->XferSize = Size;
90004d38:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
90004d3c:	4916      	ldr	r1, [pc, #88]	; (90004d98 <HAL_SAI_Receive_DMA+0x94>)
    hsai->XferCount = Size;
90004d3e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
90004d42:	6f00      	ldr	r0, [r0, #112]	; 0x70
90004d44:	6401      	str	r1, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
90004d46:	4915      	ldr	r1, [pc, #84]	; (90004d9c <HAL_SAI_Receive_DMA+0x98>)
90004d48:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
90004d4a:	4915      	ldr	r1, [pc, #84]	; (90004da0 <HAL_SAI_Receive_DMA+0x9c>)
    hsai->hdmarx->XferAbortCallback = NULL;
90004d4c:	e9c0 1613 	strd	r1, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
90004d50:	6821      	ldr	r1, [r4, #0]
90004d52:	311c      	adds	r1, #28
90004d54:	f7fd fc82 	bl	9000265c <HAL_DMA_Start_IT>
90004d58:	b118      	cbz	r0, 90004d62 <HAL_SAI_Receive_DMA+0x5e>
      __HAL_UNLOCK(hsai);
90004d5a:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
90004d5e:	4628      	mov	r0, r5
90004d60:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
90004d62:	6825      	ldr	r5, [r4, #0]
90004d64:	682b      	ldr	r3, [r5, #0]
90004d66:	03db      	lsls	r3, r3, #15
90004d68:	d403      	bmi.n	90004d72 <HAL_SAI_Receive_DMA+0x6e>
      __HAL_SAI_ENABLE(hsai);
90004d6a:	682b      	ldr	r3, [r5, #0]
90004d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90004d70:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
90004d72:	2100      	movs	r1, #0
90004d74:	4620      	mov	r0, r4
90004d76:	f7ff fe9b 	bl	90004ab0 <SAI_InterruptFlag>
90004d7a:	692b      	ldr	r3, [r5, #16]
90004d7c:	4318      	orrs	r0, r3
90004d7e:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
90004d80:	682b      	ldr	r3, [r5, #0]
90004d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90004d86:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
90004d88:	2500      	movs	r5, #0
90004d8a:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
90004d8e:	e7e6      	b.n	90004d5e <HAL_SAI_Receive_DMA+0x5a>
    return  HAL_ERROR;
90004d90:	2501      	movs	r5, #1
90004d92:	e7e4      	b.n	90004d5e <HAL_SAI_Receive_DMA+0x5a>
    return HAL_BUSY;
90004d94:	2502      	movs	r5, #2
90004d96:	e7e2      	b.n	90004d5e <HAL_SAI_Receive_DMA+0x5a>
90004d98:	90004ddd 	.word	0x90004ddd
90004d9c:	90004da5 	.word	0x90004da5
90004da0:	90004de7 	.word	0x90004de7

90004da4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
90004da4:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
90004da6:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
90004da8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
90004daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90004dae:	d011      	beq.n	90004dd4 <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
90004db0:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
90004db2:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
90004db4:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
90004db6:	682b      	ldr	r3, [r5, #0]
90004db8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
90004dbc:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
90004dbe:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
90004dc2:	f7ff fe75 	bl	90004ab0 <SAI_InterruptFlag>
90004dc6:	692b      	ldr	r3, [r5, #16]
90004dc8:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
90004dcc:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
90004dce:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
90004dd0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
90004dd4:	4620      	mov	r0, r4
90004dd6:	f7fc fae3 	bl	900013a0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
90004dda:	bd38      	pop	{r3, r4, r5, pc}

90004ddc <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
90004ddc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
90004dde:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
90004de0:	f7fc fae2 	bl	900013a8 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
90004de4:	bd08      	pop	{r3, pc}

90004de6 <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
90004de6:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
90004de8:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
90004dea:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
90004dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90004df2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
90004df6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
90004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90004dfa:	2b01      	cmp	r3, #1
90004dfc:	d003      	beq.n	90004e06 <SAI_DMAError+0x20>
90004dfe:	6f03      	ldr	r3, [r0, #112]	; 0x70
90004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90004e02:	2b01      	cmp	r3, #1
90004e04:	d10c      	bne.n	90004e20 <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
90004e06:	6802      	ldr	r2, [r0, #0]
90004e08:	6813      	ldr	r3, [r2, #0]
90004e0a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
90004e0e:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
90004e10:	f7ff fe64 	bl	90004adc <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
90004e14:	2301      	movs	r3, #1
90004e16:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
90004e1a:	2300      	movs	r3, #0
90004e1c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
90004e20:	f7fc fac8 	bl	900013b4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
90004e24:	bd08      	pop	{r3, pc}

90004e26 <HAL_SAI_GetState>:
  return hsai->State;
90004e26:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
90004e2a:	4770      	bx	lr

90004e2c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
90004e2c:	4770      	bx	lr

90004e2e <HAL_SDRAM_Init>:
{   
90004e2e:	b538      	push	{r3, r4, r5, lr}
90004e30:	460d      	mov	r5, r1
  if(hsdram == NULL)
90004e32:	4604      	mov	r4, r0
90004e34:	b1c8      	cbz	r0, 90004e6a <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
90004e36:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90004e3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90004e3e:	b91b      	cbnz	r3, 90004e48 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
90004e40:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
90004e44:	f7ff fff2 	bl	90004e2c <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90004e48:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90004e4a:	1d21      	adds	r1, r4, #4
90004e4c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90004e4e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
90004e52:	f000 f835 	bl	90004ec0 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
90004e56:	6862      	ldr	r2, [r4, #4]
90004e58:	4629      	mov	r1, r5
90004e5a:	6820      	ldr	r0, [r4, #0]
90004e5c:	f000 f868 	bl	90004f30 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
90004e60:	2301      	movs	r3, #1
  return HAL_OK;
90004e62:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
90004e64:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90004e68:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90004e6a:	2001      	movs	r0, #1
90004e6c:	e7fc      	b.n	90004e68 <HAL_SDRAM_Init+0x3a>

90004e6e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
90004e6e:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90004e70:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
90004e74:	4604      	mov	r4, r0
90004e76:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90004e78:	2b02      	cmp	r3, #2
90004e7a:	b2d8      	uxtb	r0, r3
90004e7c:	d00d      	beq.n	90004e9a <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90004e7e:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90004e80:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90004e82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
90004e86:	f000 f895 	bl	90004fb4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
90004e8a:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
90004e8c:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
90004e8e:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90004e90:	bf0c      	ite	eq
90004e92:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
90004e94:	2301      	movne	r3, #1
90004e96:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90004e9a:	bd38      	pop	{r3, r4, r5, pc}

90004e9c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
90004e9c:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90004e9e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
90004ea2:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90004ea4:	2b02      	cmp	r3, #2
90004ea6:	b2d8      	uxtb	r0, r3
90004ea8:	d009      	beq.n	90004ebe <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90004eaa:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
90004eac:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90004eae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
90004eb2:	f000 f892 	bl	90004fda <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90004eb6:	2301      	movs	r3, #1
  
  return HAL_OK;   
90004eb8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
90004eba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90004ebe:	bd10      	pop	{r4, pc}

90004ec0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
90004ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
                        Init->RowBitsNumber      |\
90004ec4:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
                        Init->MemoryDataWidth    |\
                        Init->InternalBankNumber |\
                        Init->CASLatency         |\
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
90004ec8:	e9d1 3907 	ldrd	r3, r9, [r1, #28]
                        Init->ReadPipeDelay
90004ecc:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
90004ed0:	f8df e058 	ldr.w	lr, [pc, #88]	; 90004f2c <FMC_SDRAM_Init+0x6c>
90004ed4:	ea43 0309 	orr.w	r3, r3, r9
                        Init->InternalBankNumber |\
90004ed8:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
                        Init->WriteProtection    |\
90004edc:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
90004ee0:	6809      	ldr	r1, [r1, #0]
90004ee2:	2901      	cmp	r1, #1
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
90004ee4:	6801      	ldr	r1, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
90004ee6:	d00f      	beq.n	90004f08 <FMC_SDRAM_Init+0x48>
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004ee8:	ea43 0308 	orr.w	r3, r3, r8
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90004eec:	ea01 010e 	and.w	r1, r1, lr
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004ef0:	4313      	orrs	r3, r2
90004ef2:	ea43 030c 	orr.w	r3, r3, ip
90004ef6:	433b      	orrs	r3, r7
90004ef8:	4333      	orrs	r3, r6
90004efa:	432b      	orrs	r3, r5
90004efc:	4323      	orrs	r3, r4
90004efe:	430b      	orrs	r3, r1
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90004f00:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
90004f02:	2000      	movs	r0, #0
90004f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004f08:	ea42 020c 	orr.w	r2, r2, ip
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
90004f0c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
90004f10:	ea43 0308 	orr.w	r3, r3, r8
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004f14:	433a      	orrs	r2, r7
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
90004f16:	430b      	orrs	r3, r1
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
90004f18:	6841      	ldr	r1, [r0, #4]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004f1a:	4332      	orrs	r2, r6
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90004f1c:	ea01 010e 	and.w	r1, r1, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90004f20:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90004f22:	432a      	orrs	r2, r5
90004f24:	4322      	orrs	r2, r4
90004f26:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
90004f28:	6042      	str	r2, [r0, #4]
90004f2a:	e7ea      	b.n	90004f02 <FMC_SDRAM_Init+0x42>
90004f2c:	ffff8000 	.word	0xffff8000

90004f30 <FMC_SDRAM_Timing_Init>:
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
90004f30:	68cb      	ldr	r3, [r1, #12]
  if (Bank != FMC_SDRAM_BANK2) 
90004f32:	2a01      	cmp	r2, #1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
90004f34:	6882      	ldr	r2, [r0, #8]
                       (((Timing->RowCycleDelay)-1) << 12)       |\
90004f36:	f103 3cff 	add.w	ip, r3, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
90004f3a:	694b      	ldr	r3, [r1, #20]
{
90004f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
                       (((Timing->RPDelay)-1) << 20)             |\
90004f3e:	f103 33ff 	add.w	r3, r3, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004f42:	680f      	ldr	r7, [r1, #0]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
90004f44:	684c      	ldr	r4, [r1, #4]
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
90004f46:	688e      	ldr	r6, [r1, #8]
                       (((Timing->RPDelay)-1) << 20)             |\
90004f48:	ea4f 5303 	mov.w	r3, r3, lsl #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
90004f4c:	690d      	ldr	r5, [r1, #16]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
90004f4e:	f104 34ff 	add.w	r4, r4, #4294967295
                       (((Timing->RCDDelay)-1) << 24));
90004f52:	6989      	ldr	r1, [r1, #24]
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
90004f54:	f106 36ff 	add.w	r6, r6, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
90004f58:	f105 35ff 	add.w	r5, r5, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004f5c:	f107 37ff 	add.w	r7, r7, #4294967295
                       (((Timing->RCDDelay)-1) << 24));
90004f60:	f101 31ff 	add.w	r1, r1, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
90004f64:	ea4f 1404 	mov.w	r4, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
90004f68:	ea4f 2606 	mov.w	r6, r6, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
90004f6c:	ea4f 4505 	mov.w	r5, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));
90004f70:	ea4f 6101 	mov.w	r1, r1, lsl #24
90004f74:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
90004f78:	d00a      	beq.n	90004f90 <FMC_SDRAM_Timing_Init+0x60>
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004f7a:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90004f7c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004f80:	4323      	orrs	r3, r4
90004f82:	4333      	orrs	r3, r6
90004f84:	432b      	orrs	r3, r5
90004f86:	430b      	orrs	r3, r1
90004f88:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90004f8a:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
90004f8c:	2000      	movs	r0, #0
90004f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
90004f90:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
90004f94:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
90004f98:	4313      	orrs	r3, r2
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
90004f9a:	68c2      	ldr	r2, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90004f9c:	f002 4c70 	and.w	ip, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004fa0:	ea44 0206 	orr.w	r2, r4, r6
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90004fa4:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90004fa6:	433a      	orrs	r2, r7
90004fa8:	432a      	orrs	r2, r5
90004faa:	430a      	orrs	r2, r1
90004fac:	ea42 020c 	orr.w	r2, r2, ip
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
90004fb0:	60c2      	str	r2, [r0, #12]
90004fb2:	e7eb      	b.n	90004f8c <FMC_SDRAM_Timing_Init+0x5c>

90004fb4 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
90004fb4:	e9d1 3200 	ldrd	r3, r2, [r1]
{
90004fb8:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
90004fba:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
90004fbc:	68ca      	ldr	r2, [r1, #12]
  __IO uint32_t tmpr = 0;
90004fbe:	2400      	movs	r4, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
90004fc0:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
90004fc4:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
90004fc6:	9401      	str	r4, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
90004fc8:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
90004fca:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
90004fce:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
90004fd0:	9b01      	ldr	r3, [sp, #4]
90004fd2:	6103      	str	r3, [r0, #16]
  
  return HAL_OK;  
}
90004fd4:	4620      	mov	r0, r4
90004fd6:	b002      	add	sp, #8
90004fd8:	bd10      	pop	{r4, pc}

90004fda <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
90004fda:	6943      	ldr	r3, [r0, #20]
90004fdc:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
90004fe0:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
90004fe2:	2000      	movs	r0, #0
90004fe4:	4770      	bx	lr
	...

90004fe8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
90004fe8:	4b0a      	ldr	r3, [pc, #40]	; (90005014 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
90004fea:	3b01      	subs	r3, #1
90004fec:	d00f      	beq.n	9000500e <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90004fee:	6902      	ldr	r2, [r0, #16]
90004ff0:	2a00      	cmp	r2, #0
90004ff2:	dafa      	bge.n	90004fea <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
90004ff4:	6903      	ldr	r3, [r0, #16]
90004ff6:	4a07      	ldr	r2, [pc, #28]	; (90005014 <USB_CoreReset+0x2c>)
90004ff8:	f043 0301 	orr.w	r3, r3, #1
90004ffc:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
90004ffe:	3a01      	subs	r2, #1
90005000:	d005      	beq.n	9000500e <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
90005002:	6903      	ldr	r3, [r0, #16]
90005004:	f013 0301 	ands.w	r3, r3, #1
90005008:	d1f9      	bne.n	90004ffe <USB_CoreReset+0x16>

  return HAL_OK;
9000500a:	4618      	mov	r0, r3
9000500c:	4770      	bx	lr
      return HAL_TIMEOUT;
9000500e:	2003      	movs	r0, #3
}
90005010:	4770      	bx	lr
90005012:	bf00      	nop
90005014:	00030d41 	.word	0x00030d41

90005018 <USB_CoreInit>:
{
90005018:	b084      	sub	sp, #16
9000501a:	b538      	push	{r3, r4, r5, lr}
9000501c:	ad05      	add	r5, sp, #20
9000501e:	4604      	mov	r4, r0
90005020:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
90005024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90005026:	2b01      	cmp	r3, #1
90005028:	d126      	bne.n	90005078 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
9000502a:	6b83      	ldr	r3, [r0, #56]	; 0x38
9000502c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90005030:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
90005032:	68c3      	ldr	r3, [r0, #12]
90005034:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
90005038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
9000503c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
9000503e:	68c3      	ldr	r3, [r0, #12]
90005040:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
90005044:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
90005046:	9b11      	ldr	r3, [sp, #68]	; 0x44
90005048:	2b01      	cmp	r3, #1
9000504a:	d103      	bne.n	90005054 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
9000504c:	68c3      	ldr	r3, [r0, #12]
9000504e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
90005052:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
90005054:	4620      	mov	r0, r4
90005056:	f7ff ffc7 	bl	90004fe8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
9000505a:	9b08      	ldr	r3, [sp, #32]
9000505c:	2b01      	cmp	r3, #1
9000505e:	d107      	bne.n	90005070 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
90005060:	68a3      	ldr	r3, [r4, #8]
90005062:	f043 0306 	orr.w	r3, r3, #6
90005066:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
90005068:	68a3      	ldr	r3, [r4, #8]
9000506a:	f043 0320 	orr.w	r3, r3, #32
9000506e:	60a3      	str	r3, [r4, #8]
}
90005070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90005074:	b004      	add	sp, #16
90005076:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
90005078:	68c3      	ldr	r3, [r0, #12]
9000507a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000507e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
90005080:	f7ff ffb2 	bl	90004fe8 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
90005084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90005086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000508a:	63a3      	str	r3, [r4, #56]	; 0x38
9000508c:	e7e5      	b.n	9000505a <USB_CoreInit+0x42>

9000508e <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000508e:	6883      	ldr	r3, [r0, #8]
90005090:	f043 0301 	orr.w	r3, r3, #1
90005094:	6083      	str	r3, [r0, #8]
}
90005096:	2000      	movs	r0, #0
90005098:	4770      	bx	lr

9000509a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000509a:	6883      	ldr	r3, [r0, #8]
9000509c:	f023 0301 	bic.w	r3, r3, #1
900050a0:	6083      	str	r3, [r0, #8]
}
900050a2:	2000      	movs	r0, #0
900050a4:	4770      	bx	lr

900050a6 <USB_SetCurrentMode>:
{
900050a6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
900050a8:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
900050aa:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
900050ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
900050b0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
900050b2:	d108      	bne.n	900050c6 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
900050b4:	68c3      	ldr	r3, [r0, #12]
900050b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
900050ba:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
900050bc:	2032      	movs	r0, #50	; 0x32
900050be:	f7fd f997 	bl	900023f0 <HAL_Delay>
  return HAL_OK;
900050c2:	2000      	movs	r0, #0
}
900050c4:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
900050c6:	b919      	cbnz	r1, 900050d0 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
900050c8:	68c3      	ldr	r3, [r0, #12]
900050ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
900050ce:	e7f4      	b.n	900050ba <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
900050d0:	2001      	movs	r0, #1
900050d2:	e7f7      	b.n	900050c4 <USB_SetCurrentMode+0x1e>

900050d4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
900050d4:	0189      	lsls	r1, r1, #6
900050d6:	4a07      	ldr	r2, [pc, #28]	; (900050f4 <USB_FlushTxFifo+0x20>)
900050d8:	f041 0120 	orr.w	r1, r1, #32
900050dc:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
900050de:	3a01      	subs	r2, #1
900050e0:	d005      	beq.n	900050ee <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
900050e2:	6903      	ldr	r3, [r0, #16]
900050e4:	f013 0320 	ands.w	r3, r3, #32
900050e8:	d1f9      	bne.n	900050de <USB_FlushTxFifo+0xa>
  return HAL_OK;
900050ea:	4618      	mov	r0, r3
900050ec:	4770      	bx	lr
      return HAL_TIMEOUT;
900050ee:	2003      	movs	r0, #3
}
900050f0:	4770      	bx	lr
900050f2:	bf00      	nop
900050f4:	00030d41 	.word	0x00030d41

900050f8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
900050f8:	2310      	movs	r3, #16
900050fa:	4a06      	ldr	r2, [pc, #24]	; (90005114 <USB_FlushRxFifo+0x1c>)
900050fc:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
900050fe:	3a01      	subs	r2, #1
90005100:	d005      	beq.n	9000510e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
90005102:	6903      	ldr	r3, [r0, #16]
90005104:	f013 0310 	ands.w	r3, r3, #16
90005108:	d1f9      	bne.n	900050fe <USB_FlushRxFifo+0x6>
  return HAL_OK;
9000510a:	4618      	mov	r0, r3
9000510c:	4770      	bx	lr
      return HAL_TIMEOUT;
9000510e:	2003      	movs	r0, #3
}
90005110:	4770      	bx	lr
90005112:	bf00      	nop
90005114:	00030d41 	.word	0x00030d41

90005118 <USB_WritePacket>:
{
90005118:	b510      	push	{r4, lr}
9000511a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
9000511e:	b944      	cbnz	r4, 90005132 <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
90005120:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
90005122:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
90005124:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
90005126:	eb00 3002 	add.w	r0, r0, r2, lsl #12
9000512a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
9000512e:	428b      	cmp	r3, r1
90005130:	d101      	bne.n	90005136 <USB_WritePacket+0x1e>
}
90005132:	2000      	movs	r0, #0
90005134:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
90005136:	f851 2b04 	ldr.w	r2, [r1], #4
9000513a:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
9000513c:	e7f7      	b.n	9000512e <USB_WritePacket+0x16>

9000513e <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
9000513e:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
90005140:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
90005144:	0892      	lsrs	r2, r2, #2
90005146:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
9000514a:	4291      	cmp	r1, r2
9000514c:	d101      	bne.n	90005152 <USB_ReadPacket+0x14>
}
9000514e:	4608      	mov	r0, r1
90005150:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
90005152:	6803      	ldr	r3, [r0, #0]
90005154:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
90005158:	e7f7      	b.n	9000514a <USB_ReadPacket+0xc>

9000515a <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
9000515a:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
9000515c:	6980      	ldr	r0, [r0, #24]
}
9000515e:	4010      	ands	r0, r2
90005160:	4770      	bx	lr

90005162 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
90005162:	6940      	ldr	r0, [r0, #20]
}
90005164:	f000 0001 	and.w	r0, r0, #1
90005168:	4770      	bx	lr

9000516a <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000516a:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
9000516e:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90005170:	f500 6280 	add.w	r2, r0, #1024	; 0x400
90005174:	f023 0303 	bic.w	r3, r3, #3
{
90005178:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
9000517a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
9000517e:	f001 0303 	and.w	r3, r1, #3
90005182:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
90005186:	ea43 0304 	orr.w	r3, r3, r4
9000518a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
9000518e:	d104      	bne.n	9000519a <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
90005190:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
90005194:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
90005196:	2000      	movs	r0, #0
90005198:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
9000519a:	2902      	cmp	r1, #2
9000519c:	d1fb      	bne.n	90005196 <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
9000519e:	f241 7370 	movw	r3, #6000	; 0x1770
900051a2:	e7f7      	b.n	90005194 <USB_InitFSLSPClkSel+0x2a>

900051a4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
900051a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
900051a6:	2500      	movs	r5, #0
{
900051a8:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
900051aa:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
900051ac:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
900051b0:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
900051b2:	9b01      	ldr	r3, [sp, #4]
900051b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
900051b8:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
900051ba:	9b01      	ldr	r3, [sp, #4]
900051bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900051c0:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
900051c4:	2064      	movs	r0, #100	; 0x64
900051c6:	f7fd f913 	bl	900023f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
900051ca:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
900051cc:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
900051ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
900051d2:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
900051d6:	f7fd f90b 	bl	900023f0 <HAL_Delay>

  return HAL_OK;
}
900051da:	4628      	mov	r0, r5
900051dc:	b003      	add	sp, #12
900051de:	bd30      	pop	{r4, r5, pc}

900051e0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
900051e0:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
900051e2:	2300      	movs	r3, #0
900051e4:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
900051e6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
900051ea:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
900051ec:	9b01      	ldr	r3, [sp, #4]
900051ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
900051f2:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
900051f4:	9b01      	ldr	r3, [sp, #4]
900051f6:	04da      	lsls	r2, r3, #19
900051f8:	d406      	bmi.n	90005208 <USB_DriveVbus+0x28>
900051fa:	2901      	cmp	r1, #1
900051fc:	d104      	bne.n	90005208 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
900051fe:	9b01      	ldr	r3, [sp, #4]
90005200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90005204:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
90005208:	9b01      	ldr	r3, [sp, #4]
9000520a:	04db      	lsls	r3, r3, #19
9000520c:	d505      	bpl.n	9000521a <USB_DriveVbus+0x3a>
9000520e:	b921      	cbnz	r1, 9000521a <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
90005210:	9b01      	ldr	r3, [sp, #4]
90005212:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90005216:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
9000521a:	2000      	movs	r0, #0
9000521c:	b002      	add	sp, #8
9000521e:	4770      	bx	lr

90005220 <USB_HostInit>:
{
90005220:	b084      	sub	sp, #16
90005222:	b538      	push	{r3, r4, r5, lr}
90005224:	4604      	mov	r4, r0
90005226:	a805      	add	r0, sp, #20
90005228:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
9000522c:	2300      	movs	r3, #0
9000522e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
90005232:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90005234:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
90005238:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
9000523a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000523c:	05da      	lsls	r2, r3, #23
9000523e:	d53f      	bpl.n	900052c0 <USB_HostInit+0xa0>
    if (cfg.speed == USBH_FSLS_SPEED)
90005240:	9b07      	ldr	r3, [sp, #28]
90005242:	2b01      	cmp	r3, #1
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
90005244:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
90005248:	d13c      	bne.n	900052c4 <USB_HostInit+0xa4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
9000524a:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
9000524e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
90005252:	2110      	movs	r1, #16
90005254:	4620      	mov	r0, r4
90005256:	f7ff ff3d 	bl	900050d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
9000525a:	4620      	mov	r0, r4
9000525c:	f7ff ff4c 	bl	900050f8 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
90005260:	2300      	movs	r3, #0
90005262:	9906      	ldr	r1, [sp, #24]
90005264:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
90005268:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
9000526c:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
9000526e:	4299      	cmp	r1, r3
90005270:	d12b      	bne.n	900052ca <USB_HostInit+0xaa>
  (void)USB_DriveVbus(USBx, 1U);
90005272:	2101      	movs	r1, #1
90005274:	4620      	mov	r0, r4
90005276:	f7ff ffb3 	bl	900051e0 <USB_DriveVbus>
  HAL_Delay(200U);
9000527a:	20c8      	movs	r0, #200	; 0xc8
9000527c:	f7fd f8b8 	bl	900023f0 <HAL_Delay>
  USBx->GINTMSK = 0U;
90005280:	2300      	movs	r3, #0
90005282:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
90005284:	f04f 33ff 	mov.w	r3, #4294967295
90005288:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
9000528a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000528c:	05db      	lsls	r3, r3, #23
9000528e:	d521      	bpl.n	900052d4 <USB_HostInit+0xb4>
    USBx->GRXFSIZ  = 0x200U;
90005290:	f44f 7300 	mov.w	r3, #512	; 0x200
90005294:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
90005296:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
9000529a:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
9000529c:	4b11      	ldr	r3, [pc, #68]	; (900052e4 <USB_HostInit+0xc4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
9000529e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
900052a2:	9b08      	ldr	r3, [sp, #32]
900052a4:	b91b      	cbnz	r3, 900052ae <USB_HostInit+0x8e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
900052a6:	69a3      	ldr	r3, [r4, #24]
900052a8:	f043 0310 	orr.w	r3, r3, #16
900052ac:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
900052ae:	69a2      	ldr	r2, [r4, #24]
}
900052b0:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
900052b2:	4b0d      	ldr	r3, [pc, #52]	; (900052e8 <USB_HostInit+0xc8>)
900052b4:	4313      	orrs	r3, r2
900052b6:	61a3      	str	r3, [r4, #24]
}
900052b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
900052bc:	b004      	add	sp, #16
900052be:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
900052c0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
900052c4:	f023 0304 	bic.w	r3, r3, #4
900052c8:	e7c1      	b.n	9000524e <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
900052ca:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
900052cc:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
900052ce:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
900052d0:	3220      	adds	r2, #32
900052d2:	e7cc      	b.n	9000526e <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x80U;
900052d4:	2380      	movs	r3, #128	; 0x80
900052d6:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
900052d8:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
900052dc:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
900052de:	4b03      	ldr	r3, [pc, #12]	; (900052ec <USB_HostInit+0xcc>)
900052e0:	e7dd      	b.n	9000529e <USB_HostInit+0x7e>
900052e2:	bf00      	nop
900052e4:	00e00300 	.word	0x00e00300
900052e8:	a3200008 	.word	0xa3200008
900052ec:	004000e0 	.word	0x004000e0

900052f0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
900052f0:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
900052f2:	2300      	movs	r3, #0
900052f4:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
900052f6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
900052fa:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
900052fc:	9801      	ldr	r0, [sp, #4]
}
900052fe:	f3c0 4041 	ubfx	r0, r0, #17, #2
90005302:	b002      	add	sp, #8
90005304:	4770      	bx	lr

90005306 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
90005306:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000530a:	6880      	ldr	r0, [r0, #8]
}
9000530c:	b280      	uxth	r0, r0
9000530e:	4770      	bx	lr

90005310 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
90005310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
90005314:	eb00 1641 	add.w	r6, r0, r1, lsl #5
{
90005318:	4605      	mov	r5, r0
9000531a:	f89d 701c 	ldrb.w	r7, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
9000531e:	f04f 30ff 	mov.w	r0, #4294967295
90005322:	f506 64a0 	add.w	r4, r6, #1280	; 0x500
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
90005326:	fa4f fc82 	sxtb.w	ip, r2
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
9000532a:	60a0      	str	r0, [r4, #8]
  switch (ep_type)
9000532c:	2f03      	cmp	r7, #3
9000532e:	d861      	bhi.n	900053f4 <USB_HC_Init+0xe4>
90005330:	e8df f007 	tbb	[pc, r7]
90005334:	4f025602 	.word	0x4f025602
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005338:	f240 409d 	movw	r0, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
9000533c:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005340:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
90005342:	da03      	bge.n	9000534c <USB_HC_Init+0x3c>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
90005344:	68e0      	ldr	r0, [r4, #12]
90005346:	f440 7080 	orr.w	r0, r0, #256	; 0x100
9000534a:	e040      	b.n	900053ce <USB_HC_Init+0xbe>
        if ((USBx->CID & (0x1U << 8)) != 0U)
9000534c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
9000534e:	05c0      	lsls	r0, r0, #23
90005350:	d43a      	bmi.n	900053c8 <USB_HC_Init+0xb8>
  HAL_StatusTypeDef ret = HAL_OK;
90005352:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
90005354:	f001 040f 	and.w	r4, r1, #15
90005358:	2101      	movs	r1, #1
9000535a:	f8d5 8418 	ldr.w	r8, [r5, #1048]	; 0x418
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
9000535e:	059b      	lsls	r3, r3, #22
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
90005360:	40a1      	lsls	r1, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
90005362:	02d2      	lsls	r2, r2, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
90005364:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
90005368:	f505 6e80 	add.w	lr, r5, #1024	; 0x400
9000536c:	ea41 0108 	orr.w	r1, r1, r8
90005370:	f8c5 1418 	str.w	r1, [r5, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
90005374:	69a9      	ldr	r1, [r5, #24]
90005376:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
9000537a:	61a9      	str	r1, [r5, #24]
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
9000537c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
90005380:	f3c1 010a 	ubfx	r1, r1, #0, #11
90005384:	430b      	orrs	r3, r1
  if (speed == HPRT0_PRTSPD_LOW_SPEED)
90005386:	f89d 1018 	ldrb.w	r1, [sp, #24]
9000538a:	1e8c      	subs	r4, r1, #2
9000538c:	4261      	negs	r1, r4
9000538e:	4161      	adcs	r1, r4

  if (ep_type == EP_TYPE_INTR)
90005390:	2f03      	cmp	r7, #3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
90005392:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
90005396:	f402 41f0 	and.w	r1, r2, #30720	; 0x7800
  if ((epnum & 0x80U) == 0x80U)
9000539a:	ea4f 72dc 	mov.w	r2, ip, lsr #31
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
9000539e:	ea43 0301 	orr.w	r3, r3, r1
900053a2:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
900053a6:	ea4f 4287 	mov.w	r2, r7, lsl #18
900053aa:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
900053ae:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
900053b2:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
900053b6:	d105      	bne.n	900053c4 <USB_HC_Init+0xb4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
900053b8:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
900053bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
900053c0:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  }

  return ret;
}
900053c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
900053c8:	68e0      	ldr	r0, [r4, #12]
900053ca:	f040 0060 	orr.w	r0, r0, #96	; 0x60
900053ce:	60e0      	str	r0, [r4, #12]
900053d0:	e7bf      	b.n	90005352 <USB_HC_Init+0x42>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
900053d2:	f240 609d 	movw	r0, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
900053d6:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
900053da:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
900053dc:	dab9      	bge.n	90005352 <USB_HC_Init+0x42>
900053de:	e7b1      	b.n	90005344 <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
900053e0:	f240 2025 	movw	r0, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
900053e4:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
900053e8:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
900053ea:	dab2      	bge.n	90005352 <USB_HC_Init+0x42>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
900053ec:	68e0      	ldr	r0, [r4, #12]
900053ee:	f440 70c0 	orr.w	r0, r0, #384	; 0x180
900053f2:	e7ec      	b.n	900053ce <USB_HC_Init+0xbe>
  switch (ep_type)
900053f4:	2001      	movs	r0, #1
900053f6:	e7ad      	b.n	90005354 <USB_HC_Init+0x44>

900053f8 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
900053f8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
900053fc:	6940      	ldr	r0, [r0, #20]
}
900053fe:	b280      	uxth	r0, r0
90005400:	4770      	bx	lr

90005402 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
90005402:	eb00 1141 	add.w	r1, r0, r1, lsl #5
90005406:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
9000540a:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000540e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
90005412:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000541a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
9000541e:	d11e      	bne.n	9000545e <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
90005420:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90005422:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005426:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
9000542a:	d137      	bne.n	9000549c <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000542c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90005430:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90005434:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000543c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
90005440:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90005448:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
9000544c:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
90005450:	3b01      	subs	r3, #1
90005452:	d002      	beq.n	9000545a <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90005454:	6811      	ldr	r1, [r2, #0]
90005456:	2900      	cmp	r1, #0
90005458:	dbfa      	blt.n	90005450 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
9000545a:	2000      	movs	r0, #0
9000545c:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000545e:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
90005462:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005466:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
9000546a:	d117      	bne.n	9000549c <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
9000546c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90005470:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90005474:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000547c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
90005480:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005484:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90005488:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
9000548c:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
90005490:	3b01      	subs	r3, #1
90005492:	d0e2      	beq.n	9000545a <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90005494:	6811      	ldr	r1, [r2, #0]
90005496:	2900      	cmp	r1, #0
90005498:	dbfa      	blt.n	90005490 <USB_HC_Halt+0x8e>
9000549a:	e7de      	b.n	9000545a <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
9000549c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
900054a0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
900054a4:	e7d9      	b.n	9000545a <USB_HC_Halt+0x58>
	...

900054a8 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
900054a8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
900054ac:	4a06      	ldr	r2, [pc, #24]	; (900054c8 <USB_DoPing+0x20>)
900054ae:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
900054b2:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900054b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
900054ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
900054be:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

  return HAL_OK;
}
900054c2:	2000      	movs	r0, #0
900054c4:	4770      	bx	lr
900054c6:	bf00      	nop
900054c8:	80080000 	.word	0x80080000

900054cc <USB_HC_StartXfer>:
{
900054cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
900054d0:	4613      	mov	r3, r2
900054d2:	460c      	mov	r4, r1
  uint32_t ch_num = (uint32_t)hc->ch_num;
900054d4:	784a      	ldrb	r2, [r1, #1]
{
900054d6:	4606      	mov	r6, r0
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
900054d8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
900054da:	05c9      	lsls	r1, r1, #23
900054dc:	d517      	bpl.n	9000550e <USB_HC_StartXfer+0x42>
900054de:	7925      	ldrb	r5, [r4, #4]
900054e0:	b9ad      	cbnz	r5, 9000550e <USB_HC_StartXfer+0x42>
    if ((dma == 0U) && (hc->do_ping == 1U))
900054e2:	b94b      	cbnz	r3, 900054f8 <USB_HC_StartXfer+0x2c>
900054e4:	7961      	ldrb	r1, [r4, #5]
900054e6:	2901      	cmp	r1, #1
900054e8:	d111      	bne.n	9000550e <USB_HC_StartXfer+0x42>
      (void)USB_DoPing(USBx, hc->ch_num);
900054ea:	4611      	mov	r1, r2
900054ec:	f7ff ffdc 	bl	900054a8 <USB_DoPing>
}
900054f0:	2000      	movs	r0, #0
900054f2:	b002      	add	sp, #8
900054f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
900054f8:	2b01      	cmp	r3, #1
900054fa:	d108      	bne.n	9000550e <USB_HC_StartXfer+0x42>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
900054fc:	eb00 1142 	add.w	r1, r0, r2, lsl #5
90005500:	f8d1 050c 	ldr.w	r0, [r1, #1292]	; 0x50c
90005504:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90005508:	f8c1 050c 	str.w	r0, [r1, #1292]	; 0x50c
      hc->do_ping = 0U;
9000550c:	7165      	strb	r5, [r4, #5]
  if (hc->xfer_len > 0U)
9000550e:	6925      	ldr	r5, [r4, #16]
90005510:	2d00      	cmp	r5, #0
90005512:	d064      	beq.n	900055de <USB_HC_StartXfer+0x112>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
90005514:	8921      	ldrh	r1, [r4, #8]
90005516:	3d01      	subs	r5, #1
90005518:	440d      	add	r5, r1
9000551a:	fbb5 f5f1 	udiv	r5, r5, r1
9000551e:	b2ad      	uxth	r5, r5
    if (num_packets > max_hc_pkt_count)
90005520:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90005524:	d903      	bls.n	9000552e <USB_HC_StartXfer+0x62>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
90005526:	0209      	lsls	r1, r1, #8
      num_packets = max_hc_pkt_count;
90005528:	f44f 7580 	mov.w	r5, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
9000552c:	6121      	str	r1, [r4, #16]
  if (hc->ep_is_in != 0U)
9000552e:	f894 c003 	ldrb.w	ip, [r4, #3]
90005532:	f1bc 0f00 	cmp.w	ip, #0
90005536:	d002      	beq.n	9000553e <USB_HC_StartXfer+0x72>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
90005538:	8921      	ldrh	r1, [r4, #8]
9000553a:	4369      	muls	r1, r5
9000553c:	6121      	str	r1, [r4, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
9000553e:	7aa0      	ldrb	r0, [r4, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005540:	eb06 1742 	add.w	r7, r6, r2, lsl #5
90005544:	6921      	ldr	r1, [r4, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
90005546:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005548:	f3c1 0812 	ubfx	r8, r1, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
9000554c:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
90005550:	ea40 0008 	orr.w	r0, r0, r8
90005554:	ea40 40c5 	orr.w	r0, r0, r5, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005558:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510
  if (dma != 0U)
9000555c:	b113      	cbz	r3, 90005564 <USB_HC_StartXfer+0x98>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
9000555e:	68e0      	ldr	r0, [r4, #12]
90005560:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
90005564:	f8d6 0408 	ldr.w	r0, [r6, #1032]	; 0x408
90005568:	f506 6580 	add.w	r5, r6, #1024	; 0x400
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
9000556c:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
90005570:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
90005572:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
90005576:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
90005578:	f8c7 e500 	str.w	lr, [r7, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
9000557c:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
90005580:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
90005584:	ea40 000e 	orr.w	r0, r0, lr
90005588:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
9000558c:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
90005590:	4824      	ldr	r0, [pc, #144]	; (90005624 <USB_HC_StartXfer+0x158>)
90005592:	f8c0 e000 	str.w	lr, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005596:	f8d0 e000 	ldr.w	lr, [r0]
9000559a:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
9000559e:	f8c0 e000 	str.w	lr, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
900055a2:	f8d0 e000 	ldr.w	lr, [r0]
  if (hc->ep_is_in != 0U)
900055a6:	f1bc 0f00 	cmp.w	ip, #0
900055aa:	d01a      	beq.n	900055e2 <USB_HC_StartXfer+0x116>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
900055ac:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
900055b0:	f8c0 e000 	str.w	lr, [r0]
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
900055b4:	ea5c 0c03 	orrs.w	ip, ip, r3
  tmpreg |= USB_OTG_HCCHAR_CHENA;
900055b8:	f8d0 e000 	ldr.w	lr, [r0]
900055bc:	f04e 4e00 	orr.w	lr, lr, #2147483648	; 0x80000000
900055c0:	f8c0 e000 	str.w	lr, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
900055c4:	6800      	ldr	r0, [r0, #0]
900055c6:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
900055ca:	d191      	bne.n	900054f0 <USB_HC_StartXfer+0x24>
900055cc:	2900      	cmp	r1, #0
900055ce:	d08f      	beq.n	900054f0 <USB_HC_StartXfer+0x24>
      switch (hc->ep_type)
900055d0:	79e3      	ldrb	r3, [r4, #7]
900055d2:	2b03      	cmp	r3, #3
900055d4:	d813      	bhi.n	900055fe <USB_HC_StartXfer+0x132>
900055d6:	e8df f003 	tbb	[pc, r3]
900055da:	1a07      	.short	0x1a07
900055dc:	1a07      	.short	0x1a07
    num_packets = 1U;
900055de:	2501      	movs	r5, #1
900055e0:	e7a5      	b.n	9000552e <USB_HC_StartXfer+0x62>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
900055e2:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
900055e6:	e7e3      	b.n	900055b0 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
900055e8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
900055ea:	1ccb      	adds	r3, r1, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
900055ec:	b280      	uxth	r0, r0
900055ee:	f3c3 038f 	ubfx	r3, r3, #2, #16
900055f2:	4298      	cmp	r0, r3
900055f4:	d203      	bcs.n	900055fe <USB_HC_StartXfer+0x132>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
900055f6:	69b3      	ldr	r3, [r6, #24]
900055f8:	f043 0320 	orr.w	r3, r3, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
900055fc:	61b3      	str	r3, [r6, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
900055fe:	2300      	movs	r3, #0
90005600:	4630      	mov	r0, r6
90005602:	9300      	str	r3, [sp, #0]
90005604:	b28b      	uxth	r3, r1
90005606:	68e1      	ldr	r1, [r4, #12]
90005608:	f7ff fd86 	bl	90005118 <USB_WritePacket>
9000560c:	e770      	b.n	900054f0 <USB_HC_StartXfer+0x24>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
9000560e:	6928      	ldr	r0, [r5, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
90005610:	1ccb      	adds	r3, r1, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
90005612:	b280      	uxth	r0, r0
90005614:	f3c3 038f 	ubfx	r3, r3, #2, #16
90005618:	4298      	cmp	r0, r3
9000561a:	d2f0      	bcs.n	900055fe <USB_HC_StartXfer+0x132>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
9000561c:	69b3      	ldr	r3, [r6, #24]
9000561e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90005622:	e7eb      	b.n	900055fc <USB_HC_StartXfer+0x130>
90005624:	2000072c 	.word	0x2000072c

90005628 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005628:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
9000562a:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
9000562c:	f023 0301 	bic.w	r3, r3, #1
{
90005630:	b510      	push	{r4, lr}
90005632:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005634:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
90005636:	f7ff fd4d 	bl	900050d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
9000563a:	4620      	mov	r0, r4
9000563c:	f7ff fd5c 	bl	900050f8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
90005640:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
90005644:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);
90005648:	4619      	mov	r1, r3
  {
    value = USBx_HC(i)->HCCHAR;
9000564a:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
9000564c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
90005650:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
90005654:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
90005658:	4281      	cmp	r1, r0
9000565a:	d1f6      	bne.n	9000564a <USB_StopHost+0x22>
  uint32_t count = 0U;
9000565c:	2100      	movs	r1, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
9000565e:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
90005660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90005664:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
90005668:	601a      	str	r2, [r3, #0]

    do
    {
      if (++count > 1000U)
9000566a:	3101      	adds	r1, #1
9000566c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
90005670:	d802      	bhi.n	90005678 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90005672:	681a      	ldr	r2, [r3, #0]
90005674:	2a00      	cmp	r2, #0
90005676:	dbf8      	blt.n	9000566a <USB_StopHost+0x42>
  for (i = 0U; i <= 15U; i++)
90005678:	3320      	adds	r3, #32
9000567a:	4283      	cmp	r3, r0
9000567c:	d1ef      	bne.n	9000565e <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
9000567e:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
90005682:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
90005684:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
90005688:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
9000568a:	68a3      	ldr	r3, [r4, #8]
9000568c:	f043 0301 	orr.w	r3, r3, #1
90005690:	60a3      	str	r3, [r4, #8]
}
90005692:	bd10      	pop	{r4, pc}

90005694 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
90005694:	2000      	movs	r0, #0
90005696:	4770      	bx	lr

90005698 <USBH_MSC_Process>:
{
90005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000569a:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
9000569e:	4607      	mov	r7, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900056a0:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->state)
900056a2:	7b23      	ldrb	r3, [r4, #12]
900056a4:	b123      	cbz	r3, 900056b0 <USBH_MSC_Process+0x18>
900056a6:	2b01      	cmp	r3, #1
900056a8:	f000 816d 	beq.w	90005986 <USBH_MSC_Process+0x2ee>
  USBH_StatusTypeDef error = USBH_BUSY;
900056ac:	2001      	movs	r0, #1
            break;
900056ae:	e0fb      	b.n	900058a8 <USBH_MSC_Process+0x210>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
900056b0:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
900056b4:	2501      	movs	r5, #1
900056b6:	7822      	ldrb	r2, [r4, #0]
900056b8:	428a      	cmp	r2, r1
900056ba:	f240 815c 	bls.w	90005976 <USBH_MSC_Process+0x2de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
900056be:	2634      	movs	r6, #52	; 0x34
900056c0:	fb06 4301 	mla	r3, r6, r1, r4
900056c4:	f883 5091 	strb.w	r5, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
900056c8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
900056cc:	2b08      	cmp	r3, #8
900056ce:	d8ed      	bhi.n	900056ac <USBH_MSC_Process+0x14>
900056d0:	a201      	add	r2, pc, #4	; (adr r2, 900056d8 <USBH_MSC_Process+0x40>)
900056d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900056d6:	bf00      	nop
900056d8:	900056fd 	.word	0x900056fd
900056dc:	900056ad 	.word	0x900056ad
900056e0:	90005787 	.word	0x90005787
900056e4:	9000582f 	.word	0x9000582f
900056e8:	90005723 	.word	0x90005723
900056ec:	900058bb 	.word	0x900058bb
900056f0:	900056ad 	.word	0x900056ad
900056f4:	900056ad 	.word	0x900056ad
900056f8:	9000596f 	.word	0x9000596f
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
900056fc:	48a3      	ldr	r0, [pc, #652]	; (9000598c <USBH_MSC_Process+0x2f4>)
900056fe:	f005 f813 	bl	9000a728 <iprintf>
90005702:	200a      	movs	r0, #10
90005704:	f005 f822 	bl	9000a74c <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
90005708:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000570c:	2234      	movs	r2, #52	; 0x34
9000570e:	fb02 4303 	mla	r3, r2, r3, r4
90005712:	2204      	movs	r2, #4
90005714:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
90005718:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
9000571c:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
            break;
90005720:	e7c4      	b.n	900056ac <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
90005722:	fb06 4201 	mla	r2, r6, r1, r4
90005726:	b2c9      	uxtb	r1, r1
90005728:	329f      	adds	r2, #159	; 0x9f
9000572a:	f000 fc9b 	bl	90006064 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
9000572e:	2800      	cmp	r0, #0
90005730:	f040 80bb 	bne.w	900058aa <USBH_MSC_Process+0x212>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
90005734:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
90005738:	4895      	ldr	r0, [pc, #596]	; (90005990 <USBH_MSC_Process+0x2f8>)
9000573a:	fb06 4101 	mla	r1, r6, r1, r4
9000573e:	31a2      	adds	r1, #162	; 0xa2
90005740:	f004 fff2 	bl	9000a728 <iprintf>
90005744:	200a      	movs	r0, #10
90005746:	f005 f801 	bl	9000a74c <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
9000574a:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
9000574e:	4891      	ldr	r0, [pc, #580]	; (90005994 <USBH_MSC_Process+0x2fc>)
90005750:	fb06 4101 	mla	r1, r6, r1, r4
90005754:	31ab      	adds	r1, #171	; 0xab
90005756:	f004 ffe7 	bl	9000a728 <iprintf>
9000575a:	200a      	movs	r0, #10
9000575c:	f004 fff6 	bl	9000a74c <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
90005760:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
90005764:	488c      	ldr	r0, [pc, #560]	; (90005998 <USBH_MSC_Process+0x300>)
90005766:	fb06 4101 	mla	r1, r6, r1, r4
9000576a:	31bc      	adds	r1, #188	; 0xbc
9000576c:	f004 ffdc 	bl	9000a728 <iprintf>
90005770:	200a      	movs	r0, #10
90005772:	f004 ffeb 	bl	9000a74c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
90005776:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000577a:	2202      	movs	r2, #2
9000577c:	fb06 4303 	mla	r3, r6, r3, r4
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
90005780:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
90005784:	e792      	b.n	900056ac <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
90005786:	b2c9      	uxtb	r1, r1
90005788:	f000 fc14 	bl	90005fb4 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
9000578c:	b9f8      	cbnz	r0, 900057ce <USBH_MSC_Process+0x136>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
9000578e:	2234      	movs	r2, #52	; 0x34
90005790:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005794:	fb02 4303 	mla	r3, r2, r3, r4
90005798:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
9000579c:	b1a2      	cbz	r2, 900057c8 <USBH_MSC_Process+0x130>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
9000579e:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device ready");
900057a0:	487e      	ldr	r0, [pc, #504]	; (9000599c <USBH_MSC_Process+0x304>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
900057a2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device ready");
900057a6:	f004 ffbf 	bl	9000a728 <iprintf>
900057aa:	200a      	movs	r0, #10
900057ac:	f004 ffce 	bl	9000a74c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
900057b0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900057b4:	2234      	movs	r2, #52	; 0x34
900057b6:	fb02 4303 	mla	r3, r2, r3, r4
900057ba:	2203      	movs	r2, #3
900057bc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
900057c0:	2200      	movs	r2, #0
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
900057c2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
900057c6:	e771      	b.n	900056ac <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
900057c8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
900057cc:	e7f0      	b.n	900057b0 <USBH_MSC_Process+0x118>
            if (ready_status == USBH_FAIL)
900057ce:	2802      	cmp	r0, #2
900057d0:	d120      	bne.n	90005814 <USBH_MSC_Process+0x17c>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
900057d2:	2234      	movs	r2, #52	; 0x34
900057d4:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900057d8:	fb02 4303 	mla	r3, r2, r3, r4
900057dc:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
900057e0:	2a02      	cmp	r2, #2
900057e2:	d013      	beq.n	9000580c <USBH_MSC_Process+0x174>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
900057e4:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device NOT ready");
900057e6:	486e      	ldr	r0, [pc, #440]	; (900059a0 <USBH_MSC_Process+0x308>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
900057e8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device NOT ready");
900057ec:	f004 ff9c 	bl	9000a728 <iprintf>
900057f0:	200a      	movs	r0, #10
900057f2:	f004 ffab 	bl	9000a74c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
900057f6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900057fa:	2234      	movs	r2, #52	; 0x34
900057fc:	fb02 4303 	mla	r3, r2, r3, r4
90005800:	f240 1205 	movw	r2, #261	; 0x105
90005804:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
90005808:	2202      	movs	r2, #2
9000580a:	e7da      	b.n	900057c2 <USBH_MSC_Process+0x12a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
9000580c:	2200      	movs	r2, #0
9000580e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
90005812:	e7f0      	b.n	900057f6 <USBH_MSC_Process+0x15e>
              if (ready_status == USBH_UNRECOVERED_ERROR)
90005814:	2804      	cmp	r0, #4
90005816:	f47f af49 	bne.w	900056ac <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
9000581a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000581e:	2234      	movs	r2, #52	; 0x34
90005820:	fb02 4303 	mla	r3, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90005824:	f240 2201 	movw	r2, #513	; 0x201
90005828:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
9000582c:	e73e      	b.n	900056ac <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
9000582e:	fb06 4201 	mla	r2, r6, r1, r4
90005832:	b2c9      	uxtb	r1, r1
90005834:	3294      	adds	r2, #148	; 0x94
90005836:	f000 fbe0 	bl	90005ffa <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
9000583a:	bbb0      	cbnz	r0, 900058aa <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
9000583c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005840:	fb06 4303 	mla	r3, r6, r3, r4
90005844:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
90005848:	2a01      	cmp	r2, #1
9000584a:	d122      	bne.n	90005892 <USBH_MSC_Process+0x1fa>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
9000584c:	f8b3 2098 	ldrh.w	r2, [r3, #152]	; 0x98
90005850:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
90005854:	4853      	ldr	r0, [pc, #332]	; (900059a4 <USBH_MSC_Process+0x30c>)
90005856:	4351      	muls	r1, r2
90005858:	f004 ff66 	bl	9000a728 <iprintf>
9000585c:	200a      	movs	r0, #10
9000585e:	f004 ff75 	bl	9000a74c <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
90005862:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005866:	4850      	ldr	r0, [pc, #320]	; (900059a8 <USBH_MSC_Process+0x310>)
90005868:	fb06 4303 	mla	r3, r6, r3, r4
9000586c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
90005870:	f004 ff5a 	bl	9000a728 <iprintf>
90005874:	200a      	movs	r0, #10
90005876:	f004 ff69 	bl	9000a74c <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
9000587a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000587e:	484b      	ldr	r0, [pc, #300]	; (900059ac <USBH_MSC_Process+0x314>)
90005880:	fb06 4303 	mla	r3, r6, r3, r4
90005884:	f8b3 1098 	ldrh.w	r1, [r3, #152]	; 0x98
90005888:	f004 ff4e 	bl	9000a728 <iprintf>
9000588c:	200a      	movs	r0, #10
9000588e:	f004 ff5d 	bl	9000a74c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90005892:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005896:	2234      	movs	r2, #52	; 0x34
90005898:	2001      	movs	r0, #1
9000589a:	fb02 4203 	mla	r2, r2, r3, r4
9000589e:	f8a2 0090 	strh.w	r0, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
900058a2:	4403      	add	r3, r0
900058a4:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
}
900058a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (scsi_status == USBH_FAIL)
900058aa:	2802      	cmp	r0, #2
900058ac:	d157      	bne.n	9000595e <USBH_MSC_Process+0x2c6>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
900058ae:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900058b2:	2205      	movs	r2, #5
900058b4:	fb06 4303 	mla	r3, r6, r3, r4
900058b8:	e762      	b.n	90005780 <USBH_MSC_Process+0xe8>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
900058ba:	fb06 4201 	mla	r2, r6, r1, r4
900058be:	b2c9      	uxtb	r1, r1
900058c0:	329c      	adds	r2, #156	; 0x9c
900058c2:	f000 fc2f 	bl	90006124 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
900058c6:	bbe0      	cbnz	r0, 90005942 <USBH_MSC_Process+0x2aa>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
900058c8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900058cc:	fb06 4303 	mla	r3, r6, r3, r4
900058d0:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
900058d4:	f001 00fb 	and.w	r0, r1, #251	; 0xfb
900058d8:	2802      	cmp	r0, #2
900058da:	d10b      	bne.n	900058f4 <USBH_MSC_Process+0x25c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
900058dc:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
900058e0:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
900058e4:	1b52      	subs	r2, r2, r5
900058e6:	f242 750f 	movw	r5, #9999	; 0x270f
900058ea:	42aa      	cmp	r2, r5
900058ec:	d802      	bhi.n	900058f4 <USBH_MSC_Process+0x25c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
900058ee:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                  break;
900058f2:	e6db      	b.n	900056ac <USBH_MSC_Process+0x14>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
900058f4:	482e      	ldr	r0, [pc, #184]	; (900059b0 <USBH_MSC_Process+0x318>)
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
900058f6:	2534      	movs	r5, #52	; 0x34
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
900058f8:	f004 ff16 	bl	9000a728 <iprintf>
900058fc:	200a      	movs	r0, #10
900058fe:	f004 ff25 	bl	9000a74c <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
90005902:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005906:	482b      	ldr	r0, [pc, #172]	; (900059b4 <USBH_MSC_Process+0x31c>)
90005908:	fb05 4303 	mla	r3, r5, r3, r4
9000590c:	f893 109d 	ldrb.w	r1, [r3, #157]	; 0x9d
90005910:	f004 ff0a 	bl	9000a728 <iprintf>
90005914:	200a      	movs	r0, #10
90005916:	f004 ff19 	bl	9000a74c <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
9000591a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000591e:	4826      	ldr	r0, [pc, #152]	; (900059b8 <USBH_MSC_Process+0x320>)
90005920:	fb05 4303 	mla	r3, r5, r3, r4
90005924:	f893 109e 	ldrb.w	r1, [r3, #158]	; 0x9e
90005928:	f004 fefe 	bl	9000a728 <iprintf>
9000592c:	200a      	movs	r0, #10
9000592e:	f004 ff0d 	bl	9000a74c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90005932:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005936:	2001      	movs	r0, #1
90005938:	fb05 4503 	mla	r5, r5, r3, r4
9000593c:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
90005940:	e7af      	b.n	900058a2 <USBH_MSC_Process+0x20a>
            if (scsi_status == USBH_FAIL)
90005942:	2802      	cmp	r0, #2
90005944:	d10b      	bne.n	9000595e <USBH_MSC_Process+0x2c6>
              USBH_UsrLog("MSC Device NOT ready");
90005946:	4816      	ldr	r0, [pc, #88]	; (900059a0 <USBH_MSC_Process+0x308>)
90005948:	f004 feee 	bl	9000a728 <iprintf>
9000594c:	200a      	movs	r0, #10
9000594e:	f004 fefd 	bl	9000a74c <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
90005952:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005956:	2208      	movs	r2, #8
90005958:	fb06 4303 	mla	r3, r6, r3, r4
9000595c:	e710      	b.n	90005780 <USBH_MSC_Process+0xe8>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
9000595e:	2804      	cmp	r0, #4
90005960:	f47f aea4 	bne.w	900056ac <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90005964:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90005968:	fb06 4303 	mla	r3, r6, r3, r4
9000596c:	e75a      	b.n	90005824 <USBH_MSC_Process+0x18c>
            MSC_Handle->current_lun++;
9000596e:	3101      	adds	r1, #1
90005970:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
90005974:	e69a      	b.n	900056ac <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
90005976:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
9000597a:	2102      	movs	r1, #2
        MSC_Handle->state = MSC_IDLE;
9000597c:	7325      	strb	r5, [r4, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
9000597e:	f8d0 34c0 	ldr.w	r3, [r0, #1216]	; 0x4c0
90005982:	4798      	blx	r3
90005984:	e692      	b.n	900056ac <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
90005986:	2000      	movs	r0, #0
90005988:	e78e      	b.n	900058a8 <USBH_MSC_Process+0x210>
9000598a:	bf00      	nop
9000598c:	9000fb64 	.word	0x9000fb64
90005990:	9000fb6e 	.word	0x9000fb6e
90005994:	9000fb83 	.word	0x9000fb83
90005998:	9000fb98 	.word	0x9000fb98
9000599c:	9000fbad 	.word	0x9000fbad
900059a0:	9000fbbe 	.word	0x9000fbbe
900059a4:	9000fbd3 	.word	0x9000fbd3
900059a8:	9000fbf3 	.word	0x9000fbf3
900059ac:	9000fc06 	.word	0x9000fc06
900059b0:	9000fc19 	.word	0x9000fc19
900059b4:	9000fc29 	.word	0x9000fc29
900059b8:	9000fc44 	.word	0x9000fc44

900059bc <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900059bc:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
900059c0:	4603      	mov	r3, r0
900059c2:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900059c4:	69d4      	ldr	r4, [r2, #28]
  switch (MSC_Handle->req_state)
900059c6:	7ba2      	ldrb	r2, [r4, #14]
900059c8:	2a02      	cmp	r2, #2
900059ca:	d002      	beq.n	900059d2 <USBH_MSC_ClassRequest+0x16>
900059cc:	2a03      	cmp	r2, #3
900059ce:	d028      	beq.n	90005a22 <USBH_MSC_ClassRequest+0x66>
900059d0:	bb6a      	cbnz	r2, 90005a2e <USBH_MSC_ClassRequest+0x72>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
900059d2:	4621      	mov	r1, r4
900059d4:	4618      	mov	r0, r3
900059d6:	f000 f9ec 	bl	90005db2 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
900059da:	2803      	cmp	r0, #3
900059dc:	d11e      	bne.n	90005a1c <USBH_MSC_ClassRequest+0x60>
        MSC_Handle->max_lun = 0U;
900059de:	2300      	movs	r3, #0
900059e0:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
900059e2:	7821      	ldrb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
900059e4:	4813      	ldr	r0, [pc, #76]	; (90005a34 <USBH_MSC_ClassRequest+0x78>)
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
900059e6:	2902      	cmp	r1, #2
900059e8:	bf96      	itet	ls
900059ea:	3101      	addls	r1, #1
900059ec:	2102      	movhi	r1, #2
900059ee:	b2c9      	uxtbls	r1, r1
900059f0:	7021      	strb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
900059f2:	f004 fe99 	bl	9000a728 <iprintf>
900059f6:	200a      	movs	r0, #10
900059f8:	f004 fea8 	bl	9000a74c <putchar>
        for (i = 0U; i < MSC_Handle->max_lun; i++)
900059fc:	7821      	ldrb	r1, [r4, #0]
900059fe:	b159      	cbz	r1, 90005a18 <USBH_MSC_ClassRequest+0x5c>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
90005a00:	2202      	movs	r2, #2
          MSC_Handle->unit[i].state_changed = 0U;
90005a02:	2300      	movs	r3, #0
        for (i = 0U; i < MSC_Handle->max_lun; i++)
90005a04:	2901      	cmp	r1, #1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
90005a06:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
90005a0a:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
90005a0e:	bf1c      	itt	ne
90005a10:	f884 20c6 	strbne.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
90005a14:	f884 30f5 	strbne.w	r3, [r4, #245]	; 0xf5
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
90005a18:	2000      	movs	r0, #0
90005a1a:	e001      	b.n	90005a20 <USBH_MSC_ClassRequest+0x64>
      if (status == USBH_OK)
90005a1c:	2800      	cmp	r0, #0
90005a1e:	d0e0      	beq.n	900059e2 <USBH_MSC_ClassRequest+0x26>
}
90005a20:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
90005a22:	2100      	movs	r1, #0
90005a24:	f001 fa3a 	bl	90006e9c <USBH_ClrFeature>
90005a28:	b908      	cbnz	r0, 90005a2e <USBH_MSC_ClassRequest+0x72>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
90005a2a:	7be3      	ldrb	r3, [r4, #15]
90005a2c:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
90005a2e:	2001      	movs	r0, #1
90005a30:	e7f6      	b.n	90005a20 <USBH_MSC_ClassRequest+0x64>
90005a32:	bf00      	nop
90005a34:	9000fc68 	.word	0x9000fc68

90005a38 <USBH_MSC_InterfaceDeInit>:
{
90005a38:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005a3a:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90005a3e:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005a40:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
90005a42:	7969      	ldrb	r1, [r5, #5]
90005a44:	b139      	cbz	r1, 90005a56 <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
90005a46:	f001 faa3 	bl	90006f90 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
90005a4a:	7969      	ldrb	r1, [r5, #5]
90005a4c:	4620      	mov	r0, r4
90005a4e:	f001 fabc 	bl	90006fca <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
90005a52:	2300      	movs	r3, #0
90005a54:	716b      	strb	r3, [r5, #5]
  if (MSC_Handle->InPipe)
90005a56:	7929      	ldrb	r1, [r5, #4]
90005a58:	b141      	cbz	r1, 90005a6c <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
90005a5a:	4620      	mov	r0, r4
90005a5c:	f001 fa98 	bl	90006f90 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
90005a60:	7929      	ldrb	r1, [r5, #4]
90005a62:	4620      	mov	r0, r4
90005a64:	f001 fab1 	bl	90006fca <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
90005a68:	2300      	movs	r3, #0
90005a6a:	712b      	strb	r3, [r5, #4]
  if (phost->pActiveClass->pData)
90005a6c:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90005a70:	69d8      	ldr	r0, [r3, #28]
90005a72:	b128      	cbz	r0, 90005a80 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
90005a74:	f004 fce2 	bl	9000a43c <free>
    phost->pActiveClass->pData = 0U;
90005a78:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90005a7c:	2200      	movs	r2, #0
90005a7e:	61da      	str	r2, [r3, #28]
}
90005a80:	2000      	movs	r0, #0
90005a82:	bd38      	pop	{r3, r4, r5, pc}

90005a84 <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005a84:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
90005a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005a8a:	69d2      	ldr	r2, [r2, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
90005a8c:	2634      	movs	r6, #52	; 0x34
90005a8e:	fb06 2401 	mla	r4, r6, r1, r2
90005a92:	f894 5090 	ldrb.w	r5, [r4, #144]	; 0x90
90005a96:	2d06      	cmp	r5, #6
90005a98:	d005      	beq.n	90005aa6 <USBH_MSC_RdWrProcess+0x22>
90005a9a:	2d07      	cmp	r5, #7
90005a9c:	d00e      	beq.n	90005abc <USBH_MSC_RdWrProcess+0x38>
90005a9e:	2d05      	cmp	r5, #5
90005aa0:	d018      	beq.n	90005ad4 <USBH_MSC_RdWrProcess+0x50>
  USBH_StatusTypeDef error = USBH_BUSY ;
90005aa2:	2001      	movs	r0, #1
90005aa4:	e008      	b.n	90005ab8 <USBH_MSC_RdWrProcess+0x34>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
90005aa6:	2300      	movs	r3, #0
90005aa8:	461a      	mov	r2, r3
90005aaa:	9300      	str	r3, [sp, #0]
90005aac:	f000 fbb6 	bl	9000621c <USBH_MSC_SCSI_Read>
      break;

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);

      if (scsi_status == USBH_OK)
90005ab0:	b950      	cbnz	r0, 90005ac8 <USBH_MSC_RdWrProcess+0x44>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
90005ab2:	2301      	movs	r3, #1
90005ab4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    default:
      break;

  }
  return error;
}
90005ab8:	b002      	add	sp, #8
90005aba:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
90005abc:	2300      	movs	r3, #0
90005abe:	461a      	mov	r2, r3
90005ac0:	9300      	str	r3, [sp, #0]
90005ac2:	f000 fb6c 	bl	9000619e <USBH_MSC_SCSI_Write>
90005ac6:	e7f3      	b.n	90005ab0 <USBH_MSC_RdWrProcess+0x2c>
      else if (scsi_status == USBH_FAIL)
90005ac8:	2802      	cmp	r0, #2
90005aca:	d130      	bne.n	90005b2e <USBH_MSC_RdWrProcess+0xaa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
90005acc:	2305      	movs	r3, #5
90005ace:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
90005ad2:	e7e6      	b.n	90005aa2 <USBH_MSC_RdWrProcess+0x1e>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
90005ad4:	fb06 2201 	mla	r2, r6, r1, r2
90005ad8:	329c      	adds	r2, #156	; 0x9c
90005ada:	f000 fb23 	bl	90006124 <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
90005ade:	b9e8      	cbnz	r0, 90005b1c <USBH_MSC_RdWrProcess+0x98>
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
90005ae0:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
90005ae4:	4815      	ldr	r0, [pc, #84]	; (90005b3c <USBH_MSC_RdWrProcess+0xb8>)
90005ae6:	f004 fe1f 	bl	9000a728 <iprintf>
90005aea:	200a      	movs	r0, #10
90005aec:	f004 fe2e 	bl	9000a74c <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
90005af0:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
90005af4:	4812      	ldr	r0, [pc, #72]	; (90005b40 <USBH_MSC_RdWrProcess+0xbc>)
90005af6:	f004 fe17 	bl	9000a728 <iprintf>
90005afa:	200a      	movs	r0, #10
90005afc:	f004 fe26 	bl	9000a74c <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
90005b00:	f894 109e 	ldrb.w	r1, [r4, #158]	; 0x9e
90005b04:	480f      	ldr	r0, [pc, #60]	; (90005b44 <USBH_MSC_RdWrProcess+0xc0>)
90005b06:	f004 fe0f 	bl	9000a728 <iprintf>
90005b0a:	200a      	movs	r0, #10
90005b0c:	f004 fe1e 	bl	9000a74c <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
90005b10:	f240 2301 	movw	r3, #513	; 0x201
90005b14:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
90005b18:	2002      	movs	r0, #2
90005b1a:	e7cd      	b.n	90005ab8 <USBH_MSC_RdWrProcess+0x34>
      if (scsi_status == USBH_FAIL)
90005b1c:	2802      	cmp	r0, #2
90005b1e:	d106      	bne.n	90005b2e <USBH_MSC_RdWrProcess+0xaa>
        USBH_UsrLog("MSC Device NOT ready");
90005b20:	4809      	ldr	r0, [pc, #36]	; (90005b48 <USBH_MSC_RdWrProcess+0xc4>)
90005b22:	f004 fe01 	bl	9000a728 <iprintf>
90005b26:	200a      	movs	r0, #10
90005b28:	f004 fe10 	bl	9000a74c <putchar>
90005b2c:	e7b9      	b.n	90005aa2 <USBH_MSC_RdWrProcess+0x1e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
90005b2e:	2804      	cmp	r0, #4
90005b30:	d1b7      	bne.n	90005aa2 <USBH_MSC_RdWrProcess+0x1e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
90005b32:	2308      	movs	r3, #8
90005b34:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
90005b38:	e7ee      	b.n	90005b18 <USBH_MSC_RdWrProcess+0x94>
90005b3a:	bf00      	nop
90005b3c:	9000fc19 	.word	0x9000fc19
90005b40:	9000fc29 	.word	0x9000fc29
90005b44:	9000fc44 	.word	0x9000fc44
90005b48:	9000fbbe 	.word	0x9000fbbe

90005b4c <USBH_MSC_InterfaceInit>:
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
90005b4c:	f8d0 1468 	ldr.w	r1, [r0, #1128]	; 0x468
90005b50:	2350      	movs	r3, #80	; 0x50
90005b52:	2206      	movs	r2, #6
{
90005b54:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
90005b56:	7909      	ldrb	r1, [r1, #4]
{
90005b58:	b085      	sub	sp, #20
90005b5a:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
90005b5c:	f000 fc4e 	bl	900063fc <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
90005b60:	4601      	mov	r1, r0
90005b62:	b118      	cbz	r0, 90005b6c <USBH_MSC_InterfaceInit+0x20>
    return USBH_FAIL;
90005b64:	2602      	movs	r6, #2
}
90005b66:	4630      	mov	r0, r6
90005b68:	b005      	add	sp, #20
90005b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  status = USBH_SelectInterface(phost, interface);
90005b6c:	4628      	mov	r0, r5
90005b6e:	f000 fc01 	bl	90006374 <USBH_SelectInterface>
  if (status != USBH_OK)
90005b72:	4606      	mov	r6, r0
90005b74:	2800      	cmp	r0, #0
90005b76:	d1f5      	bne.n	90005b64 <USBH_MSC_InterfaceInit+0x18>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
90005b78:	f8d5 7468 	ldr.w	r7, [r5, #1128]	; 0x468
90005b7c:	f44f 7080 	mov.w	r0, #256	; 0x100
90005b80:	f004 fc54 	bl	9000a42c <malloc>
90005b84:	4604      	mov	r4, r0
90005b86:	61f8      	str	r0, [r7, #28]
  if (MSC_Handle == NULL)
90005b88:	2800      	cmp	r0, #0
90005b8a:	d0eb      	beq.n	90005b64 <USBH_MSC_InterfaceInit+0x18>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
90005b8c:	4631      	mov	r1, r6
90005b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
90005b92:	f004 ff37 	bl	9000aa04 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
90005b96:	f995 344e 	ldrsb.w	r3, [r5, #1102]	; 0x44e
90005b9a:	f895 244e 	ldrb.w	r2, [r5, #1102]	; 0x44e
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
90005b9e:	4628      	mov	r0, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
90005ba0:	2b00      	cmp	r3, #0
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
90005ba2:	f995 1456 	ldrsb.w	r1, [r5, #1110]	; 0x456
90005ba6:	f8b5 3450 	ldrh.w	r3, [r5, #1104]	; 0x450
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
90005baa:	f04f 0702 	mov.w	r7, #2
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
90005bae:	bfae      	itee	ge
90005bb0:	71a2      	strbge	r2, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
90005bb2:	71e2      	strblt	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
90005bb4:	8163      	strhlt	r3, [r4, #10]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
90005bb6:	f895 2456 	ldrb.w	r2, [r5, #1110]	; 0x456
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
90005bba:	bfa8      	it	ge
90005bbc:	8123      	strhge	r3, [r4, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
90005bbe:	2900      	cmp	r1, #0
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
90005bc0:	f8b5 3458 	ldrh.w	r3, [r5, #1112]	; 0x458
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
90005bc4:	bfa8      	it	ge
90005bc6:	71a2      	strbge	r2, [r4, #6]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
90005bc8:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
90005bca:	bfba      	itte	lt
90005bcc:	71e2      	strblt	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
90005bce:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
90005bd0:	8123      	strhge	r3, [r4, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
90005bd2:	f001 f9e2 	bl	90006f9a <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
90005bd6:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
90005bd8:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
90005bda:	4628      	mov	r0, r5
90005bdc:	f001 f9dd 	bl	90006f9a <USBH_AllocPipe>
90005be0:	7120      	strb	r0, [r4, #4]
  USBH_MSC_BOT_Init(phost);
90005be2:	4628      	mov	r0, r5
90005be4:	f000 f8ee 	bl	90005dc4 <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
90005be8:	8923      	ldrh	r3, [r4, #8]
90005bea:	79a2      	ldrb	r2, [r4, #6]
90005bec:	4628      	mov	r0, r5
90005bee:	9302      	str	r3, [sp, #8]
90005bf0:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
90005bf4:	7961      	ldrb	r1, [r4, #5]
90005bf6:	9300      	str	r3, [sp, #0]
90005bf8:	9701      	str	r7, [sp, #4]
90005bfa:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
90005bfe:	f001 f9b8 	bl	90006f72 <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
90005c02:	8963      	ldrh	r3, [r4, #10]
90005c04:	79e2      	ldrb	r2, [r4, #7]
90005c06:	4628      	mov	r0, r5
90005c08:	7921      	ldrb	r1, [r4, #4]
90005c0a:	e9cd 7301 	strd	r7, r3, [sp, #4]
90005c0e:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
90005c12:	9300      	str	r3, [sp, #0]
90005c14:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
90005c18:	f001 f9ab 	bl	90006f72 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
90005c1c:	7921      	ldrb	r1, [r4, #4]
90005c1e:	2200      	movs	r2, #0
90005c20:	4628      	mov	r0, r5
90005c22:	f004 fb1d 	bl	9000a260 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
90005c26:	2200      	movs	r2, #0
90005c28:	7961      	ldrb	r1, [r4, #5]
90005c2a:	4628      	mov	r0, r5
90005c2c:	f004 fb18 	bl	9000a260 <USBH_LL_SetToggle>
  return USBH_OK;
90005c30:	e799      	b.n	90005b66 <USBH_MSC_InterfaceInit+0x1a>

90005c32 <USBH_MSC_IsReady>:
uint8_t  USBH_MSC_IsReady(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
90005c32:	7803      	ldrb	r3, [r0, #0]
90005c34:	2b0b      	cmp	r3, #11
90005c36:	d107      	bne.n	90005c48 <USBH_MSC_IsReady+0x16>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005c38:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
90005c3c:	69db      	ldr	r3, [r3, #28]
90005c3e:	7b18      	ldrb	r0, [r3, #12]
  {
    res = 1U;
90005c40:	1e43      	subs	r3, r0, #1
90005c42:	4258      	negs	r0, r3
90005c44:	4158      	adcs	r0, r3
90005c46:	4770      	bx	lr
  }
  else
  {
    res = 0U;
90005c48:	2000      	movs	r0, #0
  }

  return res;
}
90005c4a:	4770      	bx	lr

90005c4c <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
90005c4c:	7803      	ldrb	r3, [r0, #0]
90005c4e:	2b0b      	cmp	r3, #11
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005c50:	bf01      	itttt	eq
90005c52:	f8d0 3468 	ldreq.w	r3, [r0, #1128]	; 0x468
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
90005c56:	2234      	moveq	r2, #52	; 0x34
90005c58:	69db      	ldreq	r3, [r3, #28]
90005c5a:	fb02 3101 	mlaeq	r1, r2, r1, r3
90005c5e:	bf03      	ittte	eq
90005c60:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
90005c64:	fab0 f080 	clzeq	r0, r0
90005c68:	0940      	lsreq	r0, r0, #5
  }
  else
  {
    res = 0U;
90005c6a:	2000      	movne	r0, #0
  }

  return res;
}
90005c6c:	4770      	bx	lr

90005c6e <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
90005c6e:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
90005c70:	7803      	ldrb	r3, [r0, #0]
90005c72:	2b0b      	cmp	r3, #11
90005c74:	d111      	bne.n	90005c9a <USBH_MSC_GetLUNInfo+0x2c>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
90005c76:	2334      	movs	r3, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005c78:	f8d0 0468 	ldr.w	r0, [r0, #1128]	; 0x468
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
90005c7c:	2490      	movs	r4, #144	; 0x90
90005c7e:	fb13 4101 	smlabb	r1, r3, r1, r4
90005c82:	69c3      	ldr	r3, [r0, #28]
90005c84:	4419      	add	r1, r3
90005c86:	f101 0334 	add.w	r3, r1, #52	; 0x34
90005c8a:	f851 0b04 	ldr.w	r0, [r1], #4
90005c8e:	4299      	cmp	r1, r3
90005c90:	f842 0b04 	str.w	r0, [r2], #4
90005c94:	d1f9      	bne.n	90005c8a <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
90005c96:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
90005c98:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
90005c9a:	2002      	movs	r0, #2
90005c9c:	e7fc      	b.n	90005c98 <USBH_MSC_GetLUNInfo+0x2a>

90005c9e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
90005c9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
90005ca2:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
90005ca6:	4604      	mov	r4, r0
90005ca8:	460e      	mov	r6, r1
90005caa:	9f08      	ldr	r7, [sp, #32]
  if ((phost->device.is_connected == 0U) ||
90005cac:	b3b5      	cbz	r5, 90005d1c <USBH_MSC_Read+0x7e>
      (phost->gState != HOST_CLASS) ||
90005cae:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
90005cb0:	2d0b      	cmp	r5, #11
90005cb2:	d133      	bne.n	90005d1c <USBH_MSC_Read+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005cb4:	f8d0 5468 	ldr.w	r5, [r0, #1128]	; 0x468
      (MSC_Handle->unit[lun].state != MSC_IDLE))
90005cb8:	f04f 0c34 	mov.w	ip, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005cbc:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
90005cbe:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
90005cc2:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
90005cc6:	f1be 0f01 	cmp.w	lr, #1
90005cca:	d127      	bne.n	90005d1c <USBH_MSC_Read+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
90005ccc:	f04f 0e06 	mov.w	lr, #6
90005cd0:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
90005cd4:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
90005cd8:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
90005cdc:	9700      	str	r7, [sp, #0]
90005cde:	f000 fa9d 	bl	9000621c <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90005ce2:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
90005ce6:	f8d4 84b0 	ldr.w	r8, [r4, #1200]	; 0x4b0
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90005cea:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
90005cec:	4631      	mov	r1, r6
90005cee:	4620      	mov	r0, r4
90005cf0:	f7ff fec8 	bl	90005a84 <USBH_MSC_RdWrProcess>
90005cf4:	2801      	cmp	r0, #1
90005cf6:	d005      	beq.n	90005d04 <USBH_MSC_Read+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
90005cf8:	2301      	movs	r3, #1

  return USBH_OK;
90005cfa:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
90005cfc:	732b      	strb	r3, [r5, #12]
}
90005cfe:	b002      	add	sp, #8
90005d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90005d04:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
90005d08:	eba3 0308 	sub.w	r3, r3, r8
90005d0c:	42bb      	cmp	r3, r7
90005d0e:	d803      	bhi.n	90005d18 <USBH_MSC_Read+0x7a>
90005d10:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
90005d14:	2b00      	cmp	r3, #0
90005d16:	d1e9      	bne.n	90005cec <USBH_MSC_Read+0x4e>
      MSC_Handle->state = MSC_IDLE;
90005d18:	2301      	movs	r3, #1
90005d1a:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
90005d1c:	2002      	movs	r0, #2
90005d1e:	e7ee      	b.n	90005cfe <USBH_MSC_Read+0x60>

90005d20 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
90005d20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
90005d24:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
90005d28:	4604      	mov	r4, r0
90005d2a:	460e      	mov	r6, r1
90005d2c:	9f08      	ldr	r7, [sp, #32]
  if ((phost->device.is_connected == 0U) ||
90005d2e:	b3b5      	cbz	r5, 90005d9e <USBH_MSC_Write+0x7e>
      (phost->gState != HOST_CLASS) ||
90005d30:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
90005d32:	2d0b      	cmp	r5, #11
90005d34:	d133      	bne.n	90005d9e <USBH_MSC_Write+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005d36:	f8d0 5468 	ldr.w	r5, [r0, #1128]	; 0x468
      (MSC_Handle->unit[lun].state != MSC_IDLE))
90005d3a:	f04f 0c34 	mov.w	ip, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005d3e:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
90005d40:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
90005d44:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
90005d48:	f1be 0f01 	cmp.w	lr, #1
90005d4c:	d127      	bne.n	90005d9e <USBH_MSC_Write+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
90005d4e:	f04f 0e07 	mov.w	lr, #7
90005d52:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
90005d56:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
90005d5a:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
90005d5e:	9700      	str	r7, [sp, #0]
90005d60:	f000 fa1d 	bl	9000619e <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90005d64:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
90005d68:	f8d4 84b0 	ldr.w	r8, [r4, #1200]	; 0x4b0
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90005d6c:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
90005d6e:	4631      	mov	r1, r6
90005d70:	4620      	mov	r0, r4
90005d72:	f7ff fe87 	bl	90005a84 <USBH_MSC_RdWrProcess>
90005d76:	2801      	cmp	r0, #1
90005d78:	d005      	beq.n	90005d86 <USBH_MSC_Write+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
90005d7a:	2301      	movs	r3, #1
  return USBH_OK;
90005d7c:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
90005d7e:	732b      	strb	r3, [r5, #12]
}
90005d80:	b002      	add	sp, #8
90005d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90005d86:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
90005d8a:	eba3 0308 	sub.w	r3, r3, r8
90005d8e:	42bb      	cmp	r3, r7
90005d90:	d803      	bhi.n	90005d9a <USBH_MSC_Write+0x7a>
90005d92:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
90005d96:	2b00      	cmp	r3, #0
90005d98:	d1e9      	bne.n	90005d6e <USBH_MSC_Write+0x4e>
      MSC_Handle->state = MSC_IDLE;
90005d9a:	2301      	movs	r3, #1
90005d9c:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
90005d9e:	2002      	movs	r0, #2
90005da0:	e7ee      	b.n	90005d80 <USBH_MSC_Write+0x60>

90005da2 <USBH_MSC_BOT_REQ_Reset>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
90005da2:	f64f 7121 	movw	r1, #65313	; 0xff21
90005da6:	2200      	movs	r2, #0
90005da8:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
90005dac:	4611      	mov	r1, r2
90005dae:	f000 be77 	b.w	90006aa0 <USBH_CtlReq>

90005db2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
90005db2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90005db6:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
90005dba:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
90005dbe:	2201      	movs	r2, #1
90005dc0:	f000 be6e 	b.w	90006aa0 <USBH_CtlReq>

90005dc4 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005dc4:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
90005dc8:	2000      	movs	r0, #0
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
90005dca:	4905      	ldr	r1, [pc, #20]	; (90005de0 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005dcc:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
90005dce:	4a05      	ldr	r2, [pc, #20]	; (90005de4 <USBH_MSC_BOT_Init+0x20>)
90005dd0:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
90005dd4:	2201      	movs	r2, #1
90005dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
90005dda:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
90005dde:	4770      	bx	lr
90005de0:	43425355 	.word	0x43425355
90005de4:	20304050 	.word	0x20304050

90005de8 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005de8:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90005dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005dee:	69dc      	ldr	r4, [r3, #28]
{
90005df0:	4606      	mov	r6, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
90005df2:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
90005df6:	1e6b      	subs	r3, r5, #1
90005df8:	2b0a      	cmp	r3, #10
90005dfa:	d838      	bhi.n	90005e6e <USBH_MSC_BOT_Process+0x86>
90005dfc:	e8df f003 	tbb	[pc, r3]
90005e00:	392e1506 	.word	0x392e1506
90005e04:	89816056 	.word	0x89816056
90005e08:	b6ac      	.short	0xb6ac
90005e0a:	ce          	.byte	0xce
90005e0b:	00          	.byte	0x00
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
90005e0c:	2302      	movs	r3, #2
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
90005e0e:	2201      	movs	r2, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
90005e10:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
90005e14:	f104 0154 	add.w	r1, r4, #84	; 0x54
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
90005e18:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
90005e1c:	7963      	ldrb	r3, [r4, #5]
90005e1e:	9200      	str	r2, [sp, #0]
90005e20:	221f      	movs	r2, #31
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
90005e22:	4630      	mov	r0, r6
90005e24:	f001 f87e 	bl	90006f24 <USBH_BulkSendData>
90005e28:	e015      	b.n	90005e56 <USBH_MSC_BOT_Process+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
90005e2a:	7961      	ldrb	r1, [r4, #5]
90005e2c:	f004 fa04 	bl	9000a238 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90005e30:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
90005e32:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
90005e34:	d10a      	bne.n	90005e4c <USBH_MSC_BOT_Process+0x64>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
90005e36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
90005e38:	b36b      	cbz	r3, 90005e96 <USBH_MSC_BOT_Process+0xae>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
90005e3a:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
90005e3e:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
90005e40:	bfb4      	ite	lt
90005e42:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
90005e44:	2305      	movge	r3, #5

    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
      if (status == USBH_OK)
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
90005e46:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
90005e4a:	e004      	b.n	90005e56 <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_NOTREADY)
90005e4c:	2802      	cmp	r0, #2
90005e4e:	d154      	bne.n	90005efa <USBH_MSC_BOT_Process+0x112>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
90005e50:	2501      	movs	r5, #1
90005e52:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50

    default:
      break;
  }
  return status;
}
90005e56:	4628      	mov	r0, r5
90005e58:	b002      	add	sp, #8
90005e5a:	bd70      	pop	{r4, r5, r6, pc}
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
90005e5c:	7923      	ldrb	r3, [r4, #4]
90005e5e:	8962      	ldrh	r2, [r4, #10]
90005e60:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
90005e64:	f001 f875 	bl	90006f52 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
90005e68:	2304      	movs	r3, #4
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
90005e6a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
90005e6e:	2501      	movs	r5, #1
90005e70:	e7f1      	b.n	90005e56 <USBH_MSC_BOT_Process+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
90005e72:	7921      	ldrb	r1, [r4, #4]
90005e74:	f004 f9e0 	bl	9000a238 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90005e78:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
90005e7a:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
90005e7c:	d112      	bne.n	90005ea4 <USBH_MSC_BOT_Process+0xbc>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
90005e7e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
90005e80:	8962      	ldrh	r2, [r4, #10]
90005e82:	4293      	cmp	r3, r2
90005e84:	d932      	bls.n	90005eec <USBH_MSC_BOT_Process+0x104>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
90005e86:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
90005e8a:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
90005e8c:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
90005e8e:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
90005e90:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
90005e94:	b90b      	cbnz	r3, 90005e9a <USBH_MSC_BOT_Process+0xb2>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
90005e96:	2307      	movs	r3, #7
90005e98:	e7d5      	b.n	90005e46 <USBH_MSC_BOT_Process+0x5e>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
90005e9a:	7923      	ldrb	r3, [r4, #4]
90005e9c:	4630      	mov	r0, r6
90005e9e:	f001 f858 	bl	90006f52 <USBH_BulkReceiveData>
90005ea2:	e7d8      	b.n	90005e56 <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_STALL)
90005ea4:	2805      	cmp	r0, #5
      else if (URB_Status == USBH_URB_STALL)
90005ea6:	d1e2      	bne.n	90005e6e <USBH_MSC_BOT_Process+0x86>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
90005ea8:	2309      	movs	r3, #9
90005eaa:	e7de      	b.n	90005e6a <USBH_MSC_BOT_Process+0x82>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
90005eac:	2501      	movs	r5, #1
90005eae:	7963      	ldrb	r3, [r4, #5]
90005eb0:	8922      	ldrh	r2, [r4, #8]
90005eb2:	9500      	str	r5, [sp, #0]
90005eb4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
90005eb8:	f001 f834 	bl	90006f24 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
90005ebc:	2306      	movs	r3, #6
90005ebe:	e7c2      	b.n	90005e46 <USBH_MSC_BOT_Process+0x5e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
90005ec0:	7961      	ldrb	r1, [r4, #5]
90005ec2:	f004 f9b9 	bl	9000a238 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90005ec6:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
90005ec8:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
90005eca:	d112      	bne.n	90005ef2 <USBH_MSC_BOT_Process+0x10a>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
90005ecc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
90005ece:	8922      	ldrh	r2, [r4, #8]
90005ed0:	4293      	cmp	r3, r2
90005ed2:	d90b      	bls.n	90005eec <USBH_MSC_BOT_Process+0x104>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
90005ed4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
90005ed8:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
90005eda:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
90005edc:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
90005ede:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
90005ee2:	2b00      	cmp	r3, #0
90005ee4:	d0d7      	beq.n	90005e96 <USBH_MSC_BOT_Process+0xae>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
90005ee6:	7963      	ldrb	r3, [r4, #5]
90005ee8:	9000      	str	r0, [sp, #0]
90005eea:	e79a      	b.n	90005e22 <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
90005eec:	2300      	movs	r3, #0
90005eee:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
90005ef0:	e7d1      	b.n	90005e96 <USBH_MSC_BOT_Process+0xae>
      else if (URB_Status == USBH_URB_NOTREADY)
90005ef2:	2802      	cmp	r0, #2
90005ef4:	d101      	bne.n	90005efa <USBH_MSC_BOT_Process+0x112>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
90005ef6:	2305      	movs	r3, #5
90005ef8:	e7b7      	b.n	90005e6a <USBH_MSC_BOT_Process+0x82>
      else if (URB_Status == USBH_URB_STALL)
90005efa:	2d05      	cmp	r5, #5
90005efc:	d1b7      	bne.n	90005e6e <USBH_MSC_BOT_Process+0x86>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
90005efe:	230a      	movs	r3, #10
90005f00:	e7b3      	b.n	90005e6a <USBH_MSC_BOT_Process+0x82>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
90005f02:	7923      	ldrb	r3, [r4, #4]
90005f04:	220d      	movs	r2, #13
90005f06:	f104 0178 	add.w	r1, r4, #120	; 0x78
90005f0a:	f001 f822 	bl	90006f52 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
90005f0e:	2308      	movs	r3, #8
90005f10:	e7ab      	b.n	90005e6a <USBH_MSC_BOT_Process+0x82>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
90005f12:	7921      	ldrb	r1, [r4, #4]
90005f14:	f004 f990 	bl	9000a238 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90005f18:	2801      	cmp	r0, #1
90005f1a:	d11b      	bne.n	90005f54 <USBH_MSC_BOT_Process+0x16c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
90005f1c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
90005f20:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
90005f24:	4630      	mov	r0, r6
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005f26:	f8d6 3468 	ldr.w	r3, [r6, #1128]	; 0x468
90005f2a:	69dc      	ldr	r4, [r3, #28]
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
90005f2c:	7921      	ldrb	r1, [r4, #4]
90005f2e:	f004 f954 	bl	9000a1da <USBH_LL_GetLastXferSize>
90005f32:	280d      	cmp	r0, #13
90005f34:	d13a      	bne.n	90005fac <USBH_MSC_BOT_Process+0x1c4>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
90005f36:	6fa2      	ldr	r2, [r4, #120]	; 0x78
90005f38:	4b1d      	ldr	r3, [pc, #116]	; (90005fb0 <USBH_MSC_BOT_Process+0x1c8>)
90005f3a:	429a      	cmp	r2, r3
90005f3c:	d136      	bne.n	90005fac <USBH_MSC_BOT_Process+0x1c4>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
90005f3e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
90005f40:	6da3      	ldr	r3, [r4, #88]	; 0x58
90005f42:	429a      	cmp	r2, r3
90005f44:	d132      	bne.n	90005fac <USBH_MSC_BOT_Process+0x1c4>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
90005f46:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
90005f4a:	3d00      	subs	r5, #0
90005f4c:	bf18      	it	ne
90005f4e:	2501      	movne	r5, #1
90005f50:	006d      	lsls	r5, r5, #1
90005f52:	e780      	b.n	90005e56 <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_STALL)
90005f54:	2805      	cmp	r0, #5
90005f56:	e7a6      	b.n	90005ea6 <USBH_MSC_BOT_Process+0xbe>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
90005f58:	79e1      	ldrb	r1, [r4, #7]
90005f5a:	f000 ff9f 	bl	90006e9c <USBH_ClrFeature>
      if (error == USBH_OK)
90005f5e:	b908      	cbnz	r0, 90005f64 <USBH_MSC_BOT_Process+0x17c>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
90005f60:	2307      	movs	r3, #7
90005f62:	e782      	b.n	90005e6a <USBH_MSC_BOT_Process+0x82>
      else if (error == USBH_UNRECOVERED_ERROR)
90005f64:	2804      	cmp	r0, #4
        if (error == USBH_UNRECOVERED_ERROR)
90005f66:	d182      	bne.n	90005e6e <USBH_MSC_BOT_Process+0x86>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
90005f68:	230b      	movs	r3, #11
90005f6a:	e77e      	b.n	90005e6a <USBH_MSC_BOT_Process+0x82>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
90005f6c:	79a1      	ldrb	r1, [r4, #6]
90005f6e:	f000 ff95 	bl	90006e9c <USBH_ClrFeature>
      if (error == USBH_OK)
90005f72:	4605      	mov	r5, r0
90005f74:	b980      	cbnz	r0, 90005f98 <USBH_MSC_BOT_Process+0x1b0>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
90005f76:	7961      	ldrb	r1, [r4, #5]
90005f78:	4630      	mov	r0, r6
90005f7a:	f004 f981 	bl	9000a280 <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
90005f7e:	f1c0 0001 	rsb	r0, r0, #1
90005f82:	7961      	ldrb	r1, [r4, #5]
90005f84:	b2c2      	uxtb	r2, r0
90005f86:	4630      	mov	r0, r6
90005f88:	f004 f96a 	bl	9000a260 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
90005f8c:	462a      	mov	r2, r5
90005f8e:	7921      	ldrb	r1, [r4, #4]
90005f90:	4630      	mov	r0, r6
90005f92:	f004 f965 	bl	9000a260 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
90005f96:	e787      	b.n	90005ea8 <USBH_MSC_BOT_Process+0xc0>
        if (error == USBH_UNRECOVERED_ERROR)
90005f98:	2804      	cmp	r0, #4
90005f9a:	e7e4      	b.n	90005f66 <USBH_MSC_BOT_Process+0x17e>
      status = USBH_MSC_BOT_REQ_Reset(phost);
90005f9c:	f7ff ff01 	bl	90005da2 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
90005fa0:	4605      	mov	r5, r0
90005fa2:	2800      	cmp	r0, #0
90005fa4:	f47f af57 	bne.w	90005e56 <USBH_MSC_BOT_Process+0x6e>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
90005fa8:	2301      	movs	r3, #1
90005faa:	e74c      	b.n	90005e46 <USBH_MSC_BOT_Process+0x5e>
          status = USBH_FAIL;
90005fac:	2502      	movs	r5, #2
90005fae:	e752      	b.n	90005e56 <USBH_MSC_BOT_Process+0x6e>
90005fb0:	53425355 	.word	0x53425355

90005fb4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
90005fb4:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005fb6:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
90005fba:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
90005fbc:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
90005fc0:	2d01      	cmp	r5, #1
90005fc2:	d004      	beq.n	90005fce <USBH_MSC_SCSI_TestUnitReady+0x1a>
90005fc4:	2d02      	cmp	r5, #2
90005fc6:	d014      	beq.n	90005ff2 <USBH_MSC_SCSI_TestUnitReady+0x3e>
90005fc8:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
90005fca:	4628      	mov	r0, r5
90005fcc:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
90005fce:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90005fd0:	230a      	movs	r3, #10
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90005fd2:	2210      	movs	r2, #16
90005fd4:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90005fd8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
90005fdc:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
90005fde:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90005fe2:	f004 fd0f 	bl	9000aa04 <memset>
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90005fe6:	2302      	movs	r3, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90005fe8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90005fec:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
90005ff0:	e7eb      	b.n	90005fca <USBH_MSC_SCSI_TestUnitReady+0x16>
}
90005ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
90005ff6:	f7ff bef7 	b.w	90005de8 <USBH_MSC_BOT_Process>

90005ffa <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90005ffa:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90005ffe:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006000:	69dc      	ldr	r4, [r3, #28]
{
90006002:	4616      	mov	r6, r2

  switch (MSC_Handle->hbot.cmd_state)
90006004:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
90006008:	2d01      	cmp	r5, #1
9000600a:	d004      	beq.n	90006016 <USBH_MSC_SCSI_ReadCapacity+0x1c>
9000600c:	2d02      	cmp	r5, #2
9000600e:	d01b      	beq.n	90006048 <USBH_MSC_SCSI_ReadCapacity+0x4e>
90006010:	2501      	movs	r5, #1
    default:
      break;
  }

  return error;
}
90006012:	4628      	mov	r0, r5
90006014:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
90006016:	2308      	movs	r3, #8
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006018:	2210      	movs	r2, #16
9000601a:	2100      	movs	r1, #0
9000601c:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
90006020:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006022:	2380      	movs	r3, #128	; 0x80
90006024:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006028:	f004 fcec 	bl	9000aa04 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
9000602c:	f242 530a 	movw	r3, #9482	; 0x250a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006030:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006034:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006038:	2302      	movs	r3, #2
9000603a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
9000603e:	f104 0310 	add.w	r3, r4, #16
90006042:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
90006046:	e7e4      	b.n	90006012 <USBH_MSC_SCSI_ReadCapacity+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
90006048:	f7ff fece 	bl	90005de8 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
9000604c:	4605      	mov	r5, r0
9000604e:	2800      	cmp	r0, #0
90006050:	d1df      	bne.n	90006012 <USBH_MSC_SCSI_ReadCapacity+0x18>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
90006052:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
90006056:	6813      	ldr	r3, [r2, #0]
90006058:	ba1b      	rev	r3, r3
9000605a:	6033      	str	r3, [r6, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
9000605c:	88d3      	ldrh	r3, [r2, #6]
9000605e:	ba5b      	rev16	r3, r3
90006060:	80b3      	strh	r3, [r6, #4]
90006062:	e7d6      	b.n	90006012 <USBH_MSC_SCSI_ReadCapacity+0x18>

90006064 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
90006064:	b570      	push	{r4, r5, r6, lr}
90006066:	4616      	mov	r6, r2
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006068:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
9000606c:	460b      	mov	r3, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000606e:	69d4      	ldr	r4, [r2, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006070:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
90006074:	2d01      	cmp	r5, #1
90006076:	d004      	beq.n	90006082 <USBH_MSC_SCSI_Inquiry+0x1e>
90006078:	2d02      	cmp	r5, #2
9000607a:	d021      	beq.n	900060c0 <USBH_MSC_SCSI_Inquiry+0x5c>
9000607c:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
9000607e:	4628      	mov	r0, r5
90006080:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006082:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
90006084:	015b      	lsls	r3, r3, #5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
90006086:	2124      	movs	r1, #36	; 0x24
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006088:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
9000608c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
90006090:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
90006092:	65e1      	str	r1, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
90006094:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
90006098:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
9000609c:	2302      	movs	r3, #2
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
9000609e:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
900060a2:	f8a4 206b 	strh.w	r2, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900060a6:	f241 220a 	movw	r2, #4618	; 0x120a
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
900060aa:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
900060ae:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900060b2:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
900060b6:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
900060ba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
900060be:	e7de      	b.n	9000607e <USBH_MSC_SCSI_Inquiry+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
900060c0:	f7ff fe92 	bl	90005de8 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
900060c4:	4605      	mov	r5, r0
900060c6:	2800      	cmp	r0, #0
900060c8:	d1d9      	bne.n	9000607e <USBH_MSC_SCSI_Inquiry+0x1a>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
900060ca:	4601      	mov	r1, r0
900060cc:	2222      	movs	r2, #34	; 0x22
900060ce:	4630      	mov	r0, r6
900060d0:	f004 fc98 	bl	9000aa04 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
900060d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
900060d8:	f106 010c 	add.w	r1, r6, #12
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
900060dc:	781a      	ldrb	r2, [r3, #0]
900060de:	f002 021f 	and.w	r2, r2, #31
900060e2:	7072      	strb	r2, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
900060e4:	781a      	ldrb	r2, [r3, #0]
900060e6:	0952      	lsrs	r2, r2, #5
900060e8:	7032      	strb	r2, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
900060ea:	f993 2001 	ldrsb.w	r2, [r3, #1]
900060ee:	2a00      	cmp	r2, #0
          inquiry->RemovableMedia = 1U;
900060f0:	bfbc      	itt	lt
900060f2:	2201      	movlt	r2, #1
900060f4:	70b2      	strblt	r2, [r6, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
900060f6:	689a      	ldr	r2, [r3, #8]
900060f8:	f8c6 2003 	str.w	r2, [r6, #3]
900060fc:	68da      	ldr	r2, [r3, #12]
900060fe:	f8c6 2007 	str.w	r2, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
90006102:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
90006106:	f103 0210 	add.w	r2, r3, #16
9000610a:	3320      	adds	r3, #32
9000610c:	f852 0b04 	ldr.w	r0, [r2], #4
90006110:	429a      	cmp	r2, r3
90006112:	f841 0b04 	str.w	r0, [r1], #4
90006116:	d1f9      	bne.n	9000610c <USBH_MSC_SCSI_Inquiry+0xa8>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
90006118:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
9000611c:	6a1b      	ldr	r3, [r3, #32]
9000611e:	f8c6 301d 	str.w	r3, [r6, #29]
90006122:	e7ac      	b.n	9000607e <USBH_MSC_SCSI_Inquiry+0x1a>

90006124 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
90006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006126:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
9000612a:	460f      	mov	r7, r1
9000612c:	4616      	mov	r6, r2
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000612e:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006130:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
90006134:	2d01      	cmp	r5, #1
90006136:	d004      	beq.n	90006142 <USBH_MSC_SCSI_RequestSense+0x1e>
90006138:	2d02      	cmp	r5, #2
9000613a:	d020      	beq.n	9000617e <USBH_MSC_SCSI_RequestSense+0x5a>
9000613c:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
9000613e:	4628      	mov	r0, r5
90006140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006142:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
90006144:	260e      	movs	r6, #14
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006146:	2210      	movs	r2, #16
90006148:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
9000614a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
9000614e:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
90006152:	65e6      	str	r6, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
90006154:	017f      	lsls	r7, r7, #5
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006156:	f004 fc55 	bl	9000aa04 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
9000615a:	f240 330a 	movw	r3, #778	; 0x30a
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
9000615e:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006162:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006166:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
90006168:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
9000616c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90006170:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006174:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90006178:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
9000617c:	e7df      	b.n	9000613e <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
9000617e:	f7ff fe33 	bl	90005de8 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
90006182:	4605      	mov	r5, r0
90006184:	2800      	cmp	r0, #0
90006186:	d1da      	bne.n	9000613e <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
90006188:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
9000618c:	789a      	ldrb	r2, [r3, #2]
9000618e:	f002 020f 	and.w	r2, r2, #15
90006192:	7032      	strb	r2, [r6, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
90006194:	7b1a      	ldrb	r2, [r3, #12]
90006196:	7072      	strb	r2, [r6, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
90006198:	7b5b      	ldrb	r3, [r3, #13]
9000619a:	70b3      	strb	r3, [r6, #2]
9000619c:	e7cf      	b.n	9000613e <USBH_MSC_SCSI_RequestSense+0x1a>

9000619e <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
9000619e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900061a2:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900061a4:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
900061a8:	4615      	mov	r5, r2
900061aa:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900061ac:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
900061ae:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
900061b2:	2e01      	cmp	r6, #1
900061b4:	d005      	beq.n	900061c2 <USBH_MSC_SCSI_Write+0x24>
900061b6:	2e02      	cmp	r6, #2
900061b8:	d02c      	beq.n	90006214 <USBH_MSC_SCSI_Write+0x76>
900061ba:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
900061bc:	4630      	mov	r0, r6
900061be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
900061c2:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
900061c6:	2100      	movs	r1, #0
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
900061c8:	2210      	movs	r2, #16
900061ca:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
900061ce:	437b      	muls	r3, r7
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
900061d0:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
900061d2:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
900061d6:	65e3      	str	r3, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
900061d8:	f004 fc14 	bl	9000aa04 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900061dc:	f642 230a 	movw	r3, #10762	; 0x2a0a
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
900061e0:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900061e4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
900061e8:	f3c5 6307 	ubfx	r3, r5, #24, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
900061ec:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
900061f0:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
900061f4:	f3c5 4307 	ubfx	r3, r5, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
900061f8:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
900061fc:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006200:	f3c5 2307 	ubfx	r3, r5, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
90006204:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006208:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
9000620c:	2302      	movs	r3, #2
9000620e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
90006212:	e7d3      	b.n	900061bc <USBH_MSC_SCSI_Write+0x1e>
}
90006214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
90006218:	f7ff bde6 	b.w	90005de8 <USBH_MSC_BOT_Process>

9000621c <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
9000621c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006220:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006222:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006226:	4615      	mov	r5, r2
90006228:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000622a:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
9000622c:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
90006230:	2e01      	cmp	r6, #1
90006232:	d005      	beq.n	90006240 <USBH_MSC_SCSI_Read+0x24>
90006234:	2e02      	cmp	r6, #2
90006236:	d02d      	beq.n	90006294 <USBH_MSC_SCSI_Read+0x78>
90006238:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
9000623a:	4630      	mov	r0, r6
9000623c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006240:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006244:	2210      	movs	r2, #16
90006246:	2100      	movs	r1, #0
90006248:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
9000624c:	437b      	muls	r3, r7
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
9000624e:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006250:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006252:	2380      	movs	r3, #128	; 0x80
90006254:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006258:	f004 fbd4 	bl	9000aa04 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
9000625c:	f642 030a 	movw	r3, #10250	; 0x280a
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
90006260:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006264:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006268:	f3c5 6307 	ubfx	r3, r5, #24, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
9000626c:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006270:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
90006274:	f3c5 4307 	ubfx	r3, r5, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006278:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
9000627c:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006280:	f3c5 2307 	ubfx	r3, r5, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
90006284:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006288:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
9000628c:	2302      	movs	r3, #2
9000628e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
90006292:	e7d2      	b.n	9000623a <USBH_MSC_SCSI_Read+0x1e>
}
90006294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
90006298:	f7ff bda6 	b.w	90005de8 <USBH_MSC_BOT_Process>

9000629c <DeInitStateMachine.isra.0>:
  * @brief  DeInitStateMachine
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
9000629c:	b510      	push	{r4, lr}
9000629e:	4604      	mov	r4, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
900062a0:	223c      	movs	r2, #60	; 0x3c
900062a2:	2100      	movs	r1, #0
900062a4:	f500 608e 	add.w	r0, r0, #1136	; 0x470
900062a8:	f004 fbac 	bl	9000aa04 <memset>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
900062ac:	f44f 7200 	mov.w	r2, #512	; 0x200
900062b0:	2100      	movs	r1, #0
900062b2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
900062b6:	f004 fba5 	bl	9000aa04 <memset>
  }

  phost->gState = HOST_IDLE;
900062ba:	2300      	movs	r3, #0
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
900062bc:	2201      	movs	r2, #1
  phost->gState = HOST_IDLE;
900062be:	7023      	strb	r3, [r4, #0]
  phost->EnumState = ENUM_IDLE;
900062c0:	7063      	strb	r3, [r4, #1]
  phost->Timer = 0U;
900062c2:	f8c4 34b0 	str.w	r3, [r4, #1200]	; 0x4b0

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
900062c6:	2340      	movs	r3, #64	; 0x40
  phost->RequestState = CMD_SEND;
900062c8:	70a2      	strb	r2, [r4, #2]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
900062ca:	71a3      	strb	r3, [r4, #6]
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
900062cc:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.state = CTRL_SETUP;
900062d0:	8322      	strh	r2, [r4, #24]
  phost->device.address = USBH_ADDRESS_DEFAULT;
900062d2:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
  phost->device.speed = USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
900062d6:	bd10      	pop	{r4, pc}

900062d8 <USBH_Init>:
{
900062d8:	b570      	push	{r4, r5, r6, lr}
900062da:	460e      	mov	r6, r1
  if (phost == NULL)
900062dc:	4604      	mov	r4, r0
900062de:	b950      	cbnz	r0, 900062f6 <USBH_Init+0x1e>
    USBH_ErrLog("Invalid Host handle");
900062e0:	4811      	ldr	r0, [pc, #68]	; (90006328 <USBH_Init+0x50>)
900062e2:	f004 fa21 	bl	9000a728 <iprintf>
900062e6:	4811      	ldr	r0, [pc, #68]	; (9000632c <USBH_Init+0x54>)
900062e8:	f004 fa1e 	bl	9000a728 <iprintf>
900062ec:	200a      	movs	r0, #10
900062ee:	f004 fa2d 	bl	9000a74c <putchar>
    return USBH_FAIL;
900062f2:	2002      	movs	r0, #2
}
900062f4:	bd70      	pop	{r4, r5, r6, pc}
  phost->pActiveClass = NULL;
900062f6:	2500      	movs	r5, #0
  phost->id = id;
900062f8:	f880 24b8 	strb.w	r2, [r0, #1208]	; 0x4b8
  phost->pActiveClass = NULL;
900062fc:	f8c0 5468 	str.w	r5, [r0, #1128]	; 0x468
  phost->ClassNumber = 0U;
90006300:	f8c0 546c 	str.w	r5, [r0, #1132]	; 0x46c
  DeInitStateMachine(phost);
90006304:	f7ff ffca 	bl	9000629c <DeInitStateMachine.isra.0>
  phost->device.is_connected = 0U;
90006308:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
9000630c:	f884 5423 	strb.w	r5, [r4, #1059]	; 0x423
  phost->device.is_disconnected = 0U;
90006310:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
90006314:	f884 5422 	strb.w	r5, [r4, #1058]	; 0x422
  if (pUsrFunc != NULL)
90006318:	b10e      	cbz	r6, 9000631e <USBH_Init+0x46>
    phost->pUser = pUsrFunc;
9000631a:	f8c4 64c0 	str.w	r6, [r4, #1216]	; 0x4c0
  USBH_LL_Init(phost);
9000631e:	4620      	mov	r0, r4
90006320:	f003 ff18 	bl	9000a154 <USBH_LL_Init>
  return USBH_OK;
90006324:	2000      	movs	r0, #0
90006326:	e7e5      	b.n	900062f4 <USBH_Init+0x1c>
90006328:	9000fc88 	.word	0x9000fc88
9000632c:	9000fc90 	.word	0x9000fc90

90006330 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
90006330:	b508      	push	{r3, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
90006332:	b1a1      	cbz	r1, 9000635e <USBH_RegisterClass+0x2e>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
90006334:	f8d0 346c 	ldr.w	r3, [r0, #1132]	; 0x46c
90006338:	b933      	cbnz	r3, 90006348 <USBH_RegisterClass+0x18>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
9000633a:	2201      	movs	r2, #1
9000633c:	f8c0 1464 	str.w	r1, [r0, #1124]	; 0x464
90006340:	f8c0 246c 	str.w	r2, [r0, #1132]	; 0x46c
      status = USBH_OK;
90006344:	4618      	mov	r0, r3
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
90006346:	bd08      	pop	{r3, pc}
      USBH_ErrLog("Max Class Number reached");
90006348:	4807      	ldr	r0, [pc, #28]	; (90006368 <USBH_RegisterClass+0x38>)
9000634a:	f004 f9ed 	bl	9000a728 <iprintf>
9000634e:	4807      	ldr	r0, [pc, #28]	; (9000636c <USBH_RegisterClass+0x3c>)
    USBH_ErrLog("Invalid Class handle");
90006350:	f004 f9ea 	bl	9000a728 <iprintf>
90006354:	200a      	movs	r0, #10
90006356:	f004 f9f9 	bl	9000a74c <putchar>
    status = USBH_FAIL;
9000635a:	2002      	movs	r0, #2
9000635c:	e7f3      	b.n	90006346 <USBH_RegisterClass+0x16>
    USBH_ErrLog("Invalid Class handle");
9000635e:	4802      	ldr	r0, [pc, #8]	; (90006368 <USBH_RegisterClass+0x38>)
90006360:	f004 f9e2 	bl	9000a728 <iprintf>
90006364:	4802      	ldr	r0, [pc, #8]	; (90006370 <USBH_RegisterClass+0x40>)
90006366:	e7f3      	b.n	90006350 <USBH_RegisterClass+0x20>
90006368:	9000fc88 	.word	0x9000fc88
9000636c:	9000fca4 	.word	0x9000fca4
90006370:	9000fcbd 	.word	0x9000fcbd

90006374 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
90006374:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
90006376:	f890 343c 	ldrb.w	r3, [r0, #1084]	; 0x43c
{
9000637a:	4604      	mov	r4, r0
9000637c:	460d      	mov	r5, r1
  if (interface < phost->device.CfgDesc.bNumInterfaces)
9000637e:	428b      	cmp	r3, r1
90006380:	d924      	bls.n	900063cc <USBH_SelectInterface+0x58>
  {
    phost->device.current_interface = interface;
90006382:	f880 1424 	strb.w	r1, [r0, #1060]	; 0x424
    USBH_UsrLog("Switching to Interface (#%d)", interface);
90006386:	4817      	ldr	r0, [pc, #92]	; (900063e4 <USBH_SelectInterface+0x70>)
90006388:	f004 f9ce 	bl	9000a728 <iprintf>
9000638c:	200a      	movs	r0, #10
9000638e:	f004 f9dd 	bl	9000a74c <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
90006392:	2322      	movs	r3, #34	; 0x22
90006394:	4814      	ldr	r0, [pc, #80]	; (900063e8 <USBH_SelectInterface+0x74>)
90006396:	fb03 4405 	mla	r4, r3, r5, r4
9000639a:	f894 1447 	ldrb.w	r1, [r4, #1095]	; 0x447
9000639e:	f004 f9c3 	bl	9000a728 <iprintf>
900063a2:	200a      	movs	r0, #10
900063a4:	f004 f9d2 	bl	9000a74c <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
900063a8:	f894 1448 	ldrb.w	r1, [r4, #1096]	; 0x448
900063ac:	480f      	ldr	r0, [pc, #60]	; (900063ec <USBH_SelectInterface+0x78>)
900063ae:	f004 f9bb 	bl	9000a728 <iprintf>
900063b2:	200a      	movs	r0, #10
900063b4:	f004 f9ca 	bl	9000a74c <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
900063b8:	f894 1449 	ldrb.w	r1, [r4, #1097]	; 0x449
900063bc:	480c      	ldr	r0, [pc, #48]	; (900063f0 <USBH_SelectInterface+0x7c>)
900063be:	f004 f9b3 	bl	9000a728 <iprintf>
900063c2:	200a      	movs	r0, #10
900063c4:	f004 f9c2 	bl	9000a74c <putchar>
  USBH_StatusTypeDef status = USBH_OK;
900063c8:	2000      	movs	r0, #0
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
  }

  return status;
}
900063ca:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ErrLog("Cannot Select This Interface.");
900063cc:	4809      	ldr	r0, [pc, #36]	; (900063f4 <USBH_SelectInterface+0x80>)
900063ce:	f004 f9ab 	bl	9000a728 <iprintf>
900063d2:	4809      	ldr	r0, [pc, #36]	; (900063f8 <USBH_SelectInterface+0x84>)
900063d4:	f004 f9a8 	bl	9000a728 <iprintf>
900063d8:	200a      	movs	r0, #10
900063da:	f004 f9b7 	bl	9000a74c <putchar>
    status = USBH_FAIL;
900063de:	2002      	movs	r0, #2
900063e0:	e7f3      	b.n	900063ca <USBH_SelectInterface+0x56>
900063e2:	bf00      	nop
900063e4:	9000fcd2 	.word	0x9000fcd2
900063e8:	9000fcef 	.word	0x9000fcef
900063ec:	9000fcfe 	.word	0x9000fcfe
900063f0:	9000fd0d 	.word	0x9000fd0d
900063f4:	9000fc88 	.word	0x9000fc88
900063f8:	9000fd1c 	.word	0x9000fd1c

900063fc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
900063fc:	b510      	push	{r4, lr}
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
900063fe:	f890 4447 	ldrb.w	r4, [r0, #1095]	; 0x447
90006402:	428c      	cmp	r4, r1
90006404:	d001      	beq.n	9000640a <USBH_FindInterface+0xe>
90006406:	29ff      	cmp	r1, #255	; 0xff
90006408:	d110      	bne.n	9000642c <USBH_FindInterface+0x30>
9000640a:	f890 1448 	ldrb.w	r1, [r0, #1096]	; 0x448
9000640e:	4291      	cmp	r1, r2
90006410:	d001      	beq.n	90006416 <USBH_FindInterface+0x1a>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
90006412:	2aff      	cmp	r2, #255	; 0xff
90006414:	d10a      	bne.n	9000642c <USBH_FindInterface+0x30>
90006416:	f890 2449 	ldrb.w	r2, [r0, #1097]	; 0x449
9000641a:	429a      	cmp	r2, r3
9000641c:	d008      	beq.n	90006430 <USBH_FindInterface+0x34>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
9000641e:	f1b3 00ff 	subs.w	r0, r3, #255	; 0xff
90006422:	bf18      	it	ne
90006424:	f04f 30ff 	movne.w	r0, #4294967295
90006428:	b2c0      	uxtb	r0, r0
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
}
9000642a:	bd10      	pop	{r4, pc}
  return 0xFFU;
9000642c:	20ff      	movs	r0, #255	; 0xff
9000642e:	e7fc      	b.n	9000642a <USBH_FindInterface+0x2e>
90006430:	2000      	movs	r0, #0
90006432:	e7fa      	b.n	9000642a <USBH_FindInterface+0x2e>

90006434 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
90006434:	b510      	push	{r4, lr}
90006436:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
90006438:	f003 feb0 	bl	9000a19c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
9000643c:	2101      	movs	r1, #1
9000643e:	4620      	mov	r0, r4
90006440:	f003 fefe 	bl	9000a240 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
90006444:	2000      	movs	r0, #0
90006446:	bd10      	pop	{r4, pc}

90006448 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
90006448:	b570      	push	{r4, r5, r6, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
9000644a:	2302      	movs	r3, #2
{
9000644c:	b086      	sub	sp, #24
9000644e:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
90006450:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
90006454:	f890 3421 	ldrb.w	r3, [r0, #1057]	; 0x421
90006458:	2b01      	cmp	r3, #1
9000645a:	d101      	bne.n	90006460 <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
9000645c:	2303      	movs	r3, #3
9000645e:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
90006460:	7823      	ldrb	r3, [r4, #0]
90006462:	2b0b      	cmp	r3, #11
90006464:	d823      	bhi.n	900064ae <USBH_Process+0x66>
90006466:	e8df f013 	tbh	[pc, r3, lsl #1]
9000646a:	000c      	.short	0x000c
9000646c:	00530025 	.word	0x00530025
90006470:	00220295 	.word	0x00220295
90006474:	026c0089 	.word	0x026c0089
90006478:	0217020e 	.word	0x0217020e
9000647c:	02380225 	.word	0x02380225
90006480:	028c      	.short	0x028c
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
90006482:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
90006486:	b193      	cbz	r3, 900064ae <USBH_Process+0x66>
      {
        USBH_UsrLog("USB Device Connected");
90006488:	48b6      	ldr	r0, [pc, #728]	; (90006764 <USBH_Process+0x31c>)
9000648a:	f004 f94d 	bl	9000a728 <iprintf>
9000648e:	200a      	movs	r0, #10
90006490:	f004 f95c 	bl	9000a74c <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
90006494:	2301      	movs	r3, #1
        USBH_Delay(200U);
90006496:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
90006498:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
9000649a:	f003 ff01 	bl	9000a2a0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
9000649e:	4620      	mov	r0, r4
900064a0:	f003 fe94 	bl	9000a1cc <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
900064a4:	2300      	movs	r3, #0
900064a6:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
        phost->Timeout = 0U;
900064aa:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
900064ae:	2000      	movs	r0, #0
900064b0:	b006      	add	sp, #24
900064b2:	bd70      	pop	{r4, r5, r6, pc}
      if (phost->device.PortEnabled == 1U)
900064b4:	f894 3423 	ldrb.w	r3, [r4, #1059]	; 0x423
900064b8:	2b01      	cmp	r3, #1
900064ba:	d10b      	bne.n	900064d4 <USBH_Process+0x8c>
        USBH_UsrLog("USB Device Reset Completed");
900064bc:	48aa      	ldr	r0, [pc, #680]	; (90006768 <USBH_Process+0x320>)
900064be:	f004 f933 	bl	9000a728 <iprintf>
900064c2:	200a      	movs	r0, #10
900064c4:	f004 f942 	bl	9000a74c <putchar>
        phost->device.RstCnt = 0U;
900064c8:	2300      	movs	r3, #0
900064ca:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
        phost->gState = HOST_DEV_ATTACHED;
900064ce:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
900064d0:	7023      	strb	r3, [r4, #0]
900064d2:	e7ec      	b.n	900064ae <USBH_Process+0x66>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
900064d4:	f8d4 34b4 	ldr.w	r3, [r4, #1204]	; 0x4b4
900064d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
900064dc:	d911      	bls.n	90006502 <USBH_Process+0xba>
          phost->device.RstCnt++;
900064de:	f894 341f 	ldrb.w	r3, [r4, #1055]	; 0x41f
900064e2:	3301      	adds	r3, #1
900064e4:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
900064e6:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
900064e8:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
          if (phost->device.RstCnt > 3U)
900064ec:	d907      	bls.n	900064fe <USBH_Process+0xb6>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
900064ee:	489f      	ldr	r0, [pc, #636]	; (9000676c <USBH_Process+0x324>)
900064f0:	f004 f91a 	bl	9000a728 <iprintf>
900064f4:	200a      	movs	r0, #10
900064f6:	f004 f929 	bl	9000a74c <putchar>
            phost->gState = HOST_ABORT_STATE;
900064fa:	230d      	movs	r3, #13
900064fc:	e7e8      	b.n	900064d0 <USBH_Process+0x88>
            phost->gState = HOST_IDLE;
900064fe:	2300      	movs	r3, #0
90006500:	e7e6      	b.n	900064d0 <USBH_Process+0x88>
          phost->Timeout += 10U;
90006502:	330a      	adds	r3, #10
          USBH_Delay(10U);
90006504:	200a      	movs	r0, #10
          phost->Timeout += 10U;
90006506:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
          USBH_Delay(10U);
9000650a:	f003 fec9 	bl	9000a2a0 <USBH_Delay>
9000650e:	e7ce      	b.n	900064ae <USBH_Process+0x66>
      if (phost->pUser != NULL)
90006510:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
90006514:	b113      	cbz	r3, 9000651c <USBH_Process+0xd4>
        phost->pUser(phost, HOST_USER_CONNECTION);
90006516:	2104      	movs	r1, #4
90006518:	4620      	mov	r0, r4
9000651a:	4798      	blx	r3
      USBH_Delay(100U);
9000651c:	2064      	movs	r0, #100	; 0x64
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
9000651e:	2500      	movs	r5, #0
      USBH_Delay(100U);
90006520:	f003 febe 	bl	9000a2a0 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
90006524:	4620      	mov	r0, r4
90006526:	f003 fe47 	bl	9000a1b8 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
9000652a:	2305      	movs	r3, #5
      phost->device.speed = USBH_LL_GetSpeed(phost);
9000652c:	f884 041d 	strb.w	r0, [r4, #1053]	; 0x41d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90006530:	2100      	movs	r1, #0
      phost->gState = HOST_ENUMERATION;
90006532:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90006534:	4620      	mov	r0, r4
90006536:	f000 fd30 	bl	90006f9a <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
9000653a:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
9000653c:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
9000653e:	4620      	mov	r0, r4
90006540:	f000 fd2b 	bl	90006f9a <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90006544:	79a3      	ldrb	r3, [r4, #6]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
90006546:	4601      	mov	r1, r0
90006548:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
9000654a:	9302      	str	r3, [sp, #8]
9000654c:	2280      	movs	r2, #128	; 0x80
9000654e:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006552:	4620      	mov	r0, r4
90006554:	9501      	str	r5, [sp, #4]
90006556:	9300      	str	r3, [sp, #0]
90006558:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
9000655c:	f000 fd09 	bl	90006f72 <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
90006560:	79a3      	ldrb	r3, [r4, #6]
90006562:	462a      	mov	r2, r5
90006564:	7961      	ldrb	r1, [r4, #5]
90006566:	4620      	mov	r0, r4
90006568:	e9cd 5301 	strd	r5, r3, [sp, #4]
9000656c:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006570:	9300      	str	r3, [sp, #0]
90006572:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006576:	f000 fcfc 	bl	90006f72 <USBH_OpenPipe>
      break;
9000657a:	e798      	b.n	900064ae <USBH_Process+0x66>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
9000657c:	7865      	ldrb	r5, [r4, #1]
9000657e:	2d07      	cmp	r5, #7
90006580:	d830      	bhi.n	900065e4 <USBH_Process+0x19c>
90006582:	e8df f015 	tbh	[pc, r5, lsl #1]
90006586:	0008      	.short	0x0008
90006588:	00b10055 	.word	0x00b10055
9000658c:	00e600df 	.word	0x00e600df
90006590:	01440129 	.word	0x01440129
90006594:	015f      	.short	0x015f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
90006596:	2108      	movs	r1, #8
90006598:	4620      	mov	r0, r4
9000659a:	f000 fb65 	bl	90006c68 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
9000659e:	4606      	mov	r6, r0
900065a0:	b9f0      	cbnz	r0, 900065e0 <USBH_Process+0x198>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
900065a2:	f894 342d 	ldrb.w	r3, [r4, #1069]	; 0x42d

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
900065a6:	2501      	movs	r5, #1
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
900065a8:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
900065aa:	7065      	strb	r5, [r4, #1]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
900065ac:	7921      	ldrb	r1, [r4, #4]
900065ae:	2280      	movs	r2, #128	; 0x80
900065b0:	4620      	mov	r0, r4
900065b2:	e9cd 6301 	strd	r6, r3, [sp, #4]
900065b6:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
900065ba:	9300      	str	r3, [sp, #0]
900065bc:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
900065c0:	f000 fcd7 	bl	90006f72 <USBH_OpenPipe>
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
900065c4:	79a3      	ldrb	r3, [r4, #6]
900065c6:	4632      	mov	r2, r6
900065c8:	7961      	ldrb	r1, [r4, #5]
900065ca:	4620      	mov	r0, r4
900065cc:	e9cd 6301 	strd	r6, r3, [sp, #4]
900065d0:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
900065d4:	9300      	str	r3, [sp, #0]
900065d6:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
900065da:	f000 fcca 	bl	90006f72 <USBH_OpenPipe>
900065de:	e03e      	b.n	9000665e <USBH_Process+0x216>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
900065e0:	2803      	cmp	r0, #3
900065e2:	d001      	beq.n	900065e8 <USBH_Process+0x1a0>
  switch (phost->EnumState)
900065e4:	2501      	movs	r5, #1
900065e6:	e03a      	b.n	9000665e <USBH_Process+0x216>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
900065e8:	4861      	ldr	r0, [pc, #388]	; (90006770 <USBH_Process+0x328>)
900065ea:	f004 f89d 	bl	9000a728 <iprintf>
900065ee:	4861      	ldr	r0, [pc, #388]	; (90006774 <USBH_Process+0x32c>)
900065f0:	f004 f89a 	bl	9000a728 <iprintf>
900065f4:	200a      	movs	r0, #10
900065f6:	f004 f8a9 	bl	9000a74c <putchar>
        phost->device.EnumCnt++;
900065fa:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
900065fe:	3301      	adds	r3, #1
90006600:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
90006602:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
90006604:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
90006608:	d907      	bls.n	9000661a <USBH_Process+0x1d2>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
9000660a:	485b      	ldr	r0, [pc, #364]	; (90006778 <USBH_Process+0x330>)
9000660c:	f004 f88c 	bl	9000a728 <iprintf>
90006610:	200a      	movs	r0, #10
90006612:	f004 f89b 	bl	9000a74c <putchar>
          phost->gState = HOST_ABORT_STATE;
90006616:	230d      	movs	r3, #13
90006618:	e008      	b.n	9000662c <USBH_Process+0x1e4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
9000661a:	7961      	ldrb	r1, [r4, #5]
9000661c:	4620      	mov	r0, r4
9000661e:	f000 fcd4 	bl	90006fca <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
90006622:	7921      	ldrb	r1, [r4, #4]
90006624:	4620      	mov	r0, r4
90006626:	f000 fcd0 	bl	90006fca <USBH_FreePipe>
          phost->gState = HOST_IDLE;
9000662a:	2300      	movs	r3, #0
          USBH_FreePipe(phost, phost->Control.pipe_out);
          USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
9000662c:	7023      	strb	r3, [r4, #0]
9000662e:	e7d9      	b.n	900065e4 <USBH_Process+0x19c>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
90006630:	2112      	movs	r1, #18
90006632:	4620      	mov	r0, r4
90006634:	f000 fb18 	bl	90006c68 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
90006638:	bb78      	cbnz	r0, 9000669a <USBH_Process+0x252>
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
9000663a:	f8b4 1430 	ldrh.w	r1, [r4, #1072]	; 0x430
9000663e:	484f      	ldr	r0, [pc, #316]	; (9000677c <USBH_Process+0x334>)
90006640:	f004 f872 	bl	9000a728 <iprintf>
90006644:	200a      	movs	r0, #10
90006646:	f004 f881 	bl	9000a74c <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
9000664a:	f8b4 142e 	ldrh.w	r1, [r4, #1070]	; 0x42e
9000664e:	484c      	ldr	r0, [pc, #304]	; (90006780 <USBH_Process+0x338>)
90006650:	f004 f86a 	bl	9000a728 <iprintf>
90006654:	200a      	movs	r0, #10
90006656:	f004 f879 	bl	9000a74c <putchar>
        phost->EnumState = ENUM_SET_ADDR;
9000665a:	2302      	movs	r3, #2
9000665c:	7063      	strb	r3, [r4, #1]
      status = USBH_HandleEnum(phost);
9000665e:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
90006662:	f89d 3017 	ldrb.w	r3, [sp, #23]
90006666:	f003 05ff 	and.w	r5, r3, #255	; 0xff
9000666a:	2b00      	cmp	r3, #0
9000666c:	f47f af1f 	bne.w	900064ae <USBH_Process+0x66>
        USBH_UsrLog("Enumeration done.");
90006670:	4844      	ldr	r0, [pc, #272]	; (90006784 <USBH_Process+0x33c>)
90006672:	f004 f859 	bl	9000a728 <iprintf>
90006676:	200a      	movs	r0, #10
90006678:	f004 f868 	bl	9000a74c <putchar>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
9000667c:	f894 3437 	ldrb.w	r3, [r4, #1079]	; 0x437
        phost->device.current_interface = 0U;
90006680:	f884 5424 	strb.w	r5, [r4, #1060]	; 0x424
        if (phost->device.DevDesc.bNumConfigurations == 1U)
90006684:	2b01      	cmp	r3, #1
90006686:	f040 80fc 	bne.w	90006882 <USBH_Process+0x43a>
          USBH_UsrLog("This device has only 1 configuration.");
9000668a:	483f      	ldr	r0, [pc, #252]	; (90006788 <USBH_Process+0x340>)
9000668c:	f004 f84c 	bl	9000a728 <iprintf>
90006690:	200a      	movs	r0, #10
90006692:	f004 f85b 	bl	9000a74c <putchar>
        phost->gState = HOST_SET_CONFIGURATION;
90006696:	2308      	movs	r3, #8
90006698:	e71a      	b.n	900064d0 <USBH_Process+0x88>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
9000669a:	2803      	cmp	r0, #3
9000669c:	d1a2      	bne.n	900065e4 <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
9000669e:	4834      	ldr	r0, [pc, #208]	; (90006770 <USBH_Process+0x328>)
900066a0:	f004 f842 	bl	9000a728 <iprintf>
900066a4:	4839      	ldr	r0, [pc, #228]	; (9000678c <USBH_Process+0x344>)
900066a6:	f004 f83f 	bl	9000a728 <iprintf>
900066aa:	200a      	movs	r0, #10
900066ac:	f004 f84e 	bl	9000a74c <putchar>
        phost->device.EnumCnt++;
900066b0:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
900066b4:	3301      	adds	r3, #1
900066b6:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
900066b8:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
900066ba:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
900066be:	d908      	bls.n	900066d2 <USBH_Process+0x28a>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
900066c0:	482d      	ldr	r0, [pc, #180]	; (90006778 <USBH_Process+0x330>)
900066c2:	f004 f831 	bl	9000a728 <iprintf>
900066c6:	200a      	movs	r0, #10
900066c8:	f004 f840 	bl	9000a74c <putchar>
          phost->gState = HOST_ABORT_STATE;
900066cc:	230d      	movs	r3, #13
          phost->gState = HOST_IDLE;
900066ce:	7023      	strb	r3, [r4, #0]
900066d0:	e7c5      	b.n	9000665e <USBH_Process+0x216>
          USBH_FreePipe(phost, phost->Control.pipe_out);
900066d2:	7961      	ldrb	r1, [r4, #5]
900066d4:	4620      	mov	r0, r4
900066d6:	f000 fc78 	bl	90006fca <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
900066da:	7921      	ldrb	r1, [r4, #4]
900066dc:	4620      	mov	r0, r4
900066de:	f000 fc74 	bl	90006fca <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
900066e2:	2300      	movs	r3, #0
900066e4:	7063      	strb	r3, [r4, #1]
900066e6:	e7f2      	b.n	900066ce <USBH_Process+0x286>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
900066e8:	2101      	movs	r1, #1
900066ea:	4620      	mov	r0, r4
900066ec:	f000 fbaf 	bl	90006e4e <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
900066f0:	4606      	mov	r6, r0
900066f2:	b980      	cbnz	r0, 90006716 <USBH_Process+0x2ce>
        phost->device.address = USBH_DEVICE_ADDRESS;
900066f4:	2501      	movs	r5, #1
        USBH_Delay(2U);
900066f6:	2002      	movs	r0, #2
900066f8:	f003 fdd2 	bl	9000a2a0 <USBH_Delay>
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
900066fc:	4824      	ldr	r0, [pc, #144]	; (90006790 <USBH_Process+0x348>)
900066fe:	4629      	mov	r1, r5
        phost->device.address = USBH_DEVICE_ADDRESS;
90006700:	f884 541c 	strb.w	r5, [r4, #1052]	; 0x41c
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
90006704:	f004 f810 	bl	9000a728 <iprintf>
90006708:	200a      	movs	r0, #10
9000670a:	f004 f81f 	bl	9000a74c <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
9000670e:	2303      	movs	r3, #3
90006710:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
90006712:	79a3      	ldrb	r3, [r4, #6]
90006714:	e74a      	b.n	900065ac <USBH_Process+0x164>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90006716:	2803      	cmp	r0, #3
90006718:	f47f af64 	bne.w	900065e4 <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Device Set Address request failed");
9000671c:	4814      	ldr	r0, [pc, #80]	; (90006770 <USBH_Process+0x328>)
9000671e:	f004 f803 	bl	9000a728 <iprintf>
90006722:	481c      	ldr	r0, [pc, #112]	; (90006794 <USBH_Process+0x34c>)
90006724:	f004 f800 	bl	9000a728 <iprintf>
90006728:	200a      	movs	r0, #10
9000672a:	f004 f80f 	bl	9000a74c <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
9000672e:	4812      	ldr	r0, [pc, #72]	; (90006778 <USBH_Process+0x330>)
90006730:	f003 fffa 	bl	9000a728 <iprintf>
90006734:	200a      	movs	r0, #10
90006736:	f004 f809 	bl	9000a74c <putchar>
        phost->gState = HOST_ABORT_STATE;
9000673a:	230d      	movs	r3, #13
9000673c:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
9000673e:	2300      	movs	r3, #0
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
90006740:	7063      	strb	r3, [r4, #1]
90006742:	e74f      	b.n	900065e4 <USBH_Process+0x19c>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
90006744:	2109      	movs	r1, #9
90006746:	4620      	mov	r0, r4
90006748:	f000 fad6 	bl	90006cf8 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
9000674c:	bb20      	cbnz	r0, 90006798 <USBH_Process+0x350>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
9000674e:	2304      	movs	r3, #4
90006750:	e7f6      	b.n	90006740 <USBH_Process+0x2f8>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
90006752:	f8b4 143a 	ldrh.w	r1, [r4, #1082]	; 0x43a
90006756:	4620      	mov	r0, r4
90006758:	f000 face 	bl	90006cf8 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
9000675c:	b9e0      	cbnz	r0, 90006798 <USBH_Process+0x350>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
9000675e:	2305      	movs	r3, #5
90006760:	e7ee      	b.n	90006740 <USBH_Process+0x2f8>
90006762:	bf00      	nop
90006764:	9000fd3a 	.word	0x9000fd3a
90006768:	9000fd4f 	.word	0x9000fd4f
9000676c:	9000fd6a 	.word	0x9000fd6a
90006770:	9000fc88 	.word	0x9000fc88
90006774:	9000fd96 	.word	0x9000fd96
90006778:	9000fdca 	.word	0x9000fdca
9000677c:	9000fe09 	.word	0x9000fe09
90006780:	9000fe12 	.word	0x9000fe12
90006784:	9000ff39 	.word	0x9000ff39
90006788:	9000ff4b 	.word	0x9000ff4b
9000678c:	9000fe1b 	.word	0x9000fe1b
90006790:	9000fe54 	.word	0x9000fe54
90006794:	9000fe6c 	.word	0x9000fe6c
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90006798:	2803      	cmp	r0, #3
9000679a:	f47f af23 	bne.w	900065e4 <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
9000679e:	4892      	ldr	r0, [pc, #584]	; (900069e8 <USBH_Process+0x5a0>)
900067a0:	f003 ffc2 	bl	9000a728 <iprintf>
900067a4:	4891      	ldr	r0, [pc, #580]	; (900069ec <USBH_Process+0x5a4>)
900067a6:	f003 ffbf 	bl	9000a728 <iprintf>
900067aa:	200a      	movs	r0, #10
900067ac:	f003 ffce 	bl	9000a74c <putchar>
        phost->device.EnumCnt++;
900067b0:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
900067b4:	3301      	adds	r3, #1
900067b6:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
900067b8:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
900067ba:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
900067be:	f63f af24 	bhi.w	9000660a <USBH_Process+0x1c2>
          USBH_FreePipe(phost, phost->Control.pipe_out);
900067c2:	7961      	ldrb	r1, [r4, #5]
900067c4:	4620      	mov	r0, r4
900067c6:	f000 fc00 	bl	90006fca <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
900067ca:	7921      	ldrb	r1, [r4, #4]
900067cc:	4620      	mov	r0, r4
900067ce:	f000 fbfc 	bl	90006fca <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
900067d2:	2300      	movs	r3, #0
900067d4:	7063      	strb	r3, [r4, #1]
900067d6:	e729      	b.n	9000662c <USBH_Process+0x1e4>
      if (phost->device.DevDesc.iManufacturer != 0U)
900067d8:	f894 1434 	ldrb.w	r1, [r4, #1076]	; 0x434
900067dc:	b199      	cbz	r1, 90006806 <USBH_Process+0x3be>
                                        phost->device.Data, 0xFFU);
900067de:	f504 7507 	add.w	r5, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
900067e2:	23ff      	movs	r3, #255	; 0xff
900067e4:	4620      	mov	r0, r4
900067e6:	462a      	mov	r2, r5
900067e8:	f000 fb0a 	bl	90006e00 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
900067ec:	b940      	cbnz	r0, 90006800 <USBH_Process+0x3b8>
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
900067ee:	4629      	mov	r1, r5
900067f0:	487f      	ldr	r0, [pc, #508]	; (900069f0 <USBH_Process+0x5a8>)
900067f2:	f003 ff99 	bl	9000a728 <iprintf>
900067f6:	200a      	movs	r0, #10
900067f8:	f003 ffa8 	bl	9000a74c <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
900067fc:	2306      	movs	r3, #6
900067fe:	e79f      	b.n	90006740 <USBH_Process+0x2f8>
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
90006800:	2803      	cmp	r0, #3
90006802:	f47f aeef 	bne.w	900065e4 <USBH_Process+0x19c>
        {
          USBH_UsrLog("Manufacturer : N/A");
90006806:	487b      	ldr	r0, [pc, #492]	; (900069f4 <USBH_Process+0x5ac>)
90006808:	f003 ff8e 	bl	9000a728 <iprintf>
9000680c:	e7f3      	b.n	900067f6 <USBH_Process+0x3ae>
#endif
      }
      break;

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
9000680e:	f894 1435 	ldrb.w	r1, [r4, #1077]	; 0x435
90006812:	b199      	cbz	r1, 9000683c <USBH_Process+0x3f4>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
                                        phost->device.Data, 0xFFU);
90006814:	f504 7507 	add.w	r5, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
90006818:	23ff      	movs	r3, #255	; 0xff
9000681a:	4620      	mov	r0, r4
9000681c:	462a      	mov	r2, r5
9000681e:	f000 faef 	bl	90006e00 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
90006822:	b940      	cbnz	r0, 90006836 <USBH_Process+0x3ee>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
90006824:	4629      	mov	r1, r5
90006826:	4874      	ldr	r0, [pc, #464]	; (900069f8 <USBH_Process+0x5b0>)
90006828:	f003 ff7e 	bl	9000a728 <iprintf>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
        {
          USBH_UsrLog("Product : N/A");
9000682c:	200a      	movs	r0, #10
9000682e:	f003 ff8d 	bl	9000a74c <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
90006832:	2307      	movs	r3, #7
90006834:	e784      	b.n	90006740 <USBH_Process+0x2f8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
90006836:	2803      	cmp	r0, #3
90006838:	f47f aed4 	bne.w	900065e4 <USBH_Process+0x19c>
          USBH_UsrLog("Product : N/A");
9000683c:	486f      	ldr	r0, [pc, #444]	; (900069fc <USBH_Process+0x5b4>)
9000683e:	f003 ff73 	bl	9000a728 <iprintf>
90006842:	e7f3      	b.n	9000682c <USBH_Process+0x3e4>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
90006844:	f894 1436 	ldrb.w	r1, [r4, #1078]	; 0x436
90006848:	b199      	cbz	r1, 90006872 <USBH_Process+0x42a>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
                                        phost->device.Data, 0xFFU);
9000684a:	f504 7607 	add.w	r6, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
9000684e:	23ff      	movs	r3, #255	; 0xff
90006850:	4620      	mov	r0, r4
90006852:	4632      	mov	r2, r6
90006854:	f000 fad4 	bl	90006e00 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
90006858:	4605      	mov	r5, r0
9000685a:	b938      	cbnz	r0, 9000686c <USBH_Process+0x424>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
9000685c:	4631      	mov	r1, r6
9000685e:	4868      	ldr	r0, [pc, #416]	; (90006a00 <USBH_Process+0x5b8>)
90006860:	f003 ff62 	bl	9000a728 <iprintf>
90006864:	200a      	movs	r0, #10
90006866:	f003 ff71 	bl	9000a74c <putchar>
          Status = USBH_OK;
9000686a:	e6f8      	b.n	9000665e <USBH_Process+0x216>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
9000686c:	2803      	cmp	r0, #3
9000686e:	f47f aeb9 	bne.w	900065e4 <USBH_Process+0x19c>
        {
          USBH_UsrLog("Serial Number : N/A");
90006872:	4864      	ldr	r0, [pc, #400]	; (90006a04 <USBH_Process+0x5bc>)
          Status = USBH_OK;
90006874:	2500      	movs	r5, #0
          USBH_UsrLog("Serial Number : N/A");
90006876:	f003 ff57 	bl	9000a728 <iprintf>
9000687a:	200a      	movs	r0, #10
9000687c:	f003 ff66 	bl	9000a74c <putchar>
          Status = USBH_OK;
90006880:	e6ed      	b.n	9000665e <USBH_Process+0x216>
          phost->gState = HOST_INPUT;
90006882:	2307      	movs	r3, #7
90006884:	e624      	b.n	900064d0 <USBH_Process+0x88>
      if (phost->pUser != NULL)
90006886:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
9000688a:	2b00      	cmp	r3, #0
9000688c:	f43f ae0f 	beq.w	900064ae <USBH_Process+0x66>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
90006890:	2101      	movs	r1, #1
90006892:	4620      	mov	r0, r4
90006894:	4798      	blx	r3
90006896:	e6fe      	b.n	90006696 <USBH_Process+0x24e>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
90006898:	f894 143d 	ldrb.w	r1, [r4, #1085]	; 0x43d
9000689c:	4620      	mov	r0, r4
9000689e:	f000 fae3 	bl	90006e68 <USBH_SetCfg>
900068a2:	2800      	cmp	r0, #0
900068a4:	f47f ae03 	bne.w	900064ae <USBH_Process+0x66>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
900068a8:	2309      	movs	r3, #9
        USBH_UsrLog("Default configuration set.");
900068aa:	4857      	ldr	r0, [pc, #348]	; (90006a08 <USBH_Process+0x5c0>)
        phost->gState = HOST_SET_WAKEUP_FEATURE;
900068ac:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
900068ae:	f003 ff3b 	bl	9000a728 <iprintf>
900068b2:	e042      	b.n	9000693a <USBH_Process+0x4f2>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
900068b4:	f894 343f 	ldrb.w	r3, [r4, #1087]	; 0x43f
900068b8:	069b      	lsls	r3, r3, #26
900068ba:	d50c      	bpl.n	900068d6 <USBH_Process+0x48e>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
900068bc:	2101      	movs	r1, #1
900068be:	4620      	mov	r0, r4
900068c0:	f000 fadf 	bl	90006e82 <USBH_SetFeature>
900068c4:	2800      	cmp	r0, #0
900068c6:	f47f adf2 	bne.w	900064ae <USBH_Process+0x66>
          USBH_UsrLog("Device remote wakeup enabled");
900068ca:	4850      	ldr	r0, [pc, #320]	; (90006a0c <USBH_Process+0x5c4>)
900068cc:	f003 ff2c 	bl	9000a728 <iprintf>
900068d0:	200a      	movs	r0, #10
900068d2:	f003 ff3b 	bl	9000a74c <putchar>
        phost->gState = HOST_CHECK_CLASS;
900068d6:	230a      	movs	r3, #10
900068d8:	e5fa      	b.n	900064d0 <USBH_Process+0x88>
      if (phost->ClassNumber == 0U)
900068da:	f8d4 346c 	ldr.w	r3, [r4, #1132]	; 0x46c
900068de:	b90b      	cbnz	r3, 900068e4 <USBH_Process+0x49c>
        USBH_UsrLog("No Class has been registered.");
900068e0:	484b      	ldr	r0, [pc, #300]	; (90006a10 <USBH_Process+0x5c8>)
900068e2:	e7e4      	b.n	900068ae <USBH_Process+0x466>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
900068e4:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
900068e8:	f894 2447 	ldrb.w	r2, [r4, #1095]	; 0x447
900068ec:	7919      	ldrb	r1, [r3, #4]
900068ee:	4291      	cmp	r1, r2
900068f0:	d006      	beq.n	90006900 <USBH_Process+0x4b8>
900068f2:	2300      	movs	r3, #0
          USBH_UsrLog("No registered class for this device.");
900068f4:	4847      	ldr	r0, [pc, #284]	; (90006a14 <USBH_Process+0x5cc>)
900068f6:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
          phost->gState = HOST_ABORT_STATE;
900068fa:	230d      	movs	r3, #13
900068fc:	7023      	strb	r3, [r4, #0]
          USBH_UsrLog("No registered class for this device.");
900068fe:	e7d6      	b.n	900068ae <USBH_Process+0x466>
90006900:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
          if (phost->pActiveClass->Init(phost) == USBH_OK)
90006904:	4620      	mov	r0, r4
90006906:	689b      	ldr	r3, [r3, #8]
90006908:	4798      	blx	r3
9000690a:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
9000690e:	b970      	cbnz	r0, 9000692e <USBH_Process+0x4e6>
            phost->gState = HOST_CLASS_REQUEST;
90006910:	2206      	movs	r2, #6
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
90006912:	4841      	ldr	r0, [pc, #260]	; (90006a18 <USBH_Process+0x5d0>)
            phost->gState = HOST_CLASS_REQUEST;
90006914:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
90006916:	6819      	ldr	r1, [r3, #0]
90006918:	f003 ff06 	bl	9000a728 <iprintf>
9000691c:	200a      	movs	r0, #10
9000691e:	f003 ff15 	bl	9000a74c <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
90006922:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
90006926:	2103      	movs	r1, #3
90006928:	4620      	mov	r0, r4
9000692a:	4798      	blx	r3
9000692c:	e5bf      	b.n	900064ae <USBH_Process+0x66>
            phost->gState = HOST_ABORT_STATE;
9000692e:	220d      	movs	r2, #13
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
90006930:	483a      	ldr	r0, [pc, #232]	; (90006a1c <USBH_Process+0x5d4>)
            phost->gState = HOST_ABORT_STATE;
90006932:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
90006934:	6819      	ldr	r1, [r3, #0]
90006936:	f003 fef7 	bl	9000a728 <iprintf>
        USBH_ErrLog("Invalid Class Driver.");
9000693a:	200a      	movs	r0, #10
9000693c:	f003 ff06 	bl	9000a74c <putchar>
90006940:	e5b5      	b.n	900064ae <USBH_Process+0x66>
      if (phost->pActiveClass != NULL)
90006942:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90006946:	b1ab      	cbz	r3, 90006974 <USBH_Process+0x52c>
        status = phost->pActiveClass->Requests(phost);
90006948:	691b      	ldr	r3, [r3, #16]
9000694a:	4620      	mov	r0, r4
9000694c:	4798      	blx	r3
9000694e:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
90006952:	f89d 3017 	ldrb.w	r3, [sp, #23]
90006956:	b90b      	cbnz	r3, 9000695c <USBH_Process+0x514>
          phost->gState = HOST_CLASS;
90006958:	230b      	movs	r3, #11
9000695a:	e5b9      	b.n	900064d0 <USBH_Process+0x88>
        else if (status == USBH_FAIL)
9000695c:	f89d 3017 	ldrb.w	r3, [sp, #23]
90006960:	2b02      	cmp	r3, #2
90006962:	f47f ada4 	bne.w	900064ae <USBH_Process+0x66>
          phost->gState = HOST_ABORT_STATE;
90006966:	230d      	movs	r3, #13
          USBH_ErrLog("Device not responding Please Unplug.");
90006968:	481f      	ldr	r0, [pc, #124]	; (900069e8 <USBH_Process+0x5a0>)
          phost->gState = HOST_ABORT_STATE;
9000696a:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
9000696c:	f003 fedc 	bl	9000a728 <iprintf>
90006970:	482b      	ldr	r0, [pc, #172]	; (90006a20 <USBH_Process+0x5d8>)
90006972:	e79c      	b.n	900068ae <USBH_Process+0x466>
        phost->gState = HOST_ABORT_STATE;
90006974:	230d      	movs	r3, #13
        USBH_ErrLog("Invalid Class Driver.");
90006976:	481c      	ldr	r0, [pc, #112]	; (900069e8 <USBH_Process+0x5a0>)
        phost->gState = HOST_ABORT_STATE;
90006978:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
9000697a:	f003 fed5 	bl	9000a728 <iprintf>
9000697e:	4829      	ldr	r0, [pc, #164]	; (90006a24 <USBH_Process+0x5dc>)
90006980:	e795      	b.n	900068ae <USBH_Process+0x466>
      if (phost->pActiveClass != NULL)
90006982:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90006986:	2b00      	cmp	r3, #0
90006988:	f43f ad91 	beq.w	900064ae <USBH_Process+0x66>
        phost->pActiveClass->BgndProcess(phost);
9000698c:	695b      	ldr	r3, [r3, #20]
9000698e:	4620      	mov	r0, r4
90006990:	4798      	blx	r3
90006992:	e58c      	b.n	900064ae <USBH_Process+0x66>
      phost->device.is_disconnected = 0U;
90006994:	2500      	movs	r5, #0
      DeInitStateMachine(phost);
90006996:	4620      	mov	r0, r4
      phost->device.is_disconnected = 0U;
90006998:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
      DeInitStateMachine(phost);
9000699c:	f7ff fc7e 	bl	9000629c <DeInitStateMachine.isra.0>
      if (phost->pActiveClass != NULL)
900069a0:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
900069a4:	b123      	cbz	r3, 900069b0 <USBH_Process+0x568>
        phost->pActiveClass->DeInit(phost);
900069a6:	68db      	ldr	r3, [r3, #12]
900069a8:	4620      	mov	r0, r4
900069aa:	4798      	blx	r3
        phost->pActiveClass = NULL;
900069ac:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
      if (phost->pUser != NULL)
900069b0:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
900069b4:	b113      	cbz	r3, 900069bc <USBH_Process+0x574>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
900069b6:	2105      	movs	r1, #5
900069b8:	4620      	mov	r0, r4
900069ba:	4798      	blx	r3
      USBH_UsrLog("USB Device disconnected");
900069bc:	481a      	ldr	r0, [pc, #104]	; (90006a28 <USBH_Process+0x5e0>)
900069be:	f003 feb3 	bl	9000a728 <iprintf>
900069c2:	200a      	movs	r0, #10
900069c4:	f003 fec2 	bl	9000a74c <putchar>
      if (phost->device.is_ReEnumerated == 1U)
900069c8:	f894 3422 	ldrb.w	r3, [r4, #1058]	; 0x422
900069cc:	2b01      	cmp	r3, #1
900069ce:	d106      	bne.n	900069de <USBH_Process+0x596>
        phost->device.is_ReEnumerated = 0U;
900069d0:	2300      	movs	r3, #0
        USBH_Start(phost);
900069d2:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
900069d4:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
        USBH_Start(phost);
900069d8:	f7ff fd2c 	bl	90006434 <USBH_Start>
900069dc:	e567      	b.n	900064ae <USBH_Process+0x66>
        USBH_LL_Start(phost);
900069de:	4620      	mov	r0, r4
900069e0:	f003 fbdc 	bl	9000a19c <USBH_LL_Start>
900069e4:	e563      	b.n	900064ae <USBH_Process+0x66>
900069e6:	bf00      	nop
900069e8:	9000fc88 	.word	0x9000fc88
900069ec:	9000fe9d 	.word	0x9000fe9d
900069f0:	9000fedf 	.word	0x9000fedf
900069f4:	9000fef1 	.word	0x9000fef1
900069f8:	9000fb8b 	.word	0x9000fb8b
900069fc:	9000ff04 	.word	0x9000ff04
90006a00:	9000ff12 	.word	0x9000ff12
90006a04:	9000ff25 	.word	0x9000ff25
90006a08:	9000ff71 	.word	0x9000ff71
90006a0c:	9000ff8c 	.word	0x9000ff8c
90006a10:	9000ffa9 	.word	0x9000ffa9
90006a14:	9000ffc7 	.word	0x9000ffc7
90006a18:	9000ffec 	.word	0x9000ffec
90006a1c:	9000fffe 	.word	0x9000fffe
90006a20:	9001001e 	.word	0x9001001e
90006a24:	90010043 	.word	0x90010043
90006a28:	90010059 	.word	0x90010059

90006a2c <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
90006a2c:	f8c0 14b0 	str.w	r1, [r0, #1200]	; 0x4b0
}
90006a30:	4770      	bx	lr

90006a32 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
90006a32:	f8d0 24b0 	ldr.w	r2, [r0, #1200]	; 0x4b0
90006a36:	3201      	adds	r2, #1
90006a38:	f8c0 24b0 	str.w	r2, [r0, #1200]	; 0x4b0
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
90006a3c:	7802      	ldrb	r2, [r0, #0]
90006a3e:	2a0b      	cmp	r2, #11
90006a40:	d104      	bne.n	90006a4c <USBH_LL_IncTimer+0x1a>
90006a42:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
90006a46:	b10b      	cbz	r3, 90006a4c <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
90006a48:	699b      	ldr	r3, [r3, #24]
90006a4a:	4718      	bx	r3
}
90006a4c:	4770      	bx	lr

90006a4e <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
90006a4e:	2301      	movs	r3, #1
90006a50:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
90006a54:	4770      	bx	lr

90006a56 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
90006a56:	2300      	movs	r3, #0
90006a58:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
90006a5c:	4770      	bx	lr

90006a5e <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
90006a5e:	2301      	movs	r3, #1
90006a60:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
90006a64:	2300      	movs	r3, #0
90006a66:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
90006a6a:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
90006a6e:	4618      	mov	r0, r3
90006a70:	4770      	bx	lr

90006a72 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
90006a72:	b538      	push	{r3, r4, r5, lr}
  /* update device connection states */
  phost->device.is_disconnected = 1U;
90006a74:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
90006a76:	2500      	movs	r5, #0
{
90006a78:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
90006a7a:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
90006a7e:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
90006a82:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  USBH_LL_Stop(phost);
90006a86:	f003 fb90 	bl	9000a1aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
90006a8a:	7921      	ldrb	r1, [r4, #4]
90006a8c:	4620      	mov	r0, r4
90006a8e:	f000 fa9c 	bl	90006fca <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
90006a92:	7961      	ldrb	r1, [r4, #5]
90006a94:	4620      	mov	r0, r4
90006a96:	f000 fa98 	bl	90006fca <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
90006a9a:	4628      	mov	r0, r5
90006a9c:	bd38      	pop	{r3, r4, r5, pc}
	...

90006aa0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
90006aa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
90006aa2:	7885      	ldrb	r5, [r0, #2]
{
90006aa4:	4604      	mov	r4, r0
  switch (phost->RequestState)
90006aa6:	2d01      	cmp	r5, #1
90006aa8:	d003      	beq.n	90006ab2 <USBH_CtlReq+0x12>
90006aaa:	2d02      	cmp	r5, #2
90006aac:	d007      	beq.n	90006abe <USBH_CtlReq+0x1e>
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
        {
          phost->Control.state = CTRL_ERROR;
90006aae:	2501      	movs	r5, #1
  return status;
90006ab0:	e019      	b.n	90006ae6 <USBH_CtlReq+0x46>
      phost->RequestState = CMD_WAIT;
90006ab2:	2302      	movs	r3, #2
      phost->Control.buff = buff;
90006ab4:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
90006ab6:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
90006ab8:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
90006aba:	70a3      	strb	r3, [r4, #2]
90006abc:	e013      	b.n	90006ae6 <USBH_CtlReq+0x46>
  switch (phost->Control.state)
90006abe:	7e06      	ldrb	r6, [r0, #24]
90006ac0:	1e73      	subs	r3, r6, #1
90006ac2:	2b0a      	cmp	r3, #10
90006ac4:	d8f3      	bhi.n	90006aae <USBH_CtlReq+0xe>
90006ac6:	e8df f003 	tbb	[pc, r3]
90006aca:	1106      	.short	0x1106
90006acc:	4e42392f 	.word	0x4e42392f
90006ad0:	8478675d 	.word	0x8478675d
90006ad4:	8c          	.byte	0x8c
90006ad5:	00          	.byte	0x00
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
90006ad6:	7942      	ldrb	r2, [r0, #5]
90006ad8:	f100 0110 	add.w	r1, r0, #16
90006adc:	f000 f9eb 	bl	90006eb6 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
90006ae0:	4635      	mov	r5, r6
90006ae2:	2302      	movs	r3, #2
90006ae4:	7623      	strb	r3, [r4, #24]
}
90006ae6:	4628      	mov	r0, r5
90006ae8:	b002      	add	sp, #8
90006aea:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90006aec:	7941      	ldrb	r1, [r0, #5]
90006aee:	f003 fba3 	bl	9000a238 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90006af2:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90006af4:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
90006af6:	d111      	bne.n	90006b1c <USBH_CtlReq+0x7c>
        if (phost->Control.setup.b.wLength.w != 0U)
90006af8:	8ae2      	ldrh	r2, [r4, #22]
90006afa:	f994 3010 	ldrsb.w	r3, [r4, #16]
90006afe:	b13a      	cbz	r2, 90006b10 <USBH_CtlReq+0x70>
          if (direction == USB_D2H)
90006b00:	2b00      	cmp	r3, #0
90006b02:	da02      	bge.n	90006b0a <USBH_CtlReq+0x6a>
            phost->Control.state = CTRL_DATA_IN;
90006b04:	2303      	movs	r3, #3
        phost->Control.state = CTRL_IDLE;
90006b06:	7623      	strb	r3, [r4, #24]
90006b08:	e7ed      	b.n	90006ae6 <USBH_CtlReq+0x46>
            phost->Control.state = CTRL_DATA_OUT;
90006b0a:	2305      	movs	r3, #5
    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_IN_WAIT;
90006b0c:	7623      	strb	r3, [r4, #24]
      else if (status == USBH_FAIL)
90006b0e:	e7ce      	b.n	90006aae <USBH_CtlReq+0xe>
          if (direction == USB_D2H)
90006b10:	2b00      	cmp	r3, #0
90006b12:	da01      	bge.n	90006b18 <USBH_CtlReq+0x78>
        phost->Control.state = CTRL_STATUS_OUT;
90006b14:	2309      	movs	r3, #9
90006b16:	e7f9      	b.n	90006b0c <USBH_CtlReq+0x6c>
            phost->Control.state = CTRL_STATUS_IN;
90006b18:	2307      	movs	r3, #7
90006b1a:	e7f7      	b.n	90006b0c <USBH_CtlReq+0x6c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
90006b1c:	2804      	cmp	r0, #4
90006b1e:	d001      	beq.n	90006b24 <USBH_CtlReq+0x84>
90006b20:	2802      	cmp	r0, #2
90006b22:	d1c4      	bne.n	90006aae <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
90006b24:	230b      	movs	r3, #11
90006b26:	e7f1      	b.n	90006b0c <USBH_CtlReq+0x6c>
      phost->Control.timer = (uint16_t)phost->Timer;
90006b28:	f8d0 34b0 	ldr.w	r3, [r0, #1200]	; 0x4b0
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
90006b2c:	8982      	ldrh	r2, [r0, #12]
      phost->Control.timer = (uint16_t)phost->Timer;
90006b2e:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
90006b30:	6881      	ldr	r1, [r0, #8]
90006b32:	7903      	ldrb	r3, [r0, #4]
90006b34:	f000 f9e6 	bl	90006f04 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
90006b38:	2304      	movs	r3, #4
90006b3a:	e7e7      	b.n	90006b0c <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
90006b3c:	7901      	ldrb	r1, [r0, #4]
90006b3e:	f003 fb7b 	bl	9000a238 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90006b42:	2801      	cmp	r0, #1
90006b44:	d0e6      	beq.n	90006b14 <USBH_CtlReq+0x74>
      if (URB_Status == USBH_URB_STALL)
90006b46:	2805      	cmp	r0, #5
90006b48:	d035      	beq.n	90006bb6 <USBH_CtlReq+0x116>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
90006b4a:	2804      	cmp	r0, #4
90006b4c:	e7e9      	b.n	90006b22 <USBH_CtlReq+0x82>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
90006b4e:	2501      	movs	r5, #1
90006b50:	9500      	str	r5, [sp, #0]
90006b52:	7943      	ldrb	r3, [r0, #5]
90006b54:	8982      	ldrh	r2, [r0, #12]
90006b56:	6881      	ldr	r1, [r0, #8]
90006b58:	f000 f9bd 	bl	90006ed6 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
90006b5c:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
90006b60:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
90006b62:	2306      	movs	r3, #6
90006b64:	e7cf      	b.n	90006b06 <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90006b66:	7941      	ldrb	r1, [r0, #5]
90006b68:	f003 fb66 	bl	9000a238 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90006b6c:	2801      	cmp	r0, #1
90006b6e:	d0d3      	beq.n	90006b18 <USBH_CtlReq+0x78>
      else if (URB_Status == USBH_URB_STALL)
90006b70:	2805      	cmp	r0, #5
90006b72:	d020      	beq.n	90006bb6 <USBH_CtlReq+0x116>
      else if (URB_Status == USBH_URB_NOTREADY)
90006b74:	2802      	cmp	r0, #2
90006b76:	d0c8      	beq.n	90006b0a <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
90006b78:	2804      	cmp	r0, #4
90006b7a:	d198      	bne.n	90006aae <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
90006b7c:	230b      	movs	r3, #11
90006b7e:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
90006b80:	2301      	movs	r3, #1
90006b82:	e79a      	b.n	90006aba <USBH_CtlReq+0x1a>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
90006b84:	2200      	movs	r2, #0
90006b86:	7903      	ldrb	r3, [r0, #4]
90006b88:	4611      	mov	r1, r2
90006b8a:	f000 f9bb 	bl	90006f04 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
90006b8e:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
90006b92:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
90006b94:	2308      	movs	r3, #8
90006b96:	e7b9      	b.n	90006b0c <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
90006b98:	7901      	ldrb	r1, [r0, #4]
90006b9a:	f003 fb4d 	bl	9000a238 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90006b9e:	2801      	cmp	r0, #1
90006ba0:	d104      	bne.n	90006bac <USBH_CtlReq+0x10c>
        status = USBH_OK;
90006ba2:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
90006ba4:	2301      	movs	r3, #1
90006ba6:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
90006ba8:	2300      	movs	r3, #0
90006baa:	e7ac      	b.n	90006b06 <USBH_CtlReq+0x66>
      else if (URB_Status == USBH_URB_ERROR)
90006bac:	2804      	cmp	r0, #4
90006bae:	d0b9      	beq.n	90006b24 <USBH_CtlReq+0x84>
        if (URB_Status == USBH_URB_STALL)
90006bb0:	2805      	cmp	r0, #5
90006bb2:	f47f af7c 	bne.w	90006aae <USBH_CtlReq+0xe>
        status = USBH_OK;
90006bb6:	2503      	movs	r5, #3
90006bb8:	e7f4      	b.n	90006ba4 <USBH_CtlReq+0x104>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
90006bba:	2200      	movs	r2, #0
90006bbc:	2501      	movs	r5, #1
90006bbe:	4611      	mov	r1, r2
90006bc0:	9500      	str	r5, [sp, #0]
90006bc2:	7943      	ldrb	r3, [r0, #5]
90006bc4:	f000 f987 	bl	90006ed6 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
90006bc8:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
90006bcc:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
90006bce:	230a      	movs	r3, #10
90006bd0:	e799      	b.n	90006b06 <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90006bd2:	7941      	ldrb	r1, [r0, #5]
90006bd4:	f003 fb30 	bl	9000a238 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90006bd8:	2801      	cmp	r0, #1
90006bda:	d0e2      	beq.n	90006ba2 <USBH_CtlReq+0x102>
      else if (URB_Status == USBH_URB_NOTREADY)
90006bdc:	2802      	cmp	r0, #2
90006bde:	d1b4      	bne.n	90006b4a <USBH_CtlReq+0xaa>
90006be0:	e798      	b.n	90006b14 <USBH_CtlReq+0x74>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
90006be2:	7e43      	ldrb	r3, [r0, #25]
90006be4:	3301      	adds	r3, #1
90006be6:	b2db      	uxtb	r3, r3
90006be8:	2b02      	cmp	r3, #2
90006bea:	7643      	strb	r3, [r0, #25]
90006bec:	d803      	bhi.n	90006bf6 <USBH_CtlReq+0x156>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
90006bee:	2501      	movs	r5, #1
90006bf0:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
90006bf2:	7085      	strb	r5, [r0, #2]
      else if (status == USBH_FAIL)
90006bf4:	e777      	b.n	90006ae6 <USBH_CtlReq+0x46>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
90006bf6:	2600      	movs	r6, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
90006bf8:	f8d0 34c0 	ldr.w	r3, [r0, #1216]	; 0x4c0
90006bfc:	2106      	movs	r1, #6
90006bfe:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");
90006c00:	4809      	ldr	r0, [pc, #36]	; (90006c28 <USBH_CtlReq+0x188>)
        phost->Control.errorcount = 0U;
90006c02:	7666      	strb	r6, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");
90006c04:	f003 fd90 	bl	9000a728 <iprintf>
90006c08:	4808      	ldr	r0, [pc, #32]	; (90006c2c <USBH_CtlReq+0x18c>)
90006c0a:	f003 fd8d 	bl	9000a728 <iprintf>
90006c0e:	200a      	movs	r0, #10
90006c10:	f003 fd9c 	bl	9000a74c <putchar>

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
90006c14:	7961      	ldrb	r1, [r4, #5]
90006c16:	4620      	mov	r0, r4
90006c18:	f000 f9d7 	bl	90006fca <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
90006c1c:	7921      	ldrb	r1, [r4, #4]
90006c1e:	4620      	mov	r0, r4
90006c20:	f000 f9d3 	bl	90006fca <USBH_FreePipe>

        phost->gState = HOST_IDLE;
90006c24:	7026      	strb	r6, [r4, #0]
      else if (status == USBH_FAIL)
90006c26:	e7ab      	b.n	90006b80 <USBH_CtlReq+0xe0>
90006c28:	9000fc88 	.word	0x9000fc88
90006c2c:	90010071 	.word	0x90010071

90006c30 <USBH_GetDescriptor>:
{
90006c30:	b430      	push	{r4, r5}
90006c32:	460c      	mov	r4, r1
90006c34:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
90006c36:	7883      	ldrb	r3, [r0, #2]
{
90006c38:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
90006c3c:	2b01      	cmp	r3, #1
90006c3e:	d10f      	bne.n	90006c60 <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
90006c40:	f064 047f 	orn	r4, r4, #127	; 0x7f
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
90006c44:	2306      	movs	r3, #6
    phost->Control.setup.b.wValue.w = value_idx;
90006c46:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
90006c48:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
90006c4a:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
90006c4e:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
90006c50:	f240 4309 	movw	r3, #1033	; 0x409
90006c54:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wLength.w = length;
90006c58:	82c5      	strh	r5, [r0, #22]
      phost->Control.setup.b.wIndex.w = 0U;
90006c5a:	bf18      	it	ne
90006c5c:	2300      	movne	r3, #0
90006c5e:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
90006c60:	462a      	mov	r2, r5
}
90006c62:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
90006c64:	f7ff bf1c 	b.w	90006aa0 <USBH_CtlReq>

90006c68 <USBH_Get_DevDesc>:
{
90006c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((status = USBH_GetDescriptor(phost,
90006c6a:	f500 7307 	add.w	r3, r0, #540	; 0x21c
90006c6e:	460d      	mov	r5, r1
90006c70:	9100      	str	r1, [sp, #0]
90006c72:	f44f 7280 	mov.w	r2, #256	; 0x100
90006c76:	2100      	movs	r1, #0
{
90006c78:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
90006c7a:	f7ff ffd9 	bl	90006c30 <USBH_GetDescriptor>
90006c7e:	bbc8      	cbnz	r0, 90006cf4 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
90006c80:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
  if (length > 8U)
90006c84:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
90006c86:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
90006c8a:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
90006c8e:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
  dev_desc->bcdUSB             = LE16(buf +  2);
90006c92:	f8b4 321e 	ldrh.w	r3, [r4, #542]	; 0x21e
90006c96:	f8a4 3428 	strh.w	r3, [r4, #1064]	; 0x428
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
90006c9a:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
90006c9e:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
90006ca2:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
90006ca6:	f884 342b 	strb.w	r3, [r4, #1067]	; 0x42b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
90006caa:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
90006cae:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
90006cb2:	f894 3223 	ldrb.w	r3, [r4, #547]	; 0x223
90006cb6:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
  if (length > 8U)
90006cba:	d91b      	bls.n	90006cf4 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16(buf +  8);
90006cbc:	f8b4 3224 	ldrh.w	r3, [r4, #548]	; 0x224
90006cc0:	f8a4 342e 	strh.w	r3, [r4, #1070]	; 0x42e
    dev_desc->idProduct          = LE16(buf + 10);
90006cc4:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
90006cc8:	f8a4 3430 	strh.w	r3, [r4, #1072]	; 0x430
    dev_desc->bcdDevice          = LE16(buf + 12);
90006ccc:	f8b4 3228 	ldrh.w	r3, [r4, #552]	; 0x228
90006cd0:	f8a4 3432 	strh.w	r3, [r4, #1074]	; 0x432
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
90006cd4:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
90006cd8:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
90006cdc:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
90006ce0:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
90006ce4:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
90006ce8:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
90006cec:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
90006cf0:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
}
90006cf4:	b003      	add	sp, #12
90006cf6:	bd30      	pop	{r4, r5, pc}

90006cf8 <USBH_Get_CfgDesc>:
{
90006cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;;
90006cfa:	f100 051c 	add.w	r5, r0, #28
{
90006cfe:	460e      	mov	r6, r1
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
90006d00:	9100      	str	r1, [sp, #0]
90006d02:	f44f 7200 	mov.w	r2, #512	; 0x200
90006d06:	462b      	mov	r3, r5
90006d08:	2100      	movs	r1, #0
{
90006d0a:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
90006d0c:	f7ff ff90 	bl	90006c30 <USBH_GetDescriptor>
90006d10:	b9f0      	cbnz	r0, 90006d50 <USBH_Get_CfgDesc+0x58>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
90006d12:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
90006d14:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16(buf + 2);
90006d16:	8be7      	ldrh	r7, [r4, #30]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
90006d18:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
90006d1c:	7f63      	ldrb	r3, [r4, #29]
  cfg_desc->wTotalLength        = LE16(buf + 2);
90006d1e:	f8a4 743a 	strh.w	r7, [r4, #1082]	; 0x43a
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
90006d22:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
90006d26:	f894 3020 	ldrb.w	r3, [r4, #32]
90006d2a:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
90006d2e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
90006d32:	f884 343d 	strb.w	r3, [r4, #1085]	; 0x43d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
90006d36:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
90006d3a:	f884 343e 	strb.w	r3, [r4, #1086]	; 0x43e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
90006d3e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
90006d42:	f884 343f 	strb.w	r3, [r4, #1087]	; 0x43f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
90006d46:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
90006d4a:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
  if (length > USB_CONFIGURATION_DESC_SIZE)
90006d4e:	d854      	bhi.n	90006dfa <USBH_Get_CfgDesc+0x102>
}
90006d50:	b003      	add	sp, #12
90006d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90006d54:	782a      	ldrb	r2, [r5, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
90006d56:	4415      	add	r5, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90006d58:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
90006d5a:	786a      	ldrb	r2, [r5, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90006d5c:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
90006d5e:	2a04      	cmp	r2, #4
90006d60:	d123      	bne.n	90006daa <USBH_Get_CfgDesc+0xb2>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
90006d62:	782a      	ldrb	r2, [r5, #0]
90006d64:	2601      	movs	r6, #1
90006d66:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
90006d6a:	786a      	ldrb	r2, [r5, #1]
90006d6c:	f884 2443 	strb.w	r2, [r4, #1091]	; 0x443
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
90006d70:	78aa      	ldrb	r2, [r5, #2]
90006d72:	f884 2444 	strb.w	r2, [r4, #1092]	; 0x444
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
90006d76:	78ea      	ldrb	r2, [r5, #3]
90006d78:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
90006d7c:	f895 c004 	ldrb.w	ip, [r5, #4]
90006d80:	f884 c446 	strb.w	ip, [r4, #1094]	; 0x446
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
90006d84:	796a      	ldrb	r2, [r5, #5]
90006d86:	f884 2447 	strb.w	r2, [r4, #1095]	; 0x447
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
90006d8a:	79aa      	ldrb	r2, [r5, #6]
90006d8c:	f884 2448 	strb.w	r2, [r4, #1096]	; 0x448
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
90006d90:	79ea      	ldrb	r2, [r5, #7]
90006d92:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
90006d96:	7a2a      	ldrb	r2, [r5, #8]
90006d98:	f884 244a 	strb.w	r2, [r4, #1098]	; 0x44a
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
90006d9c:	4561      	cmp	r1, ip
90006d9e:	d201      	bcs.n	90006da4 <USBH_Get_CfgDesc+0xac>
90006da0:	429f      	cmp	r7, r3
90006da2:	d805      	bhi.n	90006db0 <USBH_Get_CfgDesc+0xb8>
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
90006da4:	4631      	mov	r1, r6
90006da6:	2e00      	cmp	r6, #0
90006da8:	d1d2      	bne.n	90006d50 <USBH_Get_CfgDesc+0x58>
90006daa:	429f      	cmp	r7, r3
90006dac:	d8d2      	bhi.n	90006d54 <USBH_Get_CfgDesc+0x5c>
90006dae:	e7cf      	b.n	90006d50 <USBH_Get_CfgDesc+0x58>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90006db0:	782a      	ldrb	r2, [r5, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
90006db2:	4415      	add	r5, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90006db4:	4413      	add	r3, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
90006db6:	786a      	ldrb	r2, [r5, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90006db8:	b29b      	uxth	r3, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
90006dba:	2a05      	cmp	r2, #5
90006dbc:	d1ee      	bne.n	90006d9c <USBH_Get_CfgDesc+0xa4>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
90006dbe:	b20a      	sxth	r2, r1
90006dc0:	f895 e000 	ldrb.w	lr, [r5]
            ep_ix++;
90006dc4:	3101      	adds	r1, #1
90006dc6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
90006dca:	b2c9      	uxtb	r1, r1
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
90006dcc:	f882 e44c 	strb.w	lr, [r2, #1100]	; 0x44c
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
90006dd0:	f895 e001 	ldrb.w	lr, [r5, #1]
90006dd4:	f882 e44d 	strb.w	lr, [r2, #1101]	; 0x44d
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
90006dd8:	f895 e002 	ldrb.w	lr, [r5, #2]
90006ddc:	f882 e44e 	strb.w	lr, [r2, #1102]	; 0x44e
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
90006de0:	f895 e003 	ldrb.w	lr, [r5, #3]
90006de4:	f882 e44f 	strb.w	lr, [r2, #1103]	; 0x44f
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
90006de8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
90006dec:	f8a2 e450 	strh.w	lr, [r2, #1104]	; 0x450
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
90006df0:	f895 e006 	ldrb.w	lr, [r5, #6]
90006df4:	f882 e452 	strb.w	lr, [r2, #1106]	; 0x452
            ep_ix++;
90006df8:	e7d0      	b.n	90006d9c <USBH_Get_CfgDesc+0xa4>
  uint8_t                      if_ix = 0U;
90006dfa:	4606      	mov	r6, r0
    ptr = USB_LEN_CFG_DESC;
90006dfc:	2309      	movs	r3, #9
90006dfe:	e7d1      	b.n	90006da4 <USBH_Get_CfgDesc+0xac>

90006e00 <USBH_Get_StringDesc>:
{
90006e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                   phost->device.Data, length)) == USBH_OK)
90006e02:	f500 7607 	add.w	r6, r0, #540	; 0x21c
{
90006e06:	4615      	mov	r5, r2
90006e08:	461f      	mov	r7, r3
  if ((status = USBH_GetDescriptor(phost,
90006e0a:	f441 7240 	orr.w	r2, r1, #768	; 0x300
90006e0e:	9300      	str	r3, [sp, #0]
90006e10:	2100      	movs	r1, #0
90006e12:	4633      	mov	r3, r6
{
90006e14:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
90006e16:	f7ff ff0b 	bl	90006c30 <USBH_GetDescriptor>
90006e1a:	b978      	cbnz	r0, 90006e3c <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
90006e1c:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
90006e20:	2b03      	cmp	r3, #3
90006e22:	d10b      	bne.n	90006e3c <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
90006e24:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
    for (idx = 0U; idx < strlength; idx += 2U)
90006e28:	4604      	mov	r4, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
90006e2a:	3902      	subs	r1, #2
90006e2c:	42b9      	cmp	r1, r7
90006e2e:	bf28      	it	cs
90006e30:	4639      	movcs	r1, r7
90006e32:	b289      	uxth	r1, r1
    for (idx = 0U; idx < strlength; idx += 2U)
90006e34:	42a1      	cmp	r1, r4
90006e36:	d803      	bhi.n	90006e40 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
90006e38:	2300      	movs	r3, #0
90006e3a:	702b      	strb	r3, [r5, #0]
}
90006e3c:	b003      	add	sp, #12
90006e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
90006e40:	1933      	adds	r3, r6, r4
    for (idx = 0U; idx < strlength; idx += 2U)
90006e42:	3402      	adds	r4, #2
      *pdest =  psrc[idx];
90006e44:	789b      	ldrb	r3, [r3, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
90006e46:	b2a4      	uxth	r4, r4
      *pdest =  psrc[idx];
90006e48:	f805 3b01 	strb.w	r3, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
90006e4c:	e7f2      	b.n	90006e34 <USBH_Get_StringDesc+0x34>

90006e4e <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
90006e4e:	7883      	ldrb	r3, [r0, #2]
90006e50:	2b01      	cmp	r3, #1
90006e52:	d105      	bne.n	90006e60 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
90006e54:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
90006e58:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
90006e5a:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
90006e5c:	2300      	movs	r3, #0
90006e5e:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
90006e60:	2200      	movs	r2, #0
90006e62:	4611      	mov	r1, r2
90006e64:	f7ff be1c 	b.w	90006aa0 <USBH_CtlReq>

90006e68 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
90006e68:	7883      	ldrb	r3, [r0, #2]
90006e6a:	2b01      	cmp	r3, #1
90006e6c:	d105      	bne.n	90006e7a <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
90006e6e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    phost->Control.setup.b.wValue.w = cfg_idx;
90006e72:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
90006e74:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
90006e76:	2300      	movs	r3, #0
90006e78:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
90006e7a:	2200      	movs	r2, #0
90006e7c:	4611      	mov	r1, r2
90006e7e:	f7ff be0f 	b.w	90006aa0 <USBH_CtlReq>

90006e82 <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
90006e82:	7883      	ldrb	r3, [r0, #2]
90006e84:	2b01      	cmp	r3, #1
90006e86:	d105      	bne.n	90006e94 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
90006e88:	f44f 7340 	mov.w	r3, #768	; 0x300
    phost->Control.setup.b.wValue.w = wValue;
90006e8c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
90006e8e:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
90006e90:	2300      	movs	r3, #0
90006e92:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
90006e94:	2200      	movs	r2, #0
90006e96:	4611      	mov	r1, r2
90006e98:	f7ff be02 	b.w	90006aa0 <USBH_CtlReq>

90006e9c <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
90006e9c:	7883      	ldrb	r3, [r0, #2]
90006e9e:	2b01      	cmp	r3, #1
90006ea0:	d105      	bne.n	90006eae <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
90006ea2:	f44f 7381 	mov.w	r3, #258	; 0x102
    phost->Control.setup.b.wIndex.w = ep_num;
90006ea6:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
90006ea8:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
90006eaa:	2300      	movs	r3, #0
90006eac:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
90006eae:	2200      	movs	r2, #0
90006eb0:	4611      	mov	r1, r2
90006eb2:	f7ff bdf5 	b.w	90006aa0 <USBH_CtlReq>

90006eb6 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
90006eb6:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90006eb8:	2400      	movs	r4, #0
{
90006eba:	460b      	mov	r3, r1
90006ebc:	4611      	mov	r1, r2
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90006ebe:	2208      	movs	r2, #8
90006ec0:	e9cd 4300 	strd	r4, r3, [sp]
90006ec4:	e9cd 2402 	strd	r2, r4, [sp, #8]
90006ec8:	4623      	mov	r3, r4
90006eca:	4622      	mov	r2, r4
90006ecc:	f003 f9a1 	bl	9000a212 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
90006ed0:	4620      	mov	r0, r4
90006ed2:	b004      	add	sp, #16
90006ed4:	bd10      	pop	{r4, pc}

90006ed6 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
90006ed6:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
90006ed8:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
90006edc:	b085      	sub	sp, #20
90006ede:	460c      	mov	r4, r1
90006ee0:	4619      	mov	r1, r3
  {
    do_ping = 0U;
90006ee2:	2d00      	cmp	r5, #0
{
90006ee4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90006ee8:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
90006eea:	bf18      	it	ne
90006eec:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90006eee:	e9cd 2302 	strd	r2, r3, [sp, #8]
90006ef2:	2301      	movs	r3, #1
90006ef4:	9300      	str	r3, [sp, #0]
90006ef6:	2300      	movs	r3, #0
90006ef8:	461a      	mov	r2, r3
90006efa:	f003 f98a 	bl	9000a212 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
90006efe:	2000      	movs	r0, #0
90006f00:	b005      	add	sp, #20
90006f02:	bd30      	pop	{r4, r5, pc}

90006f04 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
90006f04:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90006f06:	2400      	movs	r4, #0
{
90006f08:	b085      	sub	sp, #20
90006f0a:	460d      	mov	r5, r1
90006f0c:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90006f0e:	4623      	mov	r3, r4
90006f10:	9501      	str	r5, [sp, #4]
90006f12:	e9cd 2402 	strd	r2, r4, [sp, #8]
90006f16:	2201      	movs	r2, #1
90006f18:	9200      	str	r2, [sp, #0]
90006f1a:	f003 f97a 	bl	9000a212 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
90006f1e:	4620      	mov	r0, r4
90006f20:	b005      	add	sp, #20
90006f22:	bd30      	pop	{r4, r5, pc}

90006f24 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
90006f24:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
90006f26:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
90006f2a:	b085      	sub	sp, #20
90006f2c:	460c      	mov	r4, r1
90006f2e:	4619      	mov	r1, r3
  {
    do_ping = 0U;
90006f30:	2d00      	cmp	r5, #0
{
90006f32:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90006f36:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
90006f38:	bf18      	it	ne
90006f3a:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90006f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
90006f40:	2301      	movs	r3, #1
90006f42:	2200      	movs	r2, #0
90006f44:	9300      	str	r3, [sp, #0]
90006f46:	2302      	movs	r3, #2
90006f48:	f003 f963 	bl	9000a212 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
90006f4c:	2000      	movs	r0, #0
90006f4e:	b005      	add	sp, #20
90006f50:	bd30      	pop	{r4, r5, pc}

90006f52 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
90006f52:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90006f54:	2400      	movs	r4, #0
{
90006f56:	b085      	sub	sp, #20
90006f58:	460d      	mov	r5, r1
90006f5a:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90006f5c:	2302      	movs	r3, #2
90006f5e:	9501      	str	r5, [sp, #4]
90006f60:	e9cd 2402 	strd	r2, r4, [sp, #8]
90006f64:	2201      	movs	r2, #1
90006f66:	9200      	str	r2, [sp, #0]
90006f68:	f003 f953 	bl	9000a212 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
90006f6c:	4620      	mov	r0, r4
90006f6e:	b005      	add	sp, #20
90006f70:	bd30      	pop	{r4, r5, pc}

90006f72 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
90006f72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
90006f74:	f8bd 4020 	ldrh.w	r4, [sp, #32]
90006f78:	9402      	str	r4, [sp, #8]
90006f7a:	f89d 401c 	ldrb.w	r4, [sp, #28]
90006f7e:	9401      	str	r4, [sp, #4]
90006f80:	f89d 4018 	ldrb.w	r4, [sp, #24]
90006f84:	9400      	str	r4, [sp, #0]
90006f86:	f003 f92c 	bl	9000a1e2 <USBH_LL_OpenPipe>

  return USBH_OK;
}
90006f8a:	2000      	movs	r0, #0
90006f8c:	b004      	add	sp, #16
90006f8e:	bd10      	pop	{r4, pc}

90006f90 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
90006f90:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
90006f92:	f003 f937 	bl	9000a204 <USBH_LL_ClosePipe>

  return USBH_OK;
}
90006f96:	2000      	movs	r0, #0
90006f98:	bd08      	pop	{r3, pc}

90006f9a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
90006f9a:	b530      	push	{r4, r5, lr}
90006f9c:	2300      	movs	r3, #0
90006f9e:	f200 446c 	addw	r4, r0, #1132	; 0x46c
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
90006fa2:	f854 5f04 	ldr.w	r5, [r4, #4]!
90006fa6:	b2da      	uxtb	r2, r3
90006fa8:	042d      	lsls	r5, r5, #16
90006faa:	d408      	bmi.n	90006fbe <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
90006fac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
90006fb0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
90006fb4:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
90006fb6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
90006fba:	b2d0      	uxtb	r0, r2
90006fbc:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U ; idx < 11U ; idx++)
90006fbe:	3301      	adds	r3, #1
90006fc0:	2b0b      	cmp	r3, #11
90006fc2:	d1ee      	bne.n	90006fa2 <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
90006fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
90006fc8:	e7f7      	b.n	90006fba <USBH_AllocPipe+0x20>

90006fca <USBH_FreePipe>:
  if (idx < 11U)
90006fca:	290a      	cmp	r1, #10
    phost->Pipes[idx] &= 0x7FFFU;
90006fcc:	bf9f      	itttt	ls
90006fce:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
90006fd2:	f8d0 3470 	ldrls.w	r3, [r0, #1136]	; 0x470
90006fd6:	f3c3 030e 	ubfxls	r3, r3, #0, #15
90006fda:	f8c0 3470 	strls.w	r3, [r0, #1136]	; 0x470
}
90006fde:	2000      	movs	r0, #0
90006fe0:	4770      	bx	lr
	...

90006fe4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
90006fe4:	4b03      	ldr	r3, [pc, #12]	; (90006ff4 <disk_status+0x10>)
90006fe6:	181a      	adds	r2, r3, r0
90006fe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90006fec:	6843      	ldr	r3, [r0, #4]
90006fee:	7b10      	ldrb	r0, [r2, #12]
90006ff0:	685b      	ldr	r3, [r3, #4]
90006ff2:	4718      	bx	r3
90006ff4:	2000075c 	.word	0x2000075c

90006ff8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
90006ff8:	4b06      	ldr	r3, [pc, #24]	; (90007014 <disk_initialize+0x1c>)
90006ffa:	5c1a      	ldrb	r2, [r3, r0]
90006ffc:	b942      	cbnz	r2, 90007010 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
90006ffe:	2201      	movs	r2, #1
90007000:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
90007002:	181a      	adds	r2, r3, r0
90007004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90007008:	6843      	ldr	r3, [r0, #4]
9000700a:	7b10      	ldrb	r0, [r2, #12]
9000700c:	681b      	ldr	r3, [r3, #0]
9000700e:	4718      	bx	r3
  }
  return stat;
}
90007010:	2000      	movs	r0, #0
90007012:	4770      	bx	lr
90007014:	2000075c 	.word	0x2000075c

90007018 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
90007018:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
9000701a:	4c05      	ldr	r4, [pc, #20]	; (90007030 <disk_read+0x18>)
9000701c:	1825      	adds	r5, r4, r0
9000701e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
90007022:	6840      	ldr	r0, [r0, #4]
90007024:	6884      	ldr	r4, [r0, #8]
90007026:	7b28      	ldrb	r0, [r5, #12]
90007028:	46a4      	mov	ip, r4
  return res;
}
9000702a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
9000702c:	4760      	bx	ip
9000702e:	bf00      	nop
90007030:	2000075c 	.word	0x2000075c

90007034 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
90007034:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
90007036:	4c05      	ldr	r4, [pc, #20]	; (9000704c <disk_write+0x18>)
90007038:	1825      	adds	r5, r4, r0
9000703a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
9000703e:	6840      	ldr	r0, [r0, #4]
90007040:	68c4      	ldr	r4, [r0, #12]
90007042:	7b28      	ldrb	r0, [r5, #12]
90007044:	46a4      	mov	ip, r4
  return res;
}
90007046:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
90007048:	4760      	bx	ip
9000704a:	bf00      	nop
9000704c:	2000075c 	.word	0x2000075c

90007050 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
90007050:	4b05      	ldr	r3, [pc, #20]	; (90007068 <disk_ioctl+0x18>)
{
90007052:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
90007054:	181c      	adds	r4, r3, r0
90007056:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9000705a:	6843      	ldr	r3, [r0, #4]
9000705c:	7b20      	ldrb	r0, [r4, #12]
9000705e:	691b      	ldr	r3, [r3, #16]
  return res;
}
90007060:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
90007064:	4718      	bx	r3
90007066:	bf00      	nop
90007068:	2000075c 	.word	0x2000075c

9000706c <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
9000706c:	2000      	movs	r0, #0
9000706e:	4770      	bx	lr

90007070 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
90007070:	6800      	ldr	r0, [r0, #0]
90007072:	4770      	bx	lr

90007074 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
90007074:	0a0b      	lsrs	r3, r1, #8
90007076:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
90007078:	7043      	strb	r3, [r0, #1]
9000707a:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
9000707c:	0e09      	lsrs	r1, r1, #24
9000707e:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
90007080:	70c1      	strb	r1, [r0, #3]
}
90007082:	4770      	bx	lr

90007084 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
90007084:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
90007086:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
9000708a:	4290      	cmp	r0, r2
9000708c:	d1fb      	bne.n	90007086 <mem_set+0x2>
}
9000708e:	4770      	bx	lr

90007090 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
90007090:	4a1b      	ldr	r2, [pc, #108]	; (90007100 <chk_lock+0x70>)
90007092:	6813      	ldr	r3, [r2, #0]
{
90007094:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
90007096:	b163      	cbz	r3, 900070b2 <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
90007098:	6804      	ldr	r4, [r0, #0]
9000709a:	42a3      	cmp	r3, r4
9000709c:	d107      	bne.n	900070ae <chk_lock+0x1e>
9000709e:	6884      	ldr	r4, [r0, #8]
900070a0:	6853      	ldr	r3, [r2, #4]
900070a2:	429c      	cmp	r4, r3
900070a4:	d103      	bne.n	900070ae <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
900070a6:	6894      	ldr	r4, [r2, #8]
900070a8:	6943      	ldr	r3, [r0, #20]
900070aa:	429c      	cmp	r4, r3
900070ac:	d020      	beq.n	900070f0 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
900070ae:	2400      	movs	r4, #0
900070b0:	e000      	b.n	900070b4 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
900070b2:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
900070b4:	6913      	ldr	r3, [r2, #16]
900070b6:	b1cb      	cbz	r3, 900070ec <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
900070b8:	6805      	ldr	r5, [r0, #0]
900070ba:	42ab      	cmp	r3, r5
900070bc:	d107      	bne.n	900070ce <chk_lock+0x3e>
900070be:	6955      	ldr	r5, [r2, #20]
900070c0:	6883      	ldr	r3, [r0, #8]
900070c2:	429d      	cmp	r5, r3
900070c4:	d103      	bne.n	900070ce <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
900070c6:	6995      	ldr	r5, [r2, #24]
900070c8:	6943      	ldr	r3, [r0, #20]
900070ca:	429d      	cmp	r5, r3
900070cc:	d015      	beq.n	900070fa <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
900070ce:	b96c      	cbnz	r4, 900070ec <chk_lock+0x5c>
900070d0:	2902      	cmp	r1, #2
900070d2:	bf0c      	ite	eq
900070d4:	2000      	moveq	r0, #0
900070d6:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
900070d8:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
900070da:	eb02 1303 	add.w	r3, r2, r3, lsl #4
900070de:	8998      	ldrh	r0, [r3, #12]
900070e0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
900070e4:	4258      	negs	r0, r3
900070e6:	4158      	adcs	r0, r3
900070e8:	0100      	lsls	r0, r0, #4
900070ea:	e7f5      	b.n	900070d8 <chk_lock+0x48>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
900070ec:	2000      	movs	r0, #0
900070ee:	e7f3      	b.n	900070d8 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
900070f0:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
900070f2:	2900      	cmp	r1, #0
900070f4:	d0f1      	beq.n	900070da <chk_lock+0x4a>
900070f6:	2010      	movs	r0, #16
900070f8:	e7ee      	b.n	900070d8 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
900070fa:	2301      	movs	r3, #1
900070fc:	e7f9      	b.n	900070f2 <chk_lock+0x62>
900070fe:	bf00      	nop
90007100:	20000730 	.word	0x20000730

90007104 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
90007104:	4a1f      	ldr	r2, [pc, #124]	; (90007184 <inc_lock+0x80>)
{
90007106:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
90007108:	6813      	ldr	r3, [r2, #0]
9000710a:	6806      	ldr	r6, [r0, #0]
9000710c:	429e      	cmp	r6, r3
9000710e:	d107      	bne.n	90007120 <inc_lock+0x1c>
90007110:	6885      	ldr	r5, [r0, #8]
90007112:	6854      	ldr	r4, [r2, #4]
90007114:	42a5      	cmp	r5, r4
90007116:	d103      	bne.n	90007120 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
90007118:	6895      	ldr	r5, [r2, #8]
9000711a:	6944      	ldr	r4, [r0, #20]
9000711c:	42a5      	cmp	r5, r4
9000711e:	d022      	beq.n	90007166 <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
90007120:	6914      	ldr	r4, [r2, #16]
90007122:	42b4      	cmp	r4, r6
90007124:	d107      	bne.n	90007136 <inc_lock+0x32>
90007126:	6957      	ldr	r7, [r2, #20]
90007128:	6885      	ldr	r5, [r0, #8]
9000712a:	42af      	cmp	r7, r5
9000712c:	d103      	bne.n	90007136 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
9000712e:	6997      	ldr	r7, [r2, #24]
90007130:	6945      	ldr	r5, [r0, #20]
90007132:	42af      	cmp	r7, r5
90007134:	d021      	beq.n	9000717a <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
90007136:	b10b      	cbz	r3, 9000713c <inc_lock+0x38>
90007138:	bb0c      	cbnz	r4, 9000717e <inc_lock+0x7a>
9000713a:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
9000713c:	011d      	lsls	r5, r3, #4
9000713e:	eb02 1403 	add.w	r4, r2, r3, lsl #4
90007142:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
90007144:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
90007146:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
90007148:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
9000714a:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
9000714c:	2000      	movs	r0, #0
9000714e:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
90007150:	b981      	cbnz	r1, 90007174 <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
90007152:	eb02 1103 	add.w	r1, r2, r3, lsl #4
90007156:	8989      	ldrh	r1, [r1, #12]
90007158:	3101      	adds	r1, #1
9000715a:	b289      	uxth	r1, r1
9000715c:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
90007160:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
90007162:	8191      	strh	r1, [r2, #12]
}
90007164:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
90007166:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
90007168:	eb02 1003 	add.w	r0, r2, r3, lsl #4
9000716c:	8980      	ldrh	r0, [r0, #12]
9000716e:	2900      	cmp	r1, #0
90007170:	d0ef      	beq.n	90007152 <inc_lock+0x4e>
90007172:	b920      	cbnz	r0, 9000717e <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
90007174:	f44f 7180 	mov.w	r1, #256	; 0x100
90007178:	e7f0      	b.n	9000715c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
9000717a:	2301      	movs	r3, #1
9000717c:	e7f4      	b.n	90007168 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
9000717e:	2000      	movs	r0, #0
90007180:	e7f0      	b.n	90007164 <inc_lock+0x60>
90007182:	bf00      	nop
90007184:	20000730 	.word	0x20000730

90007188 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
90007188:	3801      	subs	r0, #1
9000718a:	2801      	cmp	r0, #1
9000718c:	d815      	bhi.n	900071ba <dec_lock+0x32>
		n = Files[i].ctr;
9000718e:	4a0c      	ldr	r2, [pc, #48]	; (900071c0 <dec_lock+0x38>)
90007190:	0101      	lsls	r1, r0, #4
90007192:	eb02 1000 	add.w	r0, r2, r0, lsl #4
90007196:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
90007198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000719c:	d104      	bne.n	900071a8 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
9000719e:	2300      	movs	r3, #0
900071a0:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
900071a2:	2000      	movs	r0, #0
900071a4:	5050      	str	r0, [r2, r1]
900071a6:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
900071a8:	2b00      	cmp	r3, #0
900071aa:	d0fa      	beq.n	900071a2 <dec_lock+0x1a>
900071ac:	3b01      	subs	r3, #1
900071ae:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
900071b0:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
900071b2:	2b00      	cmp	r3, #0
900071b4:	d0f5      	beq.n	900071a2 <dec_lock+0x1a>
		res = FR_OK;
900071b6:	2000      	movs	r0, #0
900071b8:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
900071ba:	2002      	movs	r0, #2
	}
	return res;
}
900071bc:	4770      	bx	lr
900071be:	bf00      	nop
900071c0:	20000730 	.word	0x20000730

900071c4 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
900071c4:	4b05      	ldr	r3, [pc, #20]	; (900071dc <clear_lock+0x18>)
900071c6:	681a      	ldr	r2, [r3, #0]
900071c8:	4290      	cmp	r0, r2
900071ca:	bf04      	itt	eq
900071cc:	2200      	moveq	r2, #0
900071ce:	601a      	streq	r2, [r3, #0]
900071d0:	691a      	ldr	r2, [r3, #16]
900071d2:	4290      	cmp	r0, r2
900071d4:	bf04      	itt	eq
900071d6:	2200      	moveq	r2, #0
900071d8:	611a      	streq	r2, [r3, #16]
	}
}
900071da:	4770      	bx	lr
900071dc:	20000730 	.word	0x20000730

900071e0 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
900071e0:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
900071e2:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
900071e4:	3b02      	subs	r3, #2
900071e6:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
900071e8:	bf83      	ittte	hi
900071ea:	8943      	ldrhhi	r3, [r0, #10]
900071ec:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
900071ee:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
900071f2:	2000      	movls	r0, #0
}
900071f4:	4770      	bx	lr

900071f6 <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
900071f6:	6802      	ldr	r2, [r0, #0]
900071f8:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
900071fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
900071fc:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
900071fe:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
90007200:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
90007204:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
90007206:	b130      	cbz	r0, 90007216 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
90007208:	4281      	cmp	r1, r0
9000720a:	d302      	bcc.n	90007212 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
9000720c:	1a09      	subs	r1, r1, r0
9000720e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
90007210:	e7f8      	b.n	90007204 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
90007212:	6858      	ldr	r0, [r3, #4]
90007214:	4408      	add	r0, r1
}
90007216:	4770      	bx	lr

90007218 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
90007218:	f3c2 2307 	ubfx	r3, r2, #8, #8
9000721c:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
9000721e:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
90007220:	7803      	ldrb	r3, [r0, #0]
90007222:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
90007224:	bf01      	itttt	eq
90007226:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
90007228:	750a      	strbeq	r2, [r1, #20]
9000722a:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
9000722c:	754a      	strbeq	r2, [r1, #21]
	}
}
9000722e:	4770      	bx	lr

90007230 <sum_sfn>:
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
90007230:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
90007234:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
90007236:	01d3      	lsls	r3, r2, #7
90007238:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
9000723c:	f810 2b01 	ldrb.w	r2, [r0], #1
90007240:	fa52 f383 	uxtab	r3, r2, r3
	} while (--n);
90007244:	4288      	cmp	r0, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
90007246:	b2da      	uxtb	r2, r3
	} while (--n);
90007248:	d1f5      	bne.n	90007236 <sum_sfn+0x6>
	return sum;
}
9000724a:	4610      	mov	r0, r2
9000724c:	4770      	bx	lr

9000724e <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
9000724e:	6803      	ldr	r3, [r0, #0]
{
90007250:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
90007252:	b153      	cbz	r3, 9000726a <get_ldnumber+0x1c>
90007254:	4619      	mov	r1, r3
90007256:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
90007258:	f811 4b01 	ldrb.w	r4, [r1], #1
9000725c:	2c1f      	cmp	r4, #31
9000725e:	d910      	bls.n	90007282 <get_ldnumber+0x34>
90007260:	2c3a      	cmp	r4, #58	; 0x3a
90007262:	d1f8      	bne.n	90007256 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
90007264:	1c59      	adds	r1, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
90007266:	428a      	cmp	r2, r1
90007268:	d002      	beq.n	90007270 <get_ldnumber+0x22>
	int vol = -1;
9000726a:	f04f 33ff 	mov.w	r3, #4294967295
9000726e:	e006      	b.n	9000727e <get_ldnumber+0x30>
			i = *tp++ - '0';
90007270:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
90007272:	3b30      	subs	r3, #48	; 0x30
90007274:	b2d9      	uxtb	r1, r3
90007276:	2901      	cmp	r1, #1
90007278:	d8f7      	bhi.n	9000726a <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
9000727a:	3201      	adds	r2, #1
9000727c:	6002      	str	r2, [r0, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
9000727e:	4618      	mov	r0, r3
90007280:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
90007282:	2300      	movs	r3, #0
90007284:	e7fb      	b.n	9000727e <get_ldnumber+0x30>

90007286 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
90007286:	b538      	push	{r3, r4, r5, lr}
90007288:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
9000728a:	4604      	mov	r4, r0
9000728c:	b918      	cbnz	r0, 90007296 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
9000728e:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
90007290:	2300      	movs	r3, #0
90007292:	602b      	str	r3, [r5, #0]
	return res;
}
90007294:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
90007296:	6803      	ldr	r3, [r0, #0]
90007298:	2b00      	cmp	r3, #0
9000729a:	d0f8      	beq.n	9000728e <validate+0x8>
9000729c:	781a      	ldrb	r2, [r3, #0]
9000729e:	2a00      	cmp	r2, #0
900072a0:	d0f5      	beq.n	9000728e <validate+0x8>
900072a2:	8881      	ldrh	r1, [r0, #4]
900072a4:	88da      	ldrh	r2, [r3, #6]
900072a6:	4291      	cmp	r1, r2
900072a8:	d1f1      	bne.n	9000728e <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
900072aa:	7858      	ldrb	r0, [r3, #1]
900072ac:	f7ff fe9a 	bl	90006fe4 <disk_status>
900072b0:	f010 0001 	ands.w	r0, r0, #1
900072b4:	d1eb      	bne.n	9000728e <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
900072b6:	6823      	ldr	r3, [r4, #0]
900072b8:	e7eb      	b.n	90007292 <validate+0xc>

900072ba <get_fileinfo>:
{
900072ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
900072be:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
900072c0:	f8d0 8000 	ldr.w	r8, [r0]
{
900072c4:	4606      	mov	r6, r0
900072c6:	460c      	mov	r4, r1
	fno->fname[0] = 0;		/* Invaidate file info */
900072c8:	758d      	strb	r5, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
900072ca:	69c3      	ldr	r3, [r0, #28]
900072cc:	2b00      	cmp	r3, #0
900072ce:	d059      	beq.n	90007384 <get_fileinfo+0xca>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
900072d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
900072d2:	3301      	adds	r3, #1
900072d4:	d00a      	beq.n	900072ec <get_fileinfo+0x32>
900072d6:	f101 0715 	add.w	r7, r1, #21
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
900072da:	f8d8 300c 	ldr.w	r3, [r8, #12]
900072de:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
900072e2:	2800      	cmp	r0, #0
900072e4:	d150      	bne.n	90007388 <get_fileinfo+0xce>
			fno->fname[i] = 0;	/* Terminate the LFN */
900072e6:	4425      	add	r5, r4
900072e8:	2300      	movs	r3, #0
900072ea:	75ab      	strb	r3, [r5, #22]
		c = (TCHAR)dp->dir[i++];
900072ec:	6a31      	ldr	r1, [r6, #32]
	i = j = 0;
900072ee:	2300      	movs	r3, #0
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
900072f0:	7da5      	ldrb	r5, [r4, #22]
			fno->altname[j++] = '.';
900072f2:	272e      	movs	r7, #46	; 0x2e
900072f4:	1e4e      	subs	r6, r1, #1
	i = j = 0;
900072f6:	4618      	mov	r0, r3
		c = (TCHAR)dp->dir[i++];
900072f8:	f816 2f01 	ldrb.w	r2, [r6, #1]!
900072fc:	3001      	adds	r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
900072fe:	2a20      	cmp	r2, #32
90007300:	d026      	beq.n	90007350 <get_fileinfo+0x96>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
90007302:	2a05      	cmp	r2, #5
90007304:	bf08      	it	eq
90007306:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
90007308:	2809      	cmp	r0, #9
9000730a:	d107      	bne.n	9000731c <get_fileinfo+0x62>
			if (!lfv) fno->fname[j] = '.';
9000730c:	eb04 0c03 	add.w	ip, r4, r3
90007310:	b90d      	cbnz	r5, 90007316 <get_fileinfo+0x5c>
90007312:	f88c 7016 	strb.w	r7, [ip, #22]
			fno->altname[j++] = '.';
90007316:	3301      	adds	r3, #1
90007318:	f88c 7009 	strb.w	r7, [ip, #9]
		fno->altname[j] = c;
9000731c:	eb04 0c03 	add.w	ip, r4, r3
90007320:	f88c 2009 	strb.w	r2, [ip, #9]
		if (!lfv) {
90007324:	b99d      	cbnz	r5, 9000734e <get_fileinfo+0x94>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
90007326:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
9000732a:	f1be 0f19 	cmp.w	lr, #25
9000732e:	d80c      	bhi.n	9000734a <get_fileinfo+0x90>
90007330:	2808      	cmp	r0, #8
90007332:	f891 800c 	ldrb.w	r8, [r1, #12]
90007336:	bf8c      	ite	hi
90007338:	f04f 0e10 	movhi.w	lr, #16
9000733c:	f04f 0e08 	movls.w	lr, #8
90007340:	ea18 0f0e 	tst.w	r8, lr
				c += 0x20;			/* To lower */
90007344:	bf1c      	itt	ne
90007346:	3220      	addne	r2, #32
90007348:	b2d2      	uxtbne	r2, r2
			fno->fname[j] = c;
9000734a:	f88c 2016 	strb.w	r2, [ip, #22]
		j++;
9000734e:	3301      	adds	r3, #1
	while (i < 11) {		/* Copy name body and extension */
90007350:	280b      	cmp	r0, #11
90007352:	d1d1      	bne.n	900072f8 <get_fileinfo+0x3e>
	if (!lfv) {
90007354:	b92d      	cbnz	r5, 90007362 <get_fileinfo+0xa8>
		fno->fname[j] = 0;
90007356:	18e2      	adds	r2, r4, r3
90007358:	7595      	strb	r5, [r2, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
9000735a:	7b0a      	ldrb	r2, [r1, #12]
9000735c:	2a00      	cmp	r2, #0
9000735e:	bf08      	it	eq
90007360:	2300      	moveq	r3, #0
	fno->altname[j] = 0;	/* Terminate the SFN */
90007362:	4423      	add	r3, r4
90007364:	2200      	movs	r2, #0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
90007366:	f101 001c 	add.w	r0, r1, #28
	fno->altname[j] = 0;	/* Terminate the SFN */
9000736a:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
9000736c:	7acb      	ldrb	r3, [r1, #11]
9000736e:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
90007370:	f7ff fe7e 	bl	90007070 <ld_dword>
90007374:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
90007376:	f101 0016 	add.w	r0, r1, #22
9000737a:	f7ff fe79 	bl	90007070 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
9000737e:	80e0      	strh	r0, [r4, #6]
90007380:	0c00      	lsrs	r0, r0, #16
90007382:	80a0      	strh	r0, [r4, #4]
}
90007384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				w = ff_convert(w, 0);		/* Unicode -> OEM */
90007388:	2100      	movs	r1, #0
9000738a:	f001 fcd7 	bl	90008d3c <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
9000738e:	b130      	cbz	r0, 9000739e <get_fileinfo+0xe4>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
90007390:	3501      	adds	r5, #1
90007392:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90007396:	d002      	beq.n	9000739e <get_fileinfo+0xe4>
				fno->fname[i++] = (TCHAR)w;
90007398:	f807 0f01 	strb.w	r0, [r7, #1]!
9000739c:	e79d      	b.n	900072da <get_fileinfo+0x20>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
9000739e:	2500      	movs	r5, #0
900073a0:	e7a1      	b.n	900072e6 <get_fileinfo+0x2c>

900073a2 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
900073a2:	3801      	subs	r0, #1
900073a4:	440a      	add	r2, r1
			*d++ = *s++;
900073a6:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
900073aa:	4291      	cmp	r1, r2
			*d++ = *s++;
900073ac:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
900073b0:	d1f9      	bne.n	900073a6 <mem_cpy.part.0+0x4>
}
900073b2:	4770      	bx	lr

900073b4 <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
900073b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
900073b8:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
900073ba:	f100 0834 	add.w	r8, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
900073be:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
900073c0:	2301      	movs	r3, #1
900073c2:	4632      	mov	r2, r6
900073c4:	4641      	mov	r1, r8
900073c6:	7840      	ldrb	r0, [r0, #1]
900073c8:	f7ff fe34 	bl	90007034 <disk_write>
900073cc:	4605      	mov	r5, r0
900073ce:	b9a8      	cbnz	r0, 900073fc <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
900073d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
900073d2:	69e2      	ldr	r2, [r4, #28]
900073d4:	1af3      	subs	r3, r6, r3
			fs->wflag = 0;
900073d6:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
900073d8:	4293      	cmp	r3, r2
900073da:	d202      	bcs.n	900073e2 <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
900073dc:	78a7      	ldrb	r7, [r4, #2]
900073de:	2f01      	cmp	r7, #1
900073e0:	d802      	bhi.n	900073e8 <sync_window.part.0+0x34>
}
900073e2:	4628      	mov	r0, r5
900073e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
900073e8:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
900073ea:	4641      	mov	r1, r8
900073ec:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
900073ee:	3f01      	subs	r7, #1
					wsect += fs->fsize;
900073f0:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
900073f2:	2301      	movs	r3, #1
900073f4:	4632      	mov	r2, r6
900073f6:	f7ff fe1d 	bl	90007034 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
900073fa:	e7f0      	b.n	900073de <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
900073fc:	2501      	movs	r5, #1
900073fe:	e7f0      	b.n	900073e2 <sync_window.part.0+0x2e>

90007400 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
90007400:	78c3      	ldrb	r3, [r0, #3]
90007402:	b10b      	cbz	r3, 90007408 <sync_window+0x8>
90007404:	f7ff bfd6 	b.w	900073b4 <sync_window.part.0>
}
90007408:	4618      	mov	r0, r3
9000740a:	4770      	bx	lr

9000740c <move_window>:
{
9000740c:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
9000740e:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
90007410:	4605      	mov	r5, r0
90007412:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
90007414:	428b      	cmp	r3, r1
90007416:	d010      	beq.n	9000743a <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
90007418:	f7ff fff2 	bl	90007400 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
9000741c:	b960      	cbnz	r0, 90007438 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
9000741e:	4622      	mov	r2, r4
90007420:	2301      	movs	r3, #1
90007422:	f105 0134 	add.w	r1, r5, #52	; 0x34
90007426:	7868      	ldrb	r0, [r5, #1]
90007428:	f7ff fdf6 	bl	90007018 <disk_read>
				res = FR_DISK_ERR;
9000742c:	2800      	cmp	r0, #0
9000742e:	bf1c      	itt	ne
90007430:	f04f 34ff 	movne.w	r4, #4294967295
90007434:	2001      	movne	r0, #1
			fs->winsect = sector;
90007436:	632c      	str	r4, [r5, #48]	; 0x30
}
90007438:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
9000743a:	2000      	movs	r0, #0
9000743c:	e7fc      	b.n	90007438 <move_window+0x2c>
	...

90007440 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
90007440:	2300      	movs	r3, #0
{
90007442:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
90007444:	70c3      	strb	r3, [r0, #3]
90007446:	f04f 33ff 	mov.w	r3, #4294967295
{
9000744a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
9000744c:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
9000744e:	f7ff ffdd 	bl	9000740c <move_window>
90007452:	4603      	mov	r3, r0
90007454:	bb18      	cbnz	r0, 9000749e <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
90007456:	f8b4 1232 	ldrh.w	r1, [r4, #562]	; 0x232
9000745a:	f64a 2255 	movw	r2, #43605	; 0xaa55
9000745e:	4291      	cmp	r1, r2
90007460:	d11f      	bne.n	900074a2 <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
90007462:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
90007466:	2ae9      	cmp	r2, #233	; 0xe9
90007468:	d005      	beq.n	90007476 <check_fs+0x36>
9000746a:	6b62      	ldr	r2, [r4, #52]	; 0x34
9000746c:	490f      	ldr	r1, [pc, #60]	; (900074ac <check_fs+0x6c>)
9000746e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90007472:	428a      	cmp	r2, r1
90007474:	d117      	bne.n	900074a6 <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
90007476:	f104 006a 	add.w	r0, r4, #106	; 0x6a
9000747a:	4a0d      	ldr	r2, [pc, #52]	; (900074b0 <check_fs+0x70>)
9000747c:	f7ff fdf8 	bl	90007070 <ld_dword>
90007480:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
90007484:	4290      	cmp	r0, r2
90007486:	d008      	beq.n	9000749a <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
90007488:	4b0a      	ldr	r3, [pc, #40]	; (900074b4 <check_fs+0x74>)
9000748a:	f104 0086 	add.w	r0, r4, #134	; 0x86
9000748e:	f7ff fdef 	bl	90007070 <ld_dword>
90007492:	1ac0      	subs	r0, r0, r3
90007494:	bf18      	it	ne
90007496:	2001      	movne	r0, #1
90007498:	0043      	lsls	r3, r0, #1
}
9000749a:	4618      	mov	r0, r3
9000749c:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
9000749e:	2304      	movs	r3, #4
900074a0:	e7fb      	b.n	9000749a <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
900074a2:	2303      	movs	r3, #3
900074a4:	e7f9      	b.n	9000749a <check_fs+0x5a>
	return 2;
900074a6:	2302      	movs	r3, #2
900074a8:	e7f7      	b.n	9000749a <check_fs+0x5a>
900074aa:	bf00      	nop
900074ac:	009000eb 	.word	0x009000eb
900074b0:	00544146 	.word	0x00544146
900074b4:	33544146 	.word	0x33544146

900074b8 <find_volume>:
{
900074b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
900074bc:	2300      	movs	r3, #0
{
900074be:	4688      	mov	r8, r1
900074c0:	4615      	mov	r5, r2
	*rfs = 0;
900074c2:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
900074c4:	f7ff fec3 	bl	9000724e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
900074c8:	1e07      	subs	r7, r0, #0
900074ca:	f2c0 8116 	blt.w	900076fa <find_volume+0x242>
	fs = FatFs[vol];					/* Get pointer to the file system object */
900074ce:	4e8e      	ldr	r6, [pc, #568]	; (90007708 <find_volume+0x250>)
900074d0:	eb06 0387 	add.w	r3, r6, r7, lsl #2
900074d4:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
900074d6:	2c00      	cmp	r4, #0
900074d8:	f000 8111 	beq.w	900076fe <find_volume+0x246>
	*rfs = fs;							/* Return pointer to the file system object */
900074dc:	f8c8 4000 	str.w	r4, [r8]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
900074e0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
900074e4:	7823      	ldrb	r3, [r4, #0]
900074e6:	b16b      	cbz	r3, 90007504 <find_volume+0x4c>
		stat = disk_status(fs->drv);
900074e8:	7860      	ldrb	r0, [r4, #1]
900074ea:	f7ff fd7b 	bl	90006fe4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
900074ee:	07c1      	lsls	r1, r0, #31
900074f0:	d408      	bmi.n	90007504 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
900074f2:	b11d      	cbz	r5, 900074fc <find_volume+0x44>
900074f4:	f010 0504 	ands.w	r5, r0, #4
900074f8:	d000      	beq.n	900074fc <find_volume+0x44>
				return FR_WRITE_PROTECTED;
900074fa:	250a      	movs	r5, #10
}
900074fc:	4628      	mov	r0, r5
900074fe:	b004      	add	sp, #16
90007500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
90007504:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
90007506:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
90007508:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
9000750a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
9000750c:	f7ff fd74 	bl	90006ff8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
90007510:	07c2      	lsls	r2, r0, #31
90007512:	f100 80f6 	bmi.w	90007702 <find_volume+0x24a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
90007516:	b10d      	cbz	r5, 9000751c <find_volume+0x64>
90007518:	0743      	lsls	r3, r0, #29
9000751a:	d4ee      	bmi.n	900074fa <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
9000751c:	2100      	movs	r1, #0
9000751e:	4620      	mov	r0, r4
90007520:	f7ff ff8e 	bl	90007440 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
90007524:	2802      	cmp	r0, #2
90007526:	f040 80ce 	bne.w	900076c6 <find_volume+0x20e>
9000752a:	466d      	mov	r5, sp
9000752c:	f504 73fd 	add.w	r3, r4, #506	; 0x1fa
90007530:	f204 213a 	addw	r1, r4, #570	; 0x23a
90007534:	462a      	mov	r2, r5
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
90007536:	f813 0c04 	ldrb.w	r0, [r3, #-4]
9000753a:	b110      	cbz	r0, 90007542 <find_volume+0x8a>
9000753c:	4618      	mov	r0, r3
9000753e:	f7ff fd97 	bl	90007070 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
90007542:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
90007544:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
90007548:	428b      	cmp	r3, r1
9000754a:	d1f4      	bne.n	90007536 <find_volume+0x7e>
9000754c:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
90007550:	f855 7b04 	ldr.w	r7, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
90007554:	2f00      	cmp	r7, #0
90007556:	f000 80ab 	beq.w	900076b0 <find_volume+0x1f8>
9000755a:	4639      	mov	r1, r7
9000755c:	4620      	mov	r0, r4
9000755e:	f7ff ff6f 	bl	90007440 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
90007562:	2801      	cmp	r0, #1
90007564:	f200 80a5 	bhi.w	900076b2 <find_volume+0x1fa>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
90007568:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
9000756c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90007570:	f040 80ad 	bne.w	900076ce <find_volume+0x216>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
90007574:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
90007578:	b921      	cbnz	r1, 90007584 <find_volume+0xcc>
9000757a:	f104 0058 	add.w	r0, r4, #88	; 0x58
9000757e:	f7ff fd77 	bl	90007070 <ld_dword>
90007582:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
90007584:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
		fs->fsize = fasize;
90007588:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
9000758a:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
9000758c:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
9000758e:	2b01      	cmp	r3, #1
90007590:	f200 809d 	bhi.w	900076ce <find_volume+0x216>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
90007594:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
90007598:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
9000759a:	2d00      	cmp	r5, #0
9000759c:	f000 8097 	beq.w	900076ce <find_volume+0x216>
900075a0:	1e6b      	subs	r3, r5, #1
900075a2:	422b      	tst	r3, r5
900075a4:	f040 8093 	bne.w	900076ce <find_volume+0x216>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
900075a8:	f8b4 8045 	ldrh.w	r8, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
900075ac:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
900075b0:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
900075b4:	f040 808b 	bne.w	900076ce <find_volume+0x216>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
900075b8:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
900075bc:	b918      	cbnz	r0, 900075c6 <find_volume+0x10e>
900075be:	f104 0054 	add.w	r0, r4, #84	; 0x54
900075c2:	f7ff fd55 	bl	90007070 <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
900075c6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
900075ca:	2b00      	cmp	r3, #0
900075cc:	d07f      	beq.n	900076ce <find_volume+0x216>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
900075ce:	fb01 fe02 	mul.w	lr, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
900075d2:	eb03 1c18 	add.w	ip, r3, r8, lsr #4
900075d6:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
900075d8:	4560      	cmp	r0, ip
900075da:	d378      	bcc.n	900076ce <find_volume+0x216>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
900075dc:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
900075e0:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
900075e2:	fbb0 f2f5 	udiv	r2, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
900075e6:	d372      	bcc.n	900076ce <find_volume+0x216>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
900075e8:	f64f 70f5 	movw	r0, #65525	; 0xfff5
900075ec:	4282      	cmp	r2, r0
900075ee:	d872      	bhi.n	900076d6 <find_volume+0x21e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
900075f0:	f640 75f5 	movw	r5, #4085	; 0xff5
900075f4:	42aa      	cmp	r2, r5
900075f6:	bf8c      	ite	hi
900075f8:	2502      	movhi	r5, #2
900075fa:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
900075fc:	3202      	adds	r2, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
900075fe:	443b      	add	r3, r7
		fs->database = bsect + sysect;					/* Data start sector */
90007600:	eb0c 0007 	add.w	r0, ip, r7
		if (fmt == FS_FAT32) {
90007604:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
90007606:	61a2      	str	r2, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
90007608:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
9000760a:	6263      	str	r3, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
9000760c:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
9000760e:	d164      	bne.n	900076da <find_volume+0x222>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
90007610:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
90007614:	ea58 0303 	orrs.w	r3, r8, r3
90007618:	d159      	bne.n	900076ce <find_volume+0x216>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
9000761a:	0092      	lsls	r2, r2, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
9000761c:	f104 0060 	add.w	r0, r4, #96	; 0x60
90007620:	f7ff fd26 	bl	90007070 <ld_dword>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
90007624:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
90007628:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
9000762a:	ebb1 2f52 	cmp.w	r1, r2, lsr #9
9000762e:	d34e      	bcc.n	900076ce <find_volume+0x216>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
90007630:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
90007634:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
90007636:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
9000763a:	f04f 0380 	mov.w	r3, #128	; 0x80
9000763e:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
90007640:	d12b      	bne.n	9000769a <find_volume+0x1e2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
90007642:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
90007646:	2b01      	cmp	r3, #1
90007648:	d127      	bne.n	9000769a <find_volume+0x1e2>
			&& move_window(fs, bsect + 1) == FR_OK)
9000764a:	1c79      	adds	r1, r7, #1
9000764c:	4620      	mov	r0, r4
9000764e:	f7ff fedd 	bl	9000740c <move_window>
90007652:	bb10      	cbnz	r0, 9000769a <find_volume+0x1e2>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
90007654:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
90007658:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
9000765c:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
9000765e:	429a      	cmp	r2, r3
90007660:	d11b      	bne.n	9000769a <find_volume+0x1e2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
90007662:	4b2a      	ldr	r3, [pc, #168]	; (9000770c <find_volume+0x254>)
90007664:	f104 0034 	add.w	r0, r4, #52	; 0x34
90007668:	f7ff fd02 	bl	90007070 <ld_dword>
9000766c:	4298      	cmp	r0, r3
9000766e:	d114      	bne.n	9000769a <find_volume+0x1e2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
90007670:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
90007674:	f504 7006 	add.w	r0, r4, #536	; 0x218
90007678:	f7ff fcfa 	bl	90007070 <ld_dword>
9000767c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
90007680:	3320      	adds	r3, #32
90007682:	4298      	cmp	r0, r3
90007684:	d109      	bne.n	9000769a <find_volume+0x1e2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
90007686:	f504 7007 	add.w	r0, r4, #540	; 0x21c
9000768a:	f7ff fcf1 	bl	90007070 <ld_dword>
9000768e:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
90007690:	f504 7008 	add.w	r0, r4, #544	; 0x220
90007694:	f7ff fcec 	bl	90007070 <ld_dword>
90007698:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
9000769a:	8d33      	ldrh	r3, [r6, #40]	; 0x28
	clear_lock(fs);
9000769c:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
9000769e:	7025      	strb	r5, [r4, #0]
	return FR_OK;
900076a0:	2500      	movs	r5, #0
	fs->id = ++Fsid;		/* File system mount ID */
900076a2:	3301      	adds	r3, #1
900076a4:	b29b      	uxth	r3, r3
900076a6:	80e3      	strh	r3, [r4, #6]
900076a8:	8533      	strh	r3, [r6, #40]	; 0x28
	clear_lock(fs);
900076aa:	f7ff fd8b 	bl	900071c4 <clear_lock>
	return FR_OK;
900076ae:	e725      	b.n	900074fc <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
900076b0:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
900076b2:	f108 0801 	add.w	r8, r8, #1
900076b6:	f1b8 0f04 	cmp.w	r8, #4
900076ba:	f47f af49 	bne.w	90007550 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
900076be:	2804      	cmp	r0, #4
900076c0:	d105      	bne.n	900076ce <find_volume+0x216>
900076c2:	2501      	movs	r5, #1
900076c4:	e71a      	b.n	900074fc <find_volume+0x44>
900076c6:	2804      	cmp	r0, #4
900076c8:	d0fb      	beq.n	900076c2 <find_volume+0x20a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
900076ca:	2801      	cmp	r0, #1
900076cc:	d901      	bls.n	900076d2 <find_volume+0x21a>
900076ce:	250d      	movs	r5, #13
900076d0:	e714      	b.n	900074fc <find_volume+0x44>
	bsect = 0;
900076d2:	2700      	movs	r7, #0
900076d4:	e748      	b.n	90007568 <find_volume+0xb0>
		fmt = FS_FAT32;
900076d6:	2503      	movs	r5, #3
900076d8:	e790      	b.n	900075fc <find_volume+0x144>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
900076da:	f1b8 0f00 	cmp.w	r8, #0
900076de:	d0f6      	beq.n	900076ce <find_volume+0x216>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
900076e0:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
900076e2:	eb03 000e 	add.w	r0, r3, lr
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
900076e6:	ea4f 0342 	mov.w	r3, r2, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
900076ea:	bf1b      	ittet	ne
900076ec:	189b      	addne	r3, r3, r2
900076ee:	f002 0201 	andne.w	r2, r2, #1
900076f2:	461a      	moveq	r2, r3
900076f4:	eb02 0253 	addne.w	r2, r2, r3, lsr #1
900076f8:	e794      	b.n	90007624 <find_volume+0x16c>
	if (vol < 0) return FR_INVALID_DRIVE;
900076fa:	250b      	movs	r5, #11
900076fc:	e6fe      	b.n	900074fc <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
900076fe:	250c      	movs	r5, #12
90007700:	e6fc      	b.n	900074fc <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
90007702:	2503      	movs	r5, #3
90007704:	e6fa      	b.n	900074fc <find_volume+0x44>
90007706:	bf00      	nop
90007708:	20000730 	.word	0x20000730
9000770c:	41615252 	.word	0x41615252

90007710 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
90007710:	2901      	cmp	r1, #1
{
90007712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007716:	4606      	mov	r6, r0
90007718:	460c      	mov	r4, r1
9000771a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
9000771c:	d974      	bls.n	90007808 <put_fat+0xf8>
9000771e:	6983      	ldr	r3, [r0, #24]
90007720:	428b      	cmp	r3, r1
90007722:	d971      	bls.n	90007808 <put_fat+0xf8>
		switch (fs->fs_type) {
90007724:	7803      	ldrb	r3, [r0, #0]
90007726:	2b02      	cmp	r3, #2
90007728:	d040      	beq.n	900077ac <put_fat+0x9c>
9000772a:	2b03      	cmp	r3, #3
9000772c:	d051      	beq.n	900077d2 <put_fat+0xc2>
9000772e:	2b01      	cmp	r3, #1
90007730:	d16a      	bne.n	90007808 <put_fat+0xf8>
			bc = (UINT)clst; bc += bc / 2;
90007732:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
90007736:	6a41      	ldr	r1, [r0, #36]	; 0x24
90007738:	eb01 2158 	add.w	r1, r1, r8, lsr #9
9000773c:	f7ff fe66 	bl	9000740c <move_window>
90007740:	4605      	mov	r5, r0
			if (res != FR_OK) break;
90007742:	bb40      	cbnz	r0, 90007796 <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
90007744:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
90007748:	f106 0934 	add.w	r9, r6, #52	; 0x34
9000774c:	f108 0a01 	add.w	sl, r8, #1
90007750:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
90007754:	bf18      	it	ne
90007756:	013b      	lslne	r3, r7, #4
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
90007758:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
9000775a:	bf17      	itett	ne
9000775c:	f819 2008 	ldrbne.w	r2, [r9, r8]
90007760:	b2fb      	uxtbeq	r3, r7
90007762:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
90007766:	f002 020f 	andne.w	r2, r2, #15
9000776a:	bf18      	it	ne
9000776c:	4313      	orrne	r3, r2
9000776e:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
90007772:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
90007774:	6a71      	ldr	r1, [r6, #36]	; 0x24
			fs->wflag = 1;
90007776:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
90007778:	eb01 215a 	add.w	r1, r1, sl, lsr #9
9000777c:	f7ff fe46 	bl	9000740c <move_window>
			if (res != FR_OK) break;
90007780:	4605      	mov	r5, r0
90007782:	b940      	cbnz	r0, 90007796 <put_fat+0x86>
			p = fs->win + bc % SS(fs);
90007784:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
90007788:	b144      	cbz	r4, 9000779c <put_fat+0x8c>
9000778a:	f3c7 1707 	ubfx	r7, r7, #4, #8
9000778e:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
90007792:	2301      	movs	r3, #1
90007794:	70f3      	strb	r3, [r6, #3]
}
90007796:	4628      	mov	r0, r5
90007798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
9000779c:	f819 300a 	ldrb.w	r3, [r9, sl]
900077a0:	f3c7 2703 	ubfx	r7, r7, #8, #4
900077a4:	f023 030f 	bic.w	r3, r3, #15
900077a8:	431f      	orrs	r7, r3
900077aa:	e7f0      	b.n	9000778e <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
900077ac:	6a41      	ldr	r1, [r0, #36]	; 0x24
900077ae:	eb01 2114 	add.w	r1, r1, r4, lsr #8
900077b2:	f7ff fe2b 	bl	9000740c <move_window>
			if (res != FR_OK) break;
900077b6:	4605      	mov	r5, r0
900077b8:	2800      	cmp	r0, #0
900077ba:	d1ec      	bne.n	90007796 <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
900077bc:	0064      	lsls	r4, r4, #1
900077be:	f106 0334 	add.w	r3, r6, #52	; 0x34
900077c2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
900077c6:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
900077c8:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
900077ca:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
900077ce:	7057      	strb	r7, [r2, #1]
			fs->wflag = 1;
900077d0:	e7df      	b.n	90007792 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
900077d2:	6a41      	ldr	r1, [r0, #36]	; 0x24
900077d4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
900077d8:	f7ff fe18 	bl	9000740c <move_window>
			if (res != FR_OK) break;
900077dc:	4605      	mov	r5, r0
900077de:	2800      	cmp	r0, #0
900077e0:	d1d9      	bne.n	90007796 <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
900077e2:	00a4      	lsls	r4, r4, #2
900077e4:	f106 0334 	add.w	r3, r6, #52	; 0x34
900077e8:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
900077ec:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
900077f0:	4423      	add	r3, r4
900077f2:	4618      	mov	r0, r3
900077f4:	f7ff fc3c 	bl	90007070 <ld_dword>
900077f8:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
900077fc:	ea47 0100 	orr.w	r1, r7, r0
90007800:	4618      	mov	r0, r3
90007802:	f7ff fc37 	bl	90007074 <st_dword>
90007806:	e7c4      	b.n	90007792 <put_fat+0x82>
		switch (fs->fs_type) {
90007808:	2502      	movs	r5, #2
9000780a:	e7c4      	b.n	90007796 <put_fat+0x86>

9000780c <sync_fs>:
{
9000780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000780e:	4604      	mov	r4, r0
	res = sync_window(fs);
90007810:	f7ff fdf6 	bl	90007400 <sync_window>
90007814:	4605      	mov	r5, r0
	if (res == FR_OK) {
90007816:	2800      	cmp	r0, #0
90007818:	d142      	bne.n	900078a0 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
9000781a:	7823      	ldrb	r3, [r4, #0]
9000781c:	2b03      	cmp	r3, #3
9000781e:	d137      	bne.n	90007890 <sync_fs+0x84>
90007820:	7927      	ldrb	r7, [r4, #4]
90007822:	2f01      	cmp	r7, #1
90007824:	d134      	bne.n	90007890 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
90007826:	f104 0634 	add.w	r6, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
9000782a:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
9000782c:	4601      	mov	r1, r0
9000782e:	f44f 7200 	mov.w	r2, #512	; 0x200
90007832:	4630      	mov	r0, r6
90007834:	f7ff fc26 	bl	90007084 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
90007838:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
9000783c:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
9000783e:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
90007840:	2172      	movs	r1, #114	; 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
90007842:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
90007846:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
9000784a:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
9000784c:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
90007850:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
90007854:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
90007858:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
9000785a:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
9000785e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
90007862:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
90007866:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
	*ptr++ = (BYTE)val; val >>= 8;
9000786a:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
9000786e:	6961      	ldr	r1, [r4, #20]
90007870:	f7ff fc00 	bl	90007074 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
90007874:	6921      	ldr	r1, [r4, #16]
90007876:	f504 7008 	add.w	r0, r4, #544	; 0x220
9000787a:	f7ff fbfb 	bl	90007074 <st_dword>
			fs->winsect = fs->volbase + 1;
9000787e:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
90007880:	463b      	mov	r3, r7
90007882:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
90007884:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
90007886:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
90007888:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
9000788a:	f7ff fbd3 	bl	90007034 <disk_write>
			fs->fsi_flag = 0;
9000788e:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
90007890:	2200      	movs	r2, #0
90007892:	7860      	ldrb	r0, [r4, #1]
90007894:	4611      	mov	r1, r2
90007896:	f7ff fbdb 	bl	90007050 <disk_ioctl>
9000789a:	3800      	subs	r0, #0
9000789c:	bf18      	it	ne
9000789e:	2001      	movne	r0, #1
}
900078a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

900078a2 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
900078a2:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
900078a4:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
900078a6:	bf04      	itt	eq
900078a8:	8a8a      	ldrheq	r2, [r1, #20]
900078aa:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
900078ae:	4618      	mov	r0, r3
900078b0:	4770      	bx	lr

900078b2 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
900078b2:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
900078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900078b6:	4606      	mov	r6, r0
900078b8:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
900078ba:	d94e      	bls.n	9000795a <get_fat.isra.0+0xa8>
900078bc:	6983      	ldr	r3, [r0, #24]
900078be:	4299      	cmp	r1, r3
900078c0:	d24b      	bcs.n	9000795a <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
900078c2:	7803      	ldrb	r3, [r0, #0]
900078c4:	2b02      	cmp	r3, #2
900078c6:	d029      	beq.n	9000791c <get_fat.isra.0+0x6a>
900078c8:	2b03      	cmp	r3, #3
900078ca:	d034      	beq.n	90007936 <get_fat.isra.0+0x84>
900078cc:	2b01      	cmp	r3, #1
900078ce:	d144      	bne.n	9000795a <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
900078d0:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
900078d4:	6a41      	ldr	r1, [r0, #36]	; 0x24
900078d6:	eb01 2155 	add.w	r1, r1, r5, lsr #9
900078da:	f7ff fd97 	bl	9000740c <move_window>
900078de:	b110      	cbz	r0, 900078e6 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
900078e0:	f04f 30ff 	mov.w	r0, #4294967295
}
900078e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
900078e6:	1c6f      	adds	r7, r5, #1
900078e8:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
900078ec:	6a71      	ldr	r1, [r6, #36]	; 0x24
900078ee:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
900078f0:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
900078f2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
900078f6:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
900078fa:	f7ff fd87 	bl	9000740c <move_window>
900078fe:	2800      	cmp	r0, #0
90007900:	d1ee      	bne.n	900078e0 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
90007902:	f3c7 0708 	ubfx	r7, r7, #0, #9
90007906:	4437      	add	r7, r6
90007908:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
9000790c:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
90007910:	07e3      	lsls	r3, r4, #31
90007912:	bf4c      	ite	mi
90007914:	0900      	lsrmi	r0, r0, #4
90007916:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
9000791a:	e7e3      	b.n	900078e4 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
9000791c:	6a41      	ldr	r1, [r0, #36]	; 0x24
9000791e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
90007922:	f7ff fd73 	bl	9000740c <move_window>
90007926:	2800      	cmp	r0, #0
90007928:	d1da      	bne.n	900078e0 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
9000792a:	0064      	lsls	r4, r4, #1
9000792c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
90007930:	4434      	add	r4, r6
90007932:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
			break;
90007934:	e7d6      	b.n	900078e4 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
90007936:	6a41      	ldr	r1, [r0, #36]	; 0x24
90007938:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
9000793c:	f7ff fd66 	bl	9000740c <move_window>
90007940:	2800      	cmp	r0, #0
90007942:	d1cd      	bne.n	900078e0 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
90007944:	00a4      	lsls	r4, r4, #2
90007946:	f106 0034 	add.w	r0, r6, #52	; 0x34
9000794a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
9000794e:	4420      	add	r0, r4
90007950:	f7ff fb8e 	bl	90007070 <ld_dword>
90007954:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
90007958:	e7c4      	b.n	900078e4 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
9000795a:	2001      	movs	r0, #1
	return val;
9000795c:	e7c2      	b.n	900078e4 <get_fat.isra.0+0x32>

9000795e <remove_chain>:
{
9000795e:	b573      	push	{r0, r1, r4, r5, r6, lr}
90007960:	460c      	mov	r4, r1
90007962:	4606      	mov	r6, r0
90007964:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
90007966:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
90007968:	2c01      	cmp	r4, #1
9000796a:	d92c      	bls.n	900079c6 <remove_chain+0x68>
9000796c:	69ab      	ldr	r3, [r5, #24]
9000796e:	42a3      	cmp	r3, r4
90007970:	d929      	bls.n	900079c6 <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
90007972:	b12a      	cbz	r2, 90007980 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
90007974:	f04f 32ff 	mov.w	r2, #4294967295
90007978:	4628      	mov	r0, r5
9000797a:	f7ff fec9 	bl	90007710 <put_fat>
		if (res != FR_OK) return res;
9000797e:	b940      	cbnz	r0, 90007992 <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
90007980:	4621      	mov	r1, r4
90007982:	6830      	ldr	r0, [r6, #0]
90007984:	9401      	str	r4, [sp, #4]
90007986:	f7ff ff94 	bl	900078b2 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
9000798a:	9901      	ldr	r1, [sp, #4]
9000798c:	4604      	mov	r4, r0
9000798e:	b910      	cbnz	r0, 90007996 <remove_chain+0x38>
	return FR_OK;
90007990:	2000      	movs	r0, #0
}
90007992:	b002      	add	sp, #8
90007994:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
90007996:	2801      	cmp	r0, #1
90007998:	d015      	beq.n	900079c6 <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
9000799a:	1c43      	adds	r3, r0, #1
9000799c:	d015      	beq.n	900079ca <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
9000799e:	2200      	movs	r2, #0
900079a0:	4628      	mov	r0, r5
900079a2:	f7ff feb5 	bl	90007710 <put_fat>
			if (res != FR_OK) return res;
900079a6:	2800      	cmp	r0, #0
900079a8:	d1f3      	bne.n	90007992 <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
900079aa:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
900079ae:	1e91      	subs	r1, r2, #2
900079b0:	428b      	cmp	r3, r1
900079b2:	d205      	bcs.n	900079c0 <remove_chain+0x62>
			fs->free_clst++;
900079b4:	3301      	adds	r3, #1
900079b6:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
900079b8:	792b      	ldrb	r3, [r5, #4]
900079ba:	f043 0301 	orr.w	r3, r3, #1
900079be:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
900079c0:	42a2      	cmp	r2, r4
900079c2:	d8dd      	bhi.n	90007980 <remove_chain+0x22>
900079c4:	e7e4      	b.n	90007990 <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
900079c6:	2002      	movs	r0, #2
900079c8:	e7e3      	b.n	90007992 <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
900079ca:	2001      	movs	r0, #1
900079cc:	e7e1      	b.n	90007992 <remove_chain+0x34>

900079ce <create_chain>:
{
900079ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900079d2:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
900079d4:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
900079d6:	460f      	mov	r7, r1
900079d8:	b971      	cbnz	r1, 900079f8 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
900079da:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
900079dc:	b1ee      	cbz	r6, 90007a1a <create_chain+0x4c>
900079de:	69ab      	ldr	r3, [r5, #24]
900079e0:	42b3      	cmp	r3, r6
900079e2:	bf98      	it	ls
900079e4:	2601      	movls	r6, #1
900079e6:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
900079e8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
900079ea:	69ab      	ldr	r3, [r5, #24]
900079ec:	42a3      	cmp	r3, r4
900079ee:	d817      	bhi.n	90007a20 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
900079f0:	2e01      	cmp	r6, #1
900079f2:	d114      	bne.n	90007a1e <create_chain+0x50>
900079f4:	2400      	movs	r4, #0
900079f6:	e006      	b.n	90007a06 <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
900079f8:	4628      	mov	r0, r5
900079fa:	f7ff ff5a 	bl	900078b2 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
900079fe:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
90007a00:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
90007a02:	d803      	bhi.n	90007a0c <create_chain+0x3e>
90007a04:	2401      	movs	r4, #1
}
90007a06:	4620      	mov	r0, r4
90007a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
90007a0c:	1c43      	adds	r3, r0, #1
90007a0e:	d030      	beq.n	90007a72 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
90007a10:	69ab      	ldr	r3, [r5, #24]
90007a12:	4283      	cmp	r3, r0
90007a14:	d8f7      	bhi.n	90007a06 <create_chain+0x38>
90007a16:	463e      	mov	r6, r7
90007a18:	e7e5      	b.n	900079e6 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
90007a1a:	2601      	movs	r6, #1
90007a1c:	e7e3      	b.n	900079e6 <create_chain+0x18>
				ncl = 2;
90007a1e:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
90007a20:	4621      	mov	r1, r4
90007a22:	f8d8 0000 	ldr.w	r0, [r8]
90007a26:	f7ff ff44 	bl	900078b2 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
90007a2a:	b130      	cbz	r0, 90007a3a <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
90007a2c:	2801      	cmp	r0, #1
90007a2e:	d0e9      	beq.n	90007a04 <create_chain+0x36>
90007a30:	3001      	adds	r0, #1
90007a32:	d01e      	beq.n	90007a72 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
90007a34:	42b4      	cmp	r4, r6
90007a36:	d1d7      	bne.n	900079e8 <create_chain+0x1a>
90007a38:	e7dc      	b.n	900079f4 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
90007a3a:	f04f 32ff 	mov.w	r2, #4294967295
90007a3e:	4621      	mov	r1, r4
90007a40:	4628      	mov	r0, r5
90007a42:	f7ff fe65 	bl	90007710 <put_fat>
		if (res == FR_OK && clst != 0) {
90007a46:	b990      	cbnz	r0, 90007a6e <create_chain+0xa0>
90007a48:	b957      	cbnz	r7, 90007a60 <create_chain+0x92>
		fs->last_clst = ncl;
90007a4a:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
90007a4c:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
90007a50:	3a02      	subs	r2, #2
90007a52:	4293      	cmp	r3, r2
90007a54:	d910      	bls.n	90007a78 <create_chain+0xaa>
		fs->fsi_flag |= 1;
90007a56:	792b      	ldrb	r3, [r5, #4]
90007a58:	f043 0301 	orr.w	r3, r3, #1
90007a5c:	712b      	strb	r3, [r5, #4]
90007a5e:	e7d2      	b.n	90007a06 <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
90007a60:	4622      	mov	r2, r4
90007a62:	4639      	mov	r1, r7
90007a64:	4628      	mov	r0, r5
90007a66:	f7ff fe53 	bl	90007710 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
90007a6a:	2800      	cmp	r0, #0
90007a6c:	d0ed      	beq.n	90007a4a <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
90007a6e:	2801      	cmp	r0, #1
90007a70:	d1c8      	bne.n	90007a04 <create_chain+0x36>
90007a72:	f04f 34ff 	mov.w	r4, #4294967295
90007a76:	e7c6      	b.n	90007a06 <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
90007a78:	3b01      	subs	r3, #1
90007a7a:	616b      	str	r3, [r5, #20]
90007a7c:	e7eb      	b.n	90007a56 <create_chain+0x88>

90007a7e <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
90007a7e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
90007a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90007a84:	4606      	mov	r6, r0
90007a86:	460c      	mov	r4, r1
	FATFS *fs = dp->obj.fs;
90007a88:	6805      	ldr	r5, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
90007a8a:	d301      	bcc.n	90007a90 <dir_sdi+0x12>
		return FR_INT_ERR;
90007a8c:	2002      	movs	r0, #2
}
90007a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
90007a90:	06ca      	lsls	r2, r1, #27
90007a92:	d1fb      	bne.n	90007a8c <dir_sdi+0xe>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
90007a94:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
90007a96:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
90007a98:	b9ba      	cbnz	r2, 90007aca <dir_sdi+0x4c>
90007a9a:	782b      	ldrb	r3, [r5, #0]
90007a9c:	2b02      	cmp	r3, #2
90007a9e:	d901      	bls.n	90007aa4 <dir_sdi+0x26>
		clst = fs->dirbase;
90007aa0:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
90007aa2:	b99b      	cbnz	r3, 90007acc <dir_sdi+0x4e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
90007aa4:	892b      	ldrh	r3, [r5, #8]
90007aa6:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
90007aaa:	d9ef      	bls.n	90007a8c <dir_sdi+0xe>
		dp->sect = fs->dirbase;
90007aac:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
90007aae:	e9c6 2006 	strd	r2, r0, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
90007ab2:	2800      	cmp	r0, #0
90007ab4:	d0ea      	beq.n	90007a8c <dir_sdi+0xe>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
90007ab6:	eb00 2054 	add.w	r0, r0, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
90007aba:	3534      	adds	r5, #52	; 0x34
90007abc:	f3c4 0408 	ubfx	r4, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
90007ac0:	61f0      	str	r0, [r6, #28]
	return FR_OK;
90007ac2:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
90007ac4:	4425      	add	r5, r4
90007ac6:	6235      	str	r5, [r6, #32]
	return FR_OK;
90007ac8:	e7e1      	b.n	90007a8e <dir_sdi+0x10>
90007aca:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
90007acc:	896f      	ldrh	r7, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
90007ace:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
90007ad0:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
90007ad2:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
90007ad4:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
90007ad6:	d203      	bcs.n	90007ae0 <dir_sdi+0x62>
		dp->sect = clust2sect(fs, clst);
90007ad8:	4628      	mov	r0, r5
90007ada:	f7ff fb81 	bl	900071e0 <clust2sect>
90007ade:	e7e6      	b.n	90007aae <dir_sdi+0x30>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
90007ae0:	6830      	ldr	r0, [r6, #0]
90007ae2:	f7ff fee6 	bl	900078b2 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
90007ae6:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
90007ae8:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
90007aea:	d006      	beq.n	90007afa <dir_sdi+0x7c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
90007aec:	2801      	cmp	r0, #1
90007aee:	d9cd      	bls.n	90007a8c <dir_sdi+0xe>
90007af0:	69ab      	ldr	r3, [r5, #24]
90007af2:	4283      	cmp	r3, r0
90007af4:	d9ca      	bls.n	90007a8c <dir_sdi+0xe>
			ofs -= csz;
90007af6:	1be4      	subs	r4, r4, r7
90007af8:	e7eb      	b.n	90007ad2 <dir_sdi+0x54>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
90007afa:	2001      	movs	r0, #1
90007afc:	e7c7      	b.n	90007a8e <dir_sdi+0x10>

90007afe <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
90007afe:	6943      	ldr	r3, [r0, #20]
{
90007b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
90007b04:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
90007b08:	69c3      	ldr	r3, [r0, #28]
{
90007b0a:	4605      	mov	r5, r0
90007b0c:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
90007b0e:	b18b      	cbz	r3, 90007b34 <dir_next+0x36>
90007b10:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
90007b14:	d20e      	bcs.n	90007b34 <dir_next+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
90007b16:	f3c8 0708 	ubfx	r7, r8, #0, #9
	FATFS *fs = dp->obj.fs;
90007b1a:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
90007b1c:	2f00      	cmp	r7, #0
90007b1e:	d14f      	bne.n	90007bc0 <dir_next+0xc2>
		dp->sect++;				/* Next sector */
90007b20:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
90007b22:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
90007b24:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
90007b26:	b939      	cbnz	r1, 90007b38 <dir_next+0x3a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
90007b28:	8923      	ldrh	r3, [r4, #8]
90007b2a:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
90007b2e:	d847      	bhi.n	90007bc0 <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
90007b30:	2300      	movs	r3, #0
90007b32:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
90007b34:	2004      	movs	r0, #4
90007b36:	e00d      	b.n	90007b54 <dir_next+0x56>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
90007b38:	f8b4 900a 	ldrh.w	r9, [r4, #10]
90007b3c:	f109 39ff 	add.w	r9, r9, #4294967295
90007b40:	ea19 2958 	ands.w	r9, r9, r8, lsr #9
90007b44:	d13c      	bne.n	90007bc0 <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
90007b46:	4620      	mov	r0, r4
90007b48:	f7ff feb3 	bl	900078b2 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
90007b4c:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
90007b4e:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
90007b50:	d802      	bhi.n	90007b58 <dir_next+0x5a>
90007b52:	2002      	movs	r0, #2
}
90007b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
90007b58:	1c42      	adds	r2, r0, #1
90007b5a:	d101      	bne.n	90007b60 <dir_next+0x62>
90007b5c:	2001      	movs	r0, #1
90007b5e:	e7f9      	b.n	90007b54 <dir_next+0x56>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
90007b60:	69a3      	ldr	r3, [r4, #24]
90007b62:	4283      	cmp	r3, r0
90007b64:	d826      	bhi.n	90007bb4 <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
90007b66:	f1ba 0f00 	cmp.w	sl, #0
90007b6a:	d0e1      	beq.n	90007b30 <dir_next+0x32>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
90007b6c:	69a9      	ldr	r1, [r5, #24]
90007b6e:	4628      	mov	r0, r5
90007b70:	f7ff ff2d 	bl	900079ce <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
90007b74:	4606      	mov	r6, r0
90007b76:	2800      	cmp	r0, #0
90007b78:	d035      	beq.n	90007be6 <dir_next+0xe8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
90007b7a:	2801      	cmp	r0, #1
90007b7c:	d0e9      	beq.n	90007b52 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
90007b7e:	1c43      	adds	r3, r0, #1
90007b80:	d0ec      	beq.n	90007b5c <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
90007b82:	4620      	mov	r0, r4
90007b84:	f7ff fc3c 	bl	90007400 <sync_window>
90007b88:	4601      	mov	r1, r0
90007b8a:	2800      	cmp	r0, #0
90007b8c:	d1e6      	bne.n	90007b5c <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
90007b8e:	f104 0034 	add.w	r0, r4, #52	; 0x34
90007b92:	f44f 7200 	mov.w	r2, #512	; 0x200
						fs->wflag = 1;
90007b96:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
90007b9a:	f7ff fa73 	bl	90007084 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
90007b9e:	4631      	mov	r1, r6
90007ba0:	4620      	mov	r0, r4
90007ba2:	f7ff fb1d 	bl	900071e0 <clust2sect>
90007ba6:	8963      	ldrh	r3, [r4, #10]
90007ba8:	6320      	str	r0, [r4, #48]	; 0x30
90007baa:	4599      	cmp	r9, r3
90007bac:	d30f      	bcc.n	90007bce <dir_next+0xd0>
					fs->winsect -= n;							/* Restore window offset */
90007bae:	eba0 0009 	sub.w	r0, r0, r9
90007bb2:	6320      	str	r0, [r4, #48]	; 0x30
				dp->sect = clust2sect(fs, clst);
90007bb4:	4631      	mov	r1, r6
90007bb6:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
90007bb8:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
90007bba:	f7ff fb11 	bl	900071e0 <clust2sect>
90007bbe:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
90007bc0:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
90007bc2:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
90007bc4:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
90007bc8:	443c      	add	r4, r7
90007bca:	622c      	str	r4, [r5, #32]
	return FR_OK;
90007bcc:	e7c2      	b.n	90007b54 <dir_next+0x56>
						fs->wflag = 1;
90007bce:	4620      	mov	r0, r4
90007bd0:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
90007bd4:	f7ff fbee 	bl	900073b4 <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
90007bd8:	2800      	cmp	r0, #0
90007bda:	d1bf      	bne.n	90007b5c <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
90007bdc:	6b20      	ldr	r0, [r4, #48]	; 0x30
90007bde:	f109 0901 	add.w	r9, r9, #1
90007be2:	3001      	adds	r0, #1
90007be4:	e7df      	b.n	90007ba6 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
90007be6:	2007      	movs	r0, #7
90007be8:	e7b4      	b.n	90007b54 <dir_next+0x56>
	...

90007bec <dir_find>:
{
90007bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
90007bf0:	2100      	movs	r1, #0
{
90007bf2:	b085      	sub	sp, #20
90007bf4:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
90007bf6:	f8d0 b000 	ldr.w	fp, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
90007bfa:	f7ff ff40 	bl	90007a7e <dir_sdi>
	if (res != FR_OK) return res;
90007bfe:	4606      	mov	r6, r0
90007c00:	2800      	cmp	r0, #0
90007c02:	f040 8098 	bne.w	90007d36 <dir_find+0x14a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
90007c06:	f04f 08ff 	mov.w	r8, #255	; 0xff
90007c0a:	f04f 3aff 	mov.w	sl, #4294967295
90007c0e:	46c1      	mov	r9, r8
90007c10:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
		res = move_window(fs, dp->sect);
90007c14:	69e1      	ldr	r1, [r4, #28]
90007c16:	4658      	mov	r0, fp
90007c18:	f7ff fbf8 	bl	9000740c <move_window>
		if (res != FR_OK) break;
90007c1c:	4606      	mov	r6, r0
90007c1e:	2800      	cmp	r0, #0
90007c20:	f040 8089 	bne.w	90007d36 <dir_find+0x14a>
		c = dp->dir[DIR_Name];
90007c24:	6a25      	ldr	r5, [r4, #32]
90007c26:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
90007c28:	2f00      	cmp	r7, #0
90007c2a:	f000 8088 	beq.w	90007d3e <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
90007c2e:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
90007c30:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
90007c32:	f002 033f 	and.w	r3, r2, #63	; 0x3f
90007c36:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
90007c38:	d003      	beq.n	90007c42 <dir_find+0x56>
90007c3a:	0710      	lsls	r0, r2, #28
90007c3c:	d504      	bpl.n	90007c48 <dir_find+0x5c>
90007c3e:	2b0f      	cmp	r3, #15
90007c40:	d004      	beq.n	90007c4c <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
90007c42:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
90007c46:	e050      	b.n	90007cea <dir_find+0xfe>
			if (a == AM_LFN) {			/* An LFN entry is found */
90007c48:	2b0f      	cmp	r3, #15
90007c4a:	d156      	bne.n	90007cfa <dir_find+0x10e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
90007c4c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
90007c50:	0659      	lsls	r1, r3, #25
90007c52:	d440      	bmi.n	90007cd6 <dir_find+0xea>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
90007c54:	067a      	lsls	r2, r7, #25
90007c56:	d546      	bpl.n	90007ce6 <dir_find+0xfa>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
90007c58:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
90007c5a:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
90007c5e:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
90007c62:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
90007c64:	7b6b      	ldrb	r3, [r5, #13]
90007c66:	4543      	cmp	r3, r8
90007c68:	d13f      	bne.n	90007cea <dir_find+0xfe>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
90007c6a:	8b6b      	ldrh	r3, [r5, #26]
90007c6c:	2b00      	cmp	r3, #0
90007c6e:	d13c      	bne.n	90007cea <dir_find+0xfe>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
90007c70:	782e      	ldrb	r6, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
90007c72:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
90007c74:	f8db 300c 	ldr.w	r3, [fp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
90007c78:	f006 063f 	and.w	r6, r6, #63	; 0x3f
90007c7c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 90007d48 <dir_find+0x15c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
90007c80:	9300      	str	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
90007c82:	230d      	movs	r3, #13
90007c84:	3e01      	subs	r6, #1
90007c86:	435e      	muls	r6, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
90007c88:	f819 3b01 	ldrb.w	r3, [r9], #1
90007c8c:	5aeb      	ldrh	r3, [r5, r3]
		if (wc) {
90007c8e:	b37a      	cbz	r2, 90007cf0 <dir_find+0x104>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
90007c90:	2efe      	cmp	r6, #254	; 0xfe
90007c92:	d82a      	bhi.n	90007cea <dir_find+0xfe>
90007c94:	4618      	mov	r0, r3
90007c96:	9303      	str	r3, [sp, #12]
90007c98:	f001 f86c 	bl	90008d74 <ff_wtoupper>
90007c9c:	9b00      	ldr	r3, [sp, #0]
90007c9e:	1c71      	adds	r1, r6, #1
90007ca0:	9002      	str	r0, [sp, #8]
90007ca2:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
90007ca6:	9101      	str	r1, [sp, #4]
90007ca8:	f001 f864 	bl	90008d74 <ff_wtoupper>
90007cac:	9a02      	ldr	r2, [sp, #8]
90007cae:	4282      	cmp	r2, r0
90007cb0:	d11b      	bne.n	90007cea <dir_find+0xfe>
90007cb2:	9b03      	ldr	r3, [sp, #12]
90007cb4:	9901      	ldr	r1, [sp, #4]
90007cb6:	461a      	mov	r2, r3
90007cb8:	460e      	mov	r6, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
90007cba:	4b22      	ldr	r3, [pc, #136]	; (90007d44 <dir_find+0x158>)
90007cbc:	4599      	cmp	r9, r3
90007cbe:	d1e3      	bne.n	90007c88 <dir_find+0x9c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
90007cc0:	782b      	ldrb	r3, [r5, #0]
90007cc2:	065b      	lsls	r3, r3, #25
90007cc4:	d504      	bpl.n	90007cd0 <dir_find+0xe4>
90007cc6:	b11a      	cbz	r2, 90007cd0 <dir_find+0xe4>
90007cc8:	9b00      	ldr	r3, [sp, #0]
90007cca:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
90007cce:	b963      	cbnz	r3, 90007cea <dir_find+0xfe>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
90007cd0:	3f01      	subs	r7, #1
90007cd2:	fa5f f987 	uxtb.w	r9, r7
		res = dir_next(dp, 0);	/* Next entry */
90007cd6:	2100      	movs	r1, #0
90007cd8:	4620      	mov	r0, r4
90007cda:	f7ff ff10 	bl	90007afe <dir_next>
	} while (res == FR_OK);
90007cde:	4606      	mov	r6, r0
90007ce0:	2800      	cmp	r0, #0
90007ce2:	d097      	beq.n	90007c14 <dir_find+0x28>
90007ce4:	e027      	b.n	90007d36 <dir_find+0x14a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
90007ce6:	45b9      	cmp	r9, r7
90007ce8:	d0bc      	beq.n	90007c64 <dir_find+0x78>
90007cea:	f04f 09ff 	mov.w	r9, #255	; 0xff
90007cee:	e7f2      	b.n	90007cd6 <dir_find+0xea>
			if (uc != 0xFFFF) return 0;		/* Check filler */
90007cf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
90007cf4:	428b      	cmp	r3, r1
90007cf6:	d0e0      	beq.n	90007cba <dir_find+0xce>
90007cf8:	e7f7      	b.n	90007cea <dir_find+0xfe>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
90007cfa:	f1b9 0f00 	cmp.w	r9, #0
90007cfe:	d104      	bne.n	90007d0a <dir_find+0x11e>
90007d00:	4628      	mov	r0, r5
90007d02:	f7ff fa95 	bl	90007230 <sum_sfn>
90007d06:	4540      	cmp	r0, r8
90007d08:	d015      	beq.n	90007d36 <dir_find+0x14a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
90007d0a:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
90007d0e:	f016 0601 	ands.w	r6, r6, #1
90007d12:	d196      	bne.n	90007c42 <dir_find+0x56>
90007d14:	f104 0224 	add.w	r2, r4, #36	; 0x24
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
90007d18:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
90007d1c:	f815 3b01 	ldrb.w	r3, [r5], #1
90007d20:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
90007d24:	428d      	cmp	r5, r1
		r = *d++ - *s++;
90007d26:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
90007d2a:	d002      	beq.n	90007d32 <dir_find+0x146>
90007d2c:	2b00      	cmp	r3, #0
90007d2e:	d0f5      	beq.n	90007d1c <dir_find+0x130>
90007d30:	e787      	b.n	90007c42 <dir_find+0x56>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
90007d32:	2b00      	cmp	r3, #0
90007d34:	d185      	bne.n	90007c42 <dir_find+0x56>
}
90007d36:	4630      	mov	r0, r6
90007d38:	b005      	add	sp, #20
90007d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
90007d3e:	2604      	movs	r6, #4
90007d40:	e7f9      	b.n	90007d36 <dir_find+0x14a>
90007d42:	bf00      	nop
90007d44:	9000f541 	.word	0x9000f541
90007d48:	9000f534 	.word	0x9000f534

90007d4c <dir_register>:
{
90007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
90007d50:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
{
90007d54:	b089      	sub	sp, #36	; 0x24
90007d56:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
90007d58:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
90007d5c:	f040 808e 	bne.w	90007e7c <dir_register+0x130>
	FATFS *fs = dp->obj.fs;
90007d60:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
90007d62:	68f2      	ldr	r2, [r6, #12]
90007d64:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
90007d68:	2b00      	cmp	r3, #0
90007d6a:	d166      	bne.n	90007e3a <dir_register+0xee>
	mem_cpy(sn, dp->fn, 12);
90007d6c:	f104 0724 	add.w	r7, r4, #36	; 0x24
	if (cnt) {
90007d70:	220c      	movs	r2, #12
90007d72:	a805      	add	r0, sp, #20
90007d74:	4639      	mov	r1, r7
90007d76:	f7ff fb14 	bl	900073a2 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
90007d7a:	f89d 301f 	ldrb.w	r3, [sp, #31]
90007d7e:	07db      	lsls	r3, r3, #31
90007d80:	f140 8085 	bpl.w	90007e8e <dir_register+0x142>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
90007d84:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
90007d86:	f04f 0a01 	mov.w	sl, #1
				if (sr & 0x10000) sr ^= 0x11021;
90007d8a:	f8df 8234 	ldr.w	r8, [pc, #564]	; 90007fc0 <dir_register+0x274>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
90007d8e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
90007d92:	220b      	movs	r2, #11
90007d94:	a905      	add	r1, sp, #20
90007d96:	4638      	mov	r0, r7
90007d98:	f8d6 900c 	ldr.w	r9, [r6, #12]
	if (cnt) {
90007d9c:	f7ff fb01 	bl	900073a2 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
90007da0:	f1ba 0f05 	cmp.w	sl, #5
90007da4:	d959      	bls.n	90007e5a <dir_register+0x10e>
90007da6:	f1a9 0102 	sub.w	r1, r9, #2
90007daa:	4653      	mov	r3, sl
		while (*lfn) {	/* Create a CRC */
90007dac:	f831 2f02 	ldrh.w	r2, [r1, #2]!
90007db0:	2a00      	cmp	r2, #0
90007db2:	d144      	bne.n	90007e3e <dir_register+0xf2>
90007db4:	a805      	add	r0, sp, #20
90007db6:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
90007db8:	f003 0c0f 	and.w	ip, r3, #15
		ns[i--] = c;
90007dbc:	3a01      	subs	r2, #1
		c = (BYTE)((seq % 16) + '0');
90007dbe:	f10c 0130 	add.w	r1, ip, #48	; 0x30
		if (c > '9') c += 7;
90007dc2:	2939      	cmp	r1, #57	; 0x39
90007dc4:	bf88      	it	hi
90007dc6:	f10c 0137 	addhi.w	r1, ip, #55	; 0x37
	} while (seq);
90007dca:	2b0f      	cmp	r3, #15
		ns[i--] = c;
90007dcc:	f800 1d01 	strb.w	r1, [r0, #-1]!
		seq /= 16;
90007dd0:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
90007dd4:	d843      	bhi.n	90007e5e <dir_register+0x112>
	ns[i] = '~';
90007dd6:	f102 0320 	add.w	r3, r2, #32
90007dda:	217e      	movs	r1, #126	; 0x7e
90007ddc:	446b      	add	r3, sp
90007dde:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
90007de2:	f104 0123 	add.w	r1, r4, #35	; 0x23
90007de6:	2300      	movs	r3, #0
90007de8:	4608      	mov	r0, r1
90007dea:	429a      	cmp	r2, r3
90007dec:	d006      	beq.n	90007dfc <dir_register+0xb0>
90007dee:	f810 cf01 	ldrb.w	ip, [r0, #1]!
90007df2:	f103 0e01 	add.w	lr, r3, #1
90007df6:	f1bc 0f20 	cmp.w	ip, #32
90007dfa:	d132      	bne.n	90007e62 <dir_register+0x116>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
90007dfc:	2a07      	cmp	r2, #7
90007dfe:	f103 0301 	add.w	r3, r3, #1
90007e02:	bf97      	itett	ls
90007e04:	f102 0020 	addls.w	r0, r2, #32
90007e08:	2020      	movhi	r0, #32
90007e0a:	3201      	addls	r2, #1
90007e0c:	4468      	addls	r0, sp
90007e0e:	bf98      	it	ls
90007e10:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
	} while (j < 8);
90007e14:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
90007e16:	54c8      	strb	r0, [r1, r3]
	} while (j < 8);
90007e18:	d9f0      	bls.n	90007dfc <dir_register+0xb0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
90007e1a:	4620      	mov	r0, r4
90007e1c:	f7ff fee6 	bl	90007bec <dir_find>
90007e20:	4681      	mov	r9, r0
			if (res != FR_OK) break;
90007e22:	bb70      	cbnz	r0, 90007e82 <dir_register+0x136>
		for (n = 1; n < 100; n++) {
90007e24:	f10a 0a01 	add.w	sl, sl, #1
90007e28:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
90007e2c:	d1b1      	bne.n	90007d92 <dir_register+0x46>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
90007e2e:	f04f 0907 	mov.w	r9, #7
}
90007e32:	4648      	mov	r0, r9
90007e34:	b009      	add	sp, #36	; 0x24
90007e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
90007e3a:	3501      	adds	r5, #1
90007e3c:	e792      	b.n	90007d64 <dir_register+0x18>
90007e3e:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
90007e40:	f002 0c01 	and.w	ip, r2, #1
				wc >>= 1;
90007e44:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
90007e46:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
90007e4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
90007e4e:	bf18      	it	ne
90007e50:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
90007e54:	3801      	subs	r0, #1
90007e56:	d1f3      	bne.n	90007e40 <dir_register+0xf4>
90007e58:	e7a8      	b.n	90007dac <dir_register+0x60>
90007e5a:	4653      	mov	r3, sl
90007e5c:	e7aa      	b.n	90007db4 <dir_register+0x68>
		seq /= 16;
90007e5e:	460b      	mov	r3, r1
90007e60:	e7aa      	b.n	90007db8 <dir_register+0x6c>
90007e62:	4673      	mov	r3, lr
90007e64:	e7c1      	b.n	90007dea <dir_register+0x9e>
				n = 0;					/* Not a blank entry. Restart to search */
90007e66:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
90007e68:	2101      	movs	r1, #1
90007e6a:	4620      	mov	r0, r4
90007e6c:	f7ff fe47 	bl	90007afe <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
90007e70:	4681      	mov	r9, r0
90007e72:	b308      	cbz	r0, 90007eb8 <dir_register+0x16c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
90007e74:	f1b9 0f04 	cmp.w	r9, #4
90007e78:	d0d9      	beq.n	90007e2e <dir_register+0xe2>
90007e7a:	e7da      	b.n	90007e32 <dir_register+0xe6>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
90007e7c:	f04f 0906 	mov.w	r9, #6
90007e80:	e7d7      	b.n	90007e32 <dir_register+0xe6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
90007e82:	2804      	cmp	r0, #4
90007e84:	d1d5      	bne.n	90007e32 <dir_register+0xe6>
		dp->fn[NSFLAG] = sn[NSFLAG];
90007e86:	f89d 301f 	ldrb.w	r3, [sp, #31]
90007e8a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
90007e8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
	res = dir_sdi(dp, 0);
90007e92:	2100      	movs	r1, #0
90007e94:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
90007e96:	f8d4 a000 	ldr.w	sl, [r4]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
90007e9a:	079b      	lsls	r3, r3, #30
90007e9c:	bf45      	ittet	mi
90007e9e:	350c      	addmi	r5, #12
90007ea0:	230d      	movmi	r3, #13
90007ea2:	2501      	movpl	r5, #1
90007ea4:	fbb5 f5f3 	udivmi	r5, r5, r3
90007ea8:	bf48      	it	mi
90007eaa:	3501      	addmi	r5, #1
	res = dir_sdi(dp, 0);
90007eac:	f7ff fde7 	bl	90007a7e <dir_sdi>
	if (res == FR_OK) {
90007eb0:	4681      	mov	r9, r0
90007eb2:	2800      	cmp	r0, #0
90007eb4:	d1de      	bne.n	90007e74 <dir_register+0x128>
		n = 0;
90007eb6:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
90007eb8:	69e1      	ldr	r1, [r4, #28]
90007eba:	4650      	mov	r0, sl
90007ebc:	f7ff faa6 	bl	9000740c <move_window>
			if (res != FR_OK) break;
90007ec0:	4681      	mov	r9, r0
90007ec2:	2800      	cmp	r0, #0
90007ec4:	d1d6      	bne.n	90007e74 <dir_register+0x128>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
90007ec6:	6a23      	ldr	r3, [r4, #32]
90007ec8:	781b      	ldrb	r3, [r3, #0]
90007eca:	2be5      	cmp	r3, #229	; 0xe5
90007ecc:	d001      	beq.n	90007ed2 <dir_register+0x186>
90007ece:	2b00      	cmp	r3, #0
90007ed0:	d1c9      	bne.n	90007e66 <dir_register+0x11a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
90007ed2:	f108 0801 	add.w	r8, r8, #1
90007ed6:	4545      	cmp	r5, r8
90007ed8:	d1c6      	bne.n	90007e68 <dir_register+0x11c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
90007eda:	3d01      	subs	r5, #1
90007edc:	d055      	beq.n	90007f8a <dir_register+0x23e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
90007ede:	6961      	ldr	r1, [r4, #20]
90007ee0:	4620      	mov	r0, r4
90007ee2:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
90007ee6:	f7ff fdca 	bl	90007a7e <dir_sdi>
		if (res == FR_OK) {
90007eea:	4681      	mov	r9, r0
90007eec:	2800      	cmp	r0, #0
90007eee:	d1a0      	bne.n	90007e32 <dir_register+0xe6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
90007ef0:	f64f 78ff 	movw	r8, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
90007ef4:	4638      	mov	r0, r7
90007ef6:	f7ff f99b 	bl	90007230 <sum_sfn>
90007efa:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
90007efc:	69e1      	ldr	r1, [r4, #28]
90007efe:	4630      	mov	r0, r6
90007f00:	f7ff fa84 	bl	9000740c <move_window>
90007f04:	4681      	mov	r9, r0
				if (res != FR_OK) break;
90007f06:	2800      	cmp	r0, #0
90007f08:	d193      	bne.n	90007e32 <dir_register+0xe6>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
90007f0a:	6a23      	ldr	r3, [r4, #32]
90007f0c:	b2e9      	uxtb	r1, r5
	dir[LDIR_Chksum] = sum;			/* Set checksum */
90007f0e:	9a01      	ldr	r2, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
90007f10:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
90007f14:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
90007f18:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
90007f1a:	f04f 020f 	mov.w	r2, #15
90007f1e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 90007fc4 <dir_register+0x278>
90007f22:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
90007f24:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
90007f26:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
90007f28:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
90007f2c:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
90007f2e:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
90007f30:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
90007f32:	4540      	cmp	r0, r8
		st_word(dir + LfnOfs[s], wc);		/* Put it */
90007f34:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++s < 13);
90007f38:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
90007f3c:	bf18      	it	ne
90007f3e:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
90007f42:	eb03 0b09 	add.w	fp, r3, r9
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
90007f46:	bf18      	it	ne
90007f48:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
90007f4a:	f803 0009 	strb.w	r0, [r3, r9]
90007f4e:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
90007f52:	2800      	cmp	r0, #0
90007f54:	bf08      	it	eq
90007f56:	4640      	moveq	r0, r8
	} while (++s < 13);
90007f58:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
90007f5c:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
90007f60:	d1e7      	bne.n	90007f32 <dir_register+0x1e6>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
90007f62:	4540      	cmp	r0, r8
90007f64:	d002      	beq.n	90007f6c <dir_register+0x220>
90007f66:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
90007f6a:	b90a      	cbnz	r2, 90007f70 <dir_register+0x224>
90007f6c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
90007f70:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
90007f72:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
90007f74:	2100      	movs	r1, #0
90007f76:	4620      	mov	r0, r4
				fs->wflag = 1;
90007f78:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
90007f7a:	f7ff fdc0 	bl	90007afe <dir_next>
			} while (res == FR_OK && --nent);
90007f7e:	4681      	mov	r9, r0
90007f80:	2800      	cmp	r0, #0
90007f82:	f47f af56 	bne.w	90007e32 <dir_register+0xe6>
90007f86:	3d01      	subs	r5, #1
90007f88:	d1b8      	bne.n	90007efc <dir_register+0x1b0>
		res = move_window(fs, dp->sect);
90007f8a:	69e1      	ldr	r1, [r4, #28]
90007f8c:	4630      	mov	r0, r6
90007f8e:	f7ff fa3d 	bl	9000740c <move_window>
		if (res == FR_OK) {
90007f92:	4681      	mov	r9, r0
90007f94:	2800      	cmp	r0, #0
90007f96:	f47f af4c 	bne.w	90007e32 <dir_register+0xe6>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
90007f9a:	4601      	mov	r1, r0
90007f9c:	2220      	movs	r2, #32
90007f9e:	6a20      	ldr	r0, [r4, #32]
90007fa0:	f7ff f870 	bl	90007084 <mem_set>
	if (cnt) {
90007fa4:	220b      	movs	r2, #11
90007fa6:	4639      	mov	r1, r7
90007fa8:	6a20      	ldr	r0, [r4, #32]
90007faa:	f7ff f9fa 	bl	900073a2 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
90007fae:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
90007fb2:	6a22      	ldr	r2, [r4, #32]
90007fb4:	f003 0318 	and.w	r3, r3, #24
90007fb8:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
90007fba:	2301      	movs	r3, #1
90007fbc:	70f3      	strb	r3, [r6, #3]
90007fbe:	e738      	b.n	90007e32 <dir_register+0xe6>
90007fc0:	00011021 	.word	0x00011021
90007fc4:	9000f534 	.word	0x9000f534

90007fc8 <dir_read.constprop.0>:
FRESULT dir_read (
90007fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
90007fcc:	27ff      	movs	r7, #255	; 0xff
FRESULT dir_read (
90007fce:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
90007fd0:	f8d0 8000 	ldr.w	r8, [r0]
	FRESULT res = FR_NO_FILE;
90007fd4:	2504      	movs	r5, #4
	BYTE ord = 0xFF, sum = 0xFF;
90007fd6:	463c      	mov	r4, r7
			if (uc != 0xFFFF) return 0;		/* Check filler */
90007fd8:	f64f 79ff 	movw	r9, #65535	; 0xffff
	while (dp->sect) {
90007fdc:	69f1      	ldr	r1, [r6, #28]
90007fde:	b911      	cbnz	r1, 90007fe6 <dir_read.constprop.0+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
90007fe0:	2d00      	cmp	r5, #0
90007fe2:	d05f      	beq.n	900080a4 <dir_read.constprop.0+0xdc>
90007fe4:	e04f      	b.n	90008086 <dir_read.constprop.0+0xbe>
		res = move_window(fs, dp->sect);
90007fe6:	4640      	mov	r0, r8
90007fe8:	f7ff fa10 	bl	9000740c <move_window>
		if (res != FR_OK) break;
90007fec:	4605      	mov	r5, r0
90007fee:	2800      	cmp	r0, #0
90007ff0:	d149      	bne.n	90008086 <dir_read.constprop.0+0xbe>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
90007ff2:	6a30      	ldr	r0, [r6, #32]
90007ff4:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) {
90007ff6:	2b00      	cmp	r3, #0
90007ff8:	d05c      	beq.n	900080b4 <dir_read.constprop.0+0xec>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
90007ffa:	7ac2      	ldrb	r2, [r0, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
90007ffc:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
90007ffe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
90008002:	71b2      	strb	r2, [r6, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
90008004:	d044      	beq.n	90008090 <dir_read.constprop.0+0xc8>
90008006:	2b2e      	cmp	r3, #46	; 0x2e
90008008:	d042      	beq.n	90008090 <dir_read.constprop.0+0xc8>
9000800a:	f022 0120 	bic.w	r1, r2, #32
9000800e:	2908      	cmp	r1, #8
90008010:	d03e      	beq.n	90008090 <dir_read.constprop.0+0xc8>
				if (a == AM_LFN) {			/* An LFN entry is found */
90008012:	2a0f      	cmp	r2, #15
90008014:	d141      	bne.n	9000809a <dir_read.constprop.0+0xd2>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
90008016:	0659      	lsls	r1, r3, #25
90008018:	d538      	bpl.n	9000808c <dir_read.constprop.0+0xc4>
						c &= (BYTE)~LLEF; ord = c;
9000801a:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
9000801e:	6973      	ldr	r3, [r6, #20]
						sum = dp->dir[LDIR_Chksum];
90008020:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
90008022:	6333      	str	r3, [r6, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
90008024:	7b43      	ldrb	r3, [r0, #13]
90008026:	42bb      	cmp	r3, r7
90008028:	d132      	bne.n	90008090 <dir_read.constprop.0+0xc8>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
9000802a:	8b42      	ldrh	r2, [r0, #26]
9000802c:	bb82      	cbnz	r2, 90008090 <dir_read.constprop.0+0xc8>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
9000802e:	7803      	ldrb	r3, [r0, #0]
90008030:	210d      	movs	r1, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
90008032:	f8d8 500c 	ldr.w	r5, [r8, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
90008036:	f04f 0e01 	mov.w	lr, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
9000803a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
9000803e:	f8df c078 	ldr.w	ip, [pc, #120]	; 900080b8 <dir_read.constprop.0+0xf0>
90008042:	3b01      	subs	r3, #1
90008044:	434b      	muls	r3, r1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
90008046:	f81c 1b01 	ldrb.w	r1, [ip], #1
9000804a:	5a41      	ldrh	r1, [r0, r1]
		if (wc) {
9000804c:	f1be 0f00 	cmp.w	lr, #0
90008050:	d020      	beq.n	90008094 <dir_read.constprop.0+0xcc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
90008052:	2bfe      	cmp	r3, #254	; 0xfe
90008054:	d81c      	bhi.n	90008090 <dir_read.constprop.0+0xc8>
			lfnbuf[i++] = wc = uc;			/* Store it */
90008056:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
9000805a:	468e      	mov	lr, r1
9000805c:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
9000805e:	3201      	adds	r2, #1
90008060:	2a0d      	cmp	r2, #13
90008062:	d1f0      	bne.n	90008046 <dir_read.constprop.0+0x7e>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
90008064:	7802      	ldrb	r2, [r0, #0]
90008066:	0652      	lsls	r2, r2, #25
90008068:	d504      	bpl.n	90008074 <dir_read.constprop.0+0xac>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
9000806a:	2bfe      	cmp	r3, #254	; 0xfe
9000806c:	d810      	bhi.n	90008090 <dir_read.constprop.0+0xc8>
		lfnbuf[i] = 0;
9000806e:	2200      	movs	r2, #0
90008070:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
90008074:	3c01      	subs	r4, #1
90008076:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
90008078:	2100      	movs	r1, #0
9000807a:	4630      	mov	r0, r6
9000807c:	f7ff fd3f 	bl	90007afe <dir_next>
		if (res != FR_OK) break;
90008080:	4605      	mov	r5, r0
90008082:	2800      	cmp	r0, #0
90008084:	d0aa      	beq.n	90007fdc <dir_read.constprop.0+0x14>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
90008086:	2300      	movs	r3, #0
90008088:	61f3      	str	r3, [r6, #28]
9000808a:	e00c      	b.n	900080a6 <dir_read.constprop.0+0xde>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000808c:	42a3      	cmp	r3, r4
9000808e:	d0c9      	beq.n	90008024 <dir_read.constprop.0+0x5c>
90008090:	24ff      	movs	r4, #255	; 0xff
90008092:	e7f1      	b.n	90008078 <dir_read.constprop.0+0xb0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
90008094:	4549      	cmp	r1, r9
90008096:	d0e2      	beq.n	9000805e <dir_read.constprop.0+0x96>
90008098:	e7fa      	b.n	90008090 <dir_read.constprop.0+0xc8>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
9000809a:	b93c      	cbnz	r4, 900080ac <dir_read.constprop.0+0xe4>
9000809c:	f7ff f8c8 	bl	90007230 <sum_sfn>
900080a0:	42b8      	cmp	r0, r7
900080a2:	d103      	bne.n	900080ac <dir_read.constprop.0+0xe4>
		res = move_window(fs, dp->sect);
900080a4:	2500      	movs	r5, #0
}
900080a6:	4628      	mov	r0, r5
900080a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
900080ac:	f04f 33ff 	mov.w	r3, #4294967295
900080b0:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
900080b2:	e7f8      	b.n	900080a6 <dir_read.constprop.0+0xde>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
900080b4:	2504      	movs	r5, #4
900080b6:	e7e6      	b.n	90008086 <dir_read.constprop.0+0xbe>
900080b8:	9000f534 	.word	0x9000f534

900080bc <follow_path>:
{
900080bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900080c0:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
900080c2:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
900080c6:	4689      	mov	r9, r1
900080c8:	f811 3b01 	ldrb.w	r3, [r1], #1
900080cc:	2b2f      	cmp	r3, #47	; 0x2f
900080ce:	d0fa      	beq.n	900080c6 <follow_path+0xa>
900080d0:	2b5c      	cmp	r3, #92	; 0x5c
900080d2:	d0f8      	beq.n	900080c6 <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
900080d4:	2100      	movs	r1, #0
900080d6:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
900080d8:	f899 3000 	ldrb.w	r3, [r9]
900080dc:	2b1f      	cmp	r3, #31
900080de:	f200 80b2 	bhi.w	90008246 <follow_path+0x18a>
		dp->fn[NSFLAG] = NS_NONAME;
900080e2:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
900080e4:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
900080e6:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
900080ea:	b003      	add	sp, #12
900080ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
900080f0:	f7ff bcc5 	b.w	90007a7e <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
900080f4:	3501      	adds	r5, #1
900080f6:	e0b9      	b.n	9000826c <follow_path+0x1b0>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
900080f8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
900080fc:	e9cd 3200 	strd	r3, r2, [sp]
90008100:	d00e      	beq.n	90008120 <follow_path+0x64>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
90008102:	2101      	movs	r1, #1
90008104:	4620      	mov	r0, r4
90008106:	f000 fe19 	bl	90008d3c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
9000810a:	b148      	cbz	r0, 90008120 <follow_path+0x64>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
9000810c:	287f      	cmp	r0, #127	; 0x7f
9000810e:	e9dd 3200 	ldrd	r3, r2, [sp]
90008112:	d807      	bhi.n	90008124 <follow_path+0x68>
90008114:	4c7f      	ldr	r4, [pc, #508]	; (90008314 <follow_path+0x258>)
	while (*str && *str != chr) str++;
90008116:	f814 1b01 	ldrb.w	r1, [r4], #1
9000811a:	b119      	cbz	r1, 90008124 <follow_path+0x68>
9000811c:	4288      	cmp	r0, r1
9000811e:	d1fa      	bne.n	90008116 <follow_path+0x5a>
				cf |= NS_LOSS | NS_LFN; break;
90008120:	2006      	movs	r0, #6
90008122:	e04d      	b.n	900081c0 <follow_path+0x104>
		w = p[si++];					/* Get a character */
90008124:	462f      	mov	r7, r5
		lfn[di++] = w;					/* Store the Unicode character */
90008126:	f823 0f02 	strh.w	r0, [r3, #2]!
		w = p[si++];					/* Get a character */
9000812a:	e095      	b.n	90008258 <follow_path+0x19c>
		w = lfn[di - 1];
9000812c:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
		if (w != ' ' && w != '.') break;
90008130:	2b20      	cmp	r3, #32
90008132:	d002      	beq.n	9000813a <follow_path+0x7e>
90008134:	2b2e      	cmp	r3, #46	; 0x2e
90008136:	f040 80a5 	bne.w	90008284 <follow_path+0x1c8>
		di--;
9000813a:	3f01      	subs	r7, #1
9000813c:	e09f      	b.n	9000827e <follow_path+0x1c2>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
9000813e:	3101      	adds	r1, #1
90008140:	e0ad      	b.n	9000829e <follow_path+0x1e2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
90008142:	4543      	cmp	r3, r8
90008144:	d205      	bcs.n	90008152 <follow_path+0x96>
90008146:	42ba      	cmp	r2, r7
90008148:	d149      	bne.n	900081de <follow_path+0x122>
			if (ni == 11) {				/* Long extension */
9000814a:	f1b8 0f0b 	cmp.w	r8, #11
9000814e:	d13f      	bne.n	900081d0 <follow_path+0x114>
90008150:	e002      	b.n	90008158 <follow_path+0x9c>
90008152:	f1b8 0f0b 	cmp.w	r8, #11
90008156:	d136      	bne.n	900081c6 <follow_path+0x10a>
				cf |= NS_LOSS | NS_LFN; break;
90008158:	f044 0403 	orr.w	r4, r4, #3
9000815c:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
90008160:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
90008164:	2be5      	cmp	r3, #229	; 0xe5
90008166:	bf04      	itt	eq
90008168:	2305      	moveq	r3, #5
9000816a:	f886 3024 	strbeq.w	r3, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
9000816e:	f1b8 0f08 	cmp.w	r8, #8
90008172:	bf04      	itt	eq
90008174:	00ad      	lsleq	r5, r5, #2
90008176:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
90008178:	f005 030c 	and.w	r3, r5, #12
9000817c:	2b0c      	cmp	r3, #12
9000817e:	d003      	beq.n	90008188 <follow_path+0xcc>
90008180:	f005 0203 	and.w	r2, r5, #3
90008184:	2a03      	cmp	r2, #3
90008186:	d101      	bne.n	9000818c <follow_path+0xd0>
90008188:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
9000818c:	07a1      	lsls	r1, r4, #30
9000818e:	d409      	bmi.n	900081a4 <follow_path+0xe8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
90008190:	f005 0503 	and.w	r5, r5, #3
90008194:	2d01      	cmp	r5, #1
90008196:	bf08      	it	eq
90008198:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
9000819c:	2b04      	cmp	r3, #4
9000819e:	bf08      	it	eq
900081a0:	f044 0408 	orreq.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
900081a4:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
900081a6:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
900081aa:	f7ff fd1f 	bl	90007bec <dir_find>
			ns = dp->fn[NSFLAG];
900081ae:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
900081b2:	b3c0      	cbz	r0, 90008226 <follow_path+0x16a>
				if (res == FR_NO_FILE) {	/* Object is not found */
900081b4:	2804      	cmp	r0, #4
900081b6:	d103      	bne.n	900081c0 <follow_path+0x104>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
900081b8:	f013 0f04 	tst.w	r3, #4
900081bc:	bf08      	it	eq
900081be:	2005      	moveq	r0, #5
}
900081c0:	b003      	add	sp, #12
900081c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
900081c6:	42ba      	cmp	r2, r7
900081c8:	d002      	beq.n	900081d0 <follow_path+0x114>
900081ca:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
900081ce:	d8c7      	bhi.n	90008160 <follow_path+0xa4>
			b <<= 2; continue;
900081d0:	00ad      	lsls	r5, r5, #2
900081d2:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11;	/* Enter extension section */
900081d4:	f04f 080b 	mov.w	r8, #11
900081d8:	2308      	movs	r3, #8
			b <<= 2; continue;
900081da:	b2ed      	uxtb	r5, r5
900081dc:	e089      	b.n	900082f2 <follow_path+0x236>
		if (w >= 0x80) {				/* Non ASCII character */
900081de:	287f      	cmp	r0, #127	; 0x7f
900081e0:	d90e      	bls.n	90008200 <follow_path+0x144>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
900081e2:	2100      	movs	r1, #0
			cf |= NS_LFN;				/* Force create LFN entry */
900081e4:	f044 0402 	orr.w	r4, r4, #2
900081e8:	e9cd 2300 	strd	r2, r3, [sp]
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
900081ec:	f000 fda6 	bl	90008d3c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
900081f0:	e9dd 2300 	ldrd	r2, r3, [sp]
900081f4:	b160      	cbz	r0, 90008210 <follow_path+0x154>
900081f6:	4948      	ldr	r1, [pc, #288]	; (90008318 <follow_path+0x25c>)
900081f8:	4408      	add	r0, r1
900081fa:	f810 0c73 	ldrb.w	r0, [r0, #-115]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
900081fe:	b138      	cbz	r0, 90008210 <follow_path+0x154>
	while (*str && *str != chr) str++;
90008200:	f8df c118 	ldr.w	ip, [pc, #280]	; 9000831c <follow_path+0x260>
90008204:	f81c 1b01 	ldrb.w	r1, [ip], #1
90008208:	2900      	cmp	r1, #0
9000820a:	d076      	beq.n	900082fa <follow_path+0x23e>
9000820c:	4281      	cmp	r1, r0
9000820e:	d1f9      	bne.n	90008204 <follow_path+0x148>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
90008210:	f044 0403 	orr.w	r4, r4, #3
90008214:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
90008216:	18f1      	adds	r1, r6, r3
90008218:	3301      	adds	r3, #1
9000821a:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
9000821e:	e068      	b.n	900082f2 <follow_path+0x236>
					b |= 2;
90008220:	f045 0502 	orr.w	r5, r5, #2
90008224:	e7f7      	b.n	90008216 <follow_path+0x15a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
90008226:	075a      	lsls	r2, r3, #29
90008228:	d4ca      	bmi.n	900081c0 <follow_path+0x104>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
9000822a:	79b3      	ldrb	r3, [r6, #6]
9000822c:	06db      	lsls	r3, r3, #27
9000822e:	d562      	bpl.n	900082f6 <follow_path+0x23a>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
90008230:	6973      	ldr	r3, [r6, #20]
90008232:	f10b 0134 	add.w	r1, fp, #52	; 0x34
90008236:	f89b 0000 	ldrb.w	r0, [fp]
9000823a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000823e:	4419      	add	r1, r3
90008240:	f7ff fb2f 	bl	900078a2 <ld_clust.isra.0>
90008244:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
90008246:	6833      	ldr	r3, [r6, #0]
90008248:	f109 32ff 	add.w	r2, r9, #4294967295
9000824c:	2700      	movs	r7, #0
9000824e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
90008252:	f1aa 0802 	sub.w	r8, sl, #2
90008256:	4643      	mov	r3, r8
		w = p[si++];					/* Get a character */
90008258:	f812 4f01 	ldrb.w	r4, [r2, #1]!
9000825c:	1c7d      	adds	r5, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
9000825e:	2c1f      	cmp	r4, #31
90008260:	d90c      	bls.n	9000827c <follow_path+0x1c0>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
90008262:	2c2f      	cmp	r4, #47	; 0x2f
90008264:	d002      	beq.n	9000826c <follow_path+0x1b0>
90008266:	2c5c      	cmp	r4, #92	; 0x5c
90008268:	f47f af46 	bne.w	900080f8 <follow_path+0x3c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
9000826c:	f819 3005 	ldrb.w	r3, [r9, r5]
90008270:	2b2f      	cmp	r3, #47	; 0x2f
90008272:	f43f af3f 	beq.w	900080f4 <follow_path+0x38>
90008276:	2b5c      	cmp	r3, #92	; 0x5c
90008278:	f43f af3c 	beq.w	900080f4 <follow_path+0x38>
	*path = &p[si];						/* Return pointer to the next segment */
9000827c:	44a9      	add	r9, r5
	while (di) {						/* Snip off trailing spaces and dots if exist */
9000827e:	2f00      	cmp	r7, #0
90008280:	f47f af54 	bne.w	9000812c <follow_path+0x70>
	lfn[di] = 0;						/* LFN is created */
90008284:	2300      	movs	r3, #0
90008286:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
9000828a:	2f00      	cmp	r7, #0
9000828c:	f43f af48 	beq.w	90008120 <follow_path+0x64>
	mem_set(dp->fn, ' ', 11);
90008290:	2120      	movs	r1, #32
90008292:	220b      	movs	r2, #11
90008294:	f106 0024 	add.w	r0, r6, #36	; 0x24
90008298:	f7fe fef4 	bl	90007084 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
9000829c:	4619      	mov	r1, r3
9000829e:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
900082a2:	2b20      	cmp	r3, #32
900082a4:	f43f af4b 	beq.w	9000813e <follow_path+0x82>
900082a8:	2b2e      	cmp	r3, #46	; 0x2e
900082aa:	f43f af48 	beq.w	9000813e <follow_path+0x82>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
900082ae:	2c1f      	cmp	r4, #31
900082b0:	bf8c      	ite	hi
900082b2:	2400      	movhi	r4, #0
900082b4:	2401      	movls	r4, #1
900082b6:	00a4      	lsls	r4, r4, #2
	if (si) cf |= NS_LOSS | NS_LFN;
900082b8:	b109      	cbz	r1, 900082be <follow_path+0x202>
900082ba:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
900082be:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
900082c2:	2b2e      	cmp	r3, #46	; 0x2e
900082c4:	d001      	beq.n	900082ca <follow_path+0x20e>
900082c6:	3f01      	subs	r7, #1
900082c8:	d1f9      	bne.n	900082be <follow_path+0x202>
		dp->fn[i++] = (BYTE)w;
900082ca:	2300      	movs	r3, #0
900082cc:	f04f 0808 	mov.w	r8, #8
900082d0:	461d      	mov	r5, r3
		w = lfn[si++];					/* Get an LFN character */
900082d2:	f83a 0011 	ldrh.w	r0, [sl, r1, lsl #1]
900082d6:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
900082d8:	2800      	cmp	r0, #0
900082da:	f43f af41 	beq.w	90008160 <follow_path+0xa4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
900082de:	2820      	cmp	r0, #32
900082e0:	d005      	beq.n	900082ee <follow_path+0x232>
900082e2:	282e      	cmp	r0, #46	; 0x2e
900082e4:	f47f af2d 	bne.w	90008142 <follow_path+0x86>
900082e8:	42ba      	cmp	r2, r7
900082ea:	f43f af2e 	beq.w	9000814a <follow_path+0x8e>
			cf |= NS_LOSS | NS_LFN; continue;
900082ee:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
900082f2:	4611      	mov	r1, r2
900082f4:	e7ed      	b.n	900082d2 <follow_path+0x216>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
900082f6:	2005      	movs	r0, #5
	return res;
900082f8:	e762      	b.n	900081c0 <follow_path+0x104>
				if (IsUpper(w)) {		/* ASCII large capital */
900082fa:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
900082fe:	2919      	cmp	r1, #25
90008300:	d98e      	bls.n	90008220 <follow_path+0x164>
					if (IsLower(w)) {	/* ASCII small capital */
90008302:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
90008306:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
90008308:	bf9e      	ittt	ls
9000830a:	3820      	subls	r0, #32
9000830c:	f045 0501 	orrls.w	r5, r5, #1
90008310:	b280      	uxthls	r0, r0
90008312:	e780      	b.n	90008216 <follow_path+0x15a>
90008314:	90010096 	.word	0x90010096
90008318:	9000f534 	.word	0x9000f534
9000831c:	9001009f 	.word	0x9001009f

90008320 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
90008320:	b530      	push	{r4, r5, lr}
90008322:	b085      	sub	sp, #20
90008324:	4614      	mov	r4, r2
90008326:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
9000832a:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
9000832c:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
9000832e:	f7fe ff8e 	bl	9000724e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
90008332:	2800      	cmp	r0, #0
90008334:	db19      	blt.n	9000836a <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
90008336:	490f      	ldr	r1, [pc, #60]	; (90008374 <f_mount+0x54>)
90008338:	0085      	lsls	r5, r0, #2
9000833a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
9000833e:	6a00      	ldr	r0, [r0, #32]

	if (cfs) {
90008340:	b118      	cbz	r0, 9000834a <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
90008342:	f7fe ff3f 	bl	900071c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
90008346:	2300      	movs	r3, #0
90008348:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
9000834a:	9801      	ldr	r0, [sp, #4]
9000834c:	b108      	cbz	r0, 90008352 <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
9000834e:	2300      	movs	r3, #0
90008350:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
90008352:	4429      	add	r1, r5
90008354:	6208      	str	r0, [r1, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
90008356:	b130      	cbz	r0, 90008366 <f_mount+0x46>
90008358:	2c01      	cmp	r4, #1
9000835a:	d108      	bne.n	9000836e <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
9000835c:	2200      	movs	r2, #0
9000835e:	a901      	add	r1, sp, #4
90008360:	4668      	mov	r0, sp
90008362:	f7ff f8a9 	bl	900074b8 <find_volume>
	LEAVE_FF(fs, res);
}
90008366:	b005      	add	sp, #20
90008368:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
9000836a:	200b      	movs	r0, #11
9000836c:	e7fb      	b.n	90008366 <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
9000836e:	2000      	movs	r0, #0
90008370:	e7f9      	b.n	90008366 <f_mount+0x46>
90008372:	bf00      	nop
90008374:	20000730 	.word	0x20000730

90008378 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
90008378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000837c:	b090      	sub	sp, #64	; 0x40
9000837e:	4691      	mov	r9, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
90008380:	4605      	mov	r5, r0
{
90008382:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
90008384:	2800      	cmp	r0, #0
90008386:	f000 8100 	beq.w	9000858a <f_open+0x212>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
9000838a:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
9000838e:	a902      	add	r1, sp, #8
90008390:	a801      	add	r0, sp, #4
90008392:	463a      	mov	r2, r7
90008394:	f7ff f890 	bl	900074b8 <find_volume>
	if (res == FR_OK) {
90008398:	2800      	cmp	r0, #0
9000839a:	f040 80f4 	bne.w	90008586 <f_open+0x20e>
		dj.obj.fs = fs;
9000839e:	9e02      	ldr	r6, [sp, #8]
		INIT_NAMBUF(fs);
900083a0:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
900083a4:	9603      	str	r6, [sp, #12]
		INIT_NAMBUF(fs);
900083a6:	f000 fcc4 	bl	90008d32 <ff_memalloc>
900083aa:	4680      	mov	r8, r0
900083ac:	2800      	cmp	r0, #0
900083ae:	f000 80ee 	beq.w	9000858e <f_open+0x216>
900083b2:	60f0      	str	r0, [r6, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
900083b4:	a803      	add	r0, sp, #12
900083b6:	9901      	ldr	r1, [sp, #4]
900083b8:	f7ff fe80 	bl	900080bc <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
900083bc:	4604      	mov	r4, r0
900083be:	b960      	cbnz	r0, 900083da <f_open+0x62>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
900083c0:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
900083c4:	2b00      	cmp	r3, #0
900083c6:	db5d      	blt.n	90008484 <f_open+0x10c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
900083c8:	f017 0f3e 	tst.w	r7, #62	; 0x3e
900083cc:	a803      	add	r0, sp, #12
900083ce:	bf14      	ite	ne
900083d0:	2101      	movne	r1, #1
900083d2:	2100      	moveq	r1, #0
900083d4:	f7fe fe5c 	bl	90007090 <chk_lock>
900083d8:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
900083da:	f019 0f1c 	tst.w	r9, #28
900083de:	d072      	beq.n	900084c6 <f_open+0x14e>
			if (res != FR_OK) {					/* No file, create new */
900083e0:	2c00      	cmp	r4, #0
900083e2:	d051      	beq.n	90008488 <f_open+0x110>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
900083e4:	2c04      	cmp	r4, #4
900083e6:	d143      	bne.n	90008470 <f_open+0xf8>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
900083e8:	4b6a      	ldr	r3, [pc, #424]	; (90008594 <f_open+0x21c>)
900083ea:	681a      	ldr	r2, [r3, #0]
900083ec:	b11a      	cbz	r2, 900083f6 <f_open+0x7e>
900083ee:	691b      	ldr	r3, [r3, #16]
900083f0:	2b00      	cmp	r3, #0
900083f2:	f040 80c2 	bne.w	9000857a <f_open+0x202>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
900083f6:	a803      	add	r0, sp, #12
900083f8:	f7ff fca8 	bl	90007d4c <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
900083fc:	4604      	mov	r4, r0
900083fe:	2800      	cmp	r0, #0
90008400:	d136      	bne.n	90008470 <f_open+0xf8>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
90008402:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
90008406:	f7fe fe31 	bl	9000706c <get_fattime>
9000840a:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
9000840c:	9000      	str	r0, [sp, #0]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
9000840e:	2220      	movs	r2, #32
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
90008410:	980b      	ldr	r0, [sp, #44]	; 0x2c
90008412:	300e      	adds	r0, #14
90008414:	f7fe fe2e 	bl	90007074 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
90008418:	980b      	ldr	r0, [sp, #44]	; 0x2c
9000841a:	9900      	ldr	r1, [sp, #0]
9000841c:	3016      	adds	r0, #22
9000841e:	f7fe fe29 	bl	90007074 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
90008422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90008424:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
90008426:	990b      	ldr	r1, [sp, #44]	; 0x2c
90008428:	7830      	ldrb	r0, [r6, #0]
9000842a:	f7ff fa3a 	bl	900078a2 <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
9000842e:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
90008430:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
90008432:	4630      	mov	r0, r6
90008434:	f7fe fef0 	bl	90007218 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
90008438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
9000843a:	2200      	movs	r2, #0
9000843c:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
9000843e:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
90008440:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
90008442:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
90008444:	2301      	movs	r3, #1
90008446:	70f3      	strb	r3, [r6, #3]

					if (cl) {							/* Remove the cluster chain if exist */
90008448:	f1b9 0f00 	cmp.w	r9, #0
9000844c:	d027      	beq.n	9000849e <f_open+0x126>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
9000844e:	4649      	mov	r1, r9
90008450:	a803      	add	r0, sp, #12
						dw = fs->winsect;
90008452:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
90008456:	f7ff fa82 	bl	9000795e <remove_chain>
						if (res == FR_OK) {
9000845a:	4604      	mov	r4, r0
9000845c:	b940      	cbnz	r0, 90008470 <f_open+0xf8>
							res = move_window(fs, dw);
9000845e:	4651      	mov	r1, sl
90008460:	4630      	mov	r0, r6
90008462:	f7fe ffd3 	bl	9000740c <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
90008466:	f109 31ff 	add.w	r1, r9, #4294967295
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
9000846a:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
9000846c:	6131      	str	r1, [r6, #16]
		if (res == FR_OK) {
9000846e:	b1b0      	cbz	r0, 9000849e <f_open+0x126>
				}
			}
#endif
		}

		FREE_NAMBUF();
90008470:	4640      	mov	r0, r8
90008472:	f000 fc60 	bl	90008d36 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
90008476:	b10c      	cbz	r4, 9000847c <f_open+0x104>
90008478:	2300      	movs	r3, #0
9000847a:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
9000847c:	4620      	mov	r0, r4
9000847e:	b010      	add	sp, #64	; 0x40
90008480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
90008484:	2406      	movs	r4, #6
90008486:	e7a8      	b.n	900083da <f_open+0x62>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
90008488:	f89d 3012 	ldrb.w	r3, [sp, #18]
9000848c:	f013 0f11 	tst.w	r3, #17
90008490:	d124      	bne.n	900084dc <f_open+0x164>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008492:	f019 0f04 	tst.w	r9, #4
90008496:	d172      	bne.n	9000857e <f_open+0x206>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
90008498:	f019 0f08 	tst.w	r9, #8
9000849c:	d1b3      	bne.n	90008406 <f_open+0x8e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
9000849e:	0738      	lsls	r0, r7, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
900084a0:	6b33      	ldr	r3, [r6, #48]	; 0x30
			fp->dir_ptr = dj.dir;
900084a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
900084a4:	a803      	add	r0, sp, #12
				mode |= FA_MODIFIED;
900084a6:	bf48      	it	mi
900084a8:	f047 0740 	orrmi.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
900084ac:	626b      	str	r3, [r5, #36]	; 0x24
			fp->dir_ptr = dj.dir;
900084ae:	62ac      	str	r4, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
900084b0:	f017 0ffe 	tst.w	r7, #254	; 0xfe
900084b4:	bf14      	ite	ne
900084b6:	2101      	movne	r1, #1
900084b8:	2100      	moveq	r1, #0
900084ba:	f7fe fe23 	bl	90007104 <inc_lock>
900084be:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
900084c0:	b970      	cbnz	r0, 900084e0 <f_open+0x168>
900084c2:	2402      	movs	r4, #2
900084c4:	e7d4      	b.n	90008470 <f_open+0xf8>
			if (res == FR_OK) {					/* Following succeeded */
900084c6:	2c00      	cmp	r4, #0
900084c8:	d1d2      	bne.n	90008470 <f_open+0xf8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
900084ca:	f89d 3012 	ldrb.w	r3, [sp, #18]
900084ce:	06da      	lsls	r2, r3, #27
900084d0:	d457      	bmi.n	90008582 <f_open+0x20a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
900084d2:	f019 0f02 	tst.w	r9, #2
900084d6:	d0e2      	beq.n	9000849e <f_open+0x126>
900084d8:	07dc      	lsls	r4, r3, #31
900084da:	d5e0      	bpl.n	9000849e <f_open+0x126>
					res = FR_DENIED;
900084dc:	2407      	movs	r4, #7
900084de:	e7c7      	b.n	90008470 <f_open+0xf8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
900084e0:	7830      	ldrb	r0, [r6, #0]
900084e2:	4621      	mov	r1, r4
900084e4:	f7ff f9dd 	bl	900078a2 <ld_clust.isra.0>
900084e8:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
900084ea:	f104 001c 	add.w	r0, r4, #28
			fp->cltbl = 0;			/* Disable fast seek mode */
900084ee:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
900084f0:	f7fe fdbe 	bl	90007070 <ld_dword>
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
900084f4:	f105 0930 	add.w	r9, r5, #48	; 0x30
			fp->obj.id = fs->id;
900084f8:	88f3      	ldrh	r3, [r6, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
900084fa:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
900084fe:	60e8      	str	r0, [r5, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008500:	4648      	mov	r0, r9
			fp->cltbl = 0;			/* Disable fast seek mode */
90008502:	62e9      	str	r1, [r5, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
90008504:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
90008506:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
90008508:	752f      	strb	r7, [r5, #20]
			fp->err = 0;			/* Clear error flag */
9000850a:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
9000850c:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
9000850e:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008510:	f7fe fdb8 	bl	90007084 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
90008514:	06ba      	lsls	r2, r7, #26
90008516:	d401      	bmi.n	9000851c <f_open+0x1a4>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008518:	2400      	movs	r4, #0
9000851a:	e7a9      	b.n	90008470 <f_open+0xf8>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
9000851c:	68ef      	ldr	r7, [r5, #12]
9000851e:	2f00      	cmp	r7, #0
90008520:	d0fa      	beq.n	90008518 <f_open+0x1a0>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
90008522:	8974      	ldrh	r4, [r6, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
90008524:	68a9      	ldr	r1, [r5, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
90008526:	0264      	lsls	r4, r4, #9
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
90008528:	61af      	str	r7, [r5, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
9000852a:	42bc      	cmp	r4, r7
9000852c:	d318      	bcc.n	90008560 <f_open+0x1e8>
9000852e:	2400      	movs	r4, #0
				fp->clust = clst;
90008530:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
90008532:	2c00      	cmp	r4, #0
90008534:	d19c      	bne.n	90008470 <f_open+0xf8>
90008536:	f3c7 0308 	ubfx	r3, r7, #0, #9
9000853a:	2b00      	cmp	r3, #0
9000853c:	d0ec      	beq.n	90008518 <f_open+0x1a0>
					if ((sc = clust2sect(fs, clst)) == 0) {
9000853e:	4630      	mov	r0, r6
90008540:	f7fe fe4e 	bl	900071e0 <clust2sect>
90008544:	2800      	cmp	r0, #0
90008546:	d0bc      	beq.n	900084c2 <f_open+0x14a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
90008548:	eb00 2257 	add.w	r2, r0, r7, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
9000854c:	2301      	movs	r3, #1
9000854e:	4649      	mov	r1, r9
						fp->sect = sc + (DWORD)(ofs / SS(fs));
90008550:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
90008552:	7870      	ldrb	r0, [r6, #1]
90008554:	f7fe fd60 	bl	90007018 <disk_read>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008558:	1e04      	subs	r4, r0, #0
9000855a:	bf18      	it	ne
9000855c:	2401      	movne	r4, #1
9000855e:	e787      	b.n	90008470 <f_open+0xf8>
					clst = get_fat(&fp->obj, clst);
90008560:	6828      	ldr	r0, [r5, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
90008562:	1b3f      	subs	r7, r7, r4
					clst = get_fat(&fp->obj, clst);
90008564:	f7ff f9a5 	bl	900078b2 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
90008568:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
9000856a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
9000856c:	d903      	bls.n	90008576 <f_open+0x1fe>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
9000856e:	1c43      	adds	r3, r0, #1
90008570:	d1db      	bne.n	9000852a <f_open+0x1b2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
90008572:	2401      	movs	r4, #1
90008574:	e7dc      	b.n	90008530 <f_open+0x1b8>
					if (clst <= 1) res = FR_INT_ERR;
90008576:	2402      	movs	r4, #2
90008578:	e7da      	b.n	90008530 <f_open+0x1b8>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
9000857a:	2412      	movs	r4, #18
9000857c:	e778      	b.n	90008470 <f_open+0xf8>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
9000857e:	2408      	movs	r4, #8
90008580:	e776      	b.n	90008470 <f_open+0xf8>
					res = FR_NO_FILE;
90008582:	2404      	movs	r4, #4
90008584:	e774      	b.n	90008470 <f_open+0xf8>
90008586:	4604      	mov	r4, r0
90008588:	e776      	b.n	90008478 <f_open+0x100>
	if (!fp) return FR_INVALID_OBJECT;
9000858a:	2409      	movs	r4, #9
9000858c:	e776      	b.n	9000847c <f_open+0x104>
		INIT_NAMBUF(fs);
9000858e:	2411      	movs	r4, #17
90008590:	e774      	b.n	9000847c <f_open+0x104>
90008592:	bf00      	nop
90008594:	20000730 	.word	0x20000730

90008598 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
90008598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000859c:	b087      	sub	sp, #28
9000859e:	4617      	mov	r7, r2
900085a0:	4689      	mov	r9, r1
900085a2:	4604      	mov	r4, r0
900085a4:	9301      	str	r3, [sp, #4]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
900085a6:	2300      	movs	r3, #0
900085a8:	9a01      	ldr	r2, [sp, #4]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
900085aa:	a905      	add	r1, sp, #20
	*br = 0;	/* Clear read byte counter */
900085ac:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
900085ae:	f7fe fe6a 	bl	90007286 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
900085b2:	4605      	mov	r5, r0
900085b4:	bb20      	cbnz	r0, 90008600 <f_read+0x68>
900085b6:	7d65      	ldrb	r5, [r4, #21]
900085b8:	bb15      	cbnz	r5, 90008600 <f_read+0x68>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
900085ba:	7d23      	ldrb	r3, [r4, #20]
900085bc:	f013 0301 	ands.w	r3, r3, #1
900085c0:	9302      	str	r3, [sp, #8]
900085c2:	f000 8098 	beq.w	900086f6 <f_read+0x15e>
	remain = fp->obj.objsize - fp->fptr;
900085c6:	68e6      	ldr	r6, [r4, #12]
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
900085c8:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	remain = fp->obj.objsize - fp->fptr;
900085cc:	69a3      	ldr	r3, [r4, #24]
900085ce:	1af6      	subs	r6, r6, r3
900085d0:	42be      	cmp	r6, r7
900085d2:	bf28      	it	cs
900085d4:	463e      	movcs	r6, r7
	for ( ;  btr;								/* Repeat until all data read */
900085d6:	b19e      	cbz	r6, 90008600 <f_read+0x68>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
900085d8:	69a1      	ldr	r1, [r4, #24]
900085da:	f3c1 0308 	ubfx	r3, r1, #0, #9
900085de:	2b00      	cmp	r3, #0
900085e0:	d17b      	bne.n	900086da <f_read+0x142>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
900085e2:	f8dd a014 	ldr.w	sl, [sp, #20]
900085e6:	f8ba 800a 	ldrh.w	r8, [sl, #10]
900085ea:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
900085ee:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
900085f2:	d11b      	bne.n	9000862c <f_read+0x94>
				if (fp->fptr == 0) {			/* On the top of the file? */
900085f4:	b941      	cbnz	r1, 90008608 <f_read+0x70>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
900085f6:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
900085f8:	2801      	cmp	r0, #1
900085fa:	d810      	bhi.n	9000861e <f_read+0x86>
900085fc:	2502      	movs	r5, #2
900085fe:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
90008600:	4628      	mov	r0, r5
90008602:	b007      	add	sp, #28
90008604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
90008608:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000860a:	b11b      	cbz	r3, 90008614 <f_read+0x7c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
9000860c:	4620      	mov	r0, r4
9000860e:	f7fe fdf2 	bl	900071f6 <clmt_clust>
90008612:	e7f1      	b.n	900085f8 <f_read+0x60>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
90008614:	69e1      	ldr	r1, [r4, #28]
90008616:	6820      	ldr	r0, [r4, #0]
90008618:	f7ff f94b 	bl	900078b2 <get_fat.isra.0>
9000861c:	e7ec      	b.n	900085f8 <f_read+0x60>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
9000861e:	1c43      	adds	r3, r0, #1
90008620:	d103      	bne.n	9000862a <f_read+0x92>
90008622:	2301      	movs	r3, #1
90008624:	9d02      	ldr	r5, [sp, #8]
90008626:	7563      	strb	r3, [r4, #21]
90008628:	e7ea      	b.n	90008600 <f_read+0x68>
				fp->clust = clst;				/* Update current cluster */
9000862a:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
9000862c:	69e1      	ldr	r1, [r4, #28]
9000862e:	4650      	mov	r0, sl
90008630:	f7fe fdd6 	bl	900071e0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
90008634:	2800      	cmp	r0, #0
90008636:	d0e1      	beq.n	900085fc <f_read+0x64>
			if (cc) {							/* Read maximum contiguous sectors directly */
90008638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
9000863c:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
90008640:	d32e      	bcc.n	900086a0 <f_read+0x108>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90008642:	f8ba 200a 	ldrh.w	r2, [sl, #10]
90008646:	eb08 2156 	add.w	r1, r8, r6, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
9000864a:	0a73      	lsrs	r3, r6, #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
9000864c:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90008650:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008652:	4649      	mov	r1, r9
					cc = fs->csize - csect;
90008654:	bf88      	it	hi
90008656:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
9000865a:	463a      	mov	r2, r7
9000865c:	9303      	str	r3, [sp, #12]
9000865e:	f7fe fcdb 	bl	90007018 <disk_read>
90008662:	2800      	cmp	r0, #0
90008664:	d1dd      	bne.n	90008622 <f_read+0x8a>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
90008666:	f994 2014 	ldrsb.w	r2, [r4, #20]
9000866a:	9b03      	ldr	r3, [sp, #12]
9000866c:	2a00      	cmp	r2, #0
9000866e:	da0b      	bge.n	90008688 <f_read+0xf0>
90008670:	6a20      	ldr	r0, [r4, #32]
90008672:	1bc0      	subs	r0, r0, r7
90008674:	4298      	cmp	r0, r3
90008676:	d207      	bcs.n	90008688 <f_read+0xf0>
	if (cnt) {
90008678:	f44f 7200 	mov.w	r2, #512	; 0x200
9000867c:	4659      	mov	r1, fp
9000867e:	eb09 2040 	add.w	r0, r9, r0, lsl #9
90008682:	f7fe fe8e 	bl	900073a2 <mem_cpy.part.0>
90008686:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
90008688:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
9000868a:	69a3      	ldr	r3, [r4, #24]
9000868c:	44b9      	add	r9, r7
9000868e:	9a01      	ldr	r2, [sp, #4]
90008690:	1bf6      	subs	r6, r6, r7
90008692:	443b      	add	r3, r7
90008694:	61a3      	str	r3, [r4, #24]
90008696:	9b01      	ldr	r3, [sp, #4]
90008698:	681b      	ldr	r3, [r3, #0]
9000869a:	443b      	add	r3, r7
9000869c:	6013      	str	r3, [r2, #0]
9000869e:	e79a      	b.n	900085d6 <f_read+0x3e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
900086a0:	6a22      	ldr	r2, [r4, #32]
900086a2:	42ba      	cmp	r2, r7
900086a4:	d018      	beq.n	900086d8 <f_read+0x140>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
900086a6:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
900086aa:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
900086ae:	2b00      	cmp	r3, #0
900086b0:	da09      	bge.n	900086c6 <f_read+0x12e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
900086b2:	2301      	movs	r3, #1
900086b4:	4659      	mov	r1, fp
900086b6:	f7fe fcbd 	bl	90007034 <disk_write>
900086ba:	2800      	cmp	r0, #0
900086bc:	d1b1      	bne.n	90008622 <f_read+0x8a>
					fp->flag &= (BYTE)~FA_DIRTY;
900086be:	7d23      	ldrb	r3, [r4, #20]
900086c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900086c4:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
900086c6:	2301      	movs	r3, #1
900086c8:	463a      	mov	r2, r7
900086ca:	4659      	mov	r1, fp
900086cc:	f89a 0001 	ldrb.w	r0, [sl, #1]
900086d0:	f7fe fca2 	bl	90007018 <disk_read>
900086d4:	2800      	cmp	r0, #0
900086d6:	d1a4      	bne.n	90008622 <f_read+0x8a>
			fp->sect = sect;
900086d8:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
900086da:	69a1      	ldr	r1, [r4, #24]
900086dc:	4648      	mov	r0, r9
900086de:	f3c1 0108 	ubfx	r1, r1, #0, #9
900086e2:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
900086e6:	4459      	add	r1, fp
900086e8:	42b7      	cmp	r7, r6
900086ea:	bf28      	it	cs
900086ec:	4637      	movcs	r7, r6
	if (cnt) {
900086ee:	463a      	mov	r2, r7
900086f0:	f7fe fe57 	bl	900073a2 <mem_cpy.part.0>
}
900086f4:	e7c9      	b.n	9000868a <f_read+0xf2>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
900086f6:	2507      	movs	r5, #7
900086f8:	e782      	b.n	90008600 <f_read+0x68>

900086fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
900086fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900086fe:	469a      	mov	sl, r3
90008700:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
90008702:	2300      	movs	r3, #0
{
90008704:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
90008706:	a903      	add	r1, sp, #12
{
90008708:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
9000870a:	f8ca 3000 	str.w	r3, [sl]
{
9000870e:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
90008710:	f7fe fdb9 	bl	90007286 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
90008714:	4605      	mov	r5, r0
90008716:	bb60      	cbnz	r0, 90008772 <f_write+0x78>
90008718:	7d65      	ldrb	r5, [r4, #21]
9000871a:	bb55      	cbnz	r5, 90008772 <f_write+0x78>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
9000871c:	7d23      	ldrb	r3, [r4, #20]
9000871e:	079a      	lsls	r2, r3, #30
90008720:	f140 80af 	bpl.w	90008882 <f_write+0x188>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
90008724:	69a3      	ldr	r3, [r4, #24]
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
90008726:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
9000872a:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
9000872c:	bf28      	it	cs
9000872e:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
90008730:	b1de      	cbz	r6, 9000876a <f_write+0x70>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
90008732:	69a1      	ldr	r1, [r4, #24]
90008734:	f3c1 0308 	ubfx	r3, r1, #0, #9
90008738:	2b00      	cmp	r3, #0
9000873a:	f040 8090 	bne.w	9000885e <f_write+0x164>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
9000873e:	f8dd 900c 	ldr.w	r9, [sp, #12]
90008742:	f8b9 700a 	ldrh.w	r7, [r9, #10]
90008746:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
90008748:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
9000874c:	d124      	bne.n	90008798 <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
9000874e:	b931      	cbnz	r1, 9000875e <f_write+0x64>
					clst = fp->obj.sclust;	/* Follow from the origin */
90008750:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
90008752:	b9a0      	cbnz	r0, 9000877e <f_write+0x84>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
90008754:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
90008756:	4620      	mov	r0, r4
90008758:	f7ff f939 	bl	900079ce <create_chain>
9000875c:	e004      	b.n	90008768 <f_write+0x6e>
					if (fp->cltbl) {
9000875e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008760:	b15b      	cbz	r3, 9000877a <f_write+0x80>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
90008762:	4620      	mov	r0, r4
90008764:	f7fe fd47 	bl	900071f6 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
90008768:	b948      	cbnz	r0, 9000877e <f_write+0x84>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
9000876a:	7d23      	ldrb	r3, [r4, #20]
9000876c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90008770:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
90008772:	4628      	mov	r0, r5
90008774:	b005      	add	sp, #20
90008776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
9000877a:	69e1      	ldr	r1, [r4, #28]
9000877c:	e7eb      	b.n	90008756 <f_write+0x5c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
9000877e:	2801      	cmp	r0, #1
90008780:	d102      	bne.n	90008788 <f_write+0x8e>
90008782:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90008784:	7565      	strb	r5, [r4, #21]
90008786:	e7f4      	b.n	90008772 <f_write+0x78>
90008788:	1c43      	adds	r3, r0, #1
9000878a:	d101      	bne.n	90008790 <f_write+0x96>
9000878c:	2501      	movs	r5, #1
9000878e:	e7f9      	b.n	90008784 <f_write+0x8a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
90008790:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
90008792:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
90008794:	b903      	cbnz	r3, 90008798 <f_write+0x9e>
90008796:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
90008798:	f994 3014 	ldrsb.w	r3, [r4, #20]
9000879c:	2b00      	cmp	r3, #0
9000879e:	da0c      	bge.n	900087ba <f_write+0xc0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
900087a0:	2301      	movs	r3, #1
900087a2:	6a22      	ldr	r2, [r4, #32]
900087a4:	4659      	mov	r1, fp
900087a6:	f899 0001 	ldrb.w	r0, [r9, #1]
900087aa:	f7fe fc43 	bl	90007034 <disk_write>
900087ae:	2800      	cmp	r0, #0
900087b0:	d1ec      	bne.n	9000878c <f_write+0x92>
				fp->flag &= (BYTE)~FA_DIRTY;
900087b2:	7d23      	ldrb	r3, [r4, #20]
900087b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900087b8:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
900087ba:	69e1      	ldr	r1, [r4, #28]
900087bc:	4648      	mov	r0, r9
900087be:	f7fe fd0f 	bl	900071e0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
900087c2:	2800      	cmp	r0, #0
900087c4:	d0dd      	beq.n	90008782 <f_write+0x88>
			if (cc) {						/* Write maximum contiguous sectors directly */
900087c6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
900087ca:	eb07 0200 	add.w	r2, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
900087ce:	d334      	bcc.n	9000883a <f_write+0x140>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
900087d0:	f8b9 100a 	ldrh.w	r1, [r9, #10]
900087d4:	eb07 2056 	add.w	r0, r7, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
900087d8:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
900087da:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
900087dc:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
900087e0:	bf88      	it	hi
900087e2:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
900087e4:	4641      	mov	r1, r8
900087e6:	e9cd 2300 	strd	r2, r3, [sp]
900087ea:	f7fe fc23 	bl	90007034 <disk_write>
900087ee:	2800      	cmp	r0, #0
900087f0:	d1cc      	bne.n	9000878c <f_write+0x92>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
900087f2:	6a21      	ldr	r1, [r4, #32]
900087f4:	9a00      	ldr	r2, [sp, #0]
900087f6:	9b01      	ldr	r3, [sp, #4]
900087f8:	1a89      	subs	r1, r1, r2
900087fa:	4299      	cmp	r1, r3
900087fc:	d20c      	bcs.n	90008818 <f_write+0x11e>
900087fe:	f44f 7200 	mov.w	r2, #512	; 0x200
90008802:	eb08 2141 	add.w	r1, r8, r1, lsl #9
90008806:	4658      	mov	r0, fp
90008808:	9300      	str	r3, [sp, #0]
	if (cnt) {
9000880a:	f7fe fdca 	bl	900073a2 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
9000880e:	7d22      	ldrb	r2, [r4, #20]
90008810:	9b00      	ldr	r3, [sp, #0]
90008812:	f002 027f 	and.w	r2, r2, #127	; 0x7f
90008816:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
90008818:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
9000881a:	69a3      	ldr	r3, [r4, #24]
9000881c:	44b8      	add	r8, r7
9000881e:	68e2      	ldr	r2, [r4, #12]
90008820:	1bf6      	subs	r6, r6, r7
90008822:	443b      	add	r3, r7
90008824:	61a3      	str	r3, [r4, #24]
90008826:	429a      	cmp	r2, r3
90008828:	bf2c      	ite	cs
9000882a:	60e2      	strcs	r2, [r4, #12]
9000882c:	60e3      	strcc	r3, [r4, #12]
9000882e:	f8da 3000 	ldr.w	r3, [sl]
90008832:	443b      	add	r3, r7
90008834:	f8ca 3000 	str.w	r3, [sl]
90008838:	e77a      	b.n	90008730 <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
9000883a:	6a21      	ldr	r1, [r4, #32]
				fp->fptr < fp->obj.objsize &&
9000883c:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
9000883e:	4291      	cmp	r1, r2
90008840:	d00c      	beq.n	9000885c <f_write+0x162>
90008842:	68e1      	ldr	r1, [r4, #12]
90008844:	4299      	cmp	r1, r3
90008846:	d909      	bls.n	9000885c <f_write+0x162>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
90008848:	2301      	movs	r3, #1
9000884a:	4659      	mov	r1, fp
9000884c:	f899 0001 	ldrb.w	r0, [r9, #1]
90008850:	9200      	str	r2, [sp, #0]
90008852:	f7fe fbe1 	bl	90007018 <disk_read>
				fp->fptr < fp->obj.objsize &&
90008856:	9a00      	ldr	r2, [sp, #0]
90008858:	2800      	cmp	r0, #0
9000885a:	d197      	bne.n	9000878c <f_write+0x92>
			fp->sect = sect;
9000885c:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
9000885e:	69a0      	ldr	r0, [r4, #24]
90008860:	4641      	mov	r1, r8
90008862:	f3c0 0008 	ubfx	r0, r0, #0, #9
90008866:	f5c0 7700 	rsb	r7, r0, #512	; 0x200
9000886a:	4458      	add	r0, fp
9000886c:	42b7      	cmp	r7, r6
9000886e:	bf28      	it	cs
90008870:	4637      	movcs	r7, r6
	if (cnt) {
90008872:	463a      	mov	r2, r7
90008874:	f7fe fd95 	bl	900073a2 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
90008878:	7d23      	ldrb	r3, [r4, #20]
9000887a:	f063 037f 	orn	r3, r3, #127	; 0x7f
9000887e:	7523      	strb	r3, [r4, #20]
90008880:	e7cb      	b.n	9000881a <f_write+0x120>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
90008882:	2507      	movs	r5, #7
90008884:	e775      	b.n	90008772 <f_write+0x78>

90008886 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
90008886:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
9000888a:	a901      	add	r1, sp, #4
{
9000888c:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
9000888e:	f7fe fcfa 	bl	90007286 <validate>
	if (res == FR_OK) {
90008892:	4604      	mov	r4, r0
90008894:	2800      	cmp	r0, #0
90008896:	d13b      	bne.n	90008910 <f_sync+0x8a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
90008898:	7d2b      	ldrb	r3, [r5, #20]
9000889a:	f013 0440 	ands.w	r4, r3, #64	; 0x40
9000889e:	d037      	beq.n	90008910 <f_sync+0x8a>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
900088a0:	061b      	lsls	r3, r3, #24
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
900088a2:	9f01      	ldr	r7, [sp, #4]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
900088a4:	d50b      	bpl.n	900088be <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
900088a6:	2301      	movs	r3, #1
900088a8:	6a2a      	ldr	r2, [r5, #32]
900088aa:	f105 0130 	add.w	r1, r5, #48	; 0x30
900088ae:	7878      	ldrb	r0, [r7, #1]
900088b0:	f7fe fbc0 	bl	90007034 <disk_write>
900088b4:	bb80      	cbnz	r0, 90008918 <f_sync+0x92>
				fp->flag &= (BYTE)~FA_DIRTY;
900088b6:	7d2b      	ldrb	r3, [r5, #20]
900088b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900088bc:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
900088be:	f7fe fbd5 	bl	9000706c <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
900088c2:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
900088c4:	4680      	mov	r8, r0
				res = move_window(fs, fp->dir_sect);
900088c6:	4638      	mov	r0, r7
900088c8:	f7fe fda0 	bl	9000740c <move_window>
				if (res == FR_OK) {
900088cc:	4604      	mov	r4, r0
900088ce:	b9f8      	cbnz	r0, 90008910 <f_sync+0x8a>
					dir = fp->dir_ptr;
900088d0:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
900088d2:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
900088d4:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
900088d6:	f043 0320 	orr.w	r3, r3, #32
900088da:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
900088dc:	68aa      	ldr	r2, [r5, #8]
900088de:	6828      	ldr	r0, [r5, #0]
900088e0:	f7fe fc9a 	bl	90007218 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
900088e4:	68e9      	ldr	r1, [r5, #12]
900088e6:	f106 001c 	add.w	r0, r6, #28
900088ea:	f7fe fbc3 	bl	90007074 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
900088ee:	4641      	mov	r1, r8
900088f0:	f106 0016 	add.w	r0, r6, #22
900088f4:	f7fe fbbe 	bl	90007074 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
900088f8:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
900088fa:	74b4      	strb	r4, [r6, #18]
					res = sync_fs(fs);					/* Restore it to the directory */
900088fc:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val;
900088fe:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
90008900:	70fb      	strb	r3, [r7, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
90008902:	f7fe ff83 	bl	9000780c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
90008906:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
90008908:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
9000890a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
9000890e:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
90008910:	4620      	mov	r0, r4
90008912:	b002      	add	sp, #8
90008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
90008918:	2401      	movs	r4, #1
9000891a:	e7f9      	b.n	90008910 <f_sync+0x8a>

9000891c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
9000891c:	b513      	push	{r0, r1, r4, lr}
9000891e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
90008920:	f7ff ffb1 	bl	90008886 <f_sync>
	if (res == FR_OK)
90008924:	b948      	cbnz	r0, 9000893a <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
90008926:	a901      	add	r1, sp, #4
90008928:	4620      	mov	r0, r4
9000892a:	f7fe fcac 	bl	90007286 <validate>
		if (res == FR_OK) {
9000892e:	b920      	cbnz	r0, 9000893a <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
90008930:	6920      	ldr	r0, [r4, #16]
90008932:	f7fe fc29 	bl	90007188 <dec_lock>
			if (res == FR_OK)
90008936:	b900      	cbnz	r0, 9000893a <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
90008938:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
9000893a:	b002      	add	sp, #8
9000893c:	bd10      	pop	{r4, pc}

9000893e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
9000893e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008942:	b085      	sub	sp, #20
90008944:	460d      	mov	r5, r1
90008946:	4604      	mov	r4, r0
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
90008948:	a903      	add	r1, sp, #12
9000894a:	f7fe fc9c 	bl	90007286 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
9000894e:	4606      	mov	r6, r0
90008950:	b9e8      	cbnz	r0, 9000898e <f_lseek+0x50>
90008952:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
90008954:	b9de      	cbnz	r6, 9000898e <f_lseek+0x50>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
90008956:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008958:	2b00      	cmp	r3, #0
9000895a:	d07c      	beq.n	90008a56 <f_lseek+0x118>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
9000895c:	1c6a      	adds	r2, r5, #1
9000895e:	d139      	bne.n	900089d4 <f_lseek+0x96>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
90008960:	461d      	mov	r5, r3
			cl = fp->obj.sclust;		/* Origin of the chain */
90008962:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
90008966:	2702      	movs	r7, #2
90008968:	f855 bb04 	ldr.w	fp, [r5], #4
			if (cl) {
9000896c:	f1b8 0f00 	cmp.w	r8, #0
90008970:	d028      	beq.n	900089c4 <f_lseek+0x86>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
90008972:	4640      	mov	r0, r8
90008974:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
90008978:	4601      	mov	r1, r0
9000897a:	4681      	mov	r9, r0
9000897c:	6820      	ldr	r0, [r4, #0]
						pcl = cl; ncl++;
9000897e:	f10a 0a01 	add.w	sl, sl, #1
						cl = get_fat(&fp->obj, cl);
90008982:	f7fe ff96 	bl	900078b2 <get_fat.isra.0>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
90008986:	2801      	cmp	r0, #1
90008988:	d807      	bhi.n	9000899a <f_lseek+0x5c>
9000898a:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
9000898c:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
9000898e:	4630      	mov	r0, r6
90008990:	b005      	add	sp, #20
90008992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90008996:	4680      	mov	r8, r0
90008998:	e7eb      	b.n	90008972 <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
9000899a:	1c43      	adds	r3, r0, #1
9000899c:	d101      	bne.n	900089a2 <f_lseek+0x64>
9000899e:	2601      	movs	r6, #1
900089a0:	e7f4      	b.n	9000898c <f_lseek+0x4e>
					} while (cl == pcl + 1);
900089a2:	f109 0901 	add.w	r9, r9, #1
900089a6:	4581      	cmp	r9, r0
900089a8:	d0e6      	beq.n	90008978 <f_lseek+0x3a>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
900089aa:	3702      	adds	r7, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
900089ac:	45bb      	cmp	fp, r7
						*tbl++ = ncl; *tbl++ = tcl;
900089ae:	bf21      	itttt	cs
900089b0:	462b      	movcs	r3, r5
900089b2:	f843 ab08 	strcs.w	sl, [r3], #8
900089b6:	f8c5 8004 	strcs.w	r8, [r5, #4]
900089ba:	461d      	movcs	r5, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
900089bc:	9b03      	ldr	r3, [sp, #12]
900089be:	699b      	ldr	r3, [r3, #24]
900089c0:	4283      	cmp	r3, r0
900089c2:	d8e8      	bhi.n	90008996 <f_lseek+0x58>
			*fp->cltbl = ulen;	/* Number of items used */
900089c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
900089c6:	455f      	cmp	r7, fp
			*fp->cltbl = ulen;	/* Number of items used */
900089c8:	601f      	str	r7, [r3, #0]
			if (ulen <= tlen) {
900089ca:	f200 80d3 	bhi.w	90008b74 <f_lseek+0x236>
				*tbl = 0;		/* Terminate table */
900089ce:	2300      	movs	r3, #0
900089d0:	602b      	str	r3, [r5, #0]
900089d2:	e7dc      	b.n	9000898e <f_lseek+0x50>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
900089d4:	68e7      	ldr	r7, [r4, #12]
900089d6:	42af      	cmp	r7, r5
900089d8:	bf28      	it	cs
900089da:	462f      	movcs	r7, r5
			fp->fptr = ofs;				/* Set file pointer */
900089dc:	61a7      	str	r7, [r4, #24]
			if (ofs) {
900089de:	2f00      	cmp	r7, #0
900089e0:	d0d5      	beq.n	9000898e <f_lseek+0x50>
				fp->clust = clmt_clust(fp, ofs - 1);
900089e2:	f107 39ff 	add.w	r9, r7, #4294967295
900089e6:	4620      	mov	r0, r4
900089e8:	4649      	mov	r1, r9
900089ea:	f7fe fc04 	bl	900071f6 <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
900089ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
				fp->clust = clmt_clust(fp, ofs - 1);
900089f2:	4601      	mov	r1, r0
900089f4:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
900089f6:	4640      	mov	r0, r8
900089f8:	f7fe fbf2 	bl	900071e0 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
900089fc:	2800      	cmp	r0, #0
900089fe:	d0c4      	beq.n	9000898a <f_lseek+0x4c>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90008a00:	f3c7 0708 	ubfx	r7, r7, #0, #9
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
90008a04:	f8b8 500a 	ldrh.w	r5, [r8, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90008a08:	2f00      	cmp	r7, #0
90008a0a:	d0c0      	beq.n	9000898e <f_lseek+0x50>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
90008a0c:	3d01      	subs	r5, #1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90008a0e:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
90008a10:	ea05 2559 	and.w	r5, r5, r9, lsr #9
90008a14:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90008a16:	42aa      	cmp	r2, r5
90008a18:	d0b9      	beq.n	9000898e <f_lseek+0x50>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
90008a1a:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008a1e:	f104 0130 	add.w	r1, r4, #48	; 0x30
90008a22:	f898 0001 	ldrb.w	r0, [r8, #1]
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
90008a26:	2b00      	cmp	r3, #0
90008a28:	da0a      	bge.n	90008a40 <f_lseek+0x102>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008a2a:	2301      	movs	r3, #1
90008a2c:	9101      	str	r1, [sp, #4]
90008a2e:	f7fe fb01 	bl	90007034 <disk_write>
90008a32:	2800      	cmp	r0, #0
90008a34:	d1b3      	bne.n	9000899e <f_lseek+0x60>
						fp->flag &= (BYTE)~FA_DIRTY;
90008a36:	7d23      	ldrb	r3, [r4, #20]
90008a38:	9901      	ldr	r1, [sp, #4]
90008a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90008a3e:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
90008a40:	2301      	movs	r3, #1
90008a42:	462a      	mov	r2, r5
90008a44:	f898 0001 	ldrb.w	r0, [r8, #1]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
90008a48:	f7fe fae6 	bl	90007018 <disk_read>
90008a4c:	4606      	mov	r6, r0
90008a4e:	2800      	cmp	r0, #0
90008a50:	d1a5      	bne.n	9000899e <f_lseek+0x60>
			fp->sect = nsect;
90008a52:	6225      	str	r5, [r4, #32]
90008a54:	e79b      	b.n	9000898e <f_lseek+0x50>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
90008a56:	68e3      	ldr	r3, [r4, #12]
90008a58:	42ab      	cmp	r3, r5
90008a5a:	d204      	bcs.n	90008a66 <f_lseek+0x128>
90008a5c:	7d22      	ldrb	r2, [r4, #20]
90008a5e:	f012 0f02 	tst.w	r2, #2
90008a62:	bf08      	it	eq
90008a64:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
90008a66:	2200      	movs	r2, #0
		ifptr = fp->fptr;
90008a68:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
90008a6a:	61a2      	str	r2, [r4, #24]
		if (ofs) {
90008a6c:	bb55      	cbnz	r5, 90008ac4 <f_lseek+0x186>
		fp->fptr = nsect = 0;
90008a6e:	2500      	movs	r5, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
90008a70:	68e2      	ldr	r2, [r4, #12]
90008a72:	69a3      	ldr	r3, [r4, #24]
90008a74:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
90008a76:	bf84      	itt	hi
90008a78:	7d22      	ldrbhi	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
90008a7a:	60e3      	strhi	r3, [r4, #12]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
90008a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
90008a80:	bf84      	itt	hi
90008a82:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
90008a86:	7522      	strbhi	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
90008a88:	2b00      	cmp	r3, #0
90008a8a:	d080      	beq.n	9000898e <f_lseek+0x50>
90008a8c:	6a22      	ldr	r2, [r4, #32]
90008a8e:	42aa      	cmp	r2, r5
90008a90:	f43f af7d 	beq.w	9000898e <f_lseek+0x50>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
90008a94:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008a98:	f104 0130 	add.w	r1, r4, #48	; 0x30
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
90008a9c:	9e03      	ldr	r6, [sp, #12]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
90008a9e:	2b00      	cmp	r3, #0
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008aa0:	7870      	ldrb	r0, [r6, #1]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
90008aa2:	da0b      	bge.n	90008abc <f_lseek+0x17e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008aa4:	2301      	movs	r3, #1
90008aa6:	9101      	str	r1, [sp, #4]
90008aa8:	f7fe fac4 	bl	90007034 <disk_write>
90008aac:	2800      	cmp	r0, #0
90008aae:	f47f af76 	bne.w	9000899e <f_lseek+0x60>
				fp->flag &= (BYTE)~FA_DIRTY;
90008ab2:	7d23      	ldrb	r3, [r4, #20]
90008ab4:	9901      	ldr	r1, [sp, #4]
90008ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90008aba:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
90008abc:	2301      	movs	r3, #1
90008abe:	462a      	mov	r2, r5
90008ac0:	7870      	ldrb	r0, [r6, #1]
90008ac2:	e7c1      	b.n	90008a48 <f_lseek+0x10a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
90008ac4:	9f03      	ldr	r7, [sp, #12]
90008ac6:	f8b7 800a 	ldrh.w	r8, [r7, #10]
90008aca:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
90008ace:	b313      	cbz	r3, 90008b16 <f_lseek+0x1d8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
90008ad0:	3b01      	subs	r3, #1
90008ad2:	1e6a      	subs	r2, r5, #1
90008ad4:	fbb3 f1f8 	udiv	r1, r3, r8
90008ad8:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
90008adc:	428a      	cmp	r2, r1
90008ade:	d31a      	bcc.n	90008b16 <f_lseek+0x1d8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
90008ae0:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
90008ae4:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
90008ae6:	4013      	ands	r3, r2
				ofs -= fp->fptr;
90008ae8:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
90008aea:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
90008aec:	2900      	cmp	r1, #0
90008aee:	d0be      	beq.n	90008a6e <f_lseek+0x130>
				while (ofs > bcs) {						/* Cluster following loop */
90008af0:	4545      	cmp	r5, r8
					ofs -= bcs; fp->fptr += bcs;
90008af2:	69a3      	ldr	r3, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
90008af4:	d81e      	bhi.n	90008b34 <f_lseek+0x1f6>
				fp->fptr += ofs;
90008af6:	69a3      	ldr	r3, [r4, #24]
90008af8:	442b      	add	r3, r5
90008afa:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
90008afc:	f3c5 0308 	ubfx	r3, r5, #0, #9
90008b00:	2b00      	cmp	r3, #0
90008b02:	d0b4      	beq.n	90008a6e <f_lseek+0x130>
					nsect = clust2sect(fs, clst);	/* Current sector */
90008b04:	4638      	mov	r0, r7
90008b06:	f7fe fb6b 	bl	900071e0 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
90008b0a:	2800      	cmp	r0, #0
90008b0c:	f43f af3d 	beq.w	9000898a <f_lseek+0x4c>
					nsect += (DWORD)(ofs / SS(fs));
90008b10:	eb00 2555 	add.w	r5, r0, r5, lsr #9
90008b14:	e7ac      	b.n	90008a70 <f_lseek+0x132>
				clst = fp->obj.sclust;					/* start from the first cluster */
90008b16:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
90008b18:	b951      	cbnz	r1, 90008b30 <f_lseek+0x1f2>
					clst = create_chain(&fp->obj, 0);
90008b1a:	4620      	mov	r0, r4
90008b1c:	f7fe ff57 	bl	900079ce <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
90008b20:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
90008b22:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
90008b24:	f43f af31 	beq.w	9000898a <f_lseek+0x4c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90008b28:	1c48      	adds	r0, r1, #1
90008b2a:	f43f af38 	beq.w	9000899e <f_lseek+0x60>
					fp->obj.sclust = clst;
90008b2e:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
90008b30:	61e1      	str	r1, [r4, #28]
90008b32:	e7db      	b.n	90008aec <f_lseek+0x1ae>
					ofs -= bcs; fp->fptr += bcs;
90008b34:	4443      	add	r3, r8
90008b36:	eba5 0908 	sub.w	r9, r5, r8
90008b3a:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
90008b3c:	7d23      	ldrb	r3, [r4, #20]
90008b3e:	079a      	lsls	r2, r3, #30
90008b40:	d506      	bpl.n	90008b50 <f_lseek+0x212>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
90008b42:	4620      	mov	r0, r4
90008b44:	f7fe ff43 	bl	900079ce <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
90008b48:	4605      	mov	r5, r0
90008b4a:	b928      	cbnz	r0, 90008b58 <f_lseek+0x21a>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
90008b4c:	4601      	mov	r1, r0
90008b4e:	e7d2      	b.n	90008af6 <f_lseek+0x1b8>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
90008b50:	6820      	ldr	r0, [r4, #0]
90008b52:	f7fe feae 	bl	900078b2 <get_fat.isra.0>
90008b56:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90008b58:	1c6b      	adds	r3, r5, #1
90008b5a:	f43f af20 	beq.w	9000899e <f_lseek+0x60>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
90008b5e:	2d01      	cmp	r5, #1
90008b60:	f67f af13 	bls.w	9000898a <f_lseek+0x4c>
90008b64:	69bb      	ldr	r3, [r7, #24]
90008b66:	42ab      	cmp	r3, r5
90008b68:	f67f af0f 	bls.w	9000898a <f_lseek+0x4c>
					fp->clust = clst;
90008b6c:	4629      	mov	r1, r5
90008b6e:	61e5      	str	r5, [r4, #28]
					ofs -= bcs; fp->fptr += bcs;
90008b70:	464d      	mov	r5, r9
90008b72:	e7bd      	b.n	90008af0 <f_lseek+0x1b2>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
90008b74:	2611      	movs	r6, #17
90008b76:	e70a      	b.n	9000898e <f_lseek+0x50>

90008b78 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
90008b78:	b5f0      	push	{r4, r5, r6, r7, lr}
90008b7a:	b085      	sub	sp, #20
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
90008b7c:	4605      	mov	r5, r0
{
90008b7e:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
90008b80:	2800      	cmp	r0, #0
90008b82:	d046      	beq.n	90008c12 <f_opendir+0x9a>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
90008b84:	2200      	movs	r2, #0
90008b86:	a903      	add	r1, sp, #12
90008b88:	a801      	add	r0, sp, #4
90008b8a:	f7fe fc95 	bl	900074b8 <find_volume>
	if (res == FR_OK) {
90008b8e:	4604      	mov	r4, r0
90008b90:	2800      	cmp	r0, #0
90008b92:	d133      	bne.n	90008bfc <f_opendir+0x84>
		obj->fs = fs;
90008b94:	9f03      	ldr	r7, [sp, #12]
		INIT_NAMBUF(fs);
90008b96:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
90008b9a:	602f      	str	r7, [r5, #0]
		INIT_NAMBUF(fs);
90008b9c:	f000 f8c9 	bl	90008d32 <ff_memalloc>
90008ba0:	4606      	mov	r6, r0
90008ba2:	2800      	cmp	r0, #0
90008ba4:	d037      	beq.n	90008c16 <f_opendir+0x9e>
90008ba6:	60f8      	str	r0, [r7, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
90008ba8:	4628      	mov	r0, r5
90008baa:	9901      	ldr	r1, [sp, #4]
90008bac:	f7ff fa86 	bl	900080bc <follow_path>
		if (res == FR_OK) {						/* Follow completed */
90008bb0:	4604      	mov	r4, r0
90008bb2:	b9e8      	cbnz	r0, 90008bf0 <f_opendir+0x78>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
90008bb4:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
90008bb8:	2b00      	cmp	r3, #0
90008bba:	db07      	blt.n	90008bcc <f_opendir+0x54>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
90008bbc:	79ab      	ldrb	r3, [r5, #6]
90008bbe:	06db      	lsls	r3, r3, #27
90008bc0:	d523      	bpl.n	90008c0a <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
90008bc2:	7838      	ldrb	r0, [r7, #0]
90008bc4:	6a29      	ldr	r1, [r5, #32]
90008bc6:	f7fe fe6c 	bl	900078a2 <ld_clust.isra.0>
90008bca:	60a8      	str	r0, [r5, #8]
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
90008bcc:	88fb      	ldrh	r3, [r7, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
90008bce:	2100      	movs	r1, #0
90008bd0:	4628      	mov	r0, r5
				obj->id = fs->id;
90008bd2:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
90008bd4:	f7fe ff53 	bl	90007a7e <dir_sdi>
#if _FS_LOCK != 0
				if (res == FR_OK) {
90008bd8:	4604      	mov	r4, r0
90008bda:	b948      	cbnz	r0, 90008bf0 <f_opendir+0x78>
					if (obj->sclust) {
90008bdc:	68ab      	ldr	r3, [r5, #8]
90008bde:	b193      	cbz	r3, 90008c06 <f_opendir+0x8e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
90008be0:	4601      	mov	r1, r0
90008be2:	4628      	mov	r0, r5
90008be4:	f7fe fa8e 	bl	90007104 <inc_lock>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
90008be8:	2800      	cmp	r0, #0
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
90008bea:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
90008bec:	bf08      	it	eq
90008bee:	2412      	moveq	r4, #18
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
90008bf0:	4630      	mov	r0, r6
90008bf2:	f000 f8a0 	bl	90008d36 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
90008bf6:	2c04      	cmp	r4, #4
90008bf8:	d009      	beq.n	90008c0e <f_opendir+0x96>
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
90008bfa:	b10c      	cbz	r4, 90008c00 <f_opendir+0x88>
90008bfc:	2300      	movs	r3, #0
90008bfe:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
90008c00:	4620      	mov	r0, r4
90008c02:	b005      	add	sp, #20
90008c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
90008c06:	6128      	str	r0, [r5, #16]
90008c08:	e7f2      	b.n	90008bf0 <f_opendir+0x78>
					res = FR_NO_PATH;
90008c0a:	2405      	movs	r4, #5
90008c0c:	e7f0      	b.n	90008bf0 <f_opendir+0x78>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
90008c0e:	2405      	movs	r4, #5
90008c10:	e7f4      	b.n	90008bfc <f_opendir+0x84>
	if (!dp) return FR_INVALID_OBJECT;
90008c12:	2409      	movs	r4, #9
90008c14:	e7f4      	b.n	90008c00 <f_opendir+0x88>
		INIT_NAMBUF(fs);
90008c16:	2411      	movs	r4, #17
90008c18:	e7f2      	b.n	90008c00 <f_opendir+0x88>

90008c1a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
90008c1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
90008c1c:	a901      	add	r1, sp, #4
{
90008c1e:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
90008c20:	f7fe fb31 	bl	90007286 <validate>
	if (res == FR_OK) {
90008c24:	4604      	mov	r4, r0
90008c26:	b918      	cbnz	r0, 90008c30 <f_closedir+0x16>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
90008c28:	6928      	ldr	r0, [r5, #16]
90008c2a:	b920      	cbnz	r0, 90008c36 <f_closedir+0x1c>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
90008c2c:	2300      	movs	r3, #0
90008c2e:	602b      	str	r3, [r5, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
90008c30:	4620      	mov	r0, r4
90008c32:	b003      	add	sp, #12
90008c34:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
90008c36:	f7fe faa7 	bl	90007188 <dec_lock>
		if (res == FR_OK)
90008c3a:	2800      	cmp	r0, #0
90008c3c:	d0f6      	beq.n	90008c2c <f_closedir+0x12>
90008c3e:	4604      	mov	r4, r0
90008c40:	e7f6      	b.n	90008c30 <f_closedir+0x16>

90008c42 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
90008c42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90008c46:	460f      	mov	r7, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
90008c48:	a901      	add	r1, sp, #4
{
90008c4a:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
90008c4c:	f7fe fb1b 	bl	90007286 <validate>
	if (res == FR_OK) {
90008c50:	4604      	mov	r4, r0
90008c52:	bb30      	cbnz	r0, 90008ca2 <f_readdir+0x60>
		if (!fno) {
90008c54:	b937      	cbnz	r7, 90008c64 <f_readdir+0x22>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
90008c56:	4639      	mov	r1, r7
90008c58:	4628      	mov	r0, r5
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
90008c5a:	b002      	add	sp, #8
90008c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
90008c60:	f7fe bf0d 	b.w	90007a7e <dir_sdi>
			INIT_NAMBUF(fs);
90008c64:	f44f 7000 	mov.w	r0, #512	; 0x200
90008c68:	f000 f863 	bl	90008d32 <ff_memalloc>
90008c6c:	4606      	mov	r6, r0
90008c6e:	b1e0      	cbz	r0, 90008caa <f_readdir+0x68>
90008c70:	9b01      	ldr	r3, [sp, #4]
90008c72:	60d8      	str	r0, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
90008c74:	4628      	mov	r0, r5
90008c76:	f7ff f9a7 	bl	90007fc8 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
90008c7a:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
90008c7e:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
90008c80:	d10c      	bne.n	90008c9c <f_readdir+0x5a>
				get_fileinfo(dp, fno);		/* Get the object information */
90008c82:	4639      	mov	r1, r7
90008c84:	4628      	mov	r0, r5
90008c86:	f7fe fb18 	bl	900072ba <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
90008c8a:	4641      	mov	r1, r8
90008c8c:	4628      	mov	r0, r5
90008c8e:	f7fe ff36 	bl	90007afe <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
90008c92:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
90008c94:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
90008c96:	bf14      	ite	ne
90008c98:	4604      	movne	r4, r0
90008c9a:	2400      	moveq	r4, #0
			FREE_NAMBUF();
90008c9c:	4630      	mov	r0, r6
90008c9e:	f000 f84a 	bl	90008d36 <ff_memfree>
}
90008ca2:	4620      	mov	r0, r4
90008ca4:	b002      	add	sp, #8
90008ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			INIT_NAMBUF(fs);
90008caa:	2411      	movs	r4, #17
90008cac:	e7f9      	b.n	90008ca2 <f_readdir+0x60>
	...

90008cb0 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
90008cb0:	4b0f      	ldr	r3, [pc, #60]	; (90008cf0 <FATFS_LinkDriverEx+0x40>)
{
90008cb2:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
90008cb4:	7b9c      	ldrb	r4, [r3, #14]
90008cb6:	2c01      	cmp	r4, #1
90008cb8:	d817      	bhi.n	90008cea <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
90008cba:	7b9d      	ldrb	r5, [r3, #14]
90008cbc:	2400      	movs	r4, #0
90008cbe:	b2ed      	uxtb	r5, r5
90008cc0:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
90008cc2:	7b9d      	ldrb	r5, [r3, #14]
90008cc4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
90008cc8:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
90008cca:	7b98      	ldrb	r0, [r3, #14]
90008ccc:	4418      	add	r0, r3
90008cce:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
90008cd0:	7b9a      	ldrb	r2, [r3, #14]
90008cd2:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
90008cd4:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
90008cd6:	b2c0      	uxtb	r0, r0
90008cd8:	7398      	strb	r0, [r3, #14]
    path[1] = ':';
90008cda:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
90008cdc:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
90008cde:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
90008ce0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
90008ce2:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
90008ce4:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
90008ce6:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
90008ce8:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
90008cea:	2001      	movs	r0, #1
90008cec:	e7fc      	b.n	90008ce8 <FATFS_LinkDriverEx+0x38>
90008cee:	bf00      	nop
90008cf0:	2000075c 	.word	0x2000075c

90008cf4 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
90008cf4:	2200      	movs	r2, #0
90008cf6:	f7ff bfdb 	b.w	90008cb0 <FATFS_LinkDriverEx>
	...

90008cfc <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
90008cfc:	4a0a      	ldr	r2, [pc, #40]	; (90008d28 <FATFS_UnLinkDriverEx+0x2c>)
90008cfe:	7b93      	ldrb	r3, [r2, #14]
90008d00:	b17b      	cbz	r3, 90008d22 <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
90008d02:	7803      	ldrb	r3, [r0, #0]
90008d04:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
90008d06:	b2db      	uxtb	r3, r3
90008d08:	eb02 0183 	add.w	r1, r2, r3, lsl #2
90008d0c:	6848      	ldr	r0, [r1, #4]
90008d0e:	b140      	cbz	r0, 90008d22 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
90008d10:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
90008d12:	4413      	add	r3, r2
90008d14:	7318      	strb	r0, [r3, #12]
      disk.nbr--;
90008d16:	7b93      	ldrb	r3, [r2, #14]
      disk.drv[DiskNum] = 0;
90008d18:	6048      	str	r0, [r1, #4]
      disk.nbr--;
90008d1a:	3b01      	subs	r3, #1
90008d1c:	b2db      	uxtb	r3, r3
90008d1e:	7393      	strb	r3, [r2, #14]
      ret = 0;
90008d20:	4770      	bx	lr
  uint8_t ret = 1;
90008d22:	2001      	movs	r0, #1
    }
  }

  return ret;
}
90008d24:	4770      	bx	lr
90008d26:	bf00      	nop
90008d28:	2000075c 	.word	0x2000075c

90008d2c <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
90008d2c:	2100      	movs	r1, #0
90008d2e:	f7ff bfe5 	b.w	90008cfc <FATFS_UnLinkDriverEx>

90008d32 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
90008d32:	f001 bb7b 	b.w	9000a42c <malloc>

90008d36 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
90008d36:	f001 bb81 	b.w	9000a43c <free>
	...

90008d3c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
90008d3c:	287f      	cmp	r0, #127	; 0x7f
{
90008d3e:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
90008d40:	d906      	bls.n	90008d50 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
90008d42:	b131      	cbz	r1, 90008d52 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
90008d44:	28ff      	cmp	r0, #255	; 0xff
90008d46:	d811      	bhi.n	90008d6c <ff_convert+0x30>
90008d48:	3880      	subs	r0, #128	; 0x80
90008d4a:	4b09      	ldr	r3, [pc, #36]	; (90008d70 <ff_convert+0x34>)
90008d4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
90008d50:	bd10      	pop	{r4, pc}
90008d52:	4a07      	ldr	r2, [pc, #28]	; (90008d70 <ff_convert+0x34>)
				if (chr == Tbl[c]) break;
90008d54:	f832 4b02 	ldrh.w	r4, [r2], #2
90008d58:	b28b      	uxth	r3, r1
90008d5a:	4284      	cmp	r4, r0
90008d5c:	d003      	beq.n	90008d66 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
90008d5e:	3101      	adds	r1, #1
90008d60:	2980      	cmp	r1, #128	; 0x80
90008d62:	d1f7      	bne.n	90008d54 <ff_convert+0x18>
90008d64:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
90008d66:	3380      	adds	r3, #128	; 0x80
90008d68:	b2d8      	uxtb	r0, r3
90008d6a:	e7f1      	b.n	90008d50 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
90008d6c:	2000      	movs	r0, #0
90008d6e:	e7ef      	b.n	90008d50 <ff_convert+0x14>
90008d70:	9000f5de 	.word	0x9000f5de

90008d74 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
90008d74:	4b1f      	ldr	r3, [pc, #124]	; (90008df4 <ff_wtoupper+0x80>)
90008d76:	f1a3 02bc 	sub.w	r2, r3, #188	; 0xbc
90008d7a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
90008d7e:	bf28      	it	cs
90008d80:	4613      	movcs	r3, r2
{
90008d82:	b570      	push	{r4, r5, r6, lr}
90008d84:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
90008d86:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
90008d8a:	460a      	mov	r2, r1
90008d8c:	b1ab      	cbz	r3, 90008dba <ff_wtoupper+0x46>
90008d8e:	4298      	cmp	r0, r3
90008d90:	d313      	bcc.n	90008dba <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
90008d92:	f831 4c02 	ldrh.w	r4, [r1, #-2]
90008d96:	0a25      	lsrs	r5, r4, #8
90008d98:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
90008d9a:	fa53 f484 	uxtab	r4, r3, r4
90008d9e:	42a0      	cmp	r0, r4
90008da0:	da21      	bge.n	90008de6 <ff_wtoupper+0x72>
			switch (cmd) {
90008da2:	2d08      	cmp	r5, #8
90008da4:	d809      	bhi.n	90008dba <ff_wtoupper+0x46>
90008da6:	e8df f005 	tbb	[pc, r5]
90008daa:	0905      	.short	0x0905
90008dac:	1513110f 	.word	0x1513110f
90008db0:	1917      	.short	0x1917
90008db2:	1b          	.byte	0x1b
90008db3:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
90008db4:	1ac0      	subs	r0, r0, r3
90008db6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
90008dba:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
90008dbc:	1ac3      	subs	r3, r0, r3
90008dbe:	f003 0301 	and.w	r3, r3, #1
90008dc2:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
90008dc4:	b280      	uxth	r0, r0
90008dc6:	e7f8      	b.n	90008dba <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
90008dc8:	3810      	subs	r0, #16
90008dca:	e7fb      	b.n	90008dc4 <ff_wtoupper+0x50>
			case 3:	chr -= 32; break;				/* Shift -32 */
90008dcc:	3820      	subs	r0, #32
90008dce:	e7f9      	b.n	90008dc4 <ff_wtoupper+0x50>
			case 4:	chr -= 48; break;				/* Shift -48 */
90008dd0:	3830      	subs	r0, #48	; 0x30
90008dd2:	e7f7      	b.n	90008dc4 <ff_wtoupper+0x50>
			case 5:	chr -= 26; break;				/* Shift -26 */
90008dd4:	381a      	subs	r0, #26
90008dd6:	e7f5      	b.n	90008dc4 <ff_wtoupper+0x50>
			case 6:	chr += 8; break;				/* Shift +8 */
90008dd8:	3008      	adds	r0, #8
90008dda:	e7f3      	b.n	90008dc4 <ff_wtoupper+0x50>
			case 7: chr -= 80; break;				/* Shift -80 */
90008ddc:	3850      	subs	r0, #80	; 0x50
90008dde:	e7f1      	b.n	90008dc4 <ff_wtoupper+0x50>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
90008de0:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
90008de4:	e7ee      	b.n	90008dc4 <ff_wtoupper+0x50>
		if (!cmd) p += nc;
90008de6:	3104      	adds	r1, #4
90008de8:	2d00      	cmp	r5, #0
90008dea:	d1cc      	bne.n	90008d86 <ff_wtoupper+0x12>
90008dec:	eb02 0346 	add.w	r3, r2, r6, lsl #1
90008df0:	e7c8      	b.n	90008d84 <ff_wtoupper+0x10>
90008df2:	bf00      	nop
90008df4:	9000f79a 	.word	0x9000f79a

90008df8 <EnvDetector_Init>:
#include "FirFilter.h"
#include "EnvDetector.h"

void EnvDetector_Init(EnvDetector *env)
{
90008df8:	b510      	push	{r4, lr}
	FirFilter_Init(&(env -> envLPFilter), (uint8_t)LOW_PASS);
90008dfa:	2100      	movs	r1, #0
{
90008dfc:	4604      	mov	r4, r0
	FirFilter_Init(&(env -> envLPFilter), (uint8_t)LOW_PASS);
90008dfe:	3004      	adds	r0, #4
90008e00:	f000 f813 	bl	90008e2a <FirFilter_Init>

	//Inicializacion de los parametros de env
	env -> out = 0.0f;
90008e04:	2300      	movs	r3, #0
90008e06:	6023      	str	r3, [r4, #0]
}
90008e08:	bd10      	pop	{r4, pc}

90008e0a <EnvDetector_Update>:
    inp => ultima entrada al filtro
*/
float EnvDetector_Update(EnvDetector *env, float inp)
{
	// Se toma el valor absoluto de la entrada
	if(inp<0){
90008e0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
{
90008e0e:	b510      	push	{r4, lr}
	if(inp<0){
90008e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
90008e14:	4604      	mov	r4, r0
		inp = -inp;
	}

	env -> out = FirFilter_Update(&(env -> envLPFilter), inp);
90008e16:	f100 0004 	add.w	r0, r0, #4
		inp = -inp;
90008e1a:	bf48      	it	mi
90008e1c:	eeb1 0a40 	vnegmi.f32	s0, s0
	env -> out = FirFilter_Update(&(env -> envLPFilter), inp);
90008e20:	f000 f81c 	bl	90008e5c <FirFilter_Update>
90008e24:	ed84 0a00 	vstr	s0, [r4]

    return env -> out;
}
90008e28:	bd10      	pop	{r4, pc}

90008e2a <FirFilter_Init>:
	0.000748334746194465,
};

void FirFilter_Init(FirFilter *fir, uint8_t type)
{
    fir -> type=type;
90008e2a:	2900      	cmp	r1, #0
90008e2c:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac

    /*Limpiar el buffer del filtro*/
	for (uint8_t n = 0; n < ((fir -> type == LOW_PASS) ? LOW_PASS_LENGTH : BAND_PASS_LENGHT); n++) {
90008e30:	f04f 0200 	mov.w	r2, #0
90008e34:	f04f 0100 	mov.w	r1, #0
{
90008e38:	b510      	push	{r4, lr}
90008e3a:	bf0c      	ite	eq
90008e3c:	2415      	moveq	r4, #21
90008e3e:	2429      	movne	r4, #41	; 0x29
	for (uint8_t n = 0; n < ((fir -> type == LOW_PASS) ? LOW_PASS_LENGTH : BAND_PASS_LENGHT); n++) {
90008e40:	b2d3      	uxtb	r3, r2
90008e42:	3201      	adds	r2, #1
90008e44:	42a3      	cmp	r3, r4
90008e46:	db05      	blt.n	90008e54 <FirFilter_Init+0x2a>
        fir->buf[n] = 0;
    }

    /* Reseteamos elindice del buffer */
    fir -> bufIndex = 0;
90008e48:	2300      	movs	r3, #0

    /* Limpiamos la salida del filtro */
    fir -> out = 0.0f;
90008e4a:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
    fir -> bufIndex = 0;
90008e4e:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
}
90008e52:	bd10      	pop	{r4, pc}
        fir->buf[n] = 0;
90008e54:	eb00 0383 	add.w	r3, r0, r3, lsl #2
90008e58:	6019      	str	r1, [r3, #0]
	for (uint8_t n = 0; n < ((fir -> type == LOW_PASS) ? LOW_PASS_LENGTH : BAND_PASS_LENGHT); n++) {
90008e5a:	e7f1      	b.n	90008e40 <FirFilter_Init+0x16>

90008e5c <FirFilter_Update>:
    inp => ultima entrada al filtro 
*/
float FirFilter_Update(FirFilter *fir, float inp)
{
    /* Se guarda laultima muestra en el buffer */
    fir->buf[fir->bufIndex] = inp;
90008e5c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
90008e60:	eb00 0283 	add.w	r2, r0, r3, lsl #2

    /* Incremento el indice del buffer */
    fir->bufIndex++;
90008e64:	3301      	adds	r3, #1
{
90008e66:	b5f0      	push	{r4, r5, r6, r7, lr}
    fir->buf[fir->bufIndex] = inp;
90008e68:	ed82 0a00 	vstr	s0, [r2]
    fir->bufIndex++;
90008e6c:	b2db      	uxtb	r3, r3

    /* Se compruba que el tamaño es menor que el tamaño maximo */
    if(fir->bufIndex == ((fir -> type == LOW_PASS) ? LOW_PASS_LENGTH : BAND_PASS_LENGHT))
90008e6e:	f890 40ac 	ldrb.w	r4, [r0, #172]	; 0xac
        fir->bufIndex = 0;
    }

    /* A partir de aqui se computa la siguiente salida del filtro realizando la convolucion */
    /* Se empieza con la salida a cero */
    fir-> out = 0.0f;
90008e72:	2200      	movs	r2, #0

    /* Definimos un indice para la suma de la convolucion */
    uint8_t sumIndex = fir->bufIndex;

    /* Creamos un bucle que englobe a toda la longitud del filtro (numero de coeficientes) */
    for(uint8_t n = 0; n < ((fir -> type == LOW_PASS) ? LOW_PASS_LENGTH : BAND_PASS_LENGHT); n++)
90008e74:	2500      	movs	r5, #0
90008e76:	4e1a      	ldr	r6, [pc, #104]	; (90008ee0 <FirFilter_Update+0x84>)
    if(fir->bufIndex == ((fir -> type == LOW_PASS) ? LOW_PASS_LENGTH : BAND_PASS_LENGHT))
90008e78:	2c00      	cmp	r4, #0
    fir-> out = 0.0f;
90008e7a:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
    if(fir->bufIndex == ((fir -> type == LOW_PASS) ? LOW_PASS_LENGTH : BAND_PASS_LENGHT))
90008e7e:	bf0c      	ite	eq
90008e80:	2715      	moveq	r7, #21
90008e82:	2729      	movne	r7, #41	; 0x29
        fir->bufIndex = 0;
90008e84:	42bb      	cmp	r3, r7
90008e86:	bf08      	it	eq
90008e88:	2300      	moveq	r3, #0
90008e8a:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
    for(uint8_t n = 0; n < ((fir -> type == LOW_PASS) ? LOW_PASS_LENGTH : BAND_PASS_LENGHT); n++)
90008e8e:	b2ea      	uxtb	r2, r5
90008e90:	ed90 0a2a 	vldr	s0, [r0, #168]	; 0xa8
90008e94:	42ba      	cmp	r2, r7
90008e96:	db00      	blt.n	90008e9a <FirFilter_Update+0x3e>

        }
    }

    return fir->out;
}
90008e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(sumIndex > 0) {
90008e9a:	0092      	lsls	r2, r2, #2
90008e9c:	b173      	cbz	r3, 90008ebc <FirFilter_Update+0x60>
            sumIndex--;
90008e9e:	3b01      	subs	r3, #1
90008ea0:	b2db      	uxtb	r3, r3
        if(fir -> type == LOW_PASS){
90008ea2:	b16c      	cbz	r4, 90008ec0 <FirFilter_Update+0x64>
        }else if(fir -> type == BAND_PASS_5K){
90008ea4:	0099      	lsls	r1, r3, #2
90008ea6:	2c01      	cmp	r4, #1
            fir->out += FIR_IMPULSE_RESPONSE_BAND_PASS_5K[n] * fir->buf[sumIndex];
90008ea8:	4432      	add	r2, r6
90008eaa:	4401      	add	r1, r0
90008eac:	bf0c      	ite	eq
90008eae:	ed92 7a15 	vldreq	s14, [r2, #84]	; 0x54
            fir->out += FIR_IMPULSE_RESPONSE_BAND_PASS_10K[n] * fir->buf[sumIndex];
90008eb2:	ed92 7a3e 	vldrne	s14, [r2, #248]	; 0xf8
90008eb6:	edd1 7a00 	vldr	s15, [r1]
90008eba:	e008      	b.n	90008ece <FirFilter_Update+0x72>
            sumIndex = ((fir -> type == LOW_PASS) ? LOW_PASS_LENGTH : BAND_PASS_LENGHT) - 1;
90008ebc:	b96c      	cbnz	r4, 90008eda <FirFilter_Update+0x7e>
90008ebe:	2314      	movs	r3, #20
        	fir->out += FIR_IMPULSE_RESPONSE_LOW_PASS[n] * fir->buf[sumIndex];
90008ec0:	4432      	add	r2, r6
90008ec2:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90008ec6:	ed92 7a00 	vldr	s14, [r2]
90008eca:	edd1 7a00 	vldr	s15, [r1]
            fir->out += FIR_IMPULSE_RESPONSE_BAND_PASS_10K[n] * fir->buf[sumIndex];
90008ece:	eea7 0a27 	vfma.f32	s0, s14, s15
90008ed2:	3501      	adds	r5, #1
        	fir->out += FIR_IMPULSE_RESPONSE_LOW_PASS[n] * fir->buf[sumIndex];
90008ed4:	ed80 0a2a 	vstr	s0, [r0, #168]	; 0xa8
    for(uint8_t n = 0; n < ((fir -> type == LOW_PASS) ? LOW_PASS_LENGTH : BAND_PASS_LENGHT); n++)
90008ed8:	e7d9      	b.n	90008e8e <FirFilter_Update+0x32>
            sumIndex = ((fir -> type == LOW_PASS) ? LOW_PASS_LENGTH : BAND_PASS_LENGHT) - 1;
90008eda:	2328      	movs	r3, #40	; 0x28
90008edc:	e7e2      	b.n	90008ea4 <FirFilter_Update+0x48>
90008ede:	bf00      	nop
90008ee0:	9000f98c 	.word	0x9000f98c

90008ee4 <AUDIO_StorageParse>:
  * @brief  Copies disk content in the explorer list.
  * @param  None
  * @retval Operation result
  */
FRESULT AUDIO_StorageParse(void)
{
90008ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
90008ee6:	b0d5      	sub	sp, #340	; 0x154
  FRESULT res = FR_OK; //Resultado de la operacion
  FILINFO fno; // Informacion del fichero
  DIR dir;
  char *fn;
  
  res = f_opendir(&dir, USBDISKPath);
90008ee8:	491f      	ldr	r1, [pc, #124]	; (90008f68 <AUDIO_StorageParse+0x84>)
  FileList.ptr = 0;
90008eea:	4c20      	ldr	r4, [pc, #128]	; (90008f6c <AUDIO_StorageParse+0x88>)
  res = f_opendir(&dir, USBDISKPath);
90008eec:	a801      	add	r0, sp, #4
90008eee:	f7ff fe43 	bl	90008b78 <f_opendir>
  FileList.ptr = 0;
90008ef2:	2300      	movs	r3, #0
  
  if(res == FR_OK)
90008ef4:	4605      	mov	r5, r0
  FileList.ptr = 0;
90008ef6:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
  if(res == FR_OK)
90008efa:	b920      	cbnz	r0, 90008f06 <AUDIO_StorageParse+0x22>
  {
    while(USBH_MSC_IsReady(&hUSBHost))
90008efc:	4f1c      	ldr	r7, [pc, #112]	; (90008f70 <AUDIO_StorageParse+0x8c>)
90008efe:	4638      	mov	r0, r7
90008f00:	f7fc fe97 	bl	90005c32 <USBH_MSC_IsReady>
90008f04:	b948      	cbnz	r0, 90008f1a <AUDIO_StorageParse+0x36>
          FileList.ptr++;
        }
      }   
    }
  }
  NumObs = FileList.ptr;
90008f06:	f8b4 33d8 	ldrh.w	r3, [r4, #984]	; 0x3d8
  f_closedir(&dir);
90008f0a:	a801      	add	r0, sp, #4
  NumObs = FileList.ptr;
90008f0c:	f8a4 33da 	strh.w	r3, [r4, #986]	; 0x3da
  f_closedir(&dir);
90008f10:	f7ff fe83 	bl	90008c1a <f_closedir>
  return res;
}
90008f14:	4628      	mov	r0, r5
90008f16:	b055      	add	sp, #340	; 0x154
90008f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      res = f_readdir(&dir, &fno);
90008f1a:	a90e      	add	r1, sp, #56	; 0x38
90008f1c:	a801      	add	r0, sp, #4
90008f1e:	f7ff fe90 	bl	90008c42 <f_readdir>
      if(res != FR_OK || fno.fname[0] == 0)
90008f22:	b9f8      	cbnz	r0, 90008f64 <AUDIO_StorageParse+0x80>
90008f24:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
90008f28:	2b00      	cmp	r3, #0
90008f2a:	d0ec      	beq.n	90008f06 <AUDIO_StorageParse+0x22>
      if(fno.fname[0] == '.')
90008f2c:	2b2e      	cmp	r3, #46	; 0x2e
90008f2e:	d0e6      	beq.n	90008efe <AUDIO_StorageParse+0x1a>
      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
90008f30:	f8b4 03d8 	ldrh.w	r0, [r4, #984]	; 0x3d8
90008f34:	2817      	cmp	r0, #23
90008f36:	d8e2      	bhi.n	90008efe <AUDIO_StorageParse+0x1a>
        if((fno.fattrib & AM_DIR) == 0)
90008f38:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
90008f3c:	06db      	lsls	r3, r3, #27
90008f3e:	d4de      	bmi.n	90008efe <AUDIO_StorageParse+0x1a>
          strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
90008f40:	2629      	movs	r6, #41	; 0x29
90008f42:	2228      	movs	r2, #40	; 0x28
90008f44:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
90008f48:	fb06 4000 	mla	r0, r6, r0, r4
90008f4c:	3001      	adds	r0, #1
90008f4e:	f001 fd61 	bl	9000aa14 <strncpy>
          FileList.file[FileList.ptr].type = FILETYPE_FILE;
90008f52:	f8b4 33d8 	ldrh.w	r3, [r4, #984]	; 0x3d8
90008f56:	2201      	movs	r2, #1
90008f58:	435e      	muls	r6, r3
          FileList.ptr++;
90008f5a:	4413      	add	r3, r2
          FileList.file[FileList.ptr].type = FILETYPE_FILE;
90008f5c:	55a2      	strb	r2, [r4, r6]
          FileList.ptr++;
90008f5e:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
90008f62:	e7cc      	b.n	90008efe <AUDIO_StorageParse+0x1a>
90008f64:	4605      	mov	r5, r0
90008f66:	e7ce      	b.n	90008f06 <AUDIO_StorageParse+0x22>
90008f68:	20000b49 	.word	0x20000b49
90008f6c:	2000076c 	.word	0x2000076c
90008f70:	20000d84 	.word	0x20000d84

90008f74 <AUDIO_GetWavObjectNumber>:
  * @retval None
  */
uint16_t AUDIO_GetWavObjectNumber(void)
{
  return NumObs;
}
90008f74:	4b01      	ldr	r3, [pc, #4]	; (90008f7c <AUDIO_GetWavObjectNumber+0x8>)
90008f76:	f8b3 03da 	ldrh.w	r0, [r3, #986]	; 0x3da
90008f7a:	4770      	bx	lr
90008f7c:	2000076c 	.word	0x2000076c

90008f80 <USBH_UserProcess>:
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{
  switch(id)
90008f80:	2904      	cmp	r1, #4
{
90008f82:	460b      	mov	r3, r1
90008f84:	b510      	push	{r4, lr}
  switch(id)
90008f86:	d042      	beq.n	9000900e <USBH_UserProcess+0x8e>
90008f88:	2905      	cmp	r1, #5
90008f8a:	d01a      	beq.n	90008fc2 <USBH_UserProcess+0x42>
90008f8c:	2902      	cmp	r1, #2
90008f8e:	d13d      	bne.n	9000900c <USBH_UserProcess+0x8c>
      LCD_ErrLog("ERROR : Cannot UnLink FatFS Driver! \n");
    }
    break;

  case HOST_USER_CLASS_ACTIVE:
    appli_state = APPLICATION_READY;
90008f90:	4c21      	ldr	r4, [pc, #132]	; (90009018 <USBH_UserProcess+0x98>)
    /* Link the USB Host disk I/O driver */
    if (FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
90008f92:	4822      	ldr	r0, [pc, #136]	; (9000901c <USBH_UserProcess+0x9c>)
    appli_state = APPLICATION_READY;
90008f94:	4621      	mov	r1, r4
90008f96:	f801 3b01 	strb.w	r3, [r1], #1
    if (FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
90008f9a:	f7ff feab 	bl	90008cf4 <FATFS_LinkDriver>
90008f9e:	4602      	mov	r2, r0
90008fa0:	2800      	cmp	r0, #0
90008fa2:	d133      	bne.n	9000900c <USBH_UserProcess+0x8c>
    {
      if (f_mount(&USBH_FatFs, "", 0) != FR_OK)
90008fa4:	491e      	ldr	r1, [pc, #120]	; (90009020 <USBH_UserProcess+0xa0>)
90008fa6:	f104 0008 	add.w	r0, r4, #8
90008faa:	f7ff f9b9 	bl	90008320 <f_mount>
90008fae:	2800      	cmp	r0, #0
90008fb0:	d02c      	beq.n	9000900c <USBH_UserProcess+0x8c>
      {
        LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
90008fb2:	4b1c      	ldr	r3, [pc, #112]	; (90009024 <USBH_UserProcess+0xa4>)
90008fb4:	4c1c      	ldr	r4, [pc, #112]	; (90009028 <USBH_UserProcess+0xa8>)
90008fb6:	481d      	ldr	r0, [pc, #116]	; (9000902c <USBH_UserProcess+0xac>)
90008fb8:	6023      	str	r3, [r4, #0]
90008fba:	f001 fbb5 	bl	9000a728 <iprintf>
90008fbe:	481c      	ldr	r0, [pc, #112]	; (90009030 <USBH_UserProcess+0xb0>)
90008fc0:	e01f      	b.n	90009002 <USBH_UserProcess+0x82>
    appli_state = APPLICATION_DISCONNECT;
90008fc2:	2203      	movs	r2, #3
90008fc4:	4b14      	ldr	r3, [pc, #80]	; (90009018 <USBH_UserProcess+0x98>)
    if (f_mount(NULL, "", 0) != FR_OK)
90008fc6:	4916      	ldr	r1, [pc, #88]	; (90009020 <USBH_UserProcess+0xa0>)
    appli_state = APPLICATION_DISCONNECT;
90008fc8:	701a      	strb	r2, [r3, #0]
    if (f_mount(NULL, "", 0) != FR_OK)
90008fca:	2200      	movs	r2, #0
90008fcc:	4610      	mov	r0, r2
90008fce:	f7ff f9a7 	bl	90008320 <f_mount>
90008fd2:	b158      	cbz	r0, 90008fec <USBH_UserProcess+0x6c>
      LCD_ErrLog("ERROR : Cannot DeInitialize FatFs! \n");
90008fd4:	4b13      	ldr	r3, [pc, #76]	; (90009024 <USBH_UserProcess+0xa4>)
90008fd6:	4c14      	ldr	r4, [pc, #80]	; (90009028 <USBH_UserProcess+0xa8>)
90008fd8:	4814      	ldr	r0, [pc, #80]	; (9000902c <USBH_UserProcess+0xac>)
90008fda:	6023      	str	r3, [r4, #0]
90008fdc:	f001 fba4 	bl	9000a728 <iprintf>
90008fe0:	4814      	ldr	r0, [pc, #80]	; (90009034 <USBH_UserProcess+0xb4>)
90008fe2:	f001 fc0f 	bl	9000a804 <puts>
90008fe6:	f04f 33ff 	mov.w	r3, #4294967295
90008fea:	6023      	str	r3, [r4, #0]
    if (FATFS_UnLinkDriver(USBDISKPath) != 0)
90008fec:	4812      	ldr	r0, [pc, #72]	; (90009038 <USBH_UserProcess+0xb8>)
90008fee:	f7ff fe9d 	bl	90008d2c <FATFS_UnLinkDriver>
90008ff2:	b158      	cbz	r0, 9000900c <USBH_UserProcess+0x8c>
      LCD_ErrLog("ERROR : Cannot UnLink FatFS Driver! \n");
90008ff4:	4b0b      	ldr	r3, [pc, #44]	; (90009024 <USBH_UserProcess+0xa4>)
90008ff6:	4c0c      	ldr	r4, [pc, #48]	; (90009028 <USBH_UserProcess+0xa8>)
90008ff8:	480c      	ldr	r0, [pc, #48]	; (9000902c <USBH_UserProcess+0xac>)
90008ffa:	6023      	str	r3, [r4, #0]
90008ffc:	f001 fb94 	bl	9000a728 <iprintf>
90009000:	480e      	ldr	r0, [pc, #56]	; (9000903c <USBH_UserProcess+0xbc>)
        LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
90009002:	f001 fbff 	bl	9000a804 <puts>
90009006:	f04f 33ff 	mov.w	r3, #4294967295
9000900a:	6023      	str	r3, [r4, #0]
    break;
   
  default:
    break; 
  }
}
9000900c:	bd10      	pop	{r4, pc}
    appli_state = APPLICATION_START;
9000900e:	4b02      	ldr	r3, [pc, #8]	; (90009018 <USBH_UserProcess+0x98>)
90009010:	2201      	movs	r2, #1
90009012:	701a      	strb	r2, [r3, #0]
}
90009014:	e7fa      	b.n	9000900c <USBH_UserProcess+0x8c>
90009016:	bf00      	nop
90009018:	20000b48 	.word	0x20000b48
9000901c:	9000fb50 	.word	0x9000fb50
90009020:	900100d9 	.word	0x900100d9
90009024:	ffff0000 	.word	0xffff0000
90009028:	20011278 	.word	0x20011278
9000902c:	9000fc88 	.word	0x9000fc88
90009030:	90010123 	.word	0x90010123
90009034:	900100da 	.word	0x900100da
90009038:	20000b49 	.word	0x20000b49
9000903c:	900100fe 	.word	0x900100fe

90009040 <main>:
  SCB->VTOR = QSPI_BASE | VECT_TAB_OFFSET;
90009040:	4b5a      	ldr	r3, [pc, #360]	; (900091ac <main+0x16c>)
90009042:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
{
90009046:	b500      	push	{lr}
  SCB->VTOR = QSPI_BASE | VECT_TAB_OFFSET;
90009048:	609a      	str	r2, [r3, #8]
{
9000904a:	b0b3      	sub	sp, #204	; 0xcc
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
9000904c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90009050:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90009054:	2100      	movs	r1, #0
90009056:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
9000905a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000905e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90009062:	695a      	ldr	r2, [r3, #20]
90009064:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90009068:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
9000906a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000906e:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
90009072:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90009076:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
9000907a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000907e:	f643 70e0 	movw	r0, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90009082:	f3c2 01c9 	ubfx	r1, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90009086:	f3c2 324e 	ubfx	r2, r2, #13, #15
9000908a:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000908c:	ea02 0600 	and.w	r6, r2, r0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90009090:	460c      	mov	r4, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90009092:	ea46 7584 	orr.w	r5, r6, r4, lsl #30
      } while (ways-- != 0U);
90009096:	3c01      	subs	r4, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90009098:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
9000909c:	d2f9      	bcs.n	90009092 <main+0x52>
    } while(sets-- != 0U);
9000909e:	3a20      	subs	r2, #32
900090a0:	f112 0f20 	cmn.w	r2, #32
900090a4:	d1f2      	bne.n	9000908c <main+0x4c>
900090a6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900090aa:	695a      	ldr	r2, [r3, #20]
900090ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
900090b0:	615a      	str	r2, [r3, #20]
900090b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900090b6:	f3bf 8f6f 	isb	sy
  HAL_Init();
900090ba:	f7f9 f975 	bl	900023a8 <HAL_Init>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900090be:	2601      	movs	r6, #1
900090c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900090c4:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;  
900090c6:	f04f 0e19 	mov.w	lr, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
900090ca:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
900090cc:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900090ce:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900090d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
900090d6:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;  
900090da:	f44f 73c8 	mov.w	r3, #400	; 0x190
900090de:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 8;
900090e2:	2308      	movs	r3, #8
900090e4:	9310      	str	r3, [sp, #64]	; 0x40
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
900090e6:	f7fa febf 	bl	90003e68 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
900090ea:	b100      	cbz	r0, 900090ee <main+0xae>
  {
    while(1) { ; }
900090ec:	e7fe      	b.n	900090ec <main+0xac>
  }

  /* Activate the OverDrive to reach the 200 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
900090ee:	f7fa fe83 	bl	90003df8 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
900090f2:	b100      	cbz	r0, 900090f6 <main+0xb6>
  {
    while(1) { ; }
900090f4:	e7fe      	b.n	900090f4 <main+0xb4>
  }

  /* Select PLLSAI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
900090f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
900090fa:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
900090fe:	a811      	add	r0, sp, #68	; 0x44
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
90009100:	9619      	str	r6, [sp, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
90009102:	9311      	str	r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
90009104:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
90009108:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
9000910a:	2304      	movs	r3, #4
9000910c:	e9cd c316 	strd	ip, r3, [sp, #88]	; 0x58
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90009110:	f7fb f930 	bl	90004374 <HAL_RCCEx_PeriphCLKConfig>
  if(ret != HAL_OK)
90009114:	b100      	cbz	r0, 90009118 <main+0xd8>
  {
    while(1) { ; }
90009116:	e7fe      	b.n	90009116 <main+0xd6>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
90009118:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
9000911a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
9000911e:	9002      	str	r0, [sp, #8]

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
90009120:	2106      	movs	r1, #6
90009122:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90009124:	e9cd 3500 	strd	r3, r5, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90009128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000912c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
90009130:	f7fb f882 	bl	90004238 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
90009134:	4605      	mov	r5, r0
90009136:	b100      	cbz	r0, 9000913a <main+0xfa>
  {
    while(1) { ; }
90009138:	e7fe      	b.n	90009138 <main+0xf8>
  BSP_LED_Init(LED1);
9000913a:	f7f8 fe4b 	bl	90001dd4 <BSP_LED_Init>
  BSP_LCD_Init();
9000913e:	f7f8 fd13 	bl	90001b68 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS); 
90009142:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
90009146:	4630      	mov	r0, r6
90009148:	f7f8 fa78 	bl	9000163c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
9000914c:	4630      	mov	r0, r6
9000914e:	f7f8 fab1 	bl	900016b4 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
90009152:	f7f8 fc4b 	bl	900019ec <BSP_LCD_DisplayOn>
  LCD_LOG_Init();
90009156:	f001 f95f 	bl	9000a418 <LCD_LOG_Init>
  LCD_UsrLog("USB Host library started.\n"); 
9000915a:	4b15      	ldr	r3, [pc, #84]	; (900091b0 <main+0x170>)
9000915c:	4815      	ldr	r0, [pc, #84]	; (900091b4 <main+0x174>)
9000915e:	601c      	str	r4, [r3, #0]
90009160:	f001 fb50 	bl	9000a804 <puts>
  USBH_UsrLog("Starting Audio Demo");
90009164:	4814      	ldr	r0, [pc, #80]	; (900091b8 <main+0x178>)
90009166:	f001 fadf 	bl	9000a728 <iprintf>
9000916a:	200a      	movs	r0, #10
9000916c:	f001 faee 	bl	9000a74c <putchar>
  AUDIO_PLAYER_Init();
90009170:	f000 fba4 	bl	900098bc <AUDIO_PLAYER_Init>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
90009174:	f7f8 fa4a 	bl	9000160c <BSP_LCD_GetXSize>
90009178:	4604      	mov	r4, r0
9000917a:	f7f8 fa53 	bl	90001624 <BSP_LCD_GetYSize>
9000917e:	b281      	uxth	r1, r0
90009180:	b2a0      	uxth	r0, r4
    USBH_Process(&hUSBHost);
90009182:	4c0e      	ldr	r4, [pc, #56]	; (900091bc <main+0x17c>)
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
90009184:	f7f8 fff0 	bl	90002168 <BSP_TS_Init>
  USBH_Init(&hUSBHost, USBH_UserProcess, 0);
90009188:	462a      	mov	r2, r5
9000918a:	490d      	ldr	r1, [pc, #52]	; (900091c0 <main+0x180>)
9000918c:	480b      	ldr	r0, [pc, #44]	; (900091bc <main+0x17c>)
9000918e:	f7fd f8a3 	bl	900062d8 <USBH_Init>
  USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
90009192:	490c      	ldr	r1, [pc, #48]	; (900091c4 <main+0x184>)
90009194:	4809      	ldr	r0, [pc, #36]	; (900091bc <main+0x17c>)
90009196:	f7fd f8cb 	bl	90006330 <USBH_RegisterClass>
  USBH_Start(&hUSBHost);
9000919a:	4808      	ldr	r0, [pc, #32]	; (900091bc <main+0x17c>)
9000919c:	f7fd f94a 	bl	90006434 <USBH_Start>
    USBH_Process(&hUSBHost);
900091a0:	4620      	mov	r0, r4
900091a2:	f7fd f951 	bl	90006448 <USBH_Process>
    AUDIO_MenuProcess();
900091a6:	f000 f857 	bl	90009258 <AUDIO_MenuProcess>
  while (1)
900091aa:	e7f9      	b.n	900091a0 <main+0x160>
900091ac:	e000ed00 	.word	0xe000ed00
900091b0:	20011278 	.word	0x20011278
900091b4:	90010145 	.word	0x90010145
900091b8:	9001015f 	.word	0x9001015f
900091bc:	20000d84 	.word	0x20000d84
900091c0:	90008f81 	.word	0x90008f81
900091c4:	20000090 	.word	0x20000090

900091c8 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{
900091c8:	b510      	push	{r4, lr}
900091ca:	b0a2      	sub	sp, #136	; 0x88
900091cc:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
900091ce:	a801      	add	r0, sp, #4
900091d0:	f7fb fb5a 	bl	90004888 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
900091d4:	f642 3311 	movw	r3, #11025	; 0x2b11
900091d8:	429c      	cmp	r4, r3
900091da:	d007      	beq.n	900091ec <BSP_AUDIO_OUT_ClockConfig+0x24>
900091dc:	f245 6322 	movw	r3, #22050	; 0x5622
900091e0:	429c      	cmp	r4, r3
900091e2:	d003      	beq.n	900091ec <BSP_AUDIO_OUT_ClockConfig+0x24>
900091e4:	f64a 4344 	movw	r3, #44100	; 0xac44
900091e8:	429c      	cmp	r4, r3
900091ea:	d113      	bne.n	90009214 <BSP_AUDIO_OUT_ClockConfig+0x4c>
  {
    /* Configure PLLSAI prescalers */
    /* PLLI2S_VCO: VCO_429M
    SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
900091ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
900091f0:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
900091f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
900091f6:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
900091f8:	2308      	movs	r3, #8
900091fa:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
900091fc:	f240 13ad 	movw	r3, #429	; 0x1ad
90009200:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
90009202:	2302      	movs	r3, #2
90009204:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
90009206:	2313      	movs	r3, #19
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
90009208:	a801      	add	r0, sp, #4
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
9000920a:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
9000920c:	f7fb f8b2 	bl	90004374 <HAL_RCCEx_PeriphCLKConfig>
  }
}
90009210:	b022      	add	sp, #136	; 0x88
90009212:	bd10      	pop	{r4, pc}
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
90009214:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
90009218:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
9000921a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
9000921e:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
90009220:	2308      	movs	r3, #8
90009222:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;
90009224:	f44f 73ac 	mov.w	r3, #344	; 0x158
90009228:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
9000922a:	2307      	movs	r3, #7
9000922c:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
9000922e:	2301      	movs	r3, #1
90009230:	e7ea      	b.n	90009208 <BSP_AUDIO_OUT_ClockConfig+0x40>
	...

90009234 <BSP_LCD_ClockConfig>:
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90009234:	4807      	ldr	r0, [pc, #28]	; (90009254 <BSP_LCD_ClockConfig+0x20>)
90009236:	2308      	movs	r3, #8
90009238:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
9000923c:	23c0      	movs	r3, #192	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
9000923e:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90009242:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
90009244:	2305      	movs	r3, #5
90009246:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
90009248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
9000924c:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
9000924e:	f7fb b891 	b.w	90004374 <HAL_RCCEx_PeriphCLKConfig>
90009252:	bf00      	nop
90009254:	20000b48 	.word	0x20000b48

90009258 <AUDIO_MenuProcess>:
//                            {TOUCH_RECEIVER_XMAX, TOUCH_RECEIVER_YMIN},
//                            {TOUCH_RECEIVER_XMAX, TOUCH_RECEIVER_YMAX},
//                            {TOUCH_RECEIVER_XMIN, TOUCH_RECEIVER_YMAX}};


  if(appli_state == APPLICATION_READY)
90009258:	4b49      	ldr	r3, [pc, #292]	; (90009380 <AUDIO_MenuProcess+0x128>)
{
9000925a:	b530      	push	{r4, r5, lr}
  if(appli_state == APPLICATION_READY)
9000925c:	781b      	ldrb	r3, [r3, #0]
{
9000925e:	b08d      	sub	sp, #52	; 0x34
  if(appli_state == APPLICATION_READY)
90009260:	2b02      	cmp	r3, #2
90009262:	d152      	bne.n	9000930a <AUDIO_MenuProcess+0xb2>
  { 
    switch(AudioDemo.state)
90009264:	4c47      	ldr	r4, [pc, #284]	; (90009384 <AUDIO_MenuProcess+0x12c>)
90009266:	7823      	ldrb	r3, [r4, #0]
90009268:	2b03      	cmp	r3, #3
9000926a:	d84e      	bhi.n	9000930a <AUDIO_MenuProcess+0xb2>
9000926c:	e8df f003 	tbb	[pc, r3]
90009270:	57712f02 	.word	0x57712f02
    ESTADO 1: IDLE
    DEFINICION: actualizar la pantalla con la intefaz de usuario.
    TRANSICION--> WAIT
    */
    case IDLE:
      AudioDemo.state = WAIT;
90009274:	2501      	movs	r5, #1
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
90009276:	4844      	ldr	r0, [pc, #272]	; (90009388 <AUDIO_MenuProcess+0x130>)
      AudioDemo.state = WAIT;
90009278:	7025      	strb	r5, [r4, #0]
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
9000927a:	f7f8 fa2d 	bl	900016d8 <BSP_LCD_SetBackColor>
	  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000927e:	4843      	ldr	r0, [pc, #268]	; (9000938c <AUDIO_MenuProcess+0x134>)
90009280:	f7f8 fa36 	bl	900016f0 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009284:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009288:	f7f8 fa1a 	bl	900016c0 <BSP_LCD_SetTextColor>

	  BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"       ___          ___      __   _      __    ____________  ___");
9000928c:	4940      	ldr	r1, [pc, #256]	; (90009390 <AUDIO_MenuProcess+0x138>)
9000928e:	2002      	movs	r0, #2
90009290:	f7f8 fb36 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(3, (uint8_t *)"      / _ |__ _____/ (_)__  / /  (_)__  / /__ / __/_  __/  |/  /");
90009294:	493f      	ldr	r1, [pc, #252]	; (90009394 <AUDIO_MenuProcess+0x13c>)
90009296:	2003      	movs	r0, #3
90009298:	f7f8 fb32 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"     / __ / // / _  / / _ \\/ /__/ / _ \\/  '_/_\\ \\  / / / /|_/ / ");
9000929c:	493e      	ldr	r1, [pc, #248]	; (90009398 <AUDIO_MenuProcess+0x140>)
9000929e:	2004      	movs	r0, #4
900092a0:	f7f8 fb2e 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    /_/ |_\\_,_/\\_,_/_/\\___/____/_/_//_/_/\\_\\/___/ /_/ /_/  /_/  ");
900092a4:	493d      	ldr	r1, [pc, #244]	; (9000939c <AUDIO_MenuProcess+0x144>)
900092a6:	2005      	movs	r0, #5
900092a8:	f7f8 fb2a 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
	  //BSP_LCD_ClearStringLine(13);     /* Clear touch screen buttons dedicated zone */

	  // Pintamos en la pantalla las posibles opciones (estados) a los qque podamos pasar al pulsar.
	  // MIRAR LA TIPOGRAFÍA PARA PONER ALGUNA MÁS RETRO
	  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
900092ac:	483c      	ldr	r0, [pc, #240]	; (900093a0 <AUDIO_MenuProcess+0x148>)
900092ae:	f7f8 fa1f 	bl	900016f0 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"    >> TRANSMITTER");
900092b2:	493c      	ldr	r1, [pc, #240]	; (900093a4 <AUDIO_MenuProcess+0x14c>)
900092b4:	200a      	movs	r0, #10
900092b6:	f7f8 fb23 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"    >> RECEIVER");
900092ba:	493b      	ldr	r1, [pc, #236]	; (900093a8 <AUDIO_MenuProcess+0x150>)
900092bc:	200d      	movs	r0, #13
900092be:	f7f8 fb1f 	bl	90001900 <BSP_LCD_DisplayStringAtLine>

	  // Creamos los rectángulos de contanto para la selección del modo
	  // Aseguramos de seleccionar la capa 1 y, no se si funcionará, pero es poner la trasparencia.
	  BSP_LCD_SelectLayer(1);
900092c2:	4628      	mov	r0, r5

		}
		break;
    }
  }
}
900092c4:	b00d      	add	sp, #52	; 0x34
900092c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  BSP_LCD_SelectLayer(1);
900092ca:	f7f8 b9f3 	b.w	900016b4 <BSP_LCD_SelectLayer>
    	BSP_TS_GetState(&TS_State);
900092ce:	a801      	add	r0, sp, #4
900092d0:	f7f8 ff94 	bl	900021fc <BSP_TS_GetState>
    	if(TS_State.touchDetected == 1)
900092d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
900092d8:	2b01      	cmp	r3, #1
900092da:	d116      	bne.n	9000930a <AUDIO_MenuProcess+0xb2>
    		if ((TS_State.touchX[0] > TOUCH_TRANSMITTER_XMIN) &&
900092dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
900092e0:	3b29      	subs	r3, #41	; 0x29
900092e2:	b29b      	uxth	r3, r3
900092e4:	2ba8      	cmp	r3, #168	; 0xa8
900092e6:	d809      	bhi.n	900092fc <AUDIO_MenuProcess+0xa4>
    			(TS_State.touchY[0] > TOUCH_TRANSMITTER_YMIN) &&
900092e8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    			(TS_State.touchX[0] < TOUCH_TRANSMITTER_XMAX) &&
900092ec:	f1a3 0297 	sub.w	r2, r3, #151	; 0x97
900092f0:	2a1c      	cmp	r2, #28
900092f2:	d80c      	bhi.n	9000930e <AUDIO_MenuProcess+0xb6>
    			AudioDemo.state = TRANSMITTER;
900092f4:	2303      	movs	r3, #3
900092f6:	7023      	strb	r3, [r4, #0]
    			AUDIO_StorageParse();
900092f8:	f7ff fdf4 	bl	90008ee4 <AUDIO_StorageParse>
          BSP_TS_GetState(&TS_State);
900092fc:	a801      	add	r0, sp, #4
900092fe:	f7f8 ff7d 	bl	900021fc <BSP_TS_GetState>
        }while(TS_State.touchDetected > 0);
90009302:	f89d 3004 	ldrb.w	r3, [sp, #4]
90009306:	2b00      	cmp	r3, #0
90009308:	d1f8      	bne.n	900092fc <AUDIO_MenuProcess+0xa4>
}
9000930a:	b00d      	add	sp, #52	; 0x34
9000930c:	bd30      	pop	{r4, r5, pc}
    				 (TS_State.touchX[0] < TOUCH_RECEIVER_XMAX) &&
9000930e:	3bc9      	subs	r3, #201	; 0xc9
90009310:	2b1c      	cmp	r3, #28
90009312:	d8f3      	bhi.n	900092fc <AUDIO_MenuProcess+0xa4>
    			AudioDemo.state = RECEIVER;
90009314:	2302      	movs	r3, #2
90009316:	7023      	strb	r3, [r4, #0]
    			receiver_INIT();
90009318:	f000 f84e 	bl	900093b8 <receiver_INIT>
9000931c:	e7ee      	b.n	900092fc <AUDIO_MenuProcess+0xa4>
    	if(AudioState == AUDIO_STATE_IDLE)
9000931e:	78a3      	ldrb	r3, [r4, #2]
90009320:	b983      	cbnz	r3, 90009344 <AUDIO_MenuProcess+0xec>
    		BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
90009322:	4819      	ldr	r0, [pc, #100]	; (90009388 <AUDIO_MenuProcess+0x130>)
90009324:	f7f8 f9fc 	bl	90001720 <BSP_LCD_Clear>
    		BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
90009328:	481d      	ldr	r0, [pc, #116]	; (900093a0 <AUDIO_MenuProcess+0x148>)
9000932a:	f7f8 f9e1 	bl	900016f0 <BSP_LCD_SetFont>
    		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
9000932e:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009332:	f7f8 f9c5 	bl	900016c0 <BSP_LCD_SetTextColor>
    		BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >> --TRANSMITTER--");
90009336:	491d      	ldr	r1, [pc, #116]	; (900093ac <AUDIO_MenuProcess+0x154>)
90009338:	2004      	movs	r0, #4
			BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    >> Ready to receive...");
9000933a:	f7f8 fae1 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
			AudioState = AUDIO_STATE_INIT;
9000933e:	2302      	movs	r3, #2
90009340:	70a3      	strb	r3, [r4, #2]
90009342:	e7e2      	b.n	9000930a <AUDIO_MenuProcess+0xb2>
    		if(TRANSMITTER_Process() == AUDIO_ERROR_IO)
90009344:	f000 fb0c 	bl	90009960 <TRANSMITTER_Process>
			if(Receiver_Process()== AUDIO_ERROR_IO)
90009348:	2801      	cmp	r0, #1
9000934a:	d1de      	bne.n	9000930a <AUDIO_MenuProcess+0xb2>
				AudioDemo.state = IDLE;
9000934c:	2300      	movs	r3, #0
9000934e:	7023      	strb	r3, [r4, #0]
}
90009350:	e7db      	b.n	9000930a <AUDIO_MenuProcess+0xb2>
    	if(AudioState == AUDIO_STATE_IDLE)
90009352:	78a3      	ldrb	r3, [r4, #2]
90009354:	b983      	cbnz	r3, 90009378 <AUDIO_MenuProcess+0x120>
			BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
90009356:	480c      	ldr	r0, [pc, #48]	; (90009388 <AUDIO_MenuProcess+0x130>)
90009358:	f7f8 f9e2 	bl	90001720 <BSP_LCD_Clear>
			BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
9000935c:	4810      	ldr	r0, [pc, #64]	; (900093a0 <AUDIO_MenuProcess+0x148>)
9000935e:	f7f8 f9c7 	bl	900016f0 <BSP_LCD_SetFont>
			BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009362:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009366:	f7f8 f9ab 	bl	900016c0 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >> --RECEIVER--");
9000936a:	4911      	ldr	r1, [pc, #68]	; (900093b0 <AUDIO_MenuProcess+0x158>)
9000936c:	2004      	movs	r0, #4
9000936e:	f7f8 fac7 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    >> Ready to receive...");
90009372:	4910      	ldr	r1, [pc, #64]	; (900093b4 <AUDIO_MenuProcess+0x15c>)
90009374:	2005      	movs	r0, #5
90009376:	e7e0      	b.n	9000933a <AUDIO_MenuProcess+0xe2>
			if(Receiver_Process()== AUDIO_ERROR_IO)
90009378:	f000 f850 	bl	9000941c <Receiver_Process>
9000937c:	e7e4      	b.n	90009348 <AUDIO_MenuProcess+0xf0>
9000937e:	bf00      	nop
90009380:	20000b48 	.word	0x20000b48
90009384:	200012cc 	.word	0x200012cc
90009388:	ff008000 	.word	0xff008000
9000938c:	2000006c 	.word	0x2000006c
90009390:	90010173 	.word	0x90010173
90009394:	900101b4 	.word	0x900101b4
90009398:	900101f5 	.word	0x900101f5
9000939c:	90010236 	.word	0x90010236
900093a0:	20000074 	.word	0x20000074
900093a4:	90010277 	.word	0x90010277
900093a8:	9001028a 	.word	0x9001028a
900093ac:	9001029a 	.word	0x9001029a
900093b0:	900102b1 	.word	0x900102b1
900093b4:	900102c5 	.word	0x900102c5

900093b8 <receiver_INIT>:
/**
 * @brief Comienza a meter muestras de audio en el buffer
 * @param None
 * @retval Audio error
 */
AUDIO_ErrorTypeDef receiver_INIT(void) {
900093b8:	b538      	push	{r3, r4, r5, lr}
	BSP_AUDIO_IN_Init(I2S_AUDIOFREQ_44K, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
	BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
900093ba:	4c15      	ldr	r4, [pc, #84]	; (90009410 <receiver_INIT+0x58>)
	BSP_AUDIO_IN_Init(I2S_AUDIOFREQ_44K, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
900093bc:	2202      	movs	r2, #2
900093be:	2110      	movs	r1, #16
900093c0:	f64a 4044 	movw	r0, #44100	; 0xac44
900093c4:	f7f8 f8e0 	bl	90001588 <BSP_AUDIO_IN_Init>
	BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
900093c8:	f44f 5110 	mov.w	r1, #9216	; 0x2400
900093cc:	4620      	mov	r0, r4
	BufferCtl.offset = 0;
	BufferCtl.wr_state = BUFFER_EMPTY;
	BufferRx.index = 0;

	// Inicializamos los filtros y el detector de envolvente
	FirFilter_Init(&filter_BP_5k, (uint8_t) BAND_PASS_5K);
900093ce:	4d11      	ldr	r5, [pc, #68]	; (90009414 <receiver_INIT+0x5c>)
	BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
900093d0:	f7f7 ffdc 	bl	9000138c <BSP_AUDIO_IN_Record>
	BufferCtl.pcm_ptr = 0;
900093d4:	f504 4080 	add.w	r0, r4, #16384	; 0x4000
900093d8:	2400      	movs	r4, #0
	BufferRx.index = 0;
900093da:	4b0f      	ldr	r3, [pc, #60]	; (90009418 <receiver_INIT+0x60>)
	FirFilter_Init(&filter_BP_5k, (uint8_t) BAND_PASS_5K);
900093dc:	2101      	movs	r1, #1
	BufferCtl.pcm_ptr = 0;
900093de:	f8c0 4800 	str.w	r4, [r0, #2048]	; 0x800
	BufferCtl.offset = 0;
900093e2:	f8c0 4808 	str.w	r4, [r0, #2056]	; 0x808
	BufferCtl.wr_state = BUFFER_EMPTY;
900093e6:	f880 4804 	strb.w	r4, [r0, #2052]	; 0x804
	FirFilter_Init(&filter_BP_5k, (uint8_t) BAND_PASS_5K);
900093ea:	4628      	mov	r0, r5
	BufferRx.index = 0;
900093ec:	801c      	strh	r4, [r3, #0]
	FirFilter_Init(&filter_BP_5k, (uint8_t) BAND_PASS_5K);
900093ee:	f7ff fd1c 	bl	90008e2a <FirFilter_Init>
	FirFilter_Init(&filter_BP_10k, (uint8_t) BAND_PASS_10K);
900093f2:	2102      	movs	r1, #2
900093f4:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
900093f8:	f7ff fd17 	bl	90008e2a <FirFilter_Init>
	EnvDetector_Init(&envDetector0);
900093fc:	f505 70b0 	add.w	r0, r5, #352	; 0x160
90009400:	f7ff fcfa 	bl	90008df8 <EnvDetector_Init>
	EnvDetector_Init(&envDetector1);
90009404:	f505 7005 	add.w	r0, r5, #532	; 0x214
90009408:	f7ff fcf6 	bl	90008df8 <EnvDetector_Init>

	return AUDIO_ERROR_NONE;
}
9000940c:	4620      	mov	r0, r4
9000940e:	bd38      	pop	{r3, r4, r5, pc}
90009410:	20003840 	.word	0x20003840
90009414:	200012d0 	.word	0x200012d0
90009418:	2000383c 	.word	0x2000383c

9000941c <Receiver_Process>:

AUDIO_ErrorTypeDef Receiver_Process(void)
{
	AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
	// Máquina de estados general
	switch(AudioState){
9000941c:	4b9e      	ldr	r3, [pc, #632]	; (90009698 <Receiver_Process+0x27c>)
{
9000941e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90009422:	ed2d 8b02 	vpush	{d8}
	switch(AudioState){
90009426:	781a      	ldrb	r2, [r3, #0]
{
90009428:	b083      	sub	sp, #12
	switch(AudioState){
9000942a:	2a02      	cmp	r2, #2
9000942c:	f000 812e 	beq.w	9000968c <Receiver_Process+0x270>
90009430:	2a05      	cmp	r2, #5
90009432:	f040 80ba 	bne.w	900095aa <Receiver_Process+0x18e>

	case AUDIO_STATE_RECORD:

		/* Check if there are Data to write to USB Key */
		if(BufferCtl.wr_state == BUFFER_FULL)
90009436:	4e99      	ldr	r6, [pc, #612]	; (9000969c <Receiver_Process+0x280>)
90009438:	f506 4780 	add.w	r7, r6, #16384	; 0x4000
9000943c:	f897 3804 	ldrb.w	r3, [r7, #2052]	; 0x804
90009440:	2b01      	cmp	r3, #1
90009442:	f040 80b2 	bne.w	900095aa <Receiver_Process+0x18e>
	for (uint16_t i = 0; i<AUDIO_IN_PCM_BUFFER_SIZE/2; i += 2)
90009446:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
		{
		  /* write buffer in file */
		  Read_Buffer((uint16_t*)(BufferCtl.pcm_buff + BufferCtl.offset));
9000944a:	2500      	movs	r5, #0
	FirFilter_Update(&filter_BP_5k, (float)sample);
9000944c:	4c94      	ldr	r4, [pc, #592]	; (900096a0 <Receiver_Process+0x284>)
9000944e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
					BufferRx.buff[BufferRx.index] = byteRecibido;
90009452:	f8df 9290 	ldr.w	r9, [pc, #656]	; 900096e4 <Receiver_Process+0x2c8>
	FirFilter_Update(&filter_BP_10k, (float)sample);
90009456:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
		update_RX(buff[i]);
9000945a:	f936 3025 	ldrsh.w	r3, [r6, r5, lsl #2]
	FirFilter_Update(&filter_BP_5k, (float)sample);
9000945e:	4890      	ldr	r0, [pc, #576]	; (900096a0 <Receiver_Process+0x284>)
		update_RX(buff[i]);
90009460:	ee08 3a10 	vmov	s16, r3
	uint32_t byteswritten = 0;
90009464:	2300      	movs	r3, #0
	FirFilter_Update(&filter_BP_5k, (float)sample);
90009466:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	uint32_t byteswritten = 0;
9000946a:	9301      	str	r3, [sp, #4]
	FirFilter_Update(&filter_BP_5k, (float)sample);
9000946c:	eeb0 0a48 	vmov.f32	s0, s16
90009470:	f7ff fcf4 	bl	90008e5c <FirFilter_Update>
	FirFilter_Update(&filter_BP_10k, (float)sample);
90009474:	4640      	mov	r0, r8
90009476:	eeb0 0a48 	vmov.f32	s0, s16
9000947a:	f7ff fcef 	bl	90008e5c <FirFilter_Update>
	EnvDetector_Update(&envDetector0, filter_BP_5k.out);
9000947e:	4889      	ldr	r0, [pc, #548]	; (900096a4 <Receiver_Process+0x288>)
90009480:	ed94 0a2a 	vldr	s0, [r4, #168]	; 0xa8
90009484:	f7ff fcc1 	bl	90008e0a <EnvDetector_Update>
	EnvDetector_Update(&envDetector1, filter_BP_10k.out);
90009488:	ed94 0a56 	vldr	s0, [r4, #344]	; 0x158
9000948c:	4886      	ldr	r0, [pc, #536]	; (900096a8 <Receiver_Process+0x28c>)
9000948e:	f7ff fcbc 	bl	90008e0a <EnvDetector_Update>
	switch(state){
90009492:	f894 32f4 	ldrb.w	r3, [r4, #756]	; 0x2f4
90009496:	2b03      	cmp	r3, #3
90009498:	d87f      	bhi.n	9000959a <Receiver_Process+0x17e>
9000949a:	e8df f003 	tbb	[pc, r3]
9000949e:	2302      	.short	0x2302
900094a0:	998c      	.short	0x998c
			if(envDetector1.out > RX_THRESHOLD){
900094a2:	ed94 7a85 	vldr	s14, [r4, #532]	; 0x214
900094a6:	eddf 7a81 	vldr	s15, [pc, #516]	; 900096ac <Receiver_Process+0x290>
900094aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
900094ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900094b2:	dd72      	ble.n	9000959a <Receiver_Process+0x17e>
				BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
900094b4:	487e      	ldr	r0, [pc, #504]	; (900096b0 <Receiver_Process+0x294>)
900094b6:	f7f8 f933 	bl	90001720 <BSP_LCD_Clear>
				BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
900094ba:	487e      	ldr	r0, [pc, #504]	; (900096b4 <Receiver_Process+0x298>)
900094bc:	f7f8 f918 	bl	900016f0 <BSP_LCD_SetFont>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
900094c0:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
900094c4:	f7f8 f8fc 	bl	900016c0 <BSP_LCD_SetTextColor>
				BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >> --RECEIVER--");
900094c8:	497b      	ldr	r1, [pc, #492]	; (900096b8 <Receiver_Process+0x29c>)
900094ca:	2004      	movs	r0, #4
900094cc:	f7f8 fa18 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
				BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    >> Ready to receive...");
900094d0:	497a      	ldr	r1, [pc, #488]	; (900096bc <Receiver_Process+0x2a0>)
900094d2:	2005      	movs	r0, #5
900094d4:	f7f8 fa14 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
				BSP_LCD_DisplayStringAtLine(6, (uint8_t*)"    >> Receiving...");
900094d8:	4979      	ldr	r1, [pc, #484]	; (900096c0 <Receiver_Process+0x2a4>)
900094da:	2006      	movs	r0, #6
900094dc:	f7f8 fa10 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
					state = STOP;
900094e0:	2301      	movs	r3, #1
900094e2:	e04a      	b.n	9000957a <Receiver_Process+0x15e>
			if (envDetector1.out < SILENCE_THRESHOLD)
900094e4:	edd4 7a85 	vldr	s15, [r4, #532]	; 0x214
900094e8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 900096c4 <Receiver_Process+0x2a8>
900094ec:	eef4 7ac7 	vcmpe.f32	s15, s14
900094f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900094f4:	d544      	bpl.n	90009580 <Receiver_Process+0x164>
				sprintf((char*) strFileName, "    >> Bytes correctos: %d", bytesCorrectos);
900094f6:	f8b4 22f6 	ldrh.w	r2, [r4, #758]	; 0x2f6
900094fa:	4973      	ldr	r1, [pc, #460]	; (900096c8 <Receiver_Process+0x2ac>)
900094fc:	4873      	ldr	r0, [pc, #460]	; (900096cc <Receiver_Process+0x2b0>)
900094fe:	f001 f989 	bl	9000a814 <siprintf>
				BSP_LCD_DisplayStringAtLine(7, (uint8_t*)strFileName);
90009502:	4972      	ldr	r1, [pc, #456]	; (900096cc <Receiver_Process+0x2b0>)
90009504:	2007      	movs	r0, #7
				sprintf((char*) strFileName, "RX_message_%d.txt", (uint8_t) fileIndex);
90009506:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 900096e8 <Receiver_Process+0x2cc>
				BSP_LCD_DisplayStringAtLine(7, (uint8_t*)strFileName);
9000950a:	f7f8 f9f9 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
				sprintf((char*) strFileName, "    >> Bytes incorrectos: %d", bytesErroneos);
9000950e:	f8b4 2334 	ldrh.w	r2, [r4, #820]	; 0x334
90009512:	496f      	ldr	r1, [pc, #444]	; (900096d0 <Receiver_Process+0x2b4>)
90009514:	486d      	ldr	r0, [pc, #436]	; (900096cc <Receiver_Process+0x2b0>)
90009516:	f001 f97d 	bl	9000a814 <siprintf>
				BSP_LCD_DisplayStringAtLine(8, (uint8_t*)strFileName);
9000951a:	496c      	ldr	r1, [pc, #432]	; (900096cc <Receiver_Process+0x2b0>)
9000951c:	2008      	movs	r0, #8
9000951e:	f7f8 f9ef 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
				BSP_LCD_DisplayStringAtLine(9, (uint8_t*)"    >> Message saved!");
90009522:	496c      	ldr	r1, [pc, #432]	; (900096d4 <Receiver_Process+0x2b8>)
90009524:	2009      	movs	r0, #9
90009526:	f7f8 f9eb 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
				bytesCorrectos = 0;
9000952a:	2300      	movs	r3, #0
				sprintf((char*) strFileName, "RX_message_%d.txt", (uint8_t) fileIndex);
9000952c:	f89a 2004 	ldrb.w	r2, [sl, #4]
90009530:	4969      	ldr	r1, [pc, #420]	; (900096d8 <Receiver_Process+0x2bc>)
90009532:	4866      	ldr	r0, [pc, #408]	; (900096cc <Receiver_Process+0x2b0>)
				bytesCorrectos = 0;
90009534:	f8a4 32f6 	strh.w	r3, [r4, #758]	; 0x2f6
				bytesErroneos = 0;
90009538:	f8a4 3334 	strh.w	r3, [r4, #820]	; 0x334
				sprintf((char*) strFileName, "RX_message_%d.txt", (uint8_t) fileIndex);
9000953c:	f001 f96a 	bl	9000a814 <siprintf>
				if (f_open(&RxFileHandler, (char*) strFileName, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
90009540:	4962      	ldr	r1, [pc, #392]	; (900096cc <Receiver_Process+0x2b0>)
90009542:	220a      	movs	r2, #10
90009544:	f101 0040 	add.w	r0, r1, #64	; 0x40
90009548:	f7fe ff16 	bl	90008378 <f_open>
9000954c:	b960      	cbnz	r0, 90009568 <Receiver_Process+0x14c>
					if(f_write(&RxFileHandler, BufferRx.buff, BufferRx.index, (void*)&byteswritten) == FR_OK)
9000954e:	f8df b190 	ldr.w	fp, [pc, #400]	; 900096e0 <Receiver_Process+0x2c4>
90009552:	ab01      	add	r3, sp, #4
90009554:	4861      	ldr	r0, [pc, #388]	; (900096dc <Receiver_Process+0x2c0>)
90009556:	f8bb 2000 	ldrh.w	r2, [fp]
9000955a:	f5ab 5100 	sub.w	r1, fp, #8192	; 0x2000
9000955e:	f7ff f8cc 	bl	900086fa <f_write>
90009562:	b908      	cbnz	r0, 90009568 <Receiver_Process+0x14c>
						BufferRx.index = 0;
90009564:	f8ab 0000 	strh.w	r0, [fp]
				f_close(&RxFileHandler);
90009568:	485c      	ldr	r0, [pc, #368]	; (900096dc <Receiver_Process+0x2c0>)
9000956a:	f7ff f9d7 	bl	9000891c <f_close>
				fileIndex++;
9000956e:	f89a 3004 	ldrb.w	r3, [sl, #4]
90009572:	3301      	adds	r3, #1
90009574:	f88a 3004 	strb.w	r3, [sl, #4]
				state = SILENCE;
90009578:	2300      	movs	r3, #0
					state = STOP;
9000957a:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
9000957e:	e00c      	b.n	9000959a <Receiver_Process+0x17e>
			} else if(envDetector1.out < envDetector0.out)
90009580:	ed94 7a58 	vldr	s14, [r4, #352]	; 0x160
90009584:	eef4 7ac7 	vcmpe.f32	s15, s14
90009588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000958c:	d505      	bpl.n	9000959a <Receiver_Process+0x17e>
				state = START;
9000958e:	2302      	movs	r3, #2
90009590:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
				cont = SAMPLES_PER_BIT;
90009594:	2340      	movs	r3, #64	; 0x40
				cont = SAMPLES_PER_BIT/2;
90009596:	f884 3568 	strb.w	r3, [r4, #1384]	; 0x568
	for (uint16_t i = 0; i<AUDIO_IN_PCM_BUFFER_SIZE/2; i += 2)
9000959a:	3501      	adds	r5, #1
9000959c:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
900095a0:	f47f af5b 	bne.w	9000945a <Receiver_Process+0x3e>

		  BufferCtl.wr_state =  BUFFER_EMPTY;
900095a4:	2300      	movs	r3, #0
900095a6:	f887 3804 	strb.w	r3, [r7, #2052]	; 0x804
		/* Do Nothing */
		break;
	}

	return audio_error;
}
900095aa:	2000      	movs	r0, #0
900095ac:	b003      	add	sp, #12
900095ae:	ecbd 8b02 	vpop	{d8}
900095b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cont--;
900095b6:	f894 3568 	ldrb.w	r3, [r4, #1384]	; 0x568
900095ba:	3b01      	subs	r3, #1
900095bc:	b2db      	uxtb	r3, r3
900095be:	f884 3568 	strb.w	r3, [r4, #1384]	; 0x568
			if (cont == 0)
900095c2:	2b00      	cmp	r3, #0
900095c4:	d1e9      	bne.n	9000959a <Receiver_Process+0x17e>
				state = DATA;
900095c6:	2303      	movs	r3, #3
900095c8:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
				cont = SAMPLES_PER_BIT/2;
900095cc:	2320      	movs	r3, #32
900095ce:	e7e2      	b.n	90009596 <Receiver_Process+0x17a>
			cont--;
900095d0:	f894 3568 	ldrb.w	r3, [r4, #1384]	; 0x568
900095d4:	3b01      	subs	r3, #1
900095d6:	b2db      	uxtb	r3, r3
900095d8:	f884 3568 	strb.w	r3, [r4, #1384]	; 0x568
			if (cont == 0)
900095dc:	2b00      	cmp	r3, #0
900095de:	d1dc      	bne.n	9000959a <Receiver_Process+0x17e>
				if (currentBit == 8)
900095e0:	f894 2569 	ldrb.w	r2, [r4, #1385]	; 0x569
						parityCalc ^= (byteRecibido >> i) & 1;
900095e4:	f894 156a 	ldrb.w	r1, [r4, #1386]	; 0x56a
				if (currentBit == 8)
900095e8:	2a08      	cmp	r2, #8
900095ea:	d12a      	bne.n	90009642 <Receiver_Process+0x226>
					cont = SAMPLES_PER_BIT;
900095ec:	2240      	movs	r2, #64	; 0x40
900095ee:	f884 2568 	strb.w	r2, [r4, #1384]	; 0x568
					currentBit++;
900095f2:	2209      	movs	r2, #9
900095f4:	f884 2569 	strb.w	r2, [r4, #1385]	; 0x569
						parityCalc ^= (byteRecibido >> i) & 1;
900095f8:	461a      	mov	r2, r3
900095fa:	fa41 f002 	asr.w	r0, r1, r2
					for (uint8_t i = 0; i < 8; i++) {
900095fe:	3201      	adds	r2, #1
						parityCalc ^= (byteRecibido >> i) & 1;
90009600:	f000 0001 	and.w	r0, r0, #1
					for (uint8_t i = 0; i < 8; i++) {
90009604:	2a08      	cmp	r2, #8
						parityCalc ^= (byteRecibido >> i) & 1;
90009606:	ea83 0300 	eor.w	r3, r3, r0
					for (uint8_t i = 0; i < 8; i++) {
9000960a:	d1f6      	bne.n	900095fa <Receiver_Process+0x1de>
					if (parityCalc == (uint8_t)(envDetector1.out > envDetector0.out))
9000960c:	ed94 7a85 	vldr	s14, [r4, #532]	; 0x214
90009610:	edd4 7a58 	vldr	s15, [r4, #352]	; 0x160
90009614:	f884 356b 	strb.w	r3, [r4, #1387]	; 0x56b
90009618:	eeb4 7ae7 	vcmpe.f32	s14, s15
9000961c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90009620:	bfcc      	ite	gt
90009622:	2201      	movgt	r2, #1
90009624:	2200      	movle	r2, #0
90009626:	429a      	cmp	r2, r3
						bytesCorrectos++;
90009628:	bf0b      	itete	eq
9000962a:	f8b4 32f6 	ldrheq.w	r3, [r4, #758]	; 0x2f6
						bytesErroneos++;
9000962e:	f8b4 3334 	ldrhne.w	r3, [r4, #820]	; 0x334
						bytesCorrectos++;
90009632:	3301      	addeq	r3, #1
						bytesErroneos++;
90009634:	3301      	addne	r3, #1
						bytesCorrectos++;
90009636:	bf0c      	ite	eq
90009638:	f8a4 32f6 	strheq.w	r3, [r4, #758]	; 0x2f6
						bytesErroneos++;
9000963c:	f8a4 3334 	strhne.w	r3, [r4, #820]	; 0x334
90009640:	e7ab      	b.n	9000959a <Receiver_Process+0x17e>
				} else if (currentBit == 9)
90009642:	2a09      	cmp	r2, #9
90009644:	d10a      	bne.n	9000965c <Receiver_Process+0x240>
					BufferRx.buff[BufferRx.index] = byteRecibido;
90009646:	4826      	ldr	r0, [pc, #152]	; (900096e0 <Receiver_Process+0x2c4>)
					currentBit = 0;
90009648:	f884 3569 	strb.w	r3, [r4, #1385]	; 0x569
					BufferRx.buff[BufferRx.index] = byteRecibido;
9000964c:	8802      	ldrh	r2, [r0, #0]
					byteRecibido = 0;
9000964e:	f884 356a 	strb.w	r3, [r4, #1386]	; 0x56a
					BufferRx.buff[BufferRx.index] = byteRecibido;
90009652:	f809 1002 	strb.w	r1, [r9, r2]
					BufferRx.index++;
90009656:	3201      	adds	r2, #1
90009658:	8002      	strh	r2, [r0, #0]
					byteRecibido = 0;
9000965a:	e741      	b.n	900094e0 <Receiver_Process+0xc4>
					byteRecibido |= (uint8_t)(envDetector1.out > envDetector0.out) << (7-currentBit);
9000965c:	ed94 7a85 	vldr	s14, [r4, #532]	; 0x214
					cont = SAMPLES_PER_BIT;
90009660:	2340      	movs	r3, #64	; 0x40
					byteRecibido |= (uint8_t)(envDetector1.out > envDetector0.out) << (7-currentBit);
90009662:	edd4 7a58 	vldr	s15, [r4, #352]	; 0x160
90009666:	f1c2 0007 	rsb	r0, r2, #7
					cont = SAMPLES_PER_BIT;
9000966a:	f884 3568 	strb.w	r3, [r4, #1384]	; 0x568
					currentBit++;
9000966e:	3201      	adds	r2, #1
					byteRecibido |= (uint8_t)(envDetector1.out > envDetector0.out) << (7-currentBit);
90009670:	eeb4 7ae7 	vcmpe.f32	s14, s15
					currentBit++;
90009674:	f884 2569 	strb.w	r2, [r4, #1385]	; 0x569
					byteRecibido |= (uint8_t)(envDetector1.out > envDetector0.out) << (7-currentBit);
90009678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9000967c:	bfcc      	ite	gt
9000967e:	2301      	movgt	r3, #1
90009680:	2300      	movle	r3, #0
90009682:	4083      	lsls	r3, r0
90009684:	4319      	orrs	r1, r3
90009686:	f884 156a 	strb.w	r1, [r4, #1386]	; 0x56a
					currentBit++;
9000968a:	e786      	b.n	9000959a <Receiver_Process+0x17e>
    	AudioState = AUDIO_STATE_RECORD;
9000968c:	2205      	movs	r2, #5
9000968e:	701a      	strb	r2, [r3, #0]
    	receiver_INIT();
90009690:	f7ff fe92 	bl	900093b8 <receiver_INIT>
    	break;
90009694:	e789      	b.n	900095aa <Receiver_Process+0x18e>
90009696:	bf00      	nop
90009698:	200012ce 	.word	0x200012ce
9000969c:	20003840 	.word	0x20003840
900096a0:	200012d0 	.word	0x200012d0
900096a4:	20001430 	.word	0x20001430
900096a8:	200014e4 	.word	0x200014e4
900096ac:	45fa0000 	.word	0x45fa0000
900096b0:	ff008000 	.word	0xff008000
900096b4:	20000074 	.word	0x20000074
900096b8:	900102b1 	.word	0x900102b1
900096bc:	900102c5 	.word	0x900102c5
900096c0:	90010348 	.word	0x90010348
900096c4:	43fa0000 	.word	0x43fa0000
900096c8:	9001035c 	.word	0x9001035c
900096cc:	200015c8 	.word	0x200015c8
900096d0:	90010377 	.word	0x90010377
900096d4:	90010394 	.word	0x90010394
900096d8:	900103aa 	.word	0x900103aa
900096dc:	20001608 	.word	0x20001608
900096e0:	2000383c 	.word	0x2000383c
900096e4:	2000183c 	.word	0x2000183c
900096e8:	200000b0 	.word	0x200000b0

900096ec <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
900096ec:	4b0f      	ldr	r3, [pc, #60]	; (9000972c <BSP_AUDIO_IN_TransferComplete_CallBack+0x40>)
900096ee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
900096f2:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
900096f6:	f5b2 5f90 	cmp.w	r2, #4608	; 0x1200
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
900096fa:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
900096fe:	d106      	bne.n	9000970e <BSP_AUDIO_IN_TransferComplete_CallBack+0x22>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
90009700:	2201      	movs	r2, #1
90009702:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
    BufferCtl.offset  = 0;
90009706:	2200      	movs	r2, #0
90009708:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
9000970c:	4770      	bx	lr
9000970e:	f5b2 5f10 	cmp.w	r2, #9216	; 0x2400
90009712:	d309      	bcc.n	90009728 <BSP_AUDIO_IN_TransferComplete_CallBack+0x3c>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
90009714:	2201      	movs	r2, #1
90009716:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
9000971a:	f44f 5290 	mov.w	r2, #4608	; 0x1200
9000971e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
    BufferCtl.pcm_ptr = 0;
90009722:	2200      	movs	r2, #0
90009724:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  }
}
90009728:	4770      	bx	lr
9000972a:	bf00      	nop
9000972c:	20007840 	.word	0x20007840

90009730 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
90009730:	f7ff bfdc 	b.w	900096ec <BSP_AUDIO_IN_TransferComplete_CallBack>

90009734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90009734:	f8df d034 	ldr.w	sp, [pc, #52]	; 9000976c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90009738:	2100      	movs	r1, #0
  b  LoopCopyDataInit
9000973a:	e003      	b.n	90009744 <LoopCopyDataInit>

9000973c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
9000973c:	4b0c      	ldr	r3, [pc, #48]	; (90009770 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
9000973e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
90009740:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
90009742:	3104      	adds	r1, #4

90009744 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90009744:	480b      	ldr	r0, [pc, #44]	; (90009774 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90009746:	4b0c      	ldr	r3, [pc, #48]	; (90009778 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90009748:	1842      	adds	r2, r0, r1
  cmp  r2, r3
9000974a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
9000974c:	d3f6      	bcc.n	9000973c <CopyDataInit>
  ldr  r2, =_sbss
9000974e:	4a0b      	ldr	r2, [pc, #44]	; (9000977c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
90009750:	e002      	b.n	90009758 <LoopFillZerobss>

90009752 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
90009752:	2300      	movs	r3, #0
  str  r3, [r2], #4
90009754:	f842 3b04 	str.w	r3, [r2], #4

90009758 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
90009758:	4b09      	ldr	r3, [pc, #36]	; (90009780 <LoopFillZerobss+0x28>)
  cmp  r2, r3
9000975a:	429a      	cmp	r2, r3
  bcc  FillZerobss
9000975c:	d3f9      	bcc.n	90009752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
9000975e:	f000 f82f 	bl	900097c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
90009762:	f001 f9c1 	bl	9000aae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90009766:	f7ff fc6b 	bl	90009040 <main>
  bx  lr    
9000976a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
9000976c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
90009770:	90010884 	.word	0x90010884
  ldr  r0, =_sdata
90009774:	20000000 	.word	0x20000000
  ldr  r3, =_edata
90009778:	2000011c 	.word	0x2000011c
  ldr  r2, =_sbss
9000977c:	2000011c 	.word	0x2000011c
  ldr  r3, = _ebss
90009780:	20014c94 	.word	0x20014c94

90009784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90009784:	e7fe      	b.n	90009784 <ADC_IRQHandler>

90009786 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
90009786:	4770      	bx	lr

90009788 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90009788:	e7fe      	b.n	90009788 <HardFault_Handler>

9000978a <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
9000978a:	e7fe      	b.n	9000978a <MemManage_Handler>

9000978c <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
9000978c:	e7fe      	b.n	9000978c <BusFault_Handler>

9000978e <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
9000978e:	e7fe      	b.n	9000978e <UsageFault_Handler>

90009790 <SVC_Handler>:
90009790:	4770      	bx	lr

90009792 <DebugMon_Handler>:
90009792:	4770      	bx	lr

90009794 <PendSV_Handler>:
90009794:	4770      	bx	lr

90009796 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
90009796:	f7f8 be19 	b.w	900023cc <HAL_IncTick>
	...

9000979c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
  HAL_HCD_IRQHandler(&hhcd);
9000979c:	4801      	ldr	r0, [pc, #4]	; (900097a4 <OTG_FS_IRQHandler+0x8>)
9000979e:	f7f9 bb87 	b.w	90002eb0 <HAL_HCD_IRQHandler>
900097a2:	bf00      	nop
900097a4:	20010fb4 	.word	0x20010fb4

900097a8 <DMA2_Stream4_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
900097a8:	4b01      	ldr	r3, [pc, #4]	; (900097b0 <DMA2_Stream4_IRQHandler+0x8>)
900097aa:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
900097ac:	f7f8 bf94 	b.w	900026d8 <HAL_DMA_IRQHandler>
900097b0:	20000148 	.word	0x20000148

900097b4 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
900097b4:	4b01      	ldr	r3, [pc, #4]	; (900097bc <DMA2_Stream7_IRQHandler+0x8>)
900097b6:	6f18      	ldr	r0, [r3, #112]	; 0x70
900097b8:	f7f8 bf8e 	b.w	900026d8 <HAL_DMA_IRQHandler>
900097bc:	200001cc 	.word	0x200001cc

900097c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
900097c0:	490f      	ldr	r1, [pc, #60]	; (90009800 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900097c2:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
900097c4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
900097c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
900097cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
900097d0:	4b0c      	ldr	r3, [pc, #48]	; (90009804 <SystemInit+0x44>)
900097d2:	681a      	ldr	r2, [r3, #0]
900097d4:	f042 0201 	orr.w	r2, r2, #1
900097d8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
900097da:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
900097dc:	681a      	ldr	r2, [r3, #0]
900097de:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
900097e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
900097e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
900097e8:	4a07      	ldr	r2, [pc, #28]	; (90009808 <SystemInit+0x48>)
900097ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
900097ec:	681a      	ldr	r2, [r3, #0]
900097ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
900097f2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
900097f4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
900097f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
900097fa:	608b      	str	r3, [r1, #8]
#endif
}
900097fc:	4770      	bx	lr
900097fe:	bf00      	nop
90009800:	e000ed00 	.word	0xe000ed00
90009804:	40023800 	.word	0x40023800
90009808:	24003010 	.word	0x24003010

9000980c <InsertarBit>:
/**
 * @brief  Escribe la secuencia en el archivo WAV.
 * @param  byteLeido: byte leido del fichero que txt que se quiere transmitir
 */
static void InsertarBit(uint8_t bit)
{
9000980c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t byteswritten = 0;

	if (WaveBuffer.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE-64)
9000980e:	4d28      	ldr	r5, [pc, #160]	; (900098b0 <InsertarBit+0xa4>)
	uint32_t byteswritten = 0;
90009810:	2700      	movs	r7, #0
{
90009812:	4606      	mov	r6, r0
	if (WaveBuffer.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE-64)
90009814:	f8d5 2800 	ldr.w	r2, [r5, #2048]	; 0x800
90009818:	f5a5 4480 	sub.w	r4, r5, #16384	; 0x4000
	uint32_t byteswritten = 0;
9000981c:	9701      	str	r7, [sp, #4]
	if (WaveBuffer.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE-64)
9000981e:	f5b2 5f0f 	cmp.w	r2, #9152	; 0x23c0
90009822:	d30d      	bcc.n	90009840 <InsertarBit+0x34>
	{
		// Si se ha llenado el buffer se escribe el buffer en el fichero
		f_write(&MessageWavFile, (uint8_t*)WaveBuffer.pcm_buff, 2*WaveBuffer.pcm_ptr, (void*)&byteswritten);
90009824:	ab01      	add	r3, sp, #4
90009826:	0052      	lsls	r2, r2, #1
90009828:	4621      	mov	r1, r4
9000982a:	4822      	ldr	r0, [pc, #136]	; (900098b4 <InsertarBit+0xa8>)
9000982c:	f7fe ff65 	bl	900086fa <f_write>
		WaveBuffer.pcm_ptr = 0;
		WaveBuffer.fptr += byteswritten;
90009830:	f8d5 380c 	ldr.w	r3, [r5, #2060]	; 0x80c
90009834:	9a01      	ldr	r2, [sp, #4]
		WaveBuffer.pcm_ptr = 0;
90009836:	f8c5 7800 	str.w	r7, [r5, #2048]	; 0x800
		WaveBuffer.fptr += byteswritten;
9000983a:	4413      	add	r3, r2
9000983c:	f8c5 380c 	str.w	r3, [r5, #2060]	; 0x80c
	}

	if (bit == 1)
90009840:	2e01      	cmp	r6, #1
90009842:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
90009846:	d016      	beq.n	90009876 <InsertarBit+0x6a>
90009848:	f103 0180 	add.w	r1, r3, #128	; 0x80
		// En este caso, el bit leido es un cero, por lo que la seal a transmitir es la correspondiente a 5512.5 Hz, y
		// se transmiten todas las muestras del seno. 
		for (uint8_t periodo = 0; periodo < 8; periodo++)
		{
			// Se configura el número de periodos a transmitir, en este caso serian 2 periodos por cada bit.
			for (uint8_t j = 0; j < 8; j++)
9000984c:	4e1a      	ldr	r6, [pc, #104]	; (900098b8 <InsertarBit+0xac>)
9000984e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	if (bit == 1)
90009852:	2000      	movs	r0, #0
			for (uint8_t j = 0; j < 8; j++)
90009854:	3001      	adds	r0, #1
			{
				// De igual forma qque anteriormente, se insertan las muestras en el bufferm dos veces.
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009856:	f836 7b02 	ldrh.w	r7, [r6], #2
			for (uint8_t j = 0; j < 8; j++)
9000985a:	3204      	adds	r2, #4
9000985c:	2808      	cmp	r0, #8
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
9000985e:	f822 7c04 	strh.w	r7, [r2, #-4]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
90009862:	f822 7c02 	strh.w	r7, [r2, #-2]
			for (uint8_t j = 0; j < 8; j++)
90009866:	d1f5      	bne.n	90009854 <InsertarBit+0x48>
				
				// Se actualiza el puntero del buffer.
				WaveBuffer.pcm_ptr += 2;
90009868:	3310      	adds	r3, #16
		for (uint8_t periodo = 0; periodo < 8; periodo++)
9000986a:	428b      	cmp	r3, r1
9000986c:	d1ee      	bne.n	9000984c <InsertarBit+0x40>
9000986e:	f8c5 1800 	str.w	r1, [r5, #2048]	; 0x800
			}
		}
	}
}
90009872:	b003      	add	sp, #12
90009874:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bit == 1)
90009876:	2200      	movs	r2, #0
90009878:	eb04 0143 	add.w	r1, r4, r3, lsl #1
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
9000987c:	f647 76ff 	movw	r6, #32767	; 0x7fff
90009880:	f248 0401 	movw	r4, #32769	; 0x8001
90009884:	4610      	mov	r0, r2
		for (uint8_t periodo = 0; periodo < 16; periodo++)
90009886:	3201      	adds	r2, #1
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009888:	8008      	strh	r0, [r1, #0]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
9000988a:	8048      	strh	r0, [r1, #2]
		for (uint8_t periodo = 0; periodo < 16; periodo++)
9000988c:	3110      	adds	r1, #16
9000988e:	2a10      	cmp	r2, #16
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009890:	f821 6c0c 	strh.w	r6, [r1, #-12]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
90009894:	f821 6c0a 	strh.w	r6, [r1, #-10]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
90009898:	f821 0c08 	strh.w	r0, [r1, #-8]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
9000989c:	f821 0c06 	strh.w	r0, [r1, #-6]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr] = sineSamples[j];
900098a0:	f821 4c04 	strh.w	r4, [r1, #-4]
				WaveBuffer.pcm_buff[WaveBuffer.pcm_ptr+1] = sineSamples[j];
900098a4:	f821 4c02 	strh.w	r4, [r1, #-2]
		for (uint8_t periodo = 0; periodo < 16; periodo++)
900098a8:	d1ed      	bne.n	90009886 <InsertarBit+0x7a>
				WaveBuffer.pcm_ptr += 2;
900098aa:	f103 0180 	add.w	r1, r3, #128	; 0x80
900098ae:	e7de      	b.n	9000986e <InsertarBit+0x62>
900098b0:	2000c794 	.word	0x2000c794
900098b4:	20008050 	.word	0x20008050
900098b8:	9000fb40 	.word	0x9000fb40

900098bc <AUDIO_PLAYER_Init>:
AUDIO_ErrorTypeDef AUDIO_PLAYER_Init(void) {
900098bc:	b508      	push	{r3, lr}
	if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, uwVolume, I2S_AUDIOFREQ_44K)
900098be:	4b06      	ldr	r3, [pc, #24]	; (900098d8 <AUDIO_PLAYER_Init+0x1c>)
900098c0:	f64a 4244 	movw	r2, #44100	; 0xac44
900098c4:	2004      	movs	r0, #4
900098c6:	6819      	ldr	r1, [r3, #0]
900098c8:	b2c9      	uxtb	r1, r1
900098ca:	f7f7 fcf5 	bl	900012b8 <BSP_AUDIO_OUT_Init>
}
900098ce:	3800      	subs	r0, #0
900098d0:	bf18      	it	ne
900098d2:	2001      	movne	r0, #1
900098d4:	bd08      	pop	{r3, pc}
900098d6:	bf00      	nop
900098d8:	200000bc 	.word	0x200000bc

900098dc <ReadFileIntoBuffer>:
AUDIO_ErrorTypeDef ReadFileIntoBuffer(uint8_t idx) {
900098dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
900098de:	4605      	mov	r5, r0
	f_close(&FileHandler);
900098e0:	481a      	ldr	r0, [pc, #104]	; (9000994c <ReadFileIntoBuffer+0x70>)
900098e2:	f7ff f81b 	bl	9000891c <f_close>
	if(f_open(&FileHandler, (char*) FileList.file[idx].name, FA_OPEN_EXISTING | FA_READ) == FR_OK)
900098e6:	2401      	movs	r4, #1
900098e8:	2129      	movs	r1, #41	; 0x29
900098ea:	4e19      	ldr	r6, [pc, #100]	; (90009950 <ReadFileIntoBuffer+0x74>)
900098ec:	4622      	mov	r2, r4
900098ee:	4817      	ldr	r0, [pc, #92]	; (9000994c <ReadFileIntoBuffer+0x70>)
900098f0:	fb11 4105 	smlabb	r1, r1, r5, r4
900098f4:	4431      	add	r1, r6
900098f6:	f7fe fd3f 	bl	90008378 <f_open>
900098fa:	4601      	mov	r1, r0
900098fc:	b9d0      	cbnz	r0, 90009934 <ReadFileIntoBuffer+0x58>
		if (FileList.ptr > idx)
900098fe:	f8b6 33d8 	ldrh.w	r3, [r6, #984]	; 0x3d8
90009902:	42ab      	cmp	r3, r5
90009904:	d802      	bhi.n	9000990c <ReadFileIntoBuffer+0x30>
		return AUDIO_ERROR_IO;
90009906:	2001      	movs	r0, #1
}
90009908:	b002      	add	sp, #8
9000990a:	bd70      	pop	{r4, r5, r6, pc}
			BufferFile.state = BUFFER_OFFSET_NONE;
9000990c:	4c11      	ldr	r4, [pc, #68]	; (90009954 <ReadFileIntoBuffer+0x78>)
9000990e:	7020      	strb	r0, [r4, #0]
			f_lseek(&FileHandler, 0);
90009910:	480e      	ldr	r0, [pc, #56]	; (9000994c <ReadFileIntoBuffer+0x70>)
90009912:	f7ff f814 	bl	9000893e <f_lseek>
			if (f_read(&FileHandler, &BufferFile.buff[0], DATA_FILE_BUFFER_SIZE, (void*) &bytesread) == FR_OK)
90009916:	ab01      	add	r3, sp, #4
90009918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
9000991c:	f5a4 5100 	sub.w	r1, r4, #8192	; 0x2000
90009920:	480a      	ldr	r0, [pc, #40]	; (9000994c <ReadFileIntoBuffer+0x70>)
90009922:	f7fe fe39 	bl	90008598 <f_read>
90009926:	2800      	cmp	r0, #0
90009928:	d1ed      	bne.n	90009906 <ReadFileIntoBuffer+0x2a>
				if (bytesread != 0)
9000992a:	9b01      	ldr	r3, [sp, #4]
9000992c:	2b00      	cmp	r3, #0
9000992e:	d0ea      	beq.n	90009906 <ReadFileIntoBuffer+0x2a>
					BufferFile.fptr = bytesread;
90009930:	6063      	str	r3, [r4, #4]
					return AUDIO_ERROR_NONE;
90009932:	e7e9      	b.n	90009908 <ReadFileIntoBuffer+0x2c>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
90009934:	4808      	ldr	r0, [pc, #32]	; (90009958 <ReadFileIntoBuffer+0x7c>)
90009936:	f7f7 fec3 	bl	900016c0 <BSP_LCD_SetTextColor>
		BSP_LCD_ClearStringLine(3);
9000993a:	2003      	movs	r0, #3
9000993c:	f7f8 f82e 	bl	9000199c <BSP_LCD_ClearStringLine>
		BSP_LCD_DisplayStringAtLine(3, (uint8_t *)"    >>  FATAL ERROR FETCHING THE INFORMATION OF THE USB");
90009940:	2003      	movs	r0, #3
90009942:	4906      	ldr	r1, [pc, #24]	; (9000995c <ReadFileIntoBuffer+0x80>)
90009944:	f7f7 ffdc 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		return AUDIO_ERROR_IO;
90009948:	4620      	mov	r0, r4
9000994a:	e7dd      	b.n	90009908 <ReadFileIntoBuffer+0x2c>
9000994c:	20008280 	.word	0x20008280
90009950:	2000076c 	.word	0x2000076c
90009954:	2000efa4 	.word	0x2000efa4
90009958:	ffff0000 	.word	0xffff0000
9000995c:	900103bc 	.word	0x900103bc

90009960 <TRANSMITTER_Process>:
AUDIO_ErrorTypeDef TRANSMITTER_Process(void) {
90009960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (AudioState) {
90009964:	4e67      	ldr	r6, [pc, #412]	; (90009b04 <TRANSMITTER_Process+0x1a4>)
AUDIO_ErrorTypeDef TRANSMITTER_Process(void) {
90009966:	b090      	sub	sp, #64	; 0x40
	uint32_t byteswritten = 0;
90009968:	2200      	movs	r2, #0
	switch (AudioState) {
9000996a:	7833      	ldrb	r3, [r6, #0]
	uint32_t byteswritten = 0;
9000996c:	9200      	str	r2, [sp, #0]
	switch (AudioState) {
9000996e:	3b01      	subs	r3, #1
90009970:	2b14      	cmp	r3, #20
90009972:	d86e      	bhi.n	90009a52 <TRANSMITTER_Process+0xf2>
90009974:	e8df f013 	tbh	[pc, r3, lsl #1]
90009978:	0035006f 	.word	0x0035006f
9000997c:	006d006d 	.word	0x006d006d
90009980:	0015006d 	.word	0x0015006d
90009984:	006d0026 	.word	0x006d0026
90009988:	006d006d 	.word	0x006d006d
9000998c:	006d006d 	.word	0x006d006d
90009990:	006d006d 	.word	0x006d006d
90009994:	006d006d 	.word	0x006d006d
90009998:	02ed00dc 	.word	0x02ed00dc
9000999c:	006d006d 	.word	0x006d006d
900099a0:	02f0      	.short	0x02f0
		if (++FilePos >= AUDIO_GetWavObjectNumber()) {
900099a2:	4d59      	ldr	r5, [pc, #356]	; (90009b08 <TRANSMITTER_Process+0x1a8>)
900099a4:	f8b5 448c 	ldrh.w	r4, [r5, #1164]	; 0x48c
900099a8:	3401      	adds	r4, #1
900099aa:	b224      	sxth	r4, r4
900099ac:	f8a5 448c 	strh.w	r4, [r5, #1164]	; 0x48c
900099b0:	f7ff fae0 	bl	90008f74 <AUDIO_GetWavObjectNumber>
900099b4:	4284      	cmp	r4, r0
			FilePos = 0;
900099b6:	bfa4      	itt	ge
900099b8:	2300      	movge	r3, #0
900099ba:	f8a5 348c 	strhge.w	r3, [r5, #1164]	; 0x48c
		AudioState = AUDIO_STATE_INIT;
900099be:	2302      	movs	r3, #2
			}else if ((TS_State.touchX[0] > TOUCH_NEXT_XMIN) &&
					  (TS_State.touchX[0] < TOUCH_NEXT_XMAX) &&
					  (TS_State.touchY[0] > TOUCH_NEXT_YMIN) &&
					  (TS_State.touchY[0] < TOUCH_NEXT_YMAX))
			{
				AudioState = AUDIO_STATE_NEXT;
900099c0:	7033      	strb	r3, [r6, #0]
900099c2:	e046      	b.n	90009a52 <TRANSMITTER_Process+0xf2>
		if (--FilePos < 0) {
900099c4:	4c50      	ldr	r4, [pc, #320]	; (90009b08 <TRANSMITTER_Process+0x1a8>)
900099c6:	f8b4 348c 	ldrh.w	r3, [r4, #1164]	; 0x48c
900099ca:	3b01      	subs	r3, #1
900099cc:	b21b      	sxth	r3, r3
900099ce:	2b00      	cmp	r3, #0
900099d0:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
900099d4:	daf3      	bge.n	900099be <TRANSMITTER_Process+0x5e>
			FilePos = AUDIO_GetWavObjectNumber() - 1;
900099d6:	f7ff facd 	bl	90008f74 <AUDIO_GetWavObjectNumber>
900099da:	3801      	subs	r0, #1
900099dc:	f8a4 048c 	strh.w	r0, [r4, #1164]	; 0x48c
900099e0:	e7ed      	b.n	900099be <TRANSMITTER_Process+0x5e>
		sprintf((char*) strFileName, "    >> Prepared file to TX (%d/%d):", FilePos + 1, FileList.ptr);
900099e2:	4c49      	ldr	r4, [pc, #292]	; (90009b08 <TRANSMITTER_Process+0x1a8>)
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
900099e4:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
900099e8:	f7f7 fe6a 	bl	900016c0 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
900099ec:	4847      	ldr	r0, [pc, #284]	; (90009b0c <TRANSMITTER_Process+0x1ac>)
900099ee:	f7f7 fe7f 	bl	900016f0 <BSP_LCD_SetFont>
		sprintf((char*) strFileName, "    >> Prepared file to TX (%d/%d):", FilePos + 1, FileList.ptr);
900099f2:	4d47      	ldr	r5, [pc, #284]	; (90009b10 <TRANSMITTER_Process+0x1b0>)
900099f4:	f9b4 248c 	ldrsh.w	r2, [r4, #1164]	; 0x48c
900099f8:	a801      	add	r0, sp, #4
900099fa:	f8b5 33d8 	ldrh.w	r3, [r5, #984]	; 0x3d8
900099fe:	3201      	adds	r2, #1
90009a00:	4944      	ldr	r1, [pc, #272]	; (90009b14 <TRANSMITTER_Process+0x1b4>)
90009a02:	f000 ff07 	bl	9000a814 <siprintf>
		BSP_LCD_ClearStringLine(6);
90009a06:	2006      	movs	r0, #6
90009a08:	f7f7 ffc8 	bl	9000199c <BSP_LCD_ClearStringLine>
		BSP_LCD_DisplayStringAtLine(6, strFileName);
90009a0c:	a901      	add	r1, sp, #4
90009a0e:	2006      	movs	r0, #6
90009a10:	f7f7 ff76 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		sprintf((char*) strFileName, "       %s", (char*) FileList.file[FilePos].name);
90009a14:	2329      	movs	r3, #41	; 0x29
90009a16:	f8b4 248c 	ldrh.w	r2, [r4, #1164]	; 0x48c
90009a1a:	2401      	movs	r4, #1
90009a1c:	493e      	ldr	r1, [pc, #248]	; (90009b18 <TRANSMITTER_Process+0x1b8>)
90009a1e:	a801      	add	r0, sp, #4
90009a20:	fb12 4203 	smlabb	r2, r2, r3, r4
90009a24:	442a      	add	r2, r5
90009a26:	f000 fef5 	bl	9000a814 <siprintf>
		BSP_LCD_ClearStringLine(7);
90009a2a:	2007      	movs	r0, #7
90009a2c:	f7f7 ffb6 	bl	9000199c <BSP_LCD_ClearStringLine>
		BSP_LCD_DisplayStringAtLine(7, strFileName);
90009a30:	a901      	add	r1, sp, #4
90009a32:	2007      	movs	r0, #7
90009a34:	f7f7 ff64 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(9, (uint8_t*) "   >>  PREVIOUS FILE         NEXT FILE");
90009a38:	4938      	ldr	r1, [pc, #224]	; (90009b1c <TRANSMITTER_Process+0x1bc>)
90009a3a:	2009      	movs	r0, #9
90009a3c:	f7f7 ff60 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(12, (uint8_t*) "                >>  BEGING TRANSMISSION");
90009a40:	4937      	ldr	r1, [pc, #220]	; (90009b20 <TRANSMITTER_Process+0x1c0>)
90009a42:	200c      	movs	r0, #12
90009a44:	f7f7 ff5c 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(15, (uint8_t*) "                >>  BACK TO MAIN MENU");
90009a48:	4936      	ldr	r1, [pc, #216]	; (90009b24 <TRANSMITTER_Process+0x1c4>)
90009a4a:	200f      	movs	r0, #15
90009a4c:	f7f7 ff58 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		AudioState = AUDIO_STATE_WAIT;
90009a50:	7034      	strb	r4, [r6, #0]
	AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
90009a52:	2500      	movs	r5, #0
90009a54:	e1d2      	b.n	90009dfc <TRANSMITTER_Process+0x49c>
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
90009a56:	4c2c      	ldr	r4, [pc, #176]	; (90009b08 <TRANSMITTER_Process+0x1a8>)
90009a58:	f894 3490 	ldrb.w	r3, [r4, #1168]	; 0x490
		BSP_TS_GetState(&TS_State);
90009a5c:	f504 6092 	add.w	r0, r4, #1168	; 0x490
	if (TS_State.touchDetected == 1) /* If previous touch has not been released, we don't proceed any touch command */
90009a60:	2b01      	cmp	r3, #1
90009a62:	d102      	bne.n	90009a6a <TRANSMITTER_Process+0x10a>
		BSP_TS_GetState(&TS_State);
90009a64:	f7f8 fbca 	bl	900021fc <BSP_TS_GetState>
90009a68:	e7f3      	b.n	90009a52 <TRANSMITTER_Process+0xf2>
		BSP_TS_GetState(&TS_State);
90009a6a:	f7f8 fbc7 	bl	900021fc <BSP_TS_GetState>
		if (TS_State.touchDetected == 1) {
90009a6e:	f894 3490 	ldrb.w	r3, [r4, #1168]	; 0x490
90009a72:	2b01      	cmp	r3, #1
90009a74:	d1ed      	bne.n	90009a52 <TRANSMITTER_Process+0xf2>
			if ((TS_State.touchX[0] > TOUCH_PREVIOUS_XMIN) &&
90009a76:	f8b4 3492 	ldrh.w	r3, [r4, #1170]	; 0x492
90009a7a:	f1a3 0251 	sub.w	r2, r3, #81	; 0x51
90009a7e:	2a71      	cmp	r2, #113	; 0x71
90009a80:	d807      	bhi.n	90009a92 <TRANSMITTER_Process+0x132>
				(TS_State.touchX[0] < TOUCH_PREVIOUS_XMAX) &&
90009a82:	f8b4 249c 	ldrh.w	r2, [r4, #1180]	; 0x49c
90009a86:	3a88      	subs	r2, #136	; 0x88
90009a88:	b292      	uxth	r2, r2
90009a8a:	2a21      	cmp	r2, #33	; 0x21
90009a8c:	d825      	bhi.n	90009ada <TRANSMITTER_Process+0x17a>
				AudioState = AUDIO_STATE_PREVIOUS;
90009a8e:	2307      	movs	r3, #7
90009a90:	e796      	b.n	900099c0 <TRANSMITTER_Process+0x60>
			}else if ((TS_State.touchX[0] > TOUCH_NEXT_XMIN) &&
90009a92:	f46f 7296 	mvn.w	r2, #300	; 0x12c
90009a96:	189a      	adds	r2, r3, r2
90009a98:	2abf      	cmp	r2, #191	; 0xbf
90009a9a:	d807      	bhi.n	90009aac <TRANSMITTER_Process+0x14c>
					  (TS_State.touchX[0] < TOUCH_NEXT_XMAX) &&
90009a9c:	f8b4 249c 	ldrh.w	r2, [r4, #1180]	; 0x49c
90009aa0:	3a88      	subs	r2, #136	; 0x88
90009aa2:	b292      	uxth	r2, r2
90009aa4:	2a21      	cmp	r2, #33	; 0x21
90009aa6:	d801      	bhi.n	90009aac <TRANSMITTER_Process+0x14c>
				AudioState = AUDIO_STATE_NEXT;
90009aa8:	2306      	movs	r3, #6
90009aaa:	e789      	b.n	900099c0 <TRANSMITTER_Process+0x60>

			}else if ((TS_State.touchX[0] > TOUCH_RETURN_XMIN) &&
90009aac:	f1a3 02c4 	sub.w	r2, r3, #196	; 0xc4
90009ab0:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
90009ab4:	d211      	bcs.n	90009ada <TRANSMITTER_Process+0x17a>
					  (TS_State.touchX[0] < TOUCH_RETURN_XMAX) &&
90009ab6:	f8b4 249c 	ldrh.w	r2, [r4, #1180]	; 0x49c
90009aba:	3ae7      	subs	r2, #231	; 0xe7
90009abc:	b292      	uxth	r2, r2
90009abe:	2a1c      	cmp	r2, #28
90009ac0:	d80b      	bhi.n	90009ada <TRANSMITTER_Process+0x17a>
					  (TS_State.touchY[0] > TOUCH_RETURN_YMIN) &&
					  (TS_State.touchY[0] < TOUCH_RETURN_YMAX))
			{
				BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
90009ac2:	4819      	ldr	r0, [pc, #100]	; (90009b28 <TRANSMITTER_Process+0x1c8>)
90009ac4:	f7f7 fe2c 	bl	90001720 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009ac8:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009acc:	f7f7 fdf8 	bl	900016c0 <BSP_LCD_SetTextColor>
				BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
90009ad0:	4816      	ldr	r0, [pc, #88]	; (90009b2c <TRANSMITTER_Process+0x1cc>)
90009ad2:	f7f7 fe0d 	bl	900016f0 <BSP_LCD_SetFont>

				AudioState = AUDIO_STATE_RETURN;
90009ad6:	2315      	movs	r3, #21
90009ad8:	e772      	b.n	900099c0 <TRANSMITTER_Process+0x60>

			}else if((TS_State.touchX[0] > TOUCH_BEGIN_TRANSMISSION_XMIN) &&
90009ada:	3bba      	subs	r3, #186	; 0xba
90009adc:	2bf3      	cmp	r3, #243	; 0xf3
90009ade:	d8b8      	bhi.n	90009a52 <TRANSMITTER_Process+0xf2>
					 (TS_State.touchX[0] < TOUCH_BEGIN_TRANSMISSION_XMAX) &&
90009ae0:	f8b4 349c 	ldrh.w	r3, [r4, #1180]	; 0x49c
90009ae4:	3bb5      	subs	r3, #181	; 0xb5
90009ae6:	b29b      	uxth	r3, r3
90009ae8:	2b21      	cmp	r3, #33	; 0x21
90009aea:	d8b2      	bhi.n	90009a52 <TRANSMITTER_Process+0xf2>
					 (TS_State.touchY[0] > TOUCH_BEGIN_TRANSMISSION_YMIN) &&
					 (TS_State.touchY[0] < TOUCH_BEGIN_TRANSMISSION_YMAX))
			{
				BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
90009aec:	480e      	ldr	r0, [pc, #56]	; (90009b28 <TRANSMITTER_Process+0x1c8>)
90009aee:	f7f7 fe17 	bl	90001720 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009af2:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009af6:	f7f7 fde3 	bl	900016c0 <BSP_LCD_SetTextColor>
				BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
90009afa:	480c      	ldr	r0, [pc, #48]	; (90009b2c <TRANSMITTER_Process+0x1cc>)
90009afc:	f7f7 fdf8 	bl	900016f0 <BSP_LCD_SetFont>

				AudioState = AUDIO_STATE_BEGING_TRANSMISSION;
90009b00:	2311      	movs	r3, #17
90009b02:	e75d      	b.n	900099c0 <TRANSMITTER_Process+0x60>
90009b04:	200012ce 	.word	0x200012ce
90009b08:	20008050 	.word	0x20008050
90009b0c:	20000074 	.word	0x20000074
90009b10:	2000076c 	.word	0x2000076c
90009b14:	900103fe 	.word	0x900103fe
90009b18:	90010422 	.word	0x90010422
90009b1c:	9001042c 	.word	0x9001042c
90009b20:	90010453 	.word	0x90010453
90009b24:	9001047b 	.word	0x9001047b
90009b28:	ff008000 	.word	0xff008000
90009b2c:	2000006c 	.word	0x2000006c
		sprintf((char*) strFileName, "          / \\  `.  __..-,O  / \\_/ \\_/ %s", (char*) FileList.file[FilePos].name);
90009b30:	4cda      	ldr	r4, [pc, #872]	; (90009e9c <TRANSMITTER_Process+0x53c>)
		BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"    >> PREPARING THE TRANSMISSION... CREATING .wav");
90009b32:	2002      	movs	r0, #2
90009b34:	49da      	ldr	r1, [pc, #872]	; (90009ea0 <TRANSMITTER_Process+0x540>)
		sprintf((char*) strFileName, "          / \\  `.  __..-,O  / \\_/ \\_/ %s", (char*) FileList.file[FilePos].name);
90009b36:	2701      	movs	r7, #1
		BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"    >> PREPARING THE TRANSMISSION... CREATING .wav");
90009b38:	f7f7 fee2 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		sprintf((char*) strFileName, "          / \\  `.  __..-,O  / \\_/ \\_/ %s", (char*) FileList.file[FilePos].name);
90009b3c:	f8b4 348c 	ldrh.w	r3, [r4, #1164]	; 0x48c
90009b40:	2229      	movs	r2, #41	; 0x29
90009b42:	49d8      	ldr	r1, [pc, #864]	; (90009ea4 <TRANSMITTER_Process+0x544>)
90009b44:	a801      	add	r0, sp, #4
90009b46:	fb13 7302 	smlabb	r3, r3, r2, r7
90009b4a:	4ad7      	ldr	r2, [pc, #860]	; (90009ea8 <TRANSMITTER_Process+0x548>)
90009b4c:	441a      	add	r2, r3
90009b4e:	f000 fe61 	bl	9000a814 <siprintf>
		BSP_LCD_DisplayStringAtLine(6, (uint8_t *)"           ,-.               _   _");
90009b52:	49d6      	ldr	r1, [pc, #856]	; (90009eac <TRANSMITTER_Process+0x54c>)
90009b54:	2006      	movs	r0, #6
90009b56:	f7f7 fed3 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(7, strFileName);
90009b5a:	a901      	add	r1, sp, #4
90009b5c:	2007      	movs	r0, #7
90009b5e:	f7f7 fecf 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(8, (uint8_t *)"         :   \\ --''_..-'.'");
90009b62:	49d3      	ldr	r1, [pc, #844]	; (90009eb0 <TRANSMITTER_Process+0x550>)
90009b64:	2008      	movs	r0, #8
90009b66:	f7f7 fecb 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"         |    . .-' `. '.");
90009b6a:	49d2      	ldr	r1, [pc, #840]	; (90009eb4 <TRANSMITTER_Process+0x554>)
90009b6c:	2009      	movs	r0, #9
90009b6e:	f7f7 fec7 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"         :     .     .`.'");
90009b72:	49d1      	ldr	r1, [pc, #836]	; (90009eb8 <TRANSMITTER_Process+0x558>)
90009b74:	200a      	movs	r0, #10
90009b76:	f7f7 fec3 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(11, (uint8_t *)"          \\     `.  /  ..");
90009b7a:	49d0      	ldr	r1, [pc, #832]	; (90009ebc <TRANSMITTER_Process+0x55c>)
90009b7c:	200b      	movs	r0, #11
90009b7e:	f7f7 febf 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"           \\      `.   ' .");
90009b82:	49cf      	ldr	r1, [pc, #828]	; (90009ec0 <TRANSMITTER_Process+0x560>)
90009b84:	200c      	movs	r0, #12
90009b86:	f7f7 febb 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"            `,       `.   \\");
90009b8a:	49ce      	ldr	r1, [pc, #824]	; (90009ec4 <TRANSMITTER_Process+0x564>)
90009b8c:	200d      	movs	r0, #13
90009b8e:	f7f7 feb7 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"           ,|,`.        `-.\\");
90009b92:	49cd      	ldr	r1, [pc, #820]	; (90009ec8 <TRANSMITTER_Process+0x568>)
90009b94:	200e      	movs	r0, #14
90009b96:	f7f7 feb3 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(15, (uint8_t *)"          '.||  ``-...__..-`");
90009b9a:	49cc      	ldr	r1, [pc, #816]	; (90009ecc <TRANSMITTER_Process+0x56c>)
90009b9c:	200f      	movs	r0, #15
90009b9e:	f7f7 feaf 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(16, (uint8_t *)"           |  |");
90009ba2:	49cb      	ldr	r1, [pc, #812]	; (90009ed0 <TRANSMITTER_Process+0x570>)
90009ba4:	2010      	movs	r0, #16
90009ba6:	f7f7 feab 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(17, (uint8_t *)"           |__|");
90009baa:	49ca      	ldr	r1, [pc, #808]	; (90009ed4 <TRANSMITTER_Process+0x574>)
90009bac:	2011      	movs	r0, #17
90009bae:	f7f7 fea7 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(18, (uint8_t *)"           /||\\");
90009bb2:	49c9      	ldr	r1, [pc, #804]	; (90009ed8 <TRANSMITTER_Process+0x578>)
90009bb4:	2012      	movs	r0, #18
90009bb6:	f7f7 fea3 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(19, (uint8_t *)"          //||\\\\");
90009bba:	49c8      	ldr	r1, [pc, #800]	; (90009edc <TRANSMITTER_Process+0x57c>)
90009bbc:	2013      	movs	r0, #19
90009bbe:	f7f7 fe9f 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(20, (uint8_t *)"         // || \\\\");
90009bc2:	49c7      	ldr	r1, [pc, #796]	; (90009ee0 <TRANSMITTER_Process+0x580>)
90009bc4:	2014      	movs	r0, #20
90009bc6:	f7f7 fe9b 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(21, (uint8_t *)"      __//__||__\\\\__");
90009bca:	49c6      	ldr	r1, [pc, #792]	; (90009ee4 <TRANSMITTER_Process+0x584>)
90009bcc:	2015      	movs	r0, #21
90009bce:	f7f7 fe97 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(22, (uint8_t *)"     '--------------' ");
90009bd2:	49c5      	ldr	r1, [pc, #788]	; (90009ee8 <TRANSMITTER_Process+0x588>)
90009bd4:	2016      	movs	r0, #22
90009bd6:	f7f7 fe93 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		ReadFileIntoBuffer(FilePos);
90009bda:	f894 048c 	ldrb.w	r0, [r4, #1164]	; 0x48c
90009bde:	f7ff fe7d 	bl	900098dc <ReadFileIntoBuffer>
		uint8_t fileCreation = f_open(&MessageWavFile, (char*) "mensajeModulado.wav", FA_CREATE_ALWAYS | FA_WRITE);
90009be2:	220a      	movs	r2, #10
90009be4:	49c1      	ldr	r1, [pc, #772]	; (90009eec <TRANSMITTER_Process+0x58c>)
90009be6:	4620      	mov	r0, r4
90009be8:	f7fe fbc6 	bl	90008378 <f_open>
		if(fileCreation == FR_OK)
90009bec:	4605      	mov	r5, r0
90009bee:	2800      	cmp	r0, #0
90009bf0:	f040 8118 	bne.w	90009e24 <TRANSMITTER_Process+0x4c4>
{
  /* Initialize the encoder structure */
  MessageWaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
  MessageWaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
  MessageWaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
  MessageWaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
90009bf4:	4bbe      	ldr	r3, [pc, #760]	; (90009ef0 <TRANSMITTER_Process+0x590>)
  MessageWaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
90009bf6:	2102      	movs	r1, #2
  pHeader[17]  = 0x00;
  pHeader[18]  = 0x00;
  pHeader[19]  = 0x00;

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
90009bf8:	f884 74d0 	strb.w	r7, [r4, #1232]	; 0x4d0
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
  pHeader[23]  = 0x00;

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
90009bfc:	2744      	movs	r7, #68	; 0x44
  MessageWaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
90009bfe:	f8c4 3464 	str.w	r3, [r4, #1124]	; 0x464
  MessageWaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
90009c02:	f64a 4344 	movw	r3, #44100	; 0xac44
  pHeader[5] = 0x4C;
90009c06:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
  pHeader[14]  = 't';
90009c0a:	f04f 0e74 	mov.w	lr, #116	; 0x74
  MessageWaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
90009c0e:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
  MessageWaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
90009c12:	222c      	movs	r2, #44	; 0x2c
  MessageWaveFormat.ByteRate = (MessageWaveFormat.SampleRate * \
90009c14:	4bb7      	ldr	r3, [pc, #732]	; (90009ef4 <TRANSMITTER_Process+0x594>)
  pHeader[4] = 0x00;
90009c16:	f884 04c0 	strb.w	r0, [r4, #1216]	; 0x4c0
  pHeader[6] = 0x1D;
90009c1a:	201d      	movs	r0, #29
  MessageWaveFormat.ByteRate = (MessageWaveFormat.SampleRate * \
90009c1c:	f8c4 347c 	str.w	r3, [r4, #1148]	; 0x47c
  MessageWaveFormat.BlockAlign = MessageWaveFormat.NbrChannels * \
90009c20:	4bb5      	ldr	r3, [pc, #724]	; (90009ef8 <TRANSMITTER_Process+0x598>)
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
90009c22:	f884 74d4 	strb.w	r7, [r4, #1236]	; 0x4d4
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
90009c26:	27ac      	movs	r7, #172	; 0xac
  MessageWaveFormat.BlockAlign = MessageWaveFormat.NbrChannels * \
90009c28:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
  pHeader[0] = 'R';
90009c2c:	2352      	movs	r3, #82	; 0x52
  MessageWaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
90009c2e:	f8c4 2470 	str.w	r2, [r4, #1136]	; 0x470
  pHeader[0] = 'R';
90009c32:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  pHeader[1] = 'I';
90009c36:	2349      	movs	r3, #73	; 0x49
  MessageWaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
90009c38:	f8a4 1476 	strh.w	r1, [r4, #1142]	; 0x476
  pHeader[1] = 'I';
90009c3c:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
  pHeader[2] = 'F';
90009c40:	2346      	movs	r3, #70	; 0x46
  pHeader[5] = 0x4C;
90009c42:	f884 c4c1 	strb.w	ip, [r4, #1217]	; 0x4c1
  pHeader[2] = 'F';
90009c46:	f884 34be 	strb.w	r3, [r4, #1214]	; 0x4be
  pHeader[3] = 'F';
90009c4a:	f884 34bf 	strb.w	r3, [r4, #1215]	; 0x4bf
  pHeader[8]  = 'W';
90009c4e:	2357      	movs	r3, #87	; 0x57
  pHeader[6] = 0x1D;
90009c50:	f884 04c2 	strb.w	r0, [r4, #1218]	; 0x4c2
  pHeader[8]  = 'W';
90009c54:	f884 34c4 	strb.w	r3, [r4, #1220]	; 0x4c4
  pHeader[9]  = 'A';
90009c58:	2341      	movs	r3, #65	; 0x41
  pHeader[7] = 0x00;
90009c5a:	f884 54c3 	strb.w	r5, [r4, #1219]	; 0x4c3
  pHeader[9]  = 'A';
90009c5e:	f884 34c5 	strb.w	r3, [r4, #1221]	; 0x4c5
  pHeader[10] = 'V';
90009c62:	2356      	movs	r3, #86	; 0x56
  pHeader[14]  = 't';
90009c64:	f884 e4ca 	strb.w	lr, [r4, #1226]	; 0x4ca
  pHeader[10] = 'V';
90009c68:	f884 34c6 	strb.w	r3, [r4, #1222]	; 0x4c6
  pHeader[11] = 'E';
90009c6c:	2345      	movs	r3, #69	; 0x45
  pHeader[17]  = 0x00;
90009c6e:	f884 54cd 	strb.w	r5, [r4, #1229]	; 0x4cd
  pHeader[11] = 'E';
90009c72:	f884 34c7 	strb.w	r3, [r4, #1223]	; 0x4c7
  pHeader[12]  = 'f';
90009c76:	2366      	movs	r3, #102	; 0x66
  pHeader[18]  = 0x00;
90009c78:	f884 54ce 	strb.w	r5, [r4, #1230]	; 0x4ce
  pHeader[12]  = 'f';
90009c7c:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
  pHeader[13]  = 'm';
90009c80:	236d      	movs	r3, #109	; 0x6d
  pHeader[19]  = 0x00;
90009c82:	f884 54cf 	strb.w	r5, [r4, #1231]	; 0x4cf
  pHeader[13]  = 'm';
90009c86:	f884 34c9 	strb.w	r3, [r4, #1225]	; 0x4c9
  pHeader[15]  = ' ';
90009c8a:	2320      	movs	r3, #32
  pHeader[21]  = 0x00;
90009c8c:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
  pHeader[15]  = ' ';
90009c90:	f884 34cb 	strb.w	r3, [r4, #1227]	; 0x4cb
  pHeader[16]  = 0x10;
90009c94:	2310      	movs	r3, #16
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
90009c96:	f884 14d2 	strb.w	r1, [r4, #1234]	; 0x4d2
  pHeader[16]  = 0x10;
90009c9a:	f884 34cc 	strb.w	r3, [r4, #1228]	; 0x4cc
  pHeader[23]  = 0x00;
90009c9e:	f884 54d3 	strb.w	r5, [r4, #1235]	; 0x4d3
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
90009ca2:	f884 74d5 	strb.w	r7, [r4, #1237]	; 0x4d5
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
90009ca6:	27b1      	movs	r7, #177	; 0xb1
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
90009ca8:	f884 54d6 	strb.w	r5, [r4, #1238]	; 0x4d6
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
90009cac:	f884 34d8 	strb.w	r3, [r4, #1240]	; 0x4d8
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
  pHeader[33]  = 0x00;

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
90009cb0:	f884 34de 	strb.w	r3, [r4, #1246]	; 0x4de
  pHeader[35]  = 0x00;

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
90009cb4:	2364      	movs	r3, #100	; 0x64
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
90009cb6:	f884 74d9 	strb.w	r7, [r4, #1241]	; 0x4d9
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
90009cba:	2704      	movs	r7, #4
  pHeader[36]  = 'd';
90009cbc:	f884 34e0 	strb.w	r3, [r4, #1248]	; 0x4e0
  pHeader[37]  = 'a';
90009cc0:	2361      	movs	r3, #97	; 0x61
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
90009cc2:	f884 54d7 	strb.w	r5, [r4, #1239]	; 0x4d7
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
90009cc6:	f884 14da 	strb.w	r1, [r4, #1242]	; 0x4da
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
90009cca:	f204 41bc 	addw	r1, r4, #1212	; 0x4bc
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
90009cce:	f884 54db 	strb.w	r5, [r4, #1243]	; 0x4db
  pHeader[33]  = 0x00;
90009cd2:	f884 54dd 	strb.w	r5, [r4, #1245]	; 0x4dd
  pHeader[35]  = 0x00;
90009cd6:	f884 54df 	strb.w	r5, [r4, #1247]	; 0x4df
  pHeader[37]  = 'a';
90009cda:	f884 34e1 	strb.w	r3, [r4, #1249]	; 0x4e1
  pHeader[38]  = 't';
  pHeader[39]  = 'a';
90009cde:	f884 34e3 	strb.w	r3, [r4, #1251]	; 0x4e3
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
90009ce2:	466b      	mov	r3, sp

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
90009ce4:	f884 54e4 	strb.w	r5, [r4, #1252]	; 0x4e4
  pHeader[41]  = 0x4C;
  pHeader[42]  = 0x1D;
90009ce8:	f884 04e6 	strb.w	r0, [r4, #1254]	; 0x4e6
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
90009cec:	4620      	mov	r0, r4
  pHeader[43]  = 0x00;
90009cee:	f884 54e7 	strb.w	r5, [r4, #1255]	; 0x4e7
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
90009cf2:	f884 74dc 	strb.w	r7, [r4, #1244]	; 0x4dc
  pHeader[38]  = 't';
90009cf6:	f884 e4e2 	strb.w	lr, [r4, #1250]	; 0x4e2
  pHeader[41]  = 0x4C;
90009cfa:	f884 c4e5 	strb.w	ip, [r4, #1253]	; 0x4e5
			uint8_t headerWrite = f_write(&MessageWavFile, pMessageHeaderBuff, 44, (void*)&byteswritten);
90009cfe:	f7fe fcfc 	bl	900086fa <f_write>
			if(headerWrite == FR_OK)
90009d02:	4605      	mov	r5, r0
90009d04:	2800      	cmp	r0, #0
90009d06:	d17d      	bne.n	90009e04 <TRANSMITTER_Process+0x4a4>
				WaveBuffer.fptr = byteswritten;
90009d08:	4b7c      	ldr	r3, [pc, #496]	; (90009efc <TRANSMITTER_Process+0x59c>)
90009d0a:	9a00      	ldr	r2, [sp, #0]
				WaveBuffer.pcm_ptr = 0;
90009d0c:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
				WaveBuffer.fptr = byteswritten;
90009d10:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
				WaveBuffer.offset = 0;
90009d14:	f8c3 0808 	str.w	r0, [r3, #2056]	; 0x808
				WaveBuffer.wr_state = BUFFER_EMPTY;
90009d18:	f883 0804 	strb.w	r0, [r3, #2052]	; 0x804
90009d1c:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 90009f1c <TRANSMITTER_Process+0x5bc>
			parity = 0;
90009d20:	2700      	movs	r7, #0
		for (uint32_t i = 0; i < BufferFile.fptr; i++)
90009d22:	f508 5a00 	add.w	sl, r8, #8192	; 0x2000
90009d26:	f8da 3004 	ldr.w	r3, [sl, #4]
90009d2a:	42bb      	cmp	r3, r7
90009d2c:	f200 8083 	bhi.w	90009e36 <TRANSMITTER_Process+0x4d6>
		InsertarBit(1); // BIT STOP
90009d30:	2001      	movs	r0, #1
		uint8_t fileWriting = f_write(&MessageWavFile, (uint8_t*)WaveBuffer.pcm_buff, 2*WaveBuffer.pcm_ptr, (void*)&byteswritten);
90009d32:	4f72      	ldr	r7, [pc, #456]	; (90009efc <TRANSMITTER_Process+0x59c>)
		InsertarBit(1); // BIT STOP
90009d34:	f7ff fd6a 	bl	9000980c <InsertarBit>
		InsertarBit(1); // BIT FINALIZACION
90009d38:	2001      	movs	r0, #1
90009d3a:	f7ff fd67 	bl	9000980c <InsertarBit>
		uint8_t fileWriting = f_write(&MessageWavFile, (uint8_t*)WaveBuffer.pcm_buff, 2*WaveBuffer.pcm_ptr, (void*)&byteswritten);
90009d3e:	f8d7 2800 	ldr.w	r2, [r7, #2048]	; 0x800
90009d42:	466b      	mov	r3, sp
90009d44:	f5a7 4180 	sub.w	r1, r7, #16384	; 0x4000
90009d48:	0052      	lsls	r2, r2, #1
90009d4a:	4854      	ldr	r0, [pc, #336]	; (90009e9c <TRANSMITTER_Process+0x53c>)
90009d4c:	f7fe fcd5 	bl	900086fa <f_write>
		if(fileWriting == FR_OK)
90009d50:	4605      	mov	r5, r0
90009d52:	2800      	cmp	r0, #0
90009d54:	f040 80f4 	bne.w	90009f40 <TRANSMITTER_Process+0x5e0>
			WaveBuffer.fptr += byteswritten;
90009d58:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
			uint8_t seeker = f_lseek(&MessageWavFile, 0);
90009d5c:	4601      	mov	r1, r0
			WaveBuffer.fptr += byteswritten;
90009d5e:	9a00      	ldr	r2, [sp, #0]
			uint8_t seeker = f_lseek(&MessageWavFile, 0);
90009d60:	484e      	ldr	r0, [pc, #312]	; (90009e9c <TRANSMITTER_Process+0x53c>)
			WaveBuffer.fptr += byteswritten;
90009d62:	4413      	add	r3, r2
90009d64:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
			uint8_t seeker = f_lseek(&MessageWavFile, 0);
90009d68:	f7fe fde9 	bl	9000893e <f_lseek>
			if(seeker == FR_OK)
90009d6c:	4680      	mov	r8, r0
90009d6e:	2800      	cmp	r0, #0
90009d70:	f040 80d6 	bne.w	90009f20 <TRANSMITTER_Process+0x5c0>
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(WaveBuffer.fptr);
90009d74:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
90009d78:	4961      	ldr	r1, [pc, #388]	; (90009f00 <TRANSMITTER_Process+0x5a0>)
  pHeader[5] = (uint8_t)(WaveBuffer.fptr >> 8);
90009d7a:	0a1a      	lsrs	r2, r3, #8
  pHeader[4] = (uint8_t)(WaveBuffer.fptr);
90009d7c:	f884 34c0 	strb.w	r3, [r4, #1216]	; 0x4c0
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
90009d80:	f2a1 40bc 	subw	r0, r1, #1212	; 0x4bc
  pHeader[5] = (uint8_t)(WaveBuffer.fptr >> 8);
90009d84:	f884 24c1 	strb.w	r2, [r4, #1217]	; 0x4c1
  pHeader[6] = (uint8_t)(WaveBuffer.fptr >> 16);
90009d88:	0c1a      	lsrs	r2, r3, #16
90009d8a:	f884 24c2 	strb.w	r2, [r4, #1218]	; 0x4c2
  pHeader[7] = (uint8_t)(WaveBuffer.fptr >> 24);
90009d8e:	0e1a      	lsrs	r2, r3, #24
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  WaveBuffer.fptr -=44;
90009d90:	3b2c      	subs	r3, #44	; 0x2c
  pHeader[7] = (uint8_t)(WaveBuffer.fptr >> 24);
90009d92:	f884 24c3 	strb.w	r2, [r4, #1219]	; 0x4c3
  pHeader[40] = (uint8_t)(WaveBuffer.fptr);
  pHeader[41] = (uint8_t)(WaveBuffer.fptr >> 8);
90009d96:	0a1a      	lsrs	r2, r3, #8
  WaveBuffer.fptr -=44;
90009d98:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
  pHeader[40] = (uint8_t)(WaveBuffer.fptr);
90009d9c:	f884 34e4 	strb.w	r3, [r4, #1252]	; 0x4e4
  pHeader[41] = (uint8_t)(WaveBuffer.fptr >> 8);
90009da0:	f884 24e5 	strb.w	r2, [r4, #1253]	; 0x4e5
  pHeader[42] = (uint8_t)(WaveBuffer.fptr >> 16);
90009da4:	0c1a      	lsrs	r2, r3, #16
  pHeader[43] = (uint8_t)(WaveBuffer.fptr >> 24);
90009da6:	0e1b      	lsrs	r3, r3, #24
  pHeader[42] = (uint8_t)(WaveBuffer.fptr >> 16);
90009da8:	f884 24e6 	strb.w	r2, [r4, #1254]	; 0x4e6
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
90009dac:	222c      	movs	r2, #44	; 0x2c
  pHeader[43] = (uint8_t)(WaveBuffer.fptr >> 24);
90009dae:	f884 34e7 	strb.w	r3, [r4, #1255]	; 0x4e7
				uint8_t updateHeader = f_write(&MessageWavFile, pMessageHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten);
90009db2:	466b      	mov	r3, sp
90009db4:	f7fe fca1 	bl	900086fa <f_write>
				if(updateHeader == FR_OK)
90009db8:	4605      	mov	r5, r0
90009dba:	2800      	cmp	r0, #0
90009dbc:	d15e      	bne.n	90009e7c <TRANSMITTER_Process+0x51c>
					WaveBuffer.fptr += byteswritten;
90009dbe:	9a00      	ldr	r2, [sp, #0]
90009dc0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
					f_close(&MessageWavFile);
90009dc4:	4835      	ldr	r0, [pc, #212]	; (90009e9c <TRANSMITTER_Process+0x53c>)
					WaveBuffer.fptr += byteswritten;
90009dc6:	4413      	add	r3, r2
90009dc8:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
					f_close(&MessageWavFile);
90009dcc:	f7fe fda6 	bl	9000891c <f_close>
					BSP_LCD_ClearStringLine(4);
90009dd0:	2004      	movs	r0, #4
90009dd2:	f7f7 fde3 	bl	9000199c <BSP_LCD_ClearStringLine>
					BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >>  .wav FILE CREATED. READY TO TRANSMIT!");
90009dd6:	494b      	ldr	r1, [pc, #300]	; (90009f04 <TRANSMITTER_Process+0x5a4>)
90009dd8:	2004      	movs	r0, #4
90009dda:	f7f7 fd91 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
					BSP_LCD_ClearStringLine(9);
90009dde:	2009      	movs	r0, #9
90009de0:	f7f7 fddc 	bl	9000199c <BSP_LCD_ClearStringLine>
					BSP_LCD_ClearStringLine(14);
90009de4:	200e      	movs	r0, #14
90009de6:	f7f7 fdd9 	bl	9000199c <BSP_LCD_ClearStringLine>
					BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009dea:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009dee:	f7f7 fc67 	bl	900016c0 <BSP_LCD_SetTextColor>
					BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
90009df2:	4845      	ldr	r0, [pc, #276]	; (90009f08 <TRANSMITTER_Process+0x5a8>)
90009df4:	f7f7 fc7c 	bl	900016f0 <BSP_LCD_SetFont>
					AudioState = AUDIO_STATE_WAV_CREATED;
90009df8:	2312      	movs	r3, #18
90009dfa:	7033      	strb	r3, [r6, #0]
}
90009dfc:	4628      	mov	r0, r5
90009dfe:	b010      	add	sp, #64	; 0x40
90009e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
90009e04:	4841      	ldr	r0, [pc, #260]	; (90009f0c <TRANSMITTER_Process+0x5ac>)
90009e06:	f7f7 fc5b 	bl	900016c0 <BSP_LCD_SetTextColor>
				BSP_LCD_ClearStringLine(4);
90009e0a:	4638      	mov	r0, r7
90009e0c:	f7f7 fdc6 	bl	9000199c <BSP_LCD_ClearStringLine>
				sprintf((char*) strFileName,"    >>  ERROR WRITING THE .wav HEADER. ERROR CODE: %d", headerWrite);
90009e10:	462a      	mov	r2, r5
90009e12:	493f      	ldr	r1, [pc, #252]	; (90009f10 <TRANSMITTER_Process+0x5b0>)
			sprintf((char*) strFileName,"    >>  ERROR CREATING THE .wav FILE. ERROR CODE: %d", fileCreation);
90009e14:	a801      	add	r0, sp, #4
90009e16:	f000 fcfd 	bl	9000a814 <siprintf>
			BSP_LCD_DisplayStringAtLine(4, strFileName);
90009e1a:	a901      	add	r1, sp, #4
90009e1c:	2004      	movs	r0, #4
90009e1e:	f7f7 fd6f 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
90009e22:	e77b      	b.n	90009d1c <TRANSMITTER_Process+0x3bc>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
90009e24:	4839      	ldr	r0, [pc, #228]	; (90009f0c <TRANSMITTER_Process+0x5ac>)
90009e26:	f7f7 fc4b 	bl	900016c0 <BSP_LCD_SetTextColor>
			BSP_LCD_ClearStringLine(4);
90009e2a:	2004      	movs	r0, #4
90009e2c:	f7f7 fdb6 	bl	9000199c <BSP_LCD_ClearStringLine>
			sprintf((char*) strFileName,"    >>  ERROR CREATING THE .wav FILE. ERROR CODE: %d", fileCreation);
90009e30:	462a      	mov	r2, r5
90009e32:	4938      	ldr	r1, [pc, #224]	; (90009f14 <TRANSMITTER_Process+0x5b4>)
90009e34:	e7ee      	b.n	90009e14 <TRANSMITTER_Process+0x4b4>
			InsertarBit(1); // BIT STOP
90009e36:	2001      	movs	r0, #1
			byteLeido = BufferFile.buff[i];
90009e38:	f818 9b01 	ldrb.w	r9, [r8], #1
			InsertarBit(0); // BIT START
90009e3c:	2507      	movs	r5, #7
			InsertarBit(1); // BIT STOP
90009e3e:	f7ff fce5 	bl	9000980c <InsertarBit>
			InsertarBit(1); // BIT STOP 2
90009e42:	2001      	movs	r0, #1
90009e44:	f7ff fce2 	bl	9000980c <InsertarBit>
			InsertarBit(0); // BIT START
90009e48:	2000      	movs	r0, #0
90009e4a:	f7ff fcdf 	bl	9000980c <InsertarBit>
				InsertarBit((byteLeido >> j) & 1);
90009e4e:	fa49 f005 	asr.w	r0, r9, r5
90009e52:	f000 0001 	and.w	r0, r0, #1
90009e56:	f7ff fcd9 	bl	9000980c <InsertarBit>
			for (int8_t j = 7; j >= 0; j--)
90009e5a:	3d01      	subs	r5, #1
90009e5c:	d2f7      	bcs.n	90009e4e <TRANSMITTER_Process+0x4ee>
90009e5e:	2300      	movs	r3, #0
			parity = 0;
90009e60:	4618      	mov	r0, r3
				parity ^= (byteLeido >> i) & 1;
90009e62:	fa49 f203 	asr.w	r2, r9, r3
			for (uint8_t i = 0; i < 8; i++) {
90009e66:	3301      	adds	r3, #1
				parity ^= (byteLeido >> i) & 1;
90009e68:	f002 0201 	and.w	r2, r2, #1
			for (uint8_t i = 0; i < 8; i++) {
90009e6c:	2b08      	cmp	r3, #8
				parity ^= (byteLeido >> i) & 1;
90009e6e:	ea80 0002 	eor.w	r0, r0, r2
			for (uint8_t i = 0; i < 8; i++) {
90009e72:	d1f6      	bne.n	90009e62 <TRANSMITTER_Process+0x502>
		for (uint32_t i = 0; i < BufferFile.fptr; i++)
90009e74:	3701      	adds	r7, #1
			InsertarBit(parity);
90009e76:	f7ff fcc9 	bl	9000980c <InsertarBit>
		for (uint32_t i = 0; i < BufferFile.fptr; i++)
90009e7a:	e754      	b.n	90009d26 <TRANSMITTER_Process+0x3c6>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
90009e7c:	4823      	ldr	r0, [pc, #140]	; (90009f0c <TRANSMITTER_Process+0x5ac>)
90009e7e:	f7f7 fc1f 	bl	900016c0 <BSP_LCD_SetTextColor>
					BSP_LCD_ClearStringLine(4);
90009e82:	2004      	movs	r0, #4
90009e84:	f7f7 fd8a 	bl	9000199c <BSP_LCD_ClearStringLine>
					sprintf((char*) strFileName,"    >>  ERROR UPDATING THE .wav FILE HEADER. ERROR CODE: %d", updateHeader);
90009e88:	462a      	mov	r2, r5
90009e8a:	4923      	ldr	r1, [pc, #140]	; (90009f18 <TRANSMITTER_Process+0x5b8>)
			sprintf((char*) strFileName,"    >>  ERROR WRITING THE .wav FILE. ERROR CODE: %d", fileWriting);
90009e8c:	a801      	add	r0, sp, #4
90009e8e:	f000 fcc1 	bl	9000a814 <siprintf>
			BSP_LCD_DisplayStringAtLine(4, strFileName);
90009e92:	a901      	add	r1, sp, #4
90009e94:	2004      	movs	r0, #4
		BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"         |    . .-' `. '.       >>    .wav SUCCESFULLY CREATED!");
90009e96:	f7f7 fd33 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
		break;
90009e9a:	e5da      	b.n	90009a52 <TRANSMITTER_Process+0xf2>
90009e9c:	20008050 	.word	0x20008050
90009ea0:	900104a1 	.word	0x900104a1
90009ea4:	900104d4 	.word	0x900104d4
90009ea8:	2000076c 	.word	0x2000076c
90009eac:	900104fd 	.word	0x900104fd
90009eb0:	90010520 	.word	0x90010520
90009eb4:	9001053b 	.word	0x9001053b
90009eb8:	90010555 	.word	0x90010555
90009ebc:	9001056f 	.word	0x9001056f
90009ec0:	90010589 	.word	0x90010589
90009ec4:	900105a4 	.word	0x900105a4
90009ec8:	900105c0 	.word	0x900105c0
90009ecc:	900105dd 	.word	0x900105dd
90009ed0:	900105fa 	.word	0x900105fa
90009ed4:	9001060a 	.word	0x9001060a
90009ed8:	9001061a 	.word	0x9001061a
90009edc:	9001062a 	.word	0x9001062a
90009ee0:	9001063b 	.word	0x9001063b
90009ee4:	9001064d 	.word	0x9001064d
90009ee8:	90010662 	.word	0x90010662
90009eec:	90010679 	.word	0x90010679
90009ef0:	001d4c00 	.word	0x001d4c00
90009ef4:	0002b110 	.word	0x0002b110
90009ef8:	00100004 	.word	0x00100004
90009efc:	2000c794 	.word	0x2000c794
90009f00:	2000850c 	.word	0x2000850c
90009f04:	900106f8 	.word	0x900106f8
90009f08:	2000006c 	.word	0x2000006c
90009f0c:	ffff0000 	.word	0xffff0000
90009f10:	9001068d 	.word	0x9001068d
90009f14:	900106c3 	.word	0x900106c3
90009f18:	90010726 	.word	0x90010726
90009f1c:	2000cfa4 	.word	0x2000cfa4
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
90009f20:	480f      	ldr	r0, [pc, #60]	; (90009f60 <TRANSMITTER_Process+0x600>)
90009f22:	f7f7 fbcd 	bl	900016c0 <BSP_LCD_SetTextColor>
				BSP_LCD_ClearStringLine(4);
90009f26:	2004      	movs	r0, #4
90009f28:	f7f7 fd38 	bl	9000199c <BSP_LCD_ClearStringLine>
				sprintf((char*) strFileName,"    >>  ERROR SEEKING THE .wav FILE. ERROR CODE: %d", seeker);
90009f2c:	4642      	mov	r2, r8
90009f2e:	490d      	ldr	r1, [pc, #52]	; (90009f64 <TRANSMITTER_Process+0x604>)
90009f30:	a801      	add	r0, sp, #4
90009f32:	f000 fc6f 	bl	9000a814 <siprintf>
				BSP_LCD_DisplayStringAtLine(4, strFileName);
90009f36:	a901      	add	r1, sp, #4
90009f38:	2004      	movs	r0, #4
90009f3a:	f7f7 fce1 	bl	90001900 <BSP_LCD_DisplayStringAtLine>
90009f3e:	e75d      	b.n	90009dfc <TRANSMITTER_Process+0x49c>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
90009f40:	4807      	ldr	r0, [pc, #28]	; (90009f60 <TRANSMITTER_Process+0x600>)
90009f42:	f7f7 fbbd 	bl	900016c0 <BSP_LCD_SetTextColor>
			BSP_LCD_ClearStringLine(4);
90009f46:	2004      	movs	r0, #4
90009f48:	f7f7 fd28 	bl	9000199c <BSP_LCD_ClearStringLine>
			sprintf((char*) strFileName,"    >>  ERROR WRITING THE .wav FILE. ERROR CODE: %d", fileWriting);
90009f4c:	462a      	mov	r2, r5
90009f4e:	4906      	ldr	r1, [pc, #24]	; (90009f68 <TRANSMITTER_Process+0x608>)
90009f50:	e79c      	b.n	90009e8c <TRANSMITTER_Process+0x52c>
		BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"         |    . .-' `. '.       >>    .wav SUCCESFULLY CREATED!");
90009f52:	4906      	ldr	r1, [pc, #24]	; (90009f6c <TRANSMITTER_Process+0x60c>)
90009f54:	2009      	movs	r0, #9
90009f56:	e79e      	b.n	90009e96 <TRANSMITTER_Process+0x536>
		audio_error = AUDIO_ERROR_IO;
90009f58:	2501      	movs	r5, #1
		AudioState = AUDIO_STATE_IDLE;
90009f5a:	7032      	strb	r2, [r6, #0]
		break;
90009f5c:	e74e      	b.n	90009dfc <TRANSMITTER_Process+0x49c>
90009f5e:	bf00      	nop
90009f60:	ffff0000 	.word	0xffff0000
90009f64:	90010762 	.word	0x90010762
90009f68:	90010796 	.word	0x90010796
90009f6c:	900107ca 	.word	0x900107ca

90009f70 <HAL_HCD_MspInit>:
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hhcd->Instance == USB_OTG_FS)
90009f70:	6803      	ldr	r3, [r0, #0]
90009f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
90009f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90009f7a:	b090      	sub	sp, #64	; 0x40
  if(hhcd->Instance == USB_OTG_FS)
90009f7c:	d146      	bne.n	9000a00c <HAL_HCD_MspInit+0x9c>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
90009f7e:	4c63      	ldr	r4, [pc, #396]	; (9000a10c <HAL_HCD_MspInit+0x19c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
    
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90009f80:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
90009f82:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
90009f84:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
90009f86:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
90009f88:	4861      	ldr	r0, [pc, #388]	; (9000a110 <HAL_HCD_MspInit+0x1a0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
90009f8a:	f043 0301 	orr.w	r3, r3, #1
90009f8e:	6323      	str	r3, [r4, #48]	; 0x30
90009f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
90009f92:	f003 0301 	and.w	r3, r3, #1
90009f96:	9301      	str	r3, [sp, #4]
90009f98:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90009f9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
90009f9c:	f043 0308 	orr.w	r3, r3, #8
90009fa0:	6323      	str	r3, [r4, #48]	; 0x30
90009fa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
90009fa4:	f003 0308 	and.w	r3, r3, #8
90009fa8:	9302      	str	r3, [sp, #8]
90009faa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90009fac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
90009fb0:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
90009fb4:	2303      	movs	r3, #3
90009fb6:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
90009fba:	230a      	movs	r3, #10
90009fbc:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
90009fbe:	f7f8 fd97 	bl	90002af0 <HAL_GPIO_Init>
    
    /* Configure POWER_SWITCH IO pin */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
90009fc2:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90009fc4:	a90b      	add	r1, sp, #44	; 0x2c
90009fc6:	4853      	ldr	r0, [pc, #332]	; (9000a114 <HAL_HCD_MspInit+0x1a4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90009fc8:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90009fca:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90009fce:	f7f8 fd8f 	bl	90002af0 <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
90009fd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
90009fd4:	2043      	movs	r0, #67	; 0x43
90009fd6:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
90009fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
90009fdc:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
90009fde:	6363      	str	r3, [r4, #52]	; 0x34
90009fe0:	6b63      	ldr	r3, [r4, #52]	; 0x34
90009fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
90009fe6:	9303      	str	r3, [sp, #12]
90009fe8:	9b03      	ldr	r3, [sp, #12]
90009fea:	6c63      	ldr	r3, [r4, #68]	; 0x44
90009fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90009ff0:	6463      	str	r3, [r4, #68]	; 0x44
90009ff2:	6c63      	ldr	r3, [r4, #68]	; 0x44
90009ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90009ff8:	9304      	str	r3, [sp, #16]
90009ffa:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
90009ffc:	f7f8 fa1c 	bl	90002438 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
9000a000:	2043      	movs	r0, #67	; 0x43
    
    /* Set USBHS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
    
    /* Enable USBHS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
9000a002:	f7f8 fa4b 	bl	9000249c <HAL_NVIC_EnableIRQ>
  }   
}
9000a006:	b010      	add	sp, #64	; 0x40
9000a008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hhcd->Instance == USB_OTG_HS)
9000a00c:	4a42      	ldr	r2, [pc, #264]	; (9000a118 <HAL_HCD_MspInit+0x1a8>)
9000a00e:	4293      	cmp	r3, r2
9000a010:	d1f9      	bne.n	9000a006 <HAL_HCD_MspInit+0x96>
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a012:	4c3e      	ldr	r4, [pc, #248]	; (9000a10c <HAL_HCD_MspInit+0x19c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a014:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a016:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a018:	260a      	movs	r6, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a01a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a01c:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a020:	a90b      	add	r1, sp, #44	; 0x2c
9000a022:	483b      	ldr	r0, [pc, #236]	; (9000a110 <HAL_HCD_MspInit+0x1a0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a024:	f043 0301 	orr.w	r3, r3, #1
9000a028:	6323      	str	r3, [r4, #48]	; 0x30
9000a02a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a02c:	f003 0301 	and.w	r3, r3, #1
9000a030:	9305      	str	r3, [sp, #20]
9000a032:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
9000a034:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a036:	f043 0302 	orr.w	r3, r3, #2
9000a03a:	6323      	str	r3, [r4, #48]	; 0x30
9000a03c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a03e:	f003 0302 	and.w	r3, r3, #2
9000a042:	9306      	str	r3, [sp, #24]
9000a044:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
9000a046:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a048:	f043 0304 	orr.w	r3, r3, #4
9000a04c:	6323      	str	r3, [r4, #48]	; 0x30
9000a04e:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a050:	f003 0304 	and.w	r3, r3, #4
9000a054:	9307      	str	r3, [sp, #28]
9000a056:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000a058:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a05a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000a05e:	6323      	str	r3, [r4, #48]	; 0x30
9000a060:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a062:	960f      	str	r6, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000a064:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000a068:	9308      	str	r3, [sp, #32]
9000a06a:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a06c:	2320      	movs	r3, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a06e:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a072:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a076:	f7f8 fd3b 	bl	90002af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
9000a07a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a07c:	a90b      	add	r1, sp, #44	; 0x2c
9000a07e:	4824      	ldr	r0, [pc, #144]	; (9000a110 <HAL_HCD_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a080:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a082:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a086:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a08a:	f7f8 fd31 	bl	90002af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_5 |\
9000a08e:	f643 4323 	movw	r3, #15395	; 0x3c23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
9000a092:	a90b      	add	r1, sp, #44	; 0x2c
9000a094:	4821      	ldr	r0, [pc, #132]	; (9000a11c <HAL_HCD_MspInit+0x1ac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a096:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a098:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a09a:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
9000a09e:	f7f8 fd27 	bl	90002af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
9000a0a2:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); 
9000a0a4:	a90b      	add	r1, sp, #44	; 0x2c
9000a0a6:	481e      	ldr	r0, [pc, #120]	; (9000a120 <HAL_HCD_MspInit+0x1b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a0a8:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a0aa:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a0ac:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); 
9000a0b0:	f7f8 fd1e 	bl	90002af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
9000a0b4:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000a0b6:	a90b      	add	r1, sp, #44	; 0x2c
9000a0b8:	481a      	ldr	r0, [pc, #104]	; (9000a124 <HAL_HCD_MspInit+0x1b4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a0ba:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a0bc:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a0be:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000a0c2:	f7f8 fd15 	bl	90002af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
9000a0c6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000a0c8:	a90b      	add	r1, sp, #44	; 0x2c
9000a0ca:	4815      	ldr	r0, [pc, #84]	; (9000a120 <HAL_HCD_MspInit+0x1b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a0cc:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a0ce:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a0d0:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000a0d4:	f7f8 fd0c 	bl	90002af0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000a0d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000a0da:	204d      	movs	r0, #77	; 0x4d
9000a0dc:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000a0de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000a0e2:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000a0e4:	6323      	str	r3, [r4, #48]	; 0x30
9000a0e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a0e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
9000a0ec:	9309      	str	r3, [sp, #36]	; 0x24
9000a0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
9000a0f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a0f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
9000a0f6:	6323      	str	r3, [r4, #48]	; 0x30
9000a0f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a0fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
9000a0fe:	930a      	str	r3, [sp, #40]	; 0x28
9000a100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000a102:	f7f8 f999 	bl	90002438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
9000a106:	204d      	movs	r0, #77	; 0x4d
9000a108:	e77b      	b.n	9000a002 <HAL_HCD_MspInit+0x92>
9000a10a:	bf00      	nop
9000a10c:	40023800 	.word	0x40023800
9000a110:	40020000 	.word	0x40020000
9000a114:	40020c00 	.word	0x40020c00
9000a118:	40040000 	.word	0x40040000
9000a11c:	40020400 	.word	0x40020400
9000a120:	40020800 	.word	0x40020800
9000a124:	40021c00 	.word	0x40021c00

9000a128 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
9000a128:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a12c:	f7fc bc81 	b.w	90006a32 <USBH_LL_IncTimer>

9000a130 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
9000a130:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a134:	f7fc bc93 	b.w	90006a5e <USBH_LL_Connect>

9000a138 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
9000a138:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a13c:	f7fc bc99 	b.w	90006a72 <USBH_LL_Disconnect>

9000a140 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
9000a140:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a144:	f7fc bc83 	b.w	90006a4e <USBH_LL_PortEnabled>

9000a148 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
9000a148:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a14c:	f7fc bc83 	b.w	90006a56 <USBH_LL_PortDisabled>

9000a150 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
}
9000a150:	4770      	bx	lr
	...

9000a154 <USBH_LL_Init>:
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
9000a154:	b570      	push	{r4, r5, r6, lr}
#ifdef USE_USB_FS  
  /* Set the LL driver parameters */
  hhcd.Instance = USB_OTG_FS;
9000a156:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
9000a15a:	4c0f      	ldr	r4, [pc, #60]	; (9000a198 <USBH_LL_Init+0x44>)
  hhcd.Init.Host_channels = 11; 
  hhcd.Init.dma_enable = 0;
9000a15c:	2500      	movs	r5, #0
{
9000a15e:	4606      	mov	r6, r0
  hhcd.Instance = USB_OTG_FS;
9000a160:	6023      	str	r3, [r4, #0]
  hhcd.Init.Host_channels = 11; 
9000a162:	230b      	movs	r3, #11
  hhcd.Init.Sof_enable = 0;
  hhcd.Init.speed = HCD_SPEED_FULL;
  hhcd.Init.vbus_sensing_enable = 0;
  
  /* Link the driver to the stack */
  hhcd.pData = phost;
9000a164:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hhcd.Init.Host_channels = 11; 
9000a168:	60a3      	str	r3, [r4, #8]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED; 
9000a16a:	2302      	movs	r3, #2
  phost->pData = &hhcd;
9000a16c:	f8c0 44bc 	str.w	r4, [r0, #1212]	; 0x4bc
  
  /* Initialize the LL Driver */
  HAL_HCD_Init(&hhcd);
9000a170:	4620      	mov	r0, r4
  hhcd.Init.dma_enable = 0;
9000a172:	6125      	str	r5, [r4, #16]
  hhcd.Init.low_power_enable = 0;
9000a174:	6225      	str	r5, [r4, #32]
  hhcd.Init.vbus_sensing_enable = 0;
9000a176:	62e5      	str	r5, [r4, #44]	; 0x2c
  hhcd.Init.Sof_enable = 0;
9000a178:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hhcd.Init.speed = HCD_SPEED_FULL;
9000a17c:	2301      	movs	r3, #1
9000a17e:	60e3      	str	r3, [r4, #12]
  HAL_HCD_Init(&hhcd);
9000a180:	f7f8 fde5 	bl	90002d4e <HAL_HCD_Init>
  phost->pData = &hhcd;
  /* Initialize the LL driver */
  HAL_HCD_Init(&hhcd);
#endif /*USE_USB_HS*/ 

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd));
9000a184:	4620      	mov	r0, r4
9000a186:	f7f9 f9e9 	bl	9000355c <HAL_HCD_GetCurrentFrame>
9000a18a:	4601      	mov	r1, r0
9000a18c:	4630      	mov	r0, r6
9000a18e:	f7fc fc4d 	bl	90006a2c <USBH_LL_SetTimer>
  
  return USBH_OK;
}
9000a192:	4628      	mov	r0, r5
9000a194:	bd70      	pop	{r4, r5, r6, pc}
9000a196:	bf00      	nop
9000a198:	20010fb4 	.word	0x20010fb4

9000a19c <USBH_LL_Start>:
  * @brief  Starts the Low Level portion of the Host driver.   
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
9000a19c:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
9000a19e:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a1a2:	f7f9 f9a5 	bl	900034f0 <HAL_HCD_Start>
  return USBH_OK; 
}
9000a1a6:	2000      	movs	r0, #0
9000a1a8:	bd08      	pop	{r3, pc}

9000a1aa <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
9000a1aa:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
9000a1ac:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a1b0:	f7f9 f9b4 	bl	9000351c <HAL_HCD_Stop>
  return USBH_OK; 
}
9000a1b4:	2000      	movs	r0, #0
9000a1b6:	bd08      	pop	{r3, pc}

9000a1b8 <USBH_LL_GetSpeed>:
  * @brief  Returns the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
9000a1b8:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
  
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
9000a1ba:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a1be:	f7f9 f9d0 	bl	90003562 <HAL_HCD_GetCurrentSpeed>
9000a1c2:	2803      	cmp	r0, #3
9000a1c4:	bf28      	it	cs
9000a1c6:	2001      	movcs	r0, #1
  default:  
    speed = USBH_SPEED_FULL;    
    break;    
  }
  return speed;
}
9000a1c8:	b2c0      	uxtb	r0, r0
9000a1ca:	bd08      	pop	{r3, pc}

9000a1cc <USBH_LL_ResetPort>:
  * @brief  Resets the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
9000a1cc:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
9000a1ce:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a1d2:	f7f9 f9b5 	bl	90003540 <HAL_HCD_ResetPort>
  return USBH_OK; 
}
9000a1d6:	2000      	movs	r0, #0
9000a1d8:	bd08      	pop	{r3, pc}

9000a1da <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)  
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
9000a1da:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a1de:	f7f9 b9b8 	b.w	90003552 <HAL_HCD_HC_GetXferCount>

9000a1e2 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,                                      
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
9000a1e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_Init(phost->pData,
9000a1e4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
9000a1e8:	9402      	str	r4, [sp, #8]
9000a1ea:	f89d 401c 	ldrb.w	r4, [sp, #28]
9000a1ee:	9401      	str	r4, [sp, #4]
9000a1f0:	f89d 4018 	ldrb.w	r4, [sp, #24]
9000a1f4:	9400      	str	r4, [sp, #0]
9000a1f6:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a1fa:	f7f8 fd60 	bl	90002cbe <HAL_HCD_HC_Init>
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
}
9000a1fe:	2000      	movs	r0, #0
9000a200:	b004      	add	sp, #16
9000a202:	bd10      	pop	{r4, pc}

9000a204 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
9000a204:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe);
9000a206:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a20a:	f7f8 fd8e 	bl	90002d2a <HAL_HCD_HC_Halt>
  return USBH_OK; 
}
9000a20e:	2000      	movs	r0, #0
9000a210:	bd08      	pop	{r3, pc}

9000a212 <USBH_LL_SubmitURB>:
                                     uint8_t ep_type,  
                                     uint8_t token, 
                                     uint8_t* pbuff, 
                                     uint16_t length,
                                     uint8_t do_ping) 
{
9000a212:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_SubmitRequest(phost->pData,
9000a214:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
9000a218:	9403      	str	r4, [sp, #12]
9000a21a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
9000a21e:	9402      	str	r4, [sp, #8]
9000a220:	9c07      	ldr	r4, [sp, #28]
9000a222:	9401      	str	r4, [sp, #4]
9000a224:	f89d 4018 	ldrb.w	r4, [sp, #24]
9000a228:	9400      	str	r4, [sp, #0]
9000a22a:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a22e:	f7f8 fddb 	bl	90002de8 <HAL_HCD_HC_SubmitRequest>
                           token, 
                           pbuff, 
                           length,
                           do_ping);
  return USBH_OK;   
}
9000a232:	2000      	movs	r0, #0
9000a234:	b004      	add	sp, #16
9000a236:	bd10      	pop	{r4, pc}

9000a238 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe) 
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
9000a238:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a23c:	f7f9 b983 	b.w	90003546 <HAL_HCD_HC_GetURBState>

9000a240 <USBH_LL_DriverVBUS>:
  *           0: VBUS Active 
  *           1: VBUS Inactive
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
9000a240:	b508      	push	{r3, lr}
#ifdef USE_USB_FS
  if(state == 0)
9000a242:	b949      	cbnz	r1, 9000a258 <USBH_LL_DriverVBUS+0x18>
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
9000a244:	2201      	movs	r2, #1
  }
  else
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
9000a246:	2120      	movs	r1, #32
9000a248:	4804      	ldr	r0, [pc, #16]	; (9000a25c <USBH_LL_DriverVBUS+0x1c>)
9000a24a:	f7f8 fd33 	bl	90002cb4 <HAL_GPIO_WritePin>
  }
  
  HAL_Delay(200);
9000a24e:	20c8      	movs	r0, #200	; 0xc8
9000a250:	f7f8 f8ce 	bl	900023f0 <HAL_Delay>
#endif /* USE_USB_FS */
  return USBH_OK;  
}
9000a254:	2000      	movs	r0, #0
9000a256:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
9000a258:	2200      	movs	r2, #0
9000a25a:	e7f4      	b.n	9000a246 <USBH_LL_DriverVBUS+0x6>
9000a25c:	40020c00 	.word	0x40020c00

9000a260 <USBH_LL_SetToggle>:
  * @param  toggle: toggle (0/1)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
  if(hhcd.hc[pipe].ep_is_in)
9000a260:	4b06      	ldr	r3, [pc, #24]	; (9000a27c <USBH_LL_SetToggle+0x1c>)
9000a262:	2028      	movs	r0, #40	; 0x28
9000a264:	fb00 3101 	mla	r1, r0, r1, r3
9000a268:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
9000a26c:	b11b      	cbz	r3, 9000a276 <USBH_LL_SetToggle+0x16>
  {
    hhcd.hc[pipe].toggle_in = toggle;
9000a26e:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
  }
  return USBH_OK; 
}
9000a272:	2000      	movs	r0, #0
9000a274:	4770      	bx	lr
    hhcd.hc[pipe].toggle_out = toggle;
9000a276:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
9000a27a:	e7fa      	b.n	9000a272 <USBH_LL_SetToggle+0x12>
9000a27c:	20010fb4 	.word	0x20010fb4

9000a280 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
  uint8_t toggle = 0;
  
  if(hhcd.hc[pipe].ep_is_in)
9000a280:	4b06      	ldr	r3, [pc, #24]	; (9000a29c <USBH_LL_GetToggle+0x1c>)
9000a282:	2228      	movs	r2, #40	; 0x28
9000a284:	fb02 3101 	mla	r1, r2, r1, r3
9000a288:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
9000a28c:	b113      	cbz	r3, 9000a294 <USBH_LL_GetToggle+0x14>
  {
    toggle = hhcd.hc[pipe].toggle_in;
9000a28e:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
9000a292:	4770      	bx	lr
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
9000a294:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle; 
}
9000a298:	4770      	bx	lr
9000a29a:	bf00      	nop
9000a29c:	20010fb4 	.word	0x20010fb4

9000a2a0 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);  
9000a2a0:	f7f8 b8a6 	b.w	900023f0 <HAL_Delay>

9000a2a4 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
9000a2a4:	2000      	movs	r0, #0
9000a2a6:	4770      	bx	lr

9000a2a8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
9000a2a8:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
9000a2aa:	4804      	ldr	r0, [pc, #16]	; (9000a2bc <USBH_status+0x14>)
{
9000a2ac:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
9000a2ae:	f7fb fccd 	bl	90005c4c <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
9000a2b2:	fab0 f080 	clz	r0, r0
9000a2b6:	0940      	lsrs	r0, r0, #5
9000a2b8:	bd08      	pop	{r3, pc}
9000a2ba:	bf00      	nop
9000a2bc:	20000d84 	.word	0x20000d84

9000a2c0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
9000a2c0:	b510      	push	{r4, lr}
9000a2c2:	4603      	mov	r3, r0
9000a2c4:	b08e      	sub	sp, #56	; 0x38
9000a2c6:	4608      	mov	r0, r1
9000a2c8:	4614      	mov	r4, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
9000a2ca:	2903      	cmp	r1, #3
9000a2cc:	d803      	bhi.n	9000a2d6 <USBH_ioctl+0x16>
9000a2ce:	e8df f001 	tbb	[pc, r1]
9000a2d2:	0503      	.short	0x0503
9000a2d4:	1a10      	.short	0x1a10
9000a2d6:	2004      	movs	r0, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
9000a2d8:	b00e      	add	sp, #56	; 0x38
9000a2da:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000a2dc:	aa01      	add	r2, sp, #4
9000a2de:	4619      	mov	r1, r3
9000a2e0:	480e      	ldr	r0, [pc, #56]	; (9000a31c <USBH_ioctl+0x5c>)
9000a2e2:	f7fb fcc4 	bl	90005c6e <USBH_MSC_GetLUNInfo>
9000a2e6:	b108      	cbz	r0, 9000a2ec <USBH_ioctl+0x2c>
      res = RES_ERROR;
9000a2e8:	2001      	movs	r0, #1
9000a2ea:	e7f5      	b.n	9000a2d8 <USBH_ioctl+0x18>
      *(DWORD*)buff = info.capacity.block_nbr;
9000a2ec:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
9000a2ee:	6023      	str	r3, [r4, #0]
      res = RES_OK;
9000a2f0:	e7f2      	b.n	9000a2d8 <USBH_ioctl+0x18>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000a2f2:	aa01      	add	r2, sp, #4
9000a2f4:	4619      	mov	r1, r3
9000a2f6:	4809      	ldr	r0, [pc, #36]	; (9000a31c <USBH_ioctl+0x5c>)
9000a2f8:	f7fb fcb9 	bl	90005c6e <USBH_MSC_GetLUNInfo>
9000a2fc:	2800      	cmp	r0, #0
9000a2fe:	d1f3      	bne.n	9000a2e8 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size;
9000a300:	f8bd 300c 	ldrh.w	r3, [sp, #12]
9000a304:	e7f3      	b.n	9000a2ee <USBH_ioctl+0x2e>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000a306:	aa01      	add	r2, sp, #4
9000a308:	4619      	mov	r1, r3
9000a30a:	4804      	ldr	r0, [pc, #16]	; (9000a31c <USBH_ioctl+0x5c>)
9000a30c:	f7fb fcaf 	bl	90005c6e <USBH_MSC_GetLUNInfo>
9000a310:	2800      	cmp	r0, #0
9000a312:	d1e9      	bne.n	9000a2e8 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
9000a314:	f8bd 300c 	ldrh.w	r3, [sp, #12]
9000a318:	0a5b      	lsrs	r3, r3, #9
9000a31a:	e7e8      	b.n	9000a2ee <USBH_ioctl+0x2e>
9000a31c:	20000d84 	.word	0x20000d84

9000a320 <USBH_read>:
{
9000a320:	b510      	push	{r4, lr}
9000a322:	b090      	sub	sp, #64	; 0x40
9000a324:	4604      	mov	r4, r0
  if(USBH_MSC_Read(&hUSBHost, lun, sector, buff, count) == USBH_OK)
9000a326:	9300      	str	r3, [sp, #0]
9000a328:	460b      	mov	r3, r1
9000a32a:	4601      	mov	r1, r0
9000a32c:	480f      	ldr	r0, [pc, #60]	; (9000a36c <USBH_read+0x4c>)
9000a32e:	f7fb fcb6 	bl	90005c9e <USBH_MSC_Read>
9000a332:	b1b0      	cbz	r0, 9000a362 <USBH_read+0x42>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
9000a334:	aa03      	add	r2, sp, #12
9000a336:	4621      	mov	r1, r4
9000a338:	480c      	ldr	r0, [pc, #48]	; (9000a36c <USBH_read+0x4c>)
9000a33a:	f7fb fc98 	bl	90005c6e <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
9000a33e:	f89d 3019 	ldrb.w	r3, [sp, #25]
9000a342:	2b28      	cmp	r3, #40	; 0x28
9000a344:	d003      	beq.n	9000a34e <USBH_read+0x2e>
9000a346:	2b3a      	cmp	r3, #58	; 0x3a
9000a348:	d001      	beq.n	9000a34e <USBH_read+0x2e>
9000a34a:	2b04      	cmp	r3, #4
9000a34c:	d10b      	bne.n	9000a366 <USBH_read+0x46>
      USBH_ErrLog ("USB Disk is not ready!");
9000a34e:	4808      	ldr	r0, [pc, #32]	; (9000a370 <USBH_read+0x50>)
9000a350:	f000 f9ea 	bl	9000a728 <iprintf>
9000a354:	4807      	ldr	r0, [pc, #28]	; (9000a374 <USBH_read+0x54>)
9000a356:	f000 f9e7 	bl	9000a728 <iprintf>
9000a35a:	200a      	movs	r0, #10
9000a35c:	f000 f9f6 	bl	9000a74c <putchar>
      res = RES_NOTRDY;
9000a360:	2003      	movs	r0, #3
}
9000a362:	b010      	add	sp, #64	; 0x40
9000a364:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
9000a366:	2001      	movs	r0, #1
  return res;
9000a368:	e7fb      	b.n	9000a362 <USBH_read+0x42>
9000a36a:	bf00      	nop
9000a36c:	20000d84 	.word	0x20000d84
9000a370:	9000fc88 	.word	0x9000fc88
9000a374:	9001080a 	.word	0x9001080a

9000a378 <USBH_write>:
{
9000a378:	b510      	push	{r4, lr}
9000a37a:	b090      	sub	sp, #64	; 0x40
9000a37c:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSBHost, lun, sector, (BYTE *)buff, count) == USBH_OK)
9000a37e:	9300      	str	r3, [sp, #0]
9000a380:	460b      	mov	r3, r1
9000a382:	4601      	mov	r1, r0
9000a384:	4816      	ldr	r0, [pc, #88]	; (9000a3e0 <USBH_write+0x68>)
9000a386:	f7fb fccb 	bl	90005d20 <USBH_MSC_Write>
9000a38a:	b160      	cbz	r0, 9000a3a6 <USBH_write+0x2e>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
9000a38c:	aa03      	add	r2, sp, #12
9000a38e:	4621      	mov	r1, r4
9000a390:	4813      	ldr	r0, [pc, #76]	; (9000a3e0 <USBH_write+0x68>)
9000a392:	f7fb fc6c 	bl	90005c6e <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
9000a396:	f89d 3019 	ldrb.w	r3, [sp, #25]
9000a39a:	2b27      	cmp	r3, #39	; 0x27
9000a39c:	d009      	beq.n	9000a3b2 <USBH_write+0x3a>
9000a39e:	d804      	bhi.n	9000a3aa <USBH_write+0x32>
9000a3a0:	2b04      	cmp	r3, #4
9000a3a2:	d011      	beq.n	9000a3c8 <USBH_write+0x50>
9000a3a4:	2001      	movs	r0, #1
}
9000a3a6:	b010      	add	sp, #64	; 0x40
9000a3a8:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
9000a3aa:	2b28      	cmp	r3, #40	; 0x28
9000a3ac:	d00c      	beq.n	9000a3c8 <USBH_write+0x50>
9000a3ae:	2b3a      	cmp	r3, #58	; 0x3a
9000a3b0:	e7f7      	b.n	9000a3a2 <USBH_write+0x2a>
      USBH_ErrLog("USB Disk is Write protected!");
9000a3b2:	480c      	ldr	r0, [pc, #48]	; (9000a3e4 <USBH_write+0x6c>)
9000a3b4:	f000 f9b8 	bl	9000a728 <iprintf>
9000a3b8:	480b      	ldr	r0, [pc, #44]	; (9000a3e8 <USBH_write+0x70>)
9000a3ba:	f000 f9b5 	bl	9000a728 <iprintf>
9000a3be:	200a      	movs	r0, #10
9000a3c0:	f000 f9c4 	bl	9000a74c <putchar>
      res = RES_WRPRT;
9000a3c4:	2002      	movs	r0, #2
      break;
9000a3c6:	e7ee      	b.n	9000a3a6 <USBH_write+0x2e>
      USBH_ErrLog("USB Disk is not ready!");
9000a3c8:	4806      	ldr	r0, [pc, #24]	; (9000a3e4 <USBH_write+0x6c>)
9000a3ca:	f000 f9ad 	bl	9000a728 <iprintf>
9000a3ce:	4807      	ldr	r0, [pc, #28]	; (9000a3ec <USBH_write+0x74>)
9000a3d0:	f000 f9aa 	bl	9000a728 <iprintf>
9000a3d4:	200a      	movs	r0, #10
9000a3d6:	f000 f9b9 	bl	9000a74c <putchar>
      res = RES_NOTRDY;
9000a3da:	2003      	movs	r0, #3
      break;
9000a3dc:	e7e3      	b.n	9000a3a6 <USBH_write+0x2e>
9000a3de:	bf00      	nop
9000a3e0:	20000d84 	.word	0x20000d84
9000a3e4:	9000fc88 	.word	0x9000fc88
9000a3e8:	90010821 	.word	0x90010821
9000a3ec:	9001080a 	.word	0x9001080a

9000a3f0 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
9000a3f0:	4b08      	ldr	r3, [pc, #32]	; (9000a414 <LCD_LOG_DeInit+0x24>)
9000a3f2:	f04f 32ff 	mov.w	r2, #4294967295
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
9000a3f6:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
9000a3f8:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
9000a3fa:	2200      	movs	r2, #0
  LCD_CacheBuffer_yptr_invert= ENABLE;
9000a3fc:	7399      	strb	r1, [r3, #14]
  LCD_CacheBuffer_xptr = 0;
9000a3fe:	809a      	strh	r2, [r3, #4]
  LCD_CacheBuffer_yptr_top = 0;
9000a400:	80da      	strh	r2, [r3, #6]
  LCD_CacheBuffer_yptr_bottom = 0;
9000a402:	811a      	strh	r2, [r3, #8]
  LCD_CacheBuffer_yptr_top_bak = 0;
9000a404:	815a      	strh	r2, [r3, #10]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
9000a406:	819a      	strh	r2, [r3, #12]
  LCD_ScrollActive = DISABLE;
9000a408:	73da      	strb	r2, [r3, #15]
  LCD_Lock = DISABLE;
9000a40a:	741a      	strb	r2, [r3, #16]
  LCD_Scrolled = DISABLE;
9000a40c:	745a      	strb	r2, [r3, #17]
  LCD_ScrollBackStep = 0;
9000a40e:	825a      	strh	r2, [r3, #18]
}
9000a410:	4770      	bx	lr
9000a412:	bf00      	nop
9000a414:	20011278 	.word	0x20011278

9000a418 <LCD_LOG_Init>:
{
9000a418:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
9000a41a:	f7ff ffe9 	bl	9000a3f0 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
9000a41e:	4802      	ldr	r0, [pc, #8]	; (9000a428 <LCD_LOG_Init+0x10>)
}
9000a420:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
9000a424:	f7f7 b97c 	b.w	90001720 <BSP_LCD_Clear>
9000a428:	ff008000 	.word	0xff008000

9000a42c <malloc>:
9000a42c:	4b02      	ldr	r3, [pc, #8]	; (9000a438 <malloc+0xc>)
9000a42e:	4601      	mov	r1, r0
9000a430:	6818      	ldr	r0, [r3, #0]
9000a432:	f000 b82b 	b.w	9000a48c <_malloc_r>
9000a436:	bf00      	nop
9000a438:	20000118 	.word	0x20000118

9000a43c <free>:
9000a43c:	4b02      	ldr	r3, [pc, #8]	; (9000a448 <free+0xc>)
9000a43e:	4601      	mov	r1, r0
9000a440:	6818      	ldr	r0, [r3, #0]
9000a442:	f000 bb79 	b.w	9000ab38 <_free_r>
9000a446:	bf00      	nop
9000a448:	20000118 	.word	0x20000118

9000a44c <sbrk_aligned>:
9000a44c:	b570      	push	{r4, r5, r6, lr}
9000a44e:	4e0e      	ldr	r6, [pc, #56]	; (9000a488 <sbrk_aligned+0x3c>)
9000a450:	460c      	mov	r4, r1
9000a452:	6831      	ldr	r1, [r6, #0]
9000a454:	4605      	mov	r5, r0
9000a456:	b911      	cbnz	r1, 9000a45e <sbrk_aligned+0x12>
9000a458:	f000 fb24 	bl	9000aaa4 <_sbrk_r>
9000a45c:	6030      	str	r0, [r6, #0]
9000a45e:	4621      	mov	r1, r4
9000a460:	4628      	mov	r0, r5
9000a462:	f000 fb1f 	bl	9000aaa4 <_sbrk_r>
9000a466:	1c43      	adds	r3, r0, #1
9000a468:	d00a      	beq.n	9000a480 <sbrk_aligned+0x34>
9000a46a:	1cc4      	adds	r4, r0, #3
9000a46c:	f024 0403 	bic.w	r4, r4, #3
9000a470:	42a0      	cmp	r0, r4
9000a472:	d007      	beq.n	9000a484 <sbrk_aligned+0x38>
9000a474:	1a21      	subs	r1, r4, r0
9000a476:	4628      	mov	r0, r5
9000a478:	f000 fb14 	bl	9000aaa4 <_sbrk_r>
9000a47c:	3001      	adds	r0, #1
9000a47e:	d101      	bne.n	9000a484 <sbrk_aligned+0x38>
9000a480:	f04f 34ff 	mov.w	r4, #4294967295
9000a484:	4620      	mov	r0, r4
9000a486:	bd70      	pop	{r4, r5, r6, pc}
9000a488:	20014b48 	.word	0x20014b48

9000a48c <_malloc_r>:
9000a48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000a490:	1ccd      	adds	r5, r1, #3
9000a492:	f025 0503 	bic.w	r5, r5, #3
9000a496:	3508      	adds	r5, #8
9000a498:	2d0c      	cmp	r5, #12
9000a49a:	bf38      	it	cc
9000a49c:	250c      	movcc	r5, #12
9000a49e:	2d00      	cmp	r5, #0
9000a4a0:	4607      	mov	r7, r0
9000a4a2:	db01      	blt.n	9000a4a8 <_malloc_r+0x1c>
9000a4a4:	42a9      	cmp	r1, r5
9000a4a6:	d905      	bls.n	9000a4b4 <_malloc_r+0x28>
9000a4a8:	230c      	movs	r3, #12
9000a4aa:	603b      	str	r3, [r7, #0]
9000a4ac:	2600      	movs	r6, #0
9000a4ae:	4630      	mov	r0, r6
9000a4b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000a4b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 9000a588 <_malloc_r+0xfc>
9000a4b8:	f000 f868 	bl	9000a58c <__malloc_lock>
9000a4bc:	f8d8 3000 	ldr.w	r3, [r8]
9000a4c0:	461c      	mov	r4, r3
9000a4c2:	bb5c      	cbnz	r4, 9000a51c <_malloc_r+0x90>
9000a4c4:	4629      	mov	r1, r5
9000a4c6:	4638      	mov	r0, r7
9000a4c8:	f7ff ffc0 	bl	9000a44c <sbrk_aligned>
9000a4cc:	1c43      	adds	r3, r0, #1
9000a4ce:	4604      	mov	r4, r0
9000a4d0:	d155      	bne.n	9000a57e <_malloc_r+0xf2>
9000a4d2:	f8d8 4000 	ldr.w	r4, [r8]
9000a4d6:	4626      	mov	r6, r4
9000a4d8:	2e00      	cmp	r6, #0
9000a4da:	d145      	bne.n	9000a568 <_malloc_r+0xdc>
9000a4dc:	2c00      	cmp	r4, #0
9000a4de:	d048      	beq.n	9000a572 <_malloc_r+0xe6>
9000a4e0:	6823      	ldr	r3, [r4, #0]
9000a4e2:	4631      	mov	r1, r6
9000a4e4:	4638      	mov	r0, r7
9000a4e6:	eb04 0903 	add.w	r9, r4, r3
9000a4ea:	f000 fadb 	bl	9000aaa4 <_sbrk_r>
9000a4ee:	4581      	cmp	r9, r0
9000a4f0:	d13f      	bne.n	9000a572 <_malloc_r+0xe6>
9000a4f2:	6821      	ldr	r1, [r4, #0]
9000a4f4:	1a6d      	subs	r5, r5, r1
9000a4f6:	4629      	mov	r1, r5
9000a4f8:	4638      	mov	r0, r7
9000a4fa:	f7ff ffa7 	bl	9000a44c <sbrk_aligned>
9000a4fe:	3001      	adds	r0, #1
9000a500:	d037      	beq.n	9000a572 <_malloc_r+0xe6>
9000a502:	6823      	ldr	r3, [r4, #0]
9000a504:	442b      	add	r3, r5
9000a506:	6023      	str	r3, [r4, #0]
9000a508:	f8d8 3000 	ldr.w	r3, [r8]
9000a50c:	2b00      	cmp	r3, #0
9000a50e:	d038      	beq.n	9000a582 <_malloc_r+0xf6>
9000a510:	685a      	ldr	r2, [r3, #4]
9000a512:	42a2      	cmp	r2, r4
9000a514:	d12b      	bne.n	9000a56e <_malloc_r+0xe2>
9000a516:	2200      	movs	r2, #0
9000a518:	605a      	str	r2, [r3, #4]
9000a51a:	e00f      	b.n	9000a53c <_malloc_r+0xb0>
9000a51c:	6822      	ldr	r2, [r4, #0]
9000a51e:	1b52      	subs	r2, r2, r5
9000a520:	d41f      	bmi.n	9000a562 <_malloc_r+0xd6>
9000a522:	2a0b      	cmp	r2, #11
9000a524:	d917      	bls.n	9000a556 <_malloc_r+0xca>
9000a526:	1961      	adds	r1, r4, r5
9000a528:	42a3      	cmp	r3, r4
9000a52a:	6025      	str	r5, [r4, #0]
9000a52c:	bf18      	it	ne
9000a52e:	6059      	strne	r1, [r3, #4]
9000a530:	6863      	ldr	r3, [r4, #4]
9000a532:	bf08      	it	eq
9000a534:	f8c8 1000 	streq.w	r1, [r8]
9000a538:	5162      	str	r2, [r4, r5]
9000a53a:	604b      	str	r3, [r1, #4]
9000a53c:	4638      	mov	r0, r7
9000a53e:	f104 060b 	add.w	r6, r4, #11
9000a542:	f000 f829 	bl	9000a598 <__malloc_unlock>
9000a546:	f026 0607 	bic.w	r6, r6, #7
9000a54a:	1d23      	adds	r3, r4, #4
9000a54c:	1af2      	subs	r2, r6, r3
9000a54e:	d0ae      	beq.n	9000a4ae <_malloc_r+0x22>
9000a550:	1b9b      	subs	r3, r3, r6
9000a552:	50a3      	str	r3, [r4, r2]
9000a554:	e7ab      	b.n	9000a4ae <_malloc_r+0x22>
9000a556:	42a3      	cmp	r3, r4
9000a558:	6862      	ldr	r2, [r4, #4]
9000a55a:	d1dd      	bne.n	9000a518 <_malloc_r+0x8c>
9000a55c:	f8c8 2000 	str.w	r2, [r8]
9000a560:	e7ec      	b.n	9000a53c <_malloc_r+0xb0>
9000a562:	4623      	mov	r3, r4
9000a564:	6864      	ldr	r4, [r4, #4]
9000a566:	e7ac      	b.n	9000a4c2 <_malloc_r+0x36>
9000a568:	4634      	mov	r4, r6
9000a56a:	6876      	ldr	r6, [r6, #4]
9000a56c:	e7b4      	b.n	9000a4d8 <_malloc_r+0x4c>
9000a56e:	4613      	mov	r3, r2
9000a570:	e7cc      	b.n	9000a50c <_malloc_r+0x80>
9000a572:	230c      	movs	r3, #12
9000a574:	603b      	str	r3, [r7, #0]
9000a576:	4638      	mov	r0, r7
9000a578:	f000 f80e 	bl	9000a598 <__malloc_unlock>
9000a57c:	e797      	b.n	9000a4ae <_malloc_r+0x22>
9000a57e:	6025      	str	r5, [r4, #0]
9000a580:	e7dc      	b.n	9000a53c <_malloc_r+0xb0>
9000a582:	605b      	str	r3, [r3, #4]
9000a584:	deff      	udf	#255	; 0xff
9000a586:	bf00      	nop
9000a588:	20014b44 	.word	0x20014b44

9000a58c <__malloc_lock>:
9000a58c:	4801      	ldr	r0, [pc, #4]	; (9000a594 <__malloc_lock+0x8>)
9000a58e:	f000 bad0 	b.w	9000ab32 <__retarget_lock_acquire_recursive>
9000a592:	bf00      	nop
9000a594:	20014c8c 	.word	0x20014c8c

9000a598 <__malloc_unlock>:
9000a598:	4801      	ldr	r0, [pc, #4]	; (9000a5a0 <__malloc_unlock+0x8>)
9000a59a:	f000 bacb 	b.w	9000ab34 <__retarget_lock_release_recursive>
9000a59e:	bf00      	nop
9000a5a0:	20014c8c 	.word	0x20014c8c

9000a5a4 <std>:
9000a5a4:	2300      	movs	r3, #0
9000a5a6:	b510      	push	{r4, lr}
9000a5a8:	4604      	mov	r4, r0
9000a5aa:	e9c0 3300 	strd	r3, r3, [r0]
9000a5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000a5b2:	6083      	str	r3, [r0, #8]
9000a5b4:	8181      	strh	r1, [r0, #12]
9000a5b6:	6643      	str	r3, [r0, #100]	; 0x64
9000a5b8:	81c2      	strh	r2, [r0, #14]
9000a5ba:	6183      	str	r3, [r0, #24]
9000a5bc:	4619      	mov	r1, r3
9000a5be:	2208      	movs	r2, #8
9000a5c0:	305c      	adds	r0, #92	; 0x5c
9000a5c2:	f000 fa1f 	bl	9000aa04 <memset>
9000a5c6:	4b0d      	ldr	r3, [pc, #52]	; (9000a5fc <std+0x58>)
9000a5c8:	6263      	str	r3, [r4, #36]	; 0x24
9000a5ca:	4b0d      	ldr	r3, [pc, #52]	; (9000a600 <std+0x5c>)
9000a5cc:	62a3      	str	r3, [r4, #40]	; 0x28
9000a5ce:	4b0d      	ldr	r3, [pc, #52]	; (9000a604 <std+0x60>)
9000a5d0:	62e3      	str	r3, [r4, #44]	; 0x2c
9000a5d2:	4b0d      	ldr	r3, [pc, #52]	; (9000a608 <std+0x64>)
9000a5d4:	6323      	str	r3, [r4, #48]	; 0x30
9000a5d6:	4b0d      	ldr	r3, [pc, #52]	; (9000a60c <std+0x68>)
9000a5d8:	6224      	str	r4, [r4, #32]
9000a5da:	429c      	cmp	r4, r3
9000a5dc:	d006      	beq.n	9000a5ec <std+0x48>
9000a5de:	f103 0268 	add.w	r2, r3, #104	; 0x68
9000a5e2:	4294      	cmp	r4, r2
9000a5e4:	d002      	beq.n	9000a5ec <std+0x48>
9000a5e6:	33d0      	adds	r3, #208	; 0xd0
9000a5e8:	429c      	cmp	r4, r3
9000a5ea:	d105      	bne.n	9000a5f8 <std+0x54>
9000a5ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
9000a5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000a5f4:	f000 ba9c 	b.w	9000ab30 <__retarget_lock_init_recursive>
9000a5f8:	bd10      	pop	{r4, pc}
9000a5fa:	bf00      	nop
9000a5fc:	9000a855 	.word	0x9000a855
9000a600:	9000a877 	.word	0x9000a877
9000a604:	9000a8af 	.word	0x9000a8af
9000a608:	9000a8d3 	.word	0x9000a8d3
9000a60c:	20014b4c 	.word	0x20014b4c

9000a610 <stdio_exit_handler>:
9000a610:	4a02      	ldr	r2, [pc, #8]	; (9000a61c <stdio_exit_handler+0xc>)
9000a612:	4903      	ldr	r1, [pc, #12]	; (9000a620 <stdio_exit_handler+0x10>)
9000a614:	4803      	ldr	r0, [pc, #12]	; (9000a624 <stdio_exit_handler+0x14>)
9000a616:	f000 b869 	b.w	9000a6ec <_fwalk_sglue>
9000a61a:	bf00      	nop
9000a61c:	200000c0 	.word	0x200000c0
9000a620:	9000b535 	.word	0x9000b535
9000a624:	200000cc 	.word	0x200000cc

9000a628 <cleanup_stdio>:
9000a628:	6841      	ldr	r1, [r0, #4]
9000a62a:	4b0c      	ldr	r3, [pc, #48]	; (9000a65c <cleanup_stdio+0x34>)
9000a62c:	4299      	cmp	r1, r3
9000a62e:	b510      	push	{r4, lr}
9000a630:	4604      	mov	r4, r0
9000a632:	d001      	beq.n	9000a638 <cleanup_stdio+0x10>
9000a634:	f000 ff7e 	bl	9000b534 <_fflush_r>
9000a638:	68a1      	ldr	r1, [r4, #8]
9000a63a:	4b09      	ldr	r3, [pc, #36]	; (9000a660 <cleanup_stdio+0x38>)
9000a63c:	4299      	cmp	r1, r3
9000a63e:	d002      	beq.n	9000a646 <cleanup_stdio+0x1e>
9000a640:	4620      	mov	r0, r4
9000a642:	f000 ff77 	bl	9000b534 <_fflush_r>
9000a646:	68e1      	ldr	r1, [r4, #12]
9000a648:	4b06      	ldr	r3, [pc, #24]	; (9000a664 <cleanup_stdio+0x3c>)
9000a64a:	4299      	cmp	r1, r3
9000a64c:	d004      	beq.n	9000a658 <cleanup_stdio+0x30>
9000a64e:	4620      	mov	r0, r4
9000a650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000a654:	f000 bf6e 	b.w	9000b534 <_fflush_r>
9000a658:	bd10      	pop	{r4, pc}
9000a65a:	bf00      	nop
9000a65c:	20014b4c 	.word	0x20014b4c
9000a660:	20014bb4 	.word	0x20014bb4
9000a664:	20014c1c 	.word	0x20014c1c

9000a668 <global_stdio_init.part.0>:
9000a668:	b510      	push	{r4, lr}
9000a66a:	4b0b      	ldr	r3, [pc, #44]	; (9000a698 <global_stdio_init.part.0+0x30>)
9000a66c:	4c0b      	ldr	r4, [pc, #44]	; (9000a69c <global_stdio_init.part.0+0x34>)
9000a66e:	4a0c      	ldr	r2, [pc, #48]	; (9000a6a0 <global_stdio_init.part.0+0x38>)
9000a670:	601a      	str	r2, [r3, #0]
9000a672:	4620      	mov	r0, r4
9000a674:	2200      	movs	r2, #0
9000a676:	2104      	movs	r1, #4
9000a678:	f7ff ff94 	bl	9000a5a4 <std>
9000a67c:	f104 0068 	add.w	r0, r4, #104	; 0x68
9000a680:	2201      	movs	r2, #1
9000a682:	2109      	movs	r1, #9
9000a684:	f7ff ff8e 	bl	9000a5a4 <std>
9000a688:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
9000a68c:	2202      	movs	r2, #2
9000a68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000a692:	2112      	movs	r1, #18
9000a694:	f7ff bf86 	b.w	9000a5a4 <std>
9000a698:	20014c84 	.word	0x20014c84
9000a69c:	20014b4c 	.word	0x20014b4c
9000a6a0:	9000a611 	.word	0x9000a611

9000a6a4 <__sfp_lock_acquire>:
9000a6a4:	4801      	ldr	r0, [pc, #4]	; (9000a6ac <__sfp_lock_acquire+0x8>)
9000a6a6:	f000 ba44 	b.w	9000ab32 <__retarget_lock_acquire_recursive>
9000a6aa:	bf00      	nop
9000a6ac:	20014c8d 	.word	0x20014c8d

9000a6b0 <__sfp_lock_release>:
9000a6b0:	4801      	ldr	r0, [pc, #4]	; (9000a6b8 <__sfp_lock_release+0x8>)
9000a6b2:	f000 ba3f 	b.w	9000ab34 <__retarget_lock_release_recursive>
9000a6b6:	bf00      	nop
9000a6b8:	20014c8d 	.word	0x20014c8d

9000a6bc <__sinit>:
9000a6bc:	b510      	push	{r4, lr}
9000a6be:	4604      	mov	r4, r0
9000a6c0:	f7ff fff0 	bl	9000a6a4 <__sfp_lock_acquire>
9000a6c4:	6a23      	ldr	r3, [r4, #32]
9000a6c6:	b11b      	cbz	r3, 9000a6d0 <__sinit+0x14>
9000a6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000a6cc:	f7ff bff0 	b.w	9000a6b0 <__sfp_lock_release>
9000a6d0:	4b04      	ldr	r3, [pc, #16]	; (9000a6e4 <__sinit+0x28>)
9000a6d2:	6223      	str	r3, [r4, #32]
9000a6d4:	4b04      	ldr	r3, [pc, #16]	; (9000a6e8 <__sinit+0x2c>)
9000a6d6:	681b      	ldr	r3, [r3, #0]
9000a6d8:	2b00      	cmp	r3, #0
9000a6da:	d1f5      	bne.n	9000a6c8 <__sinit+0xc>
9000a6dc:	f7ff ffc4 	bl	9000a668 <global_stdio_init.part.0>
9000a6e0:	e7f2      	b.n	9000a6c8 <__sinit+0xc>
9000a6e2:	bf00      	nop
9000a6e4:	9000a629 	.word	0x9000a629
9000a6e8:	20014c84 	.word	0x20014c84

9000a6ec <_fwalk_sglue>:
9000a6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000a6f0:	4607      	mov	r7, r0
9000a6f2:	4688      	mov	r8, r1
9000a6f4:	4614      	mov	r4, r2
9000a6f6:	2600      	movs	r6, #0
9000a6f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000a6fc:	f1b9 0901 	subs.w	r9, r9, #1
9000a700:	d505      	bpl.n	9000a70e <_fwalk_sglue+0x22>
9000a702:	6824      	ldr	r4, [r4, #0]
9000a704:	2c00      	cmp	r4, #0
9000a706:	d1f7      	bne.n	9000a6f8 <_fwalk_sglue+0xc>
9000a708:	4630      	mov	r0, r6
9000a70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000a70e:	89ab      	ldrh	r3, [r5, #12]
9000a710:	2b01      	cmp	r3, #1
9000a712:	d907      	bls.n	9000a724 <_fwalk_sglue+0x38>
9000a714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000a718:	3301      	adds	r3, #1
9000a71a:	d003      	beq.n	9000a724 <_fwalk_sglue+0x38>
9000a71c:	4629      	mov	r1, r5
9000a71e:	4638      	mov	r0, r7
9000a720:	47c0      	blx	r8
9000a722:	4306      	orrs	r6, r0
9000a724:	3568      	adds	r5, #104	; 0x68
9000a726:	e7e9      	b.n	9000a6fc <_fwalk_sglue+0x10>

9000a728 <iprintf>:
9000a728:	b40f      	push	{r0, r1, r2, r3}
9000a72a:	b507      	push	{r0, r1, r2, lr}
9000a72c:	4906      	ldr	r1, [pc, #24]	; (9000a748 <iprintf+0x20>)
9000a72e:	ab04      	add	r3, sp, #16
9000a730:	6808      	ldr	r0, [r1, #0]
9000a732:	f853 2b04 	ldr.w	r2, [r3], #4
9000a736:	6881      	ldr	r1, [r0, #8]
9000a738:	9301      	str	r3, [sp, #4]
9000a73a:	f000 fbcb 	bl	9000aed4 <_vfiprintf_r>
9000a73e:	b003      	add	sp, #12
9000a740:	f85d eb04 	ldr.w	lr, [sp], #4
9000a744:	b004      	add	sp, #16
9000a746:	4770      	bx	lr
9000a748:	20000118 	.word	0x20000118

9000a74c <putchar>:
9000a74c:	4b02      	ldr	r3, [pc, #8]	; (9000a758 <putchar+0xc>)
9000a74e:	4601      	mov	r1, r0
9000a750:	6818      	ldr	r0, [r3, #0]
9000a752:	6882      	ldr	r2, [r0, #8]
9000a754:	f000 bf78 	b.w	9000b648 <_putc_r>
9000a758:	20000118 	.word	0x20000118

9000a75c <_puts_r>:
9000a75c:	6a03      	ldr	r3, [r0, #32]
9000a75e:	b570      	push	{r4, r5, r6, lr}
9000a760:	6884      	ldr	r4, [r0, #8]
9000a762:	4605      	mov	r5, r0
9000a764:	460e      	mov	r6, r1
9000a766:	b90b      	cbnz	r3, 9000a76c <_puts_r+0x10>
9000a768:	f7ff ffa8 	bl	9000a6bc <__sinit>
9000a76c:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000a76e:	07db      	lsls	r3, r3, #31
9000a770:	d405      	bmi.n	9000a77e <_puts_r+0x22>
9000a772:	89a3      	ldrh	r3, [r4, #12]
9000a774:	0598      	lsls	r0, r3, #22
9000a776:	d402      	bmi.n	9000a77e <_puts_r+0x22>
9000a778:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000a77a:	f000 f9da 	bl	9000ab32 <__retarget_lock_acquire_recursive>
9000a77e:	89a3      	ldrh	r3, [r4, #12]
9000a780:	0719      	lsls	r1, r3, #28
9000a782:	d513      	bpl.n	9000a7ac <_puts_r+0x50>
9000a784:	6923      	ldr	r3, [r4, #16]
9000a786:	b18b      	cbz	r3, 9000a7ac <_puts_r+0x50>
9000a788:	3e01      	subs	r6, #1
9000a78a:	68a3      	ldr	r3, [r4, #8]
9000a78c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000a790:	3b01      	subs	r3, #1
9000a792:	60a3      	str	r3, [r4, #8]
9000a794:	b9e9      	cbnz	r1, 9000a7d2 <_puts_r+0x76>
9000a796:	2b00      	cmp	r3, #0
9000a798:	da2e      	bge.n	9000a7f8 <_puts_r+0x9c>
9000a79a:	4622      	mov	r2, r4
9000a79c:	210a      	movs	r1, #10
9000a79e:	4628      	mov	r0, r5
9000a7a0:	f000 f89b 	bl	9000a8da <__swbuf_r>
9000a7a4:	3001      	adds	r0, #1
9000a7a6:	d007      	beq.n	9000a7b8 <_puts_r+0x5c>
9000a7a8:	250a      	movs	r5, #10
9000a7aa:	e007      	b.n	9000a7bc <_puts_r+0x60>
9000a7ac:	4621      	mov	r1, r4
9000a7ae:	4628      	mov	r0, r5
9000a7b0:	f000 f8d0 	bl	9000a954 <__swsetup_r>
9000a7b4:	2800      	cmp	r0, #0
9000a7b6:	d0e7      	beq.n	9000a788 <_puts_r+0x2c>
9000a7b8:	f04f 35ff 	mov.w	r5, #4294967295
9000a7bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000a7be:	07da      	lsls	r2, r3, #31
9000a7c0:	d405      	bmi.n	9000a7ce <_puts_r+0x72>
9000a7c2:	89a3      	ldrh	r3, [r4, #12]
9000a7c4:	059b      	lsls	r3, r3, #22
9000a7c6:	d402      	bmi.n	9000a7ce <_puts_r+0x72>
9000a7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000a7ca:	f000 f9b3 	bl	9000ab34 <__retarget_lock_release_recursive>
9000a7ce:	4628      	mov	r0, r5
9000a7d0:	bd70      	pop	{r4, r5, r6, pc}
9000a7d2:	2b00      	cmp	r3, #0
9000a7d4:	da04      	bge.n	9000a7e0 <_puts_r+0x84>
9000a7d6:	69a2      	ldr	r2, [r4, #24]
9000a7d8:	429a      	cmp	r2, r3
9000a7da:	dc06      	bgt.n	9000a7ea <_puts_r+0x8e>
9000a7dc:	290a      	cmp	r1, #10
9000a7de:	d004      	beq.n	9000a7ea <_puts_r+0x8e>
9000a7e0:	6823      	ldr	r3, [r4, #0]
9000a7e2:	1c5a      	adds	r2, r3, #1
9000a7e4:	6022      	str	r2, [r4, #0]
9000a7e6:	7019      	strb	r1, [r3, #0]
9000a7e8:	e7cf      	b.n	9000a78a <_puts_r+0x2e>
9000a7ea:	4622      	mov	r2, r4
9000a7ec:	4628      	mov	r0, r5
9000a7ee:	f000 f874 	bl	9000a8da <__swbuf_r>
9000a7f2:	3001      	adds	r0, #1
9000a7f4:	d1c9      	bne.n	9000a78a <_puts_r+0x2e>
9000a7f6:	e7df      	b.n	9000a7b8 <_puts_r+0x5c>
9000a7f8:	6823      	ldr	r3, [r4, #0]
9000a7fa:	250a      	movs	r5, #10
9000a7fc:	1c5a      	adds	r2, r3, #1
9000a7fe:	6022      	str	r2, [r4, #0]
9000a800:	701d      	strb	r5, [r3, #0]
9000a802:	e7db      	b.n	9000a7bc <_puts_r+0x60>

9000a804 <puts>:
9000a804:	4b02      	ldr	r3, [pc, #8]	; (9000a810 <puts+0xc>)
9000a806:	4601      	mov	r1, r0
9000a808:	6818      	ldr	r0, [r3, #0]
9000a80a:	f7ff bfa7 	b.w	9000a75c <_puts_r>
9000a80e:	bf00      	nop
9000a810:	20000118 	.word	0x20000118

9000a814 <siprintf>:
9000a814:	b40e      	push	{r1, r2, r3}
9000a816:	b500      	push	{lr}
9000a818:	b09c      	sub	sp, #112	; 0x70
9000a81a:	ab1d      	add	r3, sp, #116	; 0x74
9000a81c:	9002      	str	r0, [sp, #8]
9000a81e:	9006      	str	r0, [sp, #24]
9000a820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
9000a824:	4809      	ldr	r0, [pc, #36]	; (9000a84c <siprintf+0x38>)
9000a826:	9107      	str	r1, [sp, #28]
9000a828:	9104      	str	r1, [sp, #16]
9000a82a:	4909      	ldr	r1, [pc, #36]	; (9000a850 <siprintf+0x3c>)
9000a82c:	f853 2b04 	ldr.w	r2, [r3], #4
9000a830:	9105      	str	r1, [sp, #20]
9000a832:	6800      	ldr	r0, [r0, #0]
9000a834:	9301      	str	r3, [sp, #4]
9000a836:	a902      	add	r1, sp, #8
9000a838:	f000 fa24 	bl	9000ac84 <_svfiprintf_r>
9000a83c:	9b02      	ldr	r3, [sp, #8]
9000a83e:	2200      	movs	r2, #0
9000a840:	701a      	strb	r2, [r3, #0]
9000a842:	b01c      	add	sp, #112	; 0x70
9000a844:	f85d eb04 	ldr.w	lr, [sp], #4
9000a848:	b003      	add	sp, #12
9000a84a:	4770      	bx	lr
9000a84c:	20000118 	.word	0x20000118
9000a850:	ffff0208 	.word	0xffff0208

9000a854 <__sread>:
9000a854:	b510      	push	{r4, lr}
9000a856:	460c      	mov	r4, r1
9000a858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000a85c:	f000 f910 	bl	9000aa80 <_read_r>
9000a860:	2800      	cmp	r0, #0
9000a862:	bfab      	itete	ge
9000a864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
9000a866:	89a3      	ldrhlt	r3, [r4, #12]
9000a868:	181b      	addge	r3, r3, r0
9000a86a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9000a86e:	bfac      	ite	ge
9000a870:	6563      	strge	r3, [r4, #84]	; 0x54
9000a872:	81a3      	strhlt	r3, [r4, #12]
9000a874:	bd10      	pop	{r4, pc}

9000a876 <__swrite>:
9000a876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000a87a:	461f      	mov	r7, r3
9000a87c:	898b      	ldrh	r3, [r1, #12]
9000a87e:	05db      	lsls	r3, r3, #23
9000a880:	4605      	mov	r5, r0
9000a882:	460c      	mov	r4, r1
9000a884:	4616      	mov	r6, r2
9000a886:	d505      	bpl.n	9000a894 <__swrite+0x1e>
9000a888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000a88c:	2302      	movs	r3, #2
9000a88e:	2200      	movs	r2, #0
9000a890:	f000 f8e4 	bl	9000aa5c <_lseek_r>
9000a894:	89a3      	ldrh	r3, [r4, #12]
9000a896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000a89a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000a89e:	81a3      	strh	r3, [r4, #12]
9000a8a0:	4632      	mov	r2, r6
9000a8a2:	463b      	mov	r3, r7
9000a8a4:	4628      	mov	r0, r5
9000a8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000a8aa:	f000 b90b 	b.w	9000aac4 <_write_r>

9000a8ae <__sseek>:
9000a8ae:	b510      	push	{r4, lr}
9000a8b0:	460c      	mov	r4, r1
9000a8b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000a8b6:	f000 f8d1 	bl	9000aa5c <_lseek_r>
9000a8ba:	1c43      	adds	r3, r0, #1
9000a8bc:	89a3      	ldrh	r3, [r4, #12]
9000a8be:	bf15      	itete	ne
9000a8c0:	6560      	strne	r0, [r4, #84]	; 0x54
9000a8c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9000a8c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9000a8ca:	81a3      	strheq	r3, [r4, #12]
9000a8cc:	bf18      	it	ne
9000a8ce:	81a3      	strhne	r3, [r4, #12]
9000a8d0:	bd10      	pop	{r4, pc}

9000a8d2 <__sclose>:
9000a8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000a8d6:	f000 b8b1 	b.w	9000aa3c <_close_r>

9000a8da <__swbuf_r>:
9000a8da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000a8dc:	460e      	mov	r6, r1
9000a8de:	4614      	mov	r4, r2
9000a8e0:	4605      	mov	r5, r0
9000a8e2:	b118      	cbz	r0, 9000a8ec <__swbuf_r+0x12>
9000a8e4:	6a03      	ldr	r3, [r0, #32]
9000a8e6:	b90b      	cbnz	r3, 9000a8ec <__swbuf_r+0x12>
9000a8e8:	f7ff fee8 	bl	9000a6bc <__sinit>
9000a8ec:	69a3      	ldr	r3, [r4, #24]
9000a8ee:	60a3      	str	r3, [r4, #8]
9000a8f0:	89a3      	ldrh	r3, [r4, #12]
9000a8f2:	071a      	lsls	r2, r3, #28
9000a8f4:	d525      	bpl.n	9000a942 <__swbuf_r+0x68>
9000a8f6:	6923      	ldr	r3, [r4, #16]
9000a8f8:	b31b      	cbz	r3, 9000a942 <__swbuf_r+0x68>
9000a8fa:	6823      	ldr	r3, [r4, #0]
9000a8fc:	6922      	ldr	r2, [r4, #16]
9000a8fe:	1a98      	subs	r0, r3, r2
9000a900:	6963      	ldr	r3, [r4, #20]
9000a902:	b2f6      	uxtb	r6, r6
9000a904:	4283      	cmp	r3, r0
9000a906:	4637      	mov	r7, r6
9000a908:	dc04      	bgt.n	9000a914 <__swbuf_r+0x3a>
9000a90a:	4621      	mov	r1, r4
9000a90c:	4628      	mov	r0, r5
9000a90e:	f000 fe11 	bl	9000b534 <_fflush_r>
9000a912:	b9e0      	cbnz	r0, 9000a94e <__swbuf_r+0x74>
9000a914:	68a3      	ldr	r3, [r4, #8]
9000a916:	3b01      	subs	r3, #1
9000a918:	60a3      	str	r3, [r4, #8]
9000a91a:	6823      	ldr	r3, [r4, #0]
9000a91c:	1c5a      	adds	r2, r3, #1
9000a91e:	6022      	str	r2, [r4, #0]
9000a920:	701e      	strb	r6, [r3, #0]
9000a922:	6962      	ldr	r2, [r4, #20]
9000a924:	1c43      	adds	r3, r0, #1
9000a926:	429a      	cmp	r2, r3
9000a928:	d004      	beq.n	9000a934 <__swbuf_r+0x5a>
9000a92a:	89a3      	ldrh	r3, [r4, #12]
9000a92c:	07db      	lsls	r3, r3, #31
9000a92e:	d506      	bpl.n	9000a93e <__swbuf_r+0x64>
9000a930:	2e0a      	cmp	r6, #10
9000a932:	d104      	bne.n	9000a93e <__swbuf_r+0x64>
9000a934:	4621      	mov	r1, r4
9000a936:	4628      	mov	r0, r5
9000a938:	f000 fdfc 	bl	9000b534 <_fflush_r>
9000a93c:	b938      	cbnz	r0, 9000a94e <__swbuf_r+0x74>
9000a93e:	4638      	mov	r0, r7
9000a940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000a942:	4621      	mov	r1, r4
9000a944:	4628      	mov	r0, r5
9000a946:	f000 f805 	bl	9000a954 <__swsetup_r>
9000a94a:	2800      	cmp	r0, #0
9000a94c:	d0d5      	beq.n	9000a8fa <__swbuf_r+0x20>
9000a94e:	f04f 37ff 	mov.w	r7, #4294967295
9000a952:	e7f4      	b.n	9000a93e <__swbuf_r+0x64>

9000a954 <__swsetup_r>:
9000a954:	b538      	push	{r3, r4, r5, lr}
9000a956:	4b2a      	ldr	r3, [pc, #168]	; (9000aa00 <__swsetup_r+0xac>)
9000a958:	4605      	mov	r5, r0
9000a95a:	6818      	ldr	r0, [r3, #0]
9000a95c:	460c      	mov	r4, r1
9000a95e:	b118      	cbz	r0, 9000a968 <__swsetup_r+0x14>
9000a960:	6a03      	ldr	r3, [r0, #32]
9000a962:	b90b      	cbnz	r3, 9000a968 <__swsetup_r+0x14>
9000a964:	f7ff feaa 	bl	9000a6bc <__sinit>
9000a968:	89a3      	ldrh	r3, [r4, #12]
9000a96a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000a96e:	0718      	lsls	r0, r3, #28
9000a970:	d422      	bmi.n	9000a9b8 <__swsetup_r+0x64>
9000a972:	06d9      	lsls	r1, r3, #27
9000a974:	d407      	bmi.n	9000a986 <__swsetup_r+0x32>
9000a976:	2309      	movs	r3, #9
9000a978:	602b      	str	r3, [r5, #0]
9000a97a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
9000a97e:	81a3      	strh	r3, [r4, #12]
9000a980:	f04f 30ff 	mov.w	r0, #4294967295
9000a984:	e034      	b.n	9000a9f0 <__swsetup_r+0x9c>
9000a986:	0758      	lsls	r0, r3, #29
9000a988:	d512      	bpl.n	9000a9b0 <__swsetup_r+0x5c>
9000a98a:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000a98c:	b141      	cbz	r1, 9000a9a0 <__swsetup_r+0x4c>
9000a98e:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000a992:	4299      	cmp	r1, r3
9000a994:	d002      	beq.n	9000a99c <__swsetup_r+0x48>
9000a996:	4628      	mov	r0, r5
9000a998:	f000 f8ce 	bl	9000ab38 <_free_r>
9000a99c:	2300      	movs	r3, #0
9000a99e:	6363      	str	r3, [r4, #52]	; 0x34
9000a9a0:	89a3      	ldrh	r3, [r4, #12]
9000a9a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
9000a9a6:	81a3      	strh	r3, [r4, #12]
9000a9a8:	2300      	movs	r3, #0
9000a9aa:	6063      	str	r3, [r4, #4]
9000a9ac:	6923      	ldr	r3, [r4, #16]
9000a9ae:	6023      	str	r3, [r4, #0]
9000a9b0:	89a3      	ldrh	r3, [r4, #12]
9000a9b2:	f043 0308 	orr.w	r3, r3, #8
9000a9b6:	81a3      	strh	r3, [r4, #12]
9000a9b8:	6923      	ldr	r3, [r4, #16]
9000a9ba:	b94b      	cbnz	r3, 9000a9d0 <__swsetup_r+0x7c>
9000a9bc:	89a3      	ldrh	r3, [r4, #12]
9000a9be:	f403 7320 	and.w	r3, r3, #640	; 0x280
9000a9c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000a9c6:	d003      	beq.n	9000a9d0 <__swsetup_r+0x7c>
9000a9c8:	4621      	mov	r1, r4
9000a9ca:	4628      	mov	r0, r5
9000a9cc:	f000 fe00 	bl	9000b5d0 <__smakebuf_r>
9000a9d0:	89a0      	ldrh	r0, [r4, #12]
9000a9d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000a9d6:	f010 0301 	ands.w	r3, r0, #1
9000a9da:	d00a      	beq.n	9000a9f2 <__swsetup_r+0x9e>
9000a9dc:	2300      	movs	r3, #0
9000a9de:	60a3      	str	r3, [r4, #8]
9000a9e0:	6963      	ldr	r3, [r4, #20]
9000a9e2:	425b      	negs	r3, r3
9000a9e4:	61a3      	str	r3, [r4, #24]
9000a9e6:	6923      	ldr	r3, [r4, #16]
9000a9e8:	b943      	cbnz	r3, 9000a9fc <__swsetup_r+0xa8>
9000a9ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
9000a9ee:	d1c4      	bne.n	9000a97a <__swsetup_r+0x26>
9000a9f0:	bd38      	pop	{r3, r4, r5, pc}
9000a9f2:	0781      	lsls	r1, r0, #30
9000a9f4:	bf58      	it	pl
9000a9f6:	6963      	ldrpl	r3, [r4, #20]
9000a9f8:	60a3      	str	r3, [r4, #8]
9000a9fa:	e7f4      	b.n	9000a9e6 <__swsetup_r+0x92>
9000a9fc:	2000      	movs	r0, #0
9000a9fe:	e7f7      	b.n	9000a9f0 <__swsetup_r+0x9c>
9000aa00:	20000118 	.word	0x20000118

9000aa04 <memset>:
9000aa04:	4402      	add	r2, r0
9000aa06:	4603      	mov	r3, r0
9000aa08:	4293      	cmp	r3, r2
9000aa0a:	d100      	bne.n	9000aa0e <memset+0xa>
9000aa0c:	4770      	bx	lr
9000aa0e:	f803 1b01 	strb.w	r1, [r3], #1
9000aa12:	e7f9      	b.n	9000aa08 <memset+0x4>

9000aa14 <strncpy>:
9000aa14:	b510      	push	{r4, lr}
9000aa16:	3901      	subs	r1, #1
9000aa18:	4603      	mov	r3, r0
9000aa1a:	b132      	cbz	r2, 9000aa2a <strncpy+0x16>
9000aa1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
9000aa20:	f803 4b01 	strb.w	r4, [r3], #1
9000aa24:	3a01      	subs	r2, #1
9000aa26:	2c00      	cmp	r4, #0
9000aa28:	d1f7      	bne.n	9000aa1a <strncpy+0x6>
9000aa2a:	441a      	add	r2, r3
9000aa2c:	2100      	movs	r1, #0
9000aa2e:	4293      	cmp	r3, r2
9000aa30:	d100      	bne.n	9000aa34 <strncpy+0x20>
9000aa32:	bd10      	pop	{r4, pc}
9000aa34:	f803 1b01 	strb.w	r1, [r3], #1
9000aa38:	e7f9      	b.n	9000aa2e <strncpy+0x1a>
	...

9000aa3c <_close_r>:
9000aa3c:	b538      	push	{r3, r4, r5, lr}
9000aa3e:	4d06      	ldr	r5, [pc, #24]	; (9000aa58 <_close_r+0x1c>)
9000aa40:	2300      	movs	r3, #0
9000aa42:	4604      	mov	r4, r0
9000aa44:	4608      	mov	r0, r1
9000aa46:	602b      	str	r3, [r5, #0]
9000aa48:	f000 feb4 	bl	9000b7b4 <_close>
9000aa4c:	1c43      	adds	r3, r0, #1
9000aa4e:	d102      	bne.n	9000aa56 <_close_r+0x1a>
9000aa50:	682b      	ldr	r3, [r5, #0]
9000aa52:	b103      	cbz	r3, 9000aa56 <_close_r+0x1a>
9000aa54:	6023      	str	r3, [r4, #0]
9000aa56:	bd38      	pop	{r3, r4, r5, pc}
9000aa58:	20014c88 	.word	0x20014c88

9000aa5c <_lseek_r>:
9000aa5c:	b538      	push	{r3, r4, r5, lr}
9000aa5e:	4d07      	ldr	r5, [pc, #28]	; (9000aa7c <_lseek_r+0x20>)
9000aa60:	4604      	mov	r4, r0
9000aa62:	4608      	mov	r0, r1
9000aa64:	4611      	mov	r1, r2
9000aa66:	2200      	movs	r2, #0
9000aa68:	602a      	str	r2, [r5, #0]
9000aa6a:	461a      	mov	r2, r3
9000aa6c:	f000 feba 	bl	9000b7e4 <_lseek>
9000aa70:	1c43      	adds	r3, r0, #1
9000aa72:	d102      	bne.n	9000aa7a <_lseek_r+0x1e>
9000aa74:	682b      	ldr	r3, [r5, #0]
9000aa76:	b103      	cbz	r3, 9000aa7a <_lseek_r+0x1e>
9000aa78:	6023      	str	r3, [r4, #0]
9000aa7a:	bd38      	pop	{r3, r4, r5, pc}
9000aa7c:	20014c88 	.word	0x20014c88

9000aa80 <_read_r>:
9000aa80:	b538      	push	{r3, r4, r5, lr}
9000aa82:	4d07      	ldr	r5, [pc, #28]	; (9000aaa0 <_read_r+0x20>)
9000aa84:	4604      	mov	r4, r0
9000aa86:	4608      	mov	r0, r1
9000aa88:	4611      	mov	r1, r2
9000aa8a:	2200      	movs	r2, #0
9000aa8c:	602a      	str	r2, [r5, #0]
9000aa8e:	461a      	mov	r2, r3
9000aa90:	f000 feb0 	bl	9000b7f4 <_read>
9000aa94:	1c43      	adds	r3, r0, #1
9000aa96:	d102      	bne.n	9000aa9e <_read_r+0x1e>
9000aa98:	682b      	ldr	r3, [r5, #0]
9000aa9a:	b103      	cbz	r3, 9000aa9e <_read_r+0x1e>
9000aa9c:	6023      	str	r3, [r4, #0]
9000aa9e:	bd38      	pop	{r3, r4, r5, pc}
9000aaa0:	20014c88 	.word	0x20014c88

9000aaa4 <_sbrk_r>:
9000aaa4:	b538      	push	{r3, r4, r5, lr}
9000aaa6:	4d06      	ldr	r5, [pc, #24]	; (9000aac0 <_sbrk_r+0x1c>)
9000aaa8:	2300      	movs	r3, #0
9000aaaa:	4604      	mov	r4, r0
9000aaac:	4608      	mov	r0, r1
9000aaae:	602b      	str	r3, [r5, #0]
9000aab0:	f000 fea8 	bl	9000b804 <_sbrk>
9000aab4:	1c43      	adds	r3, r0, #1
9000aab6:	d102      	bne.n	9000aabe <_sbrk_r+0x1a>
9000aab8:	682b      	ldr	r3, [r5, #0]
9000aaba:	b103      	cbz	r3, 9000aabe <_sbrk_r+0x1a>
9000aabc:	6023      	str	r3, [r4, #0]
9000aabe:	bd38      	pop	{r3, r4, r5, pc}
9000aac0:	20014c88 	.word	0x20014c88

9000aac4 <_write_r>:
9000aac4:	b538      	push	{r3, r4, r5, lr}
9000aac6:	4d07      	ldr	r5, [pc, #28]	; (9000aae4 <_write_r+0x20>)
9000aac8:	4604      	mov	r4, r0
9000aaca:	4608      	mov	r0, r1
9000aacc:	4611      	mov	r1, r2
9000aace:	2200      	movs	r2, #0
9000aad0:	602a      	str	r2, [r5, #0]
9000aad2:	461a      	mov	r2, r3
9000aad4:	f000 fea4 	bl	9000b820 <_write>
9000aad8:	1c43      	adds	r3, r0, #1
9000aada:	d102      	bne.n	9000aae2 <_write_r+0x1e>
9000aadc:	682b      	ldr	r3, [r5, #0]
9000aade:	b103      	cbz	r3, 9000aae2 <_write_r+0x1e>
9000aae0:	6023      	str	r3, [r4, #0]
9000aae2:	bd38      	pop	{r3, r4, r5, pc}
9000aae4:	20014c88 	.word	0x20014c88

9000aae8 <__libc_init_array>:
9000aae8:	b570      	push	{r4, r5, r6, lr}
9000aaea:	4d0d      	ldr	r5, [pc, #52]	; (9000ab20 <__libc_init_array+0x38>)
9000aaec:	4c0d      	ldr	r4, [pc, #52]	; (9000ab24 <__libc_init_array+0x3c>)
9000aaee:	1b64      	subs	r4, r4, r5
9000aaf0:	10a4      	asrs	r4, r4, #2
9000aaf2:	2600      	movs	r6, #0
9000aaf4:	42a6      	cmp	r6, r4
9000aaf6:	d109      	bne.n	9000ab0c <__libc_init_array+0x24>
9000aaf8:	4d0b      	ldr	r5, [pc, #44]	; (9000ab28 <__libc_init_array+0x40>)
9000aafa:	4c0c      	ldr	r4, [pc, #48]	; (9000ab2c <__libc_init_array+0x44>)
9000aafc:	f000 fe98 	bl	9000b830 <_init>
9000ab00:	1b64      	subs	r4, r4, r5
9000ab02:	10a4      	asrs	r4, r4, #2
9000ab04:	2600      	movs	r6, #0
9000ab06:	42a6      	cmp	r6, r4
9000ab08:	d105      	bne.n	9000ab16 <__libc_init_array+0x2e>
9000ab0a:	bd70      	pop	{r4, r5, r6, pc}
9000ab0c:	f855 3b04 	ldr.w	r3, [r5], #4
9000ab10:	4798      	blx	r3
9000ab12:	3601      	adds	r6, #1
9000ab14:	e7ee      	b.n	9000aaf4 <__libc_init_array+0xc>
9000ab16:	f855 3b04 	ldr.w	r3, [r5], #4
9000ab1a:	4798      	blx	r3
9000ab1c:	3601      	adds	r6, #1
9000ab1e:	e7f2      	b.n	9000ab06 <__libc_init_array+0x1e>
9000ab20:	9001087c 	.word	0x9001087c
9000ab24:	9001087c 	.word	0x9001087c
9000ab28:	9001087c 	.word	0x9001087c
9000ab2c:	90010880 	.word	0x90010880

9000ab30 <__retarget_lock_init_recursive>:
9000ab30:	4770      	bx	lr

9000ab32 <__retarget_lock_acquire_recursive>:
9000ab32:	4770      	bx	lr

9000ab34 <__retarget_lock_release_recursive>:
9000ab34:	4770      	bx	lr
	...

9000ab38 <_free_r>:
9000ab38:	b537      	push	{r0, r1, r2, r4, r5, lr}
9000ab3a:	2900      	cmp	r1, #0
9000ab3c:	d044      	beq.n	9000abc8 <_free_r+0x90>
9000ab3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000ab42:	9001      	str	r0, [sp, #4]
9000ab44:	2b00      	cmp	r3, #0
9000ab46:	f1a1 0404 	sub.w	r4, r1, #4
9000ab4a:	bfb8      	it	lt
9000ab4c:	18e4      	addlt	r4, r4, r3
9000ab4e:	f7ff fd1d 	bl	9000a58c <__malloc_lock>
9000ab52:	4a1e      	ldr	r2, [pc, #120]	; (9000abcc <_free_r+0x94>)
9000ab54:	9801      	ldr	r0, [sp, #4]
9000ab56:	6813      	ldr	r3, [r2, #0]
9000ab58:	b933      	cbnz	r3, 9000ab68 <_free_r+0x30>
9000ab5a:	6063      	str	r3, [r4, #4]
9000ab5c:	6014      	str	r4, [r2, #0]
9000ab5e:	b003      	add	sp, #12
9000ab60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9000ab64:	f7ff bd18 	b.w	9000a598 <__malloc_unlock>
9000ab68:	42a3      	cmp	r3, r4
9000ab6a:	d908      	bls.n	9000ab7e <_free_r+0x46>
9000ab6c:	6825      	ldr	r5, [r4, #0]
9000ab6e:	1961      	adds	r1, r4, r5
9000ab70:	428b      	cmp	r3, r1
9000ab72:	bf01      	itttt	eq
9000ab74:	6819      	ldreq	r1, [r3, #0]
9000ab76:	685b      	ldreq	r3, [r3, #4]
9000ab78:	1949      	addeq	r1, r1, r5
9000ab7a:	6021      	streq	r1, [r4, #0]
9000ab7c:	e7ed      	b.n	9000ab5a <_free_r+0x22>
9000ab7e:	461a      	mov	r2, r3
9000ab80:	685b      	ldr	r3, [r3, #4]
9000ab82:	b10b      	cbz	r3, 9000ab88 <_free_r+0x50>
9000ab84:	42a3      	cmp	r3, r4
9000ab86:	d9fa      	bls.n	9000ab7e <_free_r+0x46>
9000ab88:	6811      	ldr	r1, [r2, #0]
9000ab8a:	1855      	adds	r5, r2, r1
9000ab8c:	42a5      	cmp	r5, r4
9000ab8e:	d10b      	bne.n	9000aba8 <_free_r+0x70>
9000ab90:	6824      	ldr	r4, [r4, #0]
9000ab92:	4421      	add	r1, r4
9000ab94:	1854      	adds	r4, r2, r1
9000ab96:	42a3      	cmp	r3, r4
9000ab98:	6011      	str	r1, [r2, #0]
9000ab9a:	d1e0      	bne.n	9000ab5e <_free_r+0x26>
9000ab9c:	681c      	ldr	r4, [r3, #0]
9000ab9e:	685b      	ldr	r3, [r3, #4]
9000aba0:	6053      	str	r3, [r2, #4]
9000aba2:	440c      	add	r4, r1
9000aba4:	6014      	str	r4, [r2, #0]
9000aba6:	e7da      	b.n	9000ab5e <_free_r+0x26>
9000aba8:	d902      	bls.n	9000abb0 <_free_r+0x78>
9000abaa:	230c      	movs	r3, #12
9000abac:	6003      	str	r3, [r0, #0]
9000abae:	e7d6      	b.n	9000ab5e <_free_r+0x26>
9000abb0:	6825      	ldr	r5, [r4, #0]
9000abb2:	1961      	adds	r1, r4, r5
9000abb4:	428b      	cmp	r3, r1
9000abb6:	bf04      	itt	eq
9000abb8:	6819      	ldreq	r1, [r3, #0]
9000abba:	685b      	ldreq	r3, [r3, #4]
9000abbc:	6063      	str	r3, [r4, #4]
9000abbe:	bf04      	itt	eq
9000abc0:	1949      	addeq	r1, r1, r5
9000abc2:	6021      	streq	r1, [r4, #0]
9000abc4:	6054      	str	r4, [r2, #4]
9000abc6:	e7ca      	b.n	9000ab5e <_free_r+0x26>
9000abc8:	b003      	add	sp, #12
9000abca:	bd30      	pop	{r4, r5, pc}
9000abcc:	20014b44 	.word	0x20014b44

9000abd0 <__ssputs_r>:
9000abd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000abd4:	688e      	ldr	r6, [r1, #8]
9000abd6:	461f      	mov	r7, r3
9000abd8:	42be      	cmp	r6, r7
9000abda:	680b      	ldr	r3, [r1, #0]
9000abdc:	4682      	mov	sl, r0
9000abde:	460c      	mov	r4, r1
9000abe0:	4690      	mov	r8, r2
9000abe2:	d82c      	bhi.n	9000ac3e <__ssputs_r+0x6e>
9000abe4:	898a      	ldrh	r2, [r1, #12]
9000abe6:	f412 6f90 	tst.w	r2, #1152	; 0x480
9000abea:	d026      	beq.n	9000ac3a <__ssputs_r+0x6a>
9000abec:	6965      	ldr	r5, [r4, #20]
9000abee:	6909      	ldr	r1, [r1, #16]
9000abf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000abf4:	eba3 0901 	sub.w	r9, r3, r1
9000abf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000abfc:	1c7b      	adds	r3, r7, #1
9000abfe:	444b      	add	r3, r9
9000ac00:	106d      	asrs	r5, r5, #1
9000ac02:	429d      	cmp	r5, r3
9000ac04:	bf38      	it	cc
9000ac06:	461d      	movcc	r5, r3
9000ac08:	0553      	lsls	r3, r2, #21
9000ac0a:	d527      	bpl.n	9000ac5c <__ssputs_r+0x8c>
9000ac0c:	4629      	mov	r1, r5
9000ac0e:	f7ff fc3d 	bl	9000a48c <_malloc_r>
9000ac12:	4606      	mov	r6, r0
9000ac14:	b360      	cbz	r0, 9000ac70 <__ssputs_r+0xa0>
9000ac16:	6921      	ldr	r1, [r4, #16]
9000ac18:	464a      	mov	r2, r9
9000ac1a:	f000 fd85 	bl	9000b728 <memcpy>
9000ac1e:	89a3      	ldrh	r3, [r4, #12]
9000ac20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
9000ac24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000ac28:	81a3      	strh	r3, [r4, #12]
9000ac2a:	6126      	str	r6, [r4, #16]
9000ac2c:	6165      	str	r5, [r4, #20]
9000ac2e:	444e      	add	r6, r9
9000ac30:	eba5 0509 	sub.w	r5, r5, r9
9000ac34:	6026      	str	r6, [r4, #0]
9000ac36:	60a5      	str	r5, [r4, #8]
9000ac38:	463e      	mov	r6, r7
9000ac3a:	42be      	cmp	r6, r7
9000ac3c:	d900      	bls.n	9000ac40 <__ssputs_r+0x70>
9000ac3e:	463e      	mov	r6, r7
9000ac40:	6820      	ldr	r0, [r4, #0]
9000ac42:	4632      	mov	r2, r6
9000ac44:	4641      	mov	r1, r8
9000ac46:	f000 fd33 	bl	9000b6b0 <memmove>
9000ac4a:	68a3      	ldr	r3, [r4, #8]
9000ac4c:	1b9b      	subs	r3, r3, r6
9000ac4e:	60a3      	str	r3, [r4, #8]
9000ac50:	6823      	ldr	r3, [r4, #0]
9000ac52:	4433      	add	r3, r6
9000ac54:	6023      	str	r3, [r4, #0]
9000ac56:	2000      	movs	r0, #0
9000ac58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000ac5c:	462a      	mov	r2, r5
9000ac5e:	f000 fd71 	bl	9000b744 <_realloc_r>
9000ac62:	4606      	mov	r6, r0
9000ac64:	2800      	cmp	r0, #0
9000ac66:	d1e0      	bne.n	9000ac2a <__ssputs_r+0x5a>
9000ac68:	6921      	ldr	r1, [r4, #16]
9000ac6a:	4650      	mov	r0, sl
9000ac6c:	f7ff ff64 	bl	9000ab38 <_free_r>
9000ac70:	230c      	movs	r3, #12
9000ac72:	f8ca 3000 	str.w	r3, [sl]
9000ac76:	89a3      	ldrh	r3, [r4, #12]
9000ac78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000ac7c:	81a3      	strh	r3, [r4, #12]
9000ac7e:	f04f 30ff 	mov.w	r0, #4294967295
9000ac82:	e7e9      	b.n	9000ac58 <__ssputs_r+0x88>

9000ac84 <_svfiprintf_r>:
9000ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ac88:	4698      	mov	r8, r3
9000ac8a:	898b      	ldrh	r3, [r1, #12]
9000ac8c:	061b      	lsls	r3, r3, #24
9000ac8e:	b09d      	sub	sp, #116	; 0x74
9000ac90:	4607      	mov	r7, r0
9000ac92:	460d      	mov	r5, r1
9000ac94:	4614      	mov	r4, r2
9000ac96:	d50e      	bpl.n	9000acb6 <_svfiprintf_r+0x32>
9000ac98:	690b      	ldr	r3, [r1, #16]
9000ac9a:	b963      	cbnz	r3, 9000acb6 <_svfiprintf_r+0x32>
9000ac9c:	2140      	movs	r1, #64	; 0x40
9000ac9e:	f7ff fbf5 	bl	9000a48c <_malloc_r>
9000aca2:	6028      	str	r0, [r5, #0]
9000aca4:	6128      	str	r0, [r5, #16]
9000aca6:	b920      	cbnz	r0, 9000acb2 <_svfiprintf_r+0x2e>
9000aca8:	230c      	movs	r3, #12
9000acaa:	603b      	str	r3, [r7, #0]
9000acac:	f04f 30ff 	mov.w	r0, #4294967295
9000acb0:	e0d0      	b.n	9000ae54 <_svfiprintf_r+0x1d0>
9000acb2:	2340      	movs	r3, #64	; 0x40
9000acb4:	616b      	str	r3, [r5, #20]
9000acb6:	2300      	movs	r3, #0
9000acb8:	9309      	str	r3, [sp, #36]	; 0x24
9000acba:	2320      	movs	r3, #32
9000acbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000acc0:	f8cd 800c 	str.w	r8, [sp, #12]
9000acc4:	2330      	movs	r3, #48	; 0x30
9000acc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 9000ae6c <_svfiprintf_r+0x1e8>
9000acca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000acce:	f04f 0901 	mov.w	r9, #1
9000acd2:	4623      	mov	r3, r4
9000acd4:	469a      	mov	sl, r3
9000acd6:	f813 2b01 	ldrb.w	r2, [r3], #1
9000acda:	b10a      	cbz	r2, 9000ace0 <_svfiprintf_r+0x5c>
9000acdc:	2a25      	cmp	r2, #37	; 0x25
9000acde:	d1f9      	bne.n	9000acd4 <_svfiprintf_r+0x50>
9000ace0:	ebba 0b04 	subs.w	fp, sl, r4
9000ace4:	d00b      	beq.n	9000acfe <_svfiprintf_r+0x7a>
9000ace6:	465b      	mov	r3, fp
9000ace8:	4622      	mov	r2, r4
9000acea:	4629      	mov	r1, r5
9000acec:	4638      	mov	r0, r7
9000acee:	f7ff ff6f 	bl	9000abd0 <__ssputs_r>
9000acf2:	3001      	adds	r0, #1
9000acf4:	f000 80a9 	beq.w	9000ae4a <_svfiprintf_r+0x1c6>
9000acf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000acfa:	445a      	add	r2, fp
9000acfc:	9209      	str	r2, [sp, #36]	; 0x24
9000acfe:	f89a 3000 	ldrb.w	r3, [sl]
9000ad02:	2b00      	cmp	r3, #0
9000ad04:	f000 80a1 	beq.w	9000ae4a <_svfiprintf_r+0x1c6>
9000ad08:	2300      	movs	r3, #0
9000ad0a:	f04f 32ff 	mov.w	r2, #4294967295
9000ad0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000ad12:	f10a 0a01 	add.w	sl, sl, #1
9000ad16:	9304      	str	r3, [sp, #16]
9000ad18:	9307      	str	r3, [sp, #28]
9000ad1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000ad1e:	931a      	str	r3, [sp, #104]	; 0x68
9000ad20:	4654      	mov	r4, sl
9000ad22:	2205      	movs	r2, #5
9000ad24:	f814 1b01 	ldrb.w	r1, [r4], #1
9000ad28:	4850      	ldr	r0, [pc, #320]	; (9000ae6c <_svfiprintf_r+0x1e8>)
9000ad2a:	f7f5 fa71 	bl	90000210 <memchr>
9000ad2e:	9a04      	ldr	r2, [sp, #16]
9000ad30:	b9d8      	cbnz	r0, 9000ad6a <_svfiprintf_r+0xe6>
9000ad32:	06d0      	lsls	r0, r2, #27
9000ad34:	bf44      	itt	mi
9000ad36:	2320      	movmi	r3, #32
9000ad38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000ad3c:	0711      	lsls	r1, r2, #28
9000ad3e:	bf44      	itt	mi
9000ad40:	232b      	movmi	r3, #43	; 0x2b
9000ad42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000ad46:	f89a 3000 	ldrb.w	r3, [sl]
9000ad4a:	2b2a      	cmp	r3, #42	; 0x2a
9000ad4c:	d015      	beq.n	9000ad7a <_svfiprintf_r+0xf6>
9000ad4e:	9a07      	ldr	r2, [sp, #28]
9000ad50:	4654      	mov	r4, sl
9000ad52:	2000      	movs	r0, #0
9000ad54:	f04f 0c0a 	mov.w	ip, #10
9000ad58:	4621      	mov	r1, r4
9000ad5a:	f811 3b01 	ldrb.w	r3, [r1], #1
9000ad5e:	3b30      	subs	r3, #48	; 0x30
9000ad60:	2b09      	cmp	r3, #9
9000ad62:	d94d      	bls.n	9000ae00 <_svfiprintf_r+0x17c>
9000ad64:	b1b0      	cbz	r0, 9000ad94 <_svfiprintf_r+0x110>
9000ad66:	9207      	str	r2, [sp, #28]
9000ad68:	e014      	b.n	9000ad94 <_svfiprintf_r+0x110>
9000ad6a:	eba0 0308 	sub.w	r3, r0, r8
9000ad6e:	fa09 f303 	lsl.w	r3, r9, r3
9000ad72:	4313      	orrs	r3, r2
9000ad74:	9304      	str	r3, [sp, #16]
9000ad76:	46a2      	mov	sl, r4
9000ad78:	e7d2      	b.n	9000ad20 <_svfiprintf_r+0x9c>
9000ad7a:	9b03      	ldr	r3, [sp, #12]
9000ad7c:	1d19      	adds	r1, r3, #4
9000ad7e:	681b      	ldr	r3, [r3, #0]
9000ad80:	9103      	str	r1, [sp, #12]
9000ad82:	2b00      	cmp	r3, #0
9000ad84:	bfbb      	ittet	lt
9000ad86:	425b      	neglt	r3, r3
9000ad88:	f042 0202 	orrlt.w	r2, r2, #2
9000ad8c:	9307      	strge	r3, [sp, #28]
9000ad8e:	9307      	strlt	r3, [sp, #28]
9000ad90:	bfb8      	it	lt
9000ad92:	9204      	strlt	r2, [sp, #16]
9000ad94:	7823      	ldrb	r3, [r4, #0]
9000ad96:	2b2e      	cmp	r3, #46	; 0x2e
9000ad98:	d10c      	bne.n	9000adb4 <_svfiprintf_r+0x130>
9000ad9a:	7863      	ldrb	r3, [r4, #1]
9000ad9c:	2b2a      	cmp	r3, #42	; 0x2a
9000ad9e:	d134      	bne.n	9000ae0a <_svfiprintf_r+0x186>
9000ada0:	9b03      	ldr	r3, [sp, #12]
9000ada2:	1d1a      	adds	r2, r3, #4
9000ada4:	681b      	ldr	r3, [r3, #0]
9000ada6:	9203      	str	r2, [sp, #12]
9000ada8:	2b00      	cmp	r3, #0
9000adaa:	bfb8      	it	lt
9000adac:	f04f 33ff 	movlt.w	r3, #4294967295
9000adb0:	3402      	adds	r4, #2
9000adb2:	9305      	str	r3, [sp, #20]
9000adb4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 9000ae7c <_svfiprintf_r+0x1f8>
9000adb8:	7821      	ldrb	r1, [r4, #0]
9000adba:	2203      	movs	r2, #3
9000adbc:	4650      	mov	r0, sl
9000adbe:	f7f5 fa27 	bl	90000210 <memchr>
9000adc2:	b138      	cbz	r0, 9000add4 <_svfiprintf_r+0x150>
9000adc4:	9b04      	ldr	r3, [sp, #16]
9000adc6:	eba0 000a 	sub.w	r0, r0, sl
9000adca:	2240      	movs	r2, #64	; 0x40
9000adcc:	4082      	lsls	r2, r0
9000adce:	4313      	orrs	r3, r2
9000add0:	3401      	adds	r4, #1
9000add2:	9304      	str	r3, [sp, #16]
9000add4:	f814 1b01 	ldrb.w	r1, [r4], #1
9000add8:	4825      	ldr	r0, [pc, #148]	; (9000ae70 <_svfiprintf_r+0x1ec>)
9000adda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000adde:	2206      	movs	r2, #6
9000ade0:	f7f5 fa16 	bl	90000210 <memchr>
9000ade4:	2800      	cmp	r0, #0
9000ade6:	d038      	beq.n	9000ae5a <_svfiprintf_r+0x1d6>
9000ade8:	4b22      	ldr	r3, [pc, #136]	; (9000ae74 <_svfiprintf_r+0x1f0>)
9000adea:	bb1b      	cbnz	r3, 9000ae34 <_svfiprintf_r+0x1b0>
9000adec:	9b03      	ldr	r3, [sp, #12]
9000adee:	3307      	adds	r3, #7
9000adf0:	f023 0307 	bic.w	r3, r3, #7
9000adf4:	3308      	adds	r3, #8
9000adf6:	9303      	str	r3, [sp, #12]
9000adf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000adfa:	4433      	add	r3, r6
9000adfc:	9309      	str	r3, [sp, #36]	; 0x24
9000adfe:	e768      	b.n	9000acd2 <_svfiprintf_r+0x4e>
9000ae00:	fb0c 3202 	mla	r2, ip, r2, r3
9000ae04:	460c      	mov	r4, r1
9000ae06:	2001      	movs	r0, #1
9000ae08:	e7a6      	b.n	9000ad58 <_svfiprintf_r+0xd4>
9000ae0a:	2300      	movs	r3, #0
9000ae0c:	3401      	adds	r4, #1
9000ae0e:	9305      	str	r3, [sp, #20]
9000ae10:	4619      	mov	r1, r3
9000ae12:	f04f 0c0a 	mov.w	ip, #10
9000ae16:	4620      	mov	r0, r4
9000ae18:	f810 2b01 	ldrb.w	r2, [r0], #1
9000ae1c:	3a30      	subs	r2, #48	; 0x30
9000ae1e:	2a09      	cmp	r2, #9
9000ae20:	d903      	bls.n	9000ae2a <_svfiprintf_r+0x1a6>
9000ae22:	2b00      	cmp	r3, #0
9000ae24:	d0c6      	beq.n	9000adb4 <_svfiprintf_r+0x130>
9000ae26:	9105      	str	r1, [sp, #20]
9000ae28:	e7c4      	b.n	9000adb4 <_svfiprintf_r+0x130>
9000ae2a:	fb0c 2101 	mla	r1, ip, r1, r2
9000ae2e:	4604      	mov	r4, r0
9000ae30:	2301      	movs	r3, #1
9000ae32:	e7f0      	b.n	9000ae16 <_svfiprintf_r+0x192>
9000ae34:	ab03      	add	r3, sp, #12
9000ae36:	9300      	str	r3, [sp, #0]
9000ae38:	462a      	mov	r2, r5
9000ae3a:	4b0f      	ldr	r3, [pc, #60]	; (9000ae78 <_svfiprintf_r+0x1f4>)
9000ae3c:	a904      	add	r1, sp, #16
9000ae3e:	4638      	mov	r0, r7
9000ae40:	f3af 8000 	nop.w
9000ae44:	1c42      	adds	r2, r0, #1
9000ae46:	4606      	mov	r6, r0
9000ae48:	d1d6      	bne.n	9000adf8 <_svfiprintf_r+0x174>
9000ae4a:	89ab      	ldrh	r3, [r5, #12]
9000ae4c:	065b      	lsls	r3, r3, #25
9000ae4e:	f53f af2d 	bmi.w	9000acac <_svfiprintf_r+0x28>
9000ae52:	9809      	ldr	r0, [sp, #36]	; 0x24
9000ae54:	b01d      	add	sp, #116	; 0x74
9000ae56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000ae5a:	ab03      	add	r3, sp, #12
9000ae5c:	9300      	str	r3, [sp, #0]
9000ae5e:	462a      	mov	r2, r5
9000ae60:	4b05      	ldr	r3, [pc, #20]	; (9000ae78 <_svfiprintf_r+0x1f4>)
9000ae62:	a904      	add	r1, sp, #16
9000ae64:	4638      	mov	r0, r7
9000ae66:	f000 f9bd 	bl	9000b1e4 <_printf_i>
9000ae6a:	e7eb      	b.n	9000ae44 <_svfiprintf_r+0x1c0>
9000ae6c:	9001083e 	.word	0x9001083e
9000ae70:	90010848 	.word	0x90010848
9000ae74:	00000000 	.word	0x00000000
9000ae78:	9000abd1 	.word	0x9000abd1
9000ae7c:	90010844 	.word	0x90010844

9000ae80 <__sfputc_r>:
9000ae80:	6893      	ldr	r3, [r2, #8]
9000ae82:	3b01      	subs	r3, #1
9000ae84:	2b00      	cmp	r3, #0
9000ae86:	b410      	push	{r4}
9000ae88:	6093      	str	r3, [r2, #8]
9000ae8a:	da08      	bge.n	9000ae9e <__sfputc_r+0x1e>
9000ae8c:	6994      	ldr	r4, [r2, #24]
9000ae8e:	42a3      	cmp	r3, r4
9000ae90:	db01      	blt.n	9000ae96 <__sfputc_r+0x16>
9000ae92:	290a      	cmp	r1, #10
9000ae94:	d103      	bne.n	9000ae9e <__sfputc_r+0x1e>
9000ae96:	f85d 4b04 	ldr.w	r4, [sp], #4
9000ae9a:	f7ff bd1e 	b.w	9000a8da <__swbuf_r>
9000ae9e:	6813      	ldr	r3, [r2, #0]
9000aea0:	1c58      	adds	r0, r3, #1
9000aea2:	6010      	str	r0, [r2, #0]
9000aea4:	7019      	strb	r1, [r3, #0]
9000aea6:	4608      	mov	r0, r1
9000aea8:	f85d 4b04 	ldr.w	r4, [sp], #4
9000aeac:	4770      	bx	lr

9000aeae <__sfputs_r>:
9000aeae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000aeb0:	4606      	mov	r6, r0
9000aeb2:	460f      	mov	r7, r1
9000aeb4:	4614      	mov	r4, r2
9000aeb6:	18d5      	adds	r5, r2, r3
9000aeb8:	42ac      	cmp	r4, r5
9000aeba:	d101      	bne.n	9000aec0 <__sfputs_r+0x12>
9000aebc:	2000      	movs	r0, #0
9000aebe:	e007      	b.n	9000aed0 <__sfputs_r+0x22>
9000aec0:	f814 1b01 	ldrb.w	r1, [r4], #1
9000aec4:	463a      	mov	r2, r7
9000aec6:	4630      	mov	r0, r6
9000aec8:	f7ff ffda 	bl	9000ae80 <__sfputc_r>
9000aecc:	1c43      	adds	r3, r0, #1
9000aece:	d1f3      	bne.n	9000aeb8 <__sfputs_r+0xa>
9000aed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000aed4 <_vfiprintf_r>:
9000aed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000aed8:	460d      	mov	r5, r1
9000aeda:	b09d      	sub	sp, #116	; 0x74
9000aedc:	4614      	mov	r4, r2
9000aede:	4698      	mov	r8, r3
9000aee0:	4606      	mov	r6, r0
9000aee2:	b118      	cbz	r0, 9000aeec <_vfiprintf_r+0x18>
9000aee4:	6a03      	ldr	r3, [r0, #32]
9000aee6:	b90b      	cbnz	r3, 9000aeec <_vfiprintf_r+0x18>
9000aee8:	f7ff fbe8 	bl	9000a6bc <__sinit>
9000aeec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000aeee:	07d9      	lsls	r1, r3, #31
9000aef0:	d405      	bmi.n	9000aefe <_vfiprintf_r+0x2a>
9000aef2:	89ab      	ldrh	r3, [r5, #12]
9000aef4:	059a      	lsls	r2, r3, #22
9000aef6:	d402      	bmi.n	9000aefe <_vfiprintf_r+0x2a>
9000aef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000aefa:	f7ff fe1a 	bl	9000ab32 <__retarget_lock_acquire_recursive>
9000aefe:	89ab      	ldrh	r3, [r5, #12]
9000af00:	071b      	lsls	r3, r3, #28
9000af02:	d501      	bpl.n	9000af08 <_vfiprintf_r+0x34>
9000af04:	692b      	ldr	r3, [r5, #16]
9000af06:	b99b      	cbnz	r3, 9000af30 <_vfiprintf_r+0x5c>
9000af08:	4629      	mov	r1, r5
9000af0a:	4630      	mov	r0, r6
9000af0c:	f7ff fd22 	bl	9000a954 <__swsetup_r>
9000af10:	b170      	cbz	r0, 9000af30 <_vfiprintf_r+0x5c>
9000af12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000af14:	07dc      	lsls	r4, r3, #31
9000af16:	d504      	bpl.n	9000af22 <_vfiprintf_r+0x4e>
9000af18:	f04f 30ff 	mov.w	r0, #4294967295
9000af1c:	b01d      	add	sp, #116	; 0x74
9000af1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000af22:	89ab      	ldrh	r3, [r5, #12]
9000af24:	0598      	lsls	r0, r3, #22
9000af26:	d4f7      	bmi.n	9000af18 <_vfiprintf_r+0x44>
9000af28:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000af2a:	f7ff fe03 	bl	9000ab34 <__retarget_lock_release_recursive>
9000af2e:	e7f3      	b.n	9000af18 <_vfiprintf_r+0x44>
9000af30:	2300      	movs	r3, #0
9000af32:	9309      	str	r3, [sp, #36]	; 0x24
9000af34:	2320      	movs	r3, #32
9000af36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000af3a:	f8cd 800c 	str.w	r8, [sp, #12]
9000af3e:	2330      	movs	r3, #48	; 0x30
9000af40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 9000b0f4 <_vfiprintf_r+0x220>
9000af44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000af48:	f04f 0901 	mov.w	r9, #1
9000af4c:	4623      	mov	r3, r4
9000af4e:	469a      	mov	sl, r3
9000af50:	f813 2b01 	ldrb.w	r2, [r3], #1
9000af54:	b10a      	cbz	r2, 9000af5a <_vfiprintf_r+0x86>
9000af56:	2a25      	cmp	r2, #37	; 0x25
9000af58:	d1f9      	bne.n	9000af4e <_vfiprintf_r+0x7a>
9000af5a:	ebba 0b04 	subs.w	fp, sl, r4
9000af5e:	d00b      	beq.n	9000af78 <_vfiprintf_r+0xa4>
9000af60:	465b      	mov	r3, fp
9000af62:	4622      	mov	r2, r4
9000af64:	4629      	mov	r1, r5
9000af66:	4630      	mov	r0, r6
9000af68:	f7ff ffa1 	bl	9000aeae <__sfputs_r>
9000af6c:	3001      	adds	r0, #1
9000af6e:	f000 80a9 	beq.w	9000b0c4 <_vfiprintf_r+0x1f0>
9000af72:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000af74:	445a      	add	r2, fp
9000af76:	9209      	str	r2, [sp, #36]	; 0x24
9000af78:	f89a 3000 	ldrb.w	r3, [sl]
9000af7c:	2b00      	cmp	r3, #0
9000af7e:	f000 80a1 	beq.w	9000b0c4 <_vfiprintf_r+0x1f0>
9000af82:	2300      	movs	r3, #0
9000af84:	f04f 32ff 	mov.w	r2, #4294967295
9000af88:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000af8c:	f10a 0a01 	add.w	sl, sl, #1
9000af90:	9304      	str	r3, [sp, #16]
9000af92:	9307      	str	r3, [sp, #28]
9000af94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000af98:	931a      	str	r3, [sp, #104]	; 0x68
9000af9a:	4654      	mov	r4, sl
9000af9c:	2205      	movs	r2, #5
9000af9e:	f814 1b01 	ldrb.w	r1, [r4], #1
9000afa2:	4854      	ldr	r0, [pc, #336]	; (9000b0f4 <_vfiprintf_r+0x220>)
9000afa4:	f7f5 f934 	bl	90000210 <memchr>
9000afa8:	9a04      	ldr	r2, [sp, #16]
9000afaa:	b9d8      	cbnz	r0, 9000afe4 <_vfiprintf_r+0x110>
9000afac:	06d1      	lsls	r1, r2, #27
9000afae:	bf44      	itt	mi
9000afb0:	2320      	movmi	r3, #32
9000afb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000afb6:	0713      	lsls	r3, r2, #28
9000afb8:	bf44      	itt	mi
9000afba:	232b      	movmi	r3, #43	; 0x2b
9000afbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000afc0:	f89a 3000 	ldrb.w	r3, [sl]
9000afc4:	2b2a      	cmp	r3, #42	; 0x2a
9000afc6:	d015      	beq.n	9000aff4 <_vfiprintf_r+0x120>
9000afc8:	9a07      	ldr	r2, [sp, #28]
9000afca:	4654      	mov	r4, sl
9000afcc:	2000      	movs	r0, #0
9000afce:	f04f 0c0a 	mov.w	ip, #10
9000afd2:	4621      	mov	r1, r4
9000afd4:	f811 3b01 	ldrb.w	r3, [r1], #1
9000afd8:	3b30      	subs	r3, #48	; 0x30
9000afda:	2b09      	cmp	r3, #9
9000afdc:	d94d      	bls.n	9000b07a <_vfiprintf_r+0x1a6>
9000afde:	b1b0      	cbz	r0, 9000b00e <_vfiprintf_r+0x13a>
9000afe0:	9207      	str	r2, [sp, #28]
9000afe2:	e014      	b.n	9000b00e <_vfiprintf_r+0x13a>
9000afe4:	eba0 0308 	sub.w	r3, r0, r8
9000afe8:	fa09 f303 	lsl.w	r3, r9, r3
9000afec:	4313      	orrs	r3, r2
9000afee:	9304      	str	r3, [sp, #16]
9000aff0:	46a2      	mov	sl, r4
9000aff2:	e7d2      	b.n	9000af9a <_vfiprintf_r+0xc6>
9000aff4:	9b03      	ldr	r3, [sp, #12]
9000aff6:	1d19      	adds	r1, r3, #4
9000aff8:	681b      	ldr	r3, [r3, #0]
9000affa:	9103      	str	r1, [sp, #12]
9000affc:	2b00      	cmp	r3, #0
9000affe:	bfbb      	ittet	lt
9000b000:	425b      	neglt	r3, r3
9000b002:	f042 0202 	orrlt.w	r2, r2, #2
9000b006:	9307      	strge	r3, [sp, #28]
9000b008:	9307      	strlt	r3, [sp, #28]
9000b00a:	bfb8      	it	lt
9000b00c:	9204      	strlt	r2, [sp, #16]
9000b00e:	7823      	ldrb	r3, [r4, #0]
9000b010:	2b2e      	cmp	r3, #46	; 0x2e
9000b012:	d10c      	bne.n	9000b02e <_vfiprintf_r+0x15a>
9000b014:	7863      	ldrb	r3, [r4, #1]
9000b016:	2b2a      	cmp	r3, #42	; 0x2a
9000b018:	d134      	bne.n	9000b084 <_vfiprintf_r+0x1b0>
9000b01a:	9b03      	ldr	r3, [sp, #12]
9000b01c:	1d1a      	adds	r2, r3, #4
9000b01e:	681b      	ldr	r3, [r3, #0]
9000b020:	9203      	str	r2, [sp, #12]
9000b022:	2b00      	cmp	r3, #0
9000b024:	bfb8      	it	lt
9000b026:	f04f 33ff 	movlt.w	r3, #4294967295
9000b02a:	3402      	adds	r4, #2
9000b02c:	9305      	str	r3, [sp, #20]
9000b02e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 9000b104 <_vfiprintf_r+0x230>
9000b032:	7821      	ldrb	r1, [r4, #0]
9000b034:	2203      	movs	r2, #3
9000b036:	4650      	mov	r0, sl
9000b038:	f7f5 f8ea 	bl	90000210 <memchr>
9000b03c:	b138      	cbz	r0, 9000b04e <_vfiprintf_r+0x17a>
9000b03e:	9b04      	ldr	r3, [sp, #16]
9000b040:	eba0 000a 	sub.w	r0, r0, sl
9000b044:	2240      	movs	r2, #64	; 0x40
9000b046:	4082      	lsls	r2, r0
9000b048:	4313      	orrs	r3, r2
9000b04a:	3401      	adds	r4, #1
9000b04c:	9304      	str	r3, [sp, #16]
9000b04e:	f814 1b01 	ldrb.w	r1, [r4], #1
9000b052:	4829      	ldr	r0, [pc, #164]	; (9000b0f8 <_vfiprintf_r+0x224>)
9000b054:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000b058:	2206      	movs	r2, #6
9000b05a:	f7f5 f8d9 	bl	90000210 <memchr>
9000b05e:	2800      	cmp	r0, #0
9000b060:	d03f      	beq.n	9000b0e2 <_vfiprintf_r+0x20e>
9000b062:	4b26      	ldr	r3, [pc, #152]	; (9000b0fc <_vfiprintf_r+0x228>)
9000b064:	bb1b      	cbnz	r3, 9000b0ae <_vfiprintf_r+0x1da>
9000b066:	9b03      	ldr	r3, [sp, #12]
9000b068:	3307      	adds	r3, #7
9000b06a:	f023 0307 	bic.w	r3, r3, #7
9000b06e:	3308      	adds	r3, #8
9000b070:	9303      	str	r3, [sp, #12]
9000b072:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000b074:	443b      	add	r3, r7
9000b076:	9309      	str	r3, [sp, #36]	; 0x24
9000b078:	e768      	b.n	9000af4c <_vfiprintf_r+0x78>
9000b07a:	fb0c 3202 	mla	r2, ip, r2, r3
9000b07e:	460c      	mov	r4, r1
9000b080:	2001      	movs	r0, #1
9000b082:	e7a6      	b.n	9000afd2 <_vfiprintf_r+0xfe>
9000b084:	2300      	movs	r3, #0
9000b086:	3401      	adds	r4, #1
9000b088:	9305      	str	r3, [sp, #20]
9000b08a:	4619      	mov	r1, r3
9000b08c:	f04f 0c0a 	mov.w	ip, #10
9000b090:	4620      	mov	r0, r4
9000b092:	f810 2b01 	ldrb.w	r2, [r0], #1
9000b096:	3a30      	subs	r2, #48	; 0x30
9000b098:	2a09      	cmp	r2, #9
9000b09a:	d903      	bls.n	9000b0a4 <_vfiprintf_r+0x1d0>
9000b09c:	2b00      	cmp	r3, #0
9000b09e:	d0c6      	beq.n	9000b02e <_vfiprintf_r+0x15a>
9000b0a0:	9105      	str	r1, [sp, #20]
9000b0a2:	e7c4      	b.n	9000b02e <_vfiprintf_r+0x15a>
9000b0a4:	fb0c 2101 	mla	r1, ip, r1, r2
9000b0a8:	4604      	mov	r4, r0
9000b0aa:	2301      	movs	r3, #1
9000b0ac:	e7f0      	b.n	9000b090 <_vfiprintf_r+0x1bc>
9000b0ae:	ab03      	add	r3, sp, #12
9000b0b0:	9300      	str	r3, [sp, #0]
9000b0b2:	462a      	mov	r2, r5
9000b0b4:	4b12      	ldr	r3, [pc, #72]	; (9000b100 <_vfiprintf_r+0x22c>)
9000b0b6:	a904      	add	r1, sp, #16
9000b0b8:	4630      	mov	r0, r6
9000b0ba:	f3af 8000 	nop.w
9000b0be:	4607      	mov	r7, r0
9000b0c0:	1c78      	adds	r0, r7, #1
9000b0c2:	d1d6      	bne.n	9000b072 <_vfiprintf_r+0x19e>
9000b0c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000b0c6:	07d9      	lsls	r1, r3, #31
9000b0c8:	d405      	bmi.n	9000b0d6 <_vfiprintf_r+0x202>
9000b0ca:	89ab      	ldrh	r3, [r5, #12]
9000b0cc:	059a      	lsls	r2, r3, #22
9000b0ce:	d402      	bmi.n	9000b0d6 <_vfiprintf_r+0x202>
9000b0d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000b0d2:	f7ff fd2f 	bl	9000ab34 <__retarget_lock_release_recursive>
9000b0d6:	89ab      	ldrh	r3, [r5, #12]
9000b0d8:	065b      	lsls	r3, r3, #25
9000b0da:	f53f af1d 	bmi.w	9000af18 <_vfiprintf_r+0x44>
9000b0de:	9809      	ldr	r0, [sp, #36]	; 0x24
9000b0e0:	e71c      	b.n	9000af1c <_vfiprintf_r+0x48>
9000b0e2:	ab03      	add	r3, sp, #12
9000b0e4:	9300      	str	r3, [sp, #0]
9000b0e6:	462a      	mov	r2, r5
9000b0e8:	4b05      	ldr	r3, [pc, #20]	; (9000b100 <_vfiprintf_r+0x22c>)
9000b0ea:	a904      	add	r1, sp, #16
9000b0ec:	4630      	mov	r0, r6
9000b0ee:	f000 f879 	bl	9000b1e4 <_printf_i>
9000b0f2:	e7e4      	b.n	9000b0be <_vfiprintf_r+0x1ea>
9000b0f4:	9001083e 	.word	0x9001083e
9000b0f8:	90010848 	.word	0x90010848
9000b0fc:	00000000 	.word	0x00000000
9000b100:	9000aeaf 	.word	0x9000aeaf
9000b104:	90010844 	.word	0x90010844

9000b108 <_printf_common>:
9000b108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000b10c:	4616      	mov	r6, r2
9000b10e:	4699      	mov	r9, r3
9000b110:	688a      	ldr	r2, [r1, #8]
9000b112:	690b      	ldr	r3, [r1, #16]
9000b114:	f8dd 8020 	ldr.w	r8, [sp, #32]
9000b118:	4293      	cmp	r3, r2
9000b11a:	bfb8      	it	lt
9000b11c:	4613      	movlt	r3, r2
9000b11e:	6033      	str	r3, [r6, #0]
9000b120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
9000b124:	4607      	mov	r7, r0
9000b126:	460c      	mov	r4, r1
9000b128:	b10a      	cbz	r2, 9000b12e <_printf_common+0x26>
9000b12a:	3301      	adds	r3, #1
9000b12c:	6033      	str	r3, [r6, #0]
9000b12e:	6823      	ldr	r3, [r4, #0]
9000b130:	0699      	lsls	r1, r3, #26
9000b132:	bf42      	ittt	mi
9000b134:	6833      	ldrmi	r3, [r6, #0]
9000b136:	3302      	addmi	r3, #2
9000b138:	6033      	strmi	r3, [r6, #0]
9000b13a:	6825      	ldr	r5, [r4, #0]
9000b13c:	f015 0506 	ands.w	r5, r5, #6
9000b140:	d106      	bne.n	9000b150 <_printf_common+0x48>
9000b142:	f104 0a19 	add.w	sl, r4, #25
9000b146:	68e3      	ldr	r3, [r4, #12]
9000b148:	6832      	ldr	r2, [r6, #0]
9000b14a:	1a9b      	subs	r3, r3, r2
9000b14c:	42ab      	cmp	r3, r5
9000b14e:	dc26      	bgt.n	9000b19e <_printf_common+0x96>
9000b150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
9000b154:	1e13      	subs	r3, r2, #0
9000b156:	6822      	ldr	r2, [r4, #0]
9000b158:	bf18      	it	ne
9000b15a:	2301      	movne	r3, #1
9000b15c:	0692      	lsls	r2, r2, #26
9000b15e:	d42b      	bmi.n	9000b1b8 <_printf_common+0xb0>
9000b160:	f104 0243 	add.w	r2, r4, #67	; 0x43
9000b164:	4649      	mov	r1, r9
9000b166:	4638      	mov	r0, r7
9000b168:	47c0      	blx	r8
9000b16a:	3001      	adds	r0, #1
9000b16c:	d01e      	beq.n	9000b1ac <_printf_common+0xa4>
9000b16e:	6823      	ldr	r3, [r4, #0]
9000b170:	6922      	ldr	r2, [r4, #16]
9000b172:	f003 0306 	and.w	r3, r3, #6
9000b176:	2b04      	cmp	r3, #4
9000b178:	bf02      	ittt	eq
9000b17a:	68e5      	ldreq	r5, [r4, #12]
9000b17c:	6833      	ldreq	r3, [r6, #0]
9000b17e:	1aed      	subeq	r5, r5, r3
9000b180:	68a3      	ldr	r3, [r4, #8]
9000b182:	bf0c      	ite	eq
9000b184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000b188:	2500      	movne	r5, #0
9000b18a:	4293      	cmp	r3, r2
9000b18c:	bfc4      	itt	gt
9000b18e:	1a9b      	subgt	r3, r3, r2
9000b190:	18ed      	addgt	r5, r5, r3
9000b192:	2600      	movs	r6, #0
9000b194:	341a      	adds	r4, #26
9000b196:	42b5      	cmp	r5, r6
9000b198:	d11a      	bne.n	9000b1d0 <_printf_common+0xc8>
9000b19a:	2000      	movs	r0, #0
9000b19c:	e008      	b.n	9000b1b0 <_printf_common+0xa8>
9000b19e:	2301      	movs	r3, #1
9000b1a0:	4652      	mov	r2, sl
9000b1a2:	4649      	mov	r1, r9
9000b1a4:	4638      	mov	r0, r7
9000b1a6:	47c0      	blx	r8
9000b1a8:	3001      	adds	r0, #1
9000b1aa:	d103      	bne.n	9000b1b4 <_printf_common+0xac>
9000b1ac:	f04f 30ff 	mov.w	r0, #4294967295
9000b1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000b1b4:	3501      	adds	r5, #1
9000b1b6:	e7c6      	b.n	9000b146 <_printf_common+0x3e>
9000b1b8:	18e1      	adds	r1, r4, r3
9000b1ba:	1c5a      	adds	r2, r3, #1
9000b1bc:	2030      	movs	r0, #48	; 0x30
9000b1be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9000b1c2:	4422      	add	r2, r4
9000b1c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
9000b1c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
9000b1cc:	3302      	adds	r3, #2
9000b1ce:	e7c7      	b.n	9000b160 <_printf_common+0x58>
9000b1d0:	2301      	movs	r3, #1
9000b1d2:	4622      	mov	r2, r4
9000b1d4:	4649      	mov	r1, r9
9000b1d6:	4638      	mov	r0, r7
9000b1d8:	47c0      	blx	r8
9000b1da:	3001      	adds	r0, #1
9000b1dc:	d0e6      	beq.n	9000b1ac <_printf_common+0xa4>
9000b1de:	3601      	adds	r6, #1
9000b1e0:	e7d9      	b.n	9000b196 <_printf_common+0x8e>
	...

9000b1e4 <_printf_i>:
9000b1e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000b1e8:	7e0f      	ldrb	r7, [r1, #24]
9000b1ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000b1ec:	2f78      	cmp	r7, #120	; 0x78
9000b1ee:	4691      	mov	r9, r2
9000b1f0:	4680      	mov	r8, r0
9000b1f2:	460c      	mov	r4, r1
9000b1f4:	469a      	mov	sl, r3
9000b1f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
9000b1fa:	d807      	bhi.n	9000b20c <_printf_i+0x28>
9000b1fc:	2f62      	cmp	r7, #98	; 0x62
9000b1fe:	d80a      	bhi.n	9000b216 <_printf_i+0x32>
9000b200:	2f00      	cmp	r7, #0
9000b202:	f000 80d4 	beq.w	9000b3ae <_printf_i+0x1ca>
9000b206:	2f58      	cmp	r7, #88	; 0x58
9000b208:	f000 80c0 	beq.w	9000b38c <_printf_i+0x1a8>
9000b20c:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000b210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
9000b214:	e03a      	b.n	9000b28c <_printf_i+0xa8>
9000b216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
9000b21a:	2b15      	cmp	r3, #21
9000b21c:	d8f6      	bhi.n	9000b20c <_printf_i+0x28>
9000b21e:	a101      	add	r1, pc, #4	; (adr r1, 9000b224 <_printf_i+0x40>)
9000b220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000b224:	9000b27d 	.word	0x9000b27d
9000b228:	9000b291 	.word	0x9000b291
9000b22c:	9000b20d 	.word	0x9000b20d
9000b230:	9000b20d 	.word	0x9000b20d
9000b234:	9000b20d 	.word	0x9000b20d
9000b238:	9000b20d 	.word	0x9000b20d
9000b23c:	9000b291 	.word	0x9000b291
9000b240:	9000b20d 	.word	0x9000b20d
9000b244:	9000b20d 	.word	0x9000b20d
9000b248:	9000b20d 	.word	0x9000b20d
9000b24c:	9000b20d 	.word	0x9000b20d
9000b250:	9000b395 	.word	0x9000b395
9000b254:	9000b2bd 	.word	0x9000b2bd
9000b258:	9000b34f 	.word	0x9000b34f
9000b25c:	9000b20d 	.word	0x9000b20d
9000b260:	9000b20d 	.word	0x9000b20d
9000b264:	9000b3b7 	.word	0x9000b3b7
9000b268:	9000b20d 	.word	0x9000b20d
9000b26c:	9000b2bd 	.word	0x9000b2bd
9000b270:	9000b20d 	.word	0x9000b20d
9000b274:	9000b20d 	.word	0x9000b20d
9000b278:	9000b357 	.word	0x9000b357
9000b27c:	682b      	ldr	r3, [r5, #0]
9000b27e:	1d1a      	adds	r2, r3, #4
9000b280:	681b      	ldr	r3, [r3, #0]
9000b282:	602a      	str	r2, [r5, #0]
9000b284:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000b288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000b28c:	2301      	movs	r3, #1
9000b28e:	e09f      	b.n	9000b3d0 <_printf_i+0x1ec>
9000b290:	6820      	ldr	r0, [r4, #0]
9000b292:	682b      	ldr	r3, [r5, #0]
9000b294:	0607      	lsls	r7, r0, #24
9000b296:	f103 0104 	add.w	r1, r3, #4
9000b29a:	6029      	str	r1, [r5, #0]
9000b29c:	d501      	bpl.n	9000b2a2 <_printf_i+0xbe>
9000b29e:	681e      	ldr	r6, [r3, #0]
9000b2a0:	e003      	b.n	9000b2aa <_printf_i+0xc6>
9000b2a2:	0646      	lsls	r6, r0, #25
9000b2a4:	d5fb      	bpl.n	9000b29e <_printf_i+0xba>
9000b2a6:	f9b3 6000 	ldrsh.w	r6, [r3]
9000b2aa:	2e00      	cmp	r6, #0
9000b2ac:	da03      	bge.n	9000b2b6 <_printf_i+0xd2>
9000b2ae:	232d      	movs	r3, #45	; 0x2d
9000b2b0:	4276      	negs	r6, r6
9000b2b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000b2b6:	485a      	ldr	r0, [pc, #360]	; (9000b420 <_printf_i+0x23c>)
9000b2b8:	230a      	movs	r3, #10
9000b2ba:	e012      	b.n	9000b2e2 <_printf_i+0xfe>
9000b2bc:	682b      	ldr	r3, [r5, #0]
9000b2be:	6820      	ldr	r0, [r4, #0]
9000b2c0:	1d19      	adds	r1, r3, #4
9000b2c2:	6029      	str	r1, [r5, #0]
9000b2c4:	0605      	lsls	r5, r0, #24
9000b2c6:	d501      	bpl.n	9000b2cc <_printf_i+0xe8>
9000b2c8:	681e      	ldr	r6, [r3, #0]
9000b2ca:	e002      	b.n	9000b2d2 <_printf_i+0xee>
9000b2cc:	0641      	lsls	r1, r0, #25
9000b2ce:	d5fb      	bpl.n	9000b2c8 <_printf_i+0xe4>
9000b2d0:	881e      	ldrh	r6, [r3, #0]
9000b2d2:	4853      	ldr	r0, [pc, #332]	; (9000b420 <_printf_i+0x23c>)
9000b2d4:	2f6f      	cmp	r7, #111	; 0x6f
9000b2d6:	bf0c      	ite	eq
9000b2d8:	2308      	moveq	r3, #8
9000b2da:	230a      	movne	r3, #10
9000b2dc:	2100      	movs	r1, #0
9000b2de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
9000b2e2:	6865      	ldr	r5, [r4, #4]
9000b2e4:	60a5      	str	r5, [r4, #8]
9000b2e6:	2d00      	cmp	r5, #0
9000b2e8:	bfa2      	ittt	ge
9000b2ea:	6821      	ldrge	r1, [r4, #0]
9000b2ec:	f021 0104 	bicge.w	r1, r1, #4
9000b2f0:	6021      	strge	r1, [r4, #0]
9000b2f2:	b90e      	cbnz	r6, 9000b2f8 <_printf_i+0x114>
9000b2f4:	2d00      	cmp	r5, #0
9000b2f6:	d04b      	beq.n	9000b390 <_printf_i+0x1ac>
9000b2f8:	4615      	mov	r5, r2
9000b2fa:	fbb6 f1f3 	udiv	r1, r6, r3
9000b2fe:	fb03 6711 	mls	r7, r3, r1, r6
9000b302:	5dc7      	ldrb	r7, [r0, r7]
9000b304:	f805 7d01 	strb.w	r7, [r5, #-1]!
9000b308:	4637      	mov	r7, r6
9000b30a:	42bb      	cmp	r3, r7
9000b30c:	460e      	mov	r6, r1
9000b30e:	d9f4      	bls.n	9000b2fa <_printf_i+0x116>
9000b310:	2b08      	cmp	r3, #8
9000b312:	d10b      	bne.n	9000b32c <_printf_i+0x148>
9000b314:	6823      	ldr	r3, [r4, #0]
9000b316:	07de      	lsls	r6, r3, #31
9000b318:	d508      	bpl.n	9000b32c <_printf_i+0x148>
9000b31a:	6923      	ldr	r3, [r4, #16]
9000b31c:	6861      	ldr	r1, [r4, #4]
9000b31e:	4299      	cmp	r1, r3
9000b320:	bfde      	ittt	le
9000b322:	2330      	movle	r3, #48	; 0x30
9000b324:	f805 3c01 	strble.w	r3, [r5, #-1]
9000b328:	f105 35ff 	addle.w	r5, r5, #4294967295
9000b32c:	1b52      	subs	r2, r2, r5
9000b32e:	6122      	str	r2, [r4, #16]
9000b330:	f8cd a000 	str.w	sl, [sp]
9000b334:	464b      	mov	r3, r9
9000b336:	aa03      	add	r2, sp, #12
9000b338:	4621      	mov	r1, r4
9000b33a:	4640      	mov	r0, r8
9000b33c:	f7ff fee4 	bl	9000b108 <_printf_common>
9000b340:	3001      	adds	r0, #1
9000b342:	d14a      	bne.n	9000b3da <_printf_i+0x1f6>
9000b344:	f04f 30ff 	mov.w	r0, #4294967295
9000b348:	b004      	add	sp, #16
9000b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000b34e:	6823      	ldr	r3, [r4, #0]
9000b350:	f043 0320 	orr.w	r3, r3, #32
9000b354:	6023      	str	r3, [r4, #0]
9000b356:	4833      	ldr	r0, [pc, #204]	; (9000b424 <_printf_i+0x240>)
9000b358:	2778      	movs	r7, #120	; 0x78
9000b35a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
9000b35e:	6823      	ldr	r3, [r4, #0]
9000b360:	6829      	ldr	r1, [r5, #0]
9000b362:	061f      	lsls	r7, r3, #24
9000b364:	f851 6b04 	ldr.w	r6, [r1], #4
9000b368:	d402      	bmi.n	9000b370 <_printf_i+0x18c>
9000b36a:	065f      	lsls	r7, r3, #25
9000b36c:	bf48      	it	mi
9000b36e:	b2b6      	uxthmi	r6, r6
9000b370:	07df      	lsls	r7, r3, #31
9000b372:	bf48      	it	mi
9000b374:	f043 0320 	orrmi.w	r3, r3, #32
9000b378:	6029      	str	r1, [r5, #0]
9000b37a:	bf48      	it	mi
9000b37c:	6023      	strmi	r3, [r4, #0]
9000b37e:	b91e      	cbnz	r6, 9000b388 <_printf_i+0x1a4>
9000b380:	6823      	ldr	r3, [r4, #0]
9000b382:	f023 0320 	bic.w	r3, r3, #32
9000b386:	6023      	str	r3, [r4, #0]
9000b388:	2310      	movs	r3, #16
9000b38a:	e7a7      	b.n	9000b2dc <_printf_i+0xf8>
9000b38c:	4824      	ldr	r0, [pc, #144]	; (9000b420 <_printf_i+0x23c>)
9000b38e:	e7e4      	b.n	9000b35a <_printf_i+0x176>
9000b390:	4615      	mov	r5, r2
9000b392:	e7bd      	b.n	9000b310 <_printf_i+0x12c>
9000b394:	682b      	ldr	r3, [r5, #0]
9000b396:	6826      	ldr	r6, [r4, #0]
9000b398:	6961      	ldr	r1, [r4, #20]
9000b39a:	1d18      	adds	r0, r3, #4
9000b39c:	6028      	str	r0, [r5, #0]
9000b39e:	0635      	lsls	r5, r6, #24
9000b3a0:	681b      	ldr	r3, [r3, #0]
9000b3a2:	d501      	bpl.n	9000b3a8 <_printf_i+0x1c4>
9000b3a4:	6019      	str	r1, [r3, #0]
9000b3a6:	e002      	b.n	9000b3ae <_printf_i+0x1ca>
9000b3a8:	0670      	lsls	r0, r6, #25
9000b3aa:	d5fb      	bpl.n	9000b3a4 <_printf_i+0x1c0>
9000b3ac:	8019      	strh	r1, [r3, #0]
9000b3ae:	2300      	movs	r3, #0
9000b3b0:	6123      	str	r3, [r4, #16]
9000b3b2:	4615      	mov	r5, r2
9000b3b4:	e7bc      	b.n	9000b330 <_printf_i+0x14c>
9000b3b6:	682b      	ldr	r3, [r5, #0]
9000b3b8:	1d1a      	adds	r2, r3, #4
9000b3ba:	602a      	str	r2, [r5, #0]
9000b3bc:	681d      	ldr	r5, [r3, #0]
9000b3be:	6862      	ldr	r2, [r4, #4]
9000b3c0:	2100      	movs	r1, #0
9000b3c2:	4628      	mov	r0, r5
9000b3c4:	f7f4 ff24 	bl	90000210 <memchr>
9000b3c8:	b108      	cbz	r0, 9000b3ce <_printf_i+0x1ea>
9000b3ca:	1b40      	subs	r0, r0, r5
9000b3cc:	6060      	str	r0, [r4, #4]
9000b3ce:	6863      	ldr	r3, [r4, #4]
9000b3d0:	6123      	str	r3, [r4, #16]
9000b3d2:	2300      	movs	r3, #0
9000b3d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000b3d8:	e7aa      	b.n	9000b330 <_printf_i+0x14c>
9000b3da:	6923      	ldr	r3, [r4, #16]
9000b3dc:	462a      	mov	r2, r5
9000b3de:	4649      	mov	r1, r9
9000b3e0:	4640      	mov	r0, r8
9000b3e2:	47d0      	blx	sl
9000b3e4:	3001      	adds	r0, #1
9000b3e6:	d0ad      	beq.n	9000b344 <_printf_i+0x160>
9000b3e8:	6823      	ldr	r3, [r4, #0]
9000b3ea:	079b      	lsls	r3, r3, #30
9000b3ec:	d413      	bmi.n	9000b416 <_printf_i+0x232>
9000b3ee:	68e0      	ldr	r0, [r4, #12]
9000b3f0:	9b03      	ldr	r3, [sp, #12]
9000b3f2:	4298      	cmp	r0, r3
9000b3f4:	bfb8      	it	lt
9000b3f6:	4618      	movlt	r0, r3
9000b3f8:	e7a6      	b.n	9000b348 <_printf_i+0x164>
9000b3fa:	2301      	movs	r3, #1
9000b3fc:	4632      	mov	r2, r6
9000b3fe:	4649      	mov	r1, r9
9000b400:	4640      	mov	r0, r8
9000b402:	47d0      	blx	sl
9000b404:	3001      	adds	r0, #1
9000b406:	d09d      	beq.n	9000b344 <_printf_i+0x160>
9000b408:	3501      	adds	r5, #1
9000b40a:	68e3      	ldr	r3, [r4, #12]
9000b40c:	9903      	ldr	r1, [sp, #12]
9000b40e:	1a5b      	subs	r3, r3, r1
9000b410:	42ab      	cmp	r3, r5
9000b412:	dcf2      	bgt.n	9000b3fa <_printf_i+0x216>
9000b414:	e7eb      	b.n	9000b3ee <_printf_i+0x20a>
9000b416:	2500      	movs	r5, #0
9000b418:	f104 0619 	add.w	r6, r4, #25
9000b41c:	e7f5      	b.n	9000b40a <_printf_i+0x226>
9000b41e:	bf00      	nop
9000b420:	9001084f 	.word	0x9001084f
9000b424:	90010860 	.word	0x90010860

9000b428 <__sflush_r>:
9000b428:	898a      	ldrh	r2, [r1, #12]
9000b42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000b42e:	4605      	mov	r5, r0
9000b430:	0710      	lsls	r0, r2, #28
9000b432:	460c      	mov	r4, r1
9000b434:	d458      	bmi.n	9000b4e8 <__sflush_r+0xc0>
9000b436:	684b      	ldr	r3, [r1, #4]
9000b438:	2b00      	cmp	r3, #0
9000b43a:	dc05      	bgt.n	9000b448 <__sflush_r+0x20>
9000b43c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9000b43e:	2b00      	cmp	r3, #0
9000b440:	dc02      	bgt.n	9000b448 <__sflush_r+0x20>
9000b442:	2000      	movs	r0, #0
9000b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000b448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000b44a:	2e00      	cmp	r6, #0
9000b44c:	d0f9      	beq.n	9000b442 <__sflush_r+0x1a>
9000b44e:	2300      	movs	r3, #0
9000b450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
9000b454:	682f      	ldr	r7, [r5, #0]
9000b456:	6a21      	ldr	r1, [r4, #32]
9000b458:	602b      	str	r3, [r5, #0]
9000b45a:	d032      	beq.n	9000b4c2 <__sflush_r+0x9a>
9000b45c:	6d60      	ldr	r0, [r4, #84]	; 0x54
9000b45e:	89a3      	ldrh	r3, [r4, #12]
9000b460:	075a      	lsls	r2, r3, #29
9000b462:	d505      	bpl.n	9000b470 <__sflush_r+0x48>
9000b464:	6863      	ldr	r3, [r4, #4]
9000b466:	1ac0      	subs	r0, r0, r3
9000b468:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000b46a:	b10b      	cbz	r3, 9000b470 <__sflush_r+0x48>
9000b46c:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000b46e:	1ac0      	subs	r0, r0, r3
9000b470:	2300      	movs	r3, #0
9000b472:	4602      	mov	r2, r0
9000b474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000b476:	6a21      	ldr	r1, [r4, #32]
9000b478:	4628      	mov	r0, r5
9000b47a:	47b0      	blx	r6
9000b47c:	1c43      	adds	r3, r0, #1
9000b47e:	89a3      	ldrh	r3, [r4, #12]
9000b480:	d106      	bne.n	9000b490 <__sflush_r+0x68>
9000b482:	6829      	ldr	r1, [r5, #0]
9000b484:	291d      	cmp	r1, #29
9000b486:	d82b      	bhi.n	9000b4e0 <__sflush_r+0xb8>
9000b488:	4a29      	ldr	r2, [pc, #164]	; (9000b530 <__sflush_r+0x108>)
9000b48a:	410a      	asrs	r2, r1
9000b48c:	07d6      	lsls	r6, r2, #31
9000b48e:	d427      	bmi.n	9000b4e0 <__sflush_r+0xb8>
9000b490:	2200      	movs	r2, #0
9000b492:	6062      	str	r2, [r4, #4]
9000b494:	04d9      	lsls	r1, r3, #19
9000b496:	6922      	ldr	r2, [r4, #16]
9000b498:	6022      	str	r2, [r4, #0]
9000b49a:	d504      	bpl.n	9000b4a6 <__sflush_r+0x7e>
9000b49c:	1c42      	adds	r2, r0, #1
9000b49e:	d101      	bne.n	9000b4a4 <__sflush_r+0x7c>
9000b4a0:	682b      	ldr	r3, [r5, #0]
9000b4a2:	b903      	cbnz	r3, 9000b4a6 <__sflush_r+0x7e>
9000b4a4:	6560      	str	r0, [r4, #84]	; 0x54
9000b4a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000b4a8:	602f      	str	r7, [r5, #0]
9000b4aa:	2900      	cmp	r1, #0
9000b4ac:	d0c9      	beq.n	9000b442 <__sflush_r+0x1a>
9000b4ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000b4b2:	4299      	cmp	r1, r3
9000b4b4:	d002      	beq.n	9000b4bc <__sflush_r+0x94>
9000b4b6:	4628      	mov	r0, r5
9000b4b8:	f7ff fb3e 	bl	9000ab38 <_free_r>
9000b4bc:	2000      	movs	r0, #0
9000b4be:	6360      	str	r0, [r4, #52]	; 0x34
9000b4c0:	e7c0      	b.n	9000b444 <__sflush_r+0x1c>
9000b4c2:	2301      	movs	r3, #1
9000b4c4:	4628      	mov	r0, r5
9000b4c6:	47b0      	blx	r6
9000b4c8:	1c41      	adds	r1, r0, #1
9000b4ca:	d1c8      	bne.n	9000b45e <__sflush_r+0x36>
9000b4cc:	682b      	ldr	r3, [r5, #0]
9000b4ce:	2b00      	cmp	r3, #0
9000b4d0:	d0c5      	beq.n	9000b45e <__sflush_r+0x36>
9000b4d2:	2b1d      	cmp	r3, #29
9000b4d4:	d001      	beq.n	9000b4da <__sflush_r+0xb2>
9000b4d6:	2b16      	cmp	r3, #22
9000b4d8:	d101      	bne.n	9000b4de <__sflush_r+0xb6>
9000b4da:	602f      	str	r7, [r5, #0]
9000b4dc:	e7b1      	b.n	9000b442 <__sflush_r+0x1a>
9000b4de:	89a3      	ldrh	r3, [r4, #12]
9000b4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000b4e4:	81a3      	strh	r3, [r4, #12]
9000b4e6:	e7ad      	b.n	9000b444 <__sflush_r+0x1c>
9000b4e8:	690f      	ldr	r7, [r1, #16]
9000b4ea:	2f00      	cmp	r7, #0
9000b4ec:	d0a9      	beq.n	9000b442 <__sflush_r+0x1a>
9000b4ee:	0793      	lsls	r3, r2, #30
9000b4f0:	680e      	ldr	r6, [r1, #0]
9000b4f2:	bf08      	it	eq
9000b4f4:	694b      	ldreq	r3, [r1, #20]
9000b4f6:	600f      	str	r7, [r1, #0]
9000b4f8:	bf18      	it	ne
9000b4fa:	2300      	movne	r3, #0
9000b4fc:	eba6 0807 	sub.w	r8, r6, r7
9000b500:	608b      	str	r3, [r1, #8]
9000b502:	f1b8 0f00 	cmp.w	r8, #0
9000b506:	dd9c      	ble.n	9000b442 <__sflush_r+0x1a>
9000b508:	6a21      	ldr	r1, [r4, #32]
9000b50a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9000b50c:	4643      	mov	r3, r8
9000b50e:	463a      	mov	r2, r7
9000b510:	4628      	mov	r0, r5
9000b512:	47b0      	blx	r6
9000b514:	2800      	cmp	r0, #0
9000b516:	dc06      	bgt.n	9000b526 <__sflush_r+0xfe>
9000b518:	89a3      	ldrh	r3, [r4, #12]
9000b51a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000b51e:	81a3      	strh	r3, [r4, #12]
9000b520:	f04f 30ff 	mov.w	r0, #4294967295
9000b524:	e78e      	b.n	9000b444 <__sflush_r+0x1c>
9000b526:	4407      	add	r7, r0
9000b528:	eba8 0800 	sub.w	r8, r8, r0
9000b52c:	e7e9      	b.n	9000b502 <__sflush_r+0xda>
9000b52e:	bf00      	nop
9000b530:	dfbffffe 	.word	0xdfbffffe

9000b534 <_fflush_r>:
9000b534:	b538      	push	{r3, r4, r5, lr}
9000b536:	690b      	ldr	r3, [r1, #16]
9000b538:	4605      	mov	r5, r0
9000b53a:	460c      	mov	r4, r1
9000b53c:	b913      	cbnz	r3, 9000b544 <_fflush_r+0x10>
9000b53e:	2500      	movs	r5, #0
9000b540:	4628      	mov	r0, r5
9000b542:	bd38      	pop	{r3, r4, r5, pc}
9000b544:	b118      	cbz	r0, 9000b54e <_fflush_r+0x1a>
9000b546:	6a03      	ldr	r3, [r0, #32]
9000b548:	b90b      	cbnz	r3, 9000b54e <_fflush_r+0x1a>
9000b54a:	f7ff f8b7 	bl	9000a6bc <__sinit>
9000b54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000b552:	2b00      	cmp	r3, #0
9000b554:	d0f3      	beq.n	9000b53e <_fflush_r+0xa>
9000b556:	6e62      	ldr	r2, [r4, #100]	; 0x64
9000b558:	07d0      	lsls	r0, r2, #31
9000b55a:	d404      	bmi.n	9000b566 <_fflush_r+0x32>
9000b55c:	0599      	lsls	r1, r3, #22
9000b55e:	d402      	bmi.n	9000b566 <_fflush_r+0x32>
9000b560:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000b562:	f7ff fae6 	bl	9000ab32 <__retarget_lock_acquire_recursive>
9000b566:	4628      	mov	r0, r5
9000b568:	4621      	mov	r1, r4
9000b56a:	f7ff ff5d 	bl	9000b428 <__sflush_r>
9000b56e:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000b570:	07da      	lsls	r2, r3, #31
9000b572:	4605      	mov	r5, r0
9000b574:	d4e4      	bmi.n	9000b540 <_fflush_r+0xc>
9000b576:	89a3      	ldrh	r3, [r4, #12]
9000b578:	059b      	lsls	r3, r3, #22
9000b57a:	d4e1      	bmi.n	9000b540 <_fflush_r+0xc>
9000b57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000b57e:	f7ff fad9 	bl	9000ab34 <__retarget_lock_release_recursive>
9000b582:	e7dd      	b.n	9000b540 <_fflush_r+0xc>

9000b584 <__swhatbuf_r>:
9000b584:	b570      	push	{r4, r5, r6, lr}
9000b586:	460c      	mov	r4, r1
9000b588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000b58c:	2900      	cmp	r1, #0
9000b58e:	b096      	sub	sp, #88	; 0x58
9000b590:	4615      	mov	r5, r2
9000b592:	461e      	mov	r6, r3
9000b594:	da0d      	bge.n	9000b5b2 <__swhatbuf_r+0x2e>
9000b596:	89a3      	ldrh	r3, [r4, #12]
9000b598:	f013 0f80 	tst.w	r3, #128	; 0x80
9000b59c:	f04f 0100 	mov.w	r1, #0
9000b5a0:	bf0c      	ite	eq
9000b5a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
9000b5a6:	2340      	movne	r3, #64	; 0x40
9000b5a8:	2000      	movs	r0, #0
9000b5aa:	6031      	str	r1, [r6, #0]
9000b5ac:	602b      	str	r3, [r5, #0]
9000b5ae:	b016      	add	sp, #88	; 0x58
9000b5b0:	bd70      	pop	{r4, r5, r6, pc}
9000b5b2:	466a      	mov	r2, sp
9000b5b4:	f000 f896 	bl	9000b6e4 <_fstat_r>
9000b5b8:	2800      	cmp	r0, #0
9000b5ba:	dbec      	blt.n	9000b596 <__swhatbuf_r+0x12>
9000b5bc:	9901      	ldr	r1, [sp, #4]
9000b5be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
9000b5c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
9000b5c6:	4259      	negs	r1, r3
9000b5c8:	4159      	adcs	r1, r3
9000b5ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000b5ce:	e7eb      	b.n	9000b5a8 <__swhatbuf_r+0x24>

9000b5d0 <__smakebuf_r>:
9000b5d0:	898b      	ldrh	r3, [r1, #12]
9000b5d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
9000b5d4:	079d      	lsls	r5, r3, #30
9000b5d6:	4606      	mov	r6, r0
9000b5d8:	460c      	mov	r4, r1
9000b5da:	d507      	bpl.n	9000b5ec <__smakebuf_r+0x1c>
9000b5dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
9000b5e0:	6023      	str	r3, [r4, #0]
9000b5e2:	6123      	str	r3, [r4, #16]
9000b5e4:	2301      	movs	r3, #1
9000b5e6:	6163      	str	r3, [r4, #20]
9000b5e8:	b002      	add	sp, #8
9000b5ea:	bd70      	pop	{r4, r5, r6, pc}
9000b5ec:	ab01      	add	r3, sp, #4
9000b5ee:	466a      	mov	r2, sp
9000b5f0:	f7ff ffc8 	bl	9000b584 <__swhatbuf_r>
9000b5f4:	9900      	ldr	r1, [sp, #0]
9000b5f6:	4605      	mov	r5, r0
9000b5f8:	4630      	mov	r0, r6
9000b5fa:	f7fe ff47 	bl	9000a48c <_malloc_r>
9000b5fe:	b948      	cbnz	r0, 9000b614 <__smakebuf_r+0x44>
9000b600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000b604:	059a      	lsls	r2, r3, #22
9000b606:	d4ef      	bmi.n	9000b5e8 <__smakebuf_r+0x18>
9000b608:	f023 0303 	bic.w	r3, r3, #3
9000b60c:	f043 0302 	orr.w	r3, r3, #2
9000b610:	81a3      	strh	r3, [r4, #12]
9000b612:	e7e3      	b.n	9000b5dc <__smakebuf_r+0xc>
9000b614:	89a3      	ldrh	r3, [r4, #12]
9000b616:	6020      	str	r0, [r4, #0]
9000b618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000b61c:	81a3      	strh	r3, [r4, #12]
9000b61e:	9b00      	ldr	r3, [sp, #0]
9000b620:	6163      	str	r3, [r4, #20]
9000b622:	9b01      	ldr	r3, [sp, #4]
9000b624:	6120      	str	r0, [r4, #16]
9000b626:	b15b      	cbz	r3, 9000b640 <__smakebuf_r+0x70>
9000b628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000b62c:	4630      	mov	r0, r6
9000b62e:	f000 f86b 	bl	9000b708 <_isatty_r>
9000b632:	b128      	cbz	r0, 9000b640 <__smakebuf_r+0x70>
9000b634:	89a3      	ldrh	r3, [r4, #12]
9000b636:	f023 0303 	bic.w	r3, r3, #3
9000b63a:	f043 0301 	orr.w	r3, r3, #1
9000b63e:	81a3      	strh	r3, [r4, #12]
9000b640:	89a3      	ldrh	r3, [r4, #12]
9000b642:	431d      	orrs	r5, r3
9000b644:	81a5      	strh	r5, [r4, #12]
9000b646:	e7cf      	b.n	9000b5e8 <__smakebuf_r+0x18>

9000b648 <_putc_r>:
9000b648:	b570      	push	{r4, r5, r6, lr}
9000b64a:	460d      	mov	r5, r1
9000b64c:	4614      	mov	r4, r2
9000b64e:	4606      	mov	r6, r0
9000b650:	b118      	cbz	r0, 9000b65a <_putc_r+0x12>
9000b652:	6a03      	ldr	r3, [r0, #32]
9000b654:	b90b      	cbnz	r3, 9000b65a <_putc_r+0x12>
9000b656:	f7ff f831 	bl	9000a6bc <__sinit>
9000b65a:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000b65c:	07d8      	lsls	r0, r3, #31
9000b65e:	d405      	bmi.n	9000b66c <_putc_r+0x24>
9000b660:	89a3      	ldrh	r3, [r4, #12]
9000b662:	0599      	lsls	r1, r3, #22
9000b664:	d402      	bmi.n	9000b66c <_putc_r+0x24>
9000b666:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000b668:	f7ff fa63 	bl	9000ab32 <__retarget_lock_acquire_recursive>
9000b66c:	68a3      	ldr	r3, [r4, #8]
9000b66e:	3b01      	subs	r3, #1
9000b670:	2b00      	cmp	r3, #0
9000b672:	60a3      	str	r3, [r4, #8]
9000b674:	da05      	bge.n	9000b682 <_putc_r+0x3a>
9000b676:	69a2      	ldr	r2, [r4, #24]
9000b678:	4293      	cmp	r3, r2
9000b67a:	db12      	blt.n	9000b6a2 <_putc_r+0x5a>
9000b67c:	b2eb      	uxtb	r3, r5
9000b67e:	2b0a      	cmp	r3, #10
9000b680:	d00f      	beq.n	9000b6a2 <_putc_r+0x5a>
9000b682:	6823      	ldr	r3, [r4, #0]
9000b684:	1c5a      	adds	r2, r3, #1
9000b686:	6022      	str	r2, [r4, #0]
9000b688:	701d      	strb	r5, [r3, #0]
9000b68a:	b2ed      	uxtb	r5, r5
9000b68c:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000b68e:	07da      	lsls	r2, r3, #31
9000b690:	d405      	bmi.n	9000b69e <_putc_r+0x56>
9000b692:	89a3      	ldrh	r3, [r4, #12]
9000b694:	059b      	lsls	r3, r3, #22
9000b696:	d402      	bmi.n	9000b69e <_putc_r+0x56>
9000b698:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000b69a:	f7ff fa4b 	bl	9000ab34 <__retarget_lock_release_recursive>
9000b69e:	4628      	mov	r0, r5
9000b6a0:	bd70      	pop	{r4, r5, r6, pc}
9000b6a2:	4629      	mov	r1, r5
9000b6a4:	4622      	mov	r2, r4
9000b6a6:	4630      	mov	r0, r6
9000b6a8:	f7ff f917 	bl	9000a8da <__swbuf_r>
9000b6ac:	4605      	mov	r5, r0
9000b6ae:	e7ed      	b.n	9000b68c <_putc_r+0x44>

9000b6b0 <memmove>:
9000b6b0:	4288      	cmp	r0, r1
9000b6b2:	b510      	push	{r4, lr}
9000b6b4:	eb01 0402 	add.w	r4, r1, r2
9000b6b8:	d902      	bls.n	9000b6c0 <memmove+0x10>
9000b6ba:	4284      	cmp	r4, r0
9000b6bc:	4623      	mov	r3, r4
9000b6be:	d807      	bhi.n	9000b6d0 <memmove+0x20>
9000b6c0:	1e43      	subs	r3, r0, #1
9000b6c2:	42a1      	cmp	r1, r4
9000b6c4:	d008      	beq.n	9000b6d8 <memmove+0x28>
9000b6c6:	f811 2b01 	ldrb.w	r2, [r1], #1
9000b6ca:	f803 2f01 	strb.w	r2, [r3, #1]!
9000b6ce:	e7f8      	b.n	9000b6c2 <memmove+0x12>
9000b6d0:	4402      	add	r2, r0
9000b6d2:	4601      	mov	r1, r0
9000b6d4:	428a      	cmp	r2, r1
9000b6d6:	d100      	bne.n	9000b6da <memmove+0x2a>
9000b6d8:	bd10      	pop	{r4, pc}
9000b6da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000b6de:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000b6e2:	e7f7      	b.n	9000b6d4 <memmove+0x24>

9000b6e4 <_fstat_r>:
9000b6e4:	b538      	push	{r3, r4, r5, lr}
9000b6e6:	4d07      	ldr	r5, [pc, #28]	; (9000b704 <_fstat_r+0x20>)
9000b6e8:	2300      	movs	r3, #0
9000b6ea:	4604      	mov	r4, r0
9000b6ec:	4608      	mov	r0, r1
9000b6ee:	4611      	mov	r1, r2
9000b6f0:	602b      	str	r3, [r5, #0]
9000b6f2:	f000 f867 	bl	9000b7c4 <_fstat>
9000b6f6:	1c43      	adds	r3, r0, #1
9000b6f8:	d102      	bne.n	9000b700 <_fstat_r+0x1c>
9000b6fa:	682b      	ldr	r3, [r5, #0]
9000b6fc:	b103      	cbz	r3, 9000b700 <_fstat_r+0x1c>
9000b6fe:	6023      	str	r3, [r4, #0]
9000b700:	bd38      	pop	{r3, r4, r5, pc}
9000b702:	bf00      	nop
9000b704:	20014c88 	.word	0x20014c88

9000b708 <_isatty_r>:
9000b708:	b538      	push	{r3, r4, r5, lr}
9000b70a:	4d06      	ldr	r5, [pc, #24]	; (9000b724 <_isatty_r+0x1c>)
9000b70c:	2300      	movs	r3, #0
9000b70e:	4604      	mov	r4, r0
9000b710:	4608      	mov	r0, r1
9000b712:	602b      	str	r3, [r5, #0]
9000b714:	f000 f85e 	bl	9000b7d4 <_isatty>
9000b718:	1c43      	adds	r3, r0, #1
9000b71a:	d102      	bne.n	9000b722 <_isatty_r+0x1a>
9000b71c:	682b      	ldr	r3, [r5, #0]
9000b71e:	b103      	cbz	r3, 9000b722 <_isatty_r+0x1a>
9000b720:	6023      	str	r3, [r4, #0]
9000b722:	bd38      	pop	{r3, r4, r5, pc}
9000b724:	20014c88 	.word	0x20014c88

9000b728 <memcpy>:
9000b728:	440a      	add	r2, r1
9000b72a:	4291      	cmp	r1, r2
9000b72c:	f100 33ff 	add.w	r3, r0, #4294967295
9000b730:	d100      	bne.n	9000b734 <memcpy+0xc>
9000b732:	4770      	bx	lr
9000b734:	b510      	push	{r4, lr}
9000b736:	f811 4b01 	ldrb.w	r4, [r1], #1
9000b73a:	f803 4f01 	strb.w	r4, [r3, #1]!
9000b73e:	4291      	cmp	r1, r2
9000b740:	d1f9      	bne.n	9000b736 <memcpy+0xe>
9000b742:	bd10      	pop	{r4, pc}

9000b744 <_realloc_r>:
9000b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000b748:	4680      	mov	r8, r0
9000b74a:	4614      	mov	r4, r2
9000b74c:	460e      	mov	r6, r1
9000b74e:	b921      	cbnz	r1, 9000b75a <_realloc_r+0x16>
9000b750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000b754:	4611      	mov	r1, r2
9000b756:	f7fe be99 	b.w	9000a48c <_malloc_r>
9000b75a:	b92a      	cbnz	r2, 9000b768 <_realloc_r+0x24>
9000b75c:	f7ff f9ec 	bl	9000ab38 <_free_r>
9000b760:	4625      	mov	r5, r4
9000b762:	4628      	mov	r0, r5
9000b764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000b768:	f000 f81b 	bl	9000b7a2 <_malloc_usable_size_r>
9000b76c:	4284      	cmp	r4, r0
9000b76e:	4607      	mov	r7, r0
9000b770:	d802      	bhi.n	9000b778 <_realloc_r+0x34>
9000b772:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000b776:	d812      	bhi.n	9000b79e <_realloc_r+0x5a>
9000b778:	4621      	mov	r1, r4
9000b77a:	4640      	mov	r0, r8
9000b77c:	f7fe fe86 	bl	9000a48c <_malloc_r>
9000b780:	4605      	mov	r5, r0
9000b782:	2800      	cmp	r0, #0
9000b784:	d0ed      	beq.n	9000b762 <_realloc_r+0x1e>
9000b786:	42bc      	cmp	r4, r7
9000b788:	4622      	mov	r2, r4
9000b78a:	4631      	mov	r1, r6
9000b78c:	bf28      	it	cs
9000b78e:	463a      	movcs	r2, r7
9000b790:	f7ff ffca 	bl	9000b728 <memcpy>
9000b794:	4631      	mov	r1, r6
9000b796:	4640      	mov	r0, r8
9000b798:	f7ff f9ce 	bl	9000ab38 <_free_r>
9000b79c:	e7e1      	b.n	9000b762 <_realloc_r+0x1e>
9000b79e:	4635      	mov	r5, r6
9000b7a0:	e7df      	b.n	9000b762 <_realloc_r+0x1e>

9000b7a2 <_malloc_usable_size_r>:
9000b7a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000b7a6:	1f18      	subs	r0, r3, #4
9000b7a8:	2b00      	cmp	r3, #0
9000b7aa:	bfbc      	itt	lt
9000b7ac:	580b      	ldrlt	r3, [r1, r0]
9000b7ae:	18c0      	addlt	r0, r0, r3
9000b7b0:	4770      	bx	lr
	...

9000b7b4 <_close>:
9000b7b4:	4b02      	ldr	r3, [pc, #8]	; (9000b7c0 <_close+0xc>)
9000b7b6:	2258      	movs	r2, #88	; 0x58
9000b7b8:	601a      	str	r2, [r3, #0]
9000b7ba:	f04f 30ff 	mov.w	r0, #4294967295
9000b7be:	4770      	bx	lr
9000b7c0:	20014c88 	.word	0x20014c88

9000b7c4 <_fstat>:
9000b7c4:	4b02      	ldr	r3, [pc, #8]	; (9000b7d0 <_fstat+0xc>)
9000b7c6:	2258      	movs	r2, #88	; 0x58
9000b7c8:	601a      	str	r2, [r3, #0]
9000b7ca:	f04f 30ff 	mov.w	r0, #4294967295
9000b7ce:	4770      	bx	lr
9000b7d0:	20014c88 	.word	0x20014c88

9000b7d4 <_isatty>:
9000b7d4:	4b02      	ldr	r3, [pc, #8]	; (9000b7e0 <_isatty+0xc>)
9000b7d6:	2258      	movs	r2, #88	; 0x58
9000b7d8:	601a      	str	r2, [r3, #0]
9000b7da:	2000      	movs	r0, #0
9000b7dc:	4770      	bx	lr
9000b7de:	bf00      	nop
9000b7e0:	20014c88 	.word	0x20014c88

9000b7e4 <_lseek>:
9000b7e4:	4b02      	ldr	r3, [pc, #8]	; (9000b7f0 <_lseek+0xc>)
9000b7e6:	2258      	movs	r2, #88	; 0x58
9000b7e8:	601a      	str	r2, [r3, #0]
9000b7ea:	f04f 30ff 	mov.w	r0, #4294967295
9000b7ee:	4770      	bx	lr
9000b7f0:	20014c88 	.word	0x20014c88

9000b7f4 <_read>:
9000b7f4:	4b02      	ldr	r3, [pc, #8]	; (9000b800 <_read+0xc>)
9000b7f6:	2258      	movs	r2, #88	; 0x58
9000b7f8:	601a      	str	r2, [r3, #0]
9000b7fa:	f04f 30ff 	mov.w	r0, #4294967295
9000b7fe:	4770      	bx	lr
9000b800:	20014c88 	.word	0x20014c88

9000b804 <_sbrk>:
9000b804:	4a04      	ldr	r2, [pc, #16]	; (9000b818 <_sbrk+0x14>)
9000b806:	6811      	ldr	r1, [r2, #0]
9000b808:	4603      	mov	r3, r0
9000b80a:	b909      	cbnz	r1, 9000b810 <_sbrk+0xc>
9000b80c:	4903      	ldr	r1, [pc, #12]	; (9000b81c <_sbrk+0x18>)
9000b80e:	6011      	str	r1, [r2, #0]
9000b810:	6810      	ldr	r0, [r2, #0]
9000b812:	4403      	add	r3, r0
9000b814:	6013      	str	r3, [r2, #0]
9000b816:	4770      	bx	lr
9000b818:	20014c90 	.word	0x20014c90
9000b81c:	20014c98 	.word	0x20014c98

9000b820 <_write>:
9000b820:	4b02      	ldr	r3, [pc, #8]	; (9000b82c <_write+0xc>)
9000b822:	2258      	movs	r2, #88	; 0x58
9000b824:	601a      	str	r2, [r3, #0]
9000b826:	f04f 30ff 	mov.w	r0, #4294967295
9000b82a:	4770      	bx	lr
9000b82c:	20014c88 	.word	0x20014c88

9000b830 <_init>:
9000b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000b832:	bf00      	nop
9000b834:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000b836:	bc08      	pop	{r3}
9000b838:	469e      	mov	lr, r3
9000b83a:	4770      	bx	lr

9000b83c <_fini>:
9000b83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000b83e:	bf00      	nop
9000b840:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000b842:	bc08      	pop	{r3}
9000b844:	469e      	mov	lr, r3
9000b846:	4770      	bx	lr
