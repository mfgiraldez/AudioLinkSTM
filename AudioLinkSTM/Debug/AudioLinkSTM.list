
AudioLinkSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4e8  900001d0  900001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b3c  9000c6b8  9000c6b8  0001c6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  900111f4  900111f4  000211f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  900111fc  900111fc  000211fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90011200  90011200  00021200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000140  20000000  90011204  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b990  20000140  90011344  00030140  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  2000bad0  90011344  0003bad0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY
 11 .debug_info   000395ec  00000000  00000000  000301b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000081b9  00000000  00000000  0006979f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00015a5a  00000000  00000000  00071958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  000873b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ce0  00000000  00000000  00088ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f96f  00000000  00000000  0008abb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034ec9  00000000  00000000  000ba51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106f6c  00000000  00000000  000ef3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00005b3c  00000000  00000000  001f6354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006e  00000000  00000000  001fbe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001d0 <__do_global_dtors_aux>:
900001d0:	b510      	push	{r4, lr}
900001d2:	4c05      	ldr	r4, [pc, #20]	; (900001e8 <__do_global_dtors_aux+0x18>)
900001d4:	7823      	ldrb	r3, [r4, #0]
900001d6:	b933      	cbnz	r3, 900001e6 <__do_global_dtors_aux+0x16>
900001d8:	4b04      	ldr	r3, [pc, #16]	; (900001ec <__do_global_dtors_aux+0x1c>)
900001da:	b113      	cbz	r3, 900001e2 <__do_global_dtors_aux+0x12>
900001dc:	4804      	ldr	r0, [pc, #16]	; (900001f0 <__do_global_dtors_aux+0x20>)
900001de:	f3af 8000 	nop.w
900001e2:	2301      	movs	r3, #1
900001e4:	7023      	strb	r3, [r4, #0]
900001e6:	bd10      	pop	{r4, pc}
900001e8:	20000140 	.word	0x20000140
900001ec:	00000000 	.word	0x00000000
900001f0:	9000c6a0 	.word	0x9000c6a0

900001f4 <frame_dummy>:
900001f4:	b508      	push	{r3, lr}
900001f6:	4b03      	ldr	r3, [pc, #12]	; (90000204 <frame_dummy+0x10>)
900001f8:	b11b      	cbz	r3, 90000202 <frame_dummy+0xe>
900001fa:	4903      	ldr	r1, [pc, #12]	; (90000208 <frame_dummy+0x14>)
900001fc:	4803      	ldr	r0, [pc, #12]	; (9000020c <frame_dummy+0x18>)
900001fe:	f3af 8000 	nop.w
90000202:	bd08      	pop	{r3, pc}
90000204:	00000000 	.word	0x00000000
90000208:	20000144 	.word	0x20000144
9000020c:	9000c6a0 	.word	0x9000c6a0

90000210 <memchr>:
90000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000214:	2a10      	cmp	r2, #16
90000216:	db2b      	blt.n	90000270 <memchr+0x60>
90000218:	f010 0f07 	tst.w	r0, #7
9000021c:	d008      	beq.n	90000230 <memchr+0x20>
9000021e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000222:	3a01      	subs	r2, #1
90000224:	428b      	cmp	r3, r1
90000226:	d02d      	beq.n	90000284 <memchr+0x74>
90000228:	f010 0f07 	tst.w	r0, #7
9000022c:	b342      	cbz	r2, 90000280 <memchr+0x70>
9000022e:	d1f6      	bne.n	9000021e <memchr+0xe>
90000230:	b4f0      	push	{r4, r5, r6, r7}
90000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000023a:	f022 0407 	bic.w	r4, r2, #7
9000023e:	f07f 0700 	mvns.w	r7, #0
90000242:	2300      	movs	r3, #0
90000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000248:	3c08      	subs	r4, #8
9000024a:	ea85 0501 	eor.w	r5, r5, r1
9000024e:	ea86 0601 	eor.w	r6, r6, r1
90000252:	fa85 f547 	uadd8	r5, r5, r7
90000256:	faa3 f587 	sel	r5, r3, r7
9000025a:	fa86 f647 	uadd8	r6, r6, r7
9000025e:	faa5 f687 	sel	r6, r5, r7
90000262:	b98e      	cbnz	r6, 90000288 <memchr+0x78>
90000264:	d1ee      	bne.n	90000244 <memchr+0x34>
90000266:	bcf0      	pop	{r4, r5, r6, r7}
90000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000026c:	f002 0207 	and.w	r2, r2, #7
90000270:	b132      	cbz	r2, 90000280 <memchr+0x70>
90000272:	f810 3b01 	ldrb.w	r3, [r0], #1
90000276:	3a01      	subs	r2, #1
90000278:	ea83 0301 	eor.w	r3, r3, r1
9000027c:	b113      	cbz	r3, 90000284 <memchr+0x74>
9000027e:	d1f8      	bne.n	90000272 <memchr+0x62>
90000280:	2000      	movs	r0, #0
90000282:	4770      	bx	lr
90000284:	3801      	subs	r0, #1
90000286:	4770      	bx	lr
90000288:	2d00      	cmp	r5, #0
9000028a:	bf06      	itte	eq
9000028c:	4635      	moveq	r5, r6
9000028e:	3803      	subeq	r0, #3
90000290:	3807      	subne	r0, #7
90000292:	f015 0f01 	tst.w	r5, #1
90000296:	d107      	bne.n	900002a8 <memchr+0x98>
90000298:	3001      	adds	r0, #1
9000029a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000029e:	bf02      	ittt	eq
900002a0:	3001      	addeq	r0, #1
900002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900002a6:	3001      	addeq	r0, #1
900002a8:	bcf0      	pop	{r4, r5, r6, r7}
900002aa:	3801      	subs	r0, #1
900002ac:	4770      	bx	lr
900002ae:	bf00      	nop

900002b0 <__aeabi_uldivmod>:
900002b0:	b953      	cbnz	r3, 900002c8 <__aeabi_uldivmod+0x18>
900002b2:	b94a      	cbnz	r2, 900002c8 <__aeabi_uldivmod+0x18>
900002b4:	2900      	cmp	r1, #0
900002b6:	bf08      	it	eq
900002b8:	2800      	cmpeq	r0, #0
900002ba:	bf1c      	itt	ne
900002bc:	f04f 31ff 	movne.w	r1, #4294967295
900002c0:	f04f 30ff 	movne.w	r0, #4294967295
900002c4:	f000 b970 	b.w	900005a8 <__aeabi_idiv0>
900002c8:	f1ad 0c08 	sub.w	ip, sp, #8
900002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900002d0:	f000 f806 	bl	900002e0 <__udivmoddi4>
900002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
900002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900002dc:	b004      	add	sp, #16
900002de:	4770      	bx	lr

900002e0 <__udivmoddi4>:
900002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900002e4:	9e08      	ldr	r6, [sp, #32]
900002e6:	460d      	mov	r5, r1
900002e8:	4604      	mov	r4, r0
900002ea:	460f      	mov	r7, r1
900002ec:	2b00      	cmp	r3, #0
900002ee:	d14a      	bne.n	90000386 <__udivmoddi4+0xa6>
900002f0:	428a      	cmp	r2, r1
900002f2:	4694      	mov	ip, r2
900002f4:	d965      	bls.n	900003c2 <__udivmoddi4+0xe2>
900002f6:	fab2 f382 	clz	r3, r2
900002fa:	b143      	cbz	r3, 9000030e <__udivmoddi4+0x2e>
900002fc:	fa02 fc03 	lsl.w	ip, r2, r3
90000300:	f1c3 0220 	rsb	r2, r3, #32
90000304:	409f      	lsls	r7, r3
90000306:	fa20 f202 	lsr.w	r2, r0, r2
9000030a:	4317      	orrs	r7, r2
9000030c:	409c      	lsls	r4, r3
9000030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
90000312:	fa1f f58c 	uxth.w	r5, ip
90000316:	fbb7 f1fe 	udiv	r1, r7, lr
9000031a:	0c22      	lsrs	r2, r4, #16
9000031c:	fb0e 7711 	mls	r7, lr, r1, r7
90000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
90000324:	fb01 f005 	mul.w	r0, r1, r5
90000328:	4290      	cmp	r0, r2
9000032a:	d90a      	bls.n	90000342 <__udivmoddi4+0x62>
9000032c:	eb1c 0202 	adds.w	r2, ip, r2
90000330:	f101 37ff 	add.w	r7, r1, #4294967295
90000334:	f080 811c 	bcs.w	90000570 <__udivmoddi4+0x290>
90000338:	4290      	cmp	r0, r2
9000033a:	f240 8119 	bls.w	90000570 <__udivmoddi4+0x290>
9000033e:	3902      	subs	r1, #2
90000340:	4462      	add	r2, ip
90000342:	1a12      	subs	r2, r2, r0
90000344:	b2a4      	uxth	r4, r4
90000346:	fbb2 f0fe 	udiv	r0, r2, lr
9000034a:	fb0e 2210 	mls	r2, lr, r0, r2
9000034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
90000352:	fb00 f505 	mul.w	r5, r0, r5
90000356:	42a5      	cmp	r5, r4
90000358:	d90a      	bls.n	90000370 <__udivmoddi4+0x90>
9000035a:	eb1c 0404 	adds.w	r4, ip, r4
9000035e:	f100 32ff 	add.w	r2, r0, #4294967295
90000362:	f080 8107 	bcs.w	90000574 <__udivmoddi4+0x294>
90000366:	42a5      	cmp	r5, r4
90000368:	f240 8104 	bls.w	90000574 <__udivmoddi4+0x294>
9000036c:	4464      	add	r4, ip
9000036e:	3802      	subs	r0, #2
90000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
90000374:	1b64      	subs	r4, r4, r5
90000376:	2100      	movs	r1, #0
90000378:	b11e      	cbz	r6, 90000382 <__udivmoddi4+0xa2>
9000037a:	40dc      	lsrs	r4, r3
9000037c:	2300      	movs	r3, #0
9000037e:	e9c6 4300 	strd	r4, r3, [r6]
90000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000386:	428b      	cmp	r3, r1
90000388:	d908      	bls.n	9000039c <__udivmoddi4+0xbc>
9000038a:	2e00      	cmp	r6, #0
9000038c:	f000 80ed 	beq.w	9000056a <__udivmoddi4+0x28a>
90000390:	2100      	movs	r1, #0
90000392:	e9c6 0500 	strd	r0, r5, [r6]
90000396:	4608      	mov	r0, r1
90000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000039c:	fab3 f183 	clz	r1, r3
900003a0:	2900      	cmp	r1, #0
900003a2:	d149      	bne.n	90000438 <__udivmoddi4+0x158>
900003a4:	42ab      	cmp	r3, r5
900003a6:	d302      	bcc.n	900003ae <__udivmoddi4+0xce>
900003a8:	4282      	cmp	r2, r0
900003aa:	f200 80f8 	bhi.w	9000059e <__udivmoddi4+0x2be>
900003ae:	1a84      	subs	r4, r0, r2
900003b0:	eb65 0203 	sbc.w	r2, r5, r3
900003b4:	2001      	movs	r0, #1
900003b6:	4617      	mov	r7, r2
900003b8:	2e00      	cmp	r6, #0
900003ba:	d0e2      	beq.n	90000382 <__udivmoddi4+0xa2>
900003bc:	e9c6 4700 	strd	r4, r7, [r6]
900003c0:	e7df      	b.n	90000382 <__udivmoddi4+0xa2>
900003c2:	b902      	cbnz	r2, 900003c6 <__udivmoddi4+0xe6>
900003c4:	deff      	udf	#255	; 0xff
900003c6:	fab2 f382 	clz	r3, r2
900003ca:	2b00      	cmp	r3, #0
900003cc:	f040 8090 	bne.w	900004f0 <__udivmoddi4+0x210>
900003d0:	1a8a      	subs	r2, r1, r2
900003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
900003d6:	fa1f fe8c 	uxth.w	lr, ip
900003da:	2101      	movs	r1, #1
900003dc:	fbb2 f5f7 	udiv	r5, r2, r7
900003e0:	fb07 2015 	mls	r0, r7, r5, r2
900003e4:	0c22      	lsrs	r2, r4, #16
900003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900003ea:	fb0e f005 	mul.w	r0, lr, r5
900003ee:	4290      	cmp	r0, r2
900003f0:	d908      	bls.n	90000404 <__udivmoddi4+0x124>
900003f2:	eb1c 0202 	adds.w	r2, ip, r2
900003f6:	f105 38ff 	add.w	r8, r5, #4294967295
900003fa:	d202      	bcs.n	90000402 <__udivmoddi4+0x122>
900003fc:	4290      	cmp	r0, r2
900003fe:	f200 80cb 	bhi.w	90000598 <__udivmoddi4+0x2b8>
90000402:	4645      	mov	r5, r8
90000404:	1a12      	subs	r2, r2, r0
90000406:	b2a4      	uxth	r4, r4
90000408:	fbb2 f0f7 	udiv	r0, r2, r7
9000040c:	fb07 2210 	mls	r2, r7, r0, r2
90000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
90000414:	fb0e fe00 	mul.w	lr, lr, r0
90000418:	45a6      	cmp	lr, r4
9000041a:	d908      	bls.n	9000042e <__udivmoddi4+0x14e>
9000041c:	eb1c 0404 	adds.w	r4, ip, r4
90000420:	f100 32ff 	add.w	r2, r0, #4294967295
90000424:	d202      	bcs.n	9000042c <__udivmoddi4+0x14c>
90000426:	45a6      	cmp	lr, r4
90000428:	f200 80bb 	bhi.w	900005a2 <__udivmoddi4+0x2c2>
9000042c:	4610      	mov	r0, r2
9000042e:	eba4 040e 	sub.w	r4, r4, lr
90000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
90000436:	e79f      	b.n	90000378 <__udivmoddi4+0x98>
90000438:	f1c1 0720 	rsb	r7, r1, #32
9000043c:	408b      	lsls	r3, r1
9000043e:	fa22 fc07 	lsr.w	ip, r2, r7
90000442:	ea4c 0c03 	orr.w	ip, ip, r3
90000446:	fa05 f401 	lsl.w	r4, r5, r1
9000044a:	fa20 f307 	lsr.w	r3, r0, r7
9000044e:	40fd      	lsrs	r5, r7
90000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
90000454:	4323      	orrs	r3, r4
90000456:	fbb5 f8f9 	udiv	r8, r5, r9
9000045a:	fa1f fe8c 	uxth.w	lr, ip
9000045e:	fb09 5518 	mls	r5, r9, r8, r5
90000462:	0c1c      	lsrs	r4, r3, #16
90000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
90000468:	fb08 f50e 	mul.w	r5, r8, lr
9000046c:	42a5      	cmp	r5, r4
9000046e:	fa02 f201 	lsl.w	r2, r2, r1
90000472:	fa00 f001 	lsl.w	r0, r0, r1
90000476:	d90b      	bls.n	90000490 <__udivmoddi4+0x1b0>
90000478:	eb1c 0404 	adds.w	r4, ip, r4
9000047c:	f108 3aff 	add.w	sl, r8, #4294967295
90000480:	f080 8088 	bcs.w	90000594 <__udivmoddi4+0x2b4>
90000484:	42a5      	cmp	r5, r4
90000486:	f240 8085 	bls.w	90000594 <__udivmoddi4+0x2b4>
9000048a:	f1a8 0802 	sub.w	r8, r8, #2
9000048e:	4464      	add	r4, ip
90000490:	1b64      	subs	r4, r4, r5
90000492:	b29d      	uxth	r5, r3
90000494:	fbb4 f3f9 	udiv	r3, r4, r9
90000498:	fb09 4413 	mls	r4, r9, r3, r4
9000049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
900004a0:	fb03 fe0e 	mul.w	lr, r3, lr
900004a4:	45a6      	cmp	lr, r4
900004a6:	d908      	bls.n	900004ba <__udivmoddi4+0x1da>
900004a8:	eb1c 0404 	adds.w	r4, ip, r4
900004ac:	f103 35ff 	add.w	r5, r3, #4294967295
900004b0:	d26c      	bcs.n	9000058c <__udivmoddi4+0x2ac>
900004b2:	45a6      	cmp	lr, r4
900004b4:	d96a      	bls.n	9000058c <__udivmoddi4+0x2ac>
900004b6:	3b02      	subs	r3, #2
900004b8:	4464      	add	r4, ip
900004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
900004be:	fba3 9502 	umull	r9, r5, r3, r2
900004c2:	eba4 040e 	sub.w	r4, r4, lr
900004c6:	42ac      	cmp	r4, r5
900004c8:	46c8      	mov	r8, r9
900004ca:	46ae      	mov	lr, r5
900004cc:	d356      	bcc.n	9000057c <__udivmoddi4+0x29c>
900004ce:	d053      	beq.n	90000578 <__udivmoddi4+0x298>
900004d0:	b156      	cbz	r6, 900004e8 <__udivmoddi4+0x208>
900004d2:	ebb0 0208 	subs.w	r2, r0, r8
900004d6:	eb64 040e 	sbc.w	r4, r4, lr
900004da:	fa04 f707 	lsl.w	r7, r4, r7
900004de:	40ca      	lsrs	r2, r1
900004e0:	40cc      	lsrs	r4, r1
900004e2:	4317      	orrs	r7, r2
900004e4:	e9c6 7400 	strd	r7, r4, [r6]
900004e8:	4618      	mov	r0, r3
900004ea:	2100      	movs	r1, #0
900004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900004f0:	f1c3 0120 	rsb	r1, r3, #32
900004f4:	fa02 fc03 	lsl.w	ip, r2, r3
900004f8:	fa20 f201 	lsr.w	r2, r0, r1
900004fc:	fa25 f101 	lsr.w	r1, r5, r1
90000500:	409d      	lsls	r5, r3
90000502:	432a      	orrs	r2, r5
90000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000508:	fa1f fe8c 	uxth.w	lr, ip
9000050c:	fbb1 f0f7 	udiv	r0, r1, r7
90000510:	fb07 1510 	mls	r5, r7, r0, r1
90000514:	0c11      	lsrs	r1, r2, #16
90000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
9000051a:	fb00 f50e 	mul.w	r5, r0, lr
9000051e:	428d      	cmp	r5, r1
90000520:	fa04 f403 	lsl.w	r4, r4, r3
90000524:	d908      	bls.n	90000538 <__udivmoddi4+0x258>
90000526:	eb1c 0101 	adds.w	r1, ip, r1
9000052a:	f100 38ff 	add.w	r8, r0, #4294967295
9000052e:	d22f      	bcs.n	90000590 <__udivmoddi4+0x2b0>
90000530:	428d      	cmp	r5, r1
90000532:	d92d      	bls.n	90000590 <__udivmoddi4+0x2b0>
90000534:	3802      	subs	r0, #2
90000536:	4461      	add	r1, ip
90000538:	1b49      	subs	r1, r1, r5
9000053a:	b292      	uxth	r2, r2
9000053c:	fbb1 f5f7 	udiv	r5, r1, r7
90000540:	fb07 1115 	mls	r1, r7, r5, r1
90000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90000548:	fb05 f10e 	mul.w	r1, r5, lr
9000054c:	4291      	cmp	r1, r2
9000054e:	d908      	bls.n	90000562 <__udivmoddi4+0x282>
90000550:	eb1c 0202 	adds.w	r2, ip, r2
90000554:	f105 38ff 	add.w	r8, r5, #4294967295
90000558:	d216      	bcs.n	90000588 <__udivmoddi4+0x2a8>
9000055a:	4291      	cmp	r1, r2
9000055c:	d914      	bls.n	90000588 <__udivmoddi4+0x2a8>
9000055e:	3d02      	subs	r5, #2
90000560:	4462      	add	r2, ip
90000562:	1a52      	subs	r2, r2, r1
90000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
90000568:	e738      	b.n	900003dc <__udivmoddi4+0xfc>
9000056a:	4631      	mov	r1, r6
9000056c:	4630      	mov	r0, r6
9000056e:	e708      	b.n	90000382 <__udivmoddi4+0xa2>
90000570:	4639      	mov	r1, r7
90000572:	e6e6      	b.n	90000342 <__udivmoddi4+0x62>
90000574:	4610      	mov	r0, r2
90000576:	e6fb      	b.n	90000370 <__udivmoddi4+0x90>
90000578:	4548      	cmp	r0, r9
9000057a:	d2a9      	bcs.n	900004d0 <__udivmoddi4+0x1f0>
9000057c:	ebb9 0802 	subs.w	r8, r9, r2
90000580:	eb65 0e0c 	sbc.w	lr, r5, ip
90000584:	3b01      	subs	r3, #1
90000586:	e7a3      	b.n	900004d0 <__udivmoddi4+0x1f0>
90000588:	4645      	mov	r5, r8
9000058a:	e7ea      	b.n	90000562 <__udivmoddi4+0x282>
9000058c:	462b      	mov	r3, r5
9000058e:	e794      	b.n	900004ba <__udivmoddi4+0x1da>
90000590:	4640      	mov	r0, r8
90000592:	e7d1      	b.n	90000538 <__udivmoddi4+0x258>
90000594:	46d0      	mov	r8, sl
90000596:	e77b      	b.n	90000490 <__udivmoddi4+0x1b0>
90000598:	3d02      	subs	r5, #2
9000059a:	4462      	add	r2, ip
9000059c:	e732      	b.n	90000404 <__udivmoddi4+0x124>
9000059e:	4608      	mov	r0, r1
900005a0:	e70a      	b.n	900003b8 <__udivmoddi4+0xd8>
900005a2:	4464      	add	r4, ip
900005a4:	3802      	subs	r0, #2
900005a6:	e742      	b.n	9000042e <__udivmoddi4+0x14e>

900005a8 <__aeabi_idiv0>:
900005a8:	4770      	bx	lr
900005aa:	bf00      	nop

900005ac <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
900005ac:	4770      	bx	lr

900005ae <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
900005ae:	2000      	movs	r0, #0
900005b0:	4770      	bx	lr
	...

900005b4 <ft5336_Init>:
{
900005b4:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
900005b6:	4c05      	ldr	r4, [pc, #20]	; (900005cc <ft5336_Init+0x18>)
  TS_IO_Delay(200);
900005b8:	20c8      	movs	r0, #200	; 0xc8
900005ba:	f002 f803 	bl	900025c4 <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
900005be:	7823      	ldrb	r3, [r4, #0]
900005c0:	b91b      	cbnz	r3, 900005ca <ft5336_Init+0x16>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
900005c2:	f001 ffd5 	bl	90002570 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
900005c6:	2301      	movs	r3, #1
900005c8:	7023      	strb	r3, [r4, #0]
}
900005ca:	bd10      	pop	{r4, pc}
900005cc:	2000015c 	.word	0x2000015c

900005d0 <ft5336_TS_DetectTouch>:
{
900005d0:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
900005d2:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
900005d4:	2102      	movs	r1, #2
900005d6:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
900005d8:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
900005dc:	f001 ffdc 	bl	90002598 <TS_IO_Read>
900005e0:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
900005e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
900005e8:	f003 030f 	and.w	r3, r3, #15
900005ec:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
900005f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
900005f4:	2b05      	cmp	r3, #5
900005f6:	d901      	bls.n	900005fc <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
900005f8:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
900005fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
90000600:	4b03      	ldr	r3, [pc, #12]	; (90000610 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
90000602:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
90000606:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
90000608:	2200      	movs	r2, #0
9000060a:	709a      	strb	r2, [r3, #2]
}
9000060c:	b002      	add	sp, #8
9000060e:	bd10      	pop	{r4, pc}
90000610:	2000015c 	.word	0x2000015c

90000614 <ft5336_TS_GetXY>:
{
90000614:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90000618:	4c2b      	ldr	r4, [pc, #172]	; (900006c8 <ft5336_TS_GetXY+0xb4>)
{
9000061a:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
9000061c:	f04f 0800 	mov.w	r8, #0
{
90000620:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90000622:	78a3      	ldrb	r3, [r4, #2]
90000624:	7862      	ldrb	r2, [r4, #1]
  volatile uint8_t ucReadData = 0;
90000626:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
9000062a:	429a      	cmp	r2, r3
9000062c:	d945      	bls.n	900006ba <ft5336_TS_GetXY+0xa6>
    switch(ft5336_handle.currActiveTouchIdx)
9000062e:	2b09      	cmp	r3, #9
90000630:	d846      	bhi.n	900006c0 <ft5336_TS_GetXY+0xac>
90000632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
90000636:	005b      	lsls	r3, r3, #1
90000638:	b2db      	uxtb	r3, r3
9000063a:	1d19      	adds	r1, r3, #4
9000063c:	f103 0a03 	add.w	sl, r3, #3
90000640:	f103 0906 	add.w	r9, r3, #6
90000644:	3305      	adds	r3, #5
90000646:	b2c9      	uxtb	r1, r1
90000648:	fa5f fa8a 	uxtb.w	sl, sl
9000064c:	fa5f f989 	uxtb.w	r9, r9
90000650:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
90000654:	b2c6      	uxtb	r6, r0
90000656:	4630      	mov	r0, r6
90000658:	f001 ff9e 	bl	90002598 <TS_IO_Read>
9000065c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000660:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
90000664:	4651      	mov	r1, sl
90000666:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000668:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
9000066a:	f001 ff95 	bl	90002598 <TS_IO_Read>
9000066e:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000672:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000674:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000678:	4630      	mov	r0, r6
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
9000067a:	88a2      	ldrh	r2, [r4, #4]
9000067c:	021b      	lsls	r3, r3, #8
9000067e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90000682:	4313      	orrs	r3, r2
    *X = coord;
90000684:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
90000686:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
90000688:	f001 ff86 	bl	90002598 <TS_IO_Read>
9000068c:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
90000690:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000692:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
90000696:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
90000698:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
9000069a:	f001 ff7d 	bl	90002598 <TS_IO_Read>
9000069e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
900006a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
900006a6:	88a2      	ldrh	r2, [r4, #4]
900006a8:	021b      	lsls	r3, r3, #8
900006aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
900006ae:	4313      	orrs	r3, r2
900006b0:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
900006b2:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
900006b4:	78a3      	ldrb	r3, [r4, #2]
900006b6:	3301      	adds	r3, #1
900006b8:	70a3      	strb	r3, [r4, #2]
}
900006ba:	b002      	add	sp, #8
900006bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
900006c0:	46c1      	mov	r9, r8
900006c2:	46c2      	mov	sl, r8
900006c4:	4641      	mov	r1, r8
900006c6:	e7c5      	b.n	90000654 <ft5336_TS_GetXY+0x40>
900006c8:	2000015c 	.word	0x2000015c

900006cc <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
900006cc:	2201      	movs	r2, #1
900006ce:	21a4      	movs	r1, #164	; 0xa4
900006d0:	b2c0      	uxtb	r0, r0
900006d2:	f001 bf4f 	b.w	90002574 <TS_IO_Write>

900006d6 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
900006d6:	2200      	movs	r2, #0
900006d8:	21a4      	movs	r1, #164	; 0xa4
900006da:	b2c0      	uxtb	r0, r0
900006dc:	f001 bf4a 	b.w	90002574 <TS_IO_Write>

900006e0 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
900006e0:	f7ff bff9 	b.w	900006d6 <ft5336_TS_DisableIT>

900006e4 <ft5336_TS_ClearIT>:
900006e4:	4770      	bx	lr
	...

900006e8 <ft5336_ReadID>:
{
900006e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
900006ea:	2300      	movs	r3, #0
  return(ft5336_handle.i2cInitialized);
900006ec:	4c0f      	ldr	r4, [pc, #60]	; (9000072c <ft5336_ReadID+0x44>)
{
900006ee:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
900006f0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
900006f4:	7823      	ldrb	r3, [r4, #0]
900006f6:	b91b      	cbnz	r3, 90000700 <ft5336_ReadID+0x18>
    TS_IO_Init();
900006f8:	f001 ff3a 	bl	90002570 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
900006fc:	2301      	movs	r3, #1
900006fe:	7023      	strb	r3, [r4, #0]
{
90000700:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000702:	b2ed      	uxtb	r5, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
90000704:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000706:	21a8      	movs	r1, #168	; 0xa8
90000708:	4628      	mov	r0, r5
9000070a:	f001 ff45 	bl	90002598 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
9000070e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
90000712:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
90000716:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000071a:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
9000071c:	d103      	bne.n	90000726 <ft5336_ReadID+0x3e>
  return (ucReadId);
9000071e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
90000722:	b003      	add	sp, #12
90000724:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
90000726:	2b51      	cmp	r3, #81	; 0x51
90000728:	d1ec      	bne.n	90000704 <ft5336_ReadID+0x1c>
9000072a:	e7f8      	b.n	9000071e <ft5336_ReadID+0x36>
9000072c:	2000015c 	.word	0x2000015c

90000730 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
90000730:	2300      	movs	r3, #0
{
90000732:	b513      	push	{r0, r1, r4, lr}
90000734:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
90000736:	b2c0      	uxtb	r0, r0
90000738:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
9000073a:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
9000073e:	f001 ff2b 	bl	90002598 <TS_IO_Read>
90000742:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
90000746:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000074a:	6023      	str	r3, [r4, #0]
}
9000074c:	b002      	add	sp, #8
9000074e:	bd10      	pop	{r4, pc}

90000750 <ft5336_TS_GetTouchInfo>:
{
90000750:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90000754:	461d      	mov	r5, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
90000756:	4b1d      	ldr	r3, [pc, #116]	; (900007cc <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
90000758:	2400      	movs	r4, #0
{
9000075a:	4616      	mov	r6, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
9000075c:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
9000075e:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
90000762:	428b      	cmp	r3, r1
90000764:	d92c      	bls.n	900007c0 <ft5336_TS_GetTouchInfo+0x70>
    switch(touchIdx)
90000766:	2909      	cmp	r1, #9
90000768:	d82d      	bhi.n	900007c6 <ft5336_TS_GetTouchInfo+0x76>
9000076a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000076e:	004c      	lsls	r4, r1, #1
90000770:	b2e4      	uxtb	r4, r4
90000772:	1ce1      	adds	r1, r4, #3
90000774:	1de7      	adds	r7, r4, #7
90000776:	3408      	adds	r4, #8
90000778:	b2c9      	uxtb	r1, r1
9000077a:	b2ff      	uxtb	r7, r7
9000077c:	b2e4      	uxtb	r4, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
9000077e:	fa5f f880 	uxtb.w	r8, r0
90000782:	4640      	mov	r0, r8
90000784:	f001 ff08 	bl	90002598 <TS_IO_Read>
90000788:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
9000078c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
90000790:	4639      	mov	r1, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
90000792:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
90000794:	4640      	mov	r0, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
90000796:	099b      	lsrs	r3, r3, #6
90000798:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
9000079a:	f001 fefd 	bl	90002598 <TS_IO_Read>
9000079e:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
900007a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
900007a6:	4621      	mov	r1, r4
900007a8:	4640      	mov	r0, r8
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
900007aa:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
900007ac:	f001 fef4 	bl	90002598 <TS_IO_Read>
900007b0:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
900007b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
900007b8:	0912      	lsrs	r2, r2, #4
900007ba:	f002 0204 	and.w	r2, r2, #4
900007be:	602a      	str	r2, [r5, #0]
}
900007c0:	b002      	add	sp, #8
900007c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
900007c6:	4627      	mov	r7, r4
900007c8:	4621      	mov	r1, r4
900007ca:	e7d8      	b.n	9000077e <ft5336_TS_GetTouchInfo+0x2e>
900007cc:	2000015c 	.word	0x2000015c

900007d0 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
900007d0:	2901      	cmp	r1, #1
{
900007d2:	b507      	push	{r0, r1, r2, lr}
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
900007d4:	b2c0      	uxtb	r0, r0
  switch (Output) 
900007d6:	d00f      	beq.n	900007f8 <wm8994_SetOutputMode+0x28>
900007d8:	2903      	cmp	r1, #3
900007da:	d12f      	bne.n	9000083c <wm8994_SetOutputMode+0x6c>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
900007dc:	f640 720f 	movw	r2, #3855	; 0xf0f
900007e0:	2105      	movs	r1, #5
900007e2:	9001      	str	r0, [sp, #4]
900007e4:	f001 fe96 	bl	90002514 <AUDIO_IO_Write>
900007e8:	2201      	movs	r2, #1
900007ea:	f240 6101 	movw	r1, #1537	; 0x601
900007ee:	9801      	ldr	r0, [sp, #4]
900007f0:	f001 fe90 	bl	90002514 <AUDIO_IO_Write>
900007f4:	2201      	movs	r2, #1
900007f6:	e00c      	b.n	90000812 <wm8994_SetOutputMode+0x42>
900007f8:	f640 420c 	movw	r2, #3084	; 0xc0c
900007fc:	2105      	movs	r1, #5
900007fe:	9001      	str	r0, [sp, #4]
90000800:	f001 fe88 	bl	90002514 <AUDIO_IO_Write>
90000804:	2200      	movs	r2, #0
90000806:	f240 6101 	movw	r1, #1537	; 0x601
9000080a:	9801      	ldr	r0, [sp, #4]
9000080c:	f001 fe82 	bl	90002514 <AUDIO_IO_Write>
90000810:	2200      	movs	r2, #0
90000812:	f240 6102 	movw	r1, #1538	; 0x602
90000816:	9801      	ldr	r0, [sp, #4]
90000818:	f001 fe7c 	bl	90002514 <AUDIO_IO_Write>
9000081c:	2202      	movs	r2, #2
9000081e:	f240 6104 	movw	r1, #1540	; 0x604
90000822:	9801      	ldr	r0, [sp, #4]
90000824:	f001 fe76 	bl	90002514 <AUDIO_IO_Write>
90000828:	2202      	movs	r2, #2
9000082a:	9801      	ldr	r0, [sp, #4]
9000082c:	f240 6105 	movw	r1, #1541	; 0x605
90000830:	f001 fe70 	bl	90002514 <AUDIO_IO_Write>
}
90000834:	2000      	movs	r0, #0
90000836:	b003      	add	sp, #12
90000838:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
9000083c:	f240 3203 	movw	r2, #771	; 0x303
90000840:	2105      	movs	r1, #5
90000842:	9001      	str	r0, [sp, #4]
90000844:	f001 fe66 	bl	90002514 <AUDIO_IO_Write>
90000848:	2201      	movs	r2, #1
9000084a:	f240 6101 	movw	r1, #1537	; 0x601
9000084e:	9801      	ldr	r0, [sp, #4]
90000850:	f001 fe60 	bl	90002514 <AUDIO_IO_Write>
90000854:	2201      	movs	r2, #1
90000856:	f240 6102 	movw	r1, #1538	; 0x602
9000085a:	9801      	ldr	r0, [sp, #4]
9000085c:	f001 fe5a 	bl	90002514 <AUDIO_IO_Write>
90000860:	2200      	movs	r2, #0
90000862:	f240 6104 	movw	r1, #1540	; 0x604
90000866:	9801      	ldr	r0, [sp, #4]
90000868:	f001 fe54 	bl	90002514 <AUDIO_IO_Write>
9000086c:	2200      	movs	r2, #0
9000086e:	e7dc      	b.n	9000082a <wm8994_SetOutputMode+0x5a>

90000870 <wm8994_SetFrequency>:
{
90000870:	b508      	push	{r3, lr}
  switch (AudioFreq)
90000872:	f245 6322 	movw	r3, #22050	; 0x5622
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
90000876:	b2c0      	uxtb	r0, r0
  switch (AudioFreq)
90000878:	4299      	cmp	r1, r3
9000087a:	d025      	beq.n	900008c8 <wm8994_SetFrequency+0x58>
9000087c:	d80b      	bhi.n	90000896 <wm8994_SetFrequency+0x26>
9000087e:	f642 3311 	movw	r3, #11025	; 0x2b11
90000882:	4299      	cmp	r1, r3
90000884:	d01e      	beq.n	900008c4 <wm8994_SetFrequency+0x54>
90000886:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
9000088a:	d017      	beq.n	900008bc <wm8994_SetFrequency+0x4c>
9000088c:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
90000890:	d00d      	beq.n	900008ae <wm8994_SetFrequency+0x3e>
 AUDIO_IO_Write(Addr, Reg, Value);
90000892:	2283      	movs	r2, #131	; 0x83
90000894:	e00c      	b.n	900008b0 <wm8994_SetFrequency+0x40>
  switch (AudioFreq)
90000896:	f64a 4344 	movw	r3, #44100	; 0xac44
9000089a:	4299      	cmp	r1, r3
9000089c:	d016      	beq.n	900008cc <wm8994_SetFrequency+0x5c>
9000089e:	4b0c      	ldr	r3, [pc, #48]	; (900008d0 <wm8994_SetFrequency+0x60>)
900008a0:	4299      	cmp	r1, r3
900008a2:	d00d      	beq.n	900008c0 <wm8994_SetFrequency+0x50>
900008a4:	f5b1 4ffa 	cmp.w	r1, #32000	; 0x7d00
900008a8:	d1f3      	bne.n	90000892 <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
900008aa:	2263      	movs	r2, #99	; 0x63
900008ac:	e000      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008ae:	2203      	movs	r2, #3
900008b0:	f44f 7104 	mov.w	r1, #528	; 0x210
900008b4:	f001 fe2e 	bl	90002514 <AUDIO_IO_Write>
}
900008b8:	2000      	movs	r0, #0
900008ba:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
900008bc:	2233      	movs	r2, #51	; 0x33
900008be:	e7f7      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c0:	22a3      	movs	r2, #163	; 0xa3
900008c2:	e7f5      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c4:	2213      	movs	r2, #19
900008c6:	e7f3      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008c8:	2243      	movs	r2, #67	; 0x43
900008ca:	e7f1      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008cc:	2273      	movs	r2, #115	; 0x73
900008ce:	e7ef      	b.n	900008b0 <wm8994_SetFrequency+0x40>
900008d0:	00017700 	.word	0x00017700

900008d4 <wm8994_Reset>:
900008d4:	2200      	movs	r2, #0
900008d6:	b2c0      	uxtb	r0, r0
{
900008d8:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
900008da:	4611      	mov	r1, r2
900008dc:	f001 fe1a 	bl	90002514 <AUDIO_IO_Write>
  outputEnabled = 0;
900008e0:	4b02      	ldr	r3, [pc, #8]	; (900008ec <wm8994_Reset+0x18>)
900008e2:	2000      	movs	r0, #0
  inputEnabled=0;
900008e4:	e9c3 0000 	strd	r0, r0, [r3]
}
900008e8:	bd08      	pop	{r3, pc}
900008ea:	bf00      	nop
900008ec:	20000164 	.word	0x20000164

900008f0 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
900008f0:	f001 be0e 	b.w	90002510 <AUDIO_IO_DeInit>

900008f4 <wm8994_ReadID>:
{
900008f4:	b510      	push	{r4, lr}
900008f6:	4604      	mov	r4, r0
  AUDIO_IO_Init();
900008f8:	f001 fe04 	bl	90002504 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
900008fc:	2100      	movs	r1, #0
900008fe:	b2e0      	uxtb	r0, r4
90000900:	f001 fe1c 	bl	9000253c <AUDIO_IO_Read>
}
90000904:	bd10      	pop	{r4, pc}
	...

90000908 <wm8994_SetMute>:
  if (outputEnabled != 0)
90000908:	4b10      	ldr	r3, [pc, #64]	; (9000094c <wm8994_SetMute+0x44>)
9000090a:	681b      	ldr	r3, [r3, #0]
{
9000090c:	b507      	push	{r0, r1, r2, lr}
  if (outputEnabled != 0)
9000090e:	b183      	cbz	r3, 90000932 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
90000910:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
90000912:	b2c0      	uxtb	r0, r0
    if(Cmd == AUDIO_MUTE_ON)
90000914:	d111      	bne.n	9000093a <wm8994_SetMute+0x32>
 AUDIO_IO_Write(Addr, Reg, Value);
90000916:	f44f 7200 	mov.w	r2, #512	; 0x200
9000091a:	f44f 6184 	mov.w	r1, #1056	; 0x420
9000091e:	9001      	str	r0, [sp, #4]
90000920:	f001 fdf8 	bl	90002514 <AUDIO_IO_Write>
90000924:	f44f 7200 	mov.w	r2, #512	; 0x200
90000928:	f240 4122 	movw	r1, #1058	; 0x422
9000092c:	9801      	ldr	r0, [sp, #4]
9000092e:	f001 fdf1 	bl	90002514 <AUDIO_IO_Write>
}
90000932:	2000      	movs	r0, #0
90000934:	b003      	add	sp, #12
90000936:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
9000093a:	2210      	movs	r2, #16
9000093c:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000940:	9001      	str	r0, [sp, #4]
90000942:	f001 fde7 	bl	90002514 <AUDIO_IO_Write>
90000946:	2210      	movs	r2, #16
90000948:	e7ee      	b.n	90000928 <wm8994_SetMute+0x20>
9000094a:	bf00      	nop
9000094c:	20000164 	.word	0x20000164

90000950 <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000950:	2100      	movs	r1, #0
90000952:	f7ff bfd9 	b.w	90000908 <wm8994_SetMute>

90000956 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000956:	2100      	movs	r1, #0
90000958:	f7ff bfd6 	b.w	90000908 <wm8994_SetMute>

9000095c <wm8994_Pause>:
{  
9000095c:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
9000095e:	2101      	movs	r1, #1
{  
90000960:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000962:	f7ff ffd1 	bl	90000908 <wm8994_SetMute>
90000966:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
90000968:	2201      	movs	r2, #1
9000096a:	b2e8      	uxtb	r0, r5
9000096c:	2102      	movs	r1, #2
9000096e:	f001 fdd1 	bl	90002514 <AUDIO_IO_Write>
}
90000972:	4620      	mov	r0, r4
90000974:	bd38      	pop	{r3, r4, r5, pc}
	...

90000978 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000978:	2964      	cmp	r1, #100	; 0x64
9000097a:	f04f 0264 	mov.w	r2, #100	; 0x64
9000097e:	bf98      	it	ls
90000980:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
{
90000984:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000988:	bf98      	it	ls
9000098a:	fbb3 f3f2 	udivls	r3, r3, r2
  if (outputEnabled != 0)
9000098e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 90000a7c <wm8994_SetVolume+0x104>
{
90000992:	4605      	mov	r5, r0
90000994:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
90000996:	bf98      	it	ls
90000998:	b2df      	uxtbls	r7, r3
  if (outputEnabled != 0)
9000099a:	f8d8 6000 	ldr.w	r6, [r8]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
9000099e:	bf88      	it	hi
900009a0:	4617      	movhi	r7, r2
  if (outputEnabled != 0)
900009a2:	b32e      	cbz	r6, 900009f0 <wm8994_SetVolume+0x78>
    if(convertedvol > 0x3E)
900009a4:	2f3e      	cmp	r7, #62	; 0x3e
900009a6:	d91d      	bls.n	900009e4 <wm8994_SetVolume+0x6c>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
900009a8:	2100      	movs	r1, #0
900009aa:	f7ff ffad 	bl	90000908 <wm8994_SetMute>
900009ae:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
900009b0:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
900009b2:	f240 127f 	movw	r2, #383	; 0x17f
900009b6:	211c      	movs	r1, #28
900009b8:	9000      	str	r0, [sp, #0]
900009ba:	f001 fdab 	bl	90002514 <AUDIO_IO_Write>
900009be:	f240 127f 	movw	r2, #383	; 0x17f
900009c2:	211d      	movs	r1, #29
900009c4:	9800      	ldr	r0, [sp, #0]
900009c6:	f001 fda5 	bl	90002514 <AUDIO_IO_Write>
900009ca:	f240 127f 	movw	r2, #383	; 0x17f
900009ce:	2126      	movs	r1, #38	; 0x26
900009d0:	9800      	ldr	r0, [sp, #0]
900009d2:	f001 fd9f 	bl	90002514 <AUDIO_IO_Write>
900009d6:	f240 127f 	movw	r2, #383	; 0x17f
900009da:	2127      	movs	r1, #39	; 0x27
900009dc:	9800      	ldr	r0, [sp, #0]
900009de:	f001 fd99 	bl	90002514 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
900009e2:	e005      	b.n	900009f0 <wm8994_SetVolume+0x78>
    else if (Volume == 0)
900009e4:	2900      	cmp	r1, #0
900009e6:	d130      	bne.n	90000a4a <wm8994_SetVolume+0xd2>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
900009e8:	2101      	movs	r1, #1
900009ea:	f7ff ff8d 	bl	90000908 <wm8994_SetMute>
900009ee:	4606      	mov	r6, r0
  if (inputEnabled != 0)
900009f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
900009f4:	b32b      	cbz	r3, 90000a42 <wm8994_SetVolume+0xca>
    convertedvol = VOLUME_IN_CONVERT(Volume);
900009f6:	2c63      	cmp	r4, #99	; 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
900009f8:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
900009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
900009fe:	bf9a      	itte	ls
90000a00:	ebc4 1204 	rsbls	r2, r4, r4, lsl #4
90000a04:	2364      	movls	r3, #100	; 0x64
90000a06:	22ef      	movhi	r2, #239	; 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
90000a08:	9000      	str	r0, [sp, #0]
    convertedvol = VOLUME_IN_CONVERT(Volume);
90000a0a:	bf9e      	ittt	ls
90000a0c:	0112      	lslls	r2, r2, #4
90000a0e:	fbb2 f2f3 	udivls	r2, r2, r3
90000a12:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
90000a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
90000a18:	9201      	str	r2, [sp, #4]
90000a1a:	f001 fd7b 	bl	90002514 <AUDIO_IO_Write>
90000a1e:	9a01      	ldr	r2, [sp, #4]
90000a20:	f240 4101 	movw	r1, #1025	; 0x401
90000a24:	9800      	ldr	r0, [sp, #0]
90000a26:	f001 fd75 	bl	90002514 <AUDIO_IO_Write>
90000a2a:	9a01      	ldr	r2, [sp, #4]
90000a2c:	f240 4104 	movw	r1, #1028	; 0x404
90000a30:	9800      	ldr	r0, [sp, #0]
90000a32:	f001 fd6f 	bl	90002514 <AUDIO_IO_Write>
90000a36:	9a01      	ldr	r2, [sp, #4]
90000a38:	f240 4105 	movw	r1, #1029	; 0x405
90000a3c:	9800      	ldr	r0, [sp, #0]
90000a3e:	f001 fd69 	bl	90002514 <AUDIO_IO_Write>
}
90000a42:	4630      	mov	r0, r6
90000a44:	b002      	add	sp, #8
90000a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000a4a:	2100      	movs	r1, #0
90000a4c:	f7ff ff5c 	bl	90000908 <wm8994_SetMute>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
90000a50:	f447 72a0 	orr.w	r2, r7, #320	; 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
90000a54:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
90000a56:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
90000a58:	211c      	movs	r1, #28
90000a5a:	9201      	str	r2, [sp, #4]
90000a5c:	9000      	str	r0, [sp, #0]
90000a5e:	f001 fd59 	bl	90002514 <AUDIO_IO_Write>
90000a62:	9a01      	ldr	r2, [sp, #4]
90000a64:	211d      	movs	r1, #29
90000a66:	9800      	ldr	r0, [sp, #0]
90000a68:	f001 fd54 	bl	90002514 <AUDIO_IO_Write>
90000a6c:	9a01      	ldr	r2, [sp, #4]
90000a6e:	2126      	movs	r1, #38	; 0x26
90000a70:	9800      	ldr	r0, [sp, #0]
90000a72:	f001 fd4f 	bl	90002514 <AUDIO_IO_Write>
90000a76:	9a01      	ldr	r2, [sp, #4]
90000a78:	e7af      	b.n	900009da <wm8994_SetVolume+0x62>
90000a7a:	bf00      	nop
90000a7c:	20000164 	.word	0x20000164

90000a80 <wm8994_Init>:
{
90000a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000a84:	4681      	mov	r9, r0
90000a86:	4698      	mov	r8, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
90000a88:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
{
90000a8c:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
90000a8e:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
90000a92:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
90000a94:	f001 fd36 	bl	90002504 <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
90000a98:	2203      	movs	r2, #3
90000a9a:	f44f 7181 	mov.w	r1, #258	; 0x102
90000a9e:	4620      	mov	r0, r4
90000aa0:	f001 fd38 	bl	90002514 <AUDIO_IO_Write>
90000aa4:	2200      	movs	r2, #0
90000aa6:	f640 0117 	movw	r1, #2071	; 0x817
90000aaa:	4620      	mov	r0, r4
90000aac:	f001 fd32 	bl	90002514 <AUDIO_IO_Write>
90000ab0:	2200      	movs	r2, #0
90000ab2:	f44f 7181 	mov.w	r1, #258	; 0x102
90000ab6:	4620      	mov	r0, r4
90000ab8:	f001 fd2c 	bl	90002514 <AUDIO_IO_Write>
90000abc:	226c      	movs	r2, #108	; 0x6c
90000abe:	2139      	movs	r1, #57	; 0x39
90000ac0:	4620      	mov	r0, r4
90000ac2:	f001 fd27 	bl	90002514 <AUDIO_IO_Write>
  if (input_device > 0)
90000ac6:	b3c5      	cbz	r5, 90000b3a <wm8994_Init+0xba>
 AUDIO_IO_Write(Addr, Reg, Value);
90000ac8:	2213      	movs	r2, #19
90000aca:	2101      	movs	r1, #1
90000acc:	4620      	mov	r0, r4
90000ace:	f001 fd21 	bl	90002514 <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
90000ad2:	2032      	movs	r0, #50	; 0x32
90000ad4:	f8df b4ec 	ldr.w	fp, [pc, #1260]	; 90000fc4 <wm8994_Init+0x544>
90000ad8:	f001 fd48 	bl	9000256c <AUDIO_IO_Delay>
  if (output_device > 0)
90000adc:	2e00      	cmp	r6, #0
90000ade:	f000 809a 	beq.w	90000c16 <wm8994_Init+0x196>
    outputEnabled = 1;
90000ae2:	2701      	movs	r7, #1
    switch (output_device)
90000ae4:	2e02      	cmp	r6, #2
    outputEnabled = 1;
90000ae6:	f8cb 7000 	str.w	r7, [fp]
    switch (output_device)
90000aea:	d07a      	beq.n	90000be2 <wm8994_Init+0x162>
90000aec:	2e03      	cmp	r6, #3
90000aee:	d026      	beq.n	90000b3e <wm8994_Init+0xbe>
90000af0:	42be      	cmp	r6, r7
90000af2:	d176      	bne.n	90000be2 <wm8994_Init+0x162>
 AUDIO_IO_Write(Addr, Reg, Value);
90000af4:	f640 420c 	movw	r2, #3084	; 0xc0c
90000af8:	2105      	movs	r1, #5
90000afa:	4620      	mov	r0, r4
90000afc:	f001 fd0a 	bl	90002514 <AUDIO_IO_Write>
90000b00:	2200      	movs	r2, #0
90000b02:	f240 6101 	movw	r1, #1537	; 0x601
90000b06:	4620      	mov	r0, r4
90000b08:	f001 fd04 	bl	90002514 <AUDIO_IO_Write>
90000b0c:	2200      	movs	r2, #0
90000b0e:	f240 6102 	movw	r1, #1538	; 0x602
90000b12:	4620      	mov	r0, r4
90000b14:	f001 fcfe 	bl	90002514 <AUDIO_IO_Write>
90000b18:	2202      	movs	r2, #2
90000b1a:	f240 6104 	movw	r1, #1540	; 0x604
90000b1e:	4620      	mov	r0, r4
90000b20:	f001 fcf8 	bl	90002514 <AUDIO_IO_Write>
90000b24:	2202      	movs	r2, #2
90000b26:	f240 6105 	movw	r1, #1541	; 0x605
90000b2a:	4620      	mov	r0, r4
90000b2c:	f001 fcf2 	bl	90002514 <AUDIO_IO_Write>
  if (input_device > 0)
90000b30:	bb3d      	cbnz	r5, 90000b82 <wm8994_Init+0x102>
    inputEnabled = 0;
90000b32:	462f      	mov	r7, r5
90000b34:	f8cb 5004 	str.w	r5, [fp, #4]
90000b38:	e032      	b.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000b3a:	2203      	movs	r2, #3
90000b3c:	e7c5      	b.n	90000aca <wm8994_Init+0x4a>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000b3e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000b42:	f640 720f 	movw	r2, #3855	; 0xf0f
90000b46:	f04f 0105 	mov.w	r1, #5
90000b4a:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000b4c:	d13f      	bne.n	90000bce <wm8994_Init+0x14e>
 AUDIO_IO_Write(Addr, Reg, Value);
90000b4e:	f001 fce1 	bl	90002514 <AUDIO_IO_Write>
90000b52:	4632      	mov	r2, r6
90000b54:	f240 6101 	movw	r1, #1537	; 0x601
90000b58:	4620      	mov	r0, r4
90000b5a:	f001 fcdb 	bl	90002514 <AUDIO_IO_Write>
90000b5e:	4632      	mov	r2, r6
90000b60:	f240 6102 	movw	r1, #1538	; 0x602
90000b64:	4620      	mov	r0, r4
90000b66:	f001 fcd5 	bl	90002514 <AUDIO_IO_Write>
90000b6a:	4632      	mov	r2, r6
90000b6c:	f240 6104 	movw	r1, #1540	; 0x604
90000b70:	4620      	mov	r0, r4
90000b72:	f001 fccf 	bl	90002514 <AUDIO_IO_Write>
90000b76:	4632      	mov	r2, r6
90000b78:	f240 6105 	movw	r1, #1541	; 0x605
90000b7c:	4620      	mov	r0, r4
90000b7e:	f001 fcc9 	bl	90002514 <AUDIO_IO_Write>
    inputEnabled = 1;
90000b82:	2701      	movs	r7, #1
    switch (input_device)
90000b84:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    inputEnabled = 1;
90000b88:	f8cb 7004 	str.w	r7, [fp, #4]
    switch (input_device)
90000b8c:	f000 809d 	beq.w	90000cca <wm8994_Init+0x24a>
90000b90:	d844      	bhi.n	90000c1c <wm8994_Init+0x19c>
90000b92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90000b96:	f000 80c7 	beq.w	90000d28 <wm8994_Init+0x2a8>
90000b9a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
90000b9e:	d06e      	beq.n	90000c7e <wm8994_Init+0x1fe>
  switch (AudioFreq)
90000ba0:	f5b8 4ffa 	cmp.w	r8, #32000	; 0x7d00
90000ba4:	f000 81cd 	beq.w	90000f42 <wm8994_Init+0x4c2>
90000ba8:	f200 80c8 	bhi.w	90000d3c <wm8994_Init+0x2bc>
90000bac:	f5b8 5f7a 	cmp.w	r8, #16000	; 0x3e80
90000bb0:	f000 81c5 	beq.w	90000f3e <wm8994_Init+0x4be>
90000bb4:	f200 80bb 	bhi.w	90000d2e <wm8994_Init+0x2ae>
90000bb8:	f5b8 5ffa 	cmp.w	r8, #8000	; 0x1f40
90000bbc:	f000 80ce 	beq.w	90000d5c <wm8994_Init+0x2dc>
90000bc0:	f642 3311 	movw	r3, #11025	; 0x2b11
90000bc4:	4598      	cmp	r8, r3
90000bc6:	f000 81c0 	beq.w	90000f4a <wm8994_Init+0x4ca>
 AUDIO_IO_Write(Addr, Reg, Value);
90000bca:	2283      	movs	r2, #131	; 0x83
90000bcc:	e0c7      	b.n	90000d5e <wm8994_Init+0x2de>
90000bce:	f001 fca1 	bl	90002514 <AUDIO_IO_Write>
90000bd2:	463a      	mov	r2, r7
90000bd4:	f240 6101 	movw	r1, #1537	; 0x601
90000bd8:	4620      	mov	r0, r4
90000bda:	f001 fc9b 	bl	90002514 <AUDIO_IO_Write>
90000bde:	463a      	mov	r2, r7
90000be0:	e795      	b.n	90000b0e <wm8994_Init+0x8e>
90000be2:	f240 3203 	movw	r2, #771	; 0x303
90000be6:	2105      	movs	r1, #5
90000be8:	4620      	mov	r0, r4
90000bea:	f001 fc93 	bl	90002514 <AUDIO_IO_Write>
90000bee:	463a      	mov	r2, r7
90000bf0:	f240 6101 	movw	r1, #1537	; 0x601
90000bf4:	4620      	mov	r0, r4
90000bf6:	f001 fc8d 	bl	90002514 <AUDIO_IO_Write>
90000bfa:	463a      	mov	r2, r7
90000bfc:	f240 6102 	movw	r1, #1538	; 0x602
90000c00:	4620      	mov	r0, r4
90000c02:	f001 fc87 	bl	90002514 <AUDIO_IO_Write>
90000c06:	2200      	movs	r2, #0
90000c08:	f240 6104 	movw	r1, #1540	; 0x604
90000c0c:	4620      	mov	r0, r4
90000c0e:	f001 fc81 	bl	90002514 <AUDIO_IO_Write>
90000c12:	2200      	movs	r2, #0
90000c14:	e787      	b.n	90000b26 <wm8994_Init+0xa6>
    outputEnabled = 0;
90000c16:	f8cb 6000 	str.w	r6, [fp]
90000c1a:	e789      	b.n	90000b30 <wm8994_Init+0xb0>
    switch (input_device)
90000c1c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
90000c20:	d1be      	bne.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000c22:	f640 723c 	movw	r2, #3900	; 0xf3c
90000c26:	2104      	movs	r1, #4
90000c28:	4620      	mov	r0, r4
90000c2a:	f001 fc73 	bl	90002514 <AUDIO_IO_Write>
90000c2e:	22db      	movs	r2, #219	; 0xdb
90000c30:	f44f 618a 	mov.w	r1, #1104	; 0x450
90000c34:	4620      	mov	r0, r4
90000c36:	f001 fc6d 	bl	90002514 <AUDIO_IO_Write>
90000c3a:	22db      	movs	r2, #219	; 0xdb
90000c3c:	f44f 6188 	mov.w	r1, #1088	; 0x440
90000c40:	4620      	mov	r0, r4
90000c42:	f001 fc67 	bl	90002514 <AUDIO_IO_Write>
90000c46:	f246 32a0 	movw	r2, #25504	; 0x63a0
90000c4a:	2102      	movs	r1, #2
90000c4c:	4620      	mov	r0, r4
90000c4e:	f001 fc61 	bl	90002514 <AUDIO_IO_Write>
90000c52:	2202      	movs	r2, #2
90000c54:	f240 6106 	movw	r1, #1542	; 0x606
90000c58:	4620      	mov	r0, r4
90000c5a:	f001 fc5b 	bl	90002514 <AUDIO_IO_Write>
90000c5e:	2202      	movs	r2, #2
90000c60:	f240 6107 	movw	r1, #1543	; 0x607
90000c64:	4620      	mov	r0, r4
90000c66:	f001 fc55 	bl	90002514 <AUDIO_IO_Write>
90000c6a:	2202      	movs	r2, #2
90000c6c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
90000c70:	4620      	mov	r0, r4
90000c72:	f001 fc4f 	bl	90002514 <AUDIO_IO_Write>
90000c76:	2202      	movs	r2, #2
90000c78:	f240 6109 	movw	r1, #1545	; 0x609
90000c7c:	e04f      	b.n	90000d1e <wm8994_Init+0x29e>
90000c7e:	f44f 6243 	mov.w	r2, #3120	; 0xc30
90000c82:	2104      	movs	r1, #4
90000c84:	4620      	mov	r0, r4
90000c86:	f001 fc45 	bl	90002514 <AUDIO_IO_Write>
90000c8a:	22db      	movs	r2, #219	; 0xdb
90000c8c:	f44f 618a 	mov.w	r1, #1104	; 0x450
90000c90:	4620      	mov	r0, r4
90000c92:	f001 fc3f 	bl	90002514 <AUDIO_IO_Write>
90000c96:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
90000c9a:	2102      	movs	r1, #2
90000c9c:	4620      	mov	r0, r4
90000c9e:	f001 fc39 	bl	90002514 <AUDIO_IO_Write>
90000ca2:	2202      	movs	r2, #2
90000ca4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
90000ca8:	4620      	mov	r0, r4
90000caa:	f001 fc33 	bl	90002514 <AUDIO_IO_Write>
90000cae:	2202      	movs	r2, #2
90000cb0:	f240 6109 	movw	r1, #1545	; 0x609
90000cb4:	4620      	mov	r0, r4
90000cb6:	f001 fc2d 	bl	90002514 <AUDIO_IO_Write>
90000cba:	220e      	movs	r2, #14
90000cbc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
90000cc0:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
90000cc2:	2700      	movs	r7, #0
 AUDIO_IO_Write(Addr, Reg, Value);
90000cc4:	f001 fc26 	bl	90002514 <AUDIO_IO_Write>
      break; 
90000cc8:	e76a      	b.n	90000ba0 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
90000cca:	2211      	movs	r2, #17
90000ccc:	2128      	movs	r1, #40	; 0x28
90000cce:	4620      	mov	r0, r4
90000cd0:	f001 fc20 	bl	90002514 <AUDIO_IO_Write>
90000cd4:	2235      	movs	r2, #53	; 0x35
90000cd6:	2129      	movs	r1, #41	; 0x29
90000cd8:	4620      	mov	r0, r4
90000cda:	f001 fc1b 	bl	90002514 <AUDIO_IO_Write>
90000cde:	2235      	movs	r2, #53	; 0x35
90000ce0:	212a      	movs	r1, #42	; 0x2a
90000ce2:	4620      	mov	r0, r4
90000ce4:	f001 fc16 	bl	90002514 <AUDIO_IO_Write>
90000ce8:	f240 3203 	movw	r2, #771	; 0x303
90000cec:	2104      	movs	r1, #4
90000cee:	4620      	mov	r0, r4
90000cf0:	f001 fc10 	bl	90002514 <AUDIO_IO_Write>
90000cf4:	22db      	movs	r2, #219	; 0xdb
90000cf6:	f44f 6188 	mov.w	r1, #1088	; 0x440
90000cfa:	4620      	mov	r0, r4
90000cfc:	f001 fc0a 	bl	90002514 <AUDIO_IO_Write>
90000d00:	f246 3250 	movw	r2, #25424	; 0x6350
90000d04:	2102      	movs	r1, #2
90000d06:	4620      	mov	r0, r4
90000d08:	f001 fc04 	bl	90002514 <AUDIO_IO_Write>
90000d0c:	2202      	movs	r2, #2
90000d0e:	f240 6106 	movw	r1, #1542	; 0x606
90000d12:	4620      	mov	r0, r4
90000d14:	f001 fbfe 	bl	90002514 <AUDIO_IO_Write>
90000d18:	2202      	movs	r2, #2
90000d1a:	f240 6107 	movw	r1, #1543	; 0x607
90000d1e:	4620      	mov	r0, r4
90000d20:	f001 fbf8 	bl	90002514 <AUDIO_IO_Write>
90000d24:	220d      	movs	r2, #13
90000d26:	e7c9      	b.n	90000cbc <wm8994_Init+0x23c>
90000d28:	f44f 7243 	mov.w	r2, #780	; 0x30c
90000d2c:	e7de      	b.n	90000cec <wm8994_Init+0x26c>
  switch (AudioFreq)
90000d2e:	f245 6322 	movw	r3, #22050	; 0x5622
90000d32:	4598      	cmp	r8, r3
90000d34:	f47f af49 	bne.w	90000bca <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
90000d38:	2243      	movs	r2, #67	; 0x43
90000d3a:	e010      	b.n	90000d5e <wm8994_Init+0x2de>
  switch (AudioFreq)
90000d3c:	f64b 3380 	movw	r3, #48000	; 0xbb80
90000d40:	4598      	cmp	r8, r3
90000d42:	f43f af42 	beq.w	90000bca <wm8994_Init+0x14a>
90000d46:	4b9d      	ldr	r3, [pc, #628]	; (90000fbc <wm8994_Init+0x53c>)
90000d48:	4598      	cmp	r8, r3
90000d4a:	f000 80fc 	beq.w	90000f46 <wm8994_Init+0x4c6>
90000d4e:	f64a 4344 	movw	r3, #44100	; 0xac44
90000d52:	4598      	cmp	r8, r3
90000d54:	f47f af39 	bne.w	90000bca <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
90000d58:	2273      	movs	r2, #115	; 0x73
90000d5a:	e000      	b.n	90000d5e <wm8994_Init+0x2de>
90000d5c:	2203      	movs	r2, #3
90000d5e:	f44f 7104 	mov.w	r1, #528	; 0x210
90000d62:	4620      	mov	r0, r4
90000d64:	f001 fbd6 	bl	90002514 <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000d68:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000d6c:	f44f 7140 	mov.w	r1, #768	; 0x300
90000d70:	4620      	mov	r0, r4
90000d72:	bf0c      	ite	eq
90000d74:	f244 0218 	movweq	r2, #16408	; 0x4018
90000d78:	f244 0210 	movwne	r2, #16400	; 0x4010
90000d7c:	f001 fbca 	bl	90002514 <AUDIO_IO_Write>
90000d80:	2200      	movs	r2, #0
90000d82:	f240 3102 	movw	r1, #770	; 0x302
90000d86:	4620      	mov	r0, r4
90000d88:	f001 fbc4 	bl	90002514 <AUDIO_IO_Write>
90000d8c:	220a      	movs	r2, #10
90000d8e:	f44f 7102 	mov.w	r1, #520	; 0x208
90000d92:	4620      	mov	r0, r4
90000d94:	f001 fbbe 	bl	90002514 <AUDIO_IO_Write>
90000d98:	2201      	movs	r2, #1
90000d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
90000d9e:	4620      	mov	r0, r4
90000da0:	f001 fbb8 	bl	90002514 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
90000da4:	2e00      	cmp	r6, #0
90000da6:	f000 80a9 	beq.w	90000efc <wm8994_Init+0x47c>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
90000daa:	2e02      	cmp	r6, #2
90000dac:	d123      	bne.n	90000df6 <wm8994_Init+0x376>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dae:	f44f 7280 	mov.w	r2, #256	; 0x100
90000db2:	212d      	movs	r1, #45	; 0x2d
90000db4:	4620      	mov	r0, r4
      if(ColdStartup)
90000db6:	4e82      	ldr	r6, [pc, #520]	; (90000fc0 <wm8994_Init+0x540>)
 AUDIO_IO_Write(Addr, Reg, Value);
90000db8:	f001 fbac 	bl	90002514 <AUDIO_IO_Write>
90000dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
90000dc0:	212e      	movs	r1, #46	; 0x2e
90000dc2:	4620      	mov	r0, r4
90000dc4:	f001 fba6 	bl	90002514 <AUDIO_IO_Write>
      if(ColdStartup)
90000dc8:	7833      	ldrb	r3, [r6, #0]
90000dca:	2b00      	cmp	r3, #0
90000dcc:	f000 80bf 	beq.w	90000f4e <wm8994_Init+0x4ce>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dd0:	4620      	mov	r0, r4
90000dd2:	f44f 4201 	mov.w	r2, #33024	; 0x8100
90000dd6:	f44f 7188 	mov.w	r1, #272	; 0x110
90000dda:	f001 fb9b 	bl	90002514 <AUDIO_IO_Write>
        ColdStartup=0;
90000dde:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
90000de0:	f44f 7096 	mov.w	r0, #300	; 0x12c
        ColdStartup=0;
90000de4:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
90000de6:	f001 fbc1 	bl	9000256c <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000dea:	2200      	movs	r2, #0
90000dec:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000df0:	4620      	mov	r0, r4
90000df2:	f001 fb8f 	bl	90002514 <AUDIO_IO_Write>
90000df6:	f44f 7240 	mov.w	r2, #768	; 0x300
90000dfa:	2103      	movs	r1, #3
90000dfc:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
90000dfe:	f243 3603 	movw	r6, #13059	; 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
90000e02:	f001 fb87 	bl	90002514 <AUDIO_IO_Write>
90000e06:	2200      	movs	r2, #0
90000e08:	2122      	movs	r1, #34	; 0x22
90000e0a:	4620      	mov	r0, r4
90000e0c:	f001 fb82 	bl	90002514 <AUDIO_IO_Write>
90000e10:	2200      	movs	r2, #0
90000e12:	2123      	movs	r1, #35	; 0x23
90000e14:	4620      	mov	r0, r4
90000e16:	f001 fb7d 	bl	90002514 <AUDIO_IO_Write>
90000e1a:	f44f 7240 	mov.w	r2, #768	; 0x300
90000e1e:	2136      	movs	r1, #54	; 0x36
90000e20:	4620      	mov	r0, r4
90000e22:	f001 fb77 	bl	90002514 <AUDIO_IO_Write>
90000e26:	f243 0203 	movw	r2, #12291	; 0x3003
90000e2a:	2101      	movs	r1, #1
90000e2c:	4620      	mov	r0, r4
90000e2e:	f001 fb71 	bl	90002514 <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000e32:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
90000e36:	f04f 0151 	mov.w	r1, #81	; 0x51
90000e3a:	4620      	mov	r0, r4
90000e3c:	bf0c      	ite	eq
90000e3e:	f240 2205 	movweq	r2, #517	; 0x205
90000e42:	2205      	movne	r2, #5
90000e44:	f001 fb66 	bl	90002514 <AUDIO_IO_Write>
90000e48:	f243 3203 	movw	r2, #13059	; 0x3303
90000e4c:	2101      	movs	r1, #1
90000e4e:	4620      	mov	r0, r4
90000e50:	f001 fb60 	bl	90002514 <AUDIO_IO_Write>
90000e54:	2222      	movs	r2, #34	; 0x22
90000e56:	2160      	movs	r1, #96	; 0x60
90000e58:	4620      	mov	r0, r4
90000e5a:	f001 fb5b 	bl	90002514 <AUDIO_IO_Write>
90000e5e:	f649 7225 	movw	r2, #40741	; 0x9f25
90000e62:	214c      	movs	r1, #76	; 0x4c
90000e64:	4620      	mov	r0, r4
90000e66:	f001 fb55 	bl	90002514 <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
90000e6a:	200f      	movs	r0, #15
90000e6c:	f001 fb7e 	bl	9000256c <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000e70:	2201      	movs	r2, #1
90000e72:	212d      	movs	r1, #45	; 0x2d
90000e74:	4620      	mov	r0, r4
90000e76:	f001 fb4d 	bl	90002514 <AUDIO_IO_Write>
90000e7a:	2201      	movs	r2, #1
90000e7c:	212e      	movs	r1, #46	; 0x2e
90000e7e:	4620      	mov	r0, r4
90000e80:	f001 fb48 	bl	90002514 <AUDIO_IO_Write>
90000e84:	f44f 724c 	mov.w	r2, #816	; 0x330
90000e88:	2103      	movs	r1, #3
90000e8a:	4620      	mov	r0, r4
90000e8c:	f001 fb42 	bl	90002514 <AUDIO_IO_Write>
90000e90:	2233      	movs	r2, #51	; 0x33
90000e92:	2154      	movs	r1, #84	; 0x54
90000e94:	4620      	mov	r0, r4
90000e96:	f001 fb3d 	bl	90002514 <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
90000e9a:	f240 1001 	movw	r0, #257	; 0x101
90000e9e:	f001 fb65 	bl	9000256c <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
90000ea2:	22ee      	movs	r2, #238	; 0xee
90000ea4:	2160      	movs	r1, #96	; 0x60
90000ea6:	4620      	mov	r0, r4
90000ea8:	f001 fb34 	bl	90002514 <AUDIO_IO_Write>
90000eac:	22c0      	movs	r2, #192	; 0xc0
90000eae:	f44f 61c2 	mov.w	r1, #1552	; 0x610
90000eb2:	4620      	mov	r0, r4
90000eb4:	f001 fb2e 	bl	90002514 <AUDIO_IO_Write>
90000eb8:	22c0      	movs	r2, #192	; 0xc0
90000eba:	f240 6111 	movw	r1, #1553	; 0x611
90000ebe:	4620      	mov	r0, r4
90000ec0:	f001 fb28 	bl	90002514 <AUDIO_IO_Write>
90000ec4:	2210      	movs	r2, #16
90000ec6:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000eca:	4620      	mov	r0, r4
90000ecc:	f001 fb22 	bl	90002514 <AUDIO_IO_Write>
90000ed0:	22c0      	movs	r2, #192	; 0xc0
90000ed2:	f240 6112 	movw	r1, #1554	; 0x612
90000ed6:	4620      	mov	r0, r4
90000ed8:	f001 fb1c 	bl	90002514 <AUDIO_IO_Write>
90000edc:	22c0      	movs	r2, #192	; 0xc0
90000ede:	f240 6113 	movw	r1, #1555	; 0x613
90000ee2:	4620      	mov	r0, r4
90000ee4:	f001 fb16 	bl	90002514 <AUDIO_IO_Write>
90000ee8:	2210      	movs	r2, #16
90000eea:	f240 4122 	movw	r1, #1058	; 0x422
90000eee:	4620      	mov	r0, r4
90000ef0:	f001 fb10 	bl	90002514 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
90000ef4:	4651      	mov	r1, sl
90000ef6:	4648      	mov	r0, r9
90000ef8:	f7ff fd3e 	bl	90000978 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
90000efc:	b1e5      	cbz	r5, 90000f38 <wm8994_Init+0x4b8>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
90000efe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90000f02:	d002      	beq.n	90000f0a <wm8994_Init+0x48a>
90000f04:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
90000f08:	d12a      	bne.n	90000f60 <wm8994_Init+0x4e0>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f0a:	f046 0213 	orr.w	r2, r6, #19
90000f0e:	2101      	movs	r1, #1
90000f10:	4620      	mov	r0, r4
90000f12:	f001 faff 	bl	90002514 <AUDIO_IO_Write>
90000f16:	2202      	movs	r2, #2
90000f18:	f44f 61c4 	mov.w	r1, #1568	; 0x620
90000f1c:	4620      	mov	r0, r4
90000f1e:	f001 faf9 	bl	90002514 <AUDIO_IO_Write>
90000f22:	f44f 5260 	mov.w	r2, #14336	; 0x3800
90000f26:	f240 4111 	movw	r1, #1041	; 0x411
90000f2a:	4620      	mov	r0, r4
90000f2c:	f001 faf2 	bl	90002514 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
90000f30:	4651      	mov	r1, sl
90000f32:	4648      	mov	r0, r9
90000f34:	f7ff fd20 	bl	90000978 <wm8994_SetVolume>
}
90000f38:	4638      	mov	r0, r7
90000f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
90000f3e:	2233      	movs	r2, #51	; 0x33
90000f40:	e70d      	b.n	90000d5e <wm8994_Init+0x2de>
90000f42:	2263      	movs	r2, #99	; 0x63
90000f44:	e70b      	b.n	90000d5e <wm8994_Init+0x2de>
90000f46:	22a3      	movs	r2, #163	; 0xa3
90000f48:	e709      	b.n	90000d5e <wm8994_Init+0x2de>
90000f4a:	2213      	movs	r2, #19
90000f4c:	e707      	b.n	90000d5e <wm8994_Init+0x2de>
90000f4e:	4620      	mov	r0, r4
90000f50:	f248 1208 	movw	r2, #33032	; 0x8108
90000f54:	f44f 7188 	mov.w	r1, #272	; 0x110
90000f58:	f001 fadc 	bl	90002514 <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
90000f5c:	2032      	movs	r0, #50	; 0x32
90000f5e:	e742      	b.n	90000de6 <wm8994_Init+0x366>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
90000f60:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
90000f64:	d115      	bne.n	90000f92 <wm8994_Init+0x512>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f66:	f046 0213 	orr.w	r2, r6, #19
90000f6a:	2101      	movs	r1, #1
90000f6c:	4620      	mov	r0, r4
90000f6e:	f001 fad1 	bl	90002514 <AUDIO_IO_Write>
90000f72:	2202      	movs	r2, #2
90000f74:	f44f 61c4 	mov.w	r1, #1568	; 0x620
90000f78:	4620      	mov	r0, r4
90000f7a:	f001 facb 	bl	90002514 <AUDIO_IO_Write>
90000f7e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000f82:	f44f 6182 	mov.w	r1, #1040	; 0x410
90000f86:	4620      	mov	r0, r4
90000f88:	f001 fac4 	bl	90002514 <AUDIO_IO_Write>
90000f8c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000f90:	e7c9      	b.n	90000f26 <wm8994_Init+0x4a6>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
90000f92:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
90000f96:	d002      	beq.n	90000f9e <wm8994_Init+0x51e>
90000f98:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
90000f9c:	d1c8      	bne.n	90000f30 <wm8994_Init+0x4b0>
 AUDIO_IO_Write(Addr, Reg, Value);
90000f9e:	220b      	movs	r2, #11
90000fa0:	2118      	movs	r1, #24
90000fa2:	4620      	mov	r0, r4
90000fa4:	f001 fab6 	bl	90002514 <AUDIO_IO_Write>
90000fa8:	220b      	movs	r2, #11
90000faa:	211a      	movs	r1, #26
90000fac:	4620      	mov	r0, r4
90000fae:	f001 fab1 	bl	90002514 <AUDIO_IO_Write>
90000fb2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
90000fb6:	f44f 6182 	mov.w	r1, #1040	; 0x410
90000fba:	e7b6      	b.n	90000f2a <wm8994_Init+0x4aa>
90000fbc:	00017700 	.word	0x00017700
90000fc0:	20000028 	.word	0x20000028
90000fc4:	20000164 	.word	0x20000164

90000fc8 <wm8994_Stop>:
{
90000fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
90000fca:	4f19      	ldr	r7, [pc, #100]	; (90001030 <wm8994_Stop+0x68>)
{
90000fcc:	4604      	mov	r4, r0
90000fce:	460e      	mov	r6, r1
  if (outputEnabled != 0)
90000fd0:	683d      	ldr	r5, [r7, #0]
90000fd2:	b355      	cbz	r5, 9000102a <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000fd4:	2101      	movs	r1, #1
90000fd6:	f7ff fc97 	bl	90000908 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
90000fda:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
90000fdc:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
90000fde:	d024      	beq.n	9000102a <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
90000fe0:	b2e0      	uxtb	r0, r4
 AUDIO_IO_Write(Addr, Reg, Value);
90000fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
90000fe6:	f44f 6184 	mov.w	r1, #1056	; 0x420
90000fea:	9001      	str	r0, [sp, #4]
90000fec:	f001 fa92 	bl	90002514 <AUDIO_IO_Write>
90000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
90000ff4:	f240 4122 	movw	r1, #1058	; 0x422
90000ff8:	9801      	ldr	r0, [sp, #4]
90000ffa:	f001 fa8b 	bl	90002514 <AUDIO_IO_Write>
90000ffe:	2200      	movs	r2, #0
90001000:	212d      	movs	r1, #45	; 0x2d
90001002:	9801      	ldr	r0, [sp, #4]
90001004:	f001 fa86 	bl	90002514 <AUDIO_IO_Write>
90001008:	2200      	movs	r2, #0
9000100a:	212e      	movs	r1, #46	; 0x2e
9000100c:	9801      	ldr	r0, [sp, #4]
9000100e:	f001 fa81 	bl	90002514 <AUDIO_IO_Write>
90001012:	2200      	movs	r2, #0
90001014:	2105      	movs	r1, #5
90001016:	9801      	ldr	r0, [sp, #4]
90001018:	f001 fa7c 	bl	90002514 <AUDIO_IO_Write>
9000101c:	2200      	movs	r2, #0
9000101e:	9801      	ldr	r0, [sp, #4]
90001020:	4611      	mov	r1, r2
90001022:	f001 fa77 	bl	90002514 <AUDIO_IO_Write>
      outputEnabled = 0;
90001026:	2300      	movs	r3, #0
90001028:	603b      	str	r3, [r7, #0]
}
9000102a:	4628      	mov	r0, r5
9000102c:	b003      	add	sp, #12
9000102e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90001030:	20000164 	.word	0x20000164

90001034 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001034:	4b04      	ldr	r3, [pc, #16]	; (90001048 <SAIx_Out_DeInit+0x14>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001036:	4a05      	ldr	r2, [pc, #20]	; (9000104c <SAIx_Out_DeInit+0x18>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001038:	4805      	ldr	r0, [pc, #20]	; (90001050 <SAIx_Out_DeInit+0x1c>)
9000103a:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000103c:	6853      	ldr	r3, [r2, #4]
9000103e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001042:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
90001044:	f004 ba17 	b.w	90005476 <HAL_SAI_DeInit>
90001048:	40015c04 	.word	0x40015c04
9000104c:	40015c00 	.word	0x40015c00
90001050:	2000016c 	.word	0x2000016c

90001054 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
90001054:	4b05      	ldr	r3, [pc, #20]	; (9000106c <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
90001056:	4a06      	ldr	r2, [pc, #24]	; (90001070 <SAIx_In_DeInit+0x1c>)
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
90001058:	4806      	ldr	r0, [pc, #24]	; (90001074 <SAIx_In_DeInit+0x20>)
9000105a:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
9000105e:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001064:	6253      	str	r3, [r2, #36]	; 0x24

  HAL_SAI_DeInit(&haudio_in_sai);
90001066:	f004 ba06 	b.w	90005476 <HAL_SAI_DeInit>
9000106a:	bf00      	nop
9000106c:	40015c24 	.word	0x40015c24
90001070:	40015c00 	.word	0x40015c00
90001074:	2000016c 	.word	0x2000016c

90001078 <SAIx_In_Init>:
{
90001078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
9000107c:	4b35      	ldr	r3, [pc, #212]	; (90001154 <SAIx_In_Init+0xdc>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
9000107e:	2500      	movs	r5, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
90001080:	4c35      	ldr	r4, [pc, #212]	; (90001158 <SAIx_In_Init+0xe0>)
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
90001082:	2601      	movs	r6, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001084:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 90001160 <SAIx_In_Init+0xe8>
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
90001088:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
9000108c:	6023      	str	r3, [r4, #0]
{
9000108e:	4617      	mov	r7, r2
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001090:	f8d8 3004 	ldr.w	r3, [r8, #4]
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
90001094:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  haudio_out_sai.SlotInit.SlotNumber = 4;
90001098:	f04f 0904 	mov.w	r9, #4
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000109c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900010a0:	f8c8 3004 	str.w	r3, [r8, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
900010a4:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
900010a6:	61e2      	str	r2, [r4, #28]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010a8:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.Init.AudioMode = SaiOutMode;
900010aa:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
900010ac:	4620      	mov	r0, r4
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
900010ae:	9101      	str	r1, [sp, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
900010b0:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
900010b2:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
900010b4:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
900010b6:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
900010b8:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
900010ba:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
900010bc:	e9c4 350d 	strd	r3, r5, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
900010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
900010c4:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010c6:	2320      	movs	r3, #32
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
900010c8:	e9c4 9117 	strd	r9, r1, [r4, #92]	; 0x5c
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
900010cc:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
900010d0:	e9c4 b512 	strd	fp, r5, [r4, #72]	; 0x48
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
900010d4:	e9c4 a514 	strd	sl, r5, [r4, #80]	; 0x50
  HAL_SAI_Init(&haudio_out_sai);
900010d8:	f004 f8f6 	bl	900052c8 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
900010dc:	481f      	ldr	r0, [pc, #124]	; (9000115c <SAIx_In_Init+0xe4>)
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
900010de:	2380      	movs	r3, #128	; 0x80
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
900010e0:	2240      	movs	r2, #64	; 0x40
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
900010e2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
900010e6:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
900010ea:	9901      	ldr	r1, [sp, #4]
  __HAL_SAI_DISABLE(&haudio_in_sai);
900010ec:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
900010f0:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
900010f4:	2003      	movs	r0, #3
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
900010f6:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
900010fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  HAL_SAI_Init(&haudio_in_sai);
900010fe:	f104 0084 	add.w	r0, r4, #132	; 0x84
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
90001102:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
90001106:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
9000110a:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
9000110e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
90001112:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
90001116:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
9000111a:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
9000111e:	e9c4 352e 	strd	r3, r5, [r4, #184]	; 0xb8
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
90001122:	2320      	movs	r3, #32
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
90001124:	e9c4 b533 	strd	fp, r5, [r4, #204]	; 0xcc
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
90001128:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
9000112c:	e9c4 a535 	strd	sl, r5, [r4, #212]	; 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
90001130:	e9c4 5937 	strd	r5, r9, [r4, #220]	; 0xdc
  HAL_SAI_Init(&haudio_in_sai);
90001134:	f004 f8c8 	bl	900052c8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
90001138:	6822      	ldr	r2, [r4, #0]
9000113a:	6813      	ldr	r3, [r2, #0]
9000113c:	ea43 030b 	orr.w	r3, r3, fp
90001140:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
90001142:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
90001146:	6813      	ldr	r3, [r2, #0]
90001148:	ea43 030b 	orr.w	r3, r3, fp
9000114c:	6013      	str	r3, [r2, #0]
}
9000114e:	b003      	add	sp, #12
90001150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001154:	40015c04 	.word	0x40015c04
90001158:	2000016c 	.word	0x2000016c
9000115c:	40015c24 	.word	0x40015c24
90001160:	40015c00 	.word	0x40015c00

90001164 <BSP_AUDIO_OUT_Play>:
{
90001164:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
90001166:	4b0d      	ldr	r3, [pc, #52]	; (9000119c <BSP_AUDIO_OUT_Play+0x38>)
{
90001168:	4605      	mov	r5, r0
9000116a:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
9000116c:	b28a      	uxth	r2, r1
9000116e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
90001172:	4601      	mov	r1, r0
90001174:	2034      	movs	r0, #52	; 0x34
90001176:	68db      	ldr	r3, [r3, #12]
90001178:	4798      	blx	r3
9000117a:	b960      	cbnz	r0, 90001196 <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
9000117c:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
90001180:	4629      	mov	r1, r5
90001182:	4806      	ldr	r0, [pc, #24]	; (9000119c <BSP_AUDIO_OUT_Play+0x38>)
90001184:	bf34      	ite	cc
90001186:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
9000118a:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
9000118e:	f004 fa01 	bl	90005594 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
90001192:	2000      	movs	r0, #0
}
90001194:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
90001196:	2001      	movs	r0, #1
90001198:	e7fc      	b.n	90001194 <BSP_AUDIO_OUT_Play+0x30>
9000119a:	bf00      	nop
9000119c:	2000016c 	.word	0x2000016c

900011a0 <BSP_AUDIO_OUT_Pause>:
{    
900011a0:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
900011a2:	4d07      	ldr	r5, [pc, #28]	; (900011c0 <BSP_AUDIO_OUT_Pause+0x20>)
900011a4:	2034      	movs	r0, #52	; 0x34
900011a6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
900011aa:	691b      	ldr	r3, [r3, #16]
900011ac:	4798      	blx	r3
900011ae:	4604      	mov	r4, r0
900011b0:	b920      	cbnz	r0, 900011bc <BSP_AUDIO_OUT_Pause+0x1c>
    HAL_SAI_DMAPause(&haudio_out_sai);
900011b2:	4628      	mov	r0, r5
900011b4:	f004 f97d 	bl	900054b2 <HAL_SAI_DMAPause>
    return AUDIO_OK;
900011b8:	4620      	mov	r0, r4
}
900011ba:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
900011bc:	2001      	movs	r0, #1
900011be:	e7fc      	b.n	900011ba <BSP_AUDIO_OUT_Pause+0x1a>
900011c0:	2000016c 	.word	0x2000016c

900011c4 <BSP_AUDIO_OUT_Resume>:
{    
900011c4:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
900011c6:	4d07      	ldr	r5, [pc, #28]	; (900011e4 <BSP_AUDIO_OUT_Resume+0x20>)
900011c8:	2034      	movs	r0, #52	; 0x34
900011ca:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
900011ce:	695b      	ldr	r3, [r3, #20]
900011d0:	4798      	blx	r3
900011d2:	4604      	mov	r4, r0
900011d4:	b920      	cbnz	r0, 900011e0 <BSP_AUDIO_OUT_Resume+0x1c>
    HAL_SAI_DMAResume(&haudio_out_sai);
900011d6:	4628      	mov	r0, r5
900011d8:	f004 f97b 	bl	900054d2 <HAL_SAI_DMAResume>
    return AUDIO_OK;
900011dc:	4620      	mov	r0, r4
}
900011de:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
900011e0:	2001      	movs	r0, #1
900011e2:	e7fc      	b.n	900011de <BSP_AUDIO_OUT_Resume+0x1a>
900011e4:	2000016c 	.word	0x2000016c

900011e8 <BSP_AUDIO_OUT_Stop>:
{
900011e8:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_out_sai);
900011ea:	4c0b      	ldr	r4, [pc, #44]	; (90001218 <BSP_AUDIO_OUT_Stop+0x30>)
{
900011ec:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
900011ee:	4620      	mov	r0, r4
900011f0:	f004 f986 	bl	90005500 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
900011f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
900011f8:	4629      	mov	r1, r5
900011fa:	2034      	movs	r0, #52	; 0x34
900011fc:	699b      	ldr	r3, [r3, #24]
900011fe:	4798      	blx	r3
90001200:	4604      	mov	r4, r0
90001202:	b930      	cbnz	r0, 90001212 <BSP_AUDIO_OUT_Stop+0x2a>
    if(Option == CODEC_PDWN_HW)
90001204:	2d01      	cmp	r5, #1
90001206:	d102      	bne.n	9000120e <BSP_AUDIO_OUT_Stop+0x26>
      HAL_Delay(1);
90001208:	4628      	mov	r0, r5
9000120a:	f001 fc65 	bl	90002ad8 <HAL_Delay>
    return AUDIO_OK;
9000120e:	4620      	mov	r0, r4
90001210:	e000      	b.n	90001214 <BSP_AUDIO_OUT_Stop+0x2c>
    return AUDIO_ERROR;
90001212:	2001      	movs	r0, #1
}
90001214:	bd38      	pop	{r3, r4, r5, pc}
90001216:	bf00      	nop
90001218:	2000016c 	.word	0x2000016c

9000121c <BSP_AUDIO_OUT_SetVolume>:
{
9000121c:	b508      	push	{r3, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
9000121e:	4b05      	ldr	r3, [pc, #20]	; (90001234 <BSP_AUDIO_OUT_SetVolume+0x18>)
{
90001220:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
90001222:	2034      	movs	r0, #52	; 0x34
90001224:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
90001228:	6a1b      	ldr	r3, [r3, #32]
9000122a:	4798      	blx	r3
}
9000122c:	3800      	subs	r0, #0
9000122e:	bf18      	it	ne
90001230:	2001      	movne	r0, #1
90001232:	bd08      	pop	{r3, pc}
90001234:	2000016c 	.word	0x2000016c

90001238 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{ 
90001238:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
9000123a:	4c08      	ldr	r4, [pc, #32]	; (9000125c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
9000123c:	6822      	ldr	r2, [r4, #0]
9000123e:	6813      	ldr	r3, [r2, #0]
90001240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001244:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
90001246:	6620      	str	r0, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
90001248:	4620      	mov	r0, r4
9000124a:	f004 f83d 	bl	900052c8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
9000124e:	6822      	ldr	r2, [r4, #0]
90001250:	6813      	ldr	r3, [r2, #0]
90001252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001256:	6013      	str	r3, [r2, #0]
}
90001258:	bd10      	pop	{r4, pc}
9000125a:	bf00      	nop
9000125c:	2000016c 	.word	0x2000016c

90001260 <HAL_SAI_TxCpltCallback>:
{
90001260:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
90001262:	f009 f93b 	bl	9000a4dc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
90001266:	bd08      	pop	{r3, pc}

90001268 <HAL_SAI_TxHalfCpltCallback>:
{
90001268:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
9000126a:	f009 f943 	bl	9000a4f4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
9000126e:	bd08      	pop	{r3, pc}

90001270 <BSP_AUDIO_OUT_Error_CallBack>:
90001270:	4770      	bx	lr
	...

90001274 <BSP_AUDIO_OUT_MspInit>:
{ 
90001274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
90001278:	4c4d      	ldr	r4, [pc, #308]	; (900013b0 <BSP_AUDIO_OUT_MspInit+0x13c>)
{ 
9000127a:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
9000127c:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001280:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
90001282:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001284:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
90001286:	f04f 080a 	mov.w	r8, #10
{ 
9000128a:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
9000128c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
90001290:	a905      	add	r1, sp, #20
90001292:	4848      	ldr	r0, [pc, #288]	; (900013b4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
90001294:	f04f 0a40 	mov.w	sl, #64	; 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
90001298:	6463      	str	r3, [r4, #68]	; 0x44
9000129a:	6c63      	ldr	r3, [r4, #68]	; 0x44
9000129c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
900012a0:	9300      	str	r3, [sp, #0]
900012a2:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
900012a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
900012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900012aa:	6323      	str	r3, [r4, #48]	; 0x30
900012ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
900012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
900012b2:	9301      	str	r3, [sp, #4]
900012b4:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
900012b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
900012b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900012bc:	6323      	str	r3, [r4, #48]	; 0x30
900012be:	6b23      	ldr	r3, [r4, #48]	; 0x30
900012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
900012c4:	9302      	str	r3, [sp, #8]
900012c6:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
900012c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
900012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900012ce:	6323      	str	r3, [r4, #48]	; 0x30
900012d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
900012d2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
900012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
900012da:	9303      	str	r3, [sp, #12]
900012dc:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900012de:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
900012e0:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900012e4:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
900012e8:	f001 ffba 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
900012ec:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
900012ee:	a905      	add	r1, sp, #20
900012f0:	4830      	ldr	r0, [pc, #192]	; (900013b4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
900012f2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900012f6:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
900012fa:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
900012fe:	f001 ffaf 	bl	90003260 <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
90001302:	a905      	add	r1, sp, #20
90001304:	482b      	ldr	r0, [pc, #172]	; (900013b4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
90001306:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
9000130a:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
9000130e:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
90001312:	f001 ffa5 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
90001316:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
90001318:	a905      	add	r1, sp, #20
9000131a:	4826      	ldr	r0, [pc, #152]	; (900013b4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
9000131c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001320:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
90001324:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
90001328:	f001 ff9a 	bl	90003260 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
9000132c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
9000132e:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
90001330:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90001334:	6323      	str	r3, [r4, #48]	; 0x30
90001336:	6b23      	ldr	r3, [r4, #48]	; 0x30
90001338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000133c:	9304      	str	r3, [sp, #16]
9000133e:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
90001340:	4b1d      	ldr	r3, [pc, #116]	; (900013b8 <BSP_AUDIO_OUT_MspInit+0x144>)
90001342:	429a      	cmp	r2, r3
90001344:	d129      	bne.n	9000139a <BSP_AUDIO_OUT_MspInit+0x126>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
90001346:	4b1d      	ldr	r3, [pc, #116]	; (900013bc <BSP_AUDIO_OUT_MspInit+0x148>)
90001348:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
9000134c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
90001350:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
90001354:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
90001358:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
9000135c:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
90001360:	f8c3 6144 	str.w	r6, [r3, #324]	; 0x144
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
90001364:	e9c3 2a44 	strd	r2, sl, [r3, #272]	; 0x110
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
90001368:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000136c:	e9c3 1247 	strd	r1, r2, [r3, #284]	; 0x11c
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
90001370:	f44f 7280 	mov.w	r2, #256	; 0x100
90001374:	e9c3 0249 	strd	r0, r2, [r3, #292]	; 0x124
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
90001378:	2204      	movs	r2, #4
9000137a:	e9c3 424b 	strd	r4, r2, [r3, #300]	; 0x12c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
9000137e:	f503 7486 	add.w	r4, r3, #268	; 0x10c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
90001382:	4a0f      	ldr	r2, [pc, #60]	; (900013c0 <BSP_AUDIO_OUT_MspInit+0x14c>)
    HAL_DMA_DeInit(&hdma_sai_tx);
90001384:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
90001386:	66f4      	str	r4, [r6, #108]	; 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
90001388:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
9000138c:	e9c3 754d 	strd	r7, r5, [r3, #308]	; 0x134
    HAL_DMA_DeInit(&hdma_sai_tx);
90001390:	f001 fcae 	bl	90002cf0 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
90001394:	4620      	mov	r0, r4
90001396:	f001 fc2d 	bl	90002bf4 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
9000139a:	2200      	movs	r2, #0
9000139c:	210e      	movs	r1, #14
9000139e:	203c      	movs	r0, #60	; 0x3c
900013a0:	f001 fbbe 	bl	90002b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
900013a4:	203c      	movs	r0, #60	; 0x3c
900013a6:	f001 fbed 	bl	90002b84 <HAL_NVIC_EnableIRQ>
}
900013aa:	b00a      	add	sp, #40	; 0x28
900013ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900013b0:	40023800 	.word	0x40023800
900013b4:	40022000 	.word	0x40022000
900013b8:	40015c04 	.word	0x40015c04
900013bc:	2000016c 	.word	0x2000016c
900013c0:	40026470 	.word	0x40026470

900013c4 <BSP_AUDIO_OUT_Init>:
{ 
900013c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900013c8:	4617      	mov	r7, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
900013ca:	4c2f      	ldr	r4, [pc, #188]	; (90001488 <BSP_AUDIO_OUT_Init+0xc4>)
{ 
900013cc:	4681      	mov	r9, r0
900013ce:	468a      	mov	sl, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
900013d0:	4d2e      	ldr	r5, [pc, #184]	; (9000148c <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
900013d2:	f7ff fe2f 	bl	90001034 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
900013d6:	4639      	mov	r1, r7
900013d8:	2200      	movs	r2, #0
900013da:	4620      	mov	r0, r4
900013dc:	f008 fba8 	bl	90009b30 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
900013e0:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
900013e2:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
900013e4:	f004 f9d8 	bl	90005798 <HAL_SAI_GetState>
900013e8:	4601      	mov	r1, r0
900013ea:	b910      	cbnz	r0, 900013f2 <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
900013ec:	4620      	mov	r0, r4
900013ee:	f7ff ff41 	bl	90001274 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
900013f2:	4a27      	ldr	r2, [pc, #156]	; (90001490 <BSP_AUDIO_OUT_Init+0xcc>)
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
900013f4:	2104      	movs	r1, #4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
900013f6:	6025      	str	r5, [r4, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
900013f8:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
900013fa:	6853      	ldr	r3, [r2, #4]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
900013fc:	2601      	movs	r6, #1
  HAL_SAI_Init(&haudio_out_sai);
900013fe:	4822      	ldr	r0, [pc, #136]	; (90001488 <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
90001404:	f8df 808c 	ldr.w	r8, [pc, #140]	; 90001494 <BSP_AUDIO_OUT_Init+0xd0>
  __HAL_SAI_DISABLE(&haudio_out_sai);
90001408:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
9000140a:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
9000140c:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
9000140e:	61e7      	str	r7, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
90001410:	6065      	str	r5, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
90001412:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
90001414:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
90001416:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
90001418:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
9000141a:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
9000141c:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
9000141e:	e9c4 350d 	strd	r3, r5, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
90001422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90001426:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
90001428:	2320      	movs	r3, #32
9000142a:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
9000142e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
90001432:	e9c4 3512 	strd	r3, r5, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
90001436:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
9000143a:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
9000143e:	230f      	movs	r3, #15
90001440:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  HAL_SAI_Init(&haudio_out_sai);
90001444:	f003 ff40 	bl	900052c8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
90001448:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
9000144a:	2034      	movs	r0, #52	; 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
9000144c:	6813      	ldr	r3, [r2, #0]
9000144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001452:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
90001454:	f8d8 3008 	ldr.w	r3, [r8, #8]
90001458:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
9000145a:	f648 1394 	movw	r3, #35220	; 0x8994
9000145e:	4298      	cmp	r0, r3
90001460:	d10f      	bne.n	90001482 <BSP_AUDIO_OUT_Init+0xbe>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
90001462:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
90001466:	2034      	movs	r0, #52	; 0x34
90001468:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
9000146a:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
9000146e:	463b      	mov	r3, r7
90001470:	f8d8 4000 	ldr.w	r4, [r8]
90001474:	4652      	mov	r2, sl
90001476:	4649      	mov	r1, r9
90001478:	2034      	movs	r0, #52	; 0x34
9000147a:	47a0      	blx	r4
    ret = AUDIO_OK;
9000147c:	4628      	mov	r0, r5
}
9000147e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = AUDIO_ERROR;
90001482:	4630      	mov	r0, r6
90001484:	e7fb      	b.n	9000147e <BSP_AUDIO_OUT_Init+0xba>
90001486:	bf00      	nop
90001488:	2000016c 	.word	0x2000016c
9000148c:	40015c04 	.word	0x40015c04
90001490:	40015c00 	.word	0x40015c00
90001494:	2000002c 	.word	0x2000002c

90001498 <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
90001498:	b28a      	uxth	r2, r1
9000149a:	4601      	mov	r1, r0
9000149c:	4802      	ldr	r0, [pc, #8]	; (900014a8 <BSP_AUDIO_IN_Record+0x10>)
{
9000149e:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
900014a0:	f004 f8c8 	bl	90005634 <HAL_SAI_Receive_DMA>
}
900014a4:	2000      	movs	r0, #0
900014a6:	bd08      	pop	{r3, pc}
900014a8:	200001f0 	.word	0x200001f0

900014ac <BSP_AUDIO_IN_Stop>:
{
900014ac:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_in_sai);
900014ae:	4c0b      	ldr	r4, [pc, #44]	; (900014dc <BSP_AUDIO_IN_Stop+0x30>)
{
900014b0:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_in_sai);
900014b2:	f104 0084 	add.w	r0, r4, #132	; 0x84
900014b6:	f004 f823 	bl	90005500 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
900014ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
900014be:	4629      	mov	r1, r5
900014c0:	2034      	movs	r0, #52	; 0x34
900014c2:	699b      	ldr	r3, [r3, #24]
900014c4:	4798      	blx	r3
900014c6:	4604      	mov	r4, r0
900014c8:	b930      	cbnz	r0, 900014d8 <BSP_AUDIO_IN_Stop+0x2c>
    if(Option == CODEC_PDWN_HW)
900014ca:	2d01      	cmp	r5, #1
900014cc:	d102      	bne.n	900014d4 <BSP_AUDIO_IN_Stop+0x28>
      HAL_Delay(1);
900014ce:	4628      	mov	r0, r5
900014d0:	f001 fb02 	bl	90002ad8 <HAL_Delay>
    return AUDIO_OK;
900014d4:	4620      	mov	r0, r4
900014d6:	e000      	b.n	900014da <BSP_AUDIO_IN_Stop+0x2e>
    return AUDIO_ERROR;
900014d8:	2001      	movs	r0, #1
}
900014da:	bd38      	pop	{r3, r4, r5, pc}
900014dc:	2000016c 	.word	0x2000016c

900014e0 <BSP_AUDIO_IN_Pause>:
{    
900014e0:	b508      	push	{r3, lr}
  HAL_SAI_DMAPause(&haudio_in_sai);
900014e2:	4802      	ldr	r0, [pc, #8]	; (900014ec <BSP_AUDIO_IN_Pause+0xc>)
900014e4:	f003 ffe5 	bl	900054b2 <HAL_SAI_DMAPause>
}
900014e8:	2000      	movs	r0, #0
900014ea:	bd08      	pop	{r3, pc}
900014ec:	200001f0 	.word	0x200001f0

900014f0 <BSP_AUDIO_IN_Resume>:
{    
900014f0:	b508      	push	{r3, lr}
  HAL_SAI_DMAResume(&haudio_in_sai);
900014f2:	4802      	ldr	r0, [pc, #8]	; (900014fc <BSP_AUDIO_IN_Resume+0xc>)
900014f4:	f003 ffed 	bl	900054d2 <HAL_SAI_DMAResume>
}
900014f8:	2000      	movs	r0, #0
900014fa:	bd08      	pop	{r3, pc}
900014fc:	200001f0 	.word	0x200001f0

90001500 <BSP_AUDIO_IN_SetVolume>:
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
90001500:	4b07      	ldr	r3, [pc, #28]	; (90001520 <BSP_AUDIO_IN_SetVolume+0x20>)
90001502:	4601      	mov	r1, r0
90001504:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
{
90001508:	b510      	push	{r4, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
9000150a:	6a1b      	ldr	r3, [r3, #32]
{
9000150c:	4604      	mov	r4, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
9000150e:	2034      	movs	r0, #52	; 0x34
90001510:	4798      	blx	r3
90001512:	b918      	cbnz	r0, 9000151c <BSP_AUDIO_IN_SetVolume+0x1c>
    AudioInVolume = Volume;
90001514:	b2a4      	uxth	r4, r4
90001516:	4b03      	ldr	r3, [pc, #12]	; (90001524 <BSP_AUDIO_IN_SetVolume+0x24>)
90001518:	801c      	strh	r4, [r3, #0]
}
9000151a:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
9000151c:	2001      	movs	r0, #1
9000151e:	e7fc      	b.n	9000151a <BSP_AUDIO_IN_SetVolume+0x1a>
90001520:	2000016c 	.word	0x2000016c
90001524:	2000005c 	.word	0x2000005c

90001528 <HAL_SAI_RxCpltCallback>:
{
90001528:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
9000152a:	f009 fe19 	bl	9000b160 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
9000152e:	bd08      	pop	{r3, pc}

90001530 <HAL_SAI_RxHalfCpltCallback>:
{
90001530:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
90001532:	f009 fe37 	bl	9000b1a4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
90001536:	bd08      	pop	{r3, pc}

90001538 <BSP_AUDIO_IN_Error_CallBack>:
90001538:	4770      	bx	lr
	...

9000153c <HAL_SAI_ErrorCallback>:
{
9000153c:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
9000153e:	480a      	ldr	r0, [pc, #40]	; (90001568 <HAL_SAI_ErrorCallback+0x2c>)
90001540:	f004 f92a 	bl	90005798 <HAL_SAI_GetState>
90001544:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
90001546:	4809      	ldr	r0, [pc, #36]	; (9000156c <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
90001548:	f005 05ef 	and.w	r5, r5, #239	; 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
9000154c:	f004 f924 	bl	90005798 <HAL_SAI_GetState>
90001550:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
90001552:	2d02      	cmp	r5, #2
90001554:	d101      	bne.n	9000155a <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
90001556:	f7ff fe8b 	bl	90001270 <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
9000155a:	f004 04df 	and.w	r4, r4, #223	; 0xdf
9000155e:	2c02      	cmp	r4, #2
90001560:	d101      	bne.n	90001566 <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
90001562:	f7ff ffe9 	bl	90001538 <BSP_AUDIO_IN_Error_CallBack>
}
90001566:	bd38      	pop	{r3, r4, r5, pc}
90001568:	2000016c 	.word	0x2000016c
9000156c:	200001f0 	.word	0x200001f0

90001570 <BSP_AUDIO_IN_MspInit>:
{
90001570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
90001574:	4c3d      	ldr	r4, [pc, #244]	; (9000166c <BSP_AUDIO_IN_MspInit+0xfc>)
{
90001576:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
90001578:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
9000157a:	2500      	movs	r5, #0
  AUDIO_IN_SAIx_CLK_ENABLE();
9000157c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
9000157e:	f44f 6880 	mov.w	r8, #1024	; 0x400
{
90001582:	4606      	mov	r6, r0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
90001584:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
90001586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
9000158a:	4839      	ldr	r0, [pc, #228]	; (90001670 <BSP_AUDIO_IN_MspInit+0x100>)
  AUDIO_IN_SAIx_CLK_ENABLE();
9000158c:	6463      	str	r3, [r4, #68]	; 0x44
9000158e:	6c63      	ldr	r3, [r4, #68]	; 0x44
90001590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90001594:	9301      	str	r3, [sp, #4]
90001596:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
90001598:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000159a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000159e:	6323      	str	r3, [r4, #48]	; 0x30
900015a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
900015a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
900015a6:	9302      	str	r3, [sp, #8]
900015a8:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
900015aa:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
900015ac:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
900015b0:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
900015b2:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
900015b6:	f001 fe53 	bl	90003260 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
900015ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
900015bc:	a905      	add	r1, sp, #20
900015be:	482d      	ldr	r0, [pc, #180]	; (90001674 <BSP_AUDIO_IN_MspInit+0x104>)
  AUDIO_IN_INT_GPIO_ENABLE();
900015c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900015c4:	6323      	str	r3, [r4, #48]	; 0x30
900015c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
900015c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
900015cc:	9303      	str	r3, [sp, #12]
900015ce:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
900015d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
900015d4:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
900015d8:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
900015dc:	f001 fe40 	bl	90003260 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
900015e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
900015e2:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
900015e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
900015e8:	6323      	str	r3, [r4, #48]	; 0x30
900015ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
900015ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900015f0:	9304      	str	r3, [sp, #16]
900015f2:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
900015f4:	4b20      	ldr	r3, [pc, #128]	; (90001678 <BSP_AUDIO_IN_MspInit+0x108>)
900015f6:	429a      	cmp	r2, r3
900015f8:	d125      	bne.n	90001646 <BSP_AUDIO_IN_MspInit+0xd6>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
900015fa:	4b20      	ldr	r3, [pc, #128]	; (9000167c <BSP_AUDIO_IN_MspInit+0x10c>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
900015fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
90001600:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
90001604:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
90001608:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
9000160c:	f8c3 5190 	str.w	r5, [r3, #400]	; 0x190
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
90001610:	f8c3 519c 	str.w	r5, [r3, #412]	; 0x19c
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
90001614:	6734      	str	r4, [r6, #112]	; 0x70
90001616:	f8c3 61a4 	str.w	r6, [r3, #420]	; 0x1a4
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
9000161a:	e9c3 1260 	strd	r1, r2, [r3, #384]	; 0x180
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
9000161e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
90001622:	e9c3 0262 	strd	r0, r2, [r3, #392]	; 0x188
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
90001626:	2203      	movs	r2, #3
    HAL_DMA_DeInit(&hdma_sai_rx);
90001628:	4620      	mov	r0, r4
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
9000162a:	e9c3 2565 	strd	r2, r5, [r3, #404]	; 0x194
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
9000162e:	4a14      	ldr	r2, [pc, #80]	; (90001680 <BSP_AUDIO_IN_MspInit+0x110>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
90001630:	e9c3 555c 	strd	r5, r5, [r3, #368]	; 0x170
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
90001634:	e9c3 585e 	strd	r5, r8, [r3, #376]	; 0x178
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
90001638:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    HAL_DMA_DeInit(&hdma_sai_rx);
9000163c:	f001 fb58 	bl	90002cf0 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
90001640:	4620      	mov	r0, r4
90001642:	f001 fad7 	bl	90002bf4 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
90001646:	2200      	movs	r2, #0
90001648:	210f      	movs	r1, #15
9000164a:	2046      	movs	r0, #70	; 0x46
9000164c:	f001 fa68 	bl	90002b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
90001650:	2046      	movs	r0, #70	; 0x46
90001652:	f001 fa97 	bl	90002b84 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
90001656:	2200      	movs	r2, #0
90001658:	210f      	movs	r1, #15
9000165a:	2028      	movs	r0, #40	; 0x28
9000165c:	f001 fa60 	bl	90002b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
90001660:	2028      	movs	r0, #40	; 0x28
90001662:	f001 fa8f 	bl	90002b84 <HAL_NVIC_EnableIRQ>
}
90001666:	b00a      	add	sp, #40	; 0x28
90001668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000166c:	40023800 	.word	0x40023800
90001670:	40021800 	.word	0x40021800
90001674:	40021c00 	.word	0x40021c00
90001678:	40015c24 	.word	0x40015c24
9000167c:	2000016c 	.word	0x2000016c
90001680:	400264b8 	.word	0x400264b8

90001684 <BSP_AUDIO_IN_InitEx.part.0>:
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
90001684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90001686:	460c      	mov	r4, r1
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
90001688:	4d1e      	ldr	r5, [pc, #120]	; (90001704 <BSP_AUDIO_IN_InitEx.part.0+0x80>)
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
9000168a:	4606      	mov	r6, r0
    SAIx_In_DeInit();
9000168c:	f7ff fce2 	bl	90001054 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
90001690:	4621      	mov	r1, r4
90001692:	2200      	movs	r2, #0
90001694:	f105 0084 	add.w	r0, r5, #132	; 0x84
90001698:	f008 fa4a 	bl	90009b30 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
9000169c:	4628      	mov	r0, r5
9000169e:	4b1a      	ldr	r3, [pc, #104]	; (90001708 <BSP_AUDIO_IN_InitEx.part.0+0x84>)
900016a0:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
900016a4:	f004 f878 	bl	90005798 <HAL_SAI_GetState>
900016a8:	4601      	mov	r1, r0
900016aa:	b948      	cbnz	r0, 900016c0 <BSP_AUDIO_IN_InitEx.part.0+0x3c>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
900016ac:	9001      	str	r0, [sp, #4]
900016ae:	f105 0084 	add.w	r0, r5, #132	; 0x84
900016b2:	f7ff fddf 	bl	90001274 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
900016b6:	9901      	ldr	r1, [sp, #4]
900016b8:	f105 0084 	add.w	r0, r5, #132	; 0x84
900016bc:	f7ff ff58 	bl	90001570 <BSP_AUDIO_IN_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
900016c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
900016c4:	4f11      	ldr	r7, [pc, #68]	; (9000170c <BSP_AUDIO_IN_InitEx.part.0+0x88>)
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
900016c6:	4622      	mov	r2, r4
900016c8:	f04f 0001 	mov.w	r0, #1
900016cc:	bf0c      	ite	eq
900016ce:	210a      	moveq	r1, #10
900016d0:	2105      	movne	r1, #5
900016d2:	f7ff fcd1 	bl	90001078 <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
900016d6:	68bb      	ldr	r3, [r7, #8]
900016d8:	2034      	movs	r0, #52	; 0x34
900016da:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
900016dc:	f648 1394 	movw	r3, #35220	; 0x8994
900016e0:	4298      	cmp	r0, r3
900016e2:	d10d      	bne.n	90001700 <BSP_AUDIO_IN_InitEx.part.0+0x7c>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
900016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900016e6:	2034      	movs	r0, #52	; 0x34
900016e8:	4798      	blx	r3
      audio_drv = &wm8994_drv;
900016ea:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
900016ee:	4623      	mov	r3, r4
900016f0:	683d      	ldr	r5, [r7, #0]
900016f2:	2264      	movs	r2, #100	; 0x64
900016f4:	4631      	mov	r1, r6
900016f6:	2034      	movs	r0, #52	; 0x34
900016f8:	47a8      	blx	r5
      ret = AUDIO_OK;
900016fa:	2000      	movs	r0, #0
}
900016fc:	b003      	add	sp, #12
900016fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = AUDIO_ERROR;
90001700:	2001      	movs	r0, #1
90001702:	e7fb      	b.n	900016fc <BSP_AUDIO_IN_InitEx.part.0+0x78>
90001704:	2000016c 	.word	0x2000016c
90001708:	40015c24 	.word	0x40015c24
9000170c:	2000002c 	.word	0x2000002c

90001710 <BSP_AUDIO_IN_Init>:
{
90001710:	4601      	mov	r1, r0
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
90001712:	f44f 7000 	mov.w	r0, #512	; 0x200
90001716:	f7ff bfb5 	b.w	90001684 <BSP_AUDIO_IN_InitEx.part.0>
	...

9000171c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
9000171c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
90001720:	4c1a      	ldr	r4, [pc, #104]	; (9000178c <LL_FillBuffer+0x70>)
{
90001722:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
90001724:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
90001728:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000172a:	2234      	movs	r2, #52	; 0x34
{
9000172c:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
9000172e:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
90001730:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001732:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
{
90001736:	460e      	mov	r6, r1
90001738:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000173c:	fb02 4303 	mla	r3, r2, r3, r4
90001740:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
90001744:	1eab      	subs	r3, r5, #2
90001746:	425d      	negs	r5, r3
90001748:	415d      	adcs	r5, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
9000174a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000174c:	006d      	lsls	r5, r5, #1
  hDma2dHandler.Init.OutputOffset = OffLine;      
9000174e:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
90001750:	4b0f      	ldr	r3, [pc, #60]	; (90001790 <LL_FillBuffer+0x74>)
90001752:	60a5      	str	r5, [r4, #8]
90001754:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
90001756:	f001 fc78 	bl	9000304a <HAL_DMA2D_Init>
9000175a:	b9a0      	cbnz	r0, 90001786 <LL_FillBuffer+0x6a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
9000175c:	4649      	mov	r1, r9
9000175e:	4620      	mov	r0, r4
90001760:	f001 fd36 	bl	900031d0 <HAL_DMA2D_ConfigLayer>
90001764:	b978      	cbnz	r0, 90001786 <LL_FillBuffer+0x6a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
90001766:	463b      	mov	r3, r7
90001768:	4632      	mov	r2, r6
9000176a:	4651      	mov	r1, sl
9000176c:	4620      	mov	r0, r4
9000176e:	f8cd 8000 	str.w	r8, [sp]
90001772:	f001 fc96 	bl	900030a2 <HAL_DMA2D_Start>
90001776:	b930      	cbnz	r0, 90001786 <LL_FillBuffer+0x6a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90001778:	210a      	movs	r1, #10
9000177a:	4620      	mov	r0, r4
      }
    }
  } 
}
9000177c:	b002      	add	sp, #8
9000177e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
90001782:	f001 bca8 	b.w	900030d6 <HAL_DMA2D_PollForTransfer>
}
90001786:	b002      	add	sp, #8
90001788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000178c:	200003d8 	.word	0x200003d8
90001790:	4002b000 	.word	0x4002b000

90001794 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
90001794:	4b04      	ldr	r3, [pc, #16]	; (900017a8 <BSP_LCD_GetXSize+0x14>)
90001796:	2134      	movs	r1, #52	; 0x34
90001798:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
9000179c:	fb01 3302 	mla	r3, r1, r2, r3
}
900017a0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
900017a4:	4770      	bx	lr
900017a6:	bf00      	nop
900017a8:	200003d8 	.word	0x200003d8

900017ac <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
900017ac:	4b04      	ldr	r3, [pc, #16]	; (900017c0 <BSP_LCD_GetYSize+0x14>)
900017ae:	2134      	movs	r1, #52	; 0x34
900017b0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
900017b4:	fb01 3302 	mla	r3, r1, r2, r3
}
900017b8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
900017bc:	4770      	bx	lr
900017be:	bf00      	nop
900017c0:	200003d8 	.word	0x200003d8

900017c4 <BSP_LCD_LayerDefaultInit>:
{     
900017c4:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
900017c6:	2400      	movs	r4, #0
{     
900017c8:	b08e      	sub	sp, #56	; 0x38
900017ca:	460e      	mov	r6, r1
900017cc:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
900017ce:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
900017d0:	f7ff ffe0 	bl	90001794 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
900017d4:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
900017d8:	f7ff ffe8 	bl	900017ac <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
900017dc:	23ff      	movs	r3, #255	; 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900017de:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  layer_cfg.Backcolor.Blue = 0;
900017e2:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
900017e6:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.FBStartAdress = FB_Address;
900017ea:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha0 = 0;
900017ec:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
900017f0:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900017f4:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
900017f6:	4c0f      	ldr	r4, [pc, #60]	; (90001834 <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
900017f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
900017fc:	f7ff ffca 	bl	90001794 <BSP_LCD_GetXSize>
90001800:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90001802:	f7ff ffd3 	bl	900017ac <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
90001806:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
90001808:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
9000180a:	a901      	add	r1, sp, #4
9000180c:	f104 0040 	add.w	r0, r4, #64	; 0x40
90001810:	f002 fe7a 	bl	90004508 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
90001814:	230c      	movs	r3, #12
90001816:	fb03 4005 	mla	r0, r3, r5, r4
9000181a:	f04f 33ff 	mov.w	r3, #4294967295
9000181e:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
90001822:	4b05      	ldr	r3, [pc, #20]	; (90001838 <BSP_LCD_LayerDefaultInit+0x74>)
90001824:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
90001828:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000182c:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
}
90001830:	b00e      	add	sp, #56	; 0x38
90001832:	bd70      	pop	{r4, r5, r6, pc}
90001834:	200003d8 	.word	0x200003d8
90001838:	20000060 	.word	0x20000060

9000183c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
9000183c:	4b01      	ldr	r3, [pc, #4]	; (90001844 <BSP_LCD_SelectLayer+0x8>)
9000183e:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
} 
90001842:	4770      	bx	lr
90001844:	200003d8 	.word	0x200003d8

90001848 <BSP_LCD_SetTransparency>:
{    
90001848:	4602      	mov	r2, r0
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
9000184a:	4801      	ldr	r0, [pc, #4]	; (90001850 <BSP_LCD_SetTransparency+0x8>)
9000184c:	f002 be89 	b.w	90004562 <HAL_LTDC_SetAlpha>
90001850:	20000418 	.word	0x20000418

90001854 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
90001854:	4b04      	ldr	r3, [pc, #16]	; (90001868 <BSP_LCD_SetTextColor+0x14>)
90001856:	210c      	movs	r1, #12
90001858:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
9000185c:	fb01 3302 	mla	r3, r1, r2, r3
90001860:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
90001864:	4770      	bx	lr
90001866:	bf00      	nop
90001868:	200003d8 	.word	0x200003d8

9000186c <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
9000186c:	4b04      	ldr	r3, [pc, #16]	; (90001880 <BSP_LCD_SetBackColor+0x14>)
9000186e:	210c      	movs	r1, #12
90001870:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001874:	fb01 3302 	mla	r3, r1, r2, r3
90001878:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
9000187c:	4770      	bx	lr
9000187e:	bf00      	nop
90001880:	200003d8 	.word	0x200003d8

90001884 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
90001884:	4b04      	ldr	r3, [pc, #16]	; (90001898 <BSP_LCD_SetFont+0x14>)
90001886:	210c      	movs	r1, #12
90001888:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
9000188c:	fb01 3302 	mla	r3, r1, r2, r3
90001890:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
90001894:	4770      	bx	lr
90001896:	bf00      	nop
90001898:	200003d8 	.word	0x200003d8

9000189c <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
9000189c:	4b04      	ldr	r3, [pc, #16]	; (900018b0 <BSP_LCD_GetFont+0x14>)
9000189e:	210c      	movs	r1, #12
900018a0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
900018a4:	fb01 3302 	mla	r3, r1, r2, r3
}
900018a8:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
900018ac:	4770      	bx	lr
900018ae:	bf00      	nop
900018b0:	200003d8 	.word	0x200003d8

900018b4 <BSP_LCD_Clear>:
{ 
900018b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
900018b6:	4c0c      	ldr	r4, [pc, #48]	; (900018e8 <BSP_LCD_Clear+0x34>)
{ 
900018b8:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
900018ba:	f7ff ff6b 	bl	90001794 <BSP_LCD_GetXSize>
900018be:	9003      	str	r0, [sp, #12]
900018c0:	f8d4 60e8 	ldr.w	r6, [r4, #232]	; 0xe8
900018c4:	f7ff ff72 	bl	900017ac <BSP_LCD_GetYSize>
900018c8:	2134      	movs	r1, #52	; 0x34
900018ca:	4603      	mov	r3, r0
900018cc:	9501      	str	r5, [sp, #4]
900018ce:	4630      	mov	r0, r6
900018d0:	fb01 4406 	mla	r4, r1, r6, r4
900018d4:	2100      	movs	r1, #0
900018d6:	9a03      	ldr	r2, [sp, #12]
900018d8:	9100      	str	r1, [sp, #0]
900018da:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
900018de:	f7ff ff1d 	bl	9000171c <LL_FillBuffer>
}
900018e2:	b004      	add	sp, #16
900018e4:	bd70      	pop	{r4, r5, r6, pc}
900018e6:	bf00      	nop
900018e8:	200003d8 	.word	0x200003d8

900018ec <BSP_LCD_DrawHLine>:
{
900018ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900018f0:	4e14      	ldr	r6, [pc, #80]	; (90001944 <BSP_LCD_DrawHLine+0x58>)
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
900018f2:	2734      	movs	r7, #52	; 0x34
{
900018f4:	b085      	sub	sp, #20
900018f6:	4689      	mov	r9, r1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900018f8:	f8d6 80e8 	ldr.w	r8, [r6, #232]	; 0xe8
{
900018fc:	4605      	mov	r5, r0
900018fe:	9203      	str	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001900:	f7ff ff48 	bl	90001794 <BSP_LCD_GetXSize>
90001904:	fb07 6708 	mla	r7, r7, r8, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001908:	9a03      	ldr	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
9000190a:	fb00 5009 	mla	r0, r0, r9, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000190e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001912:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001916:	2b02      	cmp	r3, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
90001918:	f04f 030c 	mov.w	r3, #12
9000191c:	fb03 6308 	mla	r3, r3, r8, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001920:	bf0c      	ite	eq
90001922:	eb04 0140 	addeq.w	r1, r4, r0, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001926:	eb04 0180 	addne.w	r1, r4, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
9000192a:	4640      	mov	r0, r8
9000192c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
90001930:	9301      	str	r3, [sp, #4]
90001932:	2300      	movs	r3, #0
90001934:	9300      	str	r3, [sp, #0]
90001936:	2301      	movs	r3, #1
90001938:	f7ff fef0 	bl	9000171c <LL_FillBuffer>
}
9000193c:	b005      	add	sp, #20
9000193e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90001942:	bf00      	nop
90001944:	200003d8 	.word	0x200003d8

90001948 <BSP_LCD_DrawVLine>:
{
90001948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000194c:	4d14      	ldr	r5, [pc, #80]	; (900019a0 <BSP_LCD_DrawVLine+0x58>)
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
9000194e:	f04f 0834 	mov.w	r8, #52	; 0x34
{
90001952:	b085      	sub	sp, #20
90001954:	4607      	mov	r7, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001956:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
{
9000195a:	4689      	mov	r9, r1
9000195c:	9203      	str	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
9000195e:	f7ff ff19 	bl	90001794 <BSP_LCD_GetXSize>
90001962:	fb08 5806 	mla	r8, r8, r6, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001966:	9b03      	ldr	r3, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001968:	fb00 7109 	mla	r1, r0, r9, r7
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
9000196c:	3801      	subs	r0, #1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
9000196e:	f8d8 2088 	ldr.w	r2, [r8, #136]	; 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001972:	f8d8 409c 	ldr.w	r4, [r8, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001976:	2a02      	cmp	r2, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
90001978:	f04f 020c 	mov.w	r2, #12
9000197c:	fb02 5506 	mla	r5, r2, r6, r5
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001980:	bf0c      	ite	eq
90001982:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001986:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
9000198a:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
9000198e:	9000      	str	r0, [sp, #0]
90001990:	4630      	mov	r0, r6
90001992:	9201      	str	r2, [sp, #4]
90001994:	2201      	movs	r2, #1
90001996:	f7ff fec1 	bl	9000171c <LL_FillBuffer>
}
9000199a:	b005      	add	sp, #20
9000199c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900019a0:	200003d8 	.word	0x200003d8

900019a4 <BSP_LCD_DrawRect>:
{
900019a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900019a6:	461e      	mov	r6, r3
900019a8:	460d      	mov	r5, r1
900019aa:	4604      	mov	r4, r0
900019ac:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
900019ae:	f7ff ff9d 	bl	900018ec <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
900019b2:	19a9      	adds	r1, r5, r6
900019b4:	463a      	mov	r2, r7
900019b6:	4620      	mov	r0, r4
900019b8:	b289      	uxth	r1, r1
900019ba:	f7ff ff97 	bl	900018ec <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
900019be:	4632      	mov	r2, r6
900019c0:	4629      	mov	r1, r5
900019c2:	4620      	mov	r0, r4
900019c4:	f7ff ffc0 	bl	90001948 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
900019c8:	19e0      	adds	r0, r4, r7
900019ca:	4632      	mov	r2, r6
900019cc:	4629      	mov	r1, r5
900019ce:	b280      	uxth	r0, r0
}
900019d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
900019d4:	f7ff bfb8 	b.w	90001948 <BSP_LCD_DrawVLine>

900019d8 <BSP_LCD_DrawPixel>:
{
900019d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900019dc:	4d0d      	ldr	r5, [pc, #52]	; (90001a14 <BSP_LCD_DrawPixel+0x3c>)
{
900019de:	4614      	mov	r4, r2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
900019e0:	2234      	movs	r2, #52	; 0x34
{
900019e2:	4606      	mov	r6, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900019e4:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
{
900019e8:	460f      	mov	r7, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
900019ea:	fb02 5503 	mla	r5, r2, r3, r5
900019ee:	f7ff fed1 	bl	90001794 <BSP_LCD_GetXSize>
900019f2:	fb00 6007 	mla	r0, r0, r7, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900019f6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
900019fa:	f8d5 809c 	ldr.w	r8, [r5, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
900019fe:	2b02      	cmp	r3, #2
90001a00:	d104      	bne.n	90001a0c <BSP_LCD_DrawPixel+0x34>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
90001a02:	b2a4      	uxth	r4, r4
90001a04:	f828 4010 	strh.w	r4, [r8, r0, lsl #1]
}
90001a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
90001a0c:	f848 4020 	str.w	r4, [r8, r0, lsl #2]
}
90001a10:	e7fa      	b.n	90001a08 <BSP_LCD_DrawPixel+0x30>
90001a12:	bf00      	nop
90001a14:	200003d8 	.word	0x200003d8

90001a18 <BSP_LCD_DisplayChar>:
{
90001a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90001a1c:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90001a1e:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
90001a20:	f04f 0800 	mov.w	r8, #0
{
90001a24:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90001a28:	4929      	ldr	r1, [pc, #164]	; (90001ad0 <BSP_LCD_DisplayChar+0xb8>)
90001a2a:	200c      	movs	r0, #12
90001a2c:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	; 0xe8
90001a30:	fb00 110b 	mla	r1, r0, fp, r1
90001a34:	f8d1 10f4 	ldr.w	r1, [r1, #244]	; 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90001a38:	f8b1 9004 	ldrh.w	r9, [r1, #4]
90001a3c:	f8b1 a006 	ldrh.w	sl, [r1, #6]
90001a40:	f109 0607 	add.w	r6, r9, #7
90001a44:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
90001a46:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
90001a4a:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
90001a4c:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
90001a50:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
90001a54:	f109 32ff 	add.w	r2, r9, #4294967295
90001a58:	fa52 f380 	uxtab	r3, r2, r0
90001a5c:	9302      	str	r3, [sp, #8]
90001a5e:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
90001a60:	45d0      	cmp	r8, sl
90001a62:	eb03 0108 	add.w	r1, r3, r8
90001a66:	b289      	uxth	r1, r1
90001a68:	d302      	bcc.n	90001a70 <BSP_LCD_DisplayChar+0x58>
}
90001a6a:	b005      	add	sp, #20
90001a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
90001a70:	2e01      	cmp	r6, #1
      line =  pchar[0];      
90001a72:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
90001a74:	d004      	beq.n	90001a80 <BSP_LCD_DisplayChar+0x68>
90001a76:	2e02      	cmp	r6, #2
90001a78:	d109      	bne.n	90001a8e <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
90001a7a:	882c      	ldrh	r4, [r5, #0]
90001a7c:	ba64      	rev16	r4, r4
90001a7e:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
90001a80:	2700      	movs	r7, #0
90001a82:	45b9      	cmp	r9, r7
90001a84:	d80a      	bhi.n	90001a9c <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
90001a86:	f108 0801 	add.w	r8, r8, #1
90001a8a:	4435      	add	r5, r6
90001a8c:	e7e7      	b.n	90001a5e <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
90001a8e:	786a      	ldrb	r2, [r5, #1]
90001a90:	0424      	lsls	r4, r4, #16
90001a92:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
90001a96:	78aa      	ldrb	r2, [r5, #2]
90001a98:	4314      	orrs	r4, r2
      break;
90001a9a:	e7f1      	b.n	90001a80 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
90001a9c:	9b00      	ldr	r3, [sp, #0]
90001a9e:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
90001aa0:	9103      	str	r1, [sp, #12]
90001aa2:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
90001aa4:	9b02      	ldr	r3, [sp, #8]
90001aa6:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
90001aaa:	4b09      	ldr	r3, [pc, #36]	; (90001ad0 <BSP_LCD_DisplayChar+0xb8>)
90001aac:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
90001aae:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
90001ab0:	fa02 f20c 	lsl.w	r2, r2, ip
90001ab4:	4222      	tst	r2, r4
90001ab6:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
90001aba:	fb02 320b 	mla	r2, r2, fp, r3
90001abe:	bf14      	ite	ne
90001ac0:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
90001ac4:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
90001ac8:	f7ff ff86 	bl	900019d8 <BSP_LCD_DrawPixel>
90001acc:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
90001ace:	e7d8      	b.n	90001a82 <BSP_LCD_DisplayChar+0x6a>
90001ad0:	200003d8 	.word	0x200003d8

90001ad4 <BSP_LCD_DisplayStringAt>:
{
90001ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90001ad8:	4699      	mov	r9, r3
90001ada:	4605      	mov	r5, r0
90001adc:	460f      	mov	r7, r1
90001ade:	4616      	mov	r6, r2
  uint8_t  *ptr = Text;
90001ae0:	4613      	mov	r3, r2
90001ae2:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
90001ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
90001ae8:	2a00      	cmp	r2, #0
90001aea:	d1fa      	bne.n	90001ae2 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90001aec:	f7ff fe52 	bl	90001794 <BSP_LCD_GetXSize>
90001af0:	4b22      	ldr	r3, [pc, #136]	; (90001b7c <BSP_LCD_DisplayStringAt+0xa8>)
90001af2:	210c      	movs	r1, #12
  switch (Mode)
90001af4:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
90001af8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001afc:	fb01 3302 	mla	r3, r1, r2, r3
90001b00:	f8d3 80f4 	ldr.w	r8, [r3, #244]	; 0xf4
90001b04:	f8b8 3004 	ldrh.w	r3, [r8, #4]
90001b08:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
90001b0c:	d01d      	beq.n	90001b4a <BSP_LCD_DisplayStringAt+0x76>
90001b0e:	f1b9 0f02 	cmp.w	r9, #2
90001b12:	d021      	beq.n	90001b58 <BSP_LCD_DisplayStringAt+0x84>
  if ((ref_column < 1) || (ref_column >= 0x8000))
90001b14:	b22b      	sxth	r3, r5
    ref_column = 1;
90001b16:	2400      	movs	r4, #0
90001b18:	2b00      	cmp	r3, #0
90001b1a:	bfd8      	it	le
90001b1c:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
90001b1e:	f7ff fe39 	bl	90001794 <BSP_LCD_GetXSize>
90001b22:	f8b8 3004 	ldrh.w	r3, [r8, #4]
90001b26:	b2a2      	uxth	r2, r4
90001b28:	f816 9004 	ldrb.w	r9, [r6, r4]
90001b2c:	3401      	adds	r4, #1
90001b2e:	fb03 0012 	mls	r0, r3, r2, r0
90001b32:	b280      	uxth	r0, r0
90001b34:	4298      	cmp	r0, r3
90001b36:	bf34      	ite	cc
90001b38:	2000      	movcc	r0, #0
90001b3a:	2001      	movcs	r0, #1
90001b3c:	f1b9 0f00 	cmp.w	r9, #0
90001b40:	bf08      	it	eq
90001b42:	2000      	moveq	r0, #0
90001b44:	b978      	cbnz	r0, 90001b66 <BSP_LCD_DisplayStringAt+0x92>
}
90001b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
90001b4a:	1b34      	subs	r4, r6, r4
90001b4c:	4404      	add	r4, r0
90001b4e:	435c      	muls	r4, r3
90001b50:	eb05 0454 	add.w	r4, r5, r4, lsr #1
90001b54:	b2a5      	uxth	r5, r4
      break;
90001b56:	e7dd      	b.n	90001b14 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
90001b58:	1b34      	subs	r4, r6, r4
90001b5a:	4404      	add	r4, r0
90001b5c:	fb14 f403 	smulbb	r4, r4, r3
90001b60:	1b60      	subs	r0, r4, r5
90001b62:	b285      	uxth	r5, r0
      break;
90001b64:	e7d6      	b.n	90001b14 <BSP_LCD_DisplayStringAt+0x40>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
90001b66:	4628      	mov	r0, r5
90001b68:	464a      	mov	r2, r9
90001b6a:	4639      	mov	r1, r7
90001b6c:	f7ff ff54 	bl	90001a18 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
90001b70:	f8b8 3004 	ldrh.w	r3, [r8, #4]
90001b74:	442b      	add	r3, r5
90001b76:	b29d      	uxth	r5, r3
    i++;
90001b78:	e7d1      	b.n	90001b1e <BSP_LCD_DisplayStringAt+0x4a>
90001b7a:	bf00      	nop
90001b7c:	200003d8 	.word	0x200003d8

90001b80 <BSP_LCD_DisplayStringAtLine>:
{  
90001b80:	b513      	push	{r0, r1, r4, lr}
90001b82:	4604      	mov	r4, r0
90001b84:	9101      	str	r1, [sp, #4]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
90001b86:	f7ff fe89 	bl	9000189c <BSP_LCD_GetFont>
90001b8a:	88c3      	ldrh	r3, [r0, #6]
90001b8c:	9a01      	ldr	r2, [sp, #4]
90001b8e:	2000      	movs	r0, #0
90001b90:	fb13 f104 	smulbb	r1, r3, r4
90001b94:	2303      	movs	r3, #3
90001b96:	b289      	uxth	r1, r1
}
90001b98:	b002      	add	sp, #8
90001b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
90001b9e:	f7ff bf99 	b.w	90001ad4 <BSP_LCD_DisplayStringAt>
	...

90001ba4 <BSP_LCD_DrawLine>:
{
90001ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001ba8:	1a14      	subs	r4, r2, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001baa:	1a5e      	subs	r6, r3, r1
{
90001bac:	b085      	sub	sp, #20
  x = x1;                       /* Start x off at the first pixel */
90001bae:	fa0f f980 	sxth.w	r9, r0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001bb2:	2c00      	cmp	r4, #0
  y = y1;                       /* Start y off at the first pixel */
90001bb4:	fa0f fa81 	sxth.w	sl, r1
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001bb8:	bfb8      	it	lt
90001bba:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001bbc:	2e00      	cmp	r6, #0
90001bbe:	bfb8      	it	lt
90001bc0:	4276      	neglt	r6, r6
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001bc2:	b224      	sxth	r4, r4
    xinc1 = -1;
90001bc4:	4282      	cmp	r2, r0
90001bc6:	bf2c      	ite	cs
90001bc8:	2701      	movcs	r7, #1
90001bca:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
90001bce:	428b      	cmp	r3, r1
90001bd0:	bf2c      	ite	cs
90001bd2:	f04f 0801 	movcs.w	r8, #1
90001bd6:	f04f 38ff 	movcc.w	r8, #4294967295
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001bda:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
90001bdc:	42b4      	cmp	r4, r6
90001bde:	db0f      	blt.n	90001c00 <BSP_LCD_DrawLine+0x5c>
    num = deltax / 2;
90001be0:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
90001be4:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
90001be6:	2700      	movs	r7, #0
    num = deltax / 2;
90001be8:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
90001bea:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
90001bec:	f04f 0b00 	mov.w	fp, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
90001bf0:	4b20      	ldr	r3, [pc, #128]	; (90001c74 <BSP_LCD_DrawLine+0xd0>)
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
90001bf2:	fa0f f28b 	sxth.w	r2, fp
90001bf6:	4294      	cmp	r4, r2
90001bf8:	da10      	bge.n	90001c1c <BSP_LCD_DrawLine+0x78>
}
90001bfa:	b005      	add	sp, #20
90001bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
90001c00:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
90001c04:	4623      	mov	r3, r4
90001c06:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
90001c0a:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
90001c0e:	4634      	mov	r4, r6
90001c10:	f345 054f 	sbfx	r5, r5, #1, #16
90001c14:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
90001c16:	f8cd 8000 	str.w	r8, [sp]
90001c1a:	e7e7      	b.n	90001bec <BSP_LCD_DrawLine+0x48>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
90001c1c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90001c20:	f04f 0c0c 	mov.w	ip, #12
90001c24:	fa1f f089 	uxth.w	r0, r9
    num += num_add;                            /* Increase the numerator by the top of the fraction */
90001c28:	4435      	add	r5, r6
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
90001c2a:	fb0c 3202 	mla	r2, ip, r2, r3
90001c2e:	fa1f f18a 	uxth.w	r1, sl
90001c32:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
90001c36:	e9cd 0102 	strd	r0, r1, [sp, #8]
90001c3a:	f7ff fecd 	bl	900019d8 <BSP_LCD_DrawPixel>
    if (num >= den)                           /* Check if numerator >= denominator */
90001c3e:	4b0d      	ldr	r3, [pc, #52]	; (90001c74 <BSP_LCD_DrawLine+0xd0>)
    num += num_add;                            /* Increase the numerator by the top of the fraction */
90001c40:	b2aa      	uxth	r2, r5
90001c42:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
90001c44:	42ac      	cmp	r4, r5
90001c46:	dc09      	bgt.n	90001c5c <BSP_LCD_DrawLine+0xb8>
      x += xinc1;                             /* Change the x as appropriate */
90001c48:	9802      	ldr	r0, [sp, #8]
      num -= den;                             /* Calculate the new numerator value */
90001c4a:	1b12      	subs	r2, r2, r4
      y += yinc1;                             /* Change the y as appropriate */
90001c4c:	9903      	ldr	r1, [sp, #12]
      x += xinc1;                             /* Change the x as appropriate */
90001c4e:	4438      	add	r0, r7
      num -= den;                             /* Calculate the new numerator value */
90001c50:	b215      	sxth	r5, r2
      y += yinc1;                             /* Change the y as appropriate */
90001c52:	4441      	add	r1, r8
      x += xinc1;                             /* Change the x as appropriate */
90001c54:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;                             /* Change the y as appropriate */
90001c58:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                               /* Change the x as appropriate */
90001c5c:	9a00      	ldr	r2, [sp, #0]
90001c5e:	f10b 0b01 	add.w	fp, fp, #1
90001c62:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
90001c64:	9a01      	ldr	r2, [sp, #4]
90001c66:	4492      	add	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
90001c68:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
90001c6c:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
90001c70:	e7bf      	b.n	90001bf2 <BSP_LCD_DrawLine+0x4e>
90001c72:	bf00      	nop
90001c74:	200003d8 	.word	0x200003d8

90001c78 <FillTriangle>:
{ 
90001c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90001c7c:	b087      	sub	sp, #28
90001c7e:	461d      	mov	r5, r3
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001c80:	1a0c      	subs	r4, r1, r0
  x = x1;                       /* Start x off at the first pixel */
90001c82:	fa0f f980 	sxth.w	r9, r0
{ 
90001c86:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
  y = y1;                       /* Start y off at the first pixel */
90001c8a:	fa0f fa85 	sxth.w	sl, r5
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001c8e:	2c00      	cmp	r4, #0
{ 
90001c90:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001c94:	eba8 0605 	sub.w	r6, r8, r5
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001c98:	bfb8      	it	lt
90001c9a:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001c9c:	2e00      	cmp	r6, #0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
90001c9e:	b224      	sxth	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001ca0:	bfb8      	it	lt
90001ca2:	4276      	neglt	r6, r6
    xinc1 = -1;
90001ca4:	4281      	cmp	r1, r0
90001ca6:	bf2c      	ite	cs
90001ca8:	2701      	movcs	r7, #1
90001caa:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
90001cae:	45a8      	cmp	r8, r5
90001cb0:	bf2c      	ite	cs
90001cb2:	f04f 0801 	movcs.w	r8, #1
90001cb6:	f04f 38ff 	movcc.w	r8, #4294967295
  deltay = ABS(y2 - y1);        /* The difference between the y's */
90001cba:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
90001cbc:	42b4      	cmp	r4, r6
90001cbe:	db0e      	blt.n	90001cde <FillTriangle+0x66>
    num = deltax / 2;
90001cc0:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
90001cc4:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
90001cc6:	2700      	movs	r7, #0
    num = deltax / 2;
90001cc8:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
90001cca:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
90001ccc:	f04f 0b00 	mov.w	fp, #0
90001cd0:	fa0f f18b 	sxth.w	r1, fp
90001cd4:	428c      	cmp	r4, r1
90001cd6:	da10      	bge.n	90001cfa <FillTriangle+0x82>
}
90001cd8:	b007      	add	sp, #28
90001cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
90001cde:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
90001ce2:	4621      	mov	r1, r4
90001ce4:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
90001ce8:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
90001cec:	4634      	mov	r4, r6
90001cee:	f345 054f 	sbfx	r5, r5, #1, #16
90001cf2:	460e      	mov	r6, r1
    xinc2 = 0;                  /* Don't change the x for every iteration */
90001cf4:	f8cd 8000 	str.w	r8, [sp]
90001cf8:	e7e8      	b.n	90001ccc <FillTriangle+0x54>
    BSP_LCD_DrawLine(x, y, x3, y3);
90001cfa:	fa1f f089 	uxth.w	r0, r9
    num += num_add;              /* Increase the numerator by the top of the fraction */
90001cfe:	4435      	add	r5, r6
    BSP_LCD_DrawLine(x, y, x3, y3);
90001d00:	fa1f f18a 	uxth.w	r1, sl
90001d04:	e9cd 2304 	strd	r2, r3, [sp, #16]
90001d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
90001d0c:	f7ff ff4a 	bl	90001ba4 <BSP_LCD_DrawLine>
    num += num_add;              /* Increase the numerator by the top of the fraction */
90001d10:	fa1f fc85 	uxth.w	ip, r5
90001d14:	b22d      	sxth	r5, r5
    if (num >= den)             /* Check if numerator >= denominator */
90001d16:	42ac      	cmp	r4, r5
90001d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
90001d1c:	dc0a      	bgt.n	90001d34 <FillTriangle+0xbc>
      x += xinc1;               /* Change the x as appropriate */
90001d1e:	9802      	ldr	r0, [sp, #8]
      num -= den;               /* Calculate the new numerator value */
90001d20:	ebac 0504 	sub.w	r5, ip, r4
      y += yinc1;               /* Change the y as appropriate */
90001d24:	9903      	ldr	r1, [sp, #12]
      x += xinc1;               /* Change the x as appropriate */
90001d26:	4438      	add	r0, r7
      num -= den;               /* Calculate the new numerator value */
90001d28:	b22d      	sxth	r5, r5
      y += yinc1;               /* Change the y as appropriate */
90001d2a:	4441      	add	r1, r8
      x += xinc1;               /* Change the x as appropriate */
90001d2c:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;               /* Change the y as appropriate */
90001d30:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
90001d34:	9900      	ldr	r1, [sp, #0]
90001d36:	f10b 0b01 	add.w	fp, fp, #1
90001d3a:	4489      	add	r9, r1
    y += yinc2;                 /* Change the y as appropriate */
90001d3c:	9901      	ldr	r1, [sp, #4]
90001d3e:	448a      	add	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
90001d40:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                 /* Change the y as appropriate */
90001d44:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
90001d48:	e7c2      	b.n	90001cd0 <FillTriangle+0x58>
	...

90001d4c <BSP_LCD_DrawCircle>:
{
90001d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
90001d50:	0054      	lsls	r4, r2, #1
{
90001d52:	b087      	sub	sp, #28
90001d54:	4688      	mov	r8, r1
  current_y = Radius;
90001d56:	4615      	mov	r5, r2
  decision = 3 - (Radius << 1);
90001d58:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
90001d5c:	2700      	movs	r7, #0
{
90001d5e:	9001      	str	r0, [sp, #4]
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
90001d60:	4835      	ldr	r0, [pc, #212]	; (90001e38 <BSP_LCD_DrawCircle+0xec>)
90001d62:	f04f 0c0c 	mov.w	ip, #12
90001d66:	9b01      	ldr	r3, [sp, #4]
90001d68:	b2ae      	uxth	r6, r5
90001d6a:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
90001d6e:	fa1f f987 	uxth.w	r9, r7
90001d72:	fa13 f387 	uxtah	r3, r3, r7
90001d76:	eba8 0106 	sub.w	r1, r8, r6
90001d7a:	fb0c 0202 	mla	r2, ip, r2, r0
90001d7e:	b29b      	uxth	r3, r3
90001d80:	b289      	uxth	r1, r1
90001d82:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
90001d86:	4618      	mov	r0, r3
90001d88:	9305      	str	r3, [sp, #20]
90001d8a:	e9cd 2103 	strd	r2, r1, [sp, #12]
90001d8e:	f7ff fe23 	bl	900019d8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
90001d92:	9b01      	ldr	r3, [sp, #4]
90001d94:	f8cd 9008 	str.w	r9, [sp, #8]
90001d98:	eba3 0b09 	sub.w	fp, r3, r9
90001d9c:	fa1f fb8b 	uxth.w	fp, fp
90001da0:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90001da4:	4658      	mov	r0, fp
90001da6:	f7ff fe17 	bl	900019d8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90001daa:	9b01      	ldr	r3, [sp, #4]
90001dac:	9a03      	ldr	r2, [sp, #12]
90001dae:	eb06 0a03 	add.w	sl, r6, r3
90001db2:	9b02      	ldr	r3, [sp, #8]
90001db4:	eba8 0103 	sub.w	r1, r8, r3
90001db8:	fa1f fa8a 	uxth.w	sl, sl
90001dbc:	b289      	uxth	r1, r1
90001dbe:	4650      	mov	r0, sl
90001dc0:	9104      	str	r1, [sp, #16]
90001dc2:	f7ff fe09 	bl	900019d8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90001dc6:	9b01      	ldr	r3, [sp, #4]
90001dc8:	eba3 0906 	sub.w	r9, r3, r6
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90001dcc:	4446      	add	r6, r8
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
90001dce:	fa1f f989 	uxth.w	r9, r9
90001dd2:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90001dd6:	4648      	mov	r0, r9
90001dd8:	f7ff fdfe 	bl	900019d8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90001ddc:	9b05      	ldr	r3, [sp, #20]
90001dde:	b2b1      	uxth	r1, r6
90001de0:	9a03      	ldr	r2, [sp, #12]
90001de2:	4618      	mov	r0, r3
90001de4:	9104      	str	r1, [sp, #16]
90001de6:	f7ff fdf7 	bl	900019d8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
90001dea:	4658      	mov	r0, fp
90001dec:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90001df0:	f7ff fdf2 	bl	900019d8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
90001df4:	9b02      	ldr	r3, [sp, #8]
90001df6:	9a03      	ldr	r2, [sp, #12]
90001df8:	4650      	mov	r0, sl
90001dfa:	eb03 0108 	add.w	r1, r3, r8
90001dfe:	b289      	uxth	r1, r1
90001e00:	9102      	str	r1, [sp, #8]
90001e02:	f7ff fde9 	bl	900019d8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
90001e06:	4648      	mov	r0, r9
90001e08:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90001e0c:	f7ff fde4 	bl	900019d8 <BSP_LCD_DrawPixel>
    if (decision < 0)
90001e10:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
90001e12:	bfb1      	iteee	lt
90001e14:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
90001e16:	1b7b      	subge	r3, r7, r5
90001e18:	340a      	addge	r4, #10
      current_y--;
90001e1a:	f105 35ff 	addge.w	r5, r5, #4294967295
      decision += (current_x << 2) + 6;
90001e1e:	bfb8      	it	lt
90001e20:	eb04 0487 	addlt.w	r4, r4, r7, lsl #2
    current_x++;
90001e24:	f107 0701 	add.w	r7, r7, #1
      decision += ((current_x - current_y) << 2) + 10;
90001e28:	bfa8      	it	ge
90001e2a:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
90001e2e:	42bd      	cmp	r5, r7
90001e30:	d296      	bcs.n	90001d60 <BSP_LCD_DrawCircle+0x14>
}
90001e32:	b007      	add	sp, #28
90001e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001e38:	200003d8 	.word	0x200003d8

90001e3c <BSP_LCD_FillRect>:
{
90001e3c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001e40:	4d1b      	ldr	r5, [pc, #108]	; (90001eb0 <BSP_LCD_FillRect+0x74>)
{
90001e42:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001e44:	230c      	movs	r3, #12
{
90001e46:	4604      	mov	r4, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001e48:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
{
90001e4c:	4617      	mov	r7, r2
90001e4e:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001e50:	fb03 5306 	mla	r3, r3, r6, r5
90001e54:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
90001e58:	f7ff fcfc 	bl	90001854 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
90001e5c:	2334      	movs	r3, #52	; 0x34
90001e5e:	fb03 5306 	mla	r3, r3, r6, r5
90001e62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
90001e66:	f8d3 a09c 	ldr.w	sl, [r3, #156]	; 0x9c
90001e6a:	2a02      	cmp	r2, #2
90001e6c:	d118      	bne.n	90001ea0 <BSP_LCD_FillRect+0x64>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001e6e:	f7ff fc91 	bl	90001794 <BSP_LCD_GetXSize>
90001e72:	fb00 4009 	mla	r0, r0, r9, r4
90001e76:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
90001e7a:	f7ff fc8b 	bl	90001794 <BSP_LCD_GetXSize>
90001e7e:	230c      	movs	r3, #12
90001e80:	1bc0      	subs	r0, r0, r7
90001e82:	463a      	mov	r2, r7
90001e84:	fb03 5106 	mla	r1, r3, r6, r5
90001e88:	f8d1 30ec 	ldr.w	r3, [r1, #236]	; 0xec
90001e8c:	4651      	mov	r1, sl
90001e8e:	9000      	str	r0, [sp, #0]
90001e90:	4630      	mov	r0, r6
90001e92:	9301      	str	r3, [sp, #4]
90001e94:	4643      	mov	r3, r8
90001e96:	f7ff fc41 	bl	9000171c <LL_FillBuffer>
}
90001e9a:	b002      	add	sp, #8
90001e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
90001ea0:	f7ff fc78 	bl	90001794 <BSP_LCD_GetXSize>
90001ea4:	fb00 4109 	mla	r1, r0, r9, r4
90001ea8:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
90001eac:	e7e5      	b.n	90001e7a <BSP_LCD_FillRect+0x3e>
90001eae:	bf00      	nop
90001eb0:	200003d8 	.word	0x200003d8

90001eb4 <BSP_LCD_ClearStringLine>:
{
90001eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
90001eb6:	4c12      	ldr	r4, [pc, #72]	; (90001f00 <BSP_LCD_ClearStringLine+0x4c>)
90001eb8:	260c      	movs	r6, #12
90001eba:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
90001ebe:	fb06 4303 	mla	r3, r6, r3, r4
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
90001ec2:	e9d3 523b 	ldrd	r5, r2, [r3, #236]	; 0xec
90001ec6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
90001eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001ece:	88df      	ldrh	r7, [r3, #6]
90001ed0:	fb10 f007 	smulbb	r0, r0, r7
90001ed4:	b281      	uxth	r1, r0
90001ed6:	9101      	str	r1, [sp, #4]
90001ed8:	f7ff fc5c 	bl	90001794 <BSP_LCD_GetXSize>
90001edc:	463b      	mov	r3, r7
90001ede:	b282      	uxth	r2, r0
90001ee0:	9901      	ldr	r1, [sp, #4]
90001ee2:	2000      	movs	r0, #0
90001ee4:	f7ff ffaa 	bl	90001e3c <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = color_backup;
90001ee8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
90001eec:	4628      	mov	r0, r5
  DrawProp[ActiveLayer].TextColor = color_backup;
90001eee:	fb06 4403 	mla	r4, r6, r3, r4
90001ef2:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
90001ef6:	b003      	add	sp, #12
90001ef8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
90001efc:	f7ff bcaa 	b.w	90001854 <BSP_LCD_SetTextColor>
90001f00:	200003d8 	.word	0x200003d8

90001f04 <BSP_LCD_FillCircle>:
{
90001f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001f08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 90001fd0 <BSP_LCD_FillCircle+0xcc>
  decision = 3 - (Radius << 1);
90001f0c:	0054      	lsls	r4, r2, #1
{
90001f0e:	4691      	mov	r9, r2
  current_y = Radius;
90001f10:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001f12:	f8da 30e8 	ldr.w	r3, [sl, #232]	; 0xe8
90001f16:	220c      	movs	r2, #12
  decision = 3 - (Radius << 1);
90001f18:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
90001f1c:	2500      	movs	r5, #0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001f1e:	fb02 a303 	mla	r3, r2, r3, sl
{
90001f22:	4680      	mov	r8, r0
90001f24:	460e      	mov	r6, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001f26:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
90001f2a:	f7ff fc93 	bl	90001854 <BSP_LCD_SetTextColor>
    if(current_y > 0) 
90001f2e:	b1af      	cbz	r7, 90001f5c <BSP_LCD_FillCircle+0x58>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
90001f30:	b2ba      	uxth	r2, r7
90001f32:	fa16 f185 	uxtah	r1, r6, r5
90001f36:	fa1f fb85 	uxth.w	fp, r5
90001f3a:	eba8 0002 	sub.w	r0, r8, r2
90001f3e:	0052      	lsls	r2, r2, #1
90001f40:	b289      	uxth	r1, r1
90001f42:	b280      	uxth	r0, r0
90001f44:	b292      	uxth	r2, r2
90001f46:	9000      	str	r0, [sp, #0]
90001f48:	9201      	str	r2, [sp, #4]
90001f4a:	f7ff fccf 	bl	900018ec <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
90001f4e:	eba6 010b 	sub.w	r1, r6, fp
90001f52:	9a01      	ldr	r2, [sp, #4]
90001f54:	9800      	ldr	r0, [sp, #0]
90001f56:	b289      	uxth	r1, r1
90001f58:	f7ff fcc8 	bl	900018ec <BSP_LCD_DrawHLine>
    if(current_x > 0) 
90001f5c:	b1ad      	cbz	r5, 90001f8a <BSP_LCD_FillCircle+0x86>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
90001f5e:	b2aa      	uxth	r2, r5
90001f60:	fa1f fb87 	uxth.w	fp, r7
90001f64:	eba8 0002 	sub.w	r0, r8, r2
90001f68:	0052      	lsls	r2, r2, #1
90001f6a:	eba6 010b 	sub.w	r1, r6, fp
90001f6e:	b280      	uxth	r0, r0
90001f70:	b292      	uxth	r2, r2
90001f72:	b289      	uxth	r1, r1
90001f74:	9000      	str	r0, [sp, #0]
90001f76:	9201      	str	r2, [sp, #4]
90001f78:	f7ff fcb8 	bl	900018ec <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
90001f7c:	eb0b 0106 	add.w	r1, fp, r6
90001f80:	9a01      	ldr	r2, [sp, #4]
90001f82:	9800      	ldr	r0, [sp, #0]
90001f84:	b289      	uxth	r1, r1
90001f86:	f7ff fcb1 	bl	900018ec <BSP_LCD_DrawHLine>
    if (decision < 0)
90001f8a:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
90001f8c:	bfb1      	iteee	lt
90001f8e:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
90001f90:	1beb      	subge	r3, r5, r7
90001f92:	340a      	addge	r4, #10
      current_y--;
90001f94:	f107 37ff 	addge.w	r7, r7, #4294967295
      decision += (current_x << 2) + 6;
90001f98:	bfb8      	it	lt
90001f9a:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
    current_x++;
90001f9e:	f105 0501 	add.w	r5, r5, #1
      decision += ((current_x - current_y) << 2) + 10;
90001fa2:	bfa8      	it	ge
90001fa4:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
90001fa8:	42af      	cmp	r7, r5
90001faa:	d2c0      	bcs.n	90001f2e <BSP_LCD_FillCircle+0x2a>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
90001fac:	f8da 30e8 	ldr.w	r3, [sl, #232]	; 0xe8
90001fb0:	220c      	movs	r2, #12
90001fb2:	fb02 aa03 	mla	sl, r2, r3, sl
90001fb6:	f8da 00ec 	ldr.w	r0, [sl, #236]	; 0xec
90001fba:	f7ff fc4b 	bl	90001854 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
90001fbe:	464a      	mov	r2, r9
90001fc0:	4631      	mov	r1, r6
90001fc2:	4640      	mov	r0, r8
}
90001fc4:	b003      	add	sp, #12
90001fc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
90001fca:	f7ff bebf 	b.w	90001d4c <BSP_LCD_DrawCircle>
90001fce:	bf00      	nop
90001fd0:	200003d8 	.word	0x200003d8

90001fd4 <BSP_LCD_FillPolygon>:
{
90001fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  image_left = image_right = Points->X;
90001fd8:	f8b0 8000 	ldrh.w	r8, [r0]
{
90001fdc:	460f      	mov	r7, r1
  image_top= image_bottom = Points->Y;
90001fde:	f8b0 9002 	ldrh.w	r9, [r0, #2]
{
90001fe2:	b087      	sub	sp, #28
  image_left = image_right = Points->X;
90001fe4:	4644      	mov	r4, r8
90001fe6:	4645      	mov	r5, r8
  image_top= image_bottom = Points->Y;
90001fe8:	464e      	mov	r6, r9
90001fea:	4649      	mov	r1, r9
  for(counter = 1; counter < PointCount; counter++)
90001fec:	2301      	movs	r3, #1
90001fee:	42bb      	cmp	r3, r7
90001ff0:	db2f      	blt.n	90002052 <BSP_LCD_FillPolygon+0x7e>
  if(PointCount < 2)
90001ff2:	2f01      	cmp	r7, #1
90001ff4:	d92a      	bls.n	9000204c <BSP_LCD_FillPolygon+0x78>
  X_center = (image_left + image_right)/2;
90001ff6:	4425      	add	r5, r4
  Y_center = (image_bottom + image_top)/2;
90001ff8:	440e      	add	r6, r1
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
90001ffa:	f04f 0b00 	mov.w	fp, #0
90001ffe:	1d04      	adds	r4, r0, #4
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
90002000:	f3c5 054f 	ubfx	r5, r5, #1, #16
90002004:	f3c6 064f 	ubfx	r6, r6, #1, #16
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
90002008:	f8cd b00c 	str.w	fp, [sp, #12]
  while(--PointCount)
9000200c:	3f01      	subs	r7, #1
9000200e:	3404      	adds	r4, #4
90002010:	b2bf      	uxth	r7, r7
90002012:	bb9f      	cbnz	r7, 9000207c <BSP_LCD_FillPolygon+0xa8>
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
90002014:	f8bd 700c 	ldrh.w	r7, [sp, #12]
90002018:	fa1f f48b 	uxth.w	r4, fp
9000201c:	464b      	mov	r3, r9
9000201e:	462a      	mov	r2, r5
90002020:	4639      	mov	r1, r7
90002022:	4640      	mov	r0, r8
90002024:	e9cd 4600 	strd	r4, r6, [sp]
90002028:	f7ff fe26 	bl	90001c78 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
9000202c:	464b      	mov	r3, r9
9000202e:	463a      	mov	r2, r7
90002030:	4629      	mov	r1, r5
90002032:	4640      	mov	r0, r8
90002034:	e9cd 6400 	strd	r6, r4, [sp]
90002038:	f7ff fe1e 	bl	90001c78 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
9000203c:	4633      	mov	r3, r6
9000203e:	4642      	mov	r2, r8
90002040:	4639      	mov	r1, r7
90002042:	4628      	mov	r0, r5
90002044:	e9cd 4900 	strd	r4, r9, [sp]
90002048:	f7ff fe16 	bl	90001c78 <FillTriangle>
}
9000204c:	b007      	add	sp, #28
9000204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pixelX = POLY_X(counter);
90002052:	f930 2023 	ldrsh.w	r2, [r0, r3, lsl #2]
90002056:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
9000205a:	3301      	adds	r3, #1
    if(pixelX < image_left)
9000205c:	42aa      	cmp	r2, r5
      image_left = pixelX;
9000205e:	b21b      	sxth	r3, r3
90002060:	bfb8      	it	lt
90002062:	b295      	uxthlt	r5, r2
    if(pixelX > image_right)
90002064:	42a2      	cmp	r2, r4
      image_right = pixelX;
90002066:	bfc8      	it	gt
90002068:	b294      	uxthgt	r4, r2
    pixelY = POLY_Y(counter);
9000206a:	f9bc 2002 	ldrsh.w	r2, [ip, #2]
    if(pixelY < image_top)
9000206e:	428a      	cmp	r2, r1
      image_top = pixelY;
90002070:	bfb8      	it	lt
90002072:	b291      	uxthlt	r1, r2
    if(pixelY > image_bottom)
90002074:	42b2      	cmp	r2, r6
      image_bottom = pixelY;
90002076:	bfc8      	it	gt
90002078:	b296      	uxthgt	r6, r2
  for(counter = 1; counter < PointCount; counter++)
9000207a:	e7b8      	b.n	90001fee <BSP_LCD_FillPolygon+0x1a>
    X2 = Points->X;
9000207c:	f934 3c04 	ldrsh.w	r3, [r4, #-4]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
90002080:	f834 ac04 	ldrh.w	sl, [r4, #-4]
90002084:	f834 2c02 	ldrh.w	r2, [r4, #-2]
90002088:	f834 0c08 	ldrh.w	r0, [r4, #-8]
9000208c:	4651      	mov	r1, sl
    X2 = Points->X;
9000208e:	9303      	str	r3, [sp, #12]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
90002090:	f834 3c06 	ldrh.w	r3, [r4, #-6]
    Y2 = Points->Y;    
90002094:	f934 bc02 	ldrsh.w	fp, [r4, #-2]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
90002098:	9200      	str	r2, [sp, #0]
9000209a:	9305      	str	r3, [sp, #20]
9000209c:	9004      	str	r0, [sp, #16]
9000209e:	e9cd 6201 	strd	r6, r2, [sp, #4]
900020a2:	462a      	mov	r2, r5
900020a4:	f7ff fde8 	bl	90001c78 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
900020a8:	9b02      	ldr	r3, [sp, #8]
900020aa:	4652      	mov	r2, sl
900020ac:	4629      	mov	r1, r5
900020ae:	9804      	ldr	r0, [sp, #16]
900020b0:	e9cd 6300 	strd	r6, r3, [sp]
900020b4:	9b05      	ldr	r3, [sp, #20]
900020b6:	f7ff fddf 	bl	90001c78 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
900020ba:	9b05      	ldr	r3, [sp, #20]
900020bc:	9804      	ldr	r0, [sp, #16]
900020be:	4651      	mov	r1, sl
900020c0:	9301      	str	r3, [sp, #4]
900020c2:	9b02      	ldr	r3, [sp, #8]
900020c4:	4602      	mov	r2, r0
900020c6:	4628      	mov	r0, r5
900020c8:	9300      	str	r3, [sp, #0]
900020ca:	4633      	mov	r3, r6
900020cc:	f7ff fdd4 	bl	90001c78 <FillTriangle>
900020d0:	e79c      	b.n	9000200c <BSP_LCD_FillPolygon+0x38>
	...

900020d4 <BSP_LCD_DisplayOn>:
{
900020d4:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
900020d6:	4b09      	ldr	r3, [pc, #36]	; (900020fc <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
900020d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
900020dc:	4808      	ldr	r0, [pc, #32]	; (90002100 <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
900020de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900020e0:	6993      	ldr	r3, [r2, #24]
900020e2:	f043 0301 	orr.w	r3, r3, #1
900020e6:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
900020e8:	2201      	movs	r2, #1
900020ea:	f001 f99b 	bl	90003424 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
900020ee:	2201      	movs	r2, #1
900020f0:	2108      	movs	r1, #8
900020f2:	4804      	ldr	r0, [pc, #16]	; (90002104 <BSP_LCD_DisplayOn+0x30>)
}
900020f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
900020f8:	f001 b994 	b.w	90003424 <HAL_GPIO_WritePin>
900020fc:	200003d8 	.word	0x200003d8
90002100:	40022000 	.word	0x40022000
90002104:	40022800 	.word	0x40022800

90002108 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
90002108:	4b4b      	ldr	r3, [pc, #300]	; (90002238 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
9000210a:	484c      	ldr	r0, [pc, #304]	; (9000223c <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
9000210c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000210e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
90002112:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
90002114:	645a      	str	r2, [r3, #68]	; 0x44
{
90002116:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
90002118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
9000211a:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
9000211c:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
9000211e:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
90002120:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
90002124:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002128:	4e45      	ldr	r6, [pc, #276]	; (90002240 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
9000212a:	9200      	str	r2, [sp, #0]
9000212c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
9000212e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002130:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
90002134:	631a      	str	r2, [r3, #48]	; 0x30
90002136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002138:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
9000213c:	9201      	str	r2, [sp, #4]
9000213e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002142:	f042 0210 	orr.w	r2, r2, #16
90002146:	631a      	str	r2, [r3, #48]	; 0x30
90002148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000214a:	f002 0210 	and.w	r2, r2, #16
9000214e:	9202      	str	r2, [sp, #8]
90002150:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90002158:	631a      	str	r2, [r3, #48]	; 0x30
9000215a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000215c:	f002 0240 	and.w	r2, r2, #64	; 0x40
90002160:	9203      	str	r2, [sp, #12]
90002162:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90002164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
9000216a:	631a      	str	r2, [r3, #48]	; 0x30
9000216c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000216e:	f402 7280 	and.w	r2, r2, #256	; 0x100
90002172:	9204      	str	r2, [sp, #16]
90002174:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90002176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
9000217c:	631a      	str	r2, [r3, #48]	; 0x30
9000217e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002180:	f402 7200 	and.w	r2, r2, #512	; 0x200
90002184:	9205      	str	r2, [sp, #20]
90002186:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90002188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000218a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
9000218e:	631a      	str	r2, [r3, #48]	; 0x30
90002190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002192:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90002196:	9206      	str	r2, [sp, #24]
90002198:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
9000219a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000219c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
900021a0:	631a      	str	r2, [r3, #48]	; 0x30
900021a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900021a4:	f402 7280 	and.w	r2, r2, #256	; 0x100
900021a8:	9207      	str	r2, [sp, #28]
900021aa:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
900021ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900021ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
900021b2:	631a      	str	r2, [r3, #48]	; 0x30
900021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
900021b6:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
900021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900021bc:	9308      	str	r3, [sp, #32]
900021be:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900021c0:	2310      	movs	r3, #16
900021c2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
900021c6:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
900021c8:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900021cc:	f001 f848 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
900021d0:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900021d2:	a909      	add	r1, sp, #36	; 0x24
900021d4:	481b      	ldr	r0, [pc, #108]	; (90002244 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
900021d6:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900021d8:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900021dc:	f001 f840 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
900021e0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
900021e4:	a909      	add	r1, sp, #36	; 0x24
900021e6:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900021e8:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900021ea:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
900021ee:	f001 f837 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
900021f2:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
900021f6:	a909      	add	r1, sp, #36	; 0x24
900021f8:	4813      	ldr	r0, [pc, #76]	; (90002248 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900021fa:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900021fc:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
90002200:	f001 f82e 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
90002204:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002206:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002208:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
9000220a:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
9000220c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
90002210:	4c0e      	ldr	r4, [pc, #56]	; (9000224c <BSP_LCD_MspInit+0x144>)
90002212:	4620      	mov	r0, r4
90002214:	f001 f824 	bl	90003260 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90002218:	a909      	add	r1, sp, #36	; 0x24
9000221a:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
9000221c:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
9000221e:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
90002220:	f001 f81e 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
90002224:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
90002226:	a909      	add	r1, sp, #36	; 0x24
90002228:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
9000222a:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
9000222e:	f001 f817 	bl	90003260 <HAL_GPIO_Init>
}
90002232:	b00f      	add	sp, #60	; 0x3c
90002234:	bdf0      	pop	{r4, r5, r6, r7, pc}
90002236:	bf00      	nop
90002238:	40023800 	.word	0x40023800
9000223c:	40021000 	.word	0x40021000
90002240:	40022000 	.word	0x40022000
90002244:	40021800 	.word	0x40021800
90002248:	40022400 	.word	0x40022400
9000224c:	40022800 	.word	0x40022800

90002250 <BSP_LCD_Init>:
{    
90002250:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90002252:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
90002254:	4c24      	ldr	r4, [pc, #144]	; (900022e8 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90002256:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90002258:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
9000225a:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
9000225e:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
90002262:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
90002266:	230b      	movs	r3, #11
90002268:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
9000226c:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90002270:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
90002272:	e9c4 3019 	strd	r3, r0, [r4, #100]	; 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
90002276:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
9000227a:	f104 0040 	add.w	r0, r4, #64	; 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
9000227e:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	; 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
90002282:	f007 fc8b 	bl	90009b9c <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90002286:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
9000228a:	f44f 7388 	mov.w	r3, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
9000228e:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
90002290:	e9c4 e328 	strd	lr, r3, [r4, #160]	; 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
90002294:	2300      	movs	r3, #0
90002296:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
9000229a:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
9000229e:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
900022a2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hLtdcHandler.Instance = LTDC;
900022a6:	4b11      	ldr	r3, [pc, #68]	; (900022ec <BSP_LCD_Init+0x9c>)
900022a8:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
900022ac:	f002 f979 	bl	900045a2 <HAL_LTDC_GetState>
900022b0:	4601      	mov	r1, r0
900022b2:	b918      	cbnz	r0, 900022bc <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
900022b4:	f104 0040 	add.w	r0, r4, #64	; 0x40
900022b8:	f7ff ff26 	bl	90002108 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
900022bc:	480c      	ldr	r0, [pc, #48]	; (900022f0 <BSP_LCD_Init+0xa0>)
900022be:	f002 f8b7 	bl	90004430 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
900022c2:	2201      	movs	r2, #1
900022c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
900022c8:	480a      	ldr	r0, [pc, #40]	; (900022f4 <BSP_LCD_Init+0xa4>)
900022ca:	f001 f8ab 	bl	90003424 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
900022ce:	2201      	movs	r2, #1
900022d0:	2108      	movs	r1, #8
900022d2:	4809      	ldr	r0, [pc, #36]	; (900022f8 <BSP_LCD_Init+0xa8>)
900022d4:	f001 f8a6 	bl	90003424 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
900022d8:	f000 fa7c 	bl	900027d4 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
900022dc:	4807      	ldr	r0, [pc, #28]	; (900022fc <BSP_LCD_Init+0xac>)
900022de:	f7ff fad1 	bl	90001884 <BSP_LCD_SetFont>
}
900022e2:	2000      	movs	r0, #0
900022e4:	bd10      	pop	{r4, pc}
900022e6:	bf00      	nop
900022e8:	200003d8 	.word	0x200003d8
900022ec:	40016800 	.word	0x40016800
900022f0:	20000418 	.word	0x20000418
900022f4:	40022000 	.word	0x40022000
900022f8:	40022800 	.word	0x40022800
900022fc:	20000060 	.word	0x20000060

90002300 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
90002300:	b570      	push	{r4, r5, r6, lr}
90002302:	b08a      	sub	sp, #40	; 0x28
90002304:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
90002306:	f002 f80b 	bl	90004320 <HAL_I2C_GetState>
9000230a:	2800      	cmp	r0, #0
9000230c:	f040 8096 	bne.w	9000243c <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90002310:	4b4b      	ldr	r3, [pc, #300]	; (90002440 <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
90002312:	2600      	movs	r6, #0
90002314:	4c4b      	ldr	r4, [pc, #300]	; (90002444 <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90002316:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
90002318:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
9000231a:	bf0c      	ite	eq
9000231c:	4a4a      	ldreq	r2, [pc, #296]	; (90002448 <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
9000231e:	4a4b      	ldrne	r2, [pc, #300]	; (9000244c <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90002320:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
90002322:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
90002324:	4a4a      	ldr	r2, [pc, #296]	; (90002450 <I2Cx_Init+0x150>)
90002326:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
9000232a:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
9000232e:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90002332:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90002336:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90002338:	d143      	bne.n	900023c2 <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
9000233a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
9000233e:	2080      	movs	r0, #128	; 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90002340:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90002344:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90002346:	6323      	str	r3, [r4, #48]	; 0x30
90002348:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
9000234a:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
9000234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
90002350:	9301      	str	r3, [sp, #4]
90002352:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90002354:	2312      	movs	r3, #18
90002356:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
9000235a:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
9000235c:	483d      	ldr	r0, [pc, #244]	; (90002454 <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
9000235e:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90002362:	f000 ff7d 	bl	90003260 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
90002366:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
9000236a:	a905      	add	r1, sp, #20
9000236c:	4839      	ldr	r0, [pc, #228]	; (90002454 <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
9000236e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90002370:	f000 ff76 	bl	90003260 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
90002374:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
90002376:	4632      	mov	r2, r6
90002378:	210f      	movs	r1, #15
9000237a:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
9000237c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90002380:	6423      	str	r3, [r4, #64]	; 0x40
90002382:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90002388:	9302      	str	r3, [sp, #8]
9000238a:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
9000238c:	6a23      	ldr	r3, [r4, #32]
9000238e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90002392:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
90002394:	6a23      	ldr	r3, [r4, #32]
90002396:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
9000239a:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
9000239c:	f000 fbc0 	bl	90002b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
900023a0:	2048      	movs	r0, #72	; 0x48
900023a2:	f000 fbef 	bl	90002b84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
900023a6:	2049      	movs	r0, #73	; 0x49
900023a8:	4632      	mov	r2, r6
900023aa:	210f      	movs	r1, #15
900023ac:	f000 fbb8 	bl	90002b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
900023b0:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
900023b2:	f000 fbe7 	bl	90002b84 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
900023b6:	4628      	mov	r0, r5
  }
}
900023b8:	b00a      	add	sp, #40	; 0x28
900023ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
900023be:	f001 bdd1 	b.w	90003f64 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900023c2:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
900023c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
900023ca:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900023cc:	4822      	ldr	r0, [pc, #136]	; (90002458 <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900023ce:	6323      	str	r3, [r4, #48]	; 0x30
900023d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
900023d2:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
900023d4:	f003 0302 	and.w	r3, r3, #2
900023d8:	9303      	str	r3, [sp, #12]
900023da:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
900023dc:	2312      	movs	r3, #18
900023de:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
900023e2:	2304      	movs	r3, #4
900023e4:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900023e8:	a905      	add	r1, sp, #20
900023ea:	f000 ff39 	bl	90003260 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
900023ee:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900023f2:	a905      	add	r1, sp, #20
900023f4:	4818      	ldr	r0, [pc, #96]	; (90002458 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
900023f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
900023f8:	f000 ff32 	bl	90003260 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
900023fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
900023fe:	4632      	mov	r2, r6
90002400:	210f      	movs	r1, #15
90002402:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
90002404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90002408:	6423      	str	r3, [r4, #64]	; 0x40
9000240a:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000240c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90002410:	9304      	str	r3, [sp, #16]
90002412:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
90002414:	6a23      	ldr	r3, [r4, #32]
90002416:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
9000241a:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
9000241c:	6a23      	ldr	r3, [r4, #32]
9000241e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
90002422:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
90002424:	f000 fb7c 	bl	90002b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
90002428:	201f      	movs	r0, #31
9000242a:	f000 fbab 	bl	90002b84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
9000242e:	2020      	movs	r0, #32
90002430:	4632      	mov	r2, r6
90002432:	210f      	movs	r1, #15
90002434:	f000 fb74 	bl	90002b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
90002438:	2020      	movs	r0, #32
9000243a:	e7ba      	b.n	900023b2 <I2Cx_Init+0xb2>
}
9000243c:	b00a      	add	sp, #40	; 0x28
9000243e:	bd70      	pop	{r4, r5, r6, pc}
90002440:	20000560 	.word	0x20000560
90002444:	40023800 	.word	0x40023800
90002448:	40005c00 	.word	0x40005c00
9000244c:	40005400 	.word	0x40005400
90002450:	40912732 	.word	0x40912732
90002454:	40021c00 	.word	0x40021c00
90002458:	40020400 	.word	0x40020400

9000245c <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
9000245c:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
9000245e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
90002462:	b085      	sub	sp, #20
90002464:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90002466:	9402      	str	r4, [sp, #8]
90002468:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
9000246c:	9401      	str	r4, [sp, #4]
9000246e:	9c08      	ldr	r4, [sp, #32]
90002470:	9400      	str	r4, [sp, #0]
90002472:	f001 fde2 	bl	9000403a <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
90002476:	4604      	mov	r4, r0
90002478:	b128      	cbz	r0, 90002486 <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
9000247a:	4628      	mov	r0, r5
9000247c:	f001 fdc4 	bl	90004008 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
90002480:	4628      	mov	r0, r5
90002482:	f7ff ff3d 	bl	90002300 <I2Cx_Init>
}
90002486:	4620      	mov	r0, r4
90002488:	b005      	add	sp, #20
9000248a:	bd30      	pop	{r4, r5, pc}

9000248c <I2Cx_ReadMultiple>:
{
9000248c:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
9000248e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
90002492:	b085      	sub	sp, #20
90002494:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90002496:	9402      	str	r4, [sp, #8]
90002498:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
9000249c:	9401      	str	r4, [sp, #4]
9000249e:	9c08      	ldr	r4, [sp, #32]
900024a0:	9400      	str	r4, [sp, #0]
900024a2:	f001 fe81 	bl	900041a8 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
900024a6:	4604      	mov	r4, r0
900024a8:	b128      	cbz	r0, 900024b6 <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
900024aa:	4628      	mov	r0, r5
900024ac:	f001 fdac 	bl	90004008 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
900024b0:	4628      	mov	r0, r5
900024b2:	f7ff ff25 	bl	90002300 <I2Cx_Init>
}
900024b6:	4620      	mov	r0, r4
900024b8:	b005      	add	sp, #20
900024ba:	bd30      	pop	{r4, r5, pc}

900024bc <BSP_LED_Init>:
{
900024bc:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
900024be:	4604      	mov	r4, r0
{
900024c0:	b087      	sub	sp, #28
  if (Led == LED1)
900024c2:	b9c8      	cbnz	r0, 900024f8 <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
900024c4:	4b0d      	ldr	r3, [pc, #52]	; (900024fc <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
900024c6:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
900024c8:	a901      	add	r1, sp, #4
900024ca:	480d      	ldr	r0, [pc, #52]	; (90002500 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
900024cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900024ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
900024d2:	631a      	str	r2, [r3, #48]	; 0x30
900024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
900024da:	9300      	str	r3, [sp, #0]
900024dc:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
900024de:	2301      	movs	r3, #1
900024e0:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
900024e4:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
900024e6:	2303      	movs	r3, #3
900024e8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
900024ea:	f000 feb9 	bl	90003260 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
900024ee:	4622      	mov	r2, r4
900024f0:	4629      	mov	r1, r5
900024f2:	4803      	ldr	r0, [pc, #12]	; (90002500 <BSP_LED_Init+0x44>)
900024f4:	f000 ff96 	bl	90003424 <HAL_GPIO_WritePin>
}
900024f8:	b007      	add	sp, #28
900024fa:	bd30      	pop	{r4, r5, pc}
900024fc:	40023800 	.word	0x40023800
90002500:	40022000 	.word	0x40022000

90002504 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
90002504:	4801      	ldr	r0, [pc, #4]	; (9000250c <AUDIO_IO_Init+0x8>)
90002506:	f7ff befb 	b.w	90002300 <I2Cx_Init>
9000250a:	bf00      	nop
9000250c:	20000560 	.word	0x20000560

90002510 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
90002510:	4770      	bx	lr
	...

90002514 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
90002514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
90002516:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
90002518:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
9000251a:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
9000251e:	f10d 020e 	add.w	r2, sp, #14
90002522:	9301      	str	r3, [sp, #4]
90002524:	9200      	str	r2, [sp, #0]
90002526:	460a      	mov	r2, r1
90002528:	4601      	mov	r1, r0
9000252a:	4803      	ldr	r0, [pc, #12]	; (90002538 <AUDIO_IO_Write+0x24>)
9000252c:	f7ff ff96 	bl	9000245c <I2Cx_WriteMultiple>
}
90002530:	b005      	add	sp, #20
90002532:	f85d fb04 	ldr.w	pc, [sp], #4
90002536:	bf00      	nop
90002538:	20000560 	.word	0x20000560

9000253c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
9000253c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
9000253e:	2300      	movs	r3, #0
{
90002540:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
90002542:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
90002546:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
9000254a:	2302      	movs	r3, #2
9000254c:	9100      	str	r1, [sp, #0]
9000254e:	4601      	mov	r1, r0
90002550:	9301      	str	r3, [sp, #4]
90002552:	4805      	ldr	r0, [pc, #20]	; (90002568 <AUDIO_IO_Read+0x2c>)
90002554:	f7ff ff9a 	bl	9000248c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
90002558:	f8bd 000e 	ldrh.w	r0, [sp, #14]
9000255c:	ba40      	rev16	r0, r0
  
  read_value = tmp;
  
  return read_value;
}
9000255e:	b280      	uxth	r0, r0
90002560:	b005      	add	sp, #20
90002562:	f85d fb04 	ldr.w	pc, [sp], #4
90002566:	bf00      	nop
90002568:	20000560 	.word	0x20000560

9000256c <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
9000256c:	f000 bab4 	b.w	90002ad8 <HAL_Delay>

90002570 <TS_IO_Init>:
90002570:	f7ff bfc8 	b.w	90002504 <AUDIO_IO_Init>

90002574 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
90002574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90002576:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
9000257a:	f10d 020f 	add.w	r2, sp, #15
9000257e:	2301      	movs	r3, #1
90002580:	9200      	str	r2, [sp, #0]
90002582:	460a      	mov	r2, r1
90002584:	4601      	mov	r1, r0
90002586:	9301      	str	r3, [sp, #4]
90002588:	4802      	ldr	r0, [pc, #8]	; (90002594 <TS_IO_Write+0x20>)
9000258a:	f7ff ff67 	bl	9000245c <I2Cx_WriteMultiple>
}
9000258e:	b005      	add	sp, #20
90002590:	f85d fb04 	ldr.w	pc, [sp], #4
90002594:	20000560 	.word	0x20000560

90002598 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
90002598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
9000259a:	2300      	movs	r3, #0
{
9000259c:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
9000259e:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
900025a2:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
900025a6:	2301      	movs	r3, #1
900025a8:	9100      	str	r1, [sp, #0]
900025aa:	4601      	mov	r1, r0
900025ac:	9301      	str	r3, [sp, #4]
900025ae:	4804      	ldr	r0, [pc, #16]	; (900025c0 <TS_IO_Read+0x28>)
900025b0:	f7ff ff6c 	bl	9000248c <I2Cx_ReadMultiple>

  return read_value;
}
900025b4:	f89d 000f 	ldrb.w	r0, [sp, #15]
900025b8:	b005      	add	sp, #20
900025ba:	f85d fb04 	ldr.w	pc, [sp], #4
900025be:	bf00      	nop
900025c0:	20000560 	.word	0x20000560

900025c4 <TS_IO_Delay>:
900025c4:	f000 ba88 	b.w	90002ad8 <HAL_Delay>

900025c8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
900025c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
900025cc:	4c21      	ldr	r4, [pc, #132]	; (90002654 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900025ce:	2710      	movs	r7, #16
900025d0:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
900025d2:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900025d6:	19e5      	adds	r5, r4, r7
900025d8:	4621      	mov	r1, r4
{
900025da:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900025dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
900025e0:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
900025e2:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
900025e6:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
900025ea:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
900025ee:	f003 f8f7 	bl	900057e0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
900025f2:	4630      	mov	r0, r6
900025f4:	f000 fa70 	bl	90002ad8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
900025f8:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
900025fa:	4621      	mov	r1, r4
900025fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
90002600:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90002602:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
90002606:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
9000260a:	f003 f8e9 	bl	900057e0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
9000260e:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90002610:	4621      	mov	r1, r4
90002612:	f64f 72ff 	movw	r2, #65535	; 0xffff
90002616:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90002618:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
9000261c:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
9000261e:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90002622:	f003 f8dd 	bl	900057e0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90002626:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
9000262a:	4621      	mov	r1, r4
9000262c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90002630:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
90002632:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90002634:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
90002636:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90002638:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
9000263c:	9b01      	ldr	r3, [sp, #4]
9000263e:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90002640:	f003 f8ce 	bl	900057e0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90002644:	4649      	mov	r1, r9
90002646:	4628      	mov	r0, r5
}
90002648:	b003      	add	sp, #12
9000264a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
9000264e:	f003 b8de 	b.w	9000580e <HAL_SDRAM_ProgramRefreshRate>
90002652:	bf00      	nop
90002654:	200005f8 	.word	0x200005f8

90002658 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002658:	4b55      	ldr	r3, [pc, #340]	; (900027b0 <BSP_SDRAM_MspInit+0x158>)
9000265a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000265c:	f042 0201 	orr.w	r2, r2, #1
{  
90002660:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90002662:	639a      	str	r2, [r3, #56]	; 0x38
{  
90002664:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
90002666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
90002668:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
9000266a:	a909      	add	r1, sp, #36	; 0x24
9000266c:	4851      	ldr	r0, [pc, #324]	; (900027b4 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
9000266e:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90002672:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
90002674:	9201      	str	r2, [sp, #4]
90002676:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
90002678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000267a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
9000267e:	631a      	str	r2, [r3, #48]	; 0x30
90002680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002682:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
90002686:	9202      	str	r2, [sp, #8]
90002688:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
9000268a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000268c:	f042 0204 	orr.w	r2, r2, #4
90002690:	631a      	str	r2, [r3, #48]	; 0x30
90002692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002694:	f002 0204 	and.w	r2, r2, #4
90002698:	9203      	str	r2, [sp, #12]
9000269a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
9000269c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000269e:	f042 0208 	orr.w	r2, r2, #8
900026a2:	631a      	str	r2, [r3, #48]	; 0x30
900026a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026a6:	f002 0208 	and.w	r2, r2, #8
900026aa:	9204      	str	r2, [sp, #16]
900026ac:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900026ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026b0:	f042 0210 	orr.w	r2, r2, #16
900026b4:	631a      	str	r2, [r3, #48]	; 0x30
900026b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026b8:	f002 0210 	and.w	r2, r2, #16
900026bc:	9205      	str	r2, [sp, #20]
900026be:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900026c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026c2:	f042 0220 	orr.w	r2, r2, #32
900026c6:	631a      	str	r2, [r3, #48]	; 0x30
900026c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026ca:	f002 0220 	and.w	r2, r2, #32
900026ce:	9206      	str	r2, [sp, #24]
900026d0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900026d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900026d8:	631a      	str	r2, [r3, #48]	; 0x30
900026da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026dc:	f002 0240 	and.w	r2, r2, #64	; 0x40
900026e0:	9207      	str	r2, [sp, #28]
900026e2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900026e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900026e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900026ea:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
900026ec:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
900026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
900026f4:	9308      	str	r3, [sp, #32]
900026f6:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
900026f8:	2302      	movs	r3, #2
900026fa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
900026fe:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002700:	230c      	movs	r3, #12
90002702:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
90002704:	2308      	movs	r3, #8
90002706:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
90002708:	f000 fdaa 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
9000270c:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002710:	a909      	add	r1, sp, #36	; 0x24
90002712:	4829      	ldr	r0, [pc, #164]	; (900027b8 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90002714:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002716:	f000 fda3 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
9000271a:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
9000271e:	a909      	add	r1, sp, #36	; 0x24
90002720:	4826      	ldr	r0, [pc, #152]	; (900027bc <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002722:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002724:	f000 fd9c 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002728:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
9000272c:	a909      	add	r1, sp, #36	; 0x24
9000272e:	4824      	ldr	r0, [pc, #144]	; (900027c0 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002730:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002732:	f000 fd95 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90002736:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000273a:	a909      	add	r1, sp, #36	; 0x24
9000273c:	4821      	ldr	r0, [pc, #132]	; (900027c4 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
9000273e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002740:	f000 fd8e 	bl	90003260 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90002744:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90002746:	a909      	add	r1, sp, #36	; 0x24
90002748:	481f      	ldr	r0, [pc, #124]	; (900027c8 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
9000274a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
9000274c:	f000 fd88 	bl	90003260 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
90002750:	4b1e      	ldr	r3, [pc, #120]	; (900027cc <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90002752:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90002754:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90002758:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
9000275c:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
9000275e:	675c      	str	r4, [r3, #116]	; 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
90002760:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90002762:	e9c3 4212 	strd	r4, r2, [r3, #72]	; 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90002766:	f44f 6280 	mov.w	r2, #1024	; 0x400
9000276a:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
9000276e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
90002772:	e9c3 0216 	strd	r0, r2, [r3, #88]	; 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
90002776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
9000277a:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
9000277e:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
90002780:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90002784:	4a12      	ldr	r2, [pc, #72]	; (900027d0 <BSP_SDRAM_MspInit+0x178>)
90002786:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
9000278a:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
9000278c:	6335      	str	r5, [r6, #48]	; 0x30
9000278e:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dma_handle);
90002790:	f000 faae 	bl	90002cf0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
90002794:	4628      	mov	r0, r5
90002796:	f000 fa2d 	bl	90002bf4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
9000279a:	4622      	mov	r2, r4
9000279c:	210f      	movs	r1, #15
9000279e:	2038      	movs	r0, #56	; 0x38
900027a0:	f000 f9be 	bl	90002b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
900027a4:	2038      	movs	r0, #56	; 0x38
900027a6:	f000 f9ed 	bl	90002b84 <HAL_NVIC_EnableIRQ>
}
900027aa:	b00e      	add	sp, #56	; 0x38
900027ac:	bd70      	pop	{r4, r5, r6, pc}
900027ae:	bf00      	nop
900027b0:	40023800 	.word	0x40023800
900027b4:	40020800 	.word	0x40020800
900027b8:	40020c00 	.word	0x40020c00
900027bc:	40021000 	.word	0x40021000
900027c0:	40021400 	.word	0x40021400
900027c4:	40021800 	.word	0x40021800
900027c8:	40021c00 	.word	0x40021c00
900027cc:	200005f8 	.word	0x200005f8
900027d0:	40026410 	.word	0x40026410

900027d4 <BSP_SDRAM_Init>:
{ 
900027d4:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900027d6:	4b1b      	ldr	r3, [pc, #108]	; (90002844 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
900027d8:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900027da:	4c1b      	ldr	r4, [pc, #108]	; (90002848 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
900027dc:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900027de:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
900027e0:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
900027e4:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
900027e6:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
900027e8:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
900027ea:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  Timing.ExitSelfRefreshDelay = 7;
900027ee:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
900027f2:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900027f6:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
900027f8:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900027fc:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
90002800:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
90002802:	f44f 7380 	mov.w	r3, #256	; 0x100
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90002806:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
9000280a:	63a1      	str	r1, [r4, #56]	; 0x38
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
9000280c:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002814:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002818:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
9000281c:	f7ff ff1c 	bl	90002658 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
90002820:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
90002824:	4c09      	ldr	r4, [pc, #36]	; (9000284c <BSP_SDRAM_Init+0x78>)
90002826:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
9000282a:	f002 ffb9 	bl	900057a0 <HAL_SDRAM_Init>
9000282e:	3800      	subs	r0, #0
90002830:	bf18      	it	ne
90002832:	2001      	movne	r0, #1
90002834:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
90002836:	f240 6003 	movw	r0, #1539	; 0x603
9000283a:	f7ff fec5 	bl	900025c8 <BSP_SDRAM_Initialization_sequence>
}
9000283e:	7820      	ldrb	r0, [r4, #0]
90002840:	bd10      	pop	{r4, pc}
90002842:	bf00      	nop
90002844:	a0000140 	.word	0xa0000140
90002848:	200005f8 	.word	0x200005f8
9000284c:	20000088 	.word	0x20000088

90002850 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
90002850:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
90002852:	4c0b      	ldr	r4, [pc, #44]	; (90002880 <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90002854:	4d0b      	ldr	r5, [pc, #44]	; (90002884 <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
90002856:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90002858:	2070      	movs	r0, #112	; 0x70
9000285a:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
9000285c:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
9000285e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
90002860:	686b      	ldr	r3, [r5, #4]
90002862:	2070      	movs	r0, #112	; 0x70
90002864:	4798      	blx	r3
90002866:	2851      	cmp	r0, #81	; 0x51
90002868:	d108      	bne.n	9000287c <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
9000286a:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
9000286c:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
9000286e:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
90002870:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
90002872:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
90002874:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
90002876:	4798      	blx	r3
  uint8_t status = TS_OK;
90002878:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
9000287a:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
9000287c:	2003      	movs	r0, #3
9000287e:	e7fc      	b.n	9000287a <BSP_TS_Init+0x2a>
90002880:	20000718 	.word	0x20000718
90002884:	20000000 	.word	0x20000000

90002888 <BSP_TS_Get_GestureId>:
{
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
90002888:	4b15      	ldr	r3, [pc, #84]	; (900028e0 <BSP_TS_Get_GestureId+0x58>)
{
9000288a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
9000288c:	2400      	movs	r4, #0
{
9000288e:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
90002890:	a901      	add	r1, sp, #4
90002892:	7a18      	ldrb	r0, [r3, #8]
  uint32_t gestureId = 0;
90002894:	9401      	str	r4, [sp, #4]
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
90002896:	f7fd ff4b 	bl	90000730 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
9000289a:	9b01      	ldr	r3, [sp, #4]
9000289c:	2b18      	cmp	r3, #24
9000289e:	d019      	beq.n	900028d4 <BSP_TS_Get_GestureId+0x4c>
900028a0:	d808      	bhi.n	900028b4 <BSP_TS_Get_GestureId+0x2c>
900028a2:	2b10      	cmp	r3, #16
900028a4:	d011      	beq.n	900028ca <BSP_TS_Get_GestureId+0x42>
900028a6:	2b14      	cmp	r3, #20
900028a8:	d012      	beq.n	900028d0 <BSP_TS_Get_GestureId+0x48>
900028aa:	b15b      	cbz	r3, 900028c4 <BSP_TS_Get_GestureId+0x3c>
900028ac:	2401      	movs	r4, #1
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
900028ae:	4620      	mov	r0, r4
900028b0:	b003      	add	sp, #12
900028b2:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
900028b4:	2b40      	cmp	r3, #64	; 0x40
900028b6:	d00f      	beq.n	900028d8 <BSP_TS_Get_GestureId+0x50>
900028b8:	2b49      	cmp	r3, #73	; 0x49
900028ba:	d00f      	beq.n	900028dc <BSP_TS_Get_GestureId+0x54>
900028bc:	2b1c      	cmp	r3, #28
900028be:	d1f5      	bne.n	900028ac <BSP_TS_Get_GestureId+0x24>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
900028c0:	2304      	movs	r3, #4
900028c2:	e003      	b.n	900028cc <BSP_TS_Get_GestureId+0x44>
  uint8_t  ts_status = TS_OK;
900028c4:	461c      	mov	r4, r3
      TS_State->gestureId = GEST_ID_NO_GESTURE;
900028c6:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
900028c8:	e7f1      	b.n	900028ae <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_UP;
900028ca:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
900028cc:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
900028ce:	e7ee      	b.n	900028ae <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
900028d0:	2302      	movs	r3, #2
900028d2:	e7fb      	b.n	900028cc <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
900028d4:	2303      	movs	r3, #3
900028d6:	e7f9      	b.n	900028cc <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
900028d8:	2305      	movs	r3, #5
900028da:	e7f7      	b.n	900028cc <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
900028dc:	2306      	movs	r3, #6
900028de:	e7f5      	b.n	900028cc <BSP_TS_Get_GestureId+0x44>
900028e0:	20000718 	.word	0x20000718

900028e4 <BSP_TS_GetState>:
{
900028e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
900028e8:	4c56      	ldr	r4, [pc, #344]	; (90002a44 <BSP_TS_GetState+0x160>)
{
900028ea:	b097      	sub	sp, #92	; 0x5c
  uint32_t weight = 0;
900028ec:	2300      	movs	r3, #0
{
900028ee:	4605      	mov	r5, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
900028f0:	6862      	ldr	r2, [r4, #4]
900028f2:	7a20      	ldrb	r0, [r4, #8]
900028f4:	6912      	ldr	r2, [r2, #16]
  uint32_t event = 0;
900028f6:	9309      	str	r3, [sp, #36]	; 0x24
  uint32_t area = 0;
900028f8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
900028fc:	4790      	blx	r2
900028fe:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
90002900:	b1b8      	cbz	r0, 90002932 <BSP_TS_GetState+0x4e>
90002902:	ab0d      	add	r3, sp, #52	; 0x34
90002904:	f105 0615 	add.w	r6, r5, #21
90002908:	f105 0b02 	add.w	fp, r5, #2
9000290c:	f104 090c 	add.w	r9, r4, #12
90002910:	9304      	str	r3, [sp, #16]
90002912:	ab0a      	add	r3, sp, #40	; 0x28
90002914:	f104 0a20 	add.w	sl, r4, #32
90002918:	af10      	add	r7, sp, #64	; 0x40
9000291a:	9303      	str	r3, [sp, #12]
9000291c:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
    for(index=0; index < TS_State->touchDetected; index++)
90002920:	2300      	movs	r3, #0
90002922:	9305      	str	r3, [sp, #20]
90002924:	782b      	ldrb	r3, [r5, #0]
90002926:	9a05      	ldr	r2, [sp, #20]
90002928:	4293      	cmp	r3, r2
9000292a:	d805      	bhi.n	90002938 <BSP_TS_GetState+0x54>
    ts_status = BSP_TS_Get_GestureId(TS_State);
9000292c:	4628      	mov	r0, r5
9000292e:	f7ff ffab 	bl	90002888 <BSP_TS_Get_GestureId>
}
90002932:	b017      	add	sp, #92	; 0x5c
90002934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
90002938:	6863      	ldr	r3, [r4, #4]
9000293a:	4642      	mov	r2, r8
9000293c:	4639      	mov	r1, r7
9000293e:	7a20      	ldrb	r0, [r4, #8]
90002940:	695b      	ldr	r3, [r3, #20]
90002942:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
90002944:	7a63      	ldrb	r3, [r4, #9]
90002946:	2b01      	cmp	r3, #1
90002948:	d14a      	bne.n	900029e0 <BSP_TS_GetState+0xfc>
        x[index] = brute_x[index];
9000294a:	883a      	ldrh	r2, [r7, #0]
9000294c:	9903      	ldr	r1, [sp, #12]
9000294e:	800a      	strh	r2, [r1, #0]
        y[index] = brute_y[index];
90002950:	f8b8 2000 	ldrh.w	r2, [r8]
        y[index] = 4096 - brute_y[index];
90002954:	9904      	ldr	r1, [sp, #16]
90002956:	800a      	strh	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_XY)
90002958:	071b      	lsls	r3, r3, #28
9000295a:	d506      	bpl.n	9000296a <BSP_TS_GetState+0x86>
        y[index] = brute_x[index];
9000295c:	883b      	ldrh	r3, [r7, #0]
9000295e:	9a04      	ldr	r2, [sp, #16]
90002960:	8013      	strh	r3, [r2, #0]
        x[index] = brute_y[index];
90002962:	f8b8 3000 	ldrh.w	r3, [r8]
90002966:	9a03      	ldr	r2, [sp, #12]
90002968:	8013      	strh	r3, [r2, #0]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
9000296a:	9b03      	ldr	r3, [sp, #12]
9000296c:	f8d9 2000 	ldr.w	r2, [r9]
90002970:	f833 cb02 	ldrh.w	ip, [r3], #2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002974:	9904      	ldr	r1, [sp, #16]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90002976:	4594      	cmp	ip, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002978:	f8da 0000 	ldr.w	r0, [sl]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
9000297c:	9303      	str	r3, [sp, #12]
9000297e:	b293      	uxth	r3, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002980:	f831 2b02 	ldrh.w	r2, [r1], #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90002984:	bf8c      	ite	hi
90002986:	ebac 0303 	subhi.w	r3, ip, r3
9000298a:	eba3 030c 	subls.w	r3, r3, ip
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
9000298e:	9104      	str	r1, [sp, #16]
90002990:	4282      	cmp	r2, r0
90002992:	b281      	uxth	r1, r0
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
90002994:	7a20      	ldrb	r0, [r4, #8]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90002996:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90002998:	bf8c      	ite	hi
9000299a:	1a51      	subhi	r1, r2, r1
9000299c:	1a89      	subls	r1, r1, r2
9000299e:	b289      	uxth	r1, r1
      if ((x_diff + y_diff) > 5)
900029a0:	440b      	add	r3, r1
900029a2:	2b05      	cmp	r3, #5
        _x[index] = x[index];
900029a4:	bfc4      	itt	gt
900029a6:	f8c9 c000 	strgt.w	ip, [r9]
        _y[index] = y[index];
900029aa:	f8ca 2000 	strgt.w	r2, [sl]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
900029ae:	2870      	cmp	r0, #112	; 0x70
900029b0:	d124      	bne.n	900029fc <BSP_TS_GetState+0x118>
        TS_State->touchX[index] = x[index];
900029b2:	f8ab c000 	strh.w	ip, [fp]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
900029b6:	ab09      	add	r3, sp, #36	; 0x24
        TS_State->touchY[index] = y[index];
900029b8:	f8ab 200a 	strh.w	r2, [fp, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
900029bc:	9905      	ldr	r1, [sp, #20]
900029be:	aa07      	add	r2, sp, #28
900029c0:	9300      	str	r3, [sp, #0]
900029c2:	ab08      	add	r3, sp, #32
900029c4:	f7fd fec4 	bl	90000750 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
900029c8:	9b07      	ldr	r3, [sp, #28]
900029ca:	f806 3f01 	strb.w	r3, [r6, #1]!
      TS_State->touchArea[index]   = area;
900029ce:	9b08      	ldr	r3, [sp, #32]
900029d0:	72b3      	strb	r3, [r6, #10]
      switch(event)
900029d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900029d4:	2b03      	cmp	r3, #3
900029d6:	d821      	bhi.n	90002a1c <BSP_TS_GetState+0x138>
900029d8:	e8df f003 	tbb	[pc, r3]
900029dc:	312f2d1e 	.word	0x312f2d1e
      if(tsOrientation & TS_SWAP_X)
900029e0:	0799      	lsls	r1, r3, #30
        x[index] = 4096 - brute_x[index];
900029e2:	bf41      	itttt	mi
900029e4:	883a      	ldrhmi	r2, [r7, #0]
900029e6:	9903      	ldrmi	r1, [sp, #12]
900029e8:	f5c2 5280 	rsbmi	r2, r2, #4096	; 0x1000
900029ec:	800a      	strhmi	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_Y)
900029ee:	075a      	lsls	r2, r3, #29
900029f0:	d5b2      	bpl.n	90002958 <BSP_TS_GetState+0x74>
        y[index] = 4096 - brute_y[index];
900029f2:	f8b8 2000 	ldrh.w	r2, [r8]
900029f6:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
900029fa:	e7ab      	b.n	90002954 <BSP_TS_GetState+0x70>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
900029fc:	f8d9 2000 	ldr.w	r2, [r9]
90002a00:	8823      	ldrh	r3, [r4, #0]
90002a02:	4353      	muls	r3, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
90002a04:	8862      	ldrh	r2, [r4, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
90002a06:	0b1b      	lsrs	r3, r3, #12
90002a08:	f8ab 3000 	strh.w	r3, [fp]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
90002a0c:	f8da 3000 	ldr.w	r3, [sl]
90002a10:	435a      	muls	r2, r3
90002a12:	f3c2 320f 	ubfx	r2, r2, #12, #16
90002a16:	e7ce      	b.n	900029b6 <BSP_TS_GetState+0xd2>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
90002a18:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
90002a1a:	7173      	strb	r3, [r6, #5]
    for(index=0; index < TS_State->touchDetected; index++)
90002a1c:	9b05      	ldr	r3, [sp, #20]
90002a1e:	f10b 0b02 	add.w	fp, fp, #2
90002a22:	f109 0904 	add.w	r9, r9, #4
90002a26:	f10a 0a04 	add.w	sl, sl, #4
90002a2a:	3301      	adds	r3, #1
90002a2c:	3702      	adds	r7, #2
90002a2e:	f108 0802 	add.w	r8, r8, #2
90002a32:	9305      	str	r3, [sp, #20]
90002a34:	e776      	b.n	90002924 <BSP_TS_GetState+0x40>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
90002a36:	2302      	movs	r3, #2
90002a38:	e7ef      	b.n	90002a1a <BSP_TS_GetState+0x136>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
90002a3a:	2303      	movs	r3, #3
90002a3c:	e7ed      	b.n	90002a1a <BSP_TS_GetState+0x136>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
90002a3e:	2300      	movs	r3, #0
90002a40:	e7eb      	b.n	90002a1a <BSP_TS_GetState+0x136>
90002a42:	bf00      	nop
90002a44:	20000718 	.word	0x20000718

90002a48 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90002a48:	4770      	bx	lr
	...

90002a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90002a4c:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90002a4e:	4e0e      	ldr	r6, [pc, #56]	; (90002a88 <HAL_InitTick+0x3c>)
90002a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
90002a54:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
90002a56:	7832      	ldrb	r2, [r6, #0]
90002a58:	fbb3 f3f2 	udiv	r3, r3, r2
90002a5c:	4a0b      	ldr	r2, [pc, #44]	; (90002a8c <HAL_InitTick+0x40>)
90002a5e:	6810      	ldr	r0, [r2, #0]
90002a60:	fbb0 f0f3 	udiv	r0, r0, r3
90002a64:	f000 f89c 	bl	90002ba0 <HAL_SYSTICK_Config>
90002a68:	4604      	mov	r4, r0
90002a6a:	b950      	cbnz	r0, 90002a82 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90002a6c:	2d0f      	cmp	r5, #15
90002a6e:	d808      	bhi.n	90002a82 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90002a70:	4602      	mov	r2, r0
90002a72:	4629      	mov	r1, r5
90002a74:	f04f 30ff 	mov.w	r0, #4294967295
90002a78:	f000 f852 	bl	90002b20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90002a7c:	4620      	mov	r0, r4
90002a7e:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
90002a80:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90002a82:	2001      	movs	r0, #1
90002a84:	e7fc      	b.n	90002a80 <HAL_InitTick+0x34>
90002a86:	bf00      	nop
90002a88:	2000008c 	.word	0x2000008c
90002a8c:	200000b4 	.word	0x200000b4

90002a90 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
90002a90:	4a07      	ldr	r2, [pc, #28]	; (90002ab0 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90002a92:	2003      	movs	r0, #3
{
90002a94:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
90002a96:	6813      	ldr	r3, [r2, #0]
90002a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90002a9c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90002a9e:	f000 f82d 	bl	90002afc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
90002aa2:	200f      	movs	r0, #15
90002aa4:	f7ff ffd2 	bl	90002a4c <HAL_InitTick>
  HAL_MspInit();
90002aa8:	f7ff ffce 	bl	90002a48 <HAL_MspInit>
}
90002aac:	2000      	movs	r0, #0
90002aae:	bd08      	pop	{r3, pc}
90002ab0:	40023c00 	.word	0x40023c00

90002ab4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
90002ab4:	4a03      	ldr	r2, [pc, #12]	; (90002ac4 <HAL_IncTick+0x10>)
90002ab6:	4b04      	ldr	r3, [pc, #16]	; (90002ac8 <HAL_IncTick+0x14>)
90002ab8:	6811      	ldr	r1, [r2, #0]
90002aba:	781b      	ldrb	r3, [r3, #0]
90002abc:	440b      	add	r3, r1
90002abe:	6013      	str	r3, [r2, #0]
}
90002ac0:	4770      	bx	lr
90002ac2:	bf00      	nop
90002ac4:	2000074c 	.word	0x2000074c
90002ac8:	2000008c 	.word	0x2000008c

90002acc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90002acc:	4b01      	ldr	r3, [pc, #4]	; (90002ad4 <HAL_GetTick+0x8>)
90002ace:	6818      	ldr	r0, [r3, #0]
}
90002ad0:	4770      	bx	lr
90002ad2:	bf00      	nop
90002ad4:	2000074c 	.word	0x2000074c

90002ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90002ad8:	b538      	push	{r3, r4, r5, lr}
90002ada:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90002adc:	f7ff fff6 	bl	90002acc <HAL_GetTick>
90002ae0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90002ae2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
90002ae4:	bf1e      	ittt	ne
90002ae6:	4b04      	ldrne	r3, [pc, #16]	; (90002af8 <HAL_Delay+0x20>)
90002ae8:	781b      	ldrbne	r3, [r3, #0]
90002aea:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
90002aec:	f7ff ffee 	bl	90002acc <HAL_GetTick>
90002af0:	1b43      	subs	r3, r0, r5
90002af2:	42a3      	cmp	r3, r4
90002af4:	d3fa      	bcc.n	90002aec <HAL_Delay+0x14>
  {
  }
}
90002af6:	bd38      	pop	{r3, r4, r5, pc}
90002af8:	2000008c 	.word	0x2000008c

90002afc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90002afc:	4907      	ldr	r1, [pc, #28]	; (90002b1c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90002afe:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90002b00:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90002b02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90002b06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
90002b0a:	0412      	lsls	r2, r2, #16
90002b0c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90002b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
90002b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
90002b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
90002b18:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
90002b1a:	4770      	bx	lr
90002b1c:	e000ed00 	.word	0xe000ed00

90002b20 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90002b20:	4b16      	ldr	r3, [pc, #88]	; (90002b7c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
90002b22:	b530      	push	{r4, r5, lr}
90002b24:	68dc      	ldr	r4, [r3, #12]
90002b26:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002b2a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002b2e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002b30:	2b04      	cmp	r3, #4
90002b32:	bf28      	it	cs
90002b34:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002b36:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002b38:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002b3c:	bf8c      	ite	hi
90002b3e:	3c03      	subhi	r4, #3
90002b40:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002b42:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
90002b46:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002b48:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002b4c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002b50:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002b54:	fa03 f304 	lsl.w	r3, r3, r4
90002b58:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002b5c:	ea4f 1303 	mov.w	r3, r3, lsl #4
90002b60:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
90002b62:	db06      	blt.n	90002b72 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002b64:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
90002b68:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
90002b6c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90002b70:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002b72:	f000 000f 	and.w	r0, r0, #15
90002b76:	4a02      	ldr	r2, [pc, #8]	; (90002b80 <HAL_NVIC_SetPriority+0x60>)
90002b78:	5413      	strb	r3, [r2, r0]
90002b7a:	e7f9      	b.n	90002b70 <HAL_NVIC_SetPriority+0x50>
90002b7c:	e000ed00 	.word	0xe000ed00
90002b80:	e000ed14 	.word	0xe000ed14

90002b84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90002b84:	2800      	cmp	r0, #0
90002b86:	db07      	blt.n	90002b98 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002b88:	0941      	lsrs	r1, r0, #5
90002b8a:	2301      	movs	r3, #1
90002b8c:	f000 001f 	and.w	r0, r0, #31
90002b90:	4a02      	ldr	r2, [pc, #8]	; (90002b9c <HAL_NVIC_EnableIRQ+0x18>)
90002b92:	4083      	lsls	r3, r0
90002b94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90002b98:	4770      	bx	lr
90002b9a:	bf00      	nop
90002b9c:	e000e100 	.word	0xe000e100

90002ba0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90002ba0:	3801      	subs	r0, #1
90002ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
90002ba6:	d20b      	bcs.n	90002bc0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90002ba8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002bac:	4a05      	ldr	r2, [pc, #20]	; (90002bc4 <HAL_SYSTICK_Config+0x24>)
90002bae:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90002bb0:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90002bb2:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002bb4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90002bb8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90002bba:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90002bbc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90002bbe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
90002bc0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
90002bc2:	4770      	bx	lr
90002bc4:	e000ed00 	.word	0xe000ed00

90002bc8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90002bc8:	6803      	ldr	r3, [r0, #0]
90002bca:	2118      	movs	r1, #24
90002bcc:	b2da      	uxtb	r2, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
90002bce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90002bd2:	3a10      	subs	r2, #16
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
90002bd4:	f023 0303 	bic.w	r3, r3, #3
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90002bd8:	fbb2 f1f1 	udiv	r1, r2, r1
{
90002bdc:	b510      	push	{r4, lr}
  if (stream_number > 3U)
90002bde:	2a5f      	cmp	r2, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90002be0:	4c03      	ldr	r4, [pc, #12]	; (90002bf0 <DMA_CalcBaseAndBitshift+0x28>)
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
90002be2:	bf88      	it	hi
90002be4:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90002be6:	5c61      	ldrb	r1, [r4, r1]
90002be8:	6583      	str	r3, [r0, #88]	; 0x58
90002bea:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
90002bec:	4618      	mov	r0, r3
90002bee:	bd10      	pop	{r4, pc}
90002bf0:	90010394 	.word	0x90010394

90002bf4 <HAL_DMA_Init>:
{
90002bf4:	b570      	push	{r4, r5, r6, lr}
90002bf6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90002bf8:	f7ff ff68 	bl	90002acc <HAL_GetTick>
90002bfc:	4605      	mov	r5, r0
  if(hdma == NULL)
90002bfe:	2c00      	cmp	r4, #0
90002c00:	d071      	beq.n	90002ce6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
90002c02:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
90002c04:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
90002c06:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
90002c0a:	2302      	movs	r3, #2
90002c0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
90002c10:	6813      	ldr	r3, [r2, #0]
90002c12:	f023 0301 	bic.w	r3, r3, #1
90002c16:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
90002c18:	6822      	ldr	r2, [r4, #0]
90002c1a:	6813      	ldr	r3, [r2, #0]
90002c1c:	07d8      	lsls	r0, r3, #31
90002c1e:	d42e      	bmi.n	90002c7e <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
90002c20:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
90002c22:	4832      	ldr	r0, [pc, #200]	; (90002cec <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90002c24:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
90002c26:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90002c28:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
90002c2c:	432b      	orrs	r3, r5
90002c2e:	68e5      	ldr	r5, [r4, #12]
90002c30:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
90002c32:	6925      	ldr	r5, [r4, #16]
90002c34:	432b      	orrs	r3, r5
90002c36:	6965      	ldr	r5, [r4, #20]
90002c38:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90002c3a:	69e5      	ldr	r5, [r4, #28]
90002c3c:	430b      	orrs	r3, r1
90002c3e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
90002c40:	6a25      	ldr	r5, [r4, #32]
90002c42:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
90002c44:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90002c46:	6a60      	ldr	r0, [r4, #36]	; 0x24
90002c48:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
90002c4a:	bf02      	ittt	eq
90002c4c:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
90002c50:	4335      	orreq	r5, r6
90002c52:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90002c54:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
90002c56:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
90002c58:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
90002c5a:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
90002c5e:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90002c62:	d132      	bne.n	90002cca <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
90002c64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90002c66:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
90002c68:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90002c6a:	b375      	cbz	r5, 90002cca <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
90002c6c:	b991      	cbnz	r1, 90002c94 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
90002c6e:	2801      	cmp	r0, #1
90002c70:	d020      	beq.n	90002cb4 <HAL_DMA_Init+0xc0>
90002c72:	f030 0102 	bics.w	r1, r0, #2
90002c76:	d128      	bne.n	90002cca <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90002c78:	01e9      	lsls	r1, r5, #7
90002c7a:	d526      	bpl.n	90002cca <HAL_DMA_Init+0xd6>
90002c7c:	e01d      	b.n	90002cba <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90002c7e:	f7ff ff25 	bl	90002acc <HAL_GetTick>
90002c82:	1b40      	subs	r0, r0, r5
90002c84:	2805      	cmp	r0, #5
90002c86:	d9c7      	bls.n	90002c18 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002c88:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
90002c8a:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002c8c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
90002c8e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
90002c92:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
90002c94:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
90002c98:	d113      	bne.n	90002cc2 <HAL_DMA_Init+0xce>
    switch (tmp)
90002c9a:	2803      	cmp	r0, #3
90002c9c:	d815      	bhi.n	90002cca <HAL_DMA_Init+0xd6>
90002c9e:	a101      	add	r1, pc, #4	; (adr r1, 90002ca4 <HAL_DMA_Init+0xb0>)
90002ca0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
90002ca4:	90002cbb 	.word	0x90002cbb
90002ca8:	90002c79 	.word	0x90002c79
90002cac:	90002cbb 	.word	0x90002cbb
90002cb0:	90002cb5 	.word	0x90002cb5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90002cb4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
90002cb8:	d107      	bne.n	90002cca <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90002cba:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
90002cbc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
90002cbe:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
90002cc0:	e7e5      	b.n	90002c8e <HAL_DMA_Init+0x9a>
    switch (tmp)
90002cc2:	2802      	cmp	r0, #2
90002cc4:	d9f9      	bls.n	90002cba <HAL_DMA_Init+0xc6>
90002cc6:	2803      	cmp	r0, #3
90002cc8:	d0d6      	beq.n	90002c78 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
90002cca:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90002ccc:	4620      	mov	r0, r4
90002cce:	f7ff ff7b 	bl	90002bc8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90002cd2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
90002cd4:	233f      	movs	r3, #63	; 0x3f
90002cd6:	4093      	lsls	r3, r2
90002cd8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002cda:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
90002cdc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002cde:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
90002ce0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
90002ce4:	e7d5      	b.n	90002c92 <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
90002ce6:	2001      	movs	r0, #1
90002ce8:	e7d3      	b.n	90002c92 <HAL_DMA_Init+0x9e>
90002cea:	bf00      	nop
90002cec:	f010803f 	.word	0xf010803f

90002cf0 <HAL_DMA_DeInit>:
{
90002cf0:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
90002cf2:	4605      	mov	r5, r0
90002cf4:	b320      	cbz	r0, 90002d40 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
90002cf6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
90002cfa:	2b02      	cmp	r3, #2
90002cfc:	b2dc      	uxtb	r4, r3
90002cfe:	d01d      	beq.n	90002d3c <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
90002d00:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
90002d02:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
90002d04:	681a      	ldr	r2, [r3, #0]
90002d06:	f022 0201 	bic.w	r2, r2, #1
90002d0a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
90002d0c:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
90002d0e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
90002d10:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
90002d12:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
90002d14:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
90002d16:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
90002d18:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90002d1a:	f7ff ff55 	bl	90002bc8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90002d1e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
90002d20:	233f      	movs	r3, #63	; 0x3f
90002d22:	4093      	lsls	r3, r2
90002d24:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002d26:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
90002d28:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
90002d2c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
90002d30:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
90002d34:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
90002d38:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
90002d3c:	4620      	mov	r0, r4
90002d3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90002d40:	2401      	movs	r4, #1
90002d42:	e7fb      	b.n	90002d3c <HAL_DMA_DeInit+0x4c>

90002d44 <HAL_DMA_Start_IT>:
{
90002d44:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
90002d46:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90002d4a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
90002d4c:	2c01      	cmp	r4, #1
90002d4e:	d034      	beq.n	90002dba <HAL_DMA_Start_IT+0x76>
90002d50:	2401      	movs	r4, #1
90002d52:	2500      	movs	r5, #0
90002d54:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
90002d58:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
90002d5c:	2c01      	cmp	r4, #1
90002d5e:	f04f 0402 	mov.w	r4, #2
90002d62:	d128      	bne.n	90002db6 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
90002d64:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
90002d68:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90002d6a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
90002d6c:	6825      	ldr	r5, [r4, #0]
90002d6e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
90002d72:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
90002d74:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
90002d76:	6883      	ldr	r3, [r0, #8]
90002d78:	2b40      	cmp	r3, #64	; 0x40
90002d7a:	d119      	bne.n	90002db0 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
90002d7c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
90002d7e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
90002d80:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
90002d82:	233f      	movs	r3, #63	; 0x3f
90002d84:	4093      	lsls	r3, r2
90002d86:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
90002d88:	6823      	ldr	r3, [r4, #0]
90002d8a:	f043 0316 	orr.w	r3, r3, #22
90002d8e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
90002d90:	6963      	ldr	r3, [r4, #20]
90002d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90002d96:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
90002d98:	6c03      	ldr	r3, [r0, #64]	; 0x40
90002d9a:	b11b      	cbz	r3, 90002da4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
90002d9c:	6823      	ldr	r3, [r4, #0]
90002d9e:	f043 0308 	orr.w	r3, r3, #8
90002da2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
90002da4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
90002da6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
90002da8:	f043 0301 	orr.w	r3, r3, #1
90002dac:	6023      	str	r3, [r4, #0]
}
90002dae:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
90002db0:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
90002db2:	60e2      	str	r2, [r4, #12]
90002db4:	e7e4      	b.n	90002d80 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
90002db6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
90002dba:	2002      	movs	r0, #2
90002dbc:	e7f7      	b.n	90002dae <HAL_DMA_Start_IT+0x6a>

90002dbe <HAL_DMA_Abort>:
{
90002dbe:	b570      	push	{r4, r5, r6, lr}
90002dc0:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90002dc2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
90002dc4:	f7ff fe82 	bl	90002acc <HAL_GetTick>
90002dc8:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
90002dca:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
90002dce:	2b02      	cmp	r3, #2
90002dd0:	d006      	beq.n	90002de0 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90002dd2:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
90002dd4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90002dd6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
90002dd8:	2300      	movs	r3, #0
90002dda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
90002dde:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90002de0:	6823      	ldr	r3, [r4, #0]
90002de2:	681a      	ldr	r2, [r3, #0]
90002de4:	f022 0216 	bic.w	r2, r2, #22
90002de8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
90002dea:	695a      	ldr	r2, [r3, #20]
90002dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90002df0:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
90002df2:	6c22      	ldr	r2, [r4, #64]	; 0x40
90002df4:	b90a      	cbnz	r2, 90002dfa <HAL_DMA_Abort+0x3c>
90002df6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
90002df8:	b11a      	cbz	r2, 90002e02 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
90002dfa:	681a      	ldr	r2, [r3, #0]
90002dfc:	f022 0208 	bic.w	r2, r2, #8
90002e00:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
90002e02:	681a      	ldr	r2, [r3, #0]
90002e04:	f022 0201 	bic.w	r2, r2, #1
90002e08:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
90002e0a:	6823      	ldr	r3, [r4, #0]
90002e0c:	681b      	ldr	r3, [r3, #0]
90002e0e:	f013 0301 	ands.w	r3, r3, #1
90002e12:	d10a      	bne.n	90002e2a <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
90002e14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90002e16:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
90002e18:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
90002e1a:	408a      	lsls	r2, r1
90002e1c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
90002e1e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
90002e20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
90002e24:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
90002e28:	e7d9      	b.n	90002dde <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90002e2a:	f7ff fe4f 	bl	90002acc <HAL_GetTick>
90002e2e:	1b40      	subs	r0, r0, r5
90002e30:	2805      	cmp	r0, #5
90002e32:	d9ea      	bls.n	90002e0a <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002e34:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
90002e36:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90002e38:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
90002e3a:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
90002e3c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
90002e40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
90002e44:	e7cb      	b.n	90002dde <HAL_DMA_Abort+0x20>
	...

90002e48 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
90002e48:	2300      	movs	r3, #0
{
90002e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
90002e4c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90002e4e:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
90002e50:	4b5b      	ldr	r3, [pc, #364]	; (90002fc0 <HAL_DMA_IRQHandler+0x178>)
{
90002e52:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90002e54:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
90002e56:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90002e58:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
90002e5a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
90002e5c:	409a      	lsls	r2, r3
90002e5e:	4232      	tst	r2, r6
90002e60:	d00c      	beq.n	90002e7c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
90002e62:	6801      	ldr	r1, [r0, #0]
90002e64:	6808      	ldr	r0, [r1, #0]
90002e66:	0740      	lsls	r0, r0, #29
90002e68:	d508      	bpl.n	90002e7c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
90002e6a:	6808      	ldr	r0, [r1, #0]
90002e6c:	f020 0004 	bic.w	r0, r0, #4
90002e70:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
90002e72:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
90002e74:	6d62      	ldr	r2, [r4, #84]	; 0x54
90002e76:	f042 0201 	orr.w	r2, r2, #1
90002e7a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
90002e7c:	2201      	movs	r2, #1
90002e7e:	409a      	lsls	r2, r3
90002e80:	4232      	tst	r2, r6
90002e82:	d008      	beq.n	90002e96 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
90002e84:	6821      	ldr	r1, [r4, #0]
90002e86:	6949      	ldr	r1, [r1, #20]
90002e88:	0609      	lsls	r1, r1, #24
90002e8a:	d504      	bpl.n	90002e96 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
90002e8c:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
90002e8e:	6d62      	ldr	r2, [r4, #84]	; 0x54
90002e90:	f042 0202 	orr.w	r2, r2, #2
90002e94:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
90002e96:	2204      	movs	r2, #4
90002e98:	409a      	lsls	r2, r3
90002e9a:	4232      	tst	r2, r6
90002e9c:	d008      	beq.n	90002eb0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
90002e9e:	6821      	ldr	r1, [r4, #0]
90002ea0:	6809      	ldr	r1, [r1, #0]
90002ea2:	0788      	lsls	r0, r1, #30
90002ea4:	d504      	bpl.n	90002eb0 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
90002ea6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
90002ea8:	6d62      	ldr	r2, [r4, #84]	; 0x54
90002eaa:	f042 0204 	orr.w	r2, r2, #4
90002eae:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
90002eb0:	2210      	movs	r2, #16
90002eb2:	409a      	lsls	r2, r3
90002eb4:	4232      	tst	r2, r6
90002eb6:	d010      	beq.n	90002eda <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
90002eb8:	6823      	ldr	r3, [r4, #0]
90002eba:	6819      	ldr	r1, [r3, #0]
90002ebc:	0709      	lsls	r1, r1, #28
90002ebe:	d50c      	bpl.n	90002eda <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
90002ec0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
90002ec2:	681a      	ldr	r2, [r3, #0]
90002ec4:	0350      	lsls	r0, r2, #13
90002ec6:	d537      	bpl.n	90002f38 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
90002ec8:	681b      	ldr	r3, [r3, #0]
90002eca:	0319      	lsls	r1, r3, #12
90002ecc:	d401      	bmi.n	90002ed2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
90002ece:	6c23      	ldr	r3, [r4, #64]	; 0x40
90002ed0:	e000      	b.n	90002ed4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
90002ed2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
90002ed4:	b10b      	cbz	r3, 90002eda <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
90002ed6:	4620      	mov	r0, r4
90002ed8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
90002eda:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90002edc:	2220      	movs	r2, #32
90002ede:	408a      	lsls	r2, r1
90002ee0:	4232      	tst	r2, r6
90002ee2:	d03a      	beq.n	90002f5a <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
90002ee4:	6823      	ldr	r3, [r4, #0]
90002ee6:	6818      	ldr	r0, [r3, #0]
90002ee8:	06c6      	lsls	r6, r0, #27
90002eea:	d536      	bpl.n	90002f5a <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
90002eec:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
90002eee:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
90002ef2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90002ef4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
90002ef6:	d127      	bne.n	90002f48 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90002ef8:	f022 0216 	bic.w	r2, r2, #22
90002efc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
90002efe:	695a      	ldr	r2, [r3, #20]
90002f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90002f04:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
90002f06:	6c22      	ldr	r2, [r4, #64]	; 0x40
90002f08:	b90a      	cbnz	r2, 90002f0e <HAL_DMA_IRQHandler+0xc6>
90002f0a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
90002f0c:	b11a      	cbz	r2, 90002f16 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
90002f0e:	681a      	ldr	r2, [r3, #0]
90002f10:	f022 0208 	bic.w	r2, r2, #8
90002f14:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
90002f16:	233f      	movs	r3, #63	; 0x3f
90002f18:	408b      	lsls	r3, r1
90002f1a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
90002f1c:	2300      	movs	r3, #0
90002f1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
90002f22:	2301      	movs	r3, #1
90002f24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
90002f28:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
90002f2a:	2b00      	cmp	r3, #0
90002f2c:	d045      	beq.n	90002fba <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
90002f2e:	4620      	mov	r0, r4
}
90002f30:	b003      	add	sp, #12
90002f32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
90002f36:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
90002f38:	681a      	ldr	r2, [r3, #0]
90002f3a:	05d2      	lsls	r2, r2, #23
90002f3c:	d4c7      	bmi.n	90002ece <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
90002f3e:	681a      	ldr	r2, [r3, #0]
90002f40:	f022 0208 	bic.w	r2, r2, #8
90002f44:	601a      	str	r2, [r3, #0]
90002f46:	e7c2      	b.n	90002ece <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
90002f48:	0350      	lsls	r0, r2, #13
90002f4a:	d527      	bpl.n	90002f9c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
90002f4c:	681b      	ldr	r3, [r3, #0]
90002f4e:	0319      	lsls	r1, r3, #12
90002f50:	d431      	bmi.n	90002fb6 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
90002f52:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
90002f54:	b10b      	cbz	r3, 90002f5a <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
90002f56:	4620      	mov	r0, r4
90002f58:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
90002f5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
90002f5c:	b36b      	cbz	r3, 90002fba <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
90002f5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
90002f60:	07da      	lsls	r2, r3, #31
90002f62:	d519      	bpl.n	90002f98 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
90002f64:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
90002f68:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
90002f6a:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
90002f6e:	2305      	movs	r3, #5
90002f70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
90002f74:	6813      	ldr	r3, [r2, #0]
90002f76:	f023 0301 	bic.w	r3, r3, #1
90002f7a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
90002f7c:	9b01      	ldr	r3, [sp, #4]
90002f7e:	3301      	adds	r3, #1
90002f80:	42bb      	cmp	r3, r7
90002f82:	9301      	str	r3, [sp, #4]
90002f84:	d802      	bhi.n	90002f8c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
90002f86:	6813      	ldr	r3, [r2, #0]
90002f88:	07db      	lsls	r3, r3, #31
90002f8a:	d4f7      	bmi.n	90002f7c <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
90002f8c:	2300      	movs	r3, #0
90002f8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
90002f92:	2301      	movs	r3, #1
90002f94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
90002f98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
90002f9a:	e7c6      	b.n	90002f2a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
90002f9c:	681a      	ldr	r2, [r3, #0]
90002f9e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
90002fa2:	d108      	bne.n	90002fb6 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
90002fa4:	6819      	ldr	r1, [r3, #0]
90002fa6:	f021 0110 	bic.w	r1, r1, #16
90002faa:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
90002fac:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
90002fae:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
90002fb2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
90002fb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90002fb8:	e7cc      	b.n	90002f54 <HAL_DMA_IRQHandler+0x10c>
}
90002fba:	b003      	add	sp, #12
90002fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
90002fbe:	bf00      	nop
90002fc0:	200000b4 	.word	0x200000b4

90002fc4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
90002fc4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
90002fc6:	6804      	ldr	r4, [r0, #0]
90002fc8:	9d04      	ldr	r5, [sp, #16]
90002fca:	6c66      	ldr	r6, [r4, #68]	; 0x44
90002fcc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
90002fd0:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
90002fd4:	4333      	orrs	r3, r6
90002fd6:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90002fd8:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90002fda:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
90002fdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90002fe0:	d130      	bne.n	90003044 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90002fe2:	6885      	ldr	r5, [r0, #8]
90002fe4:	b11d      	cbz	r5, 90002fee <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90002fe6:	2d01      	cmp	r5, #1
90002fe8:	d103      	bne.n	90002ff2 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90002fea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90002fee:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90002ff0:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90002ff2:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90002ff4:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90002ff8:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90002ffc:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90002ffe:	d107      	bne.n	90003010 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
90003000:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
90003002:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003004:	02c9      	lsls	r1, r1, #11
90003006:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
9000300a:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
9000300e:	e7ee      	b.n	90002fee <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003010:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003012:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003016:	d10a      	bne.n	9000302e <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
90003018:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
9000301a:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
9000301c:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
9000301e:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003020:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
90003024:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
90003028:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
9000302c:	e7df      	b.n	90002fee <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
9000302e:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
90003030:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003032:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
90003034:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003036:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
9000303a:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
9000303e:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
90003042:	e7d4      	b.n	90002fee <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003044:	60e1      	str	r1, [r4, #12]
}
90003046:	e7d3      	b.n	90002ff0 <DMA2D_SetConfig+0x2c>

90003048 <HAL_DMA2D_MspInit>:
}
90003048:	4770      	bx	lr

9000304a <HAL_DMA2D_Init>:
{
9000304a:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
9000304c:	4604      	mov	r4, r0
9000304e:	b330      	cbz	r0, 9000309e <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
90003050:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
90003054:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90003058:	b91b      	cbnz	r3, 90003062 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
9000305a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
9000305e:	f7ff fff3 	bl	90003048 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90003062:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003064:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90003066:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90003068:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000306a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
9000306e:	6813      	ldr	r3, [r2, #0]
90003070:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
90003074:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90003076:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90003078:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
9000307a:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000307c:	f023 0307 	bic.w	r3, r3, #7
90003080:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90003082:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90003084:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90003086:	6c13      	ldr	r3, [r2, #64]	; 0x40
90003088:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
9000308c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
90003090:	430b      	orrs	r3, r1
90003092:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003094:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90003096:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90003098:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
9000309c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
9000309e:	2001      	movs	r0, #1
900030a0:	e7fc      	b.n	9000309c <HAL_DMA2D_Init+0x52>

900030a2 <HAL_DMA2D_Start>:
{
900030a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
900030a4:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
900030a8:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
900030aa:	2d01      	cmp	r5, #1
900030ac:	f04f 0502 	mov.w	r5, #2
900030b0:	d00f      	beq.n	900030d2 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900030b2:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
900030b6:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
900030b8:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
900030ba:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
900030be:	9500      	str	r5, [sp, #0]
900030c0:	f7ff ff80 	bl	90002fc4 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
900030c4:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
900030c6:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
900030c8:	6813      	ldr	r3, [r2, #0]
900030ca:	4333      	orrs	r3, r6
900030cc:	6013      	str	r3, [r2, #0]
}
900030ce:	b002      	add	sp, #8
900030d0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
900030d2:	4628      	mov	r0, r5
900030d4:	e7fb      	b.n	900030ce <HAL_DMA2D_Start+0x2c>

900030d6 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
900030d6:	2300      	movs	r3, #0
{
900030d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
900030da:	9301      	str	r3, [sp, #4]
{
900030dc:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900030de:	6803      	ldr	r3, [r0, #0]
{
900030e0:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
900030e2:	681b      	ldr	r3, [r3, #0]
900030e4:	07db      	lsls	r3, r3, #31
900030e6:	d418      	bmi.n	9000311a <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
900030e8:	6822      	ldr	r2, [r4, #0]
900030ea:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
900030ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
900030ee:	4313      	orrs	r3, r2
  if (layer_start != 0U)
900030f0:	069e      	lsls	r6, r3, #26
900030f2:	d506      	bpl.n	90003102 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
900030f4:	f7ff fcea 	bl	90002acc <HAL_GetTick>
900030f8:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
900030fa:	6823      	ldr	r3, [r4, #0]
900030fc:	685a      	ldr	r2, [r3, #4]
900030fe:	06d2      	lsls	r2, r2, #27
90003100:	d53e      	bpl.n	90003180 <HAL_DMA2D_PollForTransfer+0xaa>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
90003102:	6823      	ldr	r3, [r4, #0]
90003104:	2212      	movs	r2, #18
  return HAL_OK;
90003106:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
90003108:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000310a:	2301      	movs	r3, #1
9000310c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
90003110:	2300      	movs	r3, #0
90003112:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
90003116:	b002      	add	sp, #8
90003118:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
9000311a:	f7ff fcd7 	bl	90002acc <HAL_GetTick>
9000311e:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003120:	6823      	ldr	r3, [r4, #0]
90003122:	685a      	ldr	r2, [r3, #4]
90003124:	0792      	lsls	r2, r2, #30
90003126:	d4df      	bmi.n	900030e8 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003128:	685a      	ldr	r2, [r3, #4]
9000312a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
9000312c:	9a01      	ldr	r2, [sp, #4]
9000312e:	f012 0f21 	tst.w	r2, #33	; 0x21
90003132:	d014      	beq.n	9000315e <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003134:	9a01      	ldr	r2, [sp, #4]
90003136:	0695      	lsls	r5, r2, #26
90003138:	d503      	bpl.n	90003142 <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
9000313a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000313c:	f042 0202 	orr.w	r2, r2, #2
90003140:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003142:	9a01      	ldr	r2, [sp, #4]
90003144:	07d0      	lsls	r0, r2, #31
90003146:	d503      	bpl.n	90003150 <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90003148:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000314a:	f042 0201 	orr.w	r2, r2, #1
9000314e:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003150:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
90003152:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
90003154:	2304      	movs	r3, #4
        return HAL_ERROR;
90003156:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
90003158:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        return HAL_ERROR;
9000315c:	e7d8      	b.n	90003110 <HAL_DMA2D_PollForTransfer+0x3a>
      if(Timeout != HAL_MAX_DELAY)
9000315e:	1c69      	adds	r1, r5, #1
90003160:	d0df      	beq.n	90003122 <HAL_DMA2D_PollForTransfer+0x4c>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
90003162:	f7ff fcb3 	bl	90002acc <HAL_GetTick>
90003166:	1b80      	subs	r0, r0, r6
90003168:	42a8      	cmp	r0, r5
9000316a:	d801      	bhi.n	90003170 <HAL_DMA2D_PollForTransfer+0x9a>
9000316c:	2d00      	cmp	r5, #0
9000316e:	d1d7      	bne.n	90003120 <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003170:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
90003172:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
90003174:	f043 0320 	orr.w	r3, r3, #32
90003178:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
9000317a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
9000317e:	e7c7      	b.n	90003110 <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003180:	685a      	ldr	r2, [r3, #4]
90003182:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
90003184:	9a01      	ldr	r2, [sp, #4]
90003186:	f012 0f29 	tst.w	r2, #41	; 0x29
9000318a:	d016      	beq.n	900031ba <HAL_DMA2D_PollForTransfer+0xe4>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
9000318c:	9a01      	ldr	r2, [sp, #4]
9000318e:	0716      	lsls	r6, r2, #28
90003190:	d503      	bpl.n	9000319a <HAL_DMA2D_PollForTransfer+0xc4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90003192:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90003194:	f042 0204 	orr.w	r2, r2, #4
90003198:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
9000319a:	9a01      	ldr	r2, [sp, #4]
9000319c:	0695      	lsls	r5, r2, #26
9000319e:	d503      	bpl.n	900031a8 <HAL_DMA2D_PollForTransfer+0xd2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900031a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
900031a2:	f042 0202 	orr.w	r2, r2, #2
900031a6:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900031a8:	9a01      	ldr	r2, [sp, #4]
900031aa:	07d0      	lsls	r0, r2, #31
900031ac:	d503      	bpl.n	900031b6 <HAL_DMA2D_PollForTransfer+0xe0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900031ae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
900031b0:	f042 0201 	orr.w	r2, r2, #1
900031b4:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900031b6:	2229      	movs	r2, #41	; 0x29
900031b8:	e7cb      	b.n	90003152 <HAL_DMA2D_PollForTransfer+0x7c>
      if(Timeout != HAL_MAX_DELAY)
900031ba:	1c69      	adds	r1, r5, #1
900031bc:	d09e      	beq.n	900030fc <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
900031be:	f7ff fc85 	bl	90002acc <HAL_GetTick>
900031c2:	1b80      	subs	r0, r0, r6
900031c4:	42a8      	cmp	r0, r5
900031c6:	d8d3      	bhi.n	90003170 <HAL_DMA2D_PollForTransfer+0x9a>
900031c8:	2d00      	cmp	r5, #0
900031ca:	d196      	bne.n	900030fa <HAL_DMA2D_PollForTransfer+0x24>
900031cc:	e7d0      	b.n	90003170 <HAL_DMA2D_PollForTransfer+0x9a>
	...

900031d0 <HAL_DMA2D_ConfigLayer>:
{
900031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
900031d2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
900031d6:	2b01      	cmp	r3, #1
900031d8:	f04f 0302 	mov.w	r3, #2
900031dc:	d02b      	beq.n	90003236 <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900031de:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
900031e2:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
900031e4:	eb00 1301 	add.w	r3, r0, r1, lsl #4
900031e8:	4f1c      	ldr	r7, [pc, #112]	; (9000325c <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
900031ea:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
900031ee:	010e      	lsls	r6, r1, #4
900031f0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
900031f2:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
900031f6:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900031fa:	3c09      	subs	r4, #9
900031fc:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
900031fe:	bf96      	itet	ls
90003200:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003204:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003208:	431a      	orrls	r2, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000320a:	6803      	ldr	r3, [r0, #0]
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
9000320c:	b9a9      	cbnz	r1, 9000323a <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000320e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003210:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003212:	ea01 0107 	and.w	r1, r1, r7
90003216:	ea42 0201 	orr.w	r2, r2, r1
9000321a:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000321c:	6982      	ldr	r2, [r0, #24]
9000321e:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003220:	d803      	bhi.n	9000322a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
90003222:	6a42      	ldr	r2, [r0, #36]	; 0x24
90003224:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90003228:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000322a:	2301      	movs	r3, #1
9000322c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
90003230:	2300      	movs	r3, #0
90003232:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
90003236:	4618      	mov	r0, r3
}
90003238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000323a:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000323c:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000323e:	ea01 0107 	and.w	r1, r1, r7
90003242:	ea42 0201 	orr.w	r2, r2, r1
90003246:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003248:	eb00 0206 	add.w	r2, r0, r6
9000324c:	6992      	ldr	r2, [r2, #24]
9000324e:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003250:	d8eb      	bhi.n	9000322a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
90003252:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
90003256:	621d      	str	r5, [r3, #32]
90003258:	e7e7      	b.n	9000322a <HAL_DMA2D_ConfigLayer+0x5a>
9000325a:	bf00      	nop
9000325c:	00fcfff0 	.word	0x00fcfff0

90003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90003260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90003264:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003266:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 9000341c <HAL_GPIO_Init+0x1bc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
9000326a:	4a6a      	ldr	r2, [pc, #424]	; (90003414 <HAL_GPIO_Init+0x1b4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
9000326c:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 90003420 <HAL_GPIO_Init+0x1c0>
    ioposition = ((uint32_t)0x01) << position;
90003270:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90003272:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
90003274:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90003276:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
9000327a:	43ac      	bics	r4, r5
9000327c:	f040 80b1 	bne.w	900033e2 <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90003280:	684c      	ldr	r4, [r1, #4]
90003282:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90003286:	2503      	movs	r5, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90003288:	f024 0c10 	bic.w	ip, r4, #16
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
9000328c:	fa05 f50e 	lsl.w	r5, r5, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90003290:	f10c 37ff 	add.w	r7, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90003294:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90003296:	2f01      	cmp	r7, #1
90003298:	d810      	bhi.n	900032bc <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
9000329a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
9000329c:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
900032a0:	68cf      	ldr	r7, [r1, #12]
900032a2:	fa07 f70e 	lsl.w	r7, r7, lr
900032a6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
900032aa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
900032ac:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
900032ae:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
900032b2:	0927      	lsrs	r7, r4, #4
900032b4:	409f      	lsls	r7, r3
900032b6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
900032ba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
900032bc:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
900032be:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
900032c2:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
900032c6:	688f      	ldr	r7, [r1, #8]
900032c8:	fa07 f70e 	lsl.w	r7, r7, lr
900032cc:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
900032d0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
900032d2:	d116      	bne.n	90003302 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
900032d4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
900032d8:	f003 0b07 	and.w	fp, r3, #7
900032dc:	f04f 0c0f 	mov.w	ip, #15
900032e0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
900032e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
900032e8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
900032ec:	fa0c fc0b 	lsl.w	ip, ip, fp
900032f0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
900032f4:	690f      	ldr	r7, [r1, #16]
900032f6:	fa07 f70b 	lsl.w	r7, r7, fp
900032fa:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
900032fe:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
90003302:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
90003304:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90003306:	f004 0503 	and.w	r5, r4, #3
9000330a:	fa05 f50e 	lsl.w	r5, r5, lr
9000330e:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
90003310:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
90003312:	00e5      	lsls	r5, r4, #3
90003314:	d565      	bpl.n	900033e2 <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003316:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
9000331a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
9000331e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003322:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
90003326:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
9000332a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000332e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
90003332:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
90003336:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
9000333a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
9000333e:	9501      	str	r5, [sp, #4]
90003340:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90003342:	250f      	movs	r5, #15
        temp = SYSCFG->EXTICR[position >> 2];
90003344:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90003348:	fa05 f50c 	lsl.w	r5, r5, ip
9000334c:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90003350:	4d31      	ldr	r5, [pc, #196]	; (90003418 <HAL_GPIO_Init+0x1b8>)
90003352:	42a8      	cmp	r0, r5
90003354:	d04c      	beq.n	900033f0 <HAL_GPIO_Init+0x190>
90003356:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000335a:	42a8      	cmp	r0, r5
9000335c:	d04a      	beq.n	900033f4 <HAL_GPIO_Init+0x194>
9000335e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90003362:	42a8      	cmp	r0, r5
90003364:	d048      	beq.n	900033f8 <HAL_GPIO_Init+0x198>
90003366:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000336a:	42a8      	cmp	r0, r5
9000336c:	d046      	beq.n	900033fc <HAL_GPIO_Init+0x19c>
9000336e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90003372:	42a8      	cmp	r0, r5
90003374:	d044      	beq.n	90003400 <HAL_GPIO_Init+0x1a0>
90003376:	4548      	cmp	r0, r9
90003378:	d044      	beq.n	90003404 <HAL_GPIO_Init+0x1a4>
9000337a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
9000337e:	42a8      	cmp	r0, r5
90003380:	d042      	beq.n	90003408 <HAL_GPIO_Init+0x1a8>
90003382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90003386:	42a8      	cmp	r0, r5
90003388:	d040      	beq.n	9000340c <HAL_GPIO_Init+0x1ac>
9000338a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000338e:	42a8      	cmp	r0, r5
90003390:	d03e      	beq.n	90003410 <HAL_GPIO_Init+0x1b0>
90003392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90003396:	42a8      	cmp	r0, r5
90003398:	bf0c      	ite	eq
9000339a:	2509      	moveq	r5, #9
9000339c:	250a      	movne	r5, #10
9000339e:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
900033a2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
900033a6:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
900033aa:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
900033ac:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
900033b0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
900033b2:	bf0c      	ite	eq
900033b4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
900033b6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
900033b8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
900033bc:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
900033be:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
900033c0:	bf0c      	ite	eq
900033c2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
900033c4:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
900033c6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
900033ca:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
900033cc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
900033ce:	bf0c      	ite	eq
900033d0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
900033d2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
900033d4:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
900033d6:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
900033d8:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
900033da:	bf54      	ite	pl
900033dc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
900033de:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
900033e0:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
900033e2:	3301      	adds	r3, #1
900033e4:	2b10      	cmp	r3, #16
900033e6:	f47f af43 	bne.w	90003270 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
900033ea:	b003      	add	sp, #12
900033ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
900033f0:	2500      	movs	r5, #0
900033f2:	e7d4      	b.n	9000339e <HAL_GPIO_Init+0x13e>
900033f4:	2501      	movs	r5, #1
900033f6:	e7d2      	b.n	9000339e <HAL_GPIO_Init+0x13e>
900033f8:	2502      	movs	r5, #2
900033fa:	e7d0      	b.n	9000339e <HAL_GPIO_Init+0x13e>
900033fc:	2503      	movs	r5, #3
900033fe:	e7ce      	b.n	9000339e <HAL_GPIO_Init+0x13e>
90003400:	2504      	movs	r5, #4
90003402:	e7cc      	b.n	9000339e <HAL_GPIO_Init+0x13e>
90003404:	2505      	movs	r5, #5
90003406:	e7ca      	b.n	9000339e <HAL_GPIO_Init+0x13e>
90003408:	2506      	movs	r5, #6
9000340a:	e7c8      	b.n	9000339e <HAL_GPIO_Init+0x13e>
9000340c:	2507      	movs	r5, #7
9000340e:	e7c6      	b.n	9000339e <HAL_GPIO_Init+0x13e>
90003410:	2508      	movs	r5, #8
90003412:	e7c4      	b.n	9000339e <HAL_GPIO_Init+0x13e>
90003414:	40013c00 	.word	0x40013c00
90003418:	40020000 	.word	0x40020000
9000341c:	40023800 	.word	0x40023800
90003420:	40021400 	.word	0x40021400

90003424 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
90003424:	b10a      	cbz	r2, 9000342a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
90003426:	6181      	str	r1, [r0, #24]
  }
}
90003428:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
9000342a:	0409      	lsls	r1, r1, #16
9000342c:	e7fb      	b.n	90003426 <HAL_GPIO_WritePin+0x2>

9000342e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
9000342e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90003432:	4605      	mov	r5, r0
90003434:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
90003436:	f895 42b8 	ldrb.w	r4, [r5, #696]	; 0x2b8
{
9000343a:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
9000343e:	2c01      	cmp	r4, #1
{
90003440:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
90003444:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
90003448:	d025      	beq.n	90003496 <HAL_HCD_HC_Init+0x68>
9000344a:	2401      	movs	r4, #1
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
9000344c:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
9000344e:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
90003450:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  __HAL_LOCK(hhcd);
90003454:	f885 42b8 	strb.w	r4, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
90003458:	2428      	movs	r4, #40	; 0x28
9000345a:	fb04 5401 	mla	r4, r4, r1, r5
9000345e:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
90003462:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
90003466:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
9000346a:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
9000346e:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
90003472:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
90003476:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
9000347a:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
9000347e:	6828      	ldr	r0, [r5, #0]
90003480:	f8cd e000 	str.w	lr, [sp]
90003484:	e9cd 8901 	strd	r8, r9, [sp, #4]
90003488:	f002 fbfc 	bl	90005c84 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
9000348c:	f885 72b8 	strb.w	r7, [r5, #696]	; 0x2b8

  return status;
}
90003490:	b005      	add	sp, #20
90003492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
90003496:	2002      	movs	r0, #2
90003498:	e7fa      	b.n	90003490 <HAL_HCD_HC_Init+0x62>

9000349a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
9000349a:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
9000349c:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
900034a0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
900034a2:	2b01      	cmp	r3, #1
900034a4:	d009      	beq.n	900034ba <HAL_HCD_HC_Halt+0x20>
900034a6:	2301      	movs	r3, #1
900034a8:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900034ac:	6800      	ldr	r0, [r0, #0]
900034ae:	f002 fc62 	bl	90005d76 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
900034b2:	2000      	movs	r0, #0
900034b4:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
900034b8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
900034ba:	2002      	movs	r0, #2
900034bc:	e7fc      	b.n	900034b8 <HAL_HCD_HC_Halt+0x1e>

900034be <HAL_HCD_Init>:
{
900034be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
900034c2:	4606      	mov	r6, r0
{
900034c4:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
900034c6:	2800      	cmp	r0, #0
900034c8:	d043      	beq.n	90003552 <HAL_HCD_Init+0x94>
  if (hhcd->State == HAL_HCD_STATE_RESET)
900034ca:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
900034ce:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
900034d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900034d4:	b91b      	cbnz	r3, 900034de <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
900034d6:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
900034da:	f007 f817 	bl	9000a50c <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
900034de:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
900034e0:	466d      	mov	r5, sp
900034e2:	f106 0804 	add.w	r8, r6, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
900034e6:	4637      	mov	r7, r6
  hhcd->State = HAL_HCD_STATE_BUSY;
900034e8:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
900034ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
900034ee:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
900034f0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
900034f4:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
900034f8:	bf08      	it	eq
900034fa:	6133      	streq	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
900034fc:	f002 fa87 	bl	90005a0e <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
90003500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90003502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
90003504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90003506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
90003508:	e894 0003 	ldmia.w	r4, {r0, r1}
9000350c:	e885 0003 	stmia.w	r5, {r0, r1}
90003510:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
90003514:	6830      	ldr	r0, [r6, #0]
90003516:	f002 fa39 	bl	9000598c <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
9000351a:	f857 0b10 	ldr.w	r0, [r7], #16
9000351e:	2101      	movs	r1, #1
90003520:	f002 fa7b 	bl	90005a1a <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
90003524:	46ec      	mov	ip, sp
90003526:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90003528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9000352c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9000352e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90003532:	e894 0003 	ldmia.w	r4, {r0, r1}
90003536:	e885 0003 	stmia.w	r5, {r0, r1}
9000353a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
9000353e:	6830      	ldr	r0, [r6, #0]
90003540:	f002 fb28 	bl	90005b94 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
90003544:	2301      	movs	r3, #1
  return HAL_OK;
90003546:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
90003548:	f886 32b9 	strb.w	r3, [r6, #697]	; 0x2b9
}
9000354c:	b00a      	add	sp, #40	; 0x28
9000354e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
90003552:	2001      	movs	r0, #1
90003554:	e7fa      	b.n	9000354c <HAL_HCD_Init+0x8e>
	...

90003558 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
90003558:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
9000355a:	2628      	movs	r6, #40	; 0x28
{
9000355c:	f89d 7010 	ldrb.w	r7, [sp, #16]
90003560:	9d05      	ldr	r5, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
90003562:	fb06 0601 	mla	r6, r6, r1, r0
{
90003566:	f8bd 4018 	ldrh.w	r4, [sp, #24]
9000356a:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
9000356e:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
90003572:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f

  if (token == 0U)
90003576:	b97f      	cbnz	r7, 90003598 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
90003578:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
9000357a:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
9000357c:	f886 c03d 	strb.w	ip, [r6, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
90003580:	f886 7042 	strb.w	r7, [r6, #66]	; 0x42
  switch (ep_type)
90003584:	d03c      	beq.n	90003600 <HAL_HCD_HC_SubmitRequest+0xa8>
90003586:	42bb      	cmp	r3, r7
90003588:	d03a      	beq.n	90003600 <HAL_HCD_HC_SubmitRequest+0xa8>
9000358a:	2b01      	cmp	r3, #1
9000358c:	d11f      	bne.n	900035ce <HAL_HCD_HC_SubmitRequest+0x76>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
9000358e:	2328      	movs	r3, #40	; 0x28
90003590:	2200      	movs	r2, #0
90003592:	fb03 0301 	mla	r3, r3, r1, r0
90003596:	e030      	b.n	900035fa <HAL_HCD_HC_SubmitRequest+0xa2>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90003598:	f04f 0c02 	mov.w	ip, #2
9000359c:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch (ep_type)
900035a0:	2b03      	cmp	r3, #3
900035a2:	d814      	bhi.n	900035ce <HAL_HCD_HC_SubmitRequest+0x76>
900035a4:	a601      	add	r6, pc, #4	; (adr r6, 900035ac <HAL_HCD_HC_SubmitRequest+0x54>)
900035a6:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
900035aa:	bf00      	nop
900035ac:	900035bd 	.word	0x900035bd
900035b0:	9000358f 	.word	0x9000358f
900035b4:	90003601 	.word	0x90003601
900035b8:	90003601 	.word	0x90003601
      if ((token == 1U) && (direction == 0U)) /*send data */
900035bc:	2f01      	cmp	r7, #1
900035be:	d106      	bne.n	900035ce <HAL_HCD_HC_SubmitRequest+0x76>
900035c0:	b92a      	cbnz	r2, 900035ce <HAL_HCD_HC_SubmitRequest+0x76>
        if (length == 0U)
900035c2:	2328      	movs	r3, #40	; 0x28
          hhcd->hc[ch_num].toggle_out = 1U;
900035c4:	fb03 0301 	mla	r3, r3, r1, r0
        if (length == 0U)
900035c8:	b99c      	cbnz	r4, 900035f2 <HAL_HCD_HC_SubmitRequest+0x9a>
          hhcd->hc[ch_num].toggle_out = 1U;
900035ca:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
900035ce:	2228      	movs	r2, #40	; 0x28
900035d0:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
900035d4:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900035d8:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
900035da:	e9c3 5411 	strd	r5, r4, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_count = 0U;
900035de:	2400      	movs	r4, #0
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900035e0:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
900035e2:	f8a3 405c 	strh.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
900035e6:	64dc      	str	r4, [r3, #76]	; 0x4c
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900035e8:	7c02      	ldrb	r2, [r0, #16]
900035ea:	6800      	ldr	r0, [r0, #0]
}
900035ec:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
900035ee:	f002 bc27 	b.w	90005e40 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
900035f2:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
900035f6:	2e00      	cmp	r6, #0
900035f8:	d1e9      	bne.n	900035ce <HAL_HCD_HC_SubmitRequest+0x76>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
900035fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
900035fe:	e7e6      	b.n	900035ce <HAL_HCD_HC_SubmitRequest+0x76>
      if (direction == 0U)
90003600:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
90003602:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
90003606:	b92a      	cbnz	r2, 90003614 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
90003608:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
9000360c:	2e00      	cmp	r6, #0
9000360e:	d0f4      	beq.n	900035fa <HAL_HCD_HC_SubmitRequest+0xa2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
90003610:	2202      	movs	r2, #2
90003612:	e7f2      	b.n	900035fa <HAL_HCD_HC_SubmitRequest+0xa2>
        if (hhcd->hc[ch_num].toggle_in == 0U)
90003614:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
90003618:	2a00      	cmp	r2, #0
9000361a:	d1f9      	bne.n	90003610 <HAL_HCD_HC_SubmitRequest+0xb8>
9000361c:	e7ed      	b.n	900035fa <HAL_HCD_HC_SubmitRequest+0xa2>
9000361e:	bf00      	nop

90003620 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90003624:	6806      	ldr	r6, [r0, #0]
{
90003626:	b085      	sub	sp, #20
90003628:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
9000362a:	4630      	mov	r0, r6
9000362c:	f002 fa53 	bl	90005ad6 <USB_GetMode>
90003630:	2801      	cmp	r0, #1
90003632:	f040 80e1 	bne.w	900037f8 <HAL_HCD_IRQHandler+0x1d8>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
90003636:	6828      	ldr	r0, [r5, #0]
90003638:	f002 fa49 	bl	90005ace <USB_ReadInterrupts>
9000363c:	2800      	cmp	r0, #0
9000363e:	f000 80db 	beq.w	900037f8 <HAL_HCD_IRQHandler+0x1d8>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
90003642:	6828      	ldr	r0, [r5, #0]
90003644:	f002 fa43 	bl	90005ace <USB_ReadInterrupts>
90003648:	0284      	lsls	r4, r0, #10
9000364a:	d503      	bpl.n	90003654 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
9000364c:	682b      	ldr	r3, [r5, #0]
9000364e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
90003652:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
90003654:	6828      	ldr	r0, [r5, #0]
90003656:	f002 fa3a 	bl	90005ace <USB_ReadInterrupts>
9000365a:	02c0      	lsls	r0, r0, #11
9000365c:	d503      	bpl.n	90003666 <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
9000365e:	682b      	ldr	r3, [r5, #0]
90003660:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
90003664:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90003666:	6828      	ldr	r0, [r5, #0]
90003668:	f002 fa31 	bl	90005ace <USB_ReadInterrupts>
9000366c:	0141      	lsls	r1, r0, #5
9000366e:	d503      	bpl.n	90003678 <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
90003670:	682b      	ldr	r3, [r5, #0]
90003672:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90003676:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90003678:	6828      	ldr	r0, [r5, #0]
9000367a:	f002 fa28 	bl	90005ace <USB_ReadInterrupts>
9000367e:	0782      	lsls	r2, r0, #30
90003680:	d502      	bpl.n	90003688 <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
90003682:	682b      	ldr	r3, [r5, #0]
90003684:	2202      	movs	r2, #2
90003686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90003688:	6828      	ldr	r0, [r5, #0]
9000368a:	f002 fa20 	bl	90005ace <USB_ReadInterrupts>
9000368e:	0083      	lsls	r3, r0, #2
90003690:	d50e      	bpl.n	900036b0 <HAL_HCD_IRQHandler+0x90>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
90003692:	682b      	ldr	r3, [r5, #0]
90003694:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
90003698:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
9000369a:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
9000369e:	07df      	lsls	r7, r3, #31
900036a0:	d406      	bmi.n	900036b0 <HAL_HCD_IRQHandler+0x90>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
900036a2:	4628      	mov	r0, r5
900036a4:	f007 f816 	bl	9000a6d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
900036a8:	2101      	movs	r1, #1
900036aa:	6828      	ldr	r0, [r5, #0]
900036ac:	f002 fa17 	bl	90005ade <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
900036b0:	6828      	ldr	r0, [r5, #0]
900036b2:	f002 fa0c 	bl	90005ace <USB_ReadInterrupts>
900036b6:	01c4      	lsls	r4, r0, #7
900036b8:	d53c      	bpl.n	90003734 <HAL_HCD_IRQHandler+0x114>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
900036ba:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
900036bc:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
900036c0:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
900036c2:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
900036c6:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
900036c8:	9b03      	ldr	r3, [sp, #12]
900036ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
900036ce:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
900036d0:	9b02      	ldr	r3, [sp, #8]
900036d2:	0798      	lsls	r0, r3, #30
900036d4:	d509      	bpl.n	900036ea <HAL_HCD_IRQHandler+0xca>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
900036d6:	9b02      	ldr	r3, [sp, #8]
900036d8:	07d9      	lsls	r1, r3, #31
900036da:	d502      	bpl.n	900036e2 <HAL_HCD_IRQHandler+0xc2>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
900036dc:	4628      	mov	r0, r5
900036de:	f006 fff5 	bl	9000a6cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
900036e2:	9b03      	ldr	r3, [sp, #12]
900036e4:	f043 0302 	orr.w	r3, r3, #2
900036e8:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
900036ea:	9b02      	ldr	r3, [sp, #8]
900036ec:	071a      	lsls	r2, r3, #28
900036ee:	d517      	bpl.n	90003720 <HAL_HCD_IRQHandler+0x100>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
900036f0:	9b03      	ldr	r3, [sp, #12]
900036f2:	f043 0308 	orr.w	r3, r3, #8
900036f6:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
900036f8:	9b02      	ldr	r3, [sp, #8]
900036fa:	075b      	lsls	r3, r3, #29
900036fc:	f140 8087 	bpl.w	9000380e <HAL_HCD_IRQHandler+0x1ee>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
90003700:	69a9      	ldr	r1, [r5, #24]
90003702:	2902      	cmp	r1, #2
90003704:	d17b      	bne.n	900037fe <HAL_HCD_IRQHandler+0x1de>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90003706:	9b02      	ldr	r3, [sp, #8]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90003708:	6828      	ldr	r0, [r5, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
9000370a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
9000370e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90003712:	bf18      	it	ne
90003714:	2101      	movne	r1, #1
90003716:	f002 f9e2 	bl	90005ade <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
9000371a:	4628      	mov	r0, r5
9000371c:	f006 ffde 	bl	9000a6dc <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
90003720:	9b02      	ldr	r3, [sp, #8]
90003722:	069f      	lsls	r7, r3, #26
90003724:	d503      	bpl.n	9000372e <HAL_HCD_IRQHandler+0x10e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
90003726:	9b03      	ldr	r3, [sp, #12]
90003728:	f043 0320 	orr.w	r3, r3, #32
9000372c:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
9000372e:	9b03      	ldr	r3, [sp, #12]
90003730:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
90003734:	6828      	ldr	r0, [r5, #0]
90003736:	f002 f9ca 	bl	90005ace <USB_ReadInterrupts>
9000373a:	0704      	lsls	r4, r0, #28
9000373c:	d505      	bpl.n	9000374a <HAL_HCD_IRQHandler+0x12a>
      HAL_HCD_SOF_Callback(hhcd);
9000373e:	4628      	mov	r0, r5
90003740:	f006 ffc0 	bl	9000a6c4 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
90003744:	682b      	ldr	r3, [r5, #0]
90003746:	2208      	movs	r2, #8
90003748:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
9000374a:	6828      	ldr	r0, [r5, #0]
9000374c:	f002 f9bf 	bl	90005ace <USB_ReadInterrupts>
90003750:	0180      	lsls	r0, r0, #6
90003752:	d512      	bpl.n	9000377a <HAL_HCD_IRQHandler+0x15a>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90003754:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003756:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
9000375a:	f002 fb07 	bl	90005d6c <USB_HC_ReadInterrupt>
    if (hhcd->hc[ch_num].state == HC_XFRC)
9000375e:	2728      	movs	r7, #40	; 0x28
90003760:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
90003764:	f04f 0902 	mov.w	r9, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90003768:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
9000376a:	9300      	str	r3, [sp, #0]
9000376c:	68ab      	ldr	r3, [r5, #8]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000376e:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90003770:	4553      	cmp	r3, sl
90003772:	d850      	bhi.n	90003816 <HAL_HCD_IRQHandler+0x1f6>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
90003774:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90003778:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
9000377a:	6828      	ldr	r0, [r5, #0]
9000377c:	f002 f9a7 	bl	90005ace <USB_ReadInterrupts>
90003780:	06c3      	lsls	r3, r0, #27
90003782:	d539      	bpl.n	900037f8 <HAL_HCD_IRQHandler+0x1d8>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
90003784:	682e      	ldr	r6, [r5, #0]
90003786:	69b3      	ldr	r3, [r6, #24]
90003788:	f023 0310 	bic.w	r3, r3, #16
9000378c:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
9000378e:	6a37      	ldr	r7, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90003790:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
90003794:	2b02      	cmp	r3, #2
90003796:	d12a      	bne.n	900037ee <HAL_HCD_IRQHandler+0x1ce>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
90003798:	f3c7 180a 	ubfx	r8, r7, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
9000379c:	f1b8 0f00 	cmp.w	r8, #0
900037a0:	d025      	beq.n	900037ee <HAL_HCD_IRQHandler+0x1ce>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
900037a2:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
900037a6:	2428      	movs	r4, #40	; 0x28
900037a8:	fb04 5407 	mla	r4, r4, r7, r5
900037ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
900037ae:	b1f1      	cbz	r1, 900037ee <HAL_HCD_IRQHandler+0x1ce>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
900037b0:	4642      	mov	r2, r8
900037b2:	4630      	mov	r0, r6
900037b4:	f002 f97d 	bl	90005ab2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
900037b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
900037ba:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
900037be:	017a      	lsls	r2, r7, #5
        hhcd->hc[ch_num].xfer_buff += pktcnt;
900037c0:	4443      	add	r3, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
900037c2:	eb06 1747 	add.w	r7, r6, r7, lsl #5
        hhcd->hc[ch_num].xfer_buff += pktcnt;
900037c6:	6463      	str	r3, [r4, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
900037c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
900037ca:	6939      	ldr	r1, [r7, #16]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
900037cc:	4443      	add	r3, r8
900037ce:	64e3      	str	r3, [r4, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
900037d0:	4bb0      	ldr	r3, [pc, #704]	; (90003a94 <HAL_HCD_IRQHandler+0x474>)
900037d2:	400b      	ands	r3, r1
900037d4:	b15b      	cbz	r3, 900037ee <HAL_HCD_IRQHandler+0x1ce>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
900037d6:	58b3      	ldr	r3, [r6, r2]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900037d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
900037dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
900037e0:	50b3      	str	r3, [r6, r2]
          hhcd->hc[ch_num].toggle_in ^= 1U;
900037e2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
900037e6:	f083 0301 	eor.w	r3, r3, #1
900037ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900037ee:	682a      	ldr	r2, [r5, #0]
900037f0:	6993      	ldr	r3, [r2, #24]
900037f2:	f043 0310 	orr.w	r3, r3, #16
900037f6:	6193      	str	r3, [r2, #24]
}
900037f8:	b005      	add	sp, #20
900037fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
900037fe:	68eb      	ldr	r3, [r5, #12]
90003800:	2b01      	cmp	r3, #1
90003802:	d18a      	bne.n	9000371a <HAL_HCD_IRQHandler+0xfa>
          USBx_HOST->HFIR = 60000U;
90003804:	f64e 2260 	movw	r2, #60000	; 0xea60
90003808:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
9000380c:	e785      	b.n	9000371a <HAL_HCD_IRQHandler+0xfa>
      HAL_HCD_PortDisabled_Callback(hhcd);
9000380e:	4628      	mov	r0, r5
90003810:	f006 ff68 	bl	9000a6e4 <HAL_HCD_PortDisabled_Callback>
90003814:	e784      	b.n	90003720 <HAL_HCD_IRQHandler+0x100>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
90003816:	f00a 030f 	and.w	r3, sl, #15
9000381a:	9a01      	ldr	r2, [sp, #4]
9000381c:	fa22 f303 	lsr.w	r3, r2, r3
90003820:	07d9      	lsls	r1, r3, #31
90003822:	f140 8093 	bpl.w	9000394c <HAL_HCD_IRQHandler+0x32c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90003826:	9b00      	ldr	r3, [sp, #0]
90003828:	fa5f f68a 	uxtb.w	r6, sl
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
9000382c:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90003830:	6819      	ldr	r1, [r3, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
90003832:	ea4f 1b46 	mov.w	fp, r6, lsl #5
90003836:	eb08 1446 	add.w	r4, r8, r6, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
9000383a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
9000383e:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
90003840:	f000 811d 	beq.w	90003a7e <HAL_HCD_IRQHandler+0x45e>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
90003844:	074a      	lsls	r2, r1, #29
90003846:	d513      	bpl.n	90003870 <HAL_HCD_IRQHandler+0x250>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
90003848:	2104      	movs	r1, #4
9000384a:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000384c:	68e1      	ldr	r1, [r4, #12]
9000384e:	f041 0102 	orr.w	r1, r1, #2
90003852:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
90003854:	68a1      	ldr	r1, [r4, #8]
90003856:	0588      	lsls	r0, r1, #22
90003858:	d54a      	bpl.n	900038f0 <HAL_HCD_IRQHandler+0x2d0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000385a:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000385c:	4631      	mov	r1, r6
9000385e:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003860:	f043 0302 	orr.w	r3, r3, #2
90003864:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003866:	f002 fa86 	bl	90005d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
9000386a:	f44f 7300 	mov.w	r3, #512	; 0x200
9000386e:	e0f9      	b.n	90003a64 <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
90003870:	68a1      	ldr	r1, [r4, #8]
90003872:	05cb      	lsls	r3, r1, #23
90003874:	d510      	bpl.n	90003898 <HAL_HCD_IRQHandler+0x278>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
90003876:	f44f 7180 	mov.w	r1, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
9000387a:	f04f 0c07 	mov.w	ip, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
9000387e:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
90003880:	fb07 5106 	mla	r1, r7, r6, r5
90003884:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003888:	68e1      	ldr	r1, [r4, #12]
9000388a:	f041 0102 	orr.w	r1, r1, #2
9000388e:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003890:	4631      	mov	r1, r6
90003892:	f002 fa70 	bl	90005d76 <USB_HC_Halt>
90003896:	e7dd      	b.n	90003854 <HAL_HCD_IRQHandler+0x234>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
90003898:	68a1      	ldr	r1, [r4, #8]
9000389a:	0689      	lsls	r1, r1, #26
9000389c:	d502      	bpl.n	900038a4 <HAL_HCD_IRQHandler+0x284>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
9000389e:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
900038a0:	60a1      	str	r1, [r4, #8]
900038a2:	e7d7      	b.n	90003854 <HAL_HCD_IRQHandler+0x234>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
900038a4:	68a1      	ldr	r1, [r4, #8]
900038a6:	070a      	lsls	r2, r1, #28
900038a8:	d50e      	bpl.n	900038c8 <HAL_HCD_IRQHandler+0x2a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900038aa:	68e1      	ldr	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
900038ac:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900038b0:	f041 0102 	orr.w	r1, r1, #2
900038b4:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
900038b6:	fb07 5106 	mla	r1, r7, r6, r5
900038ba:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
900038be:	2110      	movs	r1, #16
900038c0:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
900038c2:	2108      	movs	r1, #8
900038c4:	60a1      	str	r1, [r4, #8]
900038c6:	e7e3      	b.n	90003890 <HAL_HCD_IRQHandler+0x270>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
900038c8:	68a1      	ldr	r1, [r4, #8]
900038ca:	054b      	lsls	r3, r1, #21
900038cc:	d5c2      	bpl.n	90003854 <HAL_HCD_IRQHandler+0x234>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
900038ce:	68e1      	ldr	r1, [r4, #12]
900038d0:	f041 0102 	orr.w	r1, r1, #2
900038d4:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
900038d6:	4631      	mov	r1, r6
900038d8:	f002 fa4d 	bl	90005d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
900038dc:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
900038de:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
900038e0:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
900038e2:	fb07 5106 	mla	r1, r7, r6, r5
900038e6:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
900038ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
900038ee:	e7d7      	b.n	900038a0 <HAL_HCD_IRQHandler+0x280>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
900038f0:	68a1      	ldr	r1, [r4, #8]
900038f2:	07c9      	lsls	r1, r1, #31
900038f4:	d54b      	bpl.n	9000398e <HAL_HCD_IRQHandler+0x36e>
    if (hhcd->Init.dma_enable != 0U)
900038f6:	6929      	ldr	r1, [r5, #16]
900038f8:	b149      	cbz	r1, 9000390e <HAL_HCD_IRQHandler+0x2ee>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900038fa:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
900038fc:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
90003900:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
90003904:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
90003908:	1a09      	subs	r1, r1, r0
9000390a:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
9000390e:	fb07 5106 	mla	r1, r7, r6, r5
90003912:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
90003914:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
90003916:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
9000391a:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
9000391c:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
9000391e:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
90003922:	f012 0ffd 	tst.w	r2, #253	; 0xfd
90003926:	d117      	bne.n	90003958 <HAL_HCD_IRQHandler+0x338>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003928:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
9000392a:	4631      	mov	r1, r6
9000392c:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
9000392e:	f043 0302 	orr.w	r3, r3, #2
90003932:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003934:	f002 fa1f 	bl	90005d76 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
90003938:	2310      	movs	r3, #16
9000393a:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
9000393c:	fb07 5606 	mla	r6, r7, r6, r5
90003940:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
90003944:	f083 0301 	eor.w	r3, r3, #1
90003948:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
9000394c:	9b00      	ldr	r3, [sp, #0]
9000394e:	f10a 0a01 	add.w	sl, sl, #1
90003952:	3320      	adds	r3, #32
90003954:	9300      	str	r3, [sp, #0]
90003956:	e709      	b.n	9000376c <HAL_HCD_IRQHandler+0x14c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
90003958:	2a03      	cmp	r2, #3
9000395a:	d10d      	bne.n	90003978 <HAL_HCD_IRQHandler+0x358>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
9000395c:	f858 000b 	ldr.w	r0, [r8, fp]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
90003960:	461a      	mov	r2, r3
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
90003962:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
90003966:	f848 000b 	str.w	r0, [r8, fp]
      hhcd->hc[ch_num].urb_state = URB_DONE;
9000396a:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
9000396e:	4631      	mov	r1, r6
90003970:	4628      	mov	r0, r5
90003972:	f006 febb 	bl	9000a6ec <HAL_HCD_HC_NotifyURBChange_Callback>
90003976:	e7e1      	b.n	9000393c <HAL_HCD_IRQHandler+0x31c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
90003978:	2a01      	cmp	r2, #1
9000397a:	d1df      	bne.n	9000393c <HAL_HCD_IRQHandler+0x31c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
9000397c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
90003980:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
90003984:	f083 0301 	eor.w	r3, r3, #1
90003988:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
9000398c:	e7ef      	b.n	9000396e <HAL_HCD_IRQHandler+0x34e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
9000398e:	68a1      	ldr	r1, [r4, #8]
90003990:	078a      	lsls	r2, r1, #30
90003992:	d53f      	bpl.n	90003a14 <HAL_HCD_IRQHandler+0x3f4>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
90003994:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003996:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
9000399a:	f021 0102 	bic.w	r1, r1, #2
9000399e:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
900039a0:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
900039a4:	2901      	cmp	r1, #1
900039a6:	d10c      	bne.n	900039c2 <HAL_HCD_IRQHandler+0x3a2>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
900039a8:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
900039ac:	fb07 5306 	mla	r3, r7, r6, r5
900039b0:	4631      	mov	r1, r6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
900039b2:	f8c4 9008 	str.w	r9, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
900039b6:	4628      	mov	r0, r5
900039b8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
900039bc:	f006 fe96 	bl	9000a6ec <HAL_HCD_HC_NotifyURBChange_Callback>
900039c0:	e7c4      	b.n	9000394c <HAL_HCD_IRQHandler+0x32c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
900039c2:	3903      	subs	r1, #3
900039c4:	2905      	cmp	r1, #5
900039c6:	d8f1      	bhi.n	900039ac <HAL_HCD_IRQHandler+0x38c>
900039c8:	a001      	add	r0, pc, #4	; (adr r0, 900039d0 <HAL_HCD_IRQHandler+0x3b0>)
900039ca:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
900039ce:	bf00      	nop
900039d0:	900039e9 	.word	0x900039e9
900039d4:	900039ad 	.word	0x900039ad
900039d8:	90003c33 	.word	0x90003c33
900039dc:	90003c3f 	.word	0x90003c3f
900039e0:	90003a03 	.word	0x90003a03
900039e4:	90003c3f 	.word	0x90003c3f
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
900039e8:	fb07 5106 	mla	r1, r7, r6, r5
900039ec:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
900039f0:	f858 100b 	ldr.w	r1, [r8, fp]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900039f4:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
900039f8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
900039fc:	f848 100b 	str.w	r1, [r8, fp]
90003a00:	e7d4      	b.n	900039ac <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].ErrCnt++;
90003a02:	fb07 5206 	mla	r2, r7, r6, r5
90003a06:	6d93      	ldr	r3, [r2, #88]	; 0x58
90003a08:	3301      	adds	r3, #1
90003a0a:	6593      	str	r3, [r2, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
90003a0c:	2304      	movs	r3, #4
90003a0e:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
90003a12:	e7cb      	b.n	900039ac <HAL_HCD_IRQHandler+0x38c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
90003a14:	68a1      	ldr	r1, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003a16:	6828      	ldr	r0, [r5, #0]
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
90003a18:	f011 0180 	ands.w	r1, r1, #128	; 0x80
90003a1c:	d010      	beq.n	90003a40 <HAL_HCD_IRQHandler+0x420>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003a1e:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
90003a20:	fb07 5206 	mla	r2, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003a24:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003a26:	f043 0302 	orr.w	r3, r3, #2
90003a2a:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
90003a2c:	6d93      	ldr	r3, [r2, #88]	; 0x58
90003a2e:	3301      	adds	r3, #1
90003a30:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
90003a32:	2306      	movs	r3, #6
90003a34:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003a38:	f002 f99d 	bl	90005d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
90003a3c:	2380      	movs	r3, #128	; 0x80
90003a3e:	e011      	b.n	90003a64 <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
90003a40:	68a3      	ldr	r3, [r4, #8]
90003a42:	06db      	lsls	r3, r3, #27
90003a44:	d582      	bpl.n	9000394c <HAL_HCD_IRQHandler+0x32c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
90003a46:	fb07 5206 	mla	r2, r7, r6, r5
90003a4a:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
90003a4e:	2b03      	cmp	r3, #3
90003a50:	d10a      	bne.n	90003a68 <HAL_HCD_IRQHandler+0x448>
      hhcd->hc[ch_num].ErrCnt = 0U;
90003a52:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003a54:	68e3      	ldr	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003a56:	4631      	mov	r1, r6
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003a58:	f043 0302 	orr.w	r3, r3, #2
90003a5c:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003a5e:	f002 f98a 	bl	90005d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
90003a62:	2310      	movs	r3, #16
90003a64:	60a3      	str	r3, [r4, #8]
90003a66:	e771      	b.n	9000394c <HAL_HCD_IRQHandler+0x32c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
90003a68:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
90003a6c:	d1f9      	bne.n	90003a62 <HAL_HCD_IRQHandler+0x442>
      hhcd->hc[ch_num].ErrCnt = 0U;
90003a6e:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
90003a70:	692b      	ldr	r3, [r5, #16]
90003a72:	2b00      	cmp	r3, #0
90003a74:	d1f5      	bne.n	90003a62 <HAL_HCD_IRQHandler+0x442>
        hhcd->hc[ch_num].state = HC_NAK;
90003a76:	2303      	movs	r3, #3
90003a78:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
90003a7c:	e7ea      	b.n	90003a54 <HAL_HCD_IRQHandler+0x434>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
90003a7e:	f011 0c04 	ands.w	ip, r1, #4
90003a82:	d009      	beq.n	90003a98 <HAL_HCD_IRQHandler+0x478>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
90003a84:	2304      	movs	r3, #4
90003a86:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003a88:	68e3      	ldr	r3, [r4, #12]
90003a8a:	f043 0302 	orr.w	r3, r3, #2
90003a8e:	60e3      	str	r3, [r4, #12]
90003a90:	e75c      	b.n	9000394c <HAL_HCD_IRQHandler+0x32c>
90003a92:	bf00      	nop
90003a94:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
90003a98:	68a1      	ldr	r1, [r4, #8]
90003a9a:	f011 0120 	ands.w	r1, r1, #32
90003a9e:	d014      	beq.n	90003aca <HAL_HCD_IRQHandler+0x4aa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
90003aa0:	2320      	movs	r3, #32
90003aa2:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
90003aa4:	fb07 5306 	mla	r3, r7, r6, r5
90003aa8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
90003aac:	2a01      	cmp	r2, #1
90003aae:	f47f af4d 	bne.w	9000394c <HAL_HCD_IRQHandler+0x32c>
      hhcd->hc[ch_num].do_ping = 0U;
90003ab2:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003ab6:	4631      	mov	r1, r6
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
90003ab8:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003abc:	68e3      	ldr	r3, [r4, #12]
90003abe:	f043 0302 	orr.w	r3, r3, #2
90003ac2:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003ac4:	f002 f957 	bl	90005d76 <USB_HC_Halt>
90003ac8:	e740      	b.n	9000394c <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
90003aca:	68a3      	ldr	r3, [r4, #8]
90003acc:	065a      	lsls	r2, r3, #25
90003ace:	d511      	bpl.n	90003af4 <HAL_HCD_IRQHandler+0x4d4>
    hhcd->hc[ch_num].state = HC_NYET;
90003ad0:	fb07 5306 	mla	r3, r7, r6, r5
90003ad4:	2204      	movs	r2, #4
90003ad6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
90003ada:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
90003adc:	6599      	str	r1, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003ade:	4631      	mov	r1, r6
    hhcd->hc[ch_num].do_ping = 1U;
90003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003ae4:	68e3      	ldr	r3, [r4, #12]
90003ae6:	f043 0302 	orr.w	r3, r3, #2
90003aea:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003aec:	f002 f943 	bl	90005d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
90003af0:	2340      	movs	r3, #64	; 0x40
90003af2:	e7b7      	b.n	90003a64 <HAL_HCD_IRQHandler+0x444>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
90003af4:	68a1      	ldr	r1, [r4, #8]
90003af6:	f411 7100 	ands.w	r1, r1, #512	; 0x200
90003afa:	d005      	beq.n	90003b08 <HAL_HCD_IRQHandler+0x4e8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003afc:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003afe:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b00:	f043 0302 	orr.w	r3, r3, #2
90003b04:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b06:	e6ae      	b.n	90003866 <HAL_HCD_IRQHandler+0x246>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
90003b08:	68a3      	ldr	r3, [r4, #8]
90003b0a:	07db      	lsls	r3, r3, #31
90003b0c:	d50f      	bpl.n	90003b2e <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b0e:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
90003b10:	fb07 5806 	mla	r8, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b14:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
90003b18:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b1c:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b1e:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b20:	f002 f929 	bl	90005d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
90003b24:	2201      	movs	r2, #1
90003b26:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
90003b28:	f888 205d 	strb.w	r2, [r8, #93]	; 0x5d
90003b2c:	e70e      	b.n	9000394c <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
90003b2e:	68a1      	ldr	r1, [r4, #8]
90003b30:	0709      	lsls	r1, r1, #28
90003b32:	d50e      	bpl.n	90003b52 <HAL_HCD_IRQHandler+0x532>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
90003b34:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b36:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_STALL;
90003b38:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
90003b3c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b3e:	68e3      	ldr	r3, [r4, #12]
90003b40:	f043 0302 	orr.w	r3, r3, #2
90003b44:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b46:	f002 f916 	bl	90005d76 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
90003b4a:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
90003b4c:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
90003b50:	e6fc      	b.n	9000394c <HAL_HCD_IRQHandler+0x32c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
90003b52:	68a1      	ldr	r1, [r4, #8]
90003b54:	06ca      	lsls	r2, r1, #27
90003b56:	d514      	bpl.n	90003b82 <HAL_HCD_IRQHandler+0x562>
    hhcd->hc[ch_num].ErrCnt = 0U;
90003b58:	fb07 5306 	mla	r3, r7, r6, r5
90003b5c:	2200      	movs	r2, #0
90003b5e:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
90003b60:	2203      	movs	r2, #3
90003b62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
90003b66:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
90003b6a:	2a00      	cmp	r2, #0
90003b6c:	f47f af72 	bne.w	90003a54 <HAL_HCD_IRQHandler+0x434>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
90003b70:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
90003b74:	2a00      	cmp	r2, #0
90003b76:	f47f af6d 	bne.w	90003a54 <HAL_HCD_IRQHandler+0x434>
        hhcd->hc[ch_num].do_ping = 1U;
90003b7a:	2201      	movs	r2, #1
90003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b80:	e768      	b.n	90003a54 <HAL_HCD_IRQHandler+0x434>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
90003b82:	68a1      	ldr	r1, [r4, #8]
90003b84:	060b      	lsls	r3, r1, #24
90003b86:	d50c      	bpl.n	90003ba2 <HAL_HCD_IRQHandler+0x582>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b88:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b8a:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
90003b8c:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003b90:	f043 0302 	orr.w	r3, r3, #2
90003b94:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003b96:	f002 f8ee 	bl	90005d76 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
90003b9a:	2306      	movs	r3, #6
90003b9c:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
90003ba0:	e74c      	b.n	90003a3c <HAL_HCD_IRQHandler+0x41c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
90003ba2:	68a1      	ldr	r1, [r4, #8]
90003ba4:	0549      	lsls	r1, r1, #21
90003ba6:	d50f      	bpl.n	90003bc8 <HAL_HCD_IRQHandler+0x5a8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003ba8:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003baa:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_DATATGLERR;
90003bac:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
90003bb0:	f043 0302 	orr.w	r3, r3, #2
90003bb4:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
90003bb6:	f002 f8de 	bl	90005d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
90003bba:	2310      	movs	r3, #16
90003bbc:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
90003bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
90003bc2:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
90003bc4:	2308      	movs	r3, #8
90003bc6:	e7c1      	b.n	90003b4c <HAL_HCD_IRQHandler+0x52c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
90003bc8:	68a1      	ldr	r1, [r4, #8]
90003bca:	078a      	lsls	r2, r1, #30
90003bcc:	f57f aebe 	bpl.w	9000394c <HAL_HCD_IRQHandler+0x32c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
90003bd0:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003bd2:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
90003bd6:	f021 0102 	bic.w	r1, r1, #2
90003bda:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
90003bdc:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
90003be0:	2901      	cmp	r1, #1
90003be2:	d10e      	bne.n	90003c02 <HAL_HCD_IRQHandler+0x5e2>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
90003be4:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
90003be8:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
90003bec:	3b02      	subs	r3, #2
90003bee:	2b01      	cmp	r3, #1
90003bf0:	f63f aedc 	bhi.w	900039ac <HAL_HCD_IRQHandler+0x38c>
        hhcd->hc[ch_num].toggle_out ^= 1U;
90003bf4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
90003bf8:	f083 0301 	eor.w	r3, r3, #1
90003bfc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
90003c00:	e6d4      	b.n	900039ac <HAL_HCD_IRQHandler+0x38c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
90003c02:	3903      	subs	r1, #3
90003c04:	2905      	cmp	r1, #5
90003c06:	f63f aed1 	bhi.w	900039ac <HAL_HCD_IRQHandler+0x38c>
90003c0a:	a001      	add	r0, pc, #4	; (adr r0, 90003c10 <HAL_HCD_IRQHandler+0x5f0>)
90003c0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
90003c10:	90003c29 	.word	0x90003c29
90003c14:	90003c29 	.word	0x90003c29
90003c18:	90003c33 	.word	0x90003c33
90003c1c:	90003c3f 	.word	0x90003c3f
90003c20:	900039ad 	.word	0x900039ad
90003c24:	90003c3f 	.word	0x90003c3f
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
90003c28:	fb07 5306 	mla	r3, r7, r6, r5
90003c2c:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
90003c30:	e6bc      	b.n	900039ac <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
90003c32:	fb07 5306 	mla	r3, r7, r6, r5
90003c36:	2205      	movs	r2, #5
90003c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
90003c3c:	e6b6      	b.n	900039ac <HAL_HCD_IRQHandler+0x38c>
      hhcd->hc[ch_num].ErrCnt++;
90003c3e:	fb07 5006 	mla	r0, r7, r6, r5
90003c42:	6d81      	ldr	r1, [r0, #88]	; 0x58
90003c44:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
90003c46:	2903      	cmp	r1, #3
        hhcd->hc[ch_num].ErrCnt = 0U;
90003c48:	bf8d      	iteet	hi
90003c4a:	2100      	movhi	r1, #0
      hhcd->hc[ch_num].ErrCnt++;
90003c4c:	6581      	strls	r1, [r0, #88]	; 0x58
90003c4e:	2102      	movls	r1, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
90003c50:	6581      	strhi	r1, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
90003c52:	bf88      	it	hi
90003c54:	2104      	movhi	r1, #4
        hhcd->hc[ch_num].urb_state = URB_ERROR;
90003c56:	fb07 5006 	mla	r0, r7, r6, r5
90003c5a:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
90003c5e:	e6c7      	b.n	900039f0 <HAL_HCD_IRQHandler+0x3d0>

90003c60 <HAL_HCD_Start>:
{
90003c60:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
90003c62:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
90003c66:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
90003c68:	2b01      	cmp	r3, #1
90003c6a:	d00d      	beq.n	90003c88 <HAL_HCD_Start+0x28>
90003c6c:	2501      	movs	r5, #1
90003c6e:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
90003c72:	6800      	ldr	r0, [r0, #0]
90003c74:	f001 fec5 	bl	90005a02 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
90003c78:	4629      	mov	r1, r5
90003c7a:	6820      	ldr	r0, [r4, #0]
90003c7c:	f001 ff6a 	bl	90005b54 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
90003c80:	2000      	movs	r0, #0
90003c82:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
90003c86:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
90003c88:	2002      	movs	r0, #2
90003c8a:	e7fc      	b.n	90003c86 <HAL_HCD_Start+0x26>

90003c8c <HAL_HCD_Stop>:
{
90003c8c:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
90003c8e:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
90003c92:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
90003c94:	2b01      	cmp	r3, #1
90003c96:	d009      	beq.n	90003cac <HAL_HCD_Stop+0x20>
90003c98:	2301      	movs	r3, #1
90003c9a:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
90003c9e:	6800      	ldr	r0, [r0, #0]
90003ca0:	f002 f97c 	bl	90005f9c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
90003ca4:	2000      	movs	r0, #0
90003ca6:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
90003caa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
90003cac:	2002      	movs	r0, #2
90003cae:	e7fc      	b.n	90003caa <HAL_HCD_Stop+0x1e>

90003cb0 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
90003cb0:	6800      	ldr	r0, [r0, #0]
90003cb2:	f001 bf31 	b.w	90005b18 <USB_ResetPort>

90003cb6 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
90003cb6:	2328      	movs	r3, #40	; 0x28
90003cb8:	fb03 0101 	mla	r1, r3, r1, r0
}
90003cbc:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
90003cc0:	4770      	bx	lr

90003cc2 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
90003cc2:	2328      	movs	r3, #40	; 0x28
90003cc4:	fb03 0101 	mla	r1, r3, r1, r0
}
90003cc8:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
90003cca:	4770      	bx	lr

90003ccc <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
90003ccc:	6800      	ldr	r0, [r0, #0]
90003cce:	f001 bfd4 	b.w	90005c7a <USB_GetCurrentFrame>

90003cd2 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
90003cd2:	6800      	ldr	r0, [r0, #0]
90003cd4:	f001 bfc6 	b.w	90005c64 <USB_GetHostSpeed>

90003cd8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90003cd8:	6803      	ldr	r3, [r0, #0]
90003cda:	699a      	ldr	r2, [r3, #24]
90003cdc:	0791      	lsls	r1, r2, #30
90003cde:	d501      	bpl.n	90003ce4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
90003ce0:	2200      	movs	r2, #0
90003ce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90003ce4:	699a      	ldr	r2, [r3, #24]
90003ce6:	07d2      	lsls	r2, r2, #31
90003ce8:	d403      	bmi.n	90003cf2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90003cea:	699a      	ldr	r2, [r3, #24]
90003cec:	f042 0201 	orr.w	r2, r2, #1
90003cf0:	619a      	str	r2, [r3, #24]
  }
}
90003cf2:	4770      	bx	lr

90003cf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
90003cf4:	b530      	push	{r4, r5, lr}
90003cf6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
90003cf8:	f3c1 0109 	ubfx	r1, r1, #0, #10
90003cfc:	6804      	ldr	r4, [r0, #0]
90003cfe:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
90003d02:	6860      	ldr	r0, [r4, #4]
90003d04:	431a      	orrs	r2, r3
90003d06:	4b04      	ldr	r3, [pc, #16]	; (90003d18 <I2C_TransferConfig+0x24>)
90003d08:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
90003d0c:	430a      	orrs	r2, r1
90003d0e:	ea20 0003 	bic.w	r0, r0, r3
90003d12:	4302      	orrs	r2, r0
90003d14:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
90003d16:	bd30      	pop	{r4, r5, pc}
90003d18:	03ff63ff 	.word	0x03ff63ff

90003d1c <I2C_IsAcknowledgeFailed>:
{
90003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
90003d1e:	6803      	ldr	r3, [r0, #0]
{
90003d20:	4604      	mov	r4, r0
90003d22:	460e      	mov	r6, r1
90003d24:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
90003d26:	6998      	ldr	r0, [r3, #24]
90003d28:	f010 0010 	ands.w	r0, r0, #16
90003d2c:	d116      	bne.n	90003d5c <I2C_IsAcknowledgeFailed+0x40>
}
90003d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
90003d30:	1c72      	adds	r2, r6, #1
90003d32:	d014      	beq.n	90003d5e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003d34:	f7fe feca 	bl	90002acc <HAL_GetTick>
90003d38:	1bc0      	subs	r0, r0, r7
90003d3a:	4286      	cmp	r6, r0
90003d3c:	d300      	bcc.n	90003d40 <I2C_IsAcknowledgeFailed+0x24>
90003d3e:	b96e      	cbnz	r6, 90003d5c <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003d40:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003d42:	f043 0320 	orr.w	r3, r3, #32
90003d46:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90003d48:	2320      	movs	r3, #32
90003d4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90003d4e:	2300      	movs	r3, #0
90003d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
90003d54:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
90003d58:	2001      	movs	r0, #1
90003d5a:	e7e8      	b.n	90003d2e <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90003d5c:	6825      	ldr	r5, [r4, #0]
90003d5e:	69ab      	ldr	r3, [r5, #24]
90003d60:	069b      	lsls	r3, r3, #26
90003d62:	d5e5      	bpl.n	90003d30 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90003d64:	2310      	movs	r3, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003d66:	2620      	movs	r6, #32
    I2C_Flush_TXDR(hi2c);
90003d68:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90003d6a:	61eb      	str	r3, [r5, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003d6c:	61ee      	str	r6, [r5, #28]
    I2C_Flush_TXDR(hi2c);
90003d6e:	f7ff ffb3 	bl	90003cd8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
90003d72:	686b      	ldr	r3, [r5, #4]
90003d74:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
90003d78:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
90003d7c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
90003d80:	f023 0301 	bic.w	r3, r3, #1
90003d84:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
90003d86:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003d88:	f043 0304 	orr.w	r3, r3, #4
90003d8c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
90003d8e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
90003d90:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90003d94:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
90003d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
90003d9c:	e7dc      	b.n	90003d58 <I2C_IsAcknowledgeFailed+0x3c>

90003d9e <I2C_WaitOnTXISFlagUntilTimeout>:
{
90003d9e:	b570      	push	{r4, r5, r6, lr}
90003da0:	4604      	mov	r4, r0
90003da2:	460d      	mov	r5, r1
90003da4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90003da6:	6823      	ldr	r3, [r4, #0]
90003da8:	699b      	ldr	r3, [r3, #24]
90003daa:	079b      	lsls	r3, r3, #30
90003dac:	d501      	bpl.n	90003db2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
90003dae:	2000      	movs	r0, #0
}
90003db0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
90003db2:	4632      	mov	r2, r6
90003db4:	4629      	mov	r1, r5
90003db6:	4620      	mov	r0, r4
90003db8:	f7ff ffb0 	bl	90003d1c <I2C_IsAcknowledgeFailed>
90003dbc:	b9a0      	cbnz	r0, 90003de8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
90003dbe:	1c6a      	adds	r2, r5, #1
90003dc0:	d0f1      	beq.n	90003da6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003dc2:	f7fe fe83 	bl	90002acc <HAL_GetTick>
90003dc6:	1b80      	subs	r0, r0, r6
90003dc8:	42a8      	cmp	r0, r5
90003dca:	d801      	bhi.n	90003dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
90003dcc:	2d00      	cmp	r5, #0
90003dce:	d1ea      	bne.n	90003da6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003dd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003dd2:	f043 0320 	orr.w	r3, r3, #32
90003dd6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003dd8:	2320      	movs	r3, #32
90003dda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90003dde:	2300      	movs	r3, #0
90003de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
90003de4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90003de8:	2001      	movs	r0, #1
90003dea:	e7e1      	b.n	90003db0 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

90003dec <I2C_WaitOnFlagUntilTimeout>:
{
90003dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90003df0:	9f06      	ldr	r7, [sp, #24]
90003df2:	4604      	mov	r4, r0
90003df4:	4688      	mov	r8, r1
90003df6:	4616      	mov	r6, r2
90003df8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90003dfa:	6822      	ldr	r2, [r4, #0]
90003dfc:	6993      	ldr	r3, [r2, #24]
90003dfe:	ea38 0303 	bics.w	r3, r8, r3
90003e02:	bf0c      	ite	eq
90003e04:	2301      	moveq	r3, #1
90003e06:	2300      	movne	r3, #0
90003e08:	42b3      	cmp	r3, r6
90003e0a:	d001      	beq.n	90003e10 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
90003e0c:	2000      	movs	r0, #0
90003e0e:	e015      	b.n	90003e3c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
90003e10:	1c6b      	adds	r3, r5, #1
90003e12:	d0f3      	beq.n	90003dfc <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003e14:	f7fe fe5a 	bl	90002acc <HAL_GetTick>
90003e18:	1bc0      	subs	r0, r0, r7
90003e1a:	42a8      	cmp	r0, r5
90003e1c:	d801      	bhi.n	90003e22 <I2C_WaitOnFlagUntilTimeout+0x36>
90003e1e:	2d00      	cmp	r5, #0
90003e20:	d1eb      	bne.n	90003dfa <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003e22:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
90003e24:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003e26:	f043 0320 	orr.w	r3, r3, #32
90003e2a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003e2c:	2320      	movs	r3, #32
90003e2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90003e32:	2300      	movs	r3, #0
90003e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
90003e38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
90003e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90003e40 <I2C_RequestMemoryWrite>:
{
90003e40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90003e44:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90003e46:	4b18      	ldr	r3, [pc, #96]	; (90003ea8 <I2C_RequestMemoryWrite+0x68>)
{
90003e48:	4605      	mov	r5, r0
90003e4a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90003e4c:	9300      	str	r3, [sp, #0]
90003e4e:	b2f2      	uxtb	r2, r6
90003e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
90003e54:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90003e58:	f7ff ff4c 	bl	90003cf4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003e5c:	4628      	mov	r0, r5
90003e5e:	4642      	mov	r2, r8
90003e60:	4639      	mov	r1, r7
90003e62:	f7ff ff9c 	bl	90003d9e <I2C_WaitOnTXISFlagUntilTimeout>
90003e66:	b118      	cbz	r0, 90003e70 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
90003e68:	2001      	movs	r0, #1
}
90003e6a:	b002      	add	sp, #8
90003e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003e70:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003e72:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003e74:	d10d      	bne.n	90003e92 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003e76:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90003e78:	2200      	movs	r2, #0
90003e7a:	2180      	movs	r1, #128	; 0x80
90003e7c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003e7e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90003e80:	463b      	mov	r3, r7
90003e82:	f8cd 8000 	str.w	r8, [sp]
90003e86:	f7ff ffb1 	bl	90003dec <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
90003e8a:	3800      	subs	r0, #0
90003e8c:	bf18      	it	ne
90003e8e:	2001      	movne	r0, #1
90003e90:	e7eb      	b.n	90003e6a <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003e92:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003e94:	4639      	mov	r1, r7
90003e96:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003e98:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003e9a:	4642      	mov	r2, r8
90003e9c:	f7ff ff7f 	bl	90003d9e <I2C_WaitOnTXISFlagUntilTimeout>
90003ea0:	2800      	cmp	r0, #0
90003ea2:	d1e1      	bne.n	90003e68 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003ea4:	682b      	ldr	r3, [r5, #0]
90003ea6:	e7e6      	b.n	90003e76 <I2C_RequestMemoryWrite+0x36>
90003ea8:	80002000 	.word	0x80002000

90003eac <I2C_RequestMemoryRead>:
{
90003eac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90003eb0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003eb2:	4b18      	ldr	r3, [pc, #96]	; (90003f14 <I2C_RequestMemoryRead+0x68>)
{
90003eb4:	4605      	mov	r5, r0
90003eb6:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003eb8:	9300      	str	r3, [sp, #0]
90003eba:	b2f2      	uxtb	r2, r6
90003ebc:	2300      	movs	r3, #0
{
90003ebe:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90003ec2:	f7ff ff17 	bl	90003cf4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003ec6:	4628      	mov	r0, r5
90003ec8:	4642      	mov	r2, r8
90003eca:	4639      	mov	r1, r7
90003ecc:	f7ff ff67 	bl	90003d9e <I2C_WaitOnTXISFlagUntilTimeout>
90003ed0:	b118      	cbz	r0, 90003eda <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
90003ed2:	2001      	movs	r0, #1
}
90003ed4:	b002      	add	sp, #8
90003ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003eda:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003edc:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90003ede:	d10d      	bne.n	90003efc <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003ee0:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90003ee2:	2200      	movs	r2, #0
90003ee4:	2140      	movs	r1, #64	; 0x40
90003ee6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003ee8:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90003eea:	463b      	mov	r3, r7
90003eec:	f8cd 8000 	str.w	r8, [sp]
90003ef0:	f7ff ff7c 	bl	90003dec <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
90003ef4:	3800      	subs	r0, #0
90003ef6:	bf18      	it	ne
90003ef8:	2001      	movne	r0, #1
90003efa:	e7eb      	b.n	90003ed4 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003efc:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003efe:	4639      	mov	r1, r7
90003f00:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90003f02:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90003f04:	4642      	mov	r2, r8
90003f06:	f7ff ff4a 	bl	90003d9e <I2C_WaitOnTXISFlagUntilTimeout>
90003f0a:	2800      	cmp	r0, #0
90003f0c:	d1e1      	bne.n	90003ed2 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90003f0e:	682b      	ldr	r3, [r5, #0]
90003f10:	e7e6      	b.n	90003ee0 <I2C_RequestMemoryRead+0x34>
90003f12:	bf00      	nop
90003f14:	80002000 	.word	0x80002000

90003f18 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
90003f18:	b570      	push	{r4, r5, r6, lr}
90003f1a:	4604      	mov	r4, r0
90003f1c:	460d      	mov	r5, r1
90003f1e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90003f20:	6823      	ldr	r3, [r4, #0]
90003f22:	699b      	ldr	r3, [r3, #24]
90003f24:	069b      	lsls	r3, r3, #26
90003f26:	d501      	bpl.n	90003f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
90003f28:	2000      	movs	r0, #0
}
90003f2a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
90003f2c:	4632      	mov	r2, r6
90003f2e:	4629      	mov	r1, r5
90003f30:	4620      	mov	r0, r4
90003f32:	f7ff fef3 	bl	90003d1c <I2C_IsAcknowledgeFailed>
90003f36:	b990      	cbnz	r0, 90003f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003f38:	f7fe fdc8 	bl	90002acc <HAL_GetTick>
90003f3c:	1b80      	subs	r0, r0, r6
90003f3e:	42a8      	cmp	r0, r5
90003f40:	d801      	bhi.n	90003f46 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
90003f42:	2d00      	cmp	r5, #0
90003f44:	d1ec      	bne.n	90003f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003f46:	6c63      	ldr	r3, [r4, #68]	; 0x44
90003f48:	f043 0320 	orr.w	r3, r3, #32
90003f4c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90003f4e:	2320      	movs	r3, #32
90003f50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90003f54:	2300      	movs	r3, #0
90003f56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
90003f5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90003f5e:	2001      	movs	r0, #1
90003f60:	e7e3      	b.n	90003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

90003f62 <HAL_I2C_MspInit>:
}
90003f62:	4770      	bx	lr

90003f64 <HAL_I2C_Init>:
{
90003f64:	b510      	push	{r4, lr}
  if (hi2c == NULL)
90003f66:	4604      	mov	r4, r0
90003f68:	2800      	cmp	r0, #0
90003f6a:	d04a      	beq.n	90004002 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
90003f6c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90003f70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90003f74:	b91b      	cbnz	r3, 90003f7e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
90003f76:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
90003f7a:	f7ff fff2 	bl	90003f62 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
90003f7e:	2324      	movs	r3, #36	; 0x24
90003f80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90003f84:	6823      	ldr	r3, [r4, #0]
90003f86:	681a      	ldr	r2, [r3, #0]
90003f88:	f022 0201 	bic.w	r2, r2, #1
90003f8c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90003f8e:	6862      	ldr	r2, [r4, #4]
90003f90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
90003f94:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90003f96:	689a      	ldr	r2, [r3, #8]
90003f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90003f9c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90003f9e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90003fa2:	2901      	cmp	r1, #1
90003fa4:	d124      	bne.n	90003ff0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90003fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90003faa:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90003fac:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003fae:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90003fb0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
90003fb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90003fb8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90003fba:	68da      	ldr	r2, [r3, #12]
90003fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90003fc0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
90003fc2:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
90003fc6:	430a      	orrs	r2, r1
90003fc8:	69a1      	ldr	r1, [r4, #24]
90003fca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90003fce:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90003fd0:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
90003fd4:	430a      	orrs	r2, r1
90003fd6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
90003fd8:	681a      	ldr	r2, [r3, #0]
90003fda:	f042 0201 	orr.w	r2, r2, #1
90003fde:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
90003fe0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003fe2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90003fe4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90003fe8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90003fea:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
90003fee:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90003ff0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90003ff4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90003ff6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90003ff8:	d1d8      	bne.n	90003fac <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
90003ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
90003ffe:	605a      	str	r2, [r3, #4]
90004000:	e7d4      	b.n	90003fac <HAL_I2C_Init+0x48>
    return HAL_ERROR;
90004002:	2001      	movs	r0, #1
90004004:	e7f3      	b.n	90003fee <HAL_I2C_Init+0x8a>

90004006 <HAL_I2C_MspDeInit>:
90004006:	4770      	bx	lr

90004008 <HAL_I2C_DeInit>:
{
90004008:	b510      	push	{r4, lr}
  if (hi2c == NULL)
9000400a:	4604      	mov	r4, r0
9000400c:	b198      	cbz	r0, 90004036 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
9000400e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90004010:	2324      	movs	r3, #36	; 0x24
90004012:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90004016:	6813      	ldr	r3, [r2, #0]
90004018:	f023 0301 	bic.w	r3, r3, #1
9000401c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
9000401e:	f7ff fff2 	bl	90004006 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90004022:	2000      	movs	r0, #0
90004024:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
90004026:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
9000402a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000402e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90004030:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
90004034:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
90004036:	2001      	movs	r0, #1
90004038:	e7fc      	b.n	90004034 <HAL_I2C_DeInit+0x2c>

9000403a <HAL_I2C_Mem_Write>:
{
9000403a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000403e:	b085      	sub	sp, #20
90004040:	469b      	mov	fp, r3
90004042:	4604      	mov	r4, r0
90004044:	460f      	mov	r7, r1
90004046:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
9000404a:	4692      	mov	sl, r2
9000404c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
90004050:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
90004052:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90004056:	2b20      	cmp	r3, #32
90004058:	f040 80a3 	bne.w	900041a2 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
9000405c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9000405e:	b10b      	cbz	r3, 90004064 <HAL_I2C_Mem_Write+0x2a>
90004060:	9b03      	ldr	r3, [sp, #12]
90004062:	b933      	cbnz	r3, 90004072 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90004064:	f44f 7300 	mov.w	r3, #512	; 0x200
90004068:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
9000406a:	2001      	movs	r0, #1
}
9000406c:	b005      	add	sp, #20
9000406e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
90004072:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90004076:	2b01      	cmp	r3, #1
90004078:	f000 8093 	beq.w	900041a2 <HAL_I2C_Mem_Write+0x168>
9000407c:	2501      	movs	r5, #1
9000407e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90004082:	f7fe fd23 	bl	90002acc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90004086:	2319      	movs	r3, #25
90004088:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
9000408a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
9000408c:	462a      	mov	r2, r5
9000408e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90004092:	4620      	mov	r0, r4
90004094:	f7ff feaa 	bl	90003dec <I2C_WaitOnFlagUntilTimeout>
90004098:	4680      	mov	r8, r0
9000409a:	2800      	cmp	r0, #0
9000409c:	d1e5      	bne.n	9000406a <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000409e:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
900040a0:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900040a2:	4652      	mov	r2, sl
900040a4:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
900040a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900040aa:	2340      	movs	r3, #64	; 0x40
900040ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
900040b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900040b2:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900040b4:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
900040b6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
900040b8:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900040ba:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
900040be:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900040c0:	465b      	mov	r3, fp
900040c2:	f7ff febd 	bl	90003e40 <I2C_RequestMemoryWrite>
900040c6:	b110      	cbz	r0, 900040ce <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
900040c8:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
900040cc:	e7cd      	b.n	9000406a <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900040ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900040d0:	b29b      	uxth	r3, r3
900040d2:	2bff      	cmp	r3, #255	; 0xff
900040d4:	d955      	bls.n	90004182 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
900040d6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
900040d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900040dc:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
900040de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900040e0:	4639      	mov	r1, r7
900040e2:	4620      	mov	r0, r4
900040e4:	f7ff fe06 	bl	90003cf4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900040e8:	4632      	mov	r2, r6
900040ea:	4649      	mov	r1, r9
900040ec:	4620      	mov	r0, r4
900040ee:	f7ff fe56 	bl	90003d9e <I2C_WaitOnTXISFlagUntilTimeout>
900040f2:	2800      	cmp	r0, #0
900040f4:	d1b9      	bne.n	9000406a <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
900040f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
900040f8:	6822      	ldr	r2, [r4, #0]
900040fa:	f813 1b01 	ldrb.w	r1, [r3], #1
900040fe:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
90004100:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
90004102:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90004104:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
90004106:	3b01      	subs	r3, #1
      hi2c->XferSize--;
90004108:	3a01      	subs	r2, #1
      hi2c->XferCount--;
9000410a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
9000410c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
9000410e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90004110:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90004112:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90004114:	b29b      	uxth	r3, r3
90004116:	b1ab      	cbz	r3, 90004144 <HAL_I2C_Mem_Write+0x10a>
90004118:	b9a2      	cbnz	r2, 90004144 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
9000411a:	464b      	mov	r3, r9
9000411c:	2180      	movs	r1, #128	; 0x80
9000411e:	4620      	mov	r0, r4
90004120:	9600      	str	r6, [sp, #0]
90004122:	f7ff fe63 	bl	90003dec <I2C_WaitOnFlagUntilTimeout>
90004126:	2800      	cmp	r0, #0
90004128:	d19f      	bne.n	9000406a <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000412a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000412c:	b29b      	uxth	r3, r3
9000412e:	2bff      	cmp	r3, #255	; 0xff
90004130:	d92f      	bls.n	90004192 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90004132:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
90004134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90004138:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000413a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
9000413c:	4639      	mov	r1, r7
9000413e:	4620      	mov	r0, r4
90004140:	f7ff fdd8 	bl	90003cf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
90004144:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90004146:	b29b      	uxth	r3, r3
90004148:	2b00      	cmp	r3, #0
9000414a:	d1cd      	bne.n	900040e8 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000414c:	4632      	mov	r2, r6
9000414e:	4649      	mov	r1, r9
90004150:	4620      	mov	r0, r4
90004152:	f7ff fee1 	bl	90003f18 <I2C_WaitOnSTOPFlagUntilTimeout>
90004156:	2800      	cmp	r0, #0
90004158:	d187      	bne.n	9000406a <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000415a:	6823      	ldr	r3, [r4, #0]
9000415c:	2120      	movs	r1, #32
9000415e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90004160:	685a      	ldr	r2, [r3, #4]
90004162:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
90004166:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
9000416a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
9000416e:	f022 0201 	bic.w	r2, r2, #1
90004172:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90004174:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90004178:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000417c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
90004180:	e774      	b.n	9000406c <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
90004182:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90004184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90004188:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
9000418a:	b292      	uxth	r2, r2
9000418c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
9000418e:	b2d2      	uxtb	r2, r2
90004190:	e7a6      	b.n	900040e0 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
90004192:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90004194:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90004198:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
9000419a:	b292      	uxth	r2, r2
9000419c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
9000419e:	b2d2      	uxtb	r2, r2
900041a0:	e7cc      	b.n	9000413c <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
900041a2:	2002      	movs	r0, #2
900041a4:	e762      	b.n	9000406c <HAL_I2C_Mem_Write+0x32>
	...

900041a8 <HAL_I2C_Mem_Read>:
{
900041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900041ac:	b085      	sub	sp, #20
900041ae:	469b      	mov	fp, r3
900041b0:	4604      	mov	r4, r0
900041b2:	460f      	mov	r7, r1
900041b4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
900041b8:	4692      	mov	sl, r2
900041ba:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
900041be:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
900041c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
900041c4:	2b20      	cmp	r3, #32
900041c6:	f040 80a7 	bne.w	90004318 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
900041ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900041cc:	b10b      	cbz	r3, 900041d2 <HAL_I2C_Mem_Read+0x2a>
900041ce:	9b03      	ldr	r3, [sp, #12]
900041d0:	b933      	cbnz	r3, 900041e0 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900041d2:	f44f 7300 	mov.w	r3, #512	; 0x200
900041d6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
900041d8:	2001      	movs	r0, #1
}
900041da:	b005      	add	sp, #20
900041dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
900041e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
900041e4:	2b01      	cmp	r3, #1
900041e6:	f000 8097 	beq.w	90004318 <HAL_I2C_Mem_Read+0x170>
900041ea:	2501      	movs	r5, #1
900041ec:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
900041f0:	f7fe fc6c 	bl	90002acc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
900041f4:	2319      	movs	r3, #25
900041f6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
900041f8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
900041fa:	462a      	mov	r2, r5
900041fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90004200:	4620      	mov	r0, r4
90004202:	f7ff fdf3 	bl	90003dec <I2C_WaitOnFlagUntilTimeout>
90004206:	4680      	mov	r8, r0
90004208:	2800      	cmp	r0, #0
9000420a:	d1e5      	bne.n	900041d8 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000420c:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
9000420e:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90004210:	4652      	mov	r2, sl
90004212:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90004214:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90004218:	2340      	movs	r3, #64	; 0x40
9000421a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
9000421e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90004220:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90004222:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
90004224:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
90004226:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90004228:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
9000422c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
9000422e:	465b      	mov	r3, fp
90004230:	f7ff fe3c 	bl	90003eac <I2C_RequestMemoryRead>
90004234:	b110      	cbz	r0, 9000423c <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
90004236:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
9000423a:	e7cd      	b.n	900041d8 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000423c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000423e:	b29b      	uxth	r3, r3
90004240:	2bff      	cmp	r3, #255	; 0xff
90004242:	4b36      	ldr	r3, [pc, #216]	; (9000431c <HAL_I2C_Mem_Read+0x174>)
90004244:	d958      	bls.n	900042f8 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
90004246:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
90004248:	9300      	str	r3, [sp, #0]
9000424a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000424e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90004250:	4639      	mov	r1, r7
90004252:	4620      	mov	r0, r4
90004254:	f7ff fd4e 	bl	90003cf4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90004258:	464b      	mov	r3, r9
9000425a:	2200      	movs	r2, #0
9000425c:	2104      	movs	r1, #4
9000425e:	4620      	mov	r0, r4
90004260:	9600      	str	r6, [sp, #0]
90004262:	f7ff fdc3 	bl	90003dec <I2C_WaitOnFlagUntilTimeout>
90004266:	2800      	cmp	r0, #0
90004268:	d1b6      	bne.n	900041d8 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000426a:	6823      	ldr	r3, [r4, #0]
9000426c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000426e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90004270:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
90004272:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
90004274:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
90004276:	3301      	adds	r3, #1
      hi2c->XferSize--;
90004278:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
9000427a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
9000427c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
9000427e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
90004280:	3b01      	subs	r3, #1
      hi2c->XferSize--;
90004282:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
90004284:	b29b      	uxth	r3, r3
90004286:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90004288:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000428a:	b29b      	uxth	r3, r3
9000428c:	b1ab      	cbz	r3, 900042ba <HAL_I2C_Mem_Read+0x112>
9000428e:	b9a2      	cbnz	r2, 900042ba <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90004290:	464b      	mov	r3, r9
90004292:	2180      	movs	r1, #128	; 0x80
90004294:	4620      	mov	r0, r4
90004296:	9600      	str	r6, [sp, #0]
90004298:	f7ff fda8 	bl	90003dec <I2C_WaitOnFlagUntilTimeout>
9000429c:	2800      	cmp	r0, #0
9000429e:	d19b      	bne.n	900041d8 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900042a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900042a2:	b29b      	uxth	r3, r3
900042a4:	2bff      	cmp	r3, #255	; 0xff
900042a6:	d92f      	bls.n	90004308 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
900042a8:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
900042aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900042ae:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
900042b0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900042b2:	4639      	mov	r1, r7
900042b4:	4620      	mov	r0, r4
900042b6:	f7ff fd1d 	bl	90003cf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
900042ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900042bc:	b29b      	uxth	r3, r3
900042be:	2b00      	cmp	r3, #0
900042c0:	d1ca      	bne.n	90004258 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900042c2:	4632      	mov	r2, r6
900042c4:	4649      	mov	r1, r9
900042c6:	4620      	mov	r0, r4
900042c8:	f7ff fe26 	bl	90003f18 <I2C_WaitOnSTOPFlagUntilTimeout>
900042cc:	2800      	cmp	r0, #0
900042ce:	d183      	bne.n	900041d8 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900042d0:	6823      	ldr	r3, [r4, #0]
900042d2:	2120      	movs	r1, #32
900042d4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
900042d6:	685a      	ldr	r2, [r3, #4]
900042d8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
900042dc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
900042e0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
900042e4:	f022 0201 	bic.w	r2, r2, #1
900042e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
900042ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
900042ee:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900042f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
900042f6:	e770      	b.n	900041da <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
900042f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
900042fa:	9300      	str	r3, [sp, #0]
900042fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
90004300:	b292      	uxth	r2, r2
90004302:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90004304:	b2d2      	uxtb	r2, r2
90004306:	e7a3      	b.n	90004250 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
90004308:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
9000430a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
9000430e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
90004310:	b292      	uxth	r2, r2
90004312:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90004314:	b2d2      	uxtb	r2, r2
90004316:	e7cc      	b.n	900042b2 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
90004318:	2002      	movs	r0, #2
9000431a:	e75e      	b.n	900041da <HAL_I2C_Mem_Read+0x32>
9000431c:	80002400 	.word	0x80002400

90004320 <HAL_I2C_GetState>:
  return hi2c->State;
90004320:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90004324:	4770      	bx	lr
	...

90004328 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90004328:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000432a:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000432c:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90004330:	3284      	adds	r2, #132	; 0x84
90004332:	1883      	adds	r3, r0, r2
{
90004334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90004338:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000433a:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000433e:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90004340:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90004344:	684c      	ldr	r4, [r1, #4]
90004346:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000434a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000434e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90004352:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90004354:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90004356:	68c5      	ldr	r5, [r0, #12]
90004358:	f3c5 450b 	ubfx	r5, r5, #16, #12
9000435c:	443d      	add	r5, r7
9000435e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
90004362:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90004364:	68c6      	ldr	r6, [r0, #12]
90004366:	68cd      	ldr	r5, [r1, #12]
90004368:	f3c6 060a 	ubfx	r6, r6, #0, #11
9000436c:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000436e:	689d      	ldr	r5, [r3, #8]
90004370:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
90004374:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90004376:	688d      	ldr	r5, [r1, #8]
90004378:	68c7      	ldr	r7, [r0, #12]
9000437a:	3501      	adds	r5, #1
9000437c:	f3c7 070a 	ubfx	r7, r7, #0, #11
90004380:	443d      	add	r5, r7
90004382:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90004386:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90004388:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000438a:	691d      	ldr	r5, [r3, #16]
9000438c:	f025 0507 	bic.w	r5, r5, #7
90004390:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90004392:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90004394:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90004396:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000439a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
9000439e:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
900043a2:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
900043a6:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
900043aa:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
900043ae:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
900043b2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
900043b4:	695d      	ldr	r5, [r3, #20]
900043b6:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
900043ba:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
900043bc:	694d      	ldr	r5, [r1, #20]
900043be:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900043c0:	69dd      	ldr	r5, [r3, #28]
900043c2:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
900043c6:	f025 0507 	bic.w	r5, r5, #7
900043ca:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900043cc:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
900043d0:	433d      	orrs	r5, r7
900043d2:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900043d4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900043d6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900043d8:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900043dc:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900043de:	b1fe      	cbz	r6, 90004420 <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900043e0:	3e01      	subs	r6, #1
900043e2:	2e06      	cmp	r6, #6
900043e4:	d81e      	bhi.n	90004424 <LTDC_SetConfig+0xfc>
900043e6:	4d10      	ldr	r5, [pc, #64]	; (90004428 <LTDC_SetConfig+0x100>)
900043e8:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900043ea:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900043ec:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900043f0:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900043f4:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900043f6:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900043f8:	3403      	adds	r4, #3
900043fa:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900043fc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900043fe:	436e      	muls	r6, r5
90004400:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
90004404:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90004406:	6b1c      	ldr	r4, [r3, #48]	; 0x30
90004408:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
9000440c:	f024 0407 	bic.w	r4, r4, #7
90004410:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90004412:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90004414:	5883      	ldr	r3, [r0, r2]
90004416:	f043 0301 	orr.w	r3, r3, #1
9000441a:	5083      	str	r3, [r0, r2]
}
9000441c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
90004420:	2504      	movs	r5, #4
90004422:	e7e2      	b.n	900043ea <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90004424:	2501      	movs	r5, #1
90004426:	e7e0      	b.n	900043ea <LTDC_SetConfig+0xc2>
90004428:	9001039c 	.word	0x9001039c

9000442c <HAL_LTDC_MspInit>:
}
9000442c:	4770      	bx	lr
	...

90004430 <HAL_LTDC_Init>:
{
90004430:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
90004432:	4604      	mov	r4, r0
90004434:	2800      	cmp	r0, #0
90004436:	d063      	beq.n	90004500 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90004438:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000443c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90004440:	b91b      	cbnz	r3, 9000444a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
90004442:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
90004446:	f7ff fff1 	bl	9000442c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000444a:	2302      	movs	r3, #2
9000444c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90004450:	6823      	ldr	r3, [r4, #0]
90004452:	699a      	ldr	r2, [r3, #24]
90004454:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90004458:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000445a:	6999      	ldr	r1, [r3, #24]
9000445c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
90004460:	4302      	orrs	r2, r0
90004462:	68e0      	ldr	r0, [r4, #12]
90004464:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90004466:	6920      	ldr	r0, [r4, #16]
90004468:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000446a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000446c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000446e:	4925      	ldr	r1, [pc, #148]	; (90004504 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90004470:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90004472:	689a      	ldr	r2, [r3, #8]
90004474:	400a      	ands	r2, r1
90004476:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90004478:	689a      	ldr	r2, [r3, #8]
9000447a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
9000447e:	69a0      	ldr	r0, [r4, #24]
90004480:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90004482:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90004484:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
90004486:	68da      	ldr	r2, [r3, #12]
90004488:	400a      	ands	r2, r1
9000448a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000448c:	68da      	ldr	r2, [r3, #12]
9000448e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90004492:	6a20      	ldr	r0, [r4, #32]
90004494:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90004496:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90004498:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000449a:	691a      	ldr	r2, [r3, #16]
9000449c:	400a      	ands	r2, r1
9000449e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
900044a0:	691a      	ldr	r2, [r3, #16]
900044a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
900044a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
900044a8:	4302      	orrs	r2, r0
900044aa:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900044ac:	695a      	ldr	r2, [r3, #20]
900044ae:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
900044b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900044b2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
900044b4:	695a      	ldr	r2, [r3, #20]
900044b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
900044ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
900044bc:	430a      	orrs	r2, r1
900044be:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900044c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900044c2:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900044c6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900044ca:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900044ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900044d0:	6add      	ldr	r5, [r3, #44]	; 0x2c
900044d2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
900044d6:	432a      	orrs	r2, r5
900044d8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900044dc:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
900044de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
900044e2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
900044e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900044e6:	f042 0206 	orr.w	r2, r2, #6
900044ea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
900044ec:	699a      	ldr	r2, [r3, #24]
900044ee:	f042 0201 	orr.w	r2, r2, #1
900044f2:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
900044f4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
900044f6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
900044fa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
900044fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90004500:	2001      	movs	r0, #1
90004502:	e7fc      	b.n	900044fe <HAL_LTDC_Init+0xce>
90004504:	f000f800 	.word	0xf000f800

90004508 <HAL_LTDC_ConfigLayer>:
{
90004508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
9000450c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
90004510:	4606      	mov	r6, r0
90004512:	460f      	mov	r7, r1
90004514:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
90004516:	2b01      	cmp	r3, #1
90004518:	f04f 0002 	mov.w	r0, #2
9000451c:	d01f      	beq.n	9000455e <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000451e:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
90004520:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90004524:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
90004526:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000452a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
9000452e:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90004532:	3438      	adds	r4, #56	; 0x38
90004534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90004536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90004538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000453a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9000453c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
9000453e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90004540:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90004542:	4630      	mov	r0, r6
90004544:	4662      	mov	r2, ip
90004546:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90004548:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
9000454a:	f7ff feed 	bl	90004328 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000454e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
90004550:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90004552:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
90004556:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
9000455a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
9000455e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90004562 <HAL_LTDC_SetAlpha>:
{
90004562:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hltdc);
90004564:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
90004568:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
9000456a:	2b01      	cmp	r3, #1
9000456c:	f04f 0302 	mov.w	r3, #2
90004570:	d015      	beq.n	9000459e <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
90004572:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->Alpha = Alpha;
90004576:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
90004578:	2601      	movs	r6, #1
  pLayerCfg->Alpha = Alpha;
9000457a:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
9000457c:	f880 60a0 	strb.w	r6, [r0, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
90004580:	18c5      	adds	r5, r0, r3
90004582:	64e9      	str	r1, [r5, #76]	; 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
90004584:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90004588:	4401      	add	r1, r0
9000458a:	f7ff fecd 	bl	90004328 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000458e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
90004590:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90004592:	625e      	str	r6, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
90004594:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
90004598:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
9000459c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
9000459e:	4618      	mov	r0, r3
900045a0:	e7fc      	b.n	9000459c <HAL_LTDC_SetAlpha+0x3a>

900045a2 <HAL_LTDC_GetState>:
  return hltdc->State;
900045a2:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
900045a6:	4770      	bx	lr

900045a8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
900045a8:	4b19      	ldr	r3, [pc, #100]	; (90004610 <HAL_PWREx_EnableOverDrive+0x68>)
{
900045aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
900045ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
900045ae:	4c19      	ldr	r4, [pc, #100]	; (90004614 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
900045b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
900045b4:	641a      	str	r2, [r3, #64]	; 0x40
900045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900045b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900045bc:	9301      	str	r3, [sp, #4]
900045be:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
900045c0:	6823      	ldr	r3, [r4, #0]
900045c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900045c6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
900045c8:	f7fe fa80 	bl	90002acc <HAL_GetTick>
900045cc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
900045ce:	6863      	ldr	r3, [r4, #4]
900045d0:	03da      	lsls	r2, r3, #15
900045d2:	d50c      	bpl.n	900045ee <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
900045d4:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900045d6:	4d0f      	ldr	r5, [pc, #60]	; (90004614 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
900045d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900045dc:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
900045de:	f7fe fa75 	bl	90002acc <HAL_GetTick>
900045e2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900045e4:	686b      	ldr	r3, [r5, #4]
900045e6:	039b      	lsls	r3, r3, #14
900045e8:	d50a      	bpl.n	90004600 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
900045ea:	2000      	movs	r0, #0
900045ec:	e006      	b.n	900045fc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900045ee:	f7fe fa6d 	bl	90002acc <HAL_GetTick>
900045f2:	1b40      	subs	r0, r0, r5
900045f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
900045f8:	d9e9      	bls.n	900045ce <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
900045fa:	2003      	movs	r0, #3
}
900045fc:	b003      	add	sp, #12
900045fe:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90004600:	f7fe fa64 	bl	90002acc <HAL_GetTick>
90004604:	1b00      	subs	r0, r0, r4
90004606:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
9000460a:	d9eb      	bls.n	900045e4 <HAL_PWREx_EnableOverDrive+0x3c>
9000460c:	e7f5      	b.n	900045fa <HAL_PWREx_EnableOverDrive+0x52>
9000460e:	bf00      	nop
90004610:	40023800 	.word	0x40023800
90004614:	40007000 	.word	0x40007000

90004618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90004618:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
9000461c:	4604      	mov	r4, r0
9000461e:	b340      	cbz	r0, 90004672 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90004620:	6803      	ldr	r3, [r0, #0]
90004622:	07db      	lsls	r3, r3, #31
90004624:	d410      	bmi.n	90004648 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90004626:	6823      	ldr	r3, [r4, #0]
90004628:	079f      	lsls	r7, r3, #30
9000462a:	d461      	bmi.n	900046f0 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000462c:	6823      	ldr	r3, [r4, #0]
9000462e:	0719      	lsls	r1, r3, #28
90004630:	f100 80a6 	bmi.w	90004780 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90004634:	6823      	ldr	r3, [r4, #0]
90004636:	075a      	lsls	r2, r3, #29
90004638:	f100 80c7 	bmi.w	900047ca <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000463c:	69a2      	ldr	r2, [r4, #24]
9000463e:	2a00      	cmp	r2, #0
90004640:	f040 8130 	bne.w	900048a4 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
90004644:	2000      	movs	r0, #0
90004646:	e02c      	b.n	900046a2 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
90004648:	4b94      	ldr	r3, [pc, #592]	; (9000489c <HAL_RCC_OscConfig+0x284>)
9000464a:	689a      	ldr	r2, [r3, #8]
9000464c:	f002 020c 	and.w	r2, r2, #12
90004650:	2a04      	cmp	r2, #4
90004652:	d007      	beq.n	90004664 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90004654:	689a      	ldr	r2, [r3, #8]
90004656:	f002 020c 	and.w	r2, r2, #12
9000465a:	2a08      	cmp	r2, #8
9000465c:	d10b      	bne.n	90004676 <HAL_RCC_OscConfig+0x5e>
9000465e:	685b      	ldr	r3, [r3, #4]
90004660:	025e      	lsls	r6, r3, #9
90004662:	d508      	bpl.n	90004676 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90004664:	4b8d      	ldr	r3, [pc, #564]	; (9000489c <HAL_RCC_OscConfig+0x284>)
90004666:	681b      	ldr	r3, [r3, #0]
90004668:	039d      	lsls	r5, r3, #14
9000466a:	d5dc      	bpl.n	90004626 <HAL_RCC_OscConfig+0xe>
9000466c:	6863      	ldr	r3, [r4, #4]
9000466e:	2b00      	cmp	r3, #0
90004670:	d1d9      	bne.n	90004626 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
90004672:	2001      	movs	r0, #1
90004674:	e015      	b.n	900046a2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90004676:	6863      	ldr	r3, [r4, #4]
90004678:	4d88      	ldr	r5, [pc, #544]	; (9000489c <HAL_RCC_OscConfig+0x284>)
9000467a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000467e:	d113      	bne.n	900046a8 <HAL_RCC_OscConfig+0x90>
90004680:	682b      	ldr	r3, [r5, #0]
90004682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90004686:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90004688:	f7fe fa20 	bl	90002acc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
9000468c:	4e83      	ldr	r6, [pc, #524]	; (9000489c <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
9000468e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004690:	6833      	ldr	r3, [r6, #0]
90004692:	0398      	lsls	r0, r3, #14
90004694:	d4c7      	bmi.n	90004626 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90004696:	f7fe fa19 	bl	90002acc <HAL_GetTick>
9000469a:	1b40      	subs	r0, r0, r5
9000469c:	2864      	cmp	r0, #100	; 0x64
9000469e:	d9f7      	bls.n	90004690 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
900046a0:	2003      	movs	r0, #3
}
900046a2:	b002      	add	sp, #8
900046a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
900046a8:	b99b      	cbnz	r3, 900046d2 <HAL_RCC_OscConfig+0xba>
900046aa:	682b      	ldr	r3, [r5, #0]
900046ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900046b0:	602b      	str	r3, [r5, #0]
900046b2:	682b      	ldr	r3, [r5, #0]
900046b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900046b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
900046ba:	f7fe fa07 	bl	90002acc <HAL_GetTick>
900046be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
900046c0:	682b      	ldr	r3, [r5, #0]
900046c2:	0399      	lsls	r1, r3, #14
900046c4:	d5af      	bpl.n	90004626 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
900046c6:	f7fe fa01 	bl	90002acc <HAL_GetTick>
900046ca:	1b80      	subs	r0, r0, r6
900046cc:	2864      	cmp	r0, #100	; 0x64
900046ce:	d9f7      	bls.n	900046c0 <HAL_RCC_OscConfig+0xa8>
900046d0:	e7e6      	b.n	900046a0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
900046d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900046d6:	682b      	ldr	r3, [r5, #0]
900046d8:	d103      	bne.n	900046e2 <HAL_RCC_OscConfig+0xca>
900046da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
900046de:	602b      	str	r3, [r5, #0]
900046e0:	e7ce      	b.n	90004680 <HAL_RCC_OscConfig+0x68>
900046e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900046e6:	602b      	str	r3, [r5, #0]
900046e8:	682b      	ldr	r3, [r5, #0]
900046ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900046ee:	e7ca      	b.n	90004686 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
900046f0:	4b6a      	ldr	r3, [pc, #424]	; (9000489c <HAL_RCC_OscConfig+0x284>)
900046f2:	689a      	ldr	r2, [r3, #8]
900046f4:	f012 0f0c 	tst.w	r2, #12
900046f8:	d007      	beq.n	9000470a <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
900046fa:	689a      	ldr	r2, [r3, #8]
900046fc:	f002 020c 	and.w	r2, r2, #12
90004700:	2a08      	cmp	r2, #8
90004702:	d111      	bne.n	90004728 <HAL_RCC_OscConfig+0x110>
90004704:	685b      	ldr	r3, [r3, #4]
90004706:	025a      	lsls	r2, r3, #9
90004708:	d40e      	bmi.n	90004728 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
9000470a:	4a64      	ldr	r2, [pc, #400]	; (9000489c <HAL_RCC_OscConfig+0x284>)
9000470c:	6813      	ldr	r3, [r2, #0]
9000470e:	079b      	lsls	r3, r3, #30
90004710:	d502      	bpl.n	90004718 <HAL_RCC_OscConfig+0x100>
90004712:	68e3      	ldr	r3, [r4, #12]
90004714:	2b01      	cmp	r3, #1
90004716:	d1ac      	bne.n	90004672 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90004718:	6813      	ldr	r3, [r2, #0]
9000471a:	6921      	ldr	r1, [r4, #16]
9000471c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
90004720:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
90004724:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90004726:	e781      	b.n	9000462c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90004728:	68e3      	ldr	r3, [r4, #12]
9000472a:	4d5c      	ldr	r5, [pc, #368]	; (9000489c <HAL_RCC_OscConfig+0x284>)
9000472c:	b1bb      	cbz	r3, 9000475e <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
9000472e:	682b      	ldr	r3, [r5, #0]
90004730:	f043 0301 	orr.w	r3, r3, #1
90004734:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90004736:	f7fe f9c9 	bl	90002acc <HAL_GetTick>
9000473a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
9000473c:	682b      	ldr	r3, [r5, #0]
9000473e:	079f      	lsls	r7, r3, #30
90004740:	d507      	bpl.n	90004752 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90004742:	682b      	ldr	r3, [r5, #0]
90004744:	6922      	ldr	r2, [r4, #16]
90004746:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
9000474a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000474e:	602b      	str	r3, [r5, #0]
90004750:	e76c      	b.n	9000462c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90004752:	f7fe f9bb 	bl	90002acc <HAL_GetTick>
90004756:	1b80      	subs	r0, r0, r6
90004758:	2802      	cmp	r0, #2
9000475a:	d9ef      	bls.n	9000473c <HAL_RCC_OscConfig+0x124>
9000475c:	e7a0      	b.n	900046a0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
9000475e:	682b      	ldr	r3, [r5, #0]
90004760:	f023 0301 	bic.w	r3, r3, #1
90004764:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90004766:	f7fe f9b1 	bl	90002acc <HAL_GetTick>
9000476a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
9000476c:	682b      	ldr	r3, [r5, #0]
9000476e:	0798      	lsls	r0, r3, #30
90004770:	f57f af5c 	bpl.w	9000462c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90004774:	f7fe f9aa 	bl	90002acc <HAL_GetTick>
90004778:	1b80      	subs	r0, r0, r6
9000477a:	2802      	cmp	r0, #2
9000477c:	d9f6      	bls.n	9000476c <HAL_RCC_OscConfig+0x154>
9000477e:	e78f      	b.n	900046a0 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90004780:	6963      	ldr	r3, [r4, #20]
90004782:	4d46      	ldr	r5, [pc, #280]	; (9000489c <HAL_RCC_OscConfig+0x284>)
90004784:	b183      	cbz	r3, 900047a8 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
90004786:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90004788:	f043 0301 	orr.w	r3, r3, #1
9000478c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000478e:	f7fe f99d 	bl	90002acc <HAL_GetTick>
90004792:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90004794:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90004796:	079b      	lsls	r3, r3, #30
90004798:	f53f af4c 	bmi.w	90004634 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000479c:	f7fe f996 	bl	90002acc <HAL_GetTick>
900047a0:	1b80      	subs	r0, r0, r6
900047a2:	2802      	cmp	r0, #2
900047a4:	d9f6      	bls.n	90004794 <HAL_RCC_OscConfig+0x17c>
900047a6:	e77b      	b.n	900046a0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
900047a8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
900047aa:	f023 0301 	bic.w	r3, r3, #1
900047ae:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
900047b0:	f7fe f98c 	bl	90002acc <HAL_GetTick>
900047b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
900047b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
900047b8:	079f      	lsls	r7, r3, #30
900047ba:	f57f af3b 	bpl.w	90004634 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900047be:	f7fe f985 	bl	90002acc <HAL_GetTick>
900047c2:	1b80      	subs	r0, r0, r6
900047c4:	2802      	cmp	r0, #2
900047c6:	d9f6      	bls.n	900047b6 <HAL_RCC_OscConfig+0x19e>
900047c8:	e76a      	b.n	900046a0 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
900047ca:	4b34      	ldr	r3, [pc, #208]	; (9000489c <HAL_RCC_OscConfig+0x284>)
900047cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900047ce:	00d0      	lsls	r0, r2, #3
900047d0:	d427      	bmi.n	90004822 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
900047d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
900047d4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
900047d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
900047da:	641a      	str	r2, [r3, #64]	; 0x40
900047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
900047e2:	9301      	str	r3, [sp, #4]
900047e4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
900047e6:	4d2e      	ldr	r5, [pc, #184]	; (900048a0 <HAL_RCC_OscConfig+0x288>)
900047e8:	682b      	ldr	r3, [r5, #0]
900047ea:	05d9      	lsls	r1, r3, #23
900047ec:	d51b      	bpl.n	90004826 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
900047ee:	68a3      	ldr	r3, [r4, #8]
900047f0:	4d2a      	ldr	r5, [pc, #168]	; (9000489c <HAL_RCC_OscConfig+0x284>)
900047f2:	2b01      	cmp	r3, #1
900047f4:	d127      	bne.n	90004846 <HAL_RCC_OscConfig+0x22e>
900047f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
900047f8:	f043 0301 	orr.w	r3, r3, #1
900047fc:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900047fe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
90004802:	f7fe f963 	bl	90002acc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90004806:	4e25      	ldr	r6, [pc, #148]	; (9000489c <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
90004808:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
9000480a:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000480c:	079b      	lsls	r3, r3, #30
9000480e:	d53f      	bpl.n	90004890 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
90004810:	2f00      	cmp	r7, #0
90004812:	f43f af13 	beq.w	9000463c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
90004816:	4a21      	ldr	r2, [pc, #132]	; (9000489c <HAL_RCC_OscConfig+0x284>)
90004818:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000481a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000481e:	6413      	str	r3, [r2, #64]	; 0x40
90004820:	e70c      	b.n	9000463c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
90004822:	2700      	movs	r7, #0
90004824:	e7df      	b.n	900047e6 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
90004826:	682b      	ldr	r3, [r5, #0]
90004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000482c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000482e:	f7fe f94d 	bl	90002acc <HAL_GetTick>
90004832:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90004834:	682b      	ldr	r3, [r5, #0]
90004836:	05da      	lsls	r2, r3, #23
90004838:	d4d9      	bmi.n	900047ee <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000483a:	f7fe f947 	bl	90002acc <HAL_GetTick>
9000483e:	1b80      	subs	r0, r0, r6
90004840:	2864      	cmp	r0, #100	; 0x64
90004842:	d9f7      	bls.n	90004834 <HAL_RCC_OscConfig+0x21c>
90004844:	e72c      	b.n	900046a0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90004846:	b9ab      	cbnz	r3, 90004874 <HAL_RCC_OscConfig+0x25c>
90004848:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000484a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000484e:	f023 0301 	bic.w	r3, r3, #1
90004852:	672b      	str	r3, [r5, #112]	; 0x70
90004854:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90004856:	f023 0304 	bic.w	r3, r3, #4
9000485a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000485c:	f7fe f936 	bl	90002acc <HAL_GetTick>
90004860:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90004862:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90004864:	0798      	lsls	r0, r3, #30
90004866:	d5d3      	bpl.n	90004810 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90004868:	f7fe f930 	bl	90002acc <HAL_GetTick>
9000486c:	1b80      	subs	r0, r0, r6
9000486e:	4540      	cmp	r0, r8
90004870:	d9f7      	bls.n	90004862 <HAL_RCC_OscConfig+0x24a>
90004872:	e715      	b.n	900046a0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90004874:	2b05      	cmp	r3, #5
90004876:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90004878:	d103      	bne.n	90004882 <HAL_RCC_OscConfig+0x26a>
9000487a:	f043 0304 	orr.w	r3, r3, #4
9000487e:	672b      	str	r3, [r5, #112]	; 0x70
90004880:	e7b9      	b.n	900047f6 <HAL_RCC_OscConfig+0x1de>
90004882:	f023 0301 	bic.w	r3, r3, #1
90004886:	672b      	str	r3, [r5, #112]	; 0x70
90004888:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000488a:	f023 0304 	bic.w	r3, r3, #4
9000488e:	e7b5      	b.n	900047fc <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90004890:	f7fe f91c 	bl	90002acc <HAL_GetTick>
90004894:	1b40      	subs	r0, r0, r5
90004896:	4540      	cmp	r0, r8
90004898:	d9b7      	bls.n	9000480a <HAL_RCC_OscConfig+0x1f2>
9000489a:	e701      	b.n	900046a0 <HAL_RCC_OscConfig+0x88>
9000489c:	40023800 	.word	0x40023800
900048a0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
900048a4:	4d38      	ldr	r5, [pc, #224]	; (90004988 <HAL_RCC_OscConfig+0x370>)
900048a6:	68ab      	ldr	r3, [r5, #8]
900048a8:	f003 030c 	and.w	r3, r3, #12
900048ac:	2b08      	cmp	r3, #8
900048ae:	d041      	beq.n	90004934 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
900048b0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
900048b2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
900048b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
900048b8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
900048ba:	d12e      	bne.n	9000491a <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
900048bc:	f7fe f906 	bl	90002acc <HAL_GetTick>
900048c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
900048c2:	682b      	ldr	r3, [r5, #0]
900048c4:	0199      	lsls	r1, r3, #6
900048c6:	d422      	bmi.n	9000490e <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900048c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900048ca:	085b      	lsrs	r3, r3, #1
900048cc:	1e5a      	subs	r2, r3, #1
900048ce:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
900048d2:	430b      	orrs	r3, r1
900048d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900048d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
900048da:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
900048de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900048e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
900048e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
900048e8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
900048ea:	682b      	ldr	r3, [r5, #0]
900048ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
900048f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
900048f2:	f7fe f8eb 	bl	90002acc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900048f6:	4d24      	ldr	r5, [pc, #144]	; (90004988 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
900048f8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900048fa:	682b      	ldr	r3, [r5, #0]
900048fc:	019a      	lsls	r2, r3, #6
900048fe:	f53f aea1 	bmi.w	90004644 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90004902:	f7fe f8e3 	bl	90002acc <HAL_GetTick>
90004906:	1b00      	subs	r0, r0, r4
90004908:	2802      	cmp	r0, #2
9000490a:	d9f6      	bls.n	900048fa <HAL_RCC_OscConfig+0x2e2>
9000490c:	e6c8      	b.n	900046a0 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000490e:	f7fe f8dd 	bl	90002acc <HAL_GetTick>
90004912:	1b80      	subs	r0, r0, r6
90004914:	2802      	cmp	r0, #2
90004916:	d9d4      	bls.n	900048c2 <HAL_RCC_OscConfig+0x2aa>
90004918:	e6c2      	b.n	900046a0 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
9000491a:	f7fe f8d7 	bl	90002acc <HAL_GetTick>
9000491e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90004920:	682b      	ldr	r3, [r5, #0]
90004922:	019b      	lsls	r3, r3, #6
90004924:	f57f ae8e 	bpl.w	90004644 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90004928:	f7fe f8d0 	bl	90002acc <HAL_GetTick>
9000492c:	1b00      	subs	r0, r0, r4
9000492e:	2802      	cmp	r0, #2
90004930:	d9f6      	bls.n	90004920 <HAL_RCC_OscConfig+0x308>
90004932:	e6b5      	b.n	900046a0 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004934:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
90004936:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004938:	f43f ae9b 	beq.w	90004672 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000493c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004940:	69e1      	ldr	r1, [r4, #28]
90004942:	428a      	cmp	r2, r1
90004944:	f47f ae95 	bne.w	90004672 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90004948:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000494c:	6a21      	ldr	r1, [r4, #32]
9000494e:	428a      	cmp	r2, r1
90004950:	f47f ae8f 	bne.w	90004672 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90004954:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90004958:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
9000495a:	401a      	ands	r2, r3
9000495c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
90004960:	f47f ae87 	bne.w	90004672 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90004964:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90004966:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
9000496a:	0852      	lsrs	r2, r2, #1
9000496c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
9000496e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
90004972:	f47f ae7e 	bne.w	90004672 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
90004976:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
9000497a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
9000497c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
90004980:	f43f ae60 	beq.w	90004644 <HAL_RCC_OscConfig+0x2c>
90004984:	e675      	b.n	90004672 <HAL_RCC_OscConfig+0x5a>
90004986:	bf00      	nop
90004988:	40023800 	.word	0x40023800

9000498c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000498c:	4913      	ldr	r1, [pc, #76]	; (900049dc <HAL_RCC_GetSysClockFreq+0x50>)
{
9000498e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
90004990:	688b      	ldr	r3, [r1, #8]
90004992:	f003 030c 	and.w	r3, r3, #12
90004996:	2b04      	cmp	r3, #4
90004998:	d01b      	beq.n	900049d2 <HAL_RCC_GetSysClockFreq+0x46>
9000499a:	2b08      	cmp	r3, #8
9000499c:	d11b      	bne.n	900049d6 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
9000499e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
900049a0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
900049a2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
900049a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
900049a8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
900049ac:	f3c1 1188 	ubfx	r1, r1, #6, #9
900049b0:	bf1a      	itte	ne
900049b2:	480b      	ldrne	r0, [pc, #44]	; (900049e0 <HAL_RCC_GetSysClockFreq+0x54>)
900049b4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
900049b6:	480b      	ldreq	r0, [pc, #44]	; (900049e4 <HAL_RCC_GetSysClockFreq+0x58>)
900049b8:	fba1 0100 	umull	r0, r1, r1, r0
900049bc:	f7fb fc78 	bl	900002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
900049c0:	4b06      	ldr	r3, [pc, #24]	; (900049dc <HAL_RCC_GetSysClockFreq+0x50>)
900049c2:	685b      	ldr	r3, [r3, #4]
900049c4:	f3c3 4301 	ubfx	r3, r3, #16, #2
900049c8:	3301      	adds	r3, #1
900049ca:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
900049cc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
900049d0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
900049d2:	4803      	ldr	r0, [pc, #12]	; (900049e0 <HAL_RCC_GetSysClockFreq+0x54>)
900049d4:	e7fc      	b.n	900049d0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
900049d6:	4803      	ldr	r0, [pc, #12]	; (900049e4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
900049d8:	e7fa      	b.n	900049d0 <HAL_RCC_GetSysClockFreq+0x44>
900049da:	bf00      	nop
900049dc:	40023800 	.word	0x40023800
900049e0:	017d7840 	.word	0x017d7840
900049e4:	00f42400 	.word	0x00f42400

900049e8 <HAL_RCC_ClockConfig>:
{
900049e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900049ec:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
900049ee:	4604      	mov	r4, r0
900049f0:	b910      	cbnz	r0, 900049f8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
900049f2:	2001      	movs	r0, #1
}
900049f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900049f8:	4a45      	ldr	r2, [pc, #276]	; (90004b10 <HAL_RCC_ClockConfig+0x128>)
900049fa:	6813      	ldr	r3, [r2, #0]
900049fc:	f003 030f 	and.w	r3, r3, #15
90004a00:	428b      	cmp	r3, r1
90004a02:	d328      	bcc.n	90004a56 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90004a04:	6821      	ldr	r1, [r4, #0]
90004a06:	078f      	lsls	r7, r1, #30
90004a08:	d430      	bmi.n	90004a6c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90004a0a:	07c8      	lsls	r0, r1, #31
90004a0c:	d443      	bmi.n	90004a96 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90004a0e:	4a40      	ldr	r2, [pc, #256]	; (90004b10 <HAL_RCC_ClockConfig+0x128>)
90004a10:	6813      	ldr	r3, [r2, #0]
90004a12:	f003 030f 	and.w	r3, r3, #15
90004a16:	42ab      	cmp	r3, r5
90004a18:	d866      	bhi.n	90004ae8 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90004a1a:	6822      	ldr	r2, [r4, #0]
90004a1c:	0751      	lsls	r1, r2, #29
90004a1e:	d46f      	bmi.n	90004b00 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004a20:	0713      	lsls	r3, r2, #28
90004a22:	d507      	bpl.n	90004a34 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
90004a24:	4a3b      	ldr	r2, [pc, #236]	; (90004b14 <HAL_RCC_ClockConfig+0x12c>)
90004a26:	6921      	ldr	r1, [r4, #16]
90004a28:	6893      	ldr	r3, [r2, #8]
90004a2a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
90004a2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
90004a32:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
90004a34:	f7ff ffaa 	bl	9000498c <HAL_RCC_GetSysClockFreq>
90004a38:	4b36      	ldr	r3, [pc, #216]	; (90004b14 <HAL_RCC_ClockConfig+0x12c>)
90004a3a:	4a37      	ldr	r2, [pc, #220]	; (90004b18 <HAL_RCC_ClockConfig+0x130>)
90004a3c:	689b      	ldr	r3, [r3, #8]
90004a3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
90004a42:	5cd3      	ldrb	r3, [r2, r3]
90004a44:	40d8      	lsrs	r0, r3
90004a46:	4b35      	ldr	r3, [pc, #212]	; (90004b1c <HAL_RCC_ClockConfig+0x134>)
90004a48:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
90004a4a:	4b35      	ldr	r3, [pc, #212]	; (90004b20 <HAL_RCC_ClockConfig+0x138>)
90004a4c:	6818      	ldr	r0, [r3, #0]
90004a4e:	f7fd fffd 	bl	90002a4c <HAL_InitTick>
  return HAL_OK;
90004a52:	2000      	movs	r0, #0
90004a54:	e7ce      	b.n	900049f4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
90004a56:	6813      	ldr	r3, [r2, #0]
90004a58:	f023 030f 	bic.w	r3, r3, #15
90004a5c:	430b      	orrs	r3, r1
90004a5e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90004a60:	6813      	ldr	r3, [r2, #0]
90004a62:	f003 030f 	and.w	r3, r3, #15
90004a66:	428b      	cmp	r3, r1
90004a68:	d1c3      	bne.n	900049f2 <HAL_RCC_ClockConfig+0xa>
90004a6a:	e7cb      	b.n	90004a04 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90004a6c:	f011 0f04 	tst.w	r1, #4
90004a70:	4b28      	ldr	r3, [pc, #160]	; (90004b14 <HAL_RCC_ClockConfig+0x12c>)
90004a72:	d003      	beq.n	90004a7c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90004a74:	689a      	ldr	r2, [r3, #8]
90004a76:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
90004a7a:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004a7c:	070e      	lsls	r6, r1, #28
90004a7e:	d503      	bpl.n	90004a88 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90004a80:	689a      	ldr	r2, [r3, #8]
90004a82:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
90004a86:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90004a88:	689a      	ldr	r2, [r3, #8]
90004a8a:	68a0      	ldr	r0, [r4, #8]
90004a8c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
90004a90:	4302      	orrs	r2, r0
90004a92:	609a      	str	r2, [r3, #8]
90004a94:	e7b9      	b.n	90004a0a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90004a96:	6861      	ldr	r1, [r4, #4]
90004a98:	4b1e      	ldr	r3, [pc, #120]	; (90004b14 <HAL_RCC_ClockConfig+0x12c>)
90004a9a:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004a9c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90004a9e:	d11b      	bne.n	90004ad8 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90004aa0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90004aa4:	d0a5      	beq.n	900049f2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90004aa6:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90004aa8:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004aac:	4f19      	ldr	r7, [pc, #100]	; (90004b14 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90004aae:	f022 0203 	bic.w	r2, r2, #3
90004ab2:	430a      	orrs	r2, r1
90004ab4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
90004ab6:	f7fe f809 	bl	90002acc <HAL_GetTick>
90004aba:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004abc:	68bb      	ldr	r3, [r7, #8]
90004abe:	6862      	ldr	r2, [r4, #4]
90004ac0:	f003 030c 	and.w	r3, r3, #12
90004ac4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
90004ac8:	d0a1      	beq.n	90004a0e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90004aca:	f7fd ffff 	bl	90002acc <HAL_GetTick>
90004ace:	1b80      	subs	r0, r0, r6
90004ad0:	4540      	cmp	r0, r8
90004ad2:	d9f3      	bls.n	90004abc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
90004ad4:	2003      	movs	r0, #3
90004ad6:	e78d      	b.n	900049f4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90004ad8:	2902      	cmp	r1, #2
90004ada:	d102      	bne.n	90004ae2 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90004adc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
90004ae0:	e7e0      	b.n	90004aa4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90004ae2:	f012 0f02 	tst.w	r2, #2
90004ae6:	e7dd      	b.n	90004aa4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
90004ae8:	6813      	ldr	r3, [r2, #0]
90004aea:	f023 030f 	bic.w	r3, r3, #15
90004aee:	432b      	orrs	r3, r5
90004af0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90004af2:	6813      	ldr	r3, [r2, #0]
90004af4:	f003 030f 	and.w	r3, r3, #15
90004af8:	42ab      	cmp	r3, r5
90004afa:	f47f af7a 	bne.w	900049f2 <HAL_RCC_ClockConfig+0xa>
90004afe:	e78c      	b.n	90004a1a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90004b00:	4904      	ldr	r1, [pc, #16]	; (90004b14 <HAL_RCC_ClockConfig+0x12c>)
90004b02:	68e0      	ldr	r0, [r4, #12]
90004b04:	688b      	ldr	r3, [r1, #8]
90004b06:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
90004b0a:	4303      	orrs	r3, r0
90004b0c:	608b      	str	r3, [r1, #8]
90004b0e:	e787      	b.n	90004a20 <HAL_RCC_ClockConfig+0x38>
90004b10:	40023c00 	.word	0x40023c00
90004b14:	40023800 	.word	0x40023800
90004b18:	9001081c 	.word	0x9001081c
90004b1c:	200000b4 	.word	0x200000b4
90004b20:	20000090 	.word	0x20000090

90004b24 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90004b24:	6803      	ldr	r3, [r0, #0]
{
90004b26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90004b2a:	f013 0601 	ands.w	r6, r3, #1
{
90004b2e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90004b30:	d00b      	beq.n	90004b4a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90004b32:	4aad      	ldr	r2, [pc, #692]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004b34:	6891      	ldr	r1, [r2, #8]
90004b36:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
90004b3a:	6091      	str	r1, [r2, #8]
90004b3c:	6b46      	ldr	r6, [r0, #52]	; 0x34
90004b3e:	6891      	ldr	r1, [r2, #8]
90004b40:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
90004b42:	fab6 f686 	clz	r6, r6
90004b46:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90004b48:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
90004b4a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
90004b4e:	d012      	beq.n	90004b76 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90004b50:	49a5      	ldr	r1, [pc, #660]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004b52:	6be5      	ldr	r5, [r4, #60]	; 0x3c
90004b54:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
90004b58:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90004b5c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
90004b60:	bf08      	it	eq
90004b62:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90004b64:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90004b68:	bf16      	itet	ne
90004b6a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
90004b6e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
90004b70:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90004b72:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
90004b76:	02d9      	lsls	r1, r3, #11
90004b78:	d510      	bpl.n	90004b9c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90004b7a:	489b      	ldr	r0, [pc, #620]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004b7c:	6c21      	ldr	r1, [r4, #64]	; 0x40
90004b7e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
90004b82:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
90004b86:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
90004b8a:	ea42 0201 	orr.w	r2, r2, r1
90004b8e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
90004b92:	f000 8186 	beq.w	90004ea2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
90004b96:	2900      	cmp	r1, #0
90004b98:	bf08      	it	eq
90004b9a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
90004b9c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
90004ba0:	bf18      	it	ne
90004ba2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
90004ba4:	069a      	lsls	r2, r3, #26
90004ba6:	d532      	bpl.n	90004c0e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
90004ba8:	4b8f      	ldr	r3, [pc, #572]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90004baa:	4f90      	ldr	r7, [pc, #576]	; (90004dec <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
90004bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90004bae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90004bb2:	641a      	str	r2, [r3, #64]	; 0x40
90004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90004bba:	9301      	str	r3, [sp, #4]
90004bbc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
90004bbe:	683b      	ldr	r3, [r7, #0]
90004bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90004bc4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004bc6:	f7fd ff81 	bl	90002acc <HAL_GetTick>
90004bca:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
90004bcc:	683b      	ldr	r3, [r7, #0]
90004bce:	05db      	lsls	r3, r3, #23
90004bd0:	f140 8169 	bpl.w	90004ea6 <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90004bd4:	4f84      	ldr	r7, [pc, #528]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90004bd6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90004bd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90004bda:	f413 7340 	ands.w	r3, r3, #768	; 0x300
90004bde:	f040 816d 	bne.w	90004ebc <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90004be2:	6b23      	ldr	r3, [r4, #48]	; 0x30
90004be4:	f403 7240 	and.w	r2, r3, #768	; 0x300
90004be8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
90004bec:	4a7e      	ldr	r2, [pc, #504]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004bee:	f040 818a 	bne.w	90004f06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
90004bf2:	6891      	ldr	r1, [r2, #8]
90004bf4:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
90004bf8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
90004bfc:	f420 7040 	bic.w	r0, r0, #768	; 0x300
90004c00:	4301      	orrs	r1, r0
90004c02:	6091      	str	r1, [r2, #8]
90004c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
90004c08:	6f11      	ldr	r1, [r2, #112]	; 0x70
90004c0a:	430b      	orrs	r3, r1
90004c0c:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
90004c0e:	6823      	ldr	r3, [r4, #0]
90004c10:	06da      	lsls	r2, r3, #27
90004c12:	d50c      	bpl.n	90004c2e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90004c14:	4a74      	ldr	r2, [pc, #464]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c16:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
90004c1a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
90004c1e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
90004c22:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
90004c26:	6ba0      	ldr	r0, [r4, #56]	; 0x38
90004c28:	4301      	orrs	r1, r0
90004c2a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
90004c2e:	045f      	lsls	r7, r3, #17
90004c30:	d508      	bpl.n	90004c44 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
90004c32:	496d      	ldr	r1, [pc, #436]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c34:	6e60      	ldr	r0, [r4, #100]	; 0x64
90004c36:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c3a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
90004c3e:	4302      	orrs	r2, r0
90004c40:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
90004c44:	0418      	lsls	r0, r3, #16
90004c46:	d508      	bpl.n	90004c5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
90004c48:	4967      	ldr	r1, [pc, #412]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c4a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
90004c4c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c50:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
90004c54:	4302      	orrs	r2, r0
90004c56:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
90004c5a:	03d9      	lsls	r1, r3, #15
90004c5c:	d508      	bpl.n	90004c70 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
90004c5e:	4962      	ldr	r1, [pc, #392]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c60:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
90004c62:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c66:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
90004c6a:	4302      	orrs	r2, r0
90004c6c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90004c70:	039a      	lsls	r2, r3, #14
90004c72:	d508      	bpl.n	90004c86 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90004c74:	495c      	ldr	r1, [pc, #368]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c76:	6f20      	ldr	r0, [r4, #112]	; 0x70
90004c78:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c7c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
90004c80:	4302      	orrs	r2, r0
90004c82:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
90004c86:	065f      	lsls	r7, r3, #25
90004c88:	d508      	bpl.n	90004c9c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
90004c8a:	4957      	ldr	r1, [pc, #348]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004c8c:	6c60      	ldr	r0, [r4, #68]	; 0x44
90004c8e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004c92:	f022 0203 	bic.w	r2, r2, #3
90004c96:	4302      	orrs	r2, r0
90004c98:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
90004c9c:	0618      	lsls	r0, r3, #24
90004c9e:	d508      	bpl.n	90004cb2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
90004ca0:	4951      	ldr	r1, [pc, #324]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004ca2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
90004ca4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004ca8:	f022 020c 	bic.w	r2, r2, #12
90004cac:	4302      	orrs	r2, r0
90004cae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
90004cb2:	05d9      	lsls	r1, r3, #23
90004cb4:	d508      	bpl.n	90004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
90004cb6:	494c      	ldr	r1, [pc, #304]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004cb8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90004cba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004cbe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
90004cc2:	4302      	orrs	r2, r0
90004cc4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
90004cc8:	059a      	lsls	r2, r3, #22
90004cca:	d508      	bpl.n	90004cde <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
90004ccc:	4946      	ldr	r1, [pc, #280]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004cce:	6d20      	ldr	r0, [r4, #80]	; 0x50
90004cd0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004cd4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
90004cd8:	4302      	orrs	r2, r0
90004cda:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
90004cde:	055f      	lsls	r7, r3, #21
90004ce0:	d508      	bpl.n	90004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
90004ce2:	4941      	ldr	r1, [pc, #260]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004ce4:	6d60      	ldr	r0, [r4, #84]	; 0x54
90004ce6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004cea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
90004cee:	4302      	orrs	r2, r0
90004cf0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
90004cf4:	0518      	lsls	r0, r3, #20
90004cf6:	d508      	bpl.n	90004d0a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
90004cf8:	493b      	ldr	r1, [pc, #236]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004cfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
90004cfc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004d00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
90004d04:	4302      	orrs	r2, r0
90004d06:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
90004d0a:	04d9      	lsls	r1, r3, #19
90004d0c:	d508      	bpl.n	90004d20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
90004d0e:	4936      	ldr	r1, [pc, #216]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004d10:	6de0      	ldr	r0, [r4, #92]	; 0x5c
90004d12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004d16:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
90004d1a:	4302      	orrs	r2, r0
90004d1c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
90004d20:	049a      	lsls	r2, r3, #18
90004d22:	d508      	bpl.n	90004d36 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
90004d24:	4930      	ldr	r1, [pc, #192]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004d26:	6e20      	ldr	r0, [r4, #96]	; 0x60
90004d28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004d2c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
90004d30:	4302      	orrs	r2, r0
90004d32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90004d36:	025f      	lsls	r7, r3, #9
90004d38:	d508      	bpl.n	90004d4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90004d3a:	492b      	ldr	r1, [pc, #172]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004d3c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
90004d3e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004d42:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
90004d46:	4302      	orrs	r2, r0
90004d48:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
90004d4c:	0298      	lsls	r0, r3, #10
90004d4e:	d50c      	bpl.n	90004d6a <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90004d50:	4825      	ldr	r0, [pc, #148]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004d52:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
90004d54:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
90004d58:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90004d5c:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
90004d60:	bf08      	it	eq
90004d62:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
90004d64:	430a      	orrs	r2, r1
90004d66:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
90004d6a:	f013 0f08 	tst.w	r3, #8
90004d6e:	bf18      	it	ne
90004d70:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90004d72:	0359      	lsls	r1, r3, #13
90004d74:	d508      	bpl.n	90004d88 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90004d76:	491c      	ldr	r1, [pc, #112]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004d78:	6f60      	ldr	r0, [r4, #116]	; 0x74
90004d7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004d7e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
90004d82:	4302      	orrs	r2, r0
90004d84:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
90004d88:	021a      	lsls	r2, r3, #8
90004d8a:	d509      	bpl.n	90004da0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
90004d8c:	4916      	ldr	r1, [pc, #88]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004d8e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
90004d92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90004d96:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
90004d9a:	4302      	orrs	r2, r0
90004d9c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
90004da0:	2e01      	cmp	r6, #1
90004da2:	f000 80b4 	beq.w	90004f0e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
90004da6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90004daa:	f000 80b0 	beq.w	90004f0e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
90004dae:	2d01      	cmp	r5, #1
90004db0:	d175      	bne.n	90004e9e <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
90004db2:	4d0d      	ldr	r5, [pc, #52]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004db4:	682b      	ldr	r3, [r5, #0]
90004db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90004dba:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004dbc:	f7fd fe86 	bl	90002acc <HAL_GetTick>
90004dc0:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90004dc2:	682b      	ldr	r3, [r5, #0]
90004dc4:	009f      	lsls	r7, r3, #2
90004dc6:	f100 8126 	bmi.w	90005016 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90004dca:	6821      	ldr	r1, [r4, #0]
90004dcc:	030e      	lsls	r6, r1, #12
90004dce:	d501      	bpl.n	90004dd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90004dd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90004dd2:	b11b      	cbz	r3, 90004ddc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
90004dd4:	02cd      	lsls	r5, r1, #11
90004dd6:	d522      	bpl.n	90004e1e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
90004dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
90004dda:	bb03      	cbnz	r3, 90004e1e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90004ddc:	4a02      	ldr	r2, [pc, #8]	; (90004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
90004dde:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90004de2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
90004de6:	e003      	b.n	90004df0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
90004de8:	40023800 	.word	0x40023800
90004dec:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
90004df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004df4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004df8:	4303      	orrs	r3, r0
90004dfa:	6960      	ldr	r0, [r4, #20]
90004dfc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004e00:	69a0      	ldr	r0, [r4, #24]
90004e02:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
90004e06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
90004e0a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90004e0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90004e10:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
90004e14:	3801      	subs	r0, #1
90004e16:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
90004e1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
90004e1e:	0288      	lsls	r0, r1, #10
90004e20:	d515      	bpl.n	90004e4e <HAL_RCCEx_PeriphCLKConfig+0x32a>
90004e22:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
90004e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90004e28:	d111      	bne.n	90004e4e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90004e2a:	4a82      	ldr	r2, [pc, #520]	; (90005034 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004e2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90004e30:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
90004e34:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90004e38:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004e3c:	4303      	orrs	r3, r0
90004e3e:	6960      	ldr	r0, [r4, #20]
90004e40:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004e44:	6a20      	ldr	r0, [r4, #32]
90004e46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90004e4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
90004e4e:	070a      	lsls	r2, r1, #28
90004e50:	d519      	bpl.n	90004e86 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90004e52:	4a78      	ldr	r2, [pc, #480]	; (90005034 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004e54:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90004e58:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
90004e5c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
90004e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004e64:	430b      	orrs	r3, r1
90004e66:	6961      	ldr	r1, [r4, #20]
90004e68:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90004e6c:	69e1      	ldr	r1, [r4, #28]
90004e6e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
90004e72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
90004e76:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
90004e7a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90004e7c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
90004e80:	430b      	orrs	r3, r1
90004e82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
90004e86:	4c6b      	ldr	r4, [pc, #428]	; (90005034 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004e88:	6823      	ldr	r3, [r4, #0]
90004e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90004e8e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004e90:	f7fd fe1c 	bl	90002acc <HAL_GetTick>
90004e94:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
90004e96:	6823      	ldr	r3, [r4, #0]
90004e98:	009b      	lsls	r3, r3, #2
90004e9a:	f140 80c3 	bpl.w	90005024 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
90004e9e:	2000      	movs	r0, #0
90004ea0:	e009      	b.n	90004eb6 <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
90004ea2:	2601      	movs	r6, #1
90004ea4:	e67a      	b.n	90004b9c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90004ea6:	f7fd fe11 	bl	90002acc <HAL_GetTick>
90004eaa:	eba0 0008 	sub.w	r0, r0, r8
90004eae:	2864      	cmp	r0, #100	; 0x64
90004eb0:	f67f ae8c 	bls.w	90004bcc <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
90004eb4:	2003      	movs	r0, #3
}
90004eb6:	b003      	add	sp, #12
90004eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90004ebc:	f402 7240 	and.w	r2, r2, #768	; 0x300
90004ec0:	429a      	cmp	r2, r3
90004ec2:	f43f ae8e 	beq.w	90004be2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90004ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
90004ec8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90004eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
90004ece:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90004ed2:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
90004ed4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
90004ed6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90004eda:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
90004edc:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
90004ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90004ee0:	07d8      	lsls	r0, r3, #31
90004ee2:	f57f ae7e 	bpl.w	90004be2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
90004ee6:	f7fd fdf1 	bl	90002acc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90004eea:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
90004eee:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90004ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90004ef2:	0799      	lsls	r1, r3, #30
90004ef4:	f53f ae75 	bmi.w	90004be2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90004ef8:	f7fd fde8 	bl	90002acc <HAL_GetTick>
90004efc:	eba0 0008 	sub.w	r0, r0, r8
90004f00:	4548      	cmp	r0, r9
90004f02:	d9f5      	bls.n	90004ef0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
90004f04:	e7d6      	b.n	90004eb4 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90004f06:	6891      	ldr	r1, [r2, #8]
90004f08:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
90004f0c:	e679      	b.n	90004c02 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
90004f0e:	4e49      	ldr	r6, [pc, #292]	; (90005034 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004f10:	6833      	ldr	r3, [r6, #0]
90004f12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90004f16:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90004f18:	f7fd fdd8 	bl	90002acc <HAL_GetTick>
90004f1c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
90004f1e:	6833      	ldr	r3, [r6, #0]
90004f20:	011b      	lsls	r3, r3, #4
90004f22:	d472      	bmi.n	9000500a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
90004f24:	6822      	ldr	r2, [r4, #0]
90004f26:	07d7      	lsls	r7, r2, #31
90004f28:	d512      	bpl.n	90004f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>
90004f2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
90004f2c:	b983      	cbnz	r3, 90004f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004f2e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90004f32:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
90004f36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004f3a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
90004f3e:	430b      	orrs	r3, r1
90004f40:	6861      	ldr	r1, [r4, #4]
90004f42:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90004f46:	68a1      	ldr	r1, [r4, #8]
90004f48:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
90004f4c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
90004f50:	0316      	lsls	r6, r2, #12
90004f52:	d503      	bpl.n	90004f5c <HAL_RCCEx_PeriphCLKConfig+0x438>
90004f54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90004f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90004f5a:	d005      	beq.n	90004f68 <HAL_RCCEx_PeriphCLKConfig+0x444>
90004f5c:	02d0      	lsls	r0, r2, #11
90004f5e:	d51e      	bpl.n	90004f9e <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
90004f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
90004f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90004f66:	d11a      	bne.n	90004f9e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90004f68:	4932      	ldr	r1, [pc, #200]	; (90005034 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004f6a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90004f6e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
90004f72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90004f76:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004f7a:	4303      	orrs	r3, r0
90004f7c:	6860      	ldr	r0, [r4, #4]
90004f7e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004f82:	68e0      	ldr	r0, [r4, #12]
90004f84:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
90004f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
90004f8c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
90004f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
90004f92:	f020 001f 	bic.w	r0, r0, #31
90004f96:	3b01      	subs	r3, #1
90004f98:	4303      	orrs	r3, r0
90004f9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90004f9e:	01d1      	lsls	r1, r2, #7
90004fa0:	d511      	bpl.n	90004fc6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90004fa2:	4924      	ldr	r1, [pc, #144]	; (90005034 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004fa4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
90004fa8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
90004fac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90004fb0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90004fb4:	4303      	orrs	r3, r0
90004fb6:	6860      	ldr	r0, [r4, #4]
90004fb8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90004fbc:	6920      	ldr	r0, [r4, #16]
90004fbe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90004fc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
90004fc6:	0192      	lsls	r2, r2, #6
90004fc8:	d50d      	bpl.n	90004fe6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
90004fca:	6923      	ldr	r3, [r4, #16]
90004fcc:	6862      	ldr	r2, [r4, #4]
90004fce:	041b      	lsls	r3, r3, #16
90004fd0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90004fd4:	68e2      	ldr	r2, [r4, #12]
90004fd6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90004fda:	68a2      	ldr	r2, [r4, #8]
90004fdc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
90004fe0:	4a14      	ldr	r2, [pc, #80]	; (90005034 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004fe2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
90004fe6:	4e13      	ldr	r6, [pc, #76]	; (90005034 <HAL_RCCEx_PeriphCLKConfig+0x510>)
90004fe8:	6833      	ldr	r3, [r6, #0]
90004fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90004fee:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90004ff0:	f7fd fd6c 	bl	90002acc <HAL_GetTick>
90004ff4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
90004ff6:	6833      	ldr	r3, [r6, #0]
90004ff8:	011b      	lsls	r3, r3, #4
90004ffa:	f53f aed8 	bmi.w	90004dae <HAL_RCCEx_PeriphCLKConfig+0x28a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90004ffe:	f7fd fd65 	bl	90002acc <HAL_GetTick>
90005002:	1bc0      	subs	r0, r0, r7
90005004:	2864      	cmp	r0, #100	; 0x64
90005006:	d9f6      	bls.n	90004ff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90005008:	e754      	b.n	90004eb4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
9000500a:	f7fd fd5f 	bl	90002acc <HAL_GetTick>
9000500e:	1bc0      	subs	r0, r0, r7
90005010:	2864      	cmp	r0, #100	; 0x64
90005012:	d984      	bls.n	90004f1e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
90005014:	e74e      	b.n	90004eb4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90005016:	f7fd fd59 	bl	90002acc <HAL_GetTick>
9000501a:	1b80      	subs	r0, r0, r6
9000501c:	2864      	cmp	r0, #100	; 0x64
9000501e:	f67f aed0 	bls.w	90004dc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
90005022:	e747      	b.n	90004eb4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90005024:	f7fd fd52 	bl	90002acc <HAL_GetTick>
90005028:	1b40      	subs	r0, r0, r5
9000502a:	2864      	cmp	r0, #100	; 0x64
9000502c:	f67f af33 	bls.w	90004e96 <HAL_RCCEx_PeriphCLKConfig+0x372>
90005030:	e740      	b.n	90004eb4 <HAL_RCCEx_PeriphCLKConfig+0x390>
90005032:	bf00      	nop
90005034:	40023800 	.word	0x40023800

90005038 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
90005038:	4b53      	ldr	r3, [pc, #332]	; (90005188 <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
9000503a:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
9000503c:	4b53      	ldr	r3, [pc, #332]	; (9000518c <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
9000503e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90005042:	f3c2 1288 	ubfx	r2, r2, #6, #9
90005046:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
90005048:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
9000504c:	f3c2 4201 	ubfx	r2, r2, #16, #2
90005050:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90005052:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90005056:	f3c2 6203 	ubfx	r2, r2, #24, #4
9000505a:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
9000505c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90005060:	f3c2 7202 	ubfx	r2, r2, #28, #3
90005064:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
90005066:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
9000506a:	f3c2 1288 	ubfx	r2, r2, #6, #9
9000506e:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90005070:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
90005074:	f3c2 4201 	ubfx	r2, r2, #16, #2
90005078:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
9000507a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
9000507e:	f3c2 6203 	ubfx	r2, r2, #24, #4
90005082:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90005084:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
90005088:	f3c2 7202 	ubfx	r2, r2, #28, #3
9000508c:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
9000508e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
90005092:	f002 021f 	and.w	r2, r2, #31
90005096:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
90005098:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
9000509c:	f3c2 2204 	ubfx	r2, r2, #8, #5
900050a0:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
900050a2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
900050a6:	f3c2 4201 	ubfx	r2, r2, #16, #2
900050aa:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
900050ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
900050b0:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
900050b4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
900050b6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
900050ba:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
900050be:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
900050c0:	689a      	ldr	r2, [r3, #8]
900050c2:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
900050c6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
900050c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050cc:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
900050d0:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
900050d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050d6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
900050da:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
900050dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050e0:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
900050e4:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
900050e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050ea:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
900050ee:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
900050f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050f4:	f002 0203 	and.w	r2, r2, #3
900050f8:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
900050fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
900050fe:	f002 020c 	and.w	r2, r2, #12
90005102:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
90005104:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90005108:	f002 0230 	and.w	r2, r2, #48	; 0x30
9000510c:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
9000510e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90005112:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
90005116:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
90005118:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000511c:	f402 7240 	and.w	r2, r2, #768	; 0x300
90005120:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
90005122:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90005126:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
9000512a:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
9000512c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90005130:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
90005134:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
90005136:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000513a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
9000513e:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
90005140:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90005144:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
90005148:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
9000514a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000514e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
90005152:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
90005154:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90005158:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
9000515c:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
9000515e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
90005162:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
90005166:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
9000516a:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
9000516c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
9000516e:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
90005172:	f402 7240 	and.w	r2, r2, #768	; 0x300
90005176:	430a      	orrs	r2, r1
90005178:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
9000517a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000517e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90005182:	6383      	str	r3, [r0, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
90005184:	4770      	bx	lr
90005186:	bf00      	nop
90005188:	00fffff1 	.word	0x00fffff1
9000518c:	40023800 	.word	0x40023800

90005190 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
90005190:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
90005194:	d140      	bne.n	90005218 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  {
    saiclocksource = RCC->DCKCFGR1;
90005196:	4b2e      	ldr	r3, [pc, #184]	; (90005250 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
90005198:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
9000519c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
900051a0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
900051a4:	d046      	beq.n	90005234 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
900051a6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
900051aa:	d04c      	beq.n	90005246 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
900051ac:	2a00      	cmp	r2, #0
900051ae:	d14c      	bne.n	9000524a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
900051b0:	685a      	ldr	r2, [r3, #4]
900051b2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
900051b6:	685a      	ldr	r2, [r3, #4]
900051b8:	bf08      	it	eq
900051ba:	4b26      	ldreq	r3, [pc, #152]	; (90005254 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
900051bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
900051c0:	bf18      	it	ne
900051c2:	4b25      	ldrne	r3, [pc, #148]	; (90005258 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
900051c4:	fbb3 f3f2 	udiv	r3, r3, r2
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
900051c8:	4a21      	ldr	r2, [pc, #132]	; (90005250 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
900051ca:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
900051ce:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
900051d2:	f3c0 1088 	ubfx	r0, r0, #6, #9
900051d6:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
900051d8:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
900051dc:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
900051e0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
900051e4:	f3c3 2304 	ubfx	r3, r3, #8, #5
900051e8:	e012      	b.n	90005210 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
900051ea:	4b1b      	ldr	r3, [pc, #108]	; (90005258 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
900051ec:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
900051f0:	4a17      	ldr	r2, [pc, #92]	; (90005250 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
900051f2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
900051f6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
900051fa:	f3c0 1088 	ubfx	r0, r0, #6, #9
900051fe:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
90005200:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
90005204:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
90005208:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
9000520c:	f003 031f 	and.w	r3, r3, #31
90005210:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
90005212:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
90005216:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
90005218:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
9000521c:	d115      	bne.n	9000524a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    saiclocksource = RCC->DCKCFGR1;
9000521e:	4b0c      	ldr	r3, [pc, #48]	; (90005250 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
90005220:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
90005224:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
90005228:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
9000522c:	d002      	beq.n	90005234 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
9000522e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
90005232:	e7ba      	b.n	900051aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
90005234:	685a      	ldr	r2, [r3, #4]
90005236:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
9000523a:	685a      	ldr	r2, [r3, #4]
9000523c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
90005240:	d1d3      	bne.n	900051ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
90005242:	4b04      	ldr	r3, [pc, #16]	; (90005254 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
90005244:	e7d2      	b.n	900051ec <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = frequency/(tmpreg);
        break;
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
90005246:	4805      	ldr	r0, [pc, #20]	; (9000525c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
90005248:	4770      	bx	lr
    switch (saiclocksource)
9000524a:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
9000524c:	4770      	bx	lr
9000524e:	bf00      	nop
90005250:	40023800 	.word	0x40023800
90005254:	00f42400 	.word	0x00f42400
90005258:	017d7840 	.word	0x017d7840
9000525c:	00bb8000 	.word	0x00bb8000

90005260 <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
  {
    tmpIT|= SAI_IT_FREQ;
90005260:	2901      	cmp	r1, #1
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
90005262:	6b01      	ldr	r1, [r0, #48]	; 0x30
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
90005264:	6842      	ldr	r2, [r0, #4]
    tmpIT|= SAI_IT_FREQ;
90005266:	bf14      	ite	ne
90005268:	2301      	movne	r3, #1
9000526a:	2309      	moveq	r3, #9
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
9000526c:	2908      	cmp	r1, #8
9000526e:	d105      	bne.n	9000527c <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
90005270:	f022 0102 	bic.w	r1, r2, #2
90005274:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
90005276:	bf08      	it	eq
90005278:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
9000527c:	3a02      	subs	r2, #2
9000527e:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
90005280:	bf94      	ite	ls
90005282:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
90005286:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
9000528a:	4770      	bx	lr

9000528c <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
9000528c:	4b0c      	ldr	r3, [pc, #48]	; (900052c0 <SAI_Disable.isra.0+0x34>)
9000528e:	f641 3258 	movw	r2, #7000	; 0x1b58
90005292:	681b      	ldr	r3, [r3, #0]
90005294:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
90005298:	6802      	ldr	r2, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
9000529a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
9000529c:	6811      	ldr	r1, [r2, #0]
9000529e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
900052a2:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
900052a4:	3b01      	subs	r3, #1
900052a6:	d206      	bcs.n	900052b6 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
900052a8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
900052ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900052b0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
900052b4:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
900052b6:	6811      	ldr	r1, [r2, #0]
900052b8:	03c9      	lsls	r1, r1, #15
900052ba:	d4f3      	bmi.n	900052a4 <SAI_Disable.isra.0+0x18>

  return status;
}
900052bc:	4770      	bx	lr
900052be:	bf00      	nop
900052c0:	200000b4 	.word	0x200000b4

900052c4 <HAL_SAI_MspInit>:
}
900052c4:	4770      	bx	lr
	...

900052c8 <HAL_SAI_Init>:
{
900052c8:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
900052ca:	4604      	mov	r4, r0
900052cc:	2800      	cmp	r0, #0
900052ce:	f000 80c3 	beq.w	90005458 <HAL_SAI_Init+0x190>
  if(hsai->State == HAL_SAI_STATE_RESET)
900052d2:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
900052d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900052da:	b91b      	cbnz	r3, 900052e4 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
900052dc:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
900052e0:	f7ff fff0 	bl	900052c4 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
900052e4:	2302      	movs	r3, #2
  SAI_Disable(hsai);
900052e6:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
900052e8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
900052ec:	f7ff ffce 	bl	9000528c <SAI_Disable.isra.0>
  switch(hsai->Init.SynchroExt)
900052f0:	68e3      	ldr	r3, [r4, #12]
900052f2:	2b01      	cmp	r3, #1
900052f4:	f000 80a0 	beq.w	90005438 <HAL_SAI_Init+0x170>
900052f8:	1e98      	subs	r0, r3, #2
900052fa:	4243      	negs	r3, r0
900052fc:	4143      	adcs	r3, r0
900052fe:	015b      	lsls	r3, r3, #5
  switch(hsai->Init.Synchro)
90005300:	68a5      	ldr	r5, [r4, #8]
90005302:	2d02      	cmp	r5, #2
90005304:	f000 809c 	beq.w	90005440 <HAL_SAI_Init+0x178>
90005308:	2d03      	cmp	r5, #3
9000530a:	f000 8097 	beq.w	9000543c <HAL_SAI_Init+0x174>
9000530e:	1e69      	subs	r1, r5, #1
90005310:	424d      	negs	r5, r1
90005312:	414d      	adcs	r5, r1
90005314:	02ad      	lsls	r5, r5, #10
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
90005316:	6822      	ldr	r2, [r4, #0]
90005318:	4950      	ldr	r1, [pc, #320]	; (9000545c <HAL_SAI_Init+0x194>)
9000531a:	4851      	ldr	r0, [pc, #324]	; (90005460 <HAL_SAI_Init+0x198>)
9000531c:	428a      	cmp	r2, r1
9000531e:	d003      	beq.n	90005328 <HAL_SAI_Init+0x60>
90005320:	4e50      	ldr	r6, [pc, #320]	; (90005464 <HAL_SAI_Init+0x19c>)
90005322:	42b2      	cmp	r2, r6
90005324:	f040 808f 	bne.w	90005446 <HAL_SAI_Init+0x17e>
    SAI1->GCR = tmpregisterGCR;
90005328:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
9000532c:	69e3      	ldr	r3, [r4, #28]
9000532e:	b313      	cbz	r3, 90005376 <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
90005330:	428a      	cmp	r2, r1
90005332:	d003      	beq.n	9000533c <HAL_SAI_Init+0x74>
90005334:	4b4b      	ldr	r3, [pc, #300]	; (90005464 <HAL_SAI_Init+0x19c>)
90005336:	429a      	cmp	r2, r3
90005338:	f040 8088 	bne.w	9000544c <HAL_SAI_Init+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
9000533c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
90005340:	f7ff ff26 	bl	90005190 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
90005344:	6823      	ldr	r3, [r4, #0]
90005346:	4a48      	ldr	r2, [pc, #288]	; (90005468 <HAL_SAI_Init+0x1a0>)
90005348:	4293      	cmp	r3, r2
9000534a:	d002      	beq.n	90005352 <HAL_SAI_Init+0x8a>
9000534c:	3220      	adds	r2, #32
9000534e:	4293      	cmp	r3, r2
90005350:	d103      	bne.n	9000535a <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
90005352:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
90005356:	f7ff ff1b 	bl	90005190 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
9000535a:	220a      	movs	r2, #10
9000535c:	69e3      	ldr	r3, [r4, #28]
9000535e:	4350      	muls	r0, r2
90005360:	025b      	lsls	r3, r3, #9
90005362:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
90005366:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
9000536a:	fb02 0013 	mls	r0, r2, r3, r0
9000536e:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
90005370:	bf08      	it	eq
90005372:	3301      	addeq	r3, #1
90005374:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
90005376:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
90005378:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
9000537a:	f033 0202 	bics.w	r2, r3, #2
9000537e:	d167      	bne.n	90005450 <HAL_SAI_Init+0x188>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
90005380:	3901      	subs	r1, #1
90005382:	bf18      	it	ne
90005384:	2101      	movne	r1, #1
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
90005386:	6822      	ldr	r2, [r4, #0]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
90005388:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
9000538a:	4838      	ldr	r0, [pc, #224]	; (9000546c <HAL_SAI_Init+0x1a4>)
9000538c:	6816      	ldr	r6, [r2, #0]
9000538e:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
90005390:	6b26      	ldr	r6, [r4, #48]	; 0x30
90005392:	4333      	orrs	r3, r6
90005394:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
90005396:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
90005398:	4333      	orrs	r3, r6
9000539a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
9000539c:	6810      	ldr	r0, [r2, #0]
9000539e:	4333      	orrs	r3, r6
900053a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
900053a2:	4333      	orrs	r3, r6
900053a4:	6926      	ldr	r6, [r4, #16]
900053a6:	4333      	orrs	r3, r6
900053a8:	6966      	ldr	r6, [r4, #20]
900053aa:	4333      	orrs	r3, r6
900053ac:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
900053ae:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
900053b0:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
900053b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
900053b6:	432b      	orrs	r3, r5
900053b8:	430b      	orrs	r3, r1
900053ba:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
900053bc:	6853      	ldr	r3, [r2, #4]
900053be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
900053c2:	f023 030f 	bic.w	r3, r3, #15
900053c6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
900053c8:	69a3      	ldr	r3, [r4, #24]
900053ca:	6851      	ldr	r1, [r2, #4]
900053cc:	4303      	orrs	r3, r0
900053ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
900053d0:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
900053d2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
900053d4:	430b      	orrs	r3, r1
900053d6:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
900053d8:	4b25      	ldr	r3, [pc, #148]	; (90005470 <HAL_SAI_Init+0x1a8>)
900053da:	6891      	ldr	r1, [r2, #8]
900053dc:	400b      	ands	r3, r1
900053de:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
900053e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
900053e2:	6891      	ldr	r1, [r2, #8]
900053e4:	4303      	orrs	r3, r0
900053e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
900053e8:	4303      	orrs	r3, r0
900053ea:	430b      	orrs	r3, r1
900053ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
900053ee:	3901      	subs	r1, #1
900053f0:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
900053f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
900053f4:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
900053f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
900053fa:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
900053fc:	68d3      	ldr	r3, [r2, #12]
900053fe:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
90005402:	f023 030f 	bic.w	r3, r3, #15
90005406:	041b      	lsls	r3, r3, #16
90005408:	0c1b      	lsrs	r3, r3, #16
9000540a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
9000540c:	68d1      	ldr	r1, [r2, #12]
9000540e:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
90005412:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90005414:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
90005416:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
90005418:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
9000541a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
9000541e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90005420:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
90005422:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90005426:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
90005428:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
9000542a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
9000542e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
90005432:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
90005436:	bd70      	pop	{r4, r5, r6, pc}
  switch(hsai->Init.SynchroExt)
90005438:	2310      	movs	r3, #16
9000543a:	e761      	b.n	90005300 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
9000543c:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
90005440:	f44f 6500 	mov.w	r5, #2048	; 0x800
90005444:	e767      	b.n	90005316 <HAL_SAI_Init+0x4e>
    SAI2->GCR = tmpregisterGCR;
90005446:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
9000544a:	e76f      	b.n	9000532c <HAL_SAI_Init+0x64>
    uint32_t freq = 0;
9000544c:	2000      	movs	r0, #0
9000544e:	e779      	b.n	90005344 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
90005450:	1e4a      	subs	r2, r1, #1
90005452:	4251      	negs	r1, r2
90005454:	4151      	adcs	r1, r2
90005456:	e796      	b.n	90005386 <HAL_SAI_Init+0xbe>
    return HAL_ERROR;
90005458:	2001      	movs	r0, #1
9000545a:	e7ec      	b.n	90005436 <HAL_SAI_Init+0x16e>
9000545c:	40015804 	.word	0x40015804
90005460:	40015000 	.word	0x40015000
90005464:	40015824 	.word	0x40015824
90005468:	40015c04 	.word	0x40015c04
9000546c:	ff05c010 	.word	0xff05c010
90005470:	fff88000 	.word	0xfff88000

90005474 <HAL_SAI_MspDeInit>:
90005474:	4770      	bx	lr

90005476 <HAL_SAI_DeInit>:
{
90005476:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
90005478:	4605      	mov	r5, r0
9000547a:	b1c0      	cbz	r0, 900054ae <HAL_SAI_DeInit+0x38>
  hsai->State = HAL_SAI_STATE_BUSY;
9000547c:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
9000547e:	6806      	ldr	r6, [r0, #0]
90005480:	2400      	movs	r4, #0
  hsai->State = HAL_SAI_STATE_BUSY;
90005482:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
90005486:	f04f 33ff 	mov.w	r3, #4294967295
  hsai->Instance->IMR = 0;
9000548a:	6134      	str	r4, [r6, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
9000548c:	61b3      	str	r3, [r6, #24]
  SAI_Disable(hsai);
9000548e:	f7ff fefd 	bl	9000528c <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
90005492:	6873      	ldr	r3, [r6, #4]
90005494:	f043 0308 	orr.w	r3, r3, #8
90005498:	6073      	str	r3, [r6, #4]
  HAL_SAI_MspDeInit(hsai);
9000549a:	f7ff ffeb 	bl	90005474 <HAL_SAI_MspDeInit>
  return HAL_OK;
9000549e:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
900054a0:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  __HAL_UNLOCK(hsai);
900054a4:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
900054a8:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d
}
900054ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
900054ae:	2001      	movs	r0, #1
900054b0:	e7fc      	b.n	900054ac <HAL_SAI_DeInit+0x36>

900054b2 <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
900054b2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
900054b6:	2b01      	cmp	r3, #1
900054b8:	d009      	beq.n	900054ce <HAL_SAI_DMAPause+0x1c>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
900054ba:	6802      	ldr	r2, [r0, #0]
900054bc:	6813      	ldr	r3, [r2, #0]
900054be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
900054c2:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hsai);
900054c4:	2300      	movs	r3, #0
900054c6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
900054ca:	4618      	mov	r0, r3
900054cc:	4770      	bx	lr
  __HAL_LOCK(hsai);
900054ce:	2002      	movs	r0, #2
}
900054d0:	4770      	bx	lr

900054d2 <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
900054d2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
900054d6:	2b01      	cmp	r3, #1
900054d8:	d010      	beq.n	900054fc <HAL_SAI_DMAResume+0x2a>
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
900054da:	6803      	ldr	r3, [r0, #0]
900054dc:	681a      	ldr	r2, [r3, #0]
900054de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
900054e2:	601a      	str	r2, [r3, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
900054e4:	681a      	ldr	r2, [r3, #0]
900054e6:	03d2      	lsls	r2, r2, #15
900054e8:	d403      	bmi.n	900054f2 <HAL_SAI_DMAResume+0x20>
    __HAL_SAI_ENABLE(hsai);
900054ea:	681a      	ldr	r2, [r3, #0]
900054ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
900054f0:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hsai);
900054f2:	2300      	movs	r3, #0
900054f4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
900054f8:	4618      	mov	r0, r3
900054fa:	4770      	bx	lr
  __HAL_LOCK(hsai);
900054fc:	2002      	movs	r0, #2
}
900054fe:	4770      	bx	lr

90005500 <HAL_SAI_DMAStop>:
{
90005500:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
90005502:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
90005506:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
90005508:	2b01      	cmp	r3, #1
9000550a:	d041      	beq.n	90005590 <HAL_SAI_DMAStop+0x90>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
9000550c:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
9000550e:	2501      	movs	r5, #1
90005510:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
90005514:	6813      	ldr	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
90005516:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
90005518:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
9000551c:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
9000551e:	bb20      	cbnz	r0, 9000556a <HAL_SAI_DMAStop+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
90005520:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
90005522:	6f20      	ldr	r0, [r4, #112]	; 0x70
90005524:	b188      	cbz	r0, 9000554a <HAL_SAI_DMAStop+0x4a>
90005526:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
9000552a:	2b22      	cmp	r3, #34	; 0x22
9000552c:	d10d      	bne.n	9000554a <HAL_SAI_DMAStop+0x4a>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
9000552e:	f7fd fc46 	bl	90002dbe <HAL_DMA_Abort>
90005532:	b150      	cbz	r0, 9000554a <HAL_SAI_DMAStop+0x4a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
90005534:	6f23      	ldr	r3, [r4, #112]	; 0x70
90005536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005538:	2b80      	cmp	r3, #128	; 0x80
9000553a:	d006      	beq.n	9000554a <HAL_SAI_DMAStop+0x4a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
9000553c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
90005540:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
90005542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90005546:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  SAI_Disable(hsai);
9000554a:	4620      	mov	r0, r4
9000554c:	f7ff fe9e 	bl	9000528c <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
90005550:	6822      	ldr	r2, [r4, #0]
90005552:	6853      	ldr	r3, [r2, #4]
90005554:	f043 0308 	orr.w	r3, r3, #8
90005558:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
9000555a:	2301      	movs	r3, #1
9000555c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
90005560:	2300      	movs	r3, #0
90005562:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
90005566:	4628      	mov	r0, r5
90005568:	bd38      	pop	{r3, r4, r5, pc}
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
9000556a:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
9000556e:	2b12      	cmp	r3, #18
90005570:	d1d6      	bne.n	90005520 <HAL_SAI_DMAStop+0x20>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
90005572:	f7fd fc24 	bl	90002dbe <HAL_DMA_Abort>
90005576:	2800      	cmp	r0, #0
90005578:	d0d2      	beq.n	90005520 <HAL_SAI_DMAStop+0x20>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
9000557a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
9000557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000557e:	2b80      	cmp	r3, #128	; 0x80
90005580:	d0ce      	beq.n	90005520 <HAL_SAI_DMAStop+0x20>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
90005582:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
90005586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000558a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
9000558e:	e7c8      	b.n	90005522 <HAL_SAI_DMAStop+0x22>
  __HAL_LOCK(hsai);
90005590:	2502      	movs	r5, #2
90005592:	e7e8      	b.n	90005566 <HAL_SAI_DMAStop+0x66>

90005594 <HAL_SAI_Transmit_DMA>:
{
90005594:	b570      	push	{r4, r5, r6, lr}
90005596:	4613      	mov	r3, r2
90005598:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
9000559a:	2900      	cmp	r1, #0
9000559c:	d03f      	beq.n	9000561e <HAL_SAI_Transmit_DMA+0x8a>
9000559e:	2b00      	cmp	r3, #0
900055a0:	d03d      	beq.n	9000561e <HAL_SAI_Transmit_DMA+0x8a>
  if(hsai->State == HAL_SAI_STATE_READY)
900055a2:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
900055a6:	2801      	cmp	r0, #1
900055a8:	b2c5      	uxtb	r5, r0
900055aa:	d13a      	bne.n	90005622 <HAL_SAI_Transmit_DMA+0x8e>
    __HAL_LOCK(hsai);
900055ac:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
900055b0:	2801      	cmp	r0, #1
900055b2:	d036      	beq.n	90005622 <HAL_SAI_Transmit_DMA+0x8e>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
900055b4:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
900055b6:	2212      	movs	r2, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
900055b8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
900055ba:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
900055be:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
900055c2:	4a19      	ldr	r2, [pc, #100]	; (90005628 <HAL_SAI_Transmit_DMA+0x94>)
    __HAL_LOCK(hsai);
900055c4:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
900055c8:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
900055ca:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
900055ce:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
900055d2:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
900055d4:	4a15      	ldr	r2, [pc, #84]	; (9000562c <HAL_SAI_Transmit_DMA+0x98>)
900055d6:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
900055d8:	4a15      	ldr	r2, [pc, #84]	; (90005630 <HAL_SAI_Transmit_DMA+0x9c>)
    hsai->hdmatx->XferAbortCallback = NULL;
900055da:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
900055de:	6822      	ldr	r2, [r4, #0]
900055e0:	321c      	adds	r2, #28
900055e2:	f7fd fbaf 	bl	90002d44 <HAL_DMA_Start_IT>
900055e6:	b118      	cbz	r0, 900055f0 <HAL_SAI_Transmit_DMA+0x5c>
      __HAL_UNLOCK(hsai);
900055e8:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
900055ec:	4628      	mov	r0, r5
900055ee:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
900055f0:	6825      	ldr	r5, [r4, #0]
900055f2:	682b      	ldr	r3, [r5, #0]
900055f4:	03db      	lsls	r3, r3, #15
900055f6:	d403      	bmi.n	90005600 <HAL_SAI_Transmit_DMA+0x6c>
      __HAL_SAI_ENABLE(hsai);
900055f8:	682b      	ldr	r3, [r5, #0]
900055fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900055fe:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
90005600:	2100      	movs	r1, #0
90005602:	4620      	mov	r0, r4
90005604:	f7ff fe2c 	bl	90005260 <SAI_InterruptFlag>
90005608:	692b      	ldr	r3, [r5, #16]
9000560a:	4318      	orrs	r0, r3
9000560c:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
9000560e:	682b      	ldr	r3, [r5, #0]
90005610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005614:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
90005616:	2500      	movs	r5, #0
90005618:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
9000561c:	e7e6      	b.n	900055ec <HAL_SAI_Transmit_DMA+0x58>
    return  HAL_ERROR;
9000561e:	2501      	movs	r5, #1
90005620:	e7e4      	b.n	900055ec <HAL_SAI_Transmit_DMA+0x58>
    return HAL_BUSY;
90005622:	2502      	movs	r5, #2
90005624:	e7e2      	b.n	900055ec <HAL_SAI_Transmit_DMA+0x58>
90005626:	bf00      	nop
90005628:	9000570d 	.word	0x9000570d
9000562c:	900056d5 	.word	0x900056d5
90005630:	90005759 	.word	0x90005759

90005634 <HAL_SAI_Receive_DMA>:
{
90005634:	4613      	mov	r3, r2
  if((pData == NULL) || (Size == 0))
90005636:	460a      	mov	r2, r1
{
90005638:	b570      	push	{r4, r5, r6, lr}
9000563a:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
9000563c:	2900      	cmp	r1, #0
9000563e:	d03f      	beq.n	900056c0 <HAL_SAI_Receive_DMA+0x8c>
90005640:	2b00      	cmp	r3, #0
90005642:	d03d      	beq.n	900056c0 <HAL_SAI_Receive_DMA+0x8c>
  if(hsai->State == HAL_SAI_STATE_READY)
90005644:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
90005648:	2901      	cmp	r1, #1
9000564a:	b2cd      	uxtb	r5, r1
9000564c:	d13a      	bne.n	900056c4 <HAL_SAI_Receive_DMA+0x90>
    __HAL_LOCK(hsai);
9000564e:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
90005652:	2901      	cmp	r1, #1
90005654:	d036      	beq.n	900056c4 <HAL_SAI_Receive_DMA+0x90>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
90005656:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
90005658:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
9000565a:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
9000565e:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    hsai->pBuffPtr = pData;
90005662:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_RX;
90005664:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    hsai->XferSize = Size;
90005668:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
9000566c:	4916      	ldr	r1, [pc, #88]	; (900056c8 <HAL_SAI_Receive_DMA+0x94>)
    hsai->XferCount = Size;
9000566e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
90005672:	6f00      	ldr	r0, [r0, #112]	; 0x70
90005674:	6401      	str	r1, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
90005676:	4915      	ldr	r1, [pc, #84]	; (900056cc <HAL_SAI_Receive_DMA+0x98>)
90005678:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
9000567a:	4915      	ldr	r1, [pc, #84]	; (900056d0 <HAL_SAI_Receive_DMA+0x9c>)
    hsai->hdmarx->XferAbortCallback = NULL;
9000567c:	e9c0 1613 	strd	r1, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
90005680:	6821      	ldr	r1, [r4, #0]
90005682:	311c      	adds	r1, #28
90005684:	f7fd fb5e 	bl	90002d44 <HAL_DMA_Start_IT>
90005688:	b118      	cbz	r0, 90005692 <HAL_SAI_Receive_DMA+0x5e>
      __HAL_UNLOCK(hsai);
9000568a:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
9000568e:	4628      	mov	r0, r5
90005690:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
90005692:	6825      	ldr	r5, [r4, #0]
90005694:	682b      	ldr	r3, [r5, #0]
90005696:	03db      	lsls	r3, r3, #15
90005698:	d403      	bmi.n	900056a2 <HAL_SAI_Receive_DMA+0x6e>
      __HAL_SAI_ENABLE(hsai);
9000569a:	682b      	ldr	r3, [r5, #0]
9000569c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900056a0:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900056a2:	2100      	movs	r1, #0
900056a4:	4620      	mov	r0, r4
900056a6:	f7ff fddb 	bl	90005260 <SAI_InterruptFlag>
900056aa:	692b      	ldr	r3, [r5, #16]
900056ac:	4318      	orrs	r0, r3
900056ae:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
900056b0:	682b      	ldr	r3, [r5, #0]
900056b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900056b6:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
900056b8:	2500      	movs	r5, #0
900056ba:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
900056be:	e7e6      	b.n	9000568e <HAL_SAI_Receive_DMA+0x5a>
    return  HAL_ERROR;
900056c0:	2501      	movs	r5, #1
900056c2:	e7e4      	b.n	9000568e <HAL_SAI_Receive_DMA+0x5a>
    return HAL_BUSY;
900056c4:	2502      	movs	r5, #2
900056c6:	e7e2      	b.n	9000568e <HAL_SAI_Receive_DMA+0x5a>
900056c8:	9000574f 	.word	0x9000574f
900056cc:	90005717 	.word	0x90005717
900056d0:	90005759 	.word	0x90005759

900056d4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
900056d4:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
900056d6:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
900056d8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
900056da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900056de:	d011      	beq.n	90005704 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
900056e0:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
900056e2:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900056e4:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
900056e6:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
900056e8:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
900056ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
900056f0:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900056f2:	f7ff fdb5 	bl	90005260 <SAI_InterruptFlag>
900056f6:	692b      	ldr	r3, [r5, #16]
900056f8:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State= HAL_SAI_STATE_READY;
900056fc:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
900056fe:	6128      	str	r0, [r5, #16]
    hsai->State= HAL_SAI_STATE_READY;
90005700:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
90005704:	4620      	mov	r0, r4
90005706:	f7fb fdab 	bl	90001260 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
9000570a:	bd38      	pop	{r3, r4, r5, pc}

9000570c <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
9000570c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
9000570e:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
90005710:	f7fb fdaa 	bl	90001268 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
90005714:	bd08      	pop	{r3, pc}

90005716 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
90005716:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
90005718:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
9000571a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
9000571c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005720:	d011      	beq.n	90005746 <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
90005722:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
90005724:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
90005726:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
90005728:	682b      	ldr	r3, [r5, #0]
9000572a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
9000572e:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
90005730:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
90005734:	f7ff fd94 	bl	90005260 <SAI_InterruptFlag>
90005738:	692b      	ldr	r3, [r5, #16]
9000573a:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
9000573e:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
90005740:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
90005742:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
90005746:	4620      	mov	r0, r4
90005748:	f7fb feee 	bl	90001528 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
9000574c:	bd38      	pop	{r3, r4, r5, pc}

9000574e <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
9000574e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
90005750:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
90005752:	f7fb feed 	bl	90001530 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
90005756:	bd08      	pop	{r3, pc}

90005758 <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
90005758:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
9000575a:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
9000575c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
90005760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90005764:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
90005768:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
9000576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000576c:	2b01      	cmp	r3, #1
9000576e:	d003      	beq.n	90005778 <SAI_DMAError+0x20>
90005770:	6f03      	ldr	r3, [r0, #112]	; 0x70
90005772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005774:	2b01      	cmp	r3, #1
90005776:	d10c      	bne.n	90005792 <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
90005778:	6802      	ldr	r2, [r0, #0]
9000577a:	6813      	ldr	r3, [r2, #0]
9000577c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
90005780:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
90005782:	f7ff fd83 	bl	9000528c <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
90005786:	2301      	movs	r3, #1
90005788:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
9000578c:	2300      	movs	r3, #0
9000578e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
90005792:	f7fb fed3 	bl	9000153c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
90005796:	bd08      	pop	{r3, pc}

90005798 <HAL_SAI_GetState>:
  return hsai->State;
90005798:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
9000579c:	4770      	bx	lr

9000579e <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
9000579e:	4770      	bx	lr

900057a0 <HAL_SDRAM_Init>:
{   
900057a0:	b538      	push	{r3, r4, r5, lr}
900057a2:	460d      	mov	r5, r1
  if(hsdram == NULL)
900057a4:	4604      	mov	r4, r0
900057a6:	b1c8      	cbz	r0, 900057dc <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
900057a8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
900057ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900057b0:	b91b      	cbnz	r3, 900057ba <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
900057b2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
900057b6:	f7ff fff2 	bl	9000579e <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900057ba:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900057bc:	1d21      	adds	r1, r4, #4
900057be:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900057c0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900057c4:	f000 f836 	bl	90005834 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
900057c8:	6862      	ldr	r2, [r4, #4]
900057ca:	4629      	mov	r1, r5
900057cc:	6820      	ldr	r0, [r4, #0]
900057ce:	f000 f869 	bl	900058a4 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
900057d2:	2301      	movs	r3, #1
  return HAL_OK;
900057d4:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
900057d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
900057da:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
900057dc:	2001      	movs	r0, #1
900057de:	e7fc      	b.n	900057da <HAL_SDRAM_Init+0x3a>

900057e0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
900057e0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
900057e2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
900057e6:	4604      	mov	r4, r0
900057e8:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
900057ea:	2b02      	cmp	r3, #2
900057ec:	b2d8      	uxtb	r0, r3
900057ee:	d00d      	beq.n	9000580c <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900057f0:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900057f2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900057f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900057f8:	f000 f896 	bl	90005928 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
900057fc:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
900057fe:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
90005800:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90005802:	bf0c      	ite	eq
90005804:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
90005806:	2301      	movne	r3, #1
90005808:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000580c:	bd38      	pop	{r3, r4, r5, pc}

9000580e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000580e:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90005810:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
90005814:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90005816:	2b02      	cmp	r3, #2
90005818:	b2d8      	uxtb	r0, r3
9000581a:	d009      	beq.n	90005830 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000581c:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
9000581e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90005820:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
90005824:	f000 f893 	bl	9000594e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90005828:	2301      	movs	r3, #1
  
  return HAL_OK;   
9000582a:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
9000582c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90005830:	bd10      	pop	{r4, pc}
	...

90005834 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
90005834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
                        Init->RowBitsNumber      |\
90005838:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
                        Init->MemoryDataWidth    |\
                        Init->InternalBankNumber |\
                        Init->CASLatency         |\
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
9000583c:	e9d1 3907 	ldrd	r3, r9, [r1, #28]
                        Init->ReadPipeDelay
90005840:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
90005844:	f8df e058 	ldr.w	lr, [pc, #88]	; 900058a0 <FMC_SDRAM_Init+0x6c>
90005848:	ea43 0309 	orr.w	r3, r3, r9
                        Init->InternalBankNumber |\
9000584c:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
                        Init->WriteProtection    |\
90005850:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
90005854:	6809      	ldr	r1, [r1, #0]
90005856:	2901      	cmp	r1, #1
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
90005858:	6801      	ldr	r1, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
9000585a:	d00f      	beq.n	9000587c <FMC_SDRAM_Init+0x48>
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000585c:	ea43 0308 	orr.w	r3, r3, r8
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90005860:	ea01 010e 	and.w	r1, r1, lr
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005864:	4313      	orrs	r3, r2
90005866:	ea43 030c 	orr.w	r3, r3, ip
9000586a:	433b      	orrs	r3, r7
9000586c:	4333      	orrs	r3, r6
9000586e:	432b      	orrs	r3, r5
90005870:	4323      	orrs	r3, r4
90005872:	430b      	orrs	r3, r1
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90005874:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
90005876:	2000      	movs	r0, #0
90005878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000587c:	ea42 020c 	orr.w	r2, r2, ip
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
90005880:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
90005884:	ea43 0308 	orr.w	r3, r3, r8
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005888:	433a      	orrs	r2, r7
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
9000588a:	430b      	orrs	r3, r1
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
9000588c:	6841      	ldr	r1, [r0, #4]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
9000588e:	4332      	orrs	r2, r6
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
90005890:	ea01 010e 	and.w	r1, r1, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
90005894:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
90005896:	432a      	orrs	r2, r5
90005898:	4322      	orrs	r2, r4
9000589a:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
9000589c:	6042      	str	r2, [r0, #4]
9000589e:	e7ea      	b.n	90005876 <FMC_SDRAM_Init+0x42>
900058a0:	ffff8000 	.word	0xffff8000

900058a4 <FMC_SDRAM_Timing_Init>:
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
900058a4:	68cb      	ldr	r3, [r1, #12]
  if (Bank != FMC_SDRAM_BANK2) 
900058a6:	2a01      	cmp	r2, #1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
900058a8:	6882      	ldr	r2, [r0, #8]
                       (((Timing->RowCycleDelay)-1) << 12)       |\
900058aa:	f103 3cff 	add.w	ip, r3, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
900058ae:	694b      	ldr	r3, [r1, #20]
{
900058b0:	b5f0      	push	{r4, r5, r6, r7, lr}
                       (((Timing->RPDelay)-1) << 20)             |\
900058b2:	f103 33ff 	add.w	r3, r3, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900058b6:	680f      	ldr	r7, [r1, #0]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
900058b8:	684c      	ldr	r4, [r1, #4]
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
900058ba:	688e      	ldr	r6, [r1, #8]
                       (((Timing->RPDelay)-1) << 20)             |\
900058bc:	ea4f 5303 	mov.w	r3, r3, lsl #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
900058c0:	690d      	ldr	r5, [r1, #16]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
900058c2:	f104 34ff 	add.w	r4, r4, #4294967295
                       (((Timing->RCDDelay)-1) << 24));
900058c6:	6989      	ldr	r1, [r1, #24]
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
900058c8:	f106 36ff 	add.w	r6, r6, #4294967295
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
900058cc:	f105 35ff 	add.w	r5, r5, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900058d0:	f107 37ff 	add.w	r7, r7, #4294967295
                       (((Timing->RCDDelay)-1) << 24));
900058d4:	f101 31ff 	add.w	r1, r1, #4294967295
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
900058d8:	ea4f 1404 	mov.w	r4, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
900058dc:	ea4f 2606 	mov.w	r6, r6, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
900058e0:	ea4f 4505 	mov.w	r5, r5, lsl #16
                       (((Timing->RCDDelay)-1) << 24));
900058e4:	ea4f 6101 	mov.w	r1, r1, lsl #24
900058e8:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
900058ec:	d00a      	beq.n	90005904 <FMC_SDRAM_Timing_Init+0x60>
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900058ee:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
900058f0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
900058f4:	4323      	orrs	r3, r4
900058f6:	4333      	orrs	r3, r6
900058f8:	432b      	orrs	r3, r5
900058fa:	430b      	orrs	r3, r1
900058fc:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
900058fe:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
90005900:	2000      	movs	r0, #0
90005902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
90005904:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
90005908:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
9000590c:	4313      	orrs	r3, r2
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
9000590e:	68c2      	ldr	r2, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90005910:	f002 4c70 	and.w	ip, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90005914:	ea44 0206 	orr.w	r2, r4, r6
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
90005918:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000591a:	433a      	orrs	r2, r7
9000591c:	432a      	orrs	r2, r5
9000591e:	430a      	orrs	r2, r1
90005920:	ea42 020c 	orr.w	r2, r2, ip
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
90005924:	60c2      	str	r2, [r0, #12]
90005926:	e7eb      	b.n	90005900 <FMC_SDRAM_Timing_Init+0x5c>

90005928 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
90005928:	e9d1 3200 	ldrd	r3, r2, [r1]
{
9000592c:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
9000592e:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
90005930:	68ca      	ldr	r2, [r1, #12]
  __IO uint32_t tmpr = 0;
90005932:	2400      	movs	r4, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
90005934:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
90005938:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
9000593a:	9401      	str	r4, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
9000593c:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
9000593e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
90005942:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
90005944:	9b01      	ldr	r3, [sp, #4]
90005946:	6103      	str	r3, [r0, #16]
  
  return HAL_OK;  
}
90005948:	4620      	mov	r0, r4
9000594a:	b002      	add	sp, #8
9000594c:	bd10      	pop	{r4, pc}

9000594e <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
9000594e:	6943      	ldr	r3, [r0, #20]
90005950:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
90005954:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
90005956:	2000      	movs	r0, #0
90005958:	4770      	bx	lr
	...

9000595c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
9000595c:	4b0a      	ldr	r3, [pc, #40]	; (90005988 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
9000595e:	3b01      	subs	r3, #1
90005960:	d00f      	beq.n	90005982 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90005962:	6902      	ldr	r2, [r0, #16]
90005964:	2a00      	cmp	r2, #0
90005966:	dafa      	bge.n	9000595e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
90005968:	6903      	ldr	r3, [r0, #16]
9000596a:	4a07      	ldr	r2, [pc, #28]	; (90005988 <USB_CoreReset+0x2c>)
9000596c:	f043 0301 	orr.w	r3, r3, #1
90005970:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
90005972:	3a01      	subs	r2, #1
90005974:	d005      	beq.n	90005982 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
90005976:	6903      	ldr	r3, [r0, #16]
90005978:	f013 0301 	ands.w	r3, r3, #1
9000597c:	d1f9      	bne.n	90005972 <USB_CoreReset+0x16>

  return HAL_OK;
9000597e:	4618      	mov	r0, r3
90005980:	4770      	bx	lr
      return HAL_TIMEOUT;
90005982:	2003      	movs	r0, #3
}
90005984:	4770      	bx	lr
90005986:	bf00      	nop
90005988:	00030d41 	.word	0x00030d41

9000598c <USB_CoreInit>:
{
9000598c:	b084      	sub	sp, #16
9000598e:	b538      	push	{r3, r4, r5, lr}
90005990:	ad05      	add	r5, sp, #20
90005992:	4604      	mov	r4, r0
90005994:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
90005998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9000599a:	2b01      	cmp	r3, #1
9000599c:	d126      	bne.n	900059ec <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
9000599e:	6b83      	ldr	r3, [r0, #56]	; 0x38
900059a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900059a4:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
900059a6:	68c3      	ldr	r3, [r0, #12]
900059a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
900059ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
900059b0:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
900059b2:	68c3      	ldr	r3, [r0, #12]
900059b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
900059b8:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
900059ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
900059bc:	2b01      	cmp	r3, #1
900059be:	d103      	bne.n	900059c8 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
900059c0:	68c3      	ldr	r3, [r0, #12]
900059c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
900059c6:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
900059c8:	4620      	mov	r0, r4
900059ca:	f7ff ffc7 	bl	9000595c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
900059ce:	9b08      	ldr	r3, [sp, #32]
900059d0:	2b01      	cmp	r3, #1
900059d2:	d107      	bne.n	900059e4 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
900059d4:	68a3      	ldr	r3, [r4, #8]
900059d6:	f043 0306 	orr.w	r3, r3, #6
900059da:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
900059dc:	68a3      	ldr	r3, [r4, #8]
900059de:	f043 0320 	orr.w	r3, r3, #32
900059e2:	60a3      	str	r3, [r4, #8]
}
900059e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
900059e8:	b004      	add	sp, #16
900059ea:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
900059ec:	68c3      	ldr	r3, [r0, #12]
900059ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900059f2:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
900059f4:	f7ff ffb2 	bl	9000595c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
900059f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
900059fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900059fe:	63a3      	str	r3, [r4, #56]	; 0x38
90005a00:	e7e5      	b.n	900059ce <USB_CoreInit+0x42>

90005a02 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
90005a02:	6883      	ldr	r3, [r0, #8]
90005a04:	f043 0301 	orr.w	r3, r3, #1
90005a08:	6083      	str	r3, [r0, #8]
}
90005a0a:	2000      	movs	r0, #0
90005a0c:	4770      	bx	lr

90005a0e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005a0e:	6883      	ldr	r3, [r0, #8]
90005a10:	f023 0301 	bic.w	r3, r3, #1
90005a14:	6083      	str	r3, [r0, #8]
}
90005a16:	2000      	movs	r0, #0
90005a18:	4770      	bx	lr

90005a1a <USB_SetCurrentMode>:
{
90005a1a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
90005a1c:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
90005a1e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
90005a20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
90005a24:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
90005a26:	d108      	bne.n	90005a3a <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
90005a28:	68c3      	ldr	r3, [r0, #12]
90005a2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
90005a2e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
90005a30:	2032      	movs	r0, #50	; 0x32
90005a32:	f7fd f851 	bl	90002ad8 <HAL_Delay>
  return HAL_OK;
90005a36:	2000      	movs	r0, #0
}
90005a38:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
90005a3a:	b919      	cbnz	r1, 90005a44 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
90005a3c:	68c3      	ldr	r3, [r0, #12]
90005a3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90005a42:	e7f4      	b.n	90005a2e <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
90005a44:	2001      	movs	r0, #1
90005a46:	e7f7      	b.n	90005a38 <USB_SetCurrentMode+0x1e>

90005a48 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
90005a48:	0189      	lsls	r1, r1, #6
90005a4a:	4a07      	ldr	r2, [pc, #28]	; (90005a68 <USB_FlushTxFifo+0x20>)
90005a4c:	f041 0120 	orr.w	r1, r1, #32
90005a50:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
90005a52:	3a01      	subs	r2, #1
90005a54:	d005      	beq.n	90005a62 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
90005a56:	6903      	ldr	r3, [r0, #16]
90005a58:	f013 0320 	ands.w	r3, r3, #32
90005a5c:	d1f9      	bne.n	90005a52 <USB_FlushTxFifo+0xa>
  return HAL_OK;
90005a5e:	4618      	mov	r0, r3
90005a60:	4770      	bx	lr
      return HAL_TIMEOUT;
90005a62:	2003      	movs	r0, #3
}
90005a64:	4770      	bx	lr
90005a66:	bf00      	nop
90005a68:	00030d41 	.word	0x00030d41

90005a6c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
90005a6c:	2310      	movs	r3, #16
90005a6e:	4a06      	ldr	r2, [pc, #24]	; (90005a88 <USB_FlushRxFifo+0x1c>)
90005a70:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
90005a72:	3a01      	subs	r2, #1
90005a74:	d005      	beq.n	90005a82 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
90005a76:	6903      	ldr	r3, [r0, #16]
90005a78:	f013 0310 	ands.w	r3, r3, #16
90005a7c:	d1f9      	bne.n	90005a72 <USB_FlushRxFifo+0x6>
  return HAL_OK;
90005a7e:	4618      	mov	r0, r3
90005a80:	4770      	bx	lr
      return HAL_TIMEOUT;
90005a82:	2003      	movs	r0, #3
}
90005a84:	4770      	bx	lr
90005a86:	bf00      	nop
90005a88:	00030d41 	.word	0x00030d41

90005a8c <USB_WritePacket>:
{
90005a8c:	b510      	push	{r4, lr}
90005a8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
90005a92:	b944      	cbnz	r4, 90005aa6 <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
90005a94:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
90005a96:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
90005a98:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
90005a9a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
90005a9e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
90005aa2:	428b      	cmp	r3, r1
90005aa4:	d101      	bne.n	90005aaa <USB_WritePacket+0x1e>
}
90005aa6:	2000      	movs	r0, #0
90005aa8:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
90005aaa:	f851 2b04 	ldr.w	r2, [r1], #4
90005aae:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
90005ab0:	e7f7      	b.n	90005aa2 <USB_WritePacket+0x16>

90005ab2 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
90005ab2:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
90005ab4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
90005ab8:	0892      	lsrs	r2, r2, #2
90005aba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
90005abe:	4291      	cmp	r1, r2
90005ac0:	d101      	bne.n	90005ac6 <USB_ReadPacket+0x14>
}
90005ac2:	4608      	mov	r0, r1
90005ac4:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
90005ac6:	6803      	ldr	r3, [r0, #0]
90005ac8:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
90005acc:	e7f7      	b.n	90005abe <USB_ReadPacket+0xc>

90005ace <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
90005ace:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
90005ad0:	6980      	ldr	r0, [r0, #24]
}
90005ad2:	4010      	ands	r0, r2
90005ad4:	4770      	bx	lr

90005ad6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
90005ad6:	6940      	ldr	r0, [r0, #20]
}
90005ad8:	f000 0001 	and.w	r0, r0, #1
90005adc:	4770      	bx	lr

90005ade <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90005ade:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
90005ae2:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90005ae4:	f500 6280 	add.w	r2, r0, #1024	; 0x400
90005ae8:	f023 0303 	bic.w	r3, r3, #3
{
90005aec:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90005aee:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
90005af2:	f001 0303 	and.w	r3, r1, #3
90005af6:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
90005afa:	ea43 0304 	orr.w	r3, r3, r4
90005afe:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
90005b02:	d104      	bne.n	90005b0e <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
90005b04:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
90005b08:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
90005b0a:	2000      	movs	r0, #0
90005b0c:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
90005b0e:	2902      	cmp	r1, #2
90005b10:	d1fb      	bne.n	90005b0a <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
90005b12:	f241 7370 	movw	r3, #6000	; 0x1770
90005b16:	e7f7      	b.n	90005b08 <USB_InitFSLSPClkSel+0x2a>

90005b18 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
90005b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
90005b1a:	2500      	movs	r5, #0
{
90005b1c:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
90005b1e:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
90005b20:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
90005b24:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
90005b26:	9b01      	ldr	r3, [sp, #4]
90005b28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
90005b2c:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
90005b2e:	9b01      	ldr	r3, [sp, #4]
90005b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90005b34:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
90005b38:	2064      	movs	r0, #100	; 0x64
90005b3a:	f7fc ffcd 	bl	90002ad8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
90005b3e:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
90005b40:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
90005b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90005b46:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
90005b4a:	f7fc ffc5 	bl	90002ad8 <HAL_Delay>

  return HAL_OK;
}
90005b4e:	4628      	mov	r0, r5
90005b50:	b003      	add	sp, #12
90005b52:	bd30      	pop	{r4, r5, pc}

90005b54 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
90005b54:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
90005b56:	2300      	movs	r3, #0
90005b58:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
90005b5a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
90005b5e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
90005b60:	9b01      	ldr	r3, [sp, #4]
90005b62:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
90005b66:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
90005b68:	9b01      	ldr	r3, [sp, #4]
90005b6a:	04da      	lsls	r2, r3, #19
90005b6c:	d406      	bmi.n	90005b7c <USB_DriveVbus+0x28>
90005b6e:	2901      	cmp	r1, #1
90005b70:	d104      	bne.n	90005b7c <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
90005b72:	9b01      	ldr	r3, [sp, #4]
90005b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90005b78:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
90005b7c:	9b01      	ldr	r3, [sp, #4]
90005b7e:	04db      	lsls	r3, r3, #19
90005b80:	d505      	bpl.n	90005b8e <USB_DriveVbus+0x3a>
90005b82:	b921      	cbnz	r1, 90005b8e <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
90005b84:	9b01      	ldr	r3, [sp, #4]
90005b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90005b8a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
90005b8e:	2000      	movs	r0, #0
90005b90:	b002      	add	sp, #8
90005b92:	4770      	bx	lr

90005b94 <USB_HostInit>:
{
90005b94:	b084      	sub	sp, #16
90005b96:	b538      	push	{r3, r4, r5, lr}
90005b98:	4604      	mov	r4, r0
90005b9a:	a805      	add	r0, sp, #20
90005b9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
90005ba0:	2300      	movs	r3, #0
90005ba2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
90005ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90005ba8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
90005bac:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
90005bae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90005bb0:	05da      	lsls	r2, r3, #23
90005bb2:	d53f      	bpl.n	90005c34 <USB_HostInit+0xa0>
    if (cfg.speed == USBH_FSLS_SPEED)
90005bb4:	9b07      	ldr	r3, [sp, #28]
90005bb6:	2b01      	cmp	r3, #1
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
90005bb8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
90005bbc:	d13c      	bne.n	90005c38 <USB_HostInit+0xa4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
90005bbe:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
90005bc2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
90005bc6:	2110      	movs	r1, #16
90005bc8:	4620      	mov	r0, r4
90005bca:	f7ff ff3d 	bl	90005a48 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
90005bce:	4620      	mov	r0, r4
90005bd0:	f7ff ff4c 	bl	90005a6c <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
90005bd4:	2300      	movs	r3, #0
90005bd6:	9906      	ldr	r1, [sp, #24]
90005bd8:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
90005bdc:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
90005be0:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
90005be2:	4299      	cmp	r1, r3
90005be4:	d12b      	bne.n	90005c3e <USB_HostInit+0xaa>
  (void)USB_DriveVbus(USBx, 1U);
90005be6:	2101      	movs	r1, #1
90005be8:	4620      	mov	r0, r4
90005bea:	f7ff ffb3 	bl	90005b54 <USB_DriveVbus>
  HAL_Delay(200U);
90005bee:	20c8      	movs	r0, #200	; 0xc8
90005bf0:	f7fc ff72 	bl	90002ad8 <HAL_Delay>
  USBx->GINTMSK = 0U;
90005bf4:	2300      	movs	r3, #0
90005bf6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
90005bf8:	f04f 33ff 	mov.w	r3, #4294967295
90005bfc:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
90005bfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90005c00:	05db      	lsls	r3, r3, #23
90005c02:	d521      	bpl.n	90005c48 <USB_HostInit+0xb4>
    USBx->GRXFSIZ  = 0x200U;
90005c04:	f44f 7300 	mov.w	r3, #512	; 0x200
90005c08:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
90005c0a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
90005c0e:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
90005c10:	4b11      	ldr	r3, [pc, #68]	; (90005c58 <USB_HostInit+0xc4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
90005c12:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
90005c16:	9b08      	ldr	r3, [sp, #32]
90005c18:	b91b      	cbnz	r3, 90005c22 <USB_HostInit+0x8e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
90005c1a:	69a3      	ldr	r3, [r4, #24]
90005c1c:	f043 0310 	orr.w	r3, r3, #16
90005c20:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
90005c22:	69a2      	ldr	r2, [r4, #24]
}
90005c24:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
90005c26:	4b0d      	ldr	r3, [pc, #52]	; (90005c5c <USB_HostInit+0xc8>)
90005c28:	4313      	orrs	r3, r2
90005c2a:	61a3      	str	r3, [r4, #24]
}
90005c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90005c30:	b004      	add	sp, #16
90005c32:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
90005c34:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
90005c38:	f023 0304 	bic.w	r3, r3, #4
90005c3c:	e7c1      	b.n	90005bc2 <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
90005c3e:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
90005c40:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
90005c42:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
90005c44:	3220      	adds	r2, #32
90005c46:	e7cc      	b.n	90005be2 <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x80U;
90005c48:	2380      	movs	r3, #128	; 0x80
90005c4a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
90005c4c:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
90005c50:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
90005c52:	4b03      	ldr	r3, [pc, #12]	; (90005c60 <USB_HostInit+0xcc>)
90005c54:	e7dd      	b.n	90005c12 <USB_HostInit+0x7e>
90005c56:	bf00      	nop
90005c58:	00e00300 	.word	0x00e00300
90005c5c:	a3200008 	.word	0xa3200008
90005c60:	004000e0 	.word	0x004000e0

90005c64 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
90005c64:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
90005c66:	2300      	movs	r3, #0
90005c68:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
90005c6a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
90005c6e:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
90005c70:	9801      	ldr	r0, [sp, #4]
}
90005c72:	f3c0 4041 	ubfx	r0, r0, #17, #2
90005c76:	b002      	add	sp, #8
90005c78:	4770      	bx	lr

90005c7a <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
90005c7a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
90005c7e:	6880      	ldr	r0, [r0, #8]
}
90005c80:	b280      	uxth	r0, r0
90005c82:	4770      	bx	lr

90005c84 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
90005c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
90005c88:	eb00 1641 	add.w	r6, r0, r1, lsl #5
{
90005c8c:	4605      	mov	r5, r0
90005c8e:	f89d 701c 	ldrb.w	r7, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
90005c92:	f04f 30ff 	mov.w	r0, #4294967295
90005c96:	f506 64a0 	add.w	r4, r6, #1280	; 0x500
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
90005c9a:	fa4f fc82 	sxtb.w	ip, r2
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
90005c9e:	60a0      	str	r0, [r4, #8]
  switch (ep_type)
90005ca0:	2f03      	cmp	r7, #3
90005ca2:	d861      	bhi.n	90005d68 <USB_HC_Init+0xe4>
90005ca4:	e8df f007 	tbb	[pc, r7]
90005ca8:	4f025602 	.word	0x4f025602
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005cac:	f240 409d 	movw	r0, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
90005cb0:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005cb4:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
90005cb6:	da03      	bge.n	90005cc0 <USB_HC_Init+0x3c>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
90005cb8:	68e0      	ldr	r0, [r4, #12]
90005cba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
90005cbe:	e040      	b.n	90005d42 <USB_HC_Init+0xbe>
        if ((USBx->CID & (0x1U << 8)) != 0U)
90005cc0:	6be8      	ldr	r0, [r5, #60]	; 0x3c
90005cc2:	05c0      	lsls	r0, r0, #23
90005cc4:	d43a      	bmi.n	90005d3c <USB_HC_Init+0xb8>
  HAL_StatusTypeDef ret = HAL_OK;
90005cc6:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
90005cc8:	f001 040f 	and.w	r4, r1, #15
90005ccc:	2101      	movs	r1, #1
90005cce:	f8d5 8418 	ldr.w	r8, [r5, #1048]	; 0x418
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
90005cd2:	059b      	lsls	r3, r3, #22
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
90005cd4:	40a1      	lsls	r1, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
90005cd6:	02d2      	lsls	r2, r2, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
90005cd8:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
90005cdc:	f505 6e80 	add.w	lr, r5, #1024	; 0x400
90005ce0:	ea41 0108 	orr.w	r1, r1, r8
90005ce4:	f8c5 1418 	str.w	r1, [r5, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
90005ce8:	69a9      	ldr	r1, [r5, #24]
90005cea:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
90005cee:	61a9      	str	r1, [r5, #24]
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
90005cf0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
90005cf4:	f3c1 010a 	ubfx	r1, r1, #0, #11
90005cf8:	430b      	orrs	r3, r1
  if (speed == HPRT0_PRTSPD_LOW_SPEED)
90005cfa:	f89d 1018 	ldrb.w	r1, [sp, #24]
90005cfe:	1e8c      	subs	r4, r1, #2
90005d00:	4261      	negs	r1, r4
90005d02:	4161      	adcs	r1, r4

  if (ep_type == EP_TYPE_INTR)
90005d04:	2f03      	cmp	r7, #3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
90005d06:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
90005d0a:	f402 41f0 	and.w	r1, r2, #30720	; 0x7800
  if ((epnum & 0x80U) == 0x80U)
90005d0e:	ea4f 72dc 	mov.w	r2, ip, lsr #31
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
90005d12:	ea43 0301 	orr.w	r3, r3, r1
90005d16:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
90005d1a:	ea4f 4287 	mov.w	r2, r7, lsl #18
90005d1e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
90005d22:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
90005d26:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
90005d2a:	d105      	bne.n	90005d38 <USB_HC_Init+0xb4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
90005d2c:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
90005d30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
90005d34:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  }

  return ret;
}
90005d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
90005d3c:	68e0      	ldr	r0, [r4, #12]
90005d3e:	f040 0060 	orr.w	r0, r0, #96	; 0x60
90005d42:	60e0      	str	r0, [r4, #12]
90005d44:	e7bf      	b.n	90005cc6 <USB_HC_Init+0x42>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005d46:	f240 609d 	movw	r0, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
90005d4a:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005d4e:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
90005d50:	dab9      	bge.n	90005cc6 <USB_HC_Init+0x42>
90005d52:	e7b1      	b.n	90005cb8 <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005d54:	f240 2025 	movw	r0, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
90005d58:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
90005d5c:	60e0      	str	r0, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
90005d5e:	dab2      	bge.n	90005cc6 <USB_HC_Init+0x42>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
90005d60:	68e0      	ldr	r0, [r4, #12]
90005d62:	f440 70c0 	orr.w	r0, r0, #384	; 0x180
90005d66:	e7ec      	b.n	90005d42 <USB_HC_Init+0xbe>
  switch (ep_type)
90005d68:	2001      	movs	r0, #1
90005d6a:	e7ad      	b.n	90005cc8 <USB_HC_Init+0x44>

90005d6c <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
90005d6c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
90005d70:	6940      	ldr	r0, [r0, #20]
}
90005d72:	b280      	uxth	r0, r0
90005d74:	4770      	bx	lr

90005d76 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
90005d76:	eb00 1141 	add.w	r1, r0, r1, lsl #5
90005d7a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005d7e:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
90005d82:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
90005d86:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005d8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90005d8e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
90005d92:	d11e      	bne.n	90005dd2 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
90005d94:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90005d96:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005d9a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
90005d9e:	d137      	bne.n	90005e10 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90005da4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90005da8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90005db0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
90005db4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005db8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90005dbc:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
90005dc0:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
90005dc4:	3b01      	subs	r3, #1
90005dc6:	d002      	beq.n	90005dce <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90005dc8:	6811      	ldr	r1, [r2, #0]
90005dca:	2900      	cmp	r1, #0
90005dcc:	dbfa      	blt.n	90005dc4 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
90005dce:	2000      	movs	r0, #0
90005dd0:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
90005dd2:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
90005dd6:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005dda:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
90005dde:	d117      	bne.n	90005e10 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90005de0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90005de4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90005de8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90005df0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
90005df4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
90005df8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90005dfc:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
90005e00:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
90005e04:	3b01      	subs	r3, #1
90005e06:	d0e2      	beq.n	90005dce <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90005e08:	6811      	ldr	r1, [r2, #0]
90005e0a:	2900      	cmp	r1, #0
90005e0c:	dbfa      	blt.n	90005e04 <USB_HC_Halt+0x8e>
90005e0e:	e7de      	b.n	90005dce <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90005e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90005e14:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
90005e18:	e7d9      	b.n	90005dce <USB_HC_Halt+0x58>
	...

90005e1c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
90005e1c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
90005e20:	4a06      	ldr	r2, [pc, #24]	; (90005e3c <USB_DoPing+0x20>)
90005e22:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
90005e26:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005e2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
90005e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
90005e32:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

  return HAL_OK;
}
90005e36:	2000      	movs	r0, #0
90005e38:	4770      	bx	lr
90005e3a:	bf00      	nop
90005e3c:	80080000 	.word	0x80080000

90005e40 <USB_HC_StartXfer>:
{
90005e40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90005e44:	4613      	mov	r3, r2
90005e46:	460c      	mov	r4, r1
  uint32_t ch_num = (uint32_t)hc->ch_num;
90005e48:	784a      	ldrb	r2, [r1, #1]
{
90005e4a:	4606      	mov	r6, r0
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
90005e4c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90005e4e:	05c9      	lsls	r1, r1, #23
90005e50:	d517      	bpl.n	90005e82 <USB_HC_StartXfer+0x42>
90005e52:	7925      	ldrb	r5, [r4, #4]
90005e54:	b9ad      	cbnz	r5, 90005e82 <USB_HC_StartXfer+0x42>
    if ((dma == 0U) && (hc->do_ping == 1U))
90005e56:	b94b      	cbnz	r3, 90005e6c <USB_HC_StartXfer+0x2c>
90005e58:	7961      	ldrb	r1, [r4, #5]
90005e5a:	2901      	cmp	r1, #1
90005e5c:	d111      	bne.n	90005e82 <USB_HC_StartXfer+0x42>
      (void)USB_DoPing(USBx, hc->ch_num);
90005e5e:	4611      	mov	r1, r2
90005e60:	f7ff ffdc 	bl	90005e1c <USB_DoPing>
}
90005e64:	2000      	movs	r0, #0
90005e66:	b002      	add	sp, #8
90005e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
90005e6c:	2b01      	cmp	r3, #1
90005e6e:	d108      	bne.n	90005e82 <USB_HC_StartXfer+0x42>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
90005e70:	eb00 1142 	add.w	r1, r0, r2, lsl #5
90005e74:	f8d1 050c 	ldr.w	r0, [r1, #1292]	; 0x50c
90005e78:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90005e7c:	f8c1 050c 	str.w	r0, [r1, #1292]	; 0x50c
      hc->do_ping = 0U;
90005e80:	7165      	strb	r5, [r4, #5]
  if (hc->xfer_len > 0U)
90005e82:	6925      	ldr	r5, [r4, #16]
90005e84:	2d00      	cmp	r5, #0
90005e86:	d064      	beq.n	90005f52 <USB_HC_StartXfer+0x112>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
90005e88:	8921      	ldrh	r1, [r4, #8]
90005e8a:	3d01      	subs	r5, #1
90005e8c:	440d      	add	r5, r1
90005e8e:	fbb5 f5f1 	udiv	r5, r5, r1
90005e92:	b2ad      	uxth	r5, r5
    if (num_packets > max_hc_pkt_count)
90005e94:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90005e98:	d903      	bls.n	90005ea2 <USB_HC_StartXfer+0x62>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
90005e9a:	0209      	lsls	r1, r1, #8
      num_packets = max_hc_pkt_count;
90005e9c:	f44f 7580 	mov.w	r5, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
90005ea0:	6121      	str	r1, [r4, #16]
  if (hc->ep_is_in != 0U)
90005ea2:	f894 c003 	ldrb.w	ip, [r4, #3]
90005ea6:	f1bc 0f00 	cmp.w	ip, #0
90005eaa:	d002      	beq.n	90005eb2 <USB_HC_StartXfer+0x72>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
90005eac:	8921      	ldrh	r1, [r4, #8]
90005eae:	4369      	muls	r1, r5
90005eb0:	6121      	str	r1, [r4, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
90005eb2:	7aa0      	ldrb	r0, [r4, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005eb4:	eb06 1742 	add.w	r7, r6, r2, lsl #5
90005eb8:	6921      	ldr	r1, [r4, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
90005eba:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005ebc:	f3c1 0812 	ubfx	r8, r1, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
90005ec0:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
90005ec4:	ea40 0008 	orr.w	r0, r0, r8
90005ec8:	ea40 40c5 	orr.w	r0, r0, r5, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
90005ecc:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510
  if (dma != 0U)
90005ed0:	b113      	cbz	r3, 90005ed8 <USB_HC_StartXfer+0x98>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
90005ed2:	68e0      	ldr	r0, [r4, #12]
90005ed4:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
90005ed8:	f8d6 0408 	ldr.w	r0, [r6, #1032]	; 0x408
90005edc:	f506 6580 	add.w	r5, r6, #1024	; 0x400
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
90005ee0:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
90005ee4:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
90005ee6:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
90005eea:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
90005eec:	f8c7 e500 	str.w	lr, [r7, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
90005ef0:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
90005ef4:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
90005ef8:	ea40 000e 	orr.w	r0, r0, lr
90005efc:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
90005f00:	f8d7 e500 	ldr.w	lr, [r7, #1280]	; 0x500
90005f04:	4824      	ldr	r0, [pc, #144]	; (90005f98 <USB_HC_StartXfer+0x158>)
90005f06:	f8c0 e000 	str.w	lr, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005f0a:	f8d0 e000 	ldr.w	lr, [r0]
90005f0e:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
90005f12:	f8c0 e000 	str.w	lr, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
90005f16:	f8d0 e000 	ldr.w	lr, [r0]
  if (hc->ep_is_in != 0U)
90005f1a:	f1bc 0f00 	cmp.w	ip, #0
90005f1e:	d01a      	beq.n	90005f56 <USB_HC_StartXfer+0x116>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
90005f20:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
90005f24:	f8c0 e000 	str.w	lr, [r0]
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
90005f28:	ea5c 0c03 	orrs.w	ip, ip, r3
  tmpreg |= USB_OTG_HCCHAR_CHENA;
90005f2c:	f8d0 e000 	ldr.w	lr, [r0]
90005f30:	f04e 4e00 	orr.w	lr, lr, #2147483648	; 0x80000000
90005f34:	f8c0 e000 	str.w	lr, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
90005f38:	6800      	ldr	r0, [r0, #0]
90005f3a:	f8c7 0500 	str.w	r0, [r7, #1280]	; 0x500
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
90005f3e:	d191      	bne.n	90005e64 <USB_HC_StartXfer+0x24>
90005f40:	2900      	cmp	r1, #0
90005f42:	d08f      	beq.n	90005e64 <USB_HC_StartXfer+0x24>
      switch (hc->ep_type)
90005f44:	79e3      	ldrb	r3, [r4, #7]
90005f46:	2b03      	cmp	r3, #3
90005f48:	d813      	bhi.n	90005f72 <USB_HC_StartXfer+0x132>
90005f4a:	e8df f003 	tbb	[pc, r3]
90005f4e:	1a07      	.short	0x1a07
90005f50:	1a07      	.short	0x1a07
    num_packets = 1U;
90005f52:	2501      	movs	r5, #1
90005f54:	e7a5      	b.n	90005ea2 <USB_HC_StartXfer+0x62>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
90005f56:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
90005f5a:	e7e3      	b.n	90005f24 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
90005f5c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
90005f5e:	1ccb      	adds	r3, r1, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
90005f60:	b280      	uxth	r0, r0
90005f62:	f3c3 038f 	ubfx	r3, r3, #2, #16
90005f66:	4298      	cmp	r0, r3
90005f68:	d203      	bcs.n	90005f72 <USB_HC_StartXfer+0x132>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
90005f6a:	69b3      	ldr	r3, [r6, #24]
90005f6c:	f043 0320 	orr.w	r3, r3, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
90005f70:	61b3      	str	r3, [r6, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
90005f72:	2300      	movs	r3, #0
90005f74:	4630      	mov	r0, r6
90005f76:	9300      	str	r3, [sp, #0]
90005f78:	b28b      	uxth	r3, r1
90005f7a:	68e1      	ldr	r1, [r4, #12]
90005f7c:	f7ff fd86 	bl	90005a8c <USB_WritePacket>
90005f80:	e770      	b.n	90005e64 <USB_HC_StartXfer+0x24>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
90005f82:	6928      	ldr	r0, [r5, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
90005f84:	1ccb      	adds	r3, r1, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
90005f86:	b280      	uxth	r0, r0
90005f88:	f3c3 038f 	ubfx	r3, r3, #2, #16
90005f8c:	4298      	cmp	r0, r3
90005f8e:	d2f0      	bcs.n	90005f72 <USB_HC_StartXfer+0x132>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
90005f90:	69b3      	ldr	r3, [r6, #24]
90005f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90005f96:	e7eb      	b.n	90005f70 <USB_HC_StartXfer+0x130>
90005f98:	20000750 	.word	0x20000750

90005f9c <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005f9c:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
90005f9e:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005fa0:	f023 0301 	bic.w	r3, r3, #1
{
90005fa4:	b510      	push	{r4, lr}
90005fa6:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
90005fa8:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
90005faa:	f7ff fd4d 	bl	90005a48 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
90005fae:	4620      	mov	r0, r4
90005fb0:	f7ff fd5c 	bl	90005a6c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
90005fb4:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
90005fb8:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);
90005fbc:	4619      	mov	r1, r3
  {
    value = USBx_HC(i)->HCCHAR;
90005fbe:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
90005fc0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
90005fc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
90005fc8:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
90005fcc:	4281      	cmp	r1, r0
90005fce:	d1f6      	bne.n	90005fbe <USB_StopHost+0x22>
  uint32_t count = 0U;
90005fd0:	2100      	movs	r1, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
90005fd2:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
90005fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90005fd8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
90005fdc:	601a      	str	r2, [r3, #0]

    do
    {
      if (++count > 1000U)
90005fde:	3101      	adds	r1, #1
90005fe0:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
90005fe4:	d802      	bhi.n	90005fec <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90005fe6:	681a      	ldr	r2, [r3, #0]
90005fe8:	2a00      	cmp	r2, #0
90005fea:	dbf8      	blt.n	90005fde <USB_StopHost+0x42>
  for (i = 0U; i <= 15U; i++)
90005fec:	3320      	adds	r3, #32
90005fee:	4283      	cmp	r3, r0
90005ff0:	d1ef      	bne.n	90005fd2 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
90005ff2:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
90005ff6:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
90005ff8:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
90005ffc:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
90005ffe:	68a3      	ldr	r3, [r4, #8]
90006000:	f043 0301 	orr.w	r3, r3, #1
90006004:	60a3      	str	r3, [r4, #8]
}
90006006:	bd10      	pop	{r4, pc}

90006008 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
90006008:	2000      	movs	r0, #0
9000600a:	4770      	bx	lr

9000600c <USBH_MSC_Process>:
{
9000600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000600e:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006012:	4607      	mov	r7, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006014:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->state)
90006016:	7b23      	ldrb	r3, [r4, #12]
90006018:	b123      	cbz	r3, 90006024 <USBH_MSC_Process+0x18>
9000601a:	2b01      	cmp	r3, #1
9000601c:	f000 816d 	beq.w	900062fa <USBH_MSC_Process+0x2ee>
  USBH_StatusTypeDef error = USBH_BUSY;
90006020:	2001      	movs	r0, #1
            break;
90006022:	e0fb      	b.n	9000621c <USBH_MSC_Process+0x210>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
90006024:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
90006028:	2501      	movs	r5, #1
9000602a:	7822      	ldrb	r2, [r4, #0]
9000602c:	428a      	cmp	r2, r1
9000602e:	f240 815c 	bls.w	900062ea <USBH_MSC_Process+0x2de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
90006032:	2634      	movs	r6, #52	; 0x34
90006034:	fb06 4301 	mla	r3, r6, r1, r4
90006038:	f883 5091 	strb.w	r5, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
9000603c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
90006040:	2b08      	cmp	r3, #8
90006042:	d8ed      	bhi.n	90006020 <USBH_MSC_Process+0x14>
90006044:	a201      	add	r2, pc, #4	; (adr r2, 9000604c <USBH_MSC_Process+0x40>)
90006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000604a:	bf00      	nop
9000604c:	90006071 	.word	0x90006071
90006050:	90006021 	.word	0x90006021
90006054:	900060fb 	.word	0x900060fb
90006058:	900061a3 	.word	0x900061a3
9000605c:	90006097 	.word	0x90006097
90006060:	9000622f 	.word	0x9000622f
90006064:	90006021 	.word	0x90006021
90006068:	90006021 	.word	0x90006021
9000606c:	900062e3 	.word	0x900062e3
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
90006070:	48a3      	ldr	r0, [pc, #652]	; (90006300 <USBH_MSC_Process+0x2f4>)
90006072:	f005 fa73 	bl	9000b55c <iprintf>
90006076:	200a      	movs	r0, #10
90006078:	f005 fa82 	bl	9000b580 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
9000607c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006080:	2234      	movs	r2, #52	; 0x34
90006082:	fb02 4303 	mla	r3, r2, r3, r4
90006086:	2204      	movs	r2, #4
90006088:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
9000608c:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
90006090:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
            break;
90006094:	e7c4      	b.n	90006020 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
90006096:	fb06 4201 	mla	r2, r6, r1, r4
9000609a:	b2c9      	uxtb	r1, r1
9000609c:	329f      	adds	r2, #159	; 0x9f
9000609e:	f000 fc9b 	bl	900069d8 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
900060a2:	2800      	cmp	r0, #0
900060a4:	f040 80bb 	bne.w	9000621e <USBH_MSC_Process+0x212>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
900060a8:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
900060ac:	4895      	ldr	r0, [pc, #596]	; (90006304 <USBH_MSC_Process+0x2f8>)
900060ae:	fb06 4101 	mla	r1, r6, r1, r4
900060b2:	31a2      	adds	r1, #162	; 0xa2
900060b4:	f005 fa52 	bl	9000b55c <iprintf>
900060b8:	200a      	movs	r0, #10
900060ba:	f005 fa61 	bl	9000b580 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
900060be:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
900060c2:	4891      	ldr	r0, [pc, #580]	; (90006308 <USBH_MSC_Process+0x2fc>)
900060c4:	fb06 4101 	mla	r1, r6, r1, r4
900060c8:	31ab      	adds	r1, #171	; 0xab
900060ca:	f005 fa47 	bl	9000b55c <iprintf>
900060ce:	200a      	movs	r0, #10
900060d0:	f005 fa56 	bl	9000b580 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
900060d4:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
900060d8:	488c      	ldr	r0, [pc, #560]	; (9000630c <USBH_MSC_Process+0x300>)
900060da:	fb06 4101 	mla	r1, r6, r1, r4
900060de:	31bc      	adds	r1, #188	; 0xbc
900060e0:	f005 fa3c 	bl	9000b55c <iprintf>
900060e4:	200a      	movs	r0, #10
900060e6:	f005 fa4b 	bl	9000b580 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
900060ea:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900060ee:	2202      	movs	r2, #2
900060f0:	fb06 4303 	mla	r3, r6, r3, r4
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
900060f4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
900060f8:	e792      	b.n	90006020 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
900060fa:	b2c9      	uxtb	r1, r1
900060fc:	f000 fc14 	bl	90006928 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
90006100:	b9f8      	cbnz	r0, 90006142 <USBH_MSC_Process+0x136>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
90006102:	2234      	movs	r2, #52	; 0x34
90006104:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006108:	fb02 4303 	mla	r3, r2, r3, r4
9000610c:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
90006110:	b1a2      	cbz	r2, 9000613c <USBH_MSC_Process+0x130>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
90006112:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device ready");
90006114:	487e      	ldr	r0, [pc, #504]	; (90006310 <USBH_MSC_Process+0x304>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
90006116:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device ready");
9000611a:	f005 fa1f 	bl	9000b55c <iprintf>
9000611e:	200a      	movs	r0, #10
90006120:	f005 fa2e 	bl	9000b580 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
90006124:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006128:	2234      	movs	r2, #52	; 0x34
9000612a:	fb02 4303 	mla	r3, r2, r3, r4
9000612e:	2203      	movs	r2, #3
90006130:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
90006134:	2200      	movs	r2, #0
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
90006136:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
9000613a:	e771      	b.n	90006020 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
9000613c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
90006140:	e7f0      	b.n	90006124 <USBH_MSC_Process+0x118>
            if (ready_status == USBH_FAIL)
90006142:	2802      	cmp	r0, #2
90006144:	d120      	bne.n	90006188 <USBH_MSC_Process+0x17c>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
90006146:	2234      	movs	r2, #52	; 0x34
90006148:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000614c:	fb02 4303 	mla	r3, r2, r3, r4
90006150:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
90006154:	2a02      	cmp	r2, #2
90006156:	d013      	beq.n	90006180 <USBH_MSC_Process+0x174>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
90006158:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device NOT ready");
9000615a:	486e      	ldr	r0, [pc, #440]	; (90006314 <USBH_MSC_Process+0x308>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
9000615c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device NOT ready");
90006160:	f005 f9fc 	bl	9000b55c <iprintf>
90006164:	200a      	movs	r0, #10
90006166:	f005 fa0b 	bl	9000b580 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
9000616a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000616e:	2234      	movs	r2, #52	; 0x34
90006170:	fb02 4303 	mla	r3, r2, r3, r4
90006174:	f240 1205 	movw	r2, #261	; 0x105
90006178:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
9000617c:	2202      	movs	r2, #2
9000617e:	e7da      	b.n	90006136 <USBH_MSC_Process+0x12a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
90006180:	2200      	movs	r2, #0
90006182:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
90006186:	e7f0      	b.n	9000616a <USBH_MSC_Process+0x15e>
              if (ready_status == USBH_UNRECOVERED_ERROR)
90006188:	2804      	cmp	r0, #4
9000618a:	f47f af49 	bne.w	90006020 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
9000618e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006192:	2234      	movs	r2, #52	; 0x34
90006194:	fb02 4303 	mla	r3, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90006198:	f240 2201 	movw	r2, #513	; 0x201
9000619c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
900061a0:	e73e      	b.n	90006020 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
900061a2:	fb06 4201 	mla	r2, r6, r1, r4
900061a6:	b2c9      	uxtb	r1, r1
900061a8:	3294      	adds	r2, #148	; 0x94
900061aa:	f000 fbe0 	bl	9000696e <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
900061ae:	bbb0      	cbnz	r0, 9000621e <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
900061b0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900061b4:	fb06 4303 	mla	r3, r6, r3, r4
900061b8:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
900061bc:	2a01      	cmp	r2, #1
900061be:	d122      	bne.n	90006206 <USBH_MSC_Process+0x1fa>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
900061c0:	f8b3 2098 	ldrh.w	r2, [r3, #152]	; 0x98
900061c4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
900061c8:	4853      	ldr	r0, [pc, #332]	; (90006318 <USBH_MSC_Process+0x30c>)
900061ca:	4351      	muls	r1, r2
900061cc:	f005 f9c6 	bl	9000b55c <iprintf>
900061d0:	200a      	movs	r0, #10
900061d2:	f005 f9d5 	bl	9000b580 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
900061d6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900061da:	4850      	ldr	r0, [pc, #320]	; (9000631c <USBH_MSC_Process+0x310>)
900061dc:	fb06 4303 	mla	r3, r6, r3, r4
900061e0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
900061e4:	f005 f9ba 	bl	9000b55c <iprintf>
900061e8:	200a      	movs	r0, #10
900061ea:	f005 f9c9 	bl	9000b580 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
900061ee:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900061f2:	484b      	ldr	r0, [pc, #300]	; (90006320 <USBH_MSC_Process+0x314>)
900061f4:	fb06 4303 	mla	r3, r6, r3, r4
900061f8:	f8b3 1098 	ldrh.w	r1, [r3, #152]	; 0x98
900061fc:	f005 f9ae 	bl	9000b55c <iprintf>
90006200:	200a      	movs	r0, #10
90006202:	f005 f9bd 	bl	9000b580 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
90006206:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000620a:	2234      	movs	r2, #52	; 0x34
9000620c:	2001      	movs	r0, #1
9000620e:	fb02 4203 	mla	r2, r2, r3, r4
90006212:	f8a2 0090 	strh.w	r0, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
90006216:	4403      	add	r3, r0
90006218:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
}
9000621c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if (scsi_status == USBH_FAIL)
9000621e:	2802      	cmp	r0, #2
90006220:	d157      	bne.n	900062d2 <USBH_MSC_Process+0x2c6>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
90006222:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006226:	2205      	movs	r2, #5
90006228:	fb06 4303 	mla	r3, r6, r3, r4
9000622c:	e762      	b.n	900060f4 <USBH_MSC_Process+0xe8>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
9000622e:	fb06 4201 	mla	r2, r6, r1, r4
90006232:	b2c9      	uxtb	r1, r1
90006234:	329c      	adds	r2, #156	; 0x9c
90006236:	f000 fc2f 	bl	90006a98 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
9000623a:	bbe0      	cbnz	r0, 900062b6 <USBH_MSC_Process+0x2aa>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
9000623c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006240:	fb06 4303 	mla	r3, r6, r3, r4
90006244:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
90006248:	f001 00fb 	and.w	r0, r1, #251	; 0xfb
9000624c:	2802      	cmp	r0, #2
9000624e:	d10b      	bne.n	90006268 <USBH_MSC_Process+0x25c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
90006250:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
90006254:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
90006258:	1b52      	subs	r2, r2, r5
9000625a:	f242 750f 	movw	r5, #9999	; 0x270f
9000625e:	42aa      	cmp	r2, r5
90006260:	d802      	bhi.n	90006268 <USBH_MSC_Process+0x25c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
90006262:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
                  break;
90006266:	e6db      	b.n	90006020 <USBH_MSC_Process+0x14>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
90006268:	482e      	ldr	r0, [pc, #184]	; (90006324 <USBH_MSC_Process+0x318>)
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
9000626a:	2534      	movs	r5, #52	; 0x34
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
9000626c:	f005 f976 	bl	9000b55c <iprintf>
90006270:	200a      	movs	r0, #10
90006272:	f005 f985 	bl	9000b580 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
90006276:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
9000627a:	482b      	ldr	r0, [pc, #172]	; (90006328 <USBH_MSC_Process+0x31c>)
9000627c:	fb05 4303 	mla	r3, r5, r3, r4
90006280:	f893 109d 	ldrb.w	r1, [r3, #157]	; 0x9d
90006284:	f005 f96a 	bl	9000b55c <iprintf>
90006288:	200a      	movs	r0, #10
9000628a:	f005 f979 	bl	9000b580 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
9000628e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
90006292:	4826      	ldr	r0, [pc, #152]	; (9000632c <USBH_MSC_Process+0x320>)
90006294:	fb05 4303 	mla	r3, r5, r3, r4
90006298:	f893 109e 	ldrb.w	r1, [r3, #158]	; 0x9e
9000629c:	f005 f95e 	bl	9000b55c <iprintf>
900062a0:	200a      	movs	r0, #10
900062a2:	f005 f96d 	bl	9000b580 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
900062a6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900062aa:	2001      	movs	r0, #1
900062ac:	fb05 4503 	mla	r5, r5, r3, r4
900062b0:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
900062b4:	e7af      	b.n	90006216 <USBH_MSC_Process+0x20a>
            if (scsi_status == USBH_FAIL)
900062b6:	2802      	cmp	r0, #2
900062b8:	d10b      	bne.n	900062d2 <USBH_MSC_Process+0x2c6>
              USBH_UsrLog("MSC Device NOT ready");
900062ba:	4816      	ldr	r0, [pc, #88]	; (90006314 <USBH_MSC_Process+0x308>)
900062bc:	f005 f94e 	bl	9000b55c <iprintf>
900062c0:	200a      	movs	r0, #10
900062c2:	f005 f95d 	bl	9000b580 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
900062c6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900062ca:	2208      	movs	r2, #8
900062cc:	fb06 4303 	mla	r3, r6, r3, r4
900062d0:	e710      	b.n	900060f4 <USBH_MSC_Process+0xe8>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
900062d2:	2804      	cmp	r0, #4
900062d4:	f47f aea4 	bne.w	90006020 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
900062d8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
900062dc:	fb06 4303 	mla	r3, r6, r3, r4
900062e0:	e75a      	b.n	90006198 <USBH_MSC_Process+0x18c>
            MSC_Handle->current_lun++;
900062e2:	3101      	adds	r1, #1
900062e4:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
900062e8:	e69a      	b.n	90006020 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
900062ea:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
900062ee:	2102      	movs	r1, #2
        MSC_Handle->state = MSC_IDLE;
900062f0:	7325      	strb	r5, [r4, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
900062f2:	f8d0 34c0 	ldr.w	r3, [r0, #1216]	; 0x4c0
900062f6:	4798      	blx	r3
900062f8:	e692      	b.n	90006020 <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
900062fa:	2000      	movs	r0, #0
900062fc:	e78e      	b.n	9000621c <USBH_MSC_Process+0x210>
900062fe:	bf00      	nop
90006300:	90010848 	.word	0x90010848
90006304:	90010852 	.word	0x90010852
90006308:	90010867 	.word	0x90010867
9000630c:	9001087c 	.word	0x9001087c
90006310:	90010891 	.word	0x90010891
90006314:	900108a2 	.word	0x900108a2
90006318:	900108b7 	.word	0x900108b7
9000631c:	900108d7 	.word	0x900108d7
90006320:	900108ea 	.word	0x900108ea
90006324:	900108fd 	.word	0x900108fd
90006328:	9001090d 	.word	0x9001090d
9000632c:	90010928 	.word	0x90010928

90006330 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006330:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
90006334:	4603      	mov	r3, r0
90006336:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006338:	69d4      	ldr	r4, [r2, #28]
  switch (MSC_Handle->req_state)
9000633a:	7ba2      	ldrb	r2, [r4, #14]
9000633c:	2a02      	cmp	r2, #2
9000633e:	d002      	beq.n	90006346 <USBH_MSC_ClassRequest+0x16>
90006340:	2a03      	cmp	r2, #3
90006342:	d028      	beq.n	90006396 <USBH_MSC_ClassRequest+0x66>
90006344:	bb6a      	cbnz	r2, 900063a2 <USBH_MSC_ClassRequest+0x72>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
90006346:	4621      	mov	r1, r4
90006348:	4618      	mov	r0, r3
9000634a:	f000 f9ec 	bl	90006726 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
9000634e:	2803      	cmp	r0, #3
90006350:	d11e      	bne.n	90006390 <USBH_MSC_ClassRequest+0x60>
        MSC_Handle->max_lun = 0U;
90006352:	2300      	movs	r3, #0
90006354:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
90006356:	7821      	ldrb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
90006358:	4813      	ldr	r0, [pc, #76]	; (900063a8 <USBH_MSC_ClassRequest+0x78>)
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
9000635a:	2902      	cmp	r1, #2
9000635c:	bf96      	itet	ls
9000635e:	3101      	addls	r1, #1
90006360:	2102      	movhi	r1, #2
90006362:	b2c9      	uxtbls	r1, r1
90006364:	7021      	strb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
90006366:	f005 f8f9 	bl	9000b55c <iprintf>
9000636a:	200a      	movs	r0, #10
9000636c:	f005 f908 	bl	9000b580 <putchar>
        for (i = 0U; i < MSC_Handle->max_lun; i++)
90006370:	7821      	ldrb	r1, [r4, #0]
90006372:	b159      	cbz	r1, 9000638c <USBH_MSC_ClassRequest+0x5c>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
90006374:	2202      	movs	r2, #2
          MSC_Handle->unit[i].state_changed = 0U;
90006376:	2300      	movs	r3, #0
        for (i = 0U; i < MSC_Handle->max_lun; i++)
90006378:	2901      	cmp	r1, #1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
9000637a:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
9000637e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
90006382:	bf1c      	itt	ne
90006384:	f884 20c6 	strbne.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
90006388:	f884 30f5 	strbne.w	r3, [r4, #245]	; 0xf5
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
9000638c:	2000      	movs	r0, #0
9000638e:	e001      	b.n	90006394 <USBH_MSC_ClassRequest+0x64>
      if (status == USBH_OK)
90006390:	2800      	cmp	r0, #0
90006392:	d0e0      	beq.n	90006356 <USBH_MSC_ClassRequest+0x26>
}
90006394:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
90006396:	2100      	movs	r1, #0
90006398:	f001 fa3a 	bl	90007810 <USBH_ClrFeature>
9000639c:	b908      	cbnz	r0, 900063a2 <USBH_MSC_ClassRequest+0x72>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
9000639e:	7be3      	ldrb	r3, [r4, #15]
900063a0:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
900063a2:	2001      	movs	r0, #1
900063a4:	e7f6      	b.n	90006394 <USBH_MSC_ClassRequest+0x64>
900063a6:	bf00      	nop
900063a8:	9001094c 	.word	0x9001094c

900063ac <USBH_MSC_InterfaceDeInit>:
{
900063ac:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900063ae:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
900063b2:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900063b4:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
900063b6:	7969      	ldrb	r1, [r5, #5]
900063b8:	b139      	cbz	r1, 900063ca <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
900063ba:	f001 faa3 	bl	90007904 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
900063be:	7969      	ldrb	r1, [r5, #5]
900063c0:	4620      	mov	r0, r4
900063c2:	f001 fabc 	bl	9000793e <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
900063c6:	2300      	movs	r3, #0
900063c8:	716b      	strb	r3, [r5, #5]
  if (MSC_Handle->InPipe)
900063ca:	7929      	ldrb	r1, [r5, #4]
900063cc:	b141      	cbz	r1, 900063e0 <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
900063ce:	4620      	mov	r0, r4
900063d0:	f001 fa98 	bl	90007904 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
900063d4:	7929      	ldrb	r1, [r5, #4]
900063d6:	4620      	mov	r0, r4
900063d8:	f001 fab1 	bl	9000793e <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
900063dc:	2300      	movs	r3, #0
900063de:	712b      	strb	r3, [r5, #4]
  if (phost->pActiveClass->pData)
900063e0:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
900063e4:	69d8      	ldr	r0, [r3, #28]
900063e6:	b128      	cbz	r0, 900063f4 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
900063e8:	f004 ff42 	bl	9000b270 <free>
    phost->pActiveClass->pData = 0U;
900063ec:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
900063f0:	2200      	movs	r2, #0
900063f2:	61da      	str	r2, [r3, #28]
}
900063f4:	2000      	movs	r0, #0
900063f6:	bd38      	pop	{r3, r4, r5, pc}

900063f8 <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900063f8:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
900063fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900063fe:	69d2      	ldr	r2, [r2, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
90006400:	2634      	movs	r6, #52	; 0x34
90006402:	fb06 2401 	mla	r4, r6, r1, r2
90006406:	f894 5090 	ldrb.w	r5, [r4, #144]	; 0x90
9000640a:	2d06      	cmp	r5, #6
9000640c:	d005      	beq.n	9000641a <USBH_MSC_RdWrProcess+0x22>
9000640e:	2d07      	cmp	r5, #7
90006410:	d00e      	beq.n	90006430 <USBH_MSC_RdWrProcess+0x38>
90006412:	2d05      	cmp	r5, #5
90006414:	d018      	beq.n	90006448 <USBH_MSC_RdWrProcess+0x50>
  USBH_StatusTypeDef error = USBH_BUSY ;
90006416:	2001      	movs	r0, #1
90006418:	e008      	b.n	9000642c <USBH_MSC_RdWrProcess+0x34>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
9000641a:	2300      	movs	r3, #0
9000641c:	461a      	mov	r2, r3
9000641e:	9300      	str	r3, [sp, #0]
90006420:	f000 fbb6 	bl	90006b90 <USBH_MSC_SCSI_Read>
      break;

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);

      if (scsi_status == USBH_OK)
90006424:	b950      	cbnz	r0, 9000643c <USBH_MSC_RdWrProcess+0x44>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
90006426:	2301      	movs	r3, #1
90006428:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    default:
      break;

  }
  return error;
}
9000642c:	b002      	add	sp, #8
9000642e:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
90006430:	2300      	movs	r3, #0
90006432:	461a      	mov	r2, r3
90006434:	9300      	str	r3, [sp, #0]
90006436:	f000 fb6c 	bl	90006b12 <USBH_MSC_SCSI_Write>
9000643a:	e7f3      	b.n	90006424 <USBH_MSC_RdWrProcess+0x2c>
      else if (scsi_status == USBH_FAIL)
9000643c:	2802      	cmp	r0, #2
9000643e:	d130      	bne.n	900064a2 <USBH_MSC_RdWrProcess+0xaa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
90006440:	2305      	movs	r3, #5
90006442:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
90006446:	e7e6      	b.n	90006416 <USBH_MSC_RdWrProcess+0x1e>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
90006448:	fb06 2201 	mla	r2, r6, r1, r2
9000644c:	329c      	adds	r2, #156	; 0x9c
9000644e:	f000 fb23 	bl	90006a98 <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
90006452:	b9e8      	cbnz	r0, 90006490 <USBH_MSC_RdWrProcess+0x98>
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
90006454:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
90006458:	4815      	ldr	r0, [pc, #84]	; (900064b0 <USBH_MSC_RdWrProcess+0xb8>)
9000645a:	f005 f87f 	bl	9000b55c <iprintf>
9000645e:	200a      	movs	r0, #10
90006460:	f005 f88e 	bl	9000b580 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
90006464:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
90006468:	4812      	ldr	r0, [pc, #72]	; (900064b4 <USBH_MSC_RdWrProcess+0xbc>)
9000646a:	f005 f877 	bl	9000b55c <iprintf>
9000646e:	200a      	movs	r0, #10
90006470:	f005 f886 	bl	9000b580 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
90006474:	f894 109e 	ldrb.w	r1, [r4, #158]	; 0x9e
90006478:	480f      	ldr	r0, [pc, #60]	; (900064b8 <USBH_MSC_RdWrProcess+0xc0>)
9000647a:	f005 f86f 	bl	9000b55c <iprintf>
9000647e:	200a      	movs	r0, #10
90006480:	f005 f87e 	bl	9000b580 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
90006484:	f240 2301 	movw	r3, #513	; 0x201
90006488:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
9000648c:	2002      	movs	r0, #2
9000648e:	e7cd      	b.n	9000642c <USBH_MSC_RdWrProcess+0x34>
      if (scsi_status == USBH_FAIL)
90006490:	2802      	cmp	r0, #2
90006492:	d106      	bne.n	900064a2 <USBH_MSC_RdWrProcess+0xaa>
        USBH_UsrLog("MSC Device NOT ready");
90006494:	4809      	ldr	r0, [pc, #36]	; (900064bc <USBH_MSC_RdWrProcess+0xc4>)
90006496:	f005 f861 	bl	9000b55c <iprintf>
9000649a:	200a      	movs	r0, #10
9000649c:	f005 f870 	bl	9000b580 <putchar>
900064a0:	e7b9      	b.n	90006416 <USBH_MSC_RdWrProcess+0x1e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
900064a2:	2804      	cmp	r0, #4
900064a4:	d1b7      	bne.n	90006416 <USBH_MSC_RdWrProcess+0x1e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
900064a6:	2308      	movs	r3, #8
900064a8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
900064ac:	e7ee      	b.n	9000648c <USBH_MSC_RdWrProcess+0x94>
900064ae:	bf00      	nop
900064b0:	900108fd 	.word	0x900108fd
900064b4:	9001090d 	.word	0x9001090d
900064b8:	90010928 	.word	0x90010928
900064bc:	900108a2 	.word	0x900108a2

900064c0 <USBH_MSC_InterfaceInit>:
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
900064c0:	f8d0 1468 	ldr.w	r1, [r0, #1128]	; 0x468
900064c4:	2350      	movs	r3, #80	; 0x50
900064c6:	2206      	movs	r2, #6
{
900064c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
900064ca:	7909      	ldrb	r1, [r1, #4]
{
900064cc:	b085      	sub	sp, #20
900064ce:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
900064d0:	f000 fc4e 	bl	90006d70 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
900064d4:	4601      	mov	r1, r0
900064d6:	b118      	cbz	r0, 900064e0 <USBH_MSC_InterfaceInit+0x20>
    return USBH_FAIL;
900064d8:	2602      	movs	r6, #2
}
900064da:	4630      	mov	r0, r6
900064dc:	b005      	add	sp, #20
900064de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  status = USBH_SelectInterface(phost, interface);
900064e0:	4628      	mov	r0, r5
900064e2:	f000 fc01 	bl	90006ce8 <USBH_SelectInterface>
  if (status != USBH_OK)
900064e6:	4606      	mov	r6, r0
900064e8:	2800      	cmp	r0, #0
900064ea:	d1f5      	bne.n	900064d8 <USBH_MSC_InterfaceInit+0x18>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
900064ec:	f8d5 7468 	ldr.w	r7, [r5, #1128]	; 0x468
900064f0:	f44f 7080 	mov.w	r0, #256	; 0x100
900064f4:	f004 feb4 	bl	9000b260 <malloc>
900064f8:	4604      	mov	r4, r0
900064fa:	61f8      	str	r0, [r7, #28]
  if (MSC_Handle == NULL)
900064fc:	2800      	cmp	r0, #0
900064fe:	d0eb      	beq.n	900064d8 <USBH_MSC_InterfaceInit+0x18>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
90006500:	4631      	mov	r1, r6
90006502:	f44f 7280 	mov.w	r2, #256	; 0x100
90006506:	f005 f997 	bl	9000b838 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
9000650a:	f995 344e 	ldrsb.w	r3, [r5, #1102]	; 0x44e
9000650e:	f895 244e 	ldrb.w	r2, [r5, #1102]	; 0x44e
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
90006512:	4628      	mov	r0, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
90006514:	2b00      	cmp	r3, #0
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
90006516:	f995 1456 	ldrsb.w	r1, [r5, #1110]	; 0x456
9000651a:	f8b5 3450 	ldrh.w	r3, [r5, #1104]	; 0x450
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
9000651e:	f04f 0702 	mov.w	r7, #2
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
90006522:	bfae      	itee	ge
90006524:	71a2      	strbge	r2, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
90006526:	71e2      	strblt	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
90006528:	8163      	strhlt	r3, [r4, #10]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
9000652a:	f895 2456 	ldrb.w	r2, [r5, #1110]	; 0x456
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
9000652e:	bfa8      	it	ge
90006530:	8123      	strhge	r3, [r4, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
90006532:	2900      	cmp	r1, #0
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
90006534:	f8b5 3458 	ldrh.w	r3, [r5, #1112]	; 0x458
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
90006538:	bfa8      	it	ge
9000653a:	71a2      	strbge	r2, [r4, #6]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
9000653c:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
9000653e:	bfba      	itte	lt
90006540:	71e2      	strblt	r2, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
90006542:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
90006544:	8123      	strhge	r3, [r4, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
90006546:	f001 f9e2 	bl	9000790e <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
9000654a:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
9000654c:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
9000654e:	4628      	mov	r0, r5
90006550:	f001 f9dd 	bl	9000790e <USBH_AllocPipe>
90006554:	7120      	strb	r0, [r4, #4]
  USBH_MSC_BOT_Init(phost);
90006556:	4628      	mov	r0, r5
90006558:	f000 f8ee 	bl	90006738 <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
9000655c:	8923      	ldrh	r3, [r4, #8]
9000655e:	79a2      	ldrb	r2, [r4, #6]
90006560:	4628      	mov	r0, r5
90006562:	9302      	str	r3, [sp, #8]
90006564:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
90006568:	7961      	ldrb	r1, [r4, #5]
9000656a:	9300      	str	r3, [sp, #0]
9000656c:	9701      	str	r7, [sp, #4]
9000656e:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
90006572:	f001 f9b8 	bl	900078e6 <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
90006576:	8963      	ldrh	r3, [r4, #10]
90006578:	79e2      	ldrb	r2, [r4, #7]
9000657a:	4628      	mov	r0, r5
9000657c:	7921      	ldrb	r1, [r4, #4]
9000657e:	e9cd 7301 	strd	r7, r3, [sp, #4]
90006582:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
90006586:	9300      	str	r3, [sp, #0]
90006588:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
9000658c:	f001 f9ab 	bl	900078e6 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
90006590:	7921      	ldrb	r1, [r4, #4]
90006592:	2200      	movs	r2, #0
90006594:	4628      	mov	r0, r5
90006596:	f004 f931 	bl	9000a7fc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
9000659a:	2200      	movs	r2, #0
9000659c:	7961      	ldrb	r1, [r4, #5]
9000659e:	4628      	mov	r0, r5
900065a0:	f004 f92c 	bl	9000a7fc <USBH_LL_SetToggle>
  return USBH_OK;
900065a4:	e799      	b.n	900064da <USBH_MSC_InterfaceInit+0x1a>

900065a6 <USBH_MSC_IsReady>:
uint8_t  USBH_MSC_IsReady(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
900065a6:	7803      	ldrb	r3, [r0, #0]
900065a8:	2b0b      	cmp	r3, #11
900065aa:	d107      	bne.n	900065bc <USBH_MSC_IsReady+0x16>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900065ac:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
900065b0:	69db      	ldr	r3, [r3, #28]
900065b2:	7b18      	ldrb	r0, [r3, #12]
  {
    res = 1U;
900065b4:	1e43      	subs	r3, r0, #1
900065b6:	4258      	negs	r0, r3
900065b8:	4158      	adcs	r0, r3
900065ba:	4770      	bx	lr
  }
  else
  {
    res = 0U;
900065bc:	2000      	movs	r0, #0
  }

  return res;
}
900065be:	4770      	bx	lr

900065c0 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
900065c0:	7803      	ldrb	r3, [r0, #0]
900065c2:	2b0b      	cmp	r3, #11
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900065c4:	bf01      	itttt	eq
900065c6:	f8d0 3468 	ldreq.w	r3, [r0, #1128]	; 0x468
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
900065ca:	2234      	moveq	r2, #52	; 0x34
900065cc:	69db      	ldreq	r3, [r3, #28]
900065ce:	fb02 3101 	mlaeq	r1, r2, r1, r3
900065d2:	bf03      	ittte	eq
900065d4:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
900065d8:	fab0 f080 	clzeq	r0, r0
900065dc:	0940      	lsreq	r0, r0, #5
  }
  else
  {
    res = 0U;
900065de:	2000      	movne	r0, #0
  }

  return res;
}
900065e0:	4770      	bx	lr

900065e2 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
900065e2:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
900065e4:	7803      	ldrb	r3, [r0, #0]
900065e6:	2b0b      	cmp	r3, #11
900065e8:	d111      	bne.n	9000660e <USBH_MSC_GetLUNInfo+0x2c>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
900065ea:	2334      	movs	r3, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900065ec:	f8d0 0468 	ldr.w	r0, [r0, #1128]	; 0x468
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
900065f0:	2490      	movs	r4, #144	; 0x90
900065f2:	fb13 4101 	smlabb	r1, r3, r1, r4
900065f6:	69c3      	ldr	r3, [r0, #28]
900065f8:	4419      	add	r1, r3
900065fa:	f101 0334 	add.w	r3, r1, #52	; 0x34
900065fe:	f851 0b04 	ldr.w	r0, [r1], #4
90006602:	4299      	cmp	r1, r3
90006604:	f842 0b04 	str.w	r0, [r2], #4
90006608:	d1f9      	bne.n	900065fe <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
9000660a:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
9000660c:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
9000660e:	2002      	movs	r0, #2
90006610:	e7fc      	b.n	9000660c <USBH_MSC_GetLUNInfo+0x2a>

90006612 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
90006612:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
90006616:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
9000661a:	4604      	mov	r4, r0
9000661c:	460e      	mov	r6, r1
9000661e:	9f08      	ldr	r7, [sp, #32]
  if ((phost->device.is_connected == 0U) ||
90006620:	b3b5      	cbz	r5, 90006690 <USBH_MSC_Read+0x7e>
      (phost->gState != HOST_CLASS) ||
90006622:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
90006624:	2d0b      	cmp	r5, #11
90006626:	d133      	bne.n	90006690 <USBH_MSC_Read+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006628:	f8d0 5468 	ldr.w	r5, [r0, #1128]	; 0x468
      (MSC_Handle->unit[lun].state != MSC_IDLE))
9000662c:	f04f 0c34 	mov.w	ip, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006630:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
90006632:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
90006636:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
9000663a:	f1be 0f01 	cmp.w	lr, #1
9000663e:	d127      	bne.n	90006690 <USBH_MSC_Read+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
90006640:	f04f 0e06 	mov.w	lr, #6
90006644:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
90006648:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
9000664c:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
90006650:	9700      	str	r7, [sp, #0]
90006652:	f000 fa9d 	bl	90006b90 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90006656:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
9000665a:	f8d4 84b0 	ldr.w	r8, [r4, #1200]	; 0x4b0
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
9000665e:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
90006660:	4631      	mov	r1, r6
90006662:	4620      	mov	r0, r4
90006664:	f7ff fec8 	bl	900063f8 <USBH_MSC_RdWrProcess>
90006668:	2801      	cmp	r0, #1
9000666a:	d005      	beq.n	90006678 <USBH_MSC_Read+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
9000666c:	2301      	movs	r3, #1

  return USBH_OK;
9000666e:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
90006670:	732b      	strb	r3, [r5, #12]
}
90006672:	b002      	add	sp, #8
90006674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
90006678:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
9000667c:	eba3 0308 	sub.w	r3, r3, r8
90006680:	42bb      	cmp	r3, r7
90006682:	d803      	bhi.n	9000668c <USBH_MSC_Read+0x7a>
90006684:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
90006688:	2b00      	cmp	r3, #0
9000668a:	d1e9      	bne.n	90006660 <USBH_MSC_Read+0x4e>
      MSC_Handle->state = MSC_IDLE;
9000668c:	2301      	movs	r3, #1
9000668e:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
90006690:	2002      	movs	r0, #2
90006692:	e7ee      	b.n	90006672 <USBH_MSC_Read+0x60>

90006694 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
90006694:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
90006698:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
9000669c:	4604      	mov	r4, r0
9000669e:	460e      	mov	r6, r1
900066a0:	9f08      	ldr	r7, [sp, #32]
  if ((phost->device.is_connected == 0U) ||
900066a2:	b3b5      	cbz	r5, 90006712 <USBH_MSC_Write+0x7e>
      (phost->gState != HOST_CLASS) ||
900066a4:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
900066a6:	2d0b      	cmp	r5, #11
900066a8:	d133      	bne.n	90006712 <USBH_MSC_Write+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900066aa:	f8d0 5468 	ldr.w	r5, [r0, #1128]	; 0x468
      (MSC_Handle->unit[lun].state != MSC_IDLE))
900066ae:	f04f 0c34 	mov.w	ip, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900066b2:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
900066b4:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
900066b8:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
900066bc:	f1be 0f01 	cmp.w	lr, #1
900066c0:	d127      	bne.n	90006712 <USBH_MSC_Write+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
900066c2:	f04f 0e07 	mov.w	lr, #7
900066c6:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
900066ca:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
900066ce:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
900066d2:	9700      	str	r7, [sp, #0]
900066d4:	f000 fa1d 	bl	90006b12 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
900066d8:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
900066dc:	f8d4 84b0 	ldr.w	r8, [r4, #1200]	; 0x4b0
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
900066e0:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
900066e2:	4631      	mov	r1, r6
900066e4:	4620      	mov	r0, r4
900066e6:	f7ff fe87 	bl	900063f8 <USBH_MSC_RdWrProcess>
900066ea:	2801      	cmp	r0, #1
900066ec:	d005      	beq.n	900066fa <USBH_MSC_Write+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
900066ee:	2301      	movs	r3, #1
  return USBH_OK;
900066f0:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
900066f2:	732b      	strb	r3, [r5, #12]
}
900066f4:	b002      	add	sp, #8
900066f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
900066fa:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
900066fe:	eba3 0308 	sub.w	r3, r3, r8
90006702:	42bb      	cmp	r3, r7
90006704:	d803      	bhi.n	9000670e <USBH_MSC_Write+0x7a>
90006706:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
9000670a:	2b00      	cmp	r3, #0
9000670c:	d1e9      	bne.n	900066e2 <USBH_MSC_Write+0x4e>
      MSC_Handle->state = MSC_IDLE;
9000670e:	2301      	movs	r3, #1
90006710:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
90006712:	2002      	movs	r0, #2
90006714:	e7ee      	b.n	900066f4 <USBH_MSC_Write+0x60>

90006716 <USBH_MSC_BOT_REQ_Reset>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
90006716:	f64f 7121 	movw	r1, #65313	; 0xff21
9000671a:	2200      	movs	r2, #0
9000671c:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
90006720:	4611      	mov	r1, r2
90006722:	f000 be77 	b.w	90007414 <USBH_CtlReq>

90006726 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
90006726:	f44f 3280 	mov.w	r2, #65536	; 0x10000
9000672a:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
9000672e:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
90006732:	2201      	movs	r2, #1
90006734:	f000 be6e 	b.w	90007414 <USBH_CtlReq>

90006738 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006738:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
9000673c:	2000      	movs	r0, #0
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
9000673e:	4905      	ldr	r1, [pc, #20]	; (90006754 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006740:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
90006742:	4a05      	ldr	r2, [pc, #20]	; (90006758 <USBH_MSC_BOT_Init+0x20>)
90006744:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
90006748:	2201      	movs	r2, #1
9000674a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
9000674e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
90006752:	4770      	bx	lr
90006754:	43425355 	.word	0x43425355
90006758:	20304050 	.word	0x20304050

9000675c <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000675c:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006760:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006762:	69dc      	ldr	r4, [r3, #28]
{
90006764:	4606      	mov	r6, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
90006766:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
9000676a:	1e6b      	subs	r3, r5, #1
9000676c:	2b0a      	cmp	r3, #10
9000676e:	d838      	bhi.n	900067e2 <USBH_MSC_BOT_Process+0x86>
90006770:	e8df f003 	tbb	[pc, r3]
90006774:	392e1506 	.word	0x392e1506
90006778:	89816056 	.word	0x89816056
9000677c:	b6ac      	.short	0xb6ac
9000677e:	ce          	.byte	0xce
9000677f:	00          	.byte	0x00
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
90006780:	2302      	movs	r3, #2
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
90006782:	2201      	movs	r2, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
90006784:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
90006788:	f104 0154 	add.w	r1, r4, #84	; 0x54
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
9000678c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
90006790:	7963      	ldrb	r3, [r4, #5]
90006792:	9200      	str	r2, [sp, #0]
90006794:	221f      	movs	r2, #31
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
90006796:	4630      	mov	r0, r6
90006798:	f001 f87e 	bl	90007898 <USBH_BulkSendData>
9000679c:	e015      	b.n	900067ca <USBH_MSC_BOT_Process+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
9000679e:	7961      	ldrb	r1, [r4, #5]
900067a0:	f004 f818 	bl	9000a7d4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
900067a4:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
900067a6:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
900067a8:	d10a      	bne.n	900067c0 <USBH_MSC_BOT_Process+0x64>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
900067aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
900067ac:	b36b      	cbz	r3, 9000680a <USBH_MSC_BOT_Process+0xae>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
900067ae:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
900067b2:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
900067b4:	bfb4      	ite	lt
900067b6:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
900067b8:	2305      	movge	r3, #5

    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
      if (status == USBH_OK)
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
900067ba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
900067be:	e004      	b.n	900067ca <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_NOTREADY)
900067c0:	2802      	cmp	r0, #2
900067c2:	d154      	bne.n	9000686e <USBH_MSC_BOT_Process+0x112>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
900067c4:	2501      	movs	r5, #1
900067c6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50

    default:
      break;
  }
  return status;
}
900067ca:	4628      	mov	r0, r5
900067cc:	b002      	add	sp, #8
900067ce:	bd70      	pop	{r4, r5, r6, pc}
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
900067d0:	7923      	ldrb	r3, [r4, #4]
900067d2:	8962      	ldrh	r2, [r4, #10]
900067d4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
900067d8:	f001 f875 	bl	900078c6 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
900067dc:	2304      	movs	r3, #4
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
900067de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
900067e2:	2501      	movs	r5, #1
900067e4:	e7f1      	b.n	900067ca <USBH_MSC_BOT_Process+0x6e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
900067e6:	7921      	ldrb	r1, [r4, #4]
900067e8:	f003 fff4 	bl	9000a7d4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
900067ec:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
900067ee:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
900067f0:	d112      	bne.n	90006818 <USBH_MSC_BOT_Process+0xbc>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
900067f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
900067f4:	8962      	ldrh	r2, [r4, #10]
900067f6:	4293      	cmp	r3, r2
900067f8:	d932      	bls.n	90006860 <USBH_MSC_BOT_Process+0x104>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
900067fa:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
900067fe:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
90006800:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
90006802:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
90006804:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
90006808:	b90b      	cbnz	r3, 9000680e <USBH_MSC_BOT_Process+0xb2>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
9000680a:	2307      	movs	r3, #7
9000680c:	e7d5      	b.n	900067ba <USBH_MSC_BOT_Process+0x5e>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
9000680e:	7923      	ldrb	r3, [r4, #4]
90006810:	4630      	mov	r0, r6
90006812:	f001 f858 	bl	900078c6 <USBH_BulkReceiveData>
90006816:	e7d8      	b.n	900067ca <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_STALL)
90006818:	2805      	cmp	r0, #5
      else if (URB_Status == USBH_URB_STALL)
9000681a:	d1e2      	bne.n	900067e2 <USBH_MSC_BOT_Process+0x86>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
9000681c:	2309      	movs	r3, #9
9000681e:	e7de      	b.n	900067de <USBH_MSC_BOT_Process+0x82>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
90006820:	2501      	movs	r5, #1
90006822:	7963      	ldrb	r3, [r4, #5]
90006824:	8922      	ldrh	r2, [r4, #8]
90006826:	9500      	str	r5, [sp, #0]
90006828:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
9000682c:	f001 f834 	bl	90007898 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
90006830:	2306      	movs	r3, #6
90006832:	e7c2      	b.n	900067ba <USBH_MSC_BOT_Process+0x5e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
90006834:	7961      	ldrb	r1, [r4, #5]
90006836:	f003 ffcd 	bl	9000a7d4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
9000683a:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
9000683c:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
9000683e:	d112      	bne.n	90006866 <USBH_MSC_BOT_Process+0x10a>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
90006840:	6de3      	ldr	r3, [r4, #92]	; 0x5c
90006842:	8922      	ldrh	r2, [r4, #8]
90006844:	4293      	cmp	r3, r2
90006846:	d90b      	bls.n	90006860 <USBH_MSC_BOT_Process+0x104>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
90006848:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
9000684c:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
9000684e:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
90006850:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
90006852:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
90006856:	2b00      	cmp	r3, #0
90006858:	d0d7      	beq.n	9000680a <USBH_MSC_BOT_Process+0xae>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
9000685a:	7963      	ldrb	r3, [r4, #5]
9000685c:	9000      	str	r0, [sp, #0]
9000685e:	e79a      	b.n	90006796 <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
90006860:	2300      	movs	r3, #0
90006862:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
90006864:	e7d1      	b.n	9000680a <USBH_MSC_BOT_Process+0xae>
      else if (URB_Status == USBH_URB_NOTREADY)
90006866:	2802      	cmp	r0, #2
90006868:	d101      	bne.n	9000686e <USBH_MSC_BOT_Process+0x112>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
9000686a:	2305      	movs	r3, #5
9000686c:	e7b7      	b.n	900067de <USBH_MSC_BOT_Process+0x82>
      else if (URB_Status == USBH_URB_STALL)
9000686e:	2d05      	cmp	r5, #5
90006870:	d1b7      	bne.n	900067e2 <USBH_MSC_BOT_Process+0x86>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
90006872:	230a      	movs	r3, #10
90006874:	e7b3      	b.n	900067de <USBH_MSC_BOT_Process+0x82>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
90006876:	7923      	ldrb	r3, [r4, #4]
90006878:	220d      	movs	r2, #13
9000687a:	f104 0178 	add.w	r1, r4, #120	; 0x78
9000687e:	f001 f822 	bl	900078c6 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
90006882:	2308      	movs	r3, #8
90006884:	e7ab      	b.n	900067de <USBH_MSC_BOT_Process+0x82>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
90006886:	7921      	ldrb	r1, [r4, #4]
90006888:	f003 ffa4 	bl	9000a7d4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
9000688c:	2801      	cmp	r0, #1
9000688e:	d11b      	bne.n	900068c8 <USBH_MSC_BOT_Process+0x16c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
90006890:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
90006894:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
90006898:	4630      	mov	r0, r6
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000689a:	f8d6 3468 	ldr.w	r3, [r6, #1128]	; 0x468
9000689e:	69dc      	ldr	r4, [r3, #28]
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
900068a0:	7921      	ldrb	r1, [r4, #4]
900068a2:	f003 ff68 	bl	9000a776 <USBH_LL_GetLastXferSize>
900068a6:	280d      	cmp	r0, #13
900068a8:	d13a      	bne.n	90006920 <USBH_MSC_BOT_Process+0x1c4>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
900068aa:	6fa2      	ldr	r2, [r4, #120]	; 0x78
900068ac:	4b1d      	ldr	r3, [pc, #116]	; (90006924 <USBH_MSC_BOT_Process+0x1c8>)
900068ae:	429a      	cmp	r2, r3
900068b0:	d136      	bne.n	90006920 <USBH_MSC_BOT_Process+0x1c4>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
900068b2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
900068b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
900068b6:	429a      	cmp	r2, r3
900068b8:	d132      	bne.n	90006920 <USBH_MSC_BOT_Process+0x1c4>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
900068ba:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
900068be:	3d00      	subs	r5, #0
900068c0:	bf18      	it	ne
900068c2:	2501      	movne	r5, #1
900068c4:	006d      	lsls	r5, r5, #1
900068c6:	e780      	b.n	900067ca <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_STALL)
900068c8:	2805      	cmp	r0, #5
900068ca:	e7a6      	b.n	9000681a <USBH_MSC_BOT_Process+0xbe>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
900068cc:	79e1      	ldrb	r1, [r4, #7]
900068ce:	f000 ff9f 	bl	90007810 <USBH_ClrFeature>
      if (error == USBH_OK)
900068d2:	b908      	cbnz	r0, 900068d8 <USBH_MSC_BOT_Process+0x17c>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
900068d4:	2307      	movs	r3, #7
900068d6:	e782      	b.n	900067de <USBH_MSC_BOT_Process+0x82>
      else if (error == USBH_UNRECOVERED_ERROR)
900068d8:	2804      	cmp	r0, #4
        if (error == USBH_UNRECOVERED_ERROR)
900068da:	d182      	bne.n	900067e2 <USBH_MSC_BOT_Process+0x86>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
900068dc:	230b      	movs	r3, #11
900068de:	e77e      	b.n	900067de <USBH_MSC_BOT_Process+0x82>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
900068e0:	79a1      	ldrb	r1, [r4, #6]
900068e2:	f000 ff95 	bl	90007810 <USBH_ClrFeature>
      if (error == USBH_OK)
900068e6:	4605      	mov	r5, r0
900068e8:	b980      	cbnz	r0, 9000690c <USBH_MSC_BOT_Process+0x1b0>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
900068ea:	7961      	ldrb	r1, [r4, #5]
900068ec:	4630      	mov	r0, r6
900068ee:	f003 ff95 	bl	9000a81c <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
900068f2:	f1c0 0001 	rsb	r0, r0, #1
900068f6:	7961      	ldrb	r1, [r4, #5]
900068f8:	b2c2      	uxtb	r2, r0
900068fa:	4630      	mov	r0, r6
900068fc:	f003 ff7e 	bl	9000a7fc <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
90006900:	462a      	mov	r2, r5
90006902:	7921      	ldrb	r1, [r4, #4]
90006904:	4630      	mov	r0, r6
90006906:	f003 ff79 	bl	9000a7fc <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
9000690a:	e787      	b.n	9000681c <USBH_MSC_BOT_Process+0xc0>
        if (error == USBH_UNRECOVERED_ERROR)
9000690c:	2804      	cmp	r0, #4
9000690e:	e7e4      	b.n	900068da <USBH_MSC_BOT_Process+0x17e>
      status = USBH_MSC_BOT_REQ_Reset(phost);
90006910:	f7ff ff01 	bl	90006716 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
90006914:	4605      	mov	r5, r0
90006916:	2800      	cmp	r0, #0
90006918:	f47f af57 	bne.w	900067ca <USBH_MSC_BOT_Process+0x6e>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
9000691c:	2301      	movs	r3, #1
9000691e:	e74c      	b.n	900067ba <USBH_MSC_BOT_Process+0x5e>
          status = USBH_FAIL;
90006920:	2502      	movs	r5, #2
90006922:	e752      	b.n	900067ca <USBH_MSC_BOT_Process+0x6e>
90006924:	53425355 	.word	0x53425355

90006928 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
90006928:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000692a:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
9000692e:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006930:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
90006934:	2d01      	cmp	r5, #1
90006936:	d004      	beq.n	90006942 <USBH_MSC_SCSI_TestUnitReady+0x1a>
90006938:	2d02      	cmp	r5, #2
9000693a:	d014      	beq.n	90006966 <USBH_MSC_SCSI_TestUnitReady+0x3e>
9000693c:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
9000693e:	4628      	mov	r0, r5
90006940:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
90006942:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006944:	230a      	movs	r3, #10
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006946:	2210      	movs	r2, #16
90006948:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
9000694c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
90006950:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
90006952:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006956:	f004 ff6f 	bl	9000b838 <memset>
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
9000695a:	2302      	movs	r3, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
9000695c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006960:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
90006964:	e7eb      	b.n	9000693e <USBH_MSC_SCSI_TestUnitReady+0x16>
}
90006966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
9000696a:	f7ff bef7 	b.w	9000675c <USBH_MSC_BOT_Process>

9000696e <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
9000696e:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006972:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006974:	69dc      	ldr	r4, [r3, #28]
{
90006976:	4616      	mov	r6, r2

  switch (MSC_Handle->hbot.cmd_state)
90006978:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
9000697c:	2d01      	cmp	r5, #1
9000697e:	d004      	beq.n	9000698a <USBH_MSC_SCSI_ReadCapacity+0x1c>
90006980:	2d02      	cmp	r5, #2
90006982:	d01b      	beq.n	900069bc <USBH_MSC_SCSI_ReadCapacity+0x4e>
90006984:	2501      	movs	r5, #1
    default:
      break;
  }

  return error;
}
90006986:	4628      	mov	r0, r5
90006988:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
9000698a:	2308      	movs	r3, #8
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
9000698c:	2210      	movs	r2, #16
9000698e:	2100      	movs	r1, #0
90006990:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
90006994:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006996:	2380      	movs	r3, #128	; 0x80
90006998:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
9000699c:	f004 ff4c 	bl	9000b838 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900069a0:	f242 530a 	movw	r3, #9482	; 0x250a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
900069a4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
900069a8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
900069ac:	2302      	movs	r3, #2
900069ae:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
900069b2:	f104 0310 	add.w	r3, r4, #16
900069b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
900069ba:	e7e4      	b.n	90006986 <USBH_MSC_SCSI_ReadCapacity+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
900069bc:	f7ff fece 	bl	9000675c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
900069c0:	4605      	mov	r5, r0
900069c2:	2800      	cmp	r0, #0
900069c4:	d1df      	bne.n	90006986 <USBH_MSC_SCSI_ReadCapacity+0x18>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
900069c6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
900069ca:	6813      	ldr	r3, [r2, #0]
900069cc:	ba1b      	rev	r3, r3
900069ce:	6033      	str	r3, [r6, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
900069d0:	88d3      	ldrh	r3, [r2, #6]
900069d2:	ba5b      	rev16	r3, r3
900069d4:	80b3      	strh	r3, [r6, #4]
900069d6:	e7d6      	b.n	90006986 <USBH_MSC_SCSI_ReadCapacity+0x18>

900069d8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
900069d8:	b570      	push	{r4, r5, r6, lr}
900069da:	4616      	mov	r6, r2
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900069dc:	f8d0 2468 	ldr.w	r2, [r0, #1128]	; 0x468
{
900069e0:	460b      	mov	r3, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
900069e2:	69d4      	ldr	r4, [r2, #28]

  switch (MSC_Handle->hbot.cmd_state)
900069e4:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
900069e8:	2d01      	cmp	r5, #1
900069ea:	d004      	beq.n	900069f6 <USBH_MSC_SCSI_Inquiry+0x1e>
900069ec:	2d02      	cmp	r5, #2
900069ee:	d021      	beq.n	90006a34 <USBH_MSC_SCSI_Inquiry+0x5c>
900069f0:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
900069f2:	4628      	mov	r0, r5
900069f4:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
900069f6:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
900069f8:	015b      	lsls	r3, r3, #5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
900069fa:	2124      	movs	r1, #36	; 0x24
      MSC_Handle->hbot.state = BOT_SEND_CBW;
900069fc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006a00:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
90006a04:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
90006a06:	65e1      	str	r1, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
90006a08:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
90006a0c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006a10:	2302      	movs	r3, #2
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
90006a12:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
90006a16:	f8a4 206b 	strh.w	r2, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006a1a:	f241 220a 	movw	r2, #4618	; 0x120a
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006a1e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90006a22:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006a26:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
90006a2a:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90006a2e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
90006a32:	e7de      	b.n	900069f2 <USBH_MSC_SCSI_Inquiry+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
90006a34:	f7ff fe92 	bl	9000675c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
90006a38:	4605      	mov	r5, r0
90006a3a:	2800      	cmp	r0, #0
90006a3c:	d1d9      	bne.n	900069f2 <USBH_MSC_SCSI_Inquiry+0x1a>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
90006a3e:	4601      	mov	r1, r0
90006a40:	2222      	movs	r2, #34	; 0x22
90006a42:	4630      	mov	r0, r6
90006a44:	f004 fef8 	bl	9000b838 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
90006a48:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
90006a4c:	f106 010c 	add.w	r1, r6, #12
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
90006a50:	781a      	ldrb	r2, [r3, #0]
90006a52:	f002 021f 	and.w	r2, r2, #31
90006a56:	7072      	strb	r2, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
90006a58:	781a      	ldrb	r2, [r3, #0]
90006a5a:	0952      	lsrs	r2, r2, #5
90006a5c:	7032      	strb	r2, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
90006a5e:	f993 2001 	ldrsb.w	r2, [r3, #1]
90006a62:	2a00      	cmp	r2, #0
          inquiry->RemovableMedia = 1U;
90006a64:	bfbc      	itt	lt
90006a66:	2201      	movlt	r2, #1
90006a68:	70b2      	strblt	r2, [r6, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
90006a6a:	689a      	ldr	r2, [r3, #8]
90006a6c:	f8c6 2003 	str.w	r2, [r6, #3]
90006a70:	68da      	ldr	r2, [r3, #12]
90006a72:	f8c6 2007 	str.w	r2, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
90006a76:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
90006a7a:	f103 0210 	add.w	r2, r3, #16
90006a7e:	3320      	adds	r3, #32
90006a80:	f852 0b04 	ldr.w	r0, [r2], #4
90006a84:	429a      	cmp	r2, r3
90006a86:	f841 0b04 	str.w	r0, [r1], #4
90006a8a:	d1f9      	bne.n	90006a80 <USBH_MSC_SCSI_Inquiry+0xa8>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
90006a8c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
90006a90:	6a1b      	ldr	r3, [r3, #32]
90006a92:	f8c6 301d 	str.w	r3, [r6, #29]
90006a96:	e7ac      	b.n	900069f2 <USBH_MSC_SCSI_Inquiry+0x1a>

90006a98 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
90006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006a9a:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006a9e:	460f      	mov	r7, r1
90006aa0:	4616      	mov	r6, r2
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006aa2:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006aa4:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
90006aa8:	2d01      	cmp	r5, #1
90006aaa:	d004      	beq.n	90006ab6 <USBH_MSC_SCSI_RequestSense+0x1e>
90006aac:	2d02      	cmp	r5, #2
90006aae:	d020      	beq.n	90006af2 <USBH_MSC_SCSI_RequestSense+0x5a>
90006ab0:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
90006ab2:	4628      	mov	r0, r5
90006ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006ab6:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
90006ab8:	260e      	movs	r6, #14
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006aba:	2210      	movs	r2, #16
90006abc:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006abe:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006ac2:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
90006ac6:	65e6      	str	r6, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
90006ac8:	017f      	lsls	r7, r7, #5
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006aca:	f004 feb5 	bl	9000b838 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006ace:	f240 330a 	movw	r3, #778	; 0x30a
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
90006ad2:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006ad6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006ada:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
90006adc:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006ae0:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90006ae4:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006ae8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
90006aec:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
90006af0:	e7df      	b.n	90006ab2 <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
90006af2:	f7ff fe33 	bl	9000675c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
90006af6:	4605      	mov	r5, r0
90006af8:	2800      	cmp	r0, #0
90006afa:	d1da      	bne.n	90006ab2 <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
90006afc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
90006b00:	789a      	ldrb	r2, [r3, #2]
90006b02:	f002 020f 	and.w	r2, r2, #15
90006b06:	7032      	strb	r2, [r6, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
90006b08:	7b1a      	ldrb	r2, [r3, #12]
90006b0a:	7072      	strb	r2, [r6, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
90006b0c:	7b5b      	ldrb	r3, [r3, #13]
90006b0e:	70b3      	strb	r3, [r6, #2]
90006b10:	e7cf      	b.n	90006ab2 <USBH_MSC_SCSI_RequestSense+0x1a>

90006b12 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
90006b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006b16:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006b18:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006b1c:	4615      	mov	r5, r2
90006b1e:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006b20:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006b22:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
90006b26:	2e01      	cmp	r6, #1
90006b28:	d005      	beq.n	90006b36 <USBH_MSC_SCSI_Write+0x24>
90006b2a:	2e02      	cmp	r6, #2
90006b2c:	d02c      	beq.n	90006b88 <USBH_MSC_SCSI_Write+0x76>
90006b2e:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
90006b30:	4630      	mov	r0, r6
90006b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006b36:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
90006b3a:	2100      	movs	r1, #0
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006b3c:	2210      	movs	r2, #16
90006b3e:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006b42:	437b      	muls	r3, r7
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
90006b44:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
90006b46:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006b4a:	65e3      	str	r3, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006b4c:	f004 fe74 	bl	9000b838 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006b50:	f642 230a 	movw	r3, #10762	; 0x2a0a
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
90006b54:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006b58:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006b5c:	f3c5 6307 	ubfx	r3, r5, #24, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
90006b60:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006b64:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
90006b68:	f3c5 4307 	ubfx	r3, r5, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006b6c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
90006b70:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006b74:	f3c5 2307 	ubfx	r3, r5, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
90006b78:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006b7c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006b80:	2302      	movs	r3, #2
90006b82:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
90006b86:	e7d3      	b.n	90006b30 <USBH_MSC_SCSI_Write+0x1e>
}
90006b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
90006b8c:	f7ff bde6 	b.w	9000675c <USBH_MSC_BOT_Process>

90006b90 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
90006b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006b94:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006b96:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
{
90006b9a:	4615      	mov	r5, r2
90006b9c:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
90006b9e:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
90006ba0:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
90006ba4:	2e01      	cmp	r6, #1
90006ba6:	d005      	beq.n	90006bb4 <USBH_MSC_SCSI_Read+0x24>
90006ba8:	2e02      	cmp	r6, #2
90006baa:	d02d      	beq.n	90006c08 <USBH_MSC_SCSI_Read+0x78>
90006bac:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
90006bae:	4630      	mov	r0, r6
90006bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006bb4:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006bb8:	2210      	movs	r2, #16
90006bba:	2100      	movs	r1, #0
90006bbc:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006bc0:	437b      	muls	r3, r7
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
90006bc2:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
90006bc4:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
90006bc6:	2380      	movs	r3, #128	; 0x80
90006bc8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
90006bcc:	f004 fe34 	bl	9000b838 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006bd0:	f642 030a 	movw	r3, #10250	; 0x280a
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
90006bd4:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
90006bd8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006bdc:	f3c5 6307 	ubfx	r3, r5, #24, #8
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
90006be0:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
90006be4:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
90006be8:	f3c5 4307 	ubfx	r3, r5, #16, #8
      MSC_Handle->hbot.state = BOT_SEND_CBW;
90006bec:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
90006bf0:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006bf4:	f3c5 2307 	ubfx	r3, r5, #8, #8
      MSC_Handle->hbot.pbuf = pbuf;
90006bf8:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
90006bfc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
90006c00:	2302      	movs	r3, #2
90006c02:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
90006c06:	e7d2      	b.n	90006bae <USBH_MSC_SCSI_Read+0x1e>
}
90006c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
90006c0c:	f7ff bda6 	b.w	9000675c <USBH_MSC_BOT_Process>

90006c10 <DeInitStateMachine.isra.0>:
  * @brief  DeInitStateMachine
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
90006c10:	b510      	push	{r4, lr}
90006c12:	4604      	mov	r4, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
90006c14:	223c      	movs	r2, #60	; 0x3c
90006c16:	2100      	movs	r1, #0
90006c18:	f500 608e 	add.w	r0, r0, #1136	; 0x470
90006c1c:	f004 fe0c 	bl	9000b838 <memset>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
90006c20:	f44f 7200 	mov.w	r2, #512	; 0x200
90006c24:	2100      	movs	r1, #0
90006c26:	f504 7007 	add.w	r0, r4, #540	; 0x21c
90006c2a:	f004 fe05 	bl	9000b838 <memset>
  }

  phost->gState = HOST_IDLE;
90006c2e:	2300      	movs	r3, #0
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
90006c30:	2201      	movs	r2, #1
  phost->gState = HOST_IDLE;
90006c32:	7023      	strb	r3, [r4, #0]
  phost->EnumState = ENUM_IDLE;
90006c34:	7063      	strb	r3, [r4, #1]
  phost->Timer = 0U;
90006c36:	f8c4 34b0 	str.w	r3, [r4, #1200]	; 0x4b0

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
90006c3a:	2340      	movs	r3, #64	; 0x40
  phost->RequestState = CMD_SEND;
90006c3c:	70a2      	strb	r2, [r4, #2]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
90006c3e:	71a3      	strb	r3, [r4, #6]
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
90006c40:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.state = CTRL_SETUP;
90006c44:	8322      	strh	r2, [r4, #24]
  phost->device.address = USBH_ADDRESS_DEFAULT;
90006c46:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
  phost->device.speed = USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
90006c4a:	bd10      	pop	{r4, pc}

90006c4c <USBH_Init>:
{
90006c4c:	b570      	push	{r4, r5, r6, lr}
90006c4e:	460e      	mov	r6, r1
  if (phost == NULL)
90006c50:	4604      	mov	r4, r0
90006c52:	b950      	cbnz	r0, 90006c6a <USBH_Init+0x1e>
    USBH_ErrLog("Invalid Host handle");
90006c54:	4811      	ldr	r0, [pc, #68]	; (90006c9c <USBH_Init+0x50>)
90006c56:	f004 fc81 	bl	9000b55c <iprintf>
90006c5a:	4811      	ldr	r0, [pc, #68]	; (90006ca0 <USBH_Init+0x54>)
90006c5c:	f004 fc7e 	bl	9000b55c <iprintf>
90006c60:	200a      	movs	r0, #10
90006c62:	f004 fc8d 	bl	9000b580 <putchar>
    return USBH_FAIL;
90006c66:	2002      	movs	r0, #2
}
90006c68:	bd70      	pop	{r4, r5, r6, pc}
  phost->pActiveClass = NULL;
90006c6a:	2500      	movs	r5, #0
  phost->id = id;
90006c6c:	f880 24b8 	strb.w	r2, [r0, #1208]	; 0x4b8
  phost->pActiveClass = NULL;
90006c70:	f8c0 5468 	str.w	r5, [r0, #1128]	; 0x468
  phost->ClassNumber = 0U;
90006c74:	f8c0 546c 	str.w	r5, [r0, #1132]	; 0x46c
  DeInitStateMachine(phost);
90006c78:	f7ff ffca 	bl	90006c10 <DeInitStateMachine.isra.0>
  phost->device.is_connected = 0U;
90006c7c:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
90006c80:	f884 5423 	strb.w	r5, [r4, #1059]	; 0x423
  phost->device.is_disconnected = 0U;
90006c84:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
90006c88:	f884 5422 	strb.w	r5, [r4, #1058]	; 0x422
  if (pUsrFunc != NULL)
90006c8c:	b10e      	cbz	r6, 90006c92 <USBH_Init+0x46>
    phost->pUser = pUsrFunc;
90006c8e:	f8c4 64c0 	str.w	r6, [r4, #1216]	; 0x4c0
  USBH_LL_Init(phost);
90006c92:	4620      	mov	r0, r4
90006c94:	f003 fd2c 	bl	9000a6f0 <USBH_LL_Init>
  return USBH_OK;
90006c98:	2000      	movs	r0, #0
90006c9a:	e7e5      	b.n	90006c68 <USBH_Init+0x1c>
90006c9c:	9001096c 	.word	0x9001096c
90006ca0:	90010974 	.word	0x90010974

90006ca4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
90006ca4:	b508      	push	{r3, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
90006ca6:	b1a1      	cbz	r1, 90006cd2 <USBH_RegisterClass+0x2e>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
90006ca8:	f8d0 346c 	ldr.w	r3, [r0, #1132]	; 0x46c
90006cac:	b933      	cbnz	r3, 90006cbc <USBH_RegisterClass+0x18>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
90006cae:	2201      	movs	r2, #1
90006cb0:	f8c0 1464 	str.w	r1, [r0, #1124]	; 0x464
90006cb4:	f8c0 246c 	str.w	r2, [r0, #1132]	; 0x46c
      status = USBH_OK;
90006cb8:	4618      	mov	r0, r3
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
90006cba:	bd08      	pop	{r3, pc}
      USBH_ErrLog("Max Class Number reached");
90006cbc:	4807      	ldr	r0, [pc, #28]	; (90006cdc <USBH_RegisterClass+0x38>)
90006cbe:	f004 fc4d 	bl	9000b55c <iprintf>
90006cc2:	4807      	ldr	r0, [pc, #28]	; (90006ce0 <USBH_RegisterClass+0x3c>)
    USBH_ErrLog("Invalid Class handle");
90006cc4:	f004 fc4a 	bl	9000b55c <iprintf>
90006cc8:	200a      	movs	r0, #10
90006cca:	f004 fc59 	bl	9000b580 <putchar>
    status = USBH_FAIL;
90006cce:	2002      	movs	r0, #2
90006cd0:	e7f3      	b.n	90006cba <USBH_RegisterClass+0x16>
    USBH_ErrLog("Invalid Class handle");
90006cd2:	4802      	ldr	r0, [pc, #8]	; (90006cdc <USBH_RegisterClass+0x38>)
90006cd4:	f004 fc42 	bl	9000b55c <iprintf>
90006cd8:	4802      	ldr	r0, [pc, #8]	; (90006ce4 <USBH_RegisterClass+0x40>)
90006cda:	e7f3      	b.n	90006cc4 <USBH_RegisterClass+0x20>
90006cdc:	9001096c 	.word	0x9001096c
90006ce0:	90010988 	.word	0x90010988
90006ce4:	900109a1 	.word	0x900109a1

90006ce8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
90006ce8:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
90006cea:	f890 343c 	ldrb.w	r3, [r0, #1084]	; 0x43c
{
90006cee:	4604      	mov	r4, r0
90006cf0:	460d      	mov	r5, r1
  if (interface < phost->device.CfgDesc.bNumInterfaces)
90006cf2:	428b      	cmp	r3, r1
90006cf4:	d924      	bls.n	90006d40 <USBH_SelectInterface+0x58>
  {
    phost->device.current_interface = interface;
90006cf6:	f880 1424 	strb.w	r1, [r0, #1060]	; 0x424
    USBH_UsrLog("Switching to Interface (#%d)", interface);
90006cfa:	4817      	ldr	r0, [pc, #92]	; (90006d58 <USBH_SelectInterface+0x70>)
90006cfc:	f004 fc2e 	bl	9000b55c <iprintf>
90006d00:	200a      	movs	r0, #10
90006d02:	f004 fc3d 	bl	9000b580 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
90006d06:	2322      	movs	r3, #34	; 0x22
90006d08:	4814      	ldr	r0, [pc, #80]	; (90006d5c <USBH_SelectInterface+0x74>)
90006d0a:	fb03 4405 	mla	r4, r3, r5, r4
90006d0e:	f894 1447 	ldrb.w	r1, [r4, #1095]	; 0x447
90006d12:	f004 fc23 	bl	9000b55c <iprintf>
90006d16:	200a      	movs	r0, #10
90006d18:	f004 fc32 	bl	9000b580 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
90006d1c:	f894 1448 	ldrb.w	r1, [r4, #1096]	; 0x448
90006d20:	480f      	ldr	r0, [pc, #60]	; (90006d60 <USBH_SelectInterface+0x78>)
90006d22:	f004 fc1b 	bl	9000b55c <iprintf>
90006d26:	200a      	movs	r0, #10
90006d28:	f004 fc2a 	bl	9000b580 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
90006d2c:	f894 1449 	ldrb.w	r1, [r4, #1097]	; 0x449
90006d30:	480c      	ldr	r0, [pc, #48]	; (90006d64 <USBH_SelectInterface+0x7c>)
90006d32:	f004 fc13 	bl	9000b55c <iprintf>
90006d36:	200a      	movs	r0, #10
90006d38:	f004 fc22 	bl	9000b580 <putchar>
  USBH_StatusTypeDef status = USBH_OK;
90006d3c:	2000      	movs	r0, #0
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
  }

  return status;
}
90006d3e:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ErrLog("Cannot Select This Interface.");
90006d40:	4809      	ldr	r0, [pc, #36]	; (90006d68 <USBH_SelectInterface+0x80>)
90006d42:	f004 fc0b 	bl	9000b55c <iprintf>
90006d46:	4809      	ldr	r0, [pc, #36]	; (90006d6c <USBH_SelectInterface+0x84>)
90006d48:	f004 fc08 	bl	9000b55c <iprintf>
90006d4c:	200a      	movs	r0, #10
90006d4e:	f004 fc17 	bl	9000b580 <putchar>
    status = USBH_FAIL;
90006d52:	2002      	movs	r0, #2
90006d54:	e7f3      	b.n	90006d3e <USBH_SelectInterface+0x56>
90006d56:	bf00      	nop
90006d58:	900109b6 	.word	0x900109b6
90006d5c:	900109d3 	.word	0x900109d3
90006d60:	900109e2 	.word	0x900109e2
90006d64:	900109f1 	.word	0x900109f1
90006d68:	9001096c 	.word	0x9001096c
90006d6c:	90010a00 	.word	0x90010a00

90006d70 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
90006d70:	b510      	push	{r4, lr}
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
90006d72:	f890 4447 	ldrb.w	r4, [r0, #1095]	; 0x447
90006d76:	428c      	cmp	r4, r1
90006d78:	d001      	beq.n	90006d7e <USBH_FindInterface+0xe>
90006d7a:	29ff      	cmp	r1, #255	; 0xff
90006d7c:	d110      	bne.n	90006da0 <USBH_FindInterface+0x30>
90006d7e:	f890 1448 	ldrb.w	r1, [r0, #1096]	; 0x448
90006d82:	4291      	cmp	r1, r2
90006d84:	d001      	beq.n	90006d8a <USBH_FindInterface+0x1a>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
90006d86:	2aff      	cmp	r2, #255	; 0xff
90006d88:	d10a      	bne.n	90006da0 <USBH_FindInterface+0x30>
90006d8a:	f890 2449 	ldrb.w	r2, [r0, #1097]	; 0x449
90006d8e:	429a      	cmp	r2, r3
90006d90:	d008      	beq.n	90006da4 <USBH_FindInterface+0x34>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
90006d92:	f1b3 00ff 	subs.w	r0, r3, #255	; 0xff
90006d96:	bf18      	it	ne
90006d98:	f04f 30ff 	movne.w	r0, #4294967295
90006d9c:	b2c0      	uxtb	r0, r0
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
}
90006d9e:	bd10      	pop	{r4, pc}
  return 0xFFU;
90006da0:	20ff      	movs	r0, #255	; 0xff
90006da2:	e7fc      	b.n	90006d9e <USBH_FindInterface+0x2e>
90006da4:	2000      	movs	r0, #0
90006da6:	e7fa      	b.n	90006d9e <USBH_FindInterface+0x2e>

90006da8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
90006da8:	b510      	push	{r4, lr}
90006daa:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
90006dac:	f003 fcc4 	bl	9000a738 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
90006db0:	2101      	movs	r1, #1
90006db2:	4620      	mov	r0, r4
90006db4:	f003 fd12 	bl	9000a7dc <USBH_LL_DriverVBUS>

  return USBH_OK;
}
90006db8:	2000      	movs	r0, #0
90006dba:	bd10      	pop	{r4, pc}

90006dbc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
90006dbc:	b570      	push	{r4, r5, r6, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
90006dbe:	2302      	movs	r3, #2
{
90006dc0:	b086      	sub	sp, #24
90006dc2:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
90006dc4:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
90006dc8:	f890 3421 	ldrb.w	r3, [r0, #1057]	; 0x421
90006dcc:	2b01      	cmp	r3, #1
90006dce:	d101      	bne.n	90006dd4 <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
90006dd0:	2303      	movs	r3, #3
90006dd2:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
90006dd4:	7823      	ldrb	r3, [r4, #0]
90006dd6:	2b0b      	cmp	r3, #11
90006dd8:	d823      	bhi.n	90006e22 <USBH_Process+0x66>
90006dda:	e8df f013 	tbh	[pc, r3, lsl #1]
90006dde:	000c      	.short	0x000c
90006de0:	00530025 	.word	0x00530025
90006de4:	00220295 	.word	0x00220295
90006de8:	026c0089 	.word	0x026c0089
90006dec:	0217020e 	.word	0x0217020e
90006df0:	02380225 	.word	0x02380225
90006df4:	028c      	.short	0x028c
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
90006df6:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
90006dfa:	b193      	cbz	r3, 90006e22 <USBH_Process+0x66>
      {
        USBH_UsrLog("USB Device Connected");
90006dfc:	48b6      	ldr	r0, [pc, #728]	; (900070d8 <USBH_Process+0x31c>)
90006dfe:	f004 fbad 	bl	9000b55c <iprintf>
90006e02:	200a      	movs	r0, #10
90006e04:	f004 fbbc 	bl	9000b580 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
90006e08:	2301      	movs	r3, #1
        USBH_Delay(200U);
90006e0a:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
90006e0c:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
90006e0e:	f003 fd15 	bl	9000a83c <USBH_Delay>
        USBH_LL_ResetPort(phost);
90006e12:	4620      	mov	r0, r4
90006e14:	f003 fca8 	bl	9000a768 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
90006e18:	2300      	movs	r3, #0
90006e1a:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
        phost->Timeout = 0U;
90006e1e:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
90006e22:	2000      	movs	r0, #0
90006e24:	b006      	add	sp, #24
90006e26:	bd70      	pop	{r4, r5, r6, pc}
      if (phost->device.PortEnabled == 1U)
90006e28:	f894 3423 	ldrb.w	r3, [r4, #1059]	; 0x423
90006e2c:	2b01      	cmp	r3, #1
90006e2e:	d10b      	bne.n	90006e48 <USBH_Process+0x8c>
        USBH_UsrLog("USB Device Reset Completed");
90006e30:	48aa      	ldr	r0, [pc, #680]	; (900070dc <USBH_Process+0x320>)
90006e32:	f004 fb93 	bl	9000b55c <iprintf>
90006e36:	200a      	movs	r0, #10
90006e38:	f004 fba2 	bl	9000b580 <putchar>
        phost->device.RstCnt = 0U;
90006e3c:	2300      	movs	r3, #0
90006e3e:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
        phost->gState = HOST_DEV_ATTACHED;
90006e42:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
90006e44:	7023      	strb	r3, [r4, #0]
90006e46:	e7ec      	b.n	90006e22 <USBH_Process+0x66>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
90006e48:	f8d4 34b4 	ldr.w	r3, [r4, #1204]	; 0x4b4
90006e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90006e50:	d911      	bls.n	90006e76 <USBH_Process+0xba>
          phost->device.RstCnt++;
90006e52:	f894 341f 	ldrb.w	r3, [r4, #1055]	; 0x41f
90006e56:	3301      	adds	r3, #1
90006e58:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
90006e5a:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
90006e5c:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
          if (phost->device.RstCnt > 3U)
90006e60:	d907      	bls.n	90006e72 <USBH_Process+0xb6>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
90006e62:	489f      	ldr	r0, [pc, #636]	; (900070e0 <USBH_Process+0x324>)
90006e64:	f004 fb7a 	bl	9000b55c <iprintf>
90006e68:	200a      	movs	r0, #10
90006e6a:	f004 fb89 	bl	9000b580 <putchar>
            phost->gState = HOST_ABORT_STATE;
90006e6e:	230d      	movs	r3, #13
90006e70:	e7e8      	b.n	90006e44 <USBH_Process+0x88>
            phost->gState = HOST_IDLE;
90006e72:	2300      	movs	r3, #0
90006e74:	e7e6      	b.n	90006e44 <USBH_Process+0x88>
          phost->Timeout += 10U;
90006e76:	330a      	adds	r3, #10
          USBH_Delay(10U);
90006e78:	200a      	movs	r0, #10
          phost->Timeout += 10U;
90006e7a:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
          USBH_Delay(10U);
90006e7e:	f003 fcdd 	bl	9000a83c <USBH_Delay>
90006e82:	e7ce      	b.n	90006e22 <USBH_Process+0x66>
      if (phost->pUser != NULL)
90006e84:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
90006e88:	b113      	cbz	r3, 90006e90 <USBH_Process+0xd4>
        phost->pUser(phost, HOST_USER_CONNECTION);
90006e8a:	2104      	movs	r1, #4
90006e8c:	4620      	mov	r0, r4
90006e8e:	4798      	blx	r3
      USBH_Delay(100U);
90006e90:	2064      	movs	r0, #100	; 0x64
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90006e92:	2500      	movs	r5, #0
      USBH_Delay(100U);
90006e94:	f003 fcd2 	bl	9000a83c <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
90006e98:	4620      	mov	r0, r4
90006e9a:	f003 fc5b 	bl	9000a754 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
90006e9e:	2305      	movs	r3, #5
      phost->device.speed = USBH_LL_GetSpeed(phost);
90006ea0:	f884 041d 	strb.w	r0, [r4, #1053]	; 0x41d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90006ea4:	2100      	movs	r1, #0
      phost->gState = HOST_ENUMERATION;
90006ea6:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90006ea8:	4620      	mov	r0, r4
90006eaa:	f000 fd30 	bl	9000790e <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
90006eae:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
90006eb0:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
90006eb2:	4620      	mov	r0, r4
90006eb4:	f000 fd2b 	bl	9000790e <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90006eb8:	79a3      	ldrb	r3, [r4, #6]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
90006eba:	4601      	mov	r1, r0
90006ebc:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
90006ebe:	9302      	str	r3, [sp, #8]
90006ec0:	2280      	movs	r2, #128	; 0x80
90006ec2:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006ec6:	4620      	mov	r0, r4
90006ec8:	9501      	str	r5, [sp, #4]
90006eca:	9300      	str	r3, [sp, #0]
90006ecc:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006ed0:	f000 fd09 	bl	900078e6 <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
90006ed4:	79a3      	ldrb	r3, [r4, #6]
90006ed6:	462a      	mov	r2, r5
90006ed8:	7961      	ldrb	r1, [r4, #5]
90006eda:	4620      	mov	r0, r4
90006edc:	e9cd 5301 	strd	r5, r3, [sp, #4]
90006ee0:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006ee4:	9300      	str	r3, [sp, #0]
90006ee6:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006eea:	f000 fcfc 	bl	900078e6 <USBH_OpenPipe>
      break;
90006eee:	e798      	b.n	90006e22 <USBH_Process+0x66>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
90006ef0:	7865      	ldrb	r5, [r4, #1]
90006ef2:	2d07      	cmp	r5, #7
90006ef4:	d830      	bhi.n	90006f58 <USBH_Process+0x19c>
90006ef6:	e8df f015 	tbh	[pc, r5, lsl #1]
90006efa:	0008      	.short	0x0008
90006efc:	00b10055 	.word	0x00b10055
90006f00:	00e600df 	.word	0x00e600df
90006f04:	01440129 	.word	0x01440129
90006f08:	015f      	.short	0x015f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
90006f0a:	2108      	movs	r1, #8
90006f0c:	4620      	mov	r0, r4
90006f0e:	f000 fb65 	bl	900075dc <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
90006f12:	4606      	mov	r6, r0
90006f14:	b9f0      	cbnz	r0, 90006f54 <USBH_Process+0x198>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
90006f16:	f894 342d 	ldrb.w	r3, [r4, #1069]	; 0x42d

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
90006f1a:	2501      	movs	r5, #1
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
90006f1c:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
90006f1e:	7065      	strb	r5, [r4, #1]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
90006f20:	7921      	ldrb	r1, [r4, #4]
90006f22:	2280      	movs	r2, #128	; 0x80
90006f24:	4620      	mov	r0, r4
90006f26:	e9cd 6301 	strd	r6, r3, [sp, #4]
90006f2a:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006f2e:	9300      	str	r3, [sp, #0]
90006f30:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006f34:	f000 fcd7 	bl	900078e6 <USBH_OpenPipe>
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
90006f38:	79a3      	ldrb	r3, [r4, #6]
90006f3a:	4632      	mov	r2, r6
90006f3c:	7961      	ldrb	r1, [r4, #5]
90006f3e:	4620      	mov	r0, r4
90006f40:	e9cd 6301 	strd	r6, r3, [sp, #4]
90006f44:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
90006f48:	9300      	str	r3, [sp, #0]
90006f4a:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
90006f4e:	f000 fcca 	bl	900078e6 <USBH_OpenPipe>
90006f52:	e03e      	b.n	90006fd2 <USBH_Process+0x216>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
90006f54:	2803      	cmp	r0, #3
90006f56:	d001      	beq.n	90006f5c <USBH_Process+0x1a0>
  switch (phost->EnumState)
90006f58:	2501      	movs	r5, #1
90006f5a:	e03a      	b.n	90006fd2 <USBH_Process+0x216>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
90006f5c:	4861      	ldr	r0, [pc, #388]	; (900070e4 <USBH_Process+0x328>)
90006f5e:	f004 fafd 	bl	9000b55c <iprintf>
90006f62:	4861      	ldr	r0, [pc, #388]	; (900070e8 <USBH_Process+0x32c>)
90006f64:	f004 fafa 	bl	9000b55c <iprintf>
90006f68:	200a      	movs	r0, #10
90006f6a:	f004 fb09 	bl	9000b580 <putchar>
        phost->device.EnumCnt++;
90006f6e:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
90006f72:	3301      	adds	r3, #1
90006f74:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
90006f76:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
90006f78:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
90006f7c:	d907      	bls.n	90006f8e <USBH_Process+0x1d2>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
90006f7e:	485b      	ldr	r0, [pc, #364]	; (900070ec <USBH_Process+0x330>)
90006f80:	f004 faec 	bl	9000b55c <iprintf>
90006f84:	200a      	movs	r0, #10
90006f86:	f004 fafb 	bl	9000b580 <putchar>
          phost->gState = HOST_ABORT_STATE;
90006f8a:	230d      	movs	r3, #13
90006f8c:	e008      	b.n	90006fa0 <USBH_Process+0x1e4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
90006f8e:	7961      	ldrb	r1, [r4, #5]
90006f90:	4620      	mov	r0, r4
90006f92:	f000 fcd4 	bl	9000793e <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
90006f96:	7921      	ldrb	r1, [r4, #4]
90006f98:	4620      	mov	r0, r4
90006f9a:	f000 fcd0 	bl	9000793e <USBH_FreePipe>
          phost->gState = HOST_IDLE;
90006f9e:	2300      	movs	r3, #0
          USBH_FreePipe(phost, phost->Control.pipe_out);
          USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
90006fa0:	7023      	strb	r3, [r4, #0]
90006fa2:	e7d9      	b.n	90006f58 <USBH_Process+0x19c>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
90006fa4:	2112      	movs	r1, #18
90006fa6:	4620      	mov	r0, r4
90006fa8:	f000 fb18 	bl	900075dc <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
90006fac:	bb78      	cbnz	r0, 9000700e <USBH_Process+0x252>
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
90006fae:	f8b4 1430 	ldrh.w	r1, [r4, #1072]	; 0x430
90006fb2:	484f      	ldr	r0, [pc, #316]	; (900070f0 <USBH_Process+0x334>)
90006fb4:	f004 fad2 	bl	9000b55c <iprintf>
90006fb8:	200a      	movs	r0, #10
90006fba:	f004 fae1 	bl	9000b580 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
90006fbe:	f8b4 142e 	ldrh.w	r1, [r4, #1070]	; 0x42e
90006fc2:	484c      	ldr	r0, [pc, #304]	; (900070f4 <USBH_Process+0x338>)
90006fc4:	f004 faca 	bl	9000b55c <iprintf>
90006fc8:	200a      	movs	r0, #10
90006fca:	f004 fad9 	bl	9000b580 <putchar>
        phost->EnumState = ENUM_SET_ADDR;
90006fce:	2302      	movs	r3, #2
90006fd0:	7063      	strb	r3, [r4, #1]
      status = USBH_HandleEnum(phost);
90006fd2:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
90006fd6:	f89d 3017 	ldrb.w	r3, [sp, #23]
90006fda:	f003 05ff 	and.w	r5, r3, #255	; 0xff
90006fde:	2b00      	cmp	r3, #0
90006fe0:	f47f af1f 	bne.w	90006e22 <USBH_Process+0x66>
        USBH_UsrLog("Enumeration done.");
90006fe4:	4844      	ldr	r0, [pc, #272]	; (900070f8 <USBH_Process+0x33c>)
90006fe6:	f004 fab9 	bl	9000b55c <iprintf>
90006fea:	200a      	movs	r0, #10
90006fec:	f004 fac8 	bl	9000b580 <putchar>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
90006ff0:	f894 3437 	ldrb.w	r3, [r4, #1079]	; 0x437
        phost->device.current_interface = 0U;
90006ff4:	f884 5424 	strb.w	r5, [r4, #1060]	; 0x424
        if (phost->device.DevDesc.bNumConfigurations == 1U)
90006ff8:	2b01      	cmp	r3, #1
90006ffa:	f040 80fc 	bne.w	900071f6 <USBH_Process+0x43a>
          USBH_UsrLog("This device has only 1 configuration.");
90006ffe:	483f      	ldr	r0, [pc, #252]	; (900070fc <USBH_Process+0x340>)
90007000:	f004 faac 	bl	9000b55c <iprintf>
90007004:	200a      	movs	r0, #10
90007006:	f004 fabb 	bl	9000b580 <putchar>
        phost->gState = HOST_SET_CONFIGURATION;
9000700a:	2308      	movs	r3, #8
9000700c:	e71a      	b.n	90006e44 <USBH_Process+0x88>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
9000700e:	2803      	cmp	r0, #3
90007010:	d1a2      	bne.n	90006f58 <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
90007012:	4834      	ldr	r0, [pc, #208]	; (900070e4 <USBH_Process+0x328>)
90007014:	f004 faa2 	bl	9000b55c <iprintf>
90007018:	4839      	ldr	r0, [pc, #228]	; (90007100 <USBH_Process+0x344>)
9000701a:	f004 fa9f 	bl	9000b55c <iprintf>
9000701e:	200a      	movs	r0, #10
90007020:	f004 faae 	bl	9000b580 <putchar>
        phost->device.EnumCnt++;
90007024:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
90007028:	3301      	adds	r3, #1
9000702a:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
9000702c:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
9000702e:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
90007032:	d908      	bls.n	90007046 <USBH_Process+0x28a>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
90007034:	482d      	ldr	r0, [pc, #180]	; (900070ec <USBH_Process+0x330>)
90007036:	f004 fa91 	bl	9000b55c <iprintf>
9000703a:	200a      	movs	r0, #10
9000703c:	f004 faa0 	bl	9000b580 <putchar>
          phost->gState = HOST_ABORT_STATE;
90007040:	230d      	movs	r3, #13
          phost->gState = HOST_IDLE;
90007042:	7023      	strb	r3, [r4, #0]
90007044:	e7c5      	b.n	90006fd2 <USBH_Process+0x216>
          USBH_FreePipe(phost, phost->Control.pipe_out);
90007046:	7961      	ldrb	r1, [r4, #5]
90007048:	4620      	mov	r0, r4
9000704a:	f000 fc78 	bl	9000793e <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
9000704e:	7921      	ldrb	r1, [r4, #4]
90007050:	4620      	mov	r0, r4
90007052:	f000 fc74 	bl	9000793e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
90007056:	2300      	movs	r3, #0
90007058:	7063      	strb	r3, [r4, #1]
9000705a:	e7f2      	b.n	90007042 <USBH_Process+0x286>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
9000705c:	2101      	movs	r1, #1
9000705e:	4620      	mov	r0, r4
90007060:	f000 fbaf 	bl	900077c2 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
90007064:	4606      	mov	r6, r0
90007066:	b980      	cbnz	r0, 9000708a <USBH_Process+0x2ce>
        phost->device.address = USBH_DEVICE_ADDRESS;
90007068:	2501      	movs	r5, #1
        USBH_Delay(2U);
9000706a:	2002      	movs	r0, #2
9000706c:	f003 fbe6 	bl	9000a83c <USBH_Delay>
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
90007070:	4824      	ldr	r0, [pc, #144]	; (90007104 <USBH_Process+0x348>)
90007072:	4629      	mov	r1, r5
        phost->device.address = USBH_DEVICE_ADDRESS;
90007074:	f884 541c 	strb.w	r5, [r4, #1052]	; 0x41c
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
90007078:	f004 fa70 	bl	9000b55c <iprintf>
9000707c:	200a      	movs	r0, #10
9000707e:	f004 fa7f 	bl	9000b580 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
90007082:	2303      	movs	r3, #3
90007084:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
90007086:	79a3      	ldrb	r3, [r4, #6]
90007088:	e74a      	b.n	90006f20 <USBH_Process+0x164>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
9000708a:	2803      	cmp	r0, #3
9000708c:	f47f af64 	bne.w	90006f58 <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Device Set Address request failed");
90007090:	4814      	ldr	r0, [pc, #80]	; (900070e4 <USBH_Process+0x328>)
90007092:	f004 fa63 	bl	9000b55c <iprintf>
90007096:	481c      	ldr	r0, [pc, #112]	; (90007108 <USBH_Process+0x34c>)
90007098:	f004 fa60 	bl	9000b55c <iprintf>
9000709c:	200a      	movs	r0, #10
9000709e:	f004 fa6f 	bl	9000b580 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
900070a2:	4812      	ldr	r0, [pc, #72]	; (900070ec <USBH_Process+0x330>)
900070a4:	f004 fa5a 	bl	9000b55c <iprintf>
900070a8:	200a      	movs	r0, #10
900070aa:	f004 fa69 	bl	9000b580 <putchar>
        phost->gState = HOST_ABORT_STATE;
900070ae:	230d      	movs	r3, #13
900070b0:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
900070b2:	2300      	movs	r3, #0
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
900070b4:	7063      	strb	r3, [r4, #1]
900070b6:	e74f      	b.n	90006f58 <USBH_Process+0x19c>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
900070b8:	2109      	movs	r1, #9
900070ba:	4620      	mov	r0, r4
900070bc:	f000 fad6 	bl	9000766c <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
900070c0:	bb20      	cbnz	r0, 9000710c <USBH_Process+0x350>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
900070c2:	2304      	movs	r3, #4
900070c4:	e7f6      	b.n	900070b4 <USBH_Process+0x2f8>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
900070c6:	f8b4 143a 	ldrh.w	r1, [r4, #1082]	; 0x43a
900070ca:	4620      	mov	r0, r4
900070cc:	f000 face 	bl	9000766c <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
900070d0:	b9e0      	cbnz	r0, 9000710c <USBH_Process+0x350>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
900070d2:	2305      	movs	r3, #5
900070d4:	e7ee      	b.n	900070b4 <USBH_Process+0x2f8>
900070d6:	bf00      	nop
900070d8:	90010a1e 	.word	0x90010a1e
900070dc:	90010a33 	.word	0x90010a33
900070e0:	90010a4e 	.word	0x90010a4e
900070e4:	9001096c 	.word	0x9001096c
900070e8:	90010a7a 	.word	0x90010a7a
900070ec:	90010aae 	.word	0x90010aae
900070f0:	90010aed 	.word	0x90010aed
900070f4:	90010af6 	.word	0x90010af6
900070f8:	90010c1d 	.word	0x90010c1d
900070fc:	90010c2f 	.word	0x90010c2f
90007100:	90010aff 	.word	0x90010aff
90007104:	90010b38 	.word	0x90010b38
90007108:	90010b50 	.word	0x90010b50
      else if (ReqStatus == USBH_NOT_SUPPORTED)
9000710c:	2803      	cmp	r0, #3
9000710e:	f47f af23 	bne.w	90006f58 <USBH_Process+0x19c>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
90007112:	4892      	ldr	r0, [pc, #584]	; (9000735c <USBH_Process+0x5a0>)
90007114:	f004 fa22 	bl	9000b55c <iprintf>
90007118:	4891      	ldr	r0, [pc, #580]	; (90007360 <USBH_Process+0x5a4>)
9000711a:	f004 fa1f 	bl	9000b55c <iprintf>
9000711e:	200a      	movs	r0, #10
90007120:	f004 fa2e 	bl	9000b580 <putchar>
        phost->device.EnumCnt++;
90007124:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
90007128:	3301      	adds	r3, #1
9000712a:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
9000712c:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
9000712e:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
90007132:	f63f af24 	bhi.w	90006f7e <USBH_Process+0x1c2>
          USBH_FreePipe(phost, phost->Control.pipe_out);
90007136:	7961      	ldrb	r1, [r4, #5]
90007138:	4620      	mov	r0, r4
9000713a:	f000 fc00 	bl	9000793e <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
9000713e:	7921      	ldrb	r1, [r4, #4]
90007140:	4620      	mov	r0, r4
90007142:	f000 fbfc 	bl	9000793e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
90007146:	2300      	movs	r3, #0
90007148:	7063      	strb	r3, [r4, #1]
9000714a:	e729      	b.n	90006fa0 <USBH_Process+0x1e4>
      if (phost->device.DevDesc.iManufacturer != 0U)
9000714c:	f894 1434 	ldrb.w	r1, [r4, #1076]	; 0x434
90007150:	b199      	cbz	r1, 9000717a <USBH_Process+0x3be>
                                        phost->device.Data, 0xFFU);
90007152:	f504 7507 	add.w	r5, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
90007156:	23ff      	movs	r3, #255	; 0xff
90007158:	4620      	mov	r0, r4
9000715a:	462a      	mov	r2, r5
9000715c:	f000 fb0a 	bl	90007774 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
90007160:	b940      	cbnz	r0, 90007174 <USBH_Process+0x3b8>
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
90007162:	4629      	mov	r1, r5
90007164:	487f      	ldr	r0, [pc, #508]	; (90007364 <USBH_Process+0x5a8>)
90007166:	f004 f9f9 	bl	9000b55c <iprintf>
9000716a:	200a      	movs	r0, #10
9000716c:	f004 fa08 	bl	9000b580 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
90007170:	2306      	movs	r3, #6
90007172:	e79f      	b.n	900070b4 <USBH_Process+0x2f8>
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
90007174:	2803      	cmp	r0, #3
90007176:	f47f aeef 	bne.w	90006f58 <USBH_Process+0x19c>
        {
          USBH_UsrLog("Manufacturer : N/A");
9000717a:	487b      	ldr	r0, [pc, #492]	; (90007368 <USBH_Process+0x5ac>)
9000717c:	f004 f9ee 	bl	9000b55c <iprintf>
90007180:	e7f3      	b.n	9000716a <USBH_Process+0x3ae>
#endif
      }
      break;

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
90007182:	f894 1435 	ldrb.w	r1, [r4, #1077]	; 0x435
90007186:	b199      	cbz	r1, 900071b0 <USBH_Process+0x3f4>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
                                        phost->device.Data, 0xFFU);
90007188:	f504 7507 	add.w	r5, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
9000718c:	23ff      	movs	r3, #255	; 0xff
9000718e:	4620      	mov	r0, r4
90007190:	462a      	mov	r2, r5
90007192:	f000 faef 	bl	90007774 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
90007196:	b940      	cbnz	r0, 900071aa <USBH_Process+0x3ee>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
90007198:	4629      	mov	r1, r5
9000719a:	4874      	ldr	r0, [pc, #464]	; (9000736c <USBH_Process+0x5b0>)
9000719c:	f004 f9de 	bl	9000b55c <iprintf>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
        {
          USBH_UsrLog("Product : N/A");
900071a0:	200a      	movs	r0, #10
900071a2:	f004 f9ed 	bl	9000b580 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
900071a6:	2307      	movs	r3, #7
900071a8:	e784      	b.n	900070b4 <USBH_Process+0x2f8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
900071aa:	2803      	cmp	r0, #3
900071ac:	f47f aed4 	bne.w	90006f58 <USBH_Process+0x19c>
          USBH_UsrLog("Product : N/A");
900071b0:	486f      	ldr	r0, [pc, #444]	; (90007370 <USBH_Process+0x5b4>)
900071b2:	f004 f9d3 	bl	9000b55c <iprintf>
900071b6:	e7f3      	b.n	900071a0 <USBH_Process+0x3e4>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
900071b8:	f894 1436 	ldrb.w	r1, [r4, #1078]	; 0x436
900071bc:	b199      	cbz	r1, 900071e6 <USBH_Process+0x42a>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
                                        phost->device.Data, 0xFFU);
900071be:	f504 7607 	add.w	r6, r4, #540	; 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
900071c2:	23ff      	movs	r3, #255	; 0xff
900071c4:	4620      	mov	r0, r4
900071c6:	4632      	mov	r2, r6
900071c8:	f000 fad4 	bl	90007774 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
900071cc:	4605      	mov	r5, r0
900071ce:	b938      	cbnz	r0, 900071e0 <USBH_Process+0x424>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
900071d0:	4631      	mov	r1, r6
900071d2:	4868      	ldr	r0, [pc, #416]	; (90007374 <USBH_Process+0x5b8>)
900071d4:	f004 f9c2 	bl	9000b55c <iprintf>
900071d8:	200a      	movs	r0, #10
900071da:	f004 f9d1 	bl	9000b580 <putchar>
          Status = USBH_OK;
900071de:	e6f8      	b.n	90006fd2 <USBH_Process+0x216>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
900071e0:	2803      	cmp	r0, #3
900071e2:	f47f aeb9 	bne.w	90006f58 <USBH_Process+0x19c>
        {
          USBH_UsrLog("Serial Number : N/A");
900071e6:	4864      	ldr	r0, [pc, #400]	; (90007378 <USBH_Process+0x5bc>)
          Status = USBH_OK;
900071e8:	2500      	movs	r5, #0
          USBH_UsrLog("Serial Number : N/A");
900071ea:	f004 f9b7 	bl	9000b55c <iprintf>
900071ee:	200a      	movs	r0, #10
900071f0:	f004 f9c6 	bl	9000b580 <putchar>
          Status = USBH_OK;
900071f4:	e6ed      	b.n	90006fd2 <USBH_Process+0x216>
          phost->gState = HOST_INPUT;
900071f6:	2307      	movs	r3, #7
900071f8:	e624      	b.n	90006e44 <USBH_Process+0x88>
      if (phost->pUser != NULL)
900071fa:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
900071fe:	2b00      	cmp	r3, #0
90007200:	f43f ae0f 	beq.w	90006e22 <USBH_Process+0x66>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
90007204:	2101      	movs	r1, #1
90007206:	4620      	mov	r0, r4
90007208:	4798      	blx	r3
9000720a:	e6fe      	b.n	9000700a <USBH_Process+0x24e>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
9000720c:	f894 143d 	ldrb.w	r1, [r4, #1085]	; 0x43d
90007210:	4620      	mov	r0, r4
90007212:	f000 fae3 	bl	900077dc <USBH_SetCfg>
90007216:	2800      	cmp	r0, #0
90007218:	f47f ae03 	bne.w	90006e22 <USBH_Process+0x66>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
9000721c:	2309      	movs	r3, #9
        USBH_UsrLog("Default configuration set.");
9000721e:	4857      	ldr	r0, [pc, #348]	; (9000737c <USBH_Process+0x5c0>)
        phost->gState = HOST_SET_WAKEUP_FEATURE;
90007220:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
90007222:	f004 f99b 	bl	9000b55c <iprintf>
90007226:	e042      	b.n	900072ae <USBH_Process+0x4f2>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
90007228:	f894 343f 	ldrb.w	r3, [r4, #1087]	; 0x43f
9000722c:	069b      	lsls	r3, r3, #26
9000722e:	d50c      	bpl.n	9000724a <USBH_Process+0x48e>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
90007230:	2101      	movs	r1, #1
90007232:	4620      	mov	r0, r4
90007234:	f000 fadf 	bl	900077f6 <USBH_SetFeature>
90007238:	2800      	cmp	r0, #0
9000723a:	f47f adf2 	bne.w	90006e22 <USBH_Process+0x66>
          USBH_UsrLog("Device remote wakeup enabled");
9000723e:	4850      	ldr	r0, [pc, #320]	; (90007380 <USBH_Process+0x5c4>)
90007240:	f004 f98c 	bl	9000b55c <iprintf>
90007244:	200a      	movs	r0, #10
90007246:	f004 f99b 	bl	9000b580 <putchar>
        phost->gState = HOST_CHECK_CLASS;
9000724a:	230a      	movs	r3, #10
9000724c:	e5fa      	b.n	90006e44 <USBH_Process+0x88>
      if (phost->ClassNumber == 0U)
9000724e:	f8d4 346c 	ldr.w	r3, [r4, #1132]	; 0x46c
90007252:	b90b      	cbnz	r3, 90007258 <USBH_Process+0x49c>
        USBH_UsrLog("No Class has been registered.");
90007254:	484b      	ldr	r0, [pc, #300]	; (90007384 <USBH_Process+0x5c8>)
90007256:	e7e4      	b.n	90007222 <USBH_Process+0x466>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
90007258:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
9000725c:	f894 2447 	ldrb.w	r2, [r4, #1095]	; 0x447
90007260:	7919      	ldrb	r1, [r3, #4]
90007262:	4291      	cmp	r1, r2
90007264:	d006      	beq.n	90007274 <USBH_Process+0x4b8>
90007266:	2300      	movs	r3, #0
          USBH_UsrLog("No registered class for this device.");
90007268:	4847      	ldr	r0, [pc, #284]	; (90007388 <USBH_Process+0x5cc>)
9000726a:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
          phost->gState = HOST_ABORT_STATE;
9000726e:	230d      	movs	r3, #13
90007270:	7023      	strb	r3, [r4, #0]
          USBH_UsrLog("No registered class for this device.");
90007272:	e7d6      	b.n	90007222 <USBH_Process+0x466>
90007274:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
          if (phost->pActiveClass->Init(phost) == USBH_OK)
90007278:	4620      	mov	r0, r4
9000727a:	689b      	ldr	r3, [r3, #8]
9000727c:	4798      	blx	r3
9000727e:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90007282:	b970      	cbnz	r0, 900072a2 <USBH_Process+0x4e6>
            phost->gState = HOST_CLASS_REQUEST;
90007284:	2206      	movs	r2, #6
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
90007286:	4841      	ldr	r0, [pc, #260]	; (9000738c <USBH_Process+0x5d0>)
            phost->gState = HOST_CLASS_REQUEST;
90007288:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
9000728a:	6819      	ldr	r1, [r3, #0]
9000728c:	f004 f966 	bl	9000b55c <iprintf>
90007290:	200a      	movs	r0, #10
90007292:	f004 f975 	bl	9000b580 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
90007296:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
9000729a:	2103      	movs	r1, #3
9000729c:	4620      	mov	r0, r4
9000729e:	4798      	blx	r3
900072a0:	e5bf      	b.n	90006e22 <USBH_Process+0x66>
            phost->gState = HOST_ABORT_STATE;
900072a2:	220d      	movs	r2, #13
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
900072a4:	483a      	ldr	r0, [pc, #232]	; (90007390 <USBH_Process+0x5d4>)
            phost->gState = HOST_ABORT_STATE;
900072a6:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
900072a8:	6819      	ldr	r1, [r3, #0]
900072aa:	f004 f957 	bl	9000b55c <iprintf>
        USBH_ErrLog("Invalid Class Driver.");
900072ae:	200a      	movs	r0, #10
900072b0:	f004 f966 	bl	9000b580 <putchar>
900072b4:	e5b5      	b.n	90006e22 <USBH_Process+0x66>
      if (phost->pActiveClass != NULL)
900072b6:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
900072ba:	b1ab      	cbz	r3, 900072e8 <USBH_Process+0x52c>
        status = phost->pActiveClass->Requests(phost);
900072bc:	691b      	ldr	r3, [r3, #16]
900072be:	4620      	mov	r0, r4
900072c0:	4798      	blx	r3
900072c2:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
900072c6:	f89d 3017 	ldrb.w	r3, [sp, #23]
900072ca:	b90b      	cbnz	r3, 900072d0 <USBH_Process+0x514>
          phost->gState = HOST_CLASS;
900072cc:	230b      	movs	r3, #11
900072ce:	e5b9      	b.n	90006e44 <USBH_Process+0x88>
        else if (status == USBH_FAIL)
900072d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
900072d4:	2b02      	cmp	r3, #2
900072d6:	f47f ada4 	bne.w	90006e22 <USBH_Process+0x66>
          phost->gState = HOST_ABORT_STATE;
900072da:	230d      	movs	r3, #13
          USBH_ErrLog("Device not responding Please Unplug.");
900072dc:	481f      	ldr	r0, [pc, #124]	; (9000735c <USBH_Process+0x5a0>)
          phost->gState = HOST_ABORT_STATE;
900072de:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
900072e0:	f004 f93c 	bl	9000b55c <iprintf>
900072e4:	482b      	ldr	r0, [pc, #172]	; (90007394 <USBH_Process+0x5d8>)
900072e6:	e79c      	b.n	90007222 <USBH_Process+0x466>
        phost->gState = HOST_ABORT_STATE;
900072e8:	230d      	movs	r3, #13
        USBH_ErrLog("Invalid Class Driver.");
900072ea:	481c      	ldr	r0, [pc, #112]	; (9000735c <USBH_Process+0x5a0>)
        phost->gState = HOST_ABORT_STATE;
900072ec:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
900072ee:	f004 f935 	bl	9000b55c <iprintf>
900072f2:	4829      	ldr	r0, [pc, #164]	; (90007398 <USBH_Process+0x5dc>)
900072f4:	e795      	b.n	90007222 <USBH_Process+0x466>
      if (phost->pActiveClass != NULL)
900072f6:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
900072fa:	2b00      	cmp	r3, #0
900072fc:	f43f ad91 	beq.w	90006e22 <USBH_Process+0x66>
        phost->pActiveClass->BgndProcess(phost);
90007300:	695b      	ldr	r3, [r3, #20]
90007302:	4620      	mov	r0, r4
90007304:	4798      	blx	r3
90007306:	e58c      	b.n	90006e22 <USBH_Process+0x66>
      phost->device.is_disconnected = 0U;
90007308:	2500      	movs	r5, #0
      DeInitStateMachine(phost);
9000730a:	4620      	mov	r0, r4
      phost->device.is_disconnected = 0U;
9000730c:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
      DeInitStateMachine(phost);
90007310:	f7ff fc7e 	bl	90006c10 <DeInitStateMachine.isra.0>
      if (phost->pActiveClass != NULL)
90007314:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
90007318:	b123      	cbz	r3, 90007324 <USBH_Process+0x568>
        phost->pActiveClass->DeInit(phost);
9000731a:	68db      	ldr	r3, [r3, #12]
9000731c:	4620      	mov	r0, r4
9000731e:	4798      	blx	r3
        phost->pActiveClass = NULL;
90007320:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
      if (phost->pUser != NULL)
90007324:	f8d4 34c0 	ldr.w	r3, [r4, #1216]	; 0x4c0
90007328:	b113      	cbz	r3, 90007330 <USBH_Process+0x574>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
9000732a:	2105      	movs	r1, #5
9000732c:	4620      	mov	r0, r4
9000732e:	4798      	blx	r3
      USBH_UsrLog("USB Device disconnected");
90007330:	481a      	ldr	r0, [pc, #104]	; (9000739c <USBH_Process+0x5e0>)
90007332:	f004 f913 	bl	9000b55c <iprintf>
90007336:	200a      	movs	r0, #10
90007338:	f004 f922 	bl	9000b580 <putchar>
      if (phost->device.is_ReEnumerated == 1U)
9000733c:	f894 3422 	ldrb.w	r3, [r4, #1058]	; 0x422
90007340:	2b01      	cmp	r3, #1
90007342:	d106      	bne.n	90007352 <USBH_Process+0x596>
        phost->device.is_ReEnumerated = 0U;
90007344:	2300      	movs	r3, #0
        USBH_Start(phost);
90007346:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
90007348:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
        USBH_Start(phost);
9000734c:	f7ff fd2c 	bl	90006da8 <USBH_Start>
90007350:	e567      	b.n	90006e22 <USBH_Process+0x66>
        USBH_LL_Start(phost);
90007352:	4620      	mov	r0, r4
90007354:	f003 f9f0 	bl	9000a738 <USBH_LL_Start>
90007358:	e563      	b.n	90006e22 <USBH_Process+0x66>
9000735a:	bf00      	nop
9000735c:	9001096c 	.word	0x9001096c
90007360:	90010b81 	.word	0x90010b81
90007364:	90010bc3 	.word	0x90010bc3
90007368:	90010bd5 	.word	0x90010bd5
9000736c:	9001086f 	.word	0x9001086f
90007370:	90010be8 	.word	0x90010be8
90007374:	90010bf6 	.word	0x90010bf6
90007378:	90010c09 	.word	0x90010c09
9000737c:	90010c55 	.word	0x90010c55
90007380:	90010c70 	.word	0x90010c70
90007384:	90010c8d 	.word	0x90010c8d
90007388:	90010cab 	.word	0x90010cab
9000738c:	90010cd0 	.word	0x90010cd0
90007390:	90010ce2 	.word	0x90010ce2
90007394:	90010d02 	.word	0x90010d02
90007398:	90010d27 	.word	0x90010d27
9000739c:	90010d3d 	.word	0x90010d3d

900073a0 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
900073a0:	f8c0 14b0 	str.w	r1, [r0, #1200]	; 0x4b0
}
900073a4:	4770      	bx	lr

900073a6 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
900073a6:	f8d0 24b0 	ldr.w	r2, [r0, #1200]	; 0x4b0
900073aa:	3201      	adds	r2, #1
900073ac:	f8c0 24b0 	str.w	r2, [r0, #1200]	; 0x4b0
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
900073b0:	7802      	ldrb	r2, [r0, #0]
900073b2:	2a0b      	cmp	r2, #11
900073b4:	d104      	bne.n	900073c0 <USBH_LL_IncTimer+0x1a>
900073b6:	f8d0 3468 	ldr.w	r3, [r0, #1128]	; 0x468
900073ba:	b10b      	cbz	r3, 900073c0 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
900073bc:	699b      	ldr	r3, [r3, #24]
900073be:	4718      	bx	r3
}
900073c0:	4770      	bx	lr

900073c2 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
900073c2:	2301      	movs	r3, #1
900073c4:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
900073c8:	4770      	bx	lr

900073ca <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
900073ca:	2300      	movs	r3, #0
900073cc:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
900073d0:	4770      	bx	lr

900073d2 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
900073d2:	2301      	movs	r3, #1
900073d4:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
900073d8:	2300      	movs	r3, #0
900073da:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
900073de:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
900073e2:	4618      	mov	r0, r3
900073e4:	4770      	bx	lr

900073e6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
900073e6:	b538      	push	{r3, r4, r5, lr}
  /* update device connection states */
  phost->device.is_disconnected = 1U;
900073e8:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
900073ea:	2500      	movs	r5, #0
{
900073ec:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
900073ee:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
900073f2:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
900073f6:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  USBH_LL_Stop(phost);
900073fa:	f003 f9a4 	bl	9000a746 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
900073fe:	7921      	ldrb	r1, [r4, #4]
90007400:	4620      	mov	r0, r4
90007402:	f000 fa9c 	bl	9000793e <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
90007406:	7961      	ldrb	r1, [r4, #5]
90007408:	4620      	mov	r0, r4
9000740a:	f000 fa98 	bl	9000793e <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
9000740e:	4628      	mov	r0, r5
90007410:	bd38      	pop	{r3, r4, r5, pc}
	...

90007414 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
90007414:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
90007416:	7885      	ldrb	r5, [r0, #2]
{
90007418:	4604      	mov	r4, r0
  switch (phost->RequestState)
9000741a:	2d01      	cmp	r5, #1
9000741c:	d003      	beq.n	90007426 <USBH_CtlReq+0x12>
9000741e:	2d02      	cmp	r5, #2
90007420:	d007      	beq.n	90007432 <USBH_CtlReq+0x1e>
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
        {
          phost->Control.state = CTRL_ERROR;
90007422:	2501      	movs	r5, #1
  return status;
90007424:	e019      	b.n	9000745a <USBH_CtlReq+0x46>
      phost->RequestState = CMD_WAIT;
90007426:	2302      	movs	r3, #2
      phost->Control.buff = buff;
90007428:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
9000742a:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
9000742c:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
9000742e:	70a3      	strb	r3, [r4, #2]
90007430:	e013      	b.n	9000745a <USBH_CtlReq+0x46>
  switch (phost->Control.state)
90007432:	7e06      	ldrb	r6, [r0, #24]
90007434:	1e73      	subs	r3, r6, #1
90007436:	2b0a      	cmp	r3, #10
90007438:	d8f3      	bhi.n	90007422 <USBH_CtlReq+0xe>
9000743a:	e8df f003 	tbb	[pc, r3]
9000743e:	1106      	.short	0x1106
90007440:	4e42392f 	.word	0x4e42392f
90007444:	8478675d 	.word	0x8478675d
90007448:	8c          	.byte	0x8c
90007449:	00          	.byte	0x00
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
9000744a:	7942      	ldrb	r2, [r0, #5]
9000744c:	f100 0110 	add.w	r1, r0, #16
90007450:	f000 f9eb 	bl	9000782a <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
90007454:	4635      	mov	r5, r6
90007456:	2302      	movs	r3, #2
90007458:	7623      	strb	r3, [r4, #24]
}
9000745a:	4628      	mov	r0, r5
9000745c:	b002      	add	sp, #8
9000745e:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90007460:	7941      	ldrb	r1, [r0, #5]
90007462:	f003 f9b7 	bl	9000a7d4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90007466:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90007468:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
9000746a:	d111      	bne.n	90007490 <USBH_CtlReq+0x7c>
        if (phost->Control.setup.b.wLength.w != 0U)
9000746c:	8ae2      	ldrh	r2, [r4, #22]
9000746e:	f994 3010 	ldrsb.w	r3, [r4, #16]
90007472:	b13a      	cbz	r2, 90007484 <USBH_CtlReq+0x70>
          if (direction == USB_D2H)
90007474:	2b00      	cmp	r3, #0
90007476:	da02      	bge.n	9000747e <USBH_CtlReq+0x6a>
            phost->Control.state = CTRL_DATA_IN;
90007478:	2303      	movs	r3, #3
        phost->Control.state = CTRL_IDLE;
9000747a:	7623      	strb	r3, [r4, #24]
9000747c:	e7ed      	b.n	9000745a <USBH_CtlReq+0x46>
            phost->Control.state = CTRL_DATA_OUT;
9000747e:	2305      	movs	r3, #5
    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_IN_WAIT;
90007480:	7623      	strb	r3, [r4, #24]
      else if (status == USBH_FAIL)
90007482:	e7ce      	b.n	90007422 <USBH_CtlReq+0xe>
          if (direction == USB_D2H)
90007484:	2b00      	cmp	r3, #0
90007486:	da01      	bge.n	9000748c <USBH_CtlReq+0x78>
        phost->Control.state = CTRL_STATUS_OUT;
90007488:	2309      	movs	r3, #9
9000748a:	e7f9      	b.n	90007480 <USBH_CtlReq+0x6c>
            phost->Control.state = CTRL_STATUS_IN;
9000748c:	2307      	movs	r3, #7
9000748e:	e7f7      	b.n	90007480 <USBH_CtlReq+0x6c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
90007490:	2804      	cmp	r0, #4
90007492:	d001      	beq.n	90007498 <USBH_CtlReq+0x84>
90007494:	2802      	cmp	r0, #2
90007496:	d1c4      	bne.n	90007422 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
90007498:	230b      	movs	r3, #11
9000749a:	e7f1      	b.n	90007480 <USBH_CtlReq+0x6c>
      phost->Control.timer = (uint16_t)phost->Timer;
9000749c:	f8d0 34b0 	ldr.w	r3, [r0, #1200]	; 0x4b0
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
900074a0:	8982      	ldrh	r2, [r0, #12]
      phost->Control.timer = (uint16_t)phost->Timer;
900074a2:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
900074a4:	6881      	ldr	r1, [r0, #8]
900074a6:	7903      	ldrb	r3, [r0, #4]
900074a8:	f000 f9e6 	bl	90007878 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
900074ac:	2304      	movs	r3, #4
900074ae:	e7e7      	b.n	90007480 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
900074b0:	7901      	ldrb	r1, [r0, #4]
900074b2:	f003 f98f 	bl	9000a7d4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
900074b6:	2801      	cmp	r0, #1
900074b8:	d0e6      	beq.n	90007488 <USBH_CtlReq+0x74>
      if (URB_Status == USBH_URB_STALL)
900074ba:	2805      	cmp	r0, #5
900074bc:	d035      	beq.n	9000752a <USBH_CtlReq+0x116>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
900074be:	2804      	cmp	r0, #4
900074c0:	e7e9      	b.n	90007496 <USBH_CtlReq+0x82>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
900074c2:	2501      	movs	r5, #1
900074c4:	9500      	str	r5, [sp, #0]
900074c6:	7943      	ldrb	r3, [r0, #5]
900074c8:	8982      	ldrh	r2, [r0, #12]
900074ca:	6881      	ldr	r1, [r0, #8]
900074cc:	f000 f9bd 	bl	9000784a <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
900074d0:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
900074d4:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
900074d6:	2306      	movs	r3, #6
900074d8:	e7cf      	b.n	9000747a <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
900074da:	7941      	ldrb	r1, [r0, #5]
900074dc:	f003 f97a 	bl	9000a7d4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
900074e0:	2801      	cmp	r0, #1
900074e2:	d0d3      	beq.n	9000748c <USBH_CtlReq+0x78>
      else if (URB_Status == USBH_URB_STALL)
900074e4:	2805      	cmp	r0, #5
900074e6:	d020      	beq.n	9000752a <USBH_CtlReq+0x116>
      else if (URB_Status == USBH_URB_NOTREADY)
900074e8:	2802      	cmp	r0, #2
900074ea:	d0c8      	beq.n	9000747e <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
900074ec:	2804      	cmp	r0, #4
900074ee:	d198      	bne.n	90007422 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
900074f0:	230b      	movs	r3, #11
900074f2:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
900074f4:	2301      	movs	r3, #1
900074f6:	e79a      	b.n	9000742e <USBH_CtlReq+0x1a>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
900074f8:	2200      	movs	r2, #0
900074fa:	7903      	ldrb	r3, [r0, #4]
900074fc:	4611      	mov	r1, r2
900074fe:	f000 f9bb 	bl	90007878 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
90007502:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
90007506:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
90007508:	2308      	movs	r3, #8
9000750a:	e7b9      	b.n	90007480 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
9000750c:	7901      	ldrb	r1, [r0, #4]
9000750e:	f003 f961 	bl	9000a7d4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
90007512:	2801      	cmp	r0, #1
90007514:	d104      	bne.n	90007520 <USBH_CtlReq+0x10c>
        status = USBH_OK;
90007516:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
90007518:	2301      	movs	r3, #1
9000751a:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
9000751c:	2300      	movs	r3, #0
9000751e:	e7ac      	b.n	9000747a <USBH_CtlReq+0x66>
      else if (URB_Status == USBH_URB_ERROR)
90007520:	2804      	cmp	r0, #4
90007522:	d0b9      	beq.n	90007498 <USBH_CtlReq+0x84>
        if (URB_Status == USBH_URB_STALL)
90007524:	2805      	cmp	r0, #5
90007526:	f47f af7c 	bne.w	90007422 <USBH_CtlReq+0xe>
        status = USBH_OK;
9000752a:	2503      	movs	r5, #3
9000752c:	e7f4      	b.n	90007518 <USBH_CtlReq+0x104>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
9000752e:	2200      	movs	r2, #0
90007530:	2501      	movs	r5, #1
90007532:	4611      	mov	r1, r2
90007534:	9500      	str	r5, [sp, #0]
90007536:	7943      	ldrb	r3, [r0, #5]
90007538:	f000 f987 	bl	9000784a <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
9000753c:	f8d4 34b0 	ldr.w	r3, [r4, #1200]	; 0x4b0
90007540:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
90007542:	230a      	movs	r3, #10
90007544:	e799      	b.n	9000747a <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
90007546:	7941      	ldrb	r1, [r0, #5]
90007548:	f003 f944 	bl	9000a7d4 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
9000754c:	2801      	cmp	r0, #1
9000754e:	d0e2      	beq.n	90007516 <USBH_CtlReq+0x102>
      else if (URB_Status == USBH_URB_NOTREADY)
90007550:	2802      	cmp	r0, #2
90007552:	d1b4      	bne.n	900074be <USBH_CtlReq+0xaa>
90007554:	e798      	b.n	90007488 <USBH_CtlReq+0x74>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
90007556:	7e43      	ldrb	r3, [r0, #25]
90007558:	3301      	adds	r3, #1
9000755a:	b2db      	uxtb	r3, r3
9000755c:	2b02      	cmp	r3, #2
9000755e:	7643      	strb	r3, [r0, #25]
90007560:	d803      	bhi.n	9000756a <USBH_CtlReq+0x156>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
90007562:	2501      	movs	r5, #1
90007564:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
90007566:	7085      	strb	r5, [r0, #2]
      else if (status == USBH_FAIL)
90007568:	e777      	b.n	9000745a <USBH_CtlReq+0x46>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
9000756a:	2600      	movs	r6, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
9000756c:	f8d0 34c0 	ldr.w	r3, [r0, #1216]	; 0x4c0
90007570:	2106      	movs	r1, #6
90007572:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");
90007574:	4809      	ldr	r0, [pc, #36]	; (9000759c <USBH_CtlReq+0x188>)
        phost->Control.errorcount = 0U;
90007576:	7666      	strb	r6, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");
90007578:	f003 fff0 	bl	9000b55c <iprintf>
9000757c:	4808      	ldr	r0, [pc, #32]	; (900075a0 <USBH_CtlReq+0x18c>)
9000757e:	f003 ffed 	bl	9000b55c <iprintf>
90007582:	200a      	movs	r0, #10
90007584:	f003 fffc 	bl	9000b580 <putchar>

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
90007588:	7961      	ldrb	r1, [r4, #5]
9000758a:	4620      	mov	r0, r4
9000758c:	f000 f9d7 	bl	9000793e <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
90007590:	7921      	ldrb	r1, [r4, #4]
90007592:	4620      	mov	r0, r4
90007594:	f000 f9d3 	bl	9000793e <USBH_FreePipe>

        phost->gState = HOST_IDLE;
90007598:	7026      	strb	r6, [r4, #0]
      else if (status == USBH_FAIL)
9000759a:	e7ab      	b.n	900074f4 <USBH_CtlReq+0xe0>
9000759c:	9001096c 	.word	0x9001096c
900075a0:	90010d55 	.word	0x90010d55

900075a4 <USBH_GetDescriptor>:
{
900075a4:	b430      	push	{r4, r5}
900075a6:	460c      	mov	r4, r1
900075a8:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
900075aa:	7883      	ldrb	r3, [r0, #2]
{
900075ac:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
900075b0:	2b01      	cmp	r3, #1
900075b2:	d10f      	bne.n	900075d4 <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
900075b4:	f064 047f 	orn	r4, r4, #127	; 0x7f
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
900075b8:	2306      	movs	r3, #6
    phost->Control.setup.b.wValue.w = value_idx;
900075ba:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
900075bc:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
900075be:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
900075c2:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
900075c4:	f240 4309 	movw	r3, #1033	; 0x409
900075c8:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wLength.w = length;
900075cc:	82c5      	strh	r5, [r0, #22]
      phost->Control.setup.b.wIndex.w = 0U;
900075ce:	bf18      	it	ne
900075d0:	2300      	movne	r3, #0
900075d2:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
900075d4:	462a      	mov	r2, r5
}
900075d6:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
900075d8:	f7ff bf1c 	b.w	90007414 <USBH_CtlReq>

900075dc <USBH_Get_DevDesc>:
{
900075dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((status = USBH_GetDescriptor(phost,
900075de:	f500 7307 	add.w	r3, r0, #540	; 0x21c
900075e2:	460d      	mov	r5, r1
900075e4:	9100      	str	r1, [sp, #0]
900075e6:	f44f 7280 	mov.w	r2, #256	; 0x100
900075ea:	2100      	movs	r1, #0
{
900075ec:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
900075ee:	f7ff ffd9 	bl	900075a4 <USBH_GetDescriptor>
900075f2:	bbc8      	cbnz	r0, 90007668 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
900075f4:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
  if (length > 8U)
900075f8:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
900075fa:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
900075fe:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
90007602:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
  dev_desc->bcdUSB             = LE16(buf +  2);
90007606:	f8b4 321e 	ldrh.w	r3, [r4, #542]	; 0x21e
9000760a:	f8a4 3428 	strh.w	r3, [r4, #1064]	; 0x428
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
9000760e:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
90007612:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
90007616:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
9000761a:	f884 342b 	strb.w	r3, [r4, #1067]	; 0x42b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
9000761e:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
90007622:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
90007626:	f894 3223 	ldrb.w	r3, [r4, #547]	; 0x223
9000762a:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
  if (length > 8U)
9000762e:	d91b      	bls.n	90007668 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16(buf +  8);
90007630:	f8b4 3224 	ldrh.w	r3, [r4, #548]	; 0x224
90007634:	f8a4 342e 	strh.w	r3, [r4, #1070]	; 0x42e
    dev_desc->idProduct          = LE16(buf + 10);
90007638:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
9000763c:	f8a4 3430 	strh.w	r3, [r4, #1072]	; 0x430
    dev_desc->bcdDevice          = LE16(buf + 12);
90007640:	f8b4 3228 	ldrh.w	r3, [r4, #552]	; 0x228
90007644:	f8a4 3432 	strh.w	r3, [r4, #1074]	; 0x432
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
90007648:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
9000764c:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
90007650:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
90007654:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
90007658:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
9000765c:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
90007660:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
90007664:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
}
90007668:	b003      	add	sp, #12
9000766a:	bd30      	pop	{r4, r5, pc}

9000766c <USBH_Get_CfgDesc>:
{
9000766c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;;
9000766e:	f100 051c 	add.w	r5, r0, #28
{
90007672:	460e      	mov	r6, r1
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
90007674:	9100      	str	r1, [sp, #0]
90007676:	f44f 7200 	mov.w	r2, #512	; 0x200
9000767a:	462b      	mov	r3, r5
9000767c:	2100      	movs	r1, #0
{
9000767e:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
90007680:	f7ff ff90 	bl	900075a4 <USBH_GetDescriptor>
90007684:	b9f0      	cbnz	r0, 900076c4 <USBH_Get_CfgDesc+0x58>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
90007686:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
90007688:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16(buf + 2);
9000768a:	8be7      	ldrh	r7, [r4, #30]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
9000768c:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
90007690:	7f63      	ldrb	r3, [r4, #29]
  cfg_desc->wTotalLength        = LE16(buf + 2);
90007692:	f8a4 743a 	strh.w	r7, [r4, #1082]	; 0x43a
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
90007696:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
9000769a:	f894 3020 	ldrb.w	r3, [r4, #32]
9000769e:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
900076a2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
900076a6:	f884 343d 	strb.w	r3, [r4, #1085]	; 0x43d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
900076aa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
900076ae:	f884 343e 	strb.w	r3, [r4, #1086]	; 0x43e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
900076b2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
900076b6:	f884 343f 	strb.w	r3, [r4, #1087]	; 0x43f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
900076ba:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
900076be:	f884 3440 	strb.w	r3, [r4, #1088]	; 0x440
  if (length > USB_CONFIGURATION_DESC_SIZE)
900076c2:	d854      	bhi.n	9000776e <USBH_Get_CfgDesc+0x102>
}
900076c4:	b003      	add	sp, #12
900076c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
900076c8:	782a      	ldrb	r2, [r5, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
900076ca:	4415      	add	r5, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
900076cc:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
900076ce:	786a      	ldrb	r2, [r5, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
900076d0:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
900076d2:	2a04      	cmp	r2, #4
900076d4:	d123      	bne.n	9000771e <USBH_Get_CfgDesc+0xb2>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
900076d6:	782a      	ldrb	r2, [r5, #0]
900076d8:	2601      	movs	r6, #1
900076da:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
900076de:	786a      	ldrb	r2, [r5, #1]
900076e0:	f884 2443 	strb.w	r2, [r4, #1091]	; 0x443
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
900076e4:	78aa      	ldrb	r2, [r5, #2]
900076e6:	f884 2444 	strb.w	r2, [r4, #1092]	; 0x444
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
900076ea:	78ea      	ldrb	r2, [r5, #3]
900076ec:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
900076f0:	f895 c004 	ldrb.w	ip, [r5, #4]
900076f4:	f884 c446 	strb.w	ip, [r4, #1094]	; 0x446
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
900076f8:	796a      	ldrb	r2, [r5, #5]
900076fa:	f884 2447 	strb.w	r2, [r4, #1095]	; 0x447
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
900076fe:	79aa      	ldrb	r2, [r5, #6]
90007700:	f884 2448 	strb.w	r2, [r4, #1096]	; 0x448
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
90007704:	79ea      	ldrb	r2, [r5, #7]
90007706:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
9000770a:	7a2a      	ldrb	r2, [r5, #8]
9000770c:	f884 244a 	strb.w	r2, [r4, #1098]	; 0x44a
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
90007710:	4561      	cmp	r1, ip
90007712:	d201      	bcs.n	90007718 <USBH_Get_CfgDesc+0xac>
90007714:	429f      	cmp	r7, r3
90007716:	d805      	bhi.n	90007724 <USBH_Get_CfgDesc+0xb8>
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
90007718:	4631      	mov	r1, r6
9000771a:	2e00      	cmp	r6, #0
9000771c:	d1d2      	bne.n	900076c4 <USBH_Get_CfgDesc+0x58>
9000771e:	429f      	cmp	r7, r3
90007720:	d8d2      	bhi.n	900076c8 <USBH_Get_CfgDesc+0x5c>
90007722:	e7cf      	b.n	900076c4 <USBH_Get_CfgDesc+0x58>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90007724:	782a      	ldrb	r2, [r5, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
90007726:	4415      	add	r5, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
90007728:	4413      	add	r3, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
9000772a:	786a      	ldrb	r2, [r5, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
9000772c:	b29b      	uxth	r3, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
9000772e:	2a05      	cmp	r2, #5
90007730:	d1ee      	bne.n	90007710 <USBH_Get_CfgDesc+0xa4>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
90007732:	b20a      	sxth	r2, r1
90007734:	f895 e000 	ldrb.w	lr, [r5]
            ep_ix++;
90007738:	3101      	adds	r1, #1
9000773a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
9000773e:	b2c9      	uxtb	r1, r1
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
90007740:	f882 e44c 	strb.w	lr, [r2, #1100]	; 0x44c
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
90007744:	f895 e001 	ldrb.w	lr, [r5, #1]
90007748:	f882 e44d 	strb.w	lr, [r2, #1101]	; 0x44d
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
9000774c:	f895 e002 	ldrb.w	lr, [r5, #2]
90007750:	f882 e44e 	strb.w	lr, [r2, #1102]	; 0x44e
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
90007754:	f895 e003 	ldrb.w	lr, [r5, #3]
90007758:	f882 e44f 	strb.w	lr, [r2, #1103]	; 0x44f
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
9000775c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
90007760:	f8a2 e450 	strh.w	lr, [r2, #1104]	; 0x450
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
90007764:	f895 e006 	ldrb.w	lr, [r5, #6]
90007768:	f882 e452 	strb.w	lr, [r2, #1106]	; 0x452
            ep_ix++;
9000776c:	e7d0      	b.n	90007710 <USBH_Get_CfgDesc+0xa4>
  uint8_t                      if_ix = 0U;
9000776e:	4606      	mov	r6, r0
    ptr = USB_LEN_CFG_DESC;
90007770:	2309      	movs	r3, #9
90007772:	e7d1      	b.n	90007718 <USBH_Get_CfgDesc+0xac>

90007774 <USBH_Get_StringDesc>:
{
90007774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                   phost->device.Data, length)) == USBH_OK)
90007776:	f500 7607 	add.w	r6, r0, #540	; 0x21c
{
9000777a:	4615      	mov	r5, r2
9000777c:	461f      	mov	r7, r3
  if ((status = USBH_GetDescriptor(phost,
9000777e:	f441 7240 	orr.w	r2, r1, #768	; 0x300
90007782:	9300      	str	r3, [sp, #0]
90007784:	2100      	movs	r1, #0
90007786:	4633      	mov	r3, r6
{
90007788:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
9000778a:	f7ff ff0b 	bl	900075a4 <USBH_GetDescriptor>
9000778e:	b978      	cbnz	r0, 900077b0 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
90007790:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
90007794:	2b03      	cmp	r3, #3
90007796:	d10b      	bne.n	900077b0 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
90007798:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
    for (idx = 0U; idx < strlength; idx += 2U)
9000779c:	4604      	mov	r4, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
9000779e:	3902      	subs	r1, #2
900077a0:	42b9      	cmp	r1, r7
900077a2:	bf28      	it	cs
900077a4:	4639      	movcs	r1, r7
900077a6:	b289      	uxth	r1, r1
    for (idx = 0U; idx < strlength; idx += 2U)
900077a8:	42a1      	cmp	r1, r4
900077aa:	d803      	bhi.n	900077b4 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
900077ac:	2300      	movs	r3, #0
900077ae:	702b      	strb	r3, [r5, #0]
}
900077b0:	b003      	add	sp, #12
900077b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
900077b4:	1933      	adds	r3, r6, r4
    for (idx = 0U; idx < strlength; idx += 2U)
900077b6:	3402      	adds	r4, #2
      *pdest =  psrc[idx];
900077b8:	789b      	ldrb	r3, [r3, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
900077ba:	b2a4      	uxth	r4, r4
      *pdest =  psrc[idx];
900077bc:	f805 3b01 	strb.w	r3, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
900077c0:	e7f2      	b.n	900077a8 <USBH_Get_StringDesc+0x34>

900077c2 <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
900077c2:	7883      	ldrb	r3, [r0, #2]
900077c4:	2b01      	cmp	r3, #1
900077c6:	d105      	bne.n	900077d4 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
900077c8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
900077cc:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
900077ce:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
900077d0:	2300      	movs	r3, #0
900077d2:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
900077d4:	2200      	movs	r2, #0
900077d6:	4611      	mov	r1, r2
900077d8:	f7ff be1c 	b.w	90007414 <USBH_CtlReq>

900077dc <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
900077dc:	7883      	ldrb	r3, [r0, #2]
900077de:	2b01      	cmp	r3, #1
900077e0:	d105      	bne.n	900077ee <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
900077e2:	f44f 6310 	mov.w	r3, #2304	; 0x900
    phost->Control.setup.b.wValue.w = cfg_idx;
900077e6:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
900077e8:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
900077ea:	2300      	movs	r3, #0
900077ec:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
900077ee:	2200      	movs	r2, #0
900077f0:	4611      	mov	r1, r2
900077f2:	f7ff be0f 	b.w	90007414 <USBH_CtlReq>

900077f6 <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
900077f6:	7883      	ldrb	r3, [r0, #2]
900077f8:	2b01      	cmp	r3, #1
900077fa:	d105      	bne.n	90007808 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
900077fc:	f44f 7340 	mov.w	r3, #768	; 0x300
    phost->Control.setup.b.wValue.w = wValue;
90007800:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
90007802:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
90007804:	2300      	movs	r3, #0
90007806:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
90007808:	2200      	movs	r2, #0
9000780a:	4611      	mov	r1, r2
9000780c:	f7ff be02 	b.w	90007414 <USBH_CtlReq>

90007810 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
90007810:	7883      	ldrb	r3, [r0, #2]
90007812:	2b01      	cmp	r3, #1
90007814:	d105      	bne.n	90007822 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
90007816:	f44f 7381 	mov.w	r3, #258	; 0x102
    phost->Control.setup.b.wIndex.w = ep_num;
9000781a:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
9000781c:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
9000781e:	2300      	movs	r3, #0
90007820:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
90007822:	2200      	movs	r2, #0
90007824:	4611      	mov	r1, r2
90007826:	f7ff bdf5 	b.w	90007414 <USBH_CtlReq>

9000782a <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
9000782a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
9000782c:	2400      	movs	r4, #0
{
9000782e:	460b      	mov	r3, r1
90007830:	4611      	mov	r1, r2
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007832:	2208      	movs	r2, #8
90007834:	e9cd 4300 	strd	r4, r3, [sp]
90007838:	e9cd 2402 	strd	r2, r4, [sp, #8]
9000783c:	4623      	mov	r3, r4
9000783e:	4622      	mov	r2, r4
90007840:	f002 ffb5 	bl	9000a7ae <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
90007844:	4620      	mov	r0, r4
90007846:	b004      	add	sp, #16
90007848:	bd10      	pop	{r4, pc}

9000784a <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
9000784a:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
9000784c:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
90007850:	b085      	sub	sp, #20
90007852:	460c      	mov	r4, r1
90007854:	4619      	mov	r1, r3
  {
    do_ping = 0U;
90007856:	2d00      	cmp	r5, #0
{
90007858:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
9000785c:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
9000785e:	bf18      	it	ne
90007860:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007862:	e9cd 2302 	strd	r2, r3, [sp, #8]
90007866:	2301      	movs	r3, #1
90007868:	9300      	str	r3, [sp, #0]
9000786a:	2300      	movs	r3, #0
9000786c:	461a      	mov	r2, r3
9000786e:	f002 ff9e 	bl	9000a7ae <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
90007872:	2000      	movs	r0, #0
90007874:	b005      	add	sp, #20
90007876:	bd30      	pop	{r4, r5, pc}

90007878 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
90007878:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
9000787a:	2400      	movs	r4, #0
{
9000787c:	b085      	sub	sp, #20
9000787e:	460d      	mov	r5, r1
90007880:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
90007882:	4623      	mov	r3, r4
90007884:	9501      	str	r5, [sp, #4]
90007886:	e9cd 2402 	strd	r2, r4, [sp, #8]
9000788a:	2201      	movs	r2, #1
9000788c:	9200      	str	r2, [sp, #0]
9000788e:	f002 ff8e 	bl	9000a7ae <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
90007892:	4620      	mov	r0, r4
90007894:	b005      	add	sp, #20
90007896:	bd30      	pop	{r4, r5, pc}

90007898 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
90007898:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
9000789a:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
9000789e:	b085      	sub	sp, #20
900078a0:	460c      	mov	r4, r1
900078a2:	4619      	mov	r1, r3
  {
    do_ping = 0U;
900078a4:	2d00      	cmp	r5, #0
{
900078a6:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
900078aa:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
900078ac:	bf18      	it	ne
900078ae:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
900078b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
900078b4:	2301      	movs	r3, #1
900078b6:	2200      	movs	r2, #0
900078b8:	9300      	str	r3, [sp, #0]
900078ba:	2302      	movs	r3, #2
900078bc:	f002 ff77 	bl	9000a7ae <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
900078c0:	2000      	movs	r0, #0
900078c2:	b005      	add	sp, #20
900078c4:	bd30      	pop	{r4, r5, pc}

900078c6 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
900078c6:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
900078c8:	2400      	movs	r4, #0
{
900078ca:	b085      	sub	sp, #20
900078cc:	460d      	mov	r5, r1
900078ce:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
900078d0:	2302      	movs	r3, #2
900078d2:	9501      	str	r5, [sp, #4]
900078d4:	e9cd 2402 	strd	r2, r4, [sp, #8]
900078d8:	2201      	movs	r2, #1
900078da:	9200      	str	r2, [sp, #0]
900078dc:	f002 ff67 	bl	9000a7ae <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
900078e0:	4620      	mov	r0, r4
900078e2:	b005      	add	sp, #20
900078e4:	bd30      	pop	{r4, r5, pc}

900078e6 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
900078e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
900078e8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
900078ec:	9402      	str	r4, [sp, #8]
900078ee:	f89d 401c 	ldrb.w	r4, [sp, #28]
900078f2:	9401      	str	r4, [sp, #4]
900078f4:	f89d 4018 	ldrb.w	r4, [sp, #24]
900078f8:	9400      	str	r4, [sp, #0]
900078fa:	f002 ff40 	bl	9000a77e <USBH_LL_OpenPipe>

  return USBH_OK;
}
900078fe:	2000      	movs	r0, #0
90007900:	b004      	add	sp, #16
90007902:	bd10      	pop	{r4, pc}

90007904 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
90007904:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
90007906:	f002 ff4b 	bl	9000a7a0 <USBH_LL_ClosePipe>

  return USBH_OK;
}
9000790a:	2000      	movs	r0, #0
9000790c:	bd08      	pop	{r3, pc}

9000790e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
9000790e:	b530      	push	{r4, r5, lr}
90007910:	2300      	movs	r3, #0
90007912:	f200 446c 	addw	r4, r0, #1132	; 0x46c
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
90007916:	f854 5f04 	ldr.w	r5, [r4, #4]!
9000791a:	b2da      	uxtb	r2, r3
9000791c:	042d      	lsls	r5, r5, #16
9000791e:	d408      	bmi.n	90007932 <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
90007920:	f503 738e 	add.w	r3, r3, #284	; 0x11c
90007924:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
90007928:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
9000792a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
9000792e:	b2d0      	uxtb	r0, r2
90007930:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U ; idx < 11U ; idx++)
90007932:	3301      	adds	r3, #1
90007934:	2b0b      	cmp	r3, #11
90007936:	d1ee      	bne.n	90007916 <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
90007938:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000793c:	e7f7      	b.n	9000792e <USBH_AllocPipe+0x20>

9000793e <USBH_FreePipe>:
  if (idx < 11U)
9000793e:	290a      	cmp	r1, #10
    phost->Pipes[idx] &= 0x7FFFU;
90007940:	bf9f      	itttt	ls
90007942:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
90007946:	f8d0 3470 	ldrls.w	r3, [r0, #1136]	; 0x470
9000794a:	f3c3 030e 	ubfxls	r3, r3, #0, #15
9000794e:	f8c0 3470 	strls.w	r3, [r0, #1136]	; 0x470
}
90007952:	2000      	movs	r0, #0
90007954:	4770      	bx	lr
	...

90007958 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
90007958:	4b03      	ldr	r3, [pc, #12]	; (90007968 <disk_status+0x10>)
9000795a:	181a      	adds	r2, r3, r0
9000795c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90007960:	6843      	ldr	r3, [r0, #4]
90007962:	7b10      	ldrb	r0, [r2, #12]
90007964:	685b      	ldr	r3, [r3, #4]
90007966:	4718      	bx	r3
90007968:	20000780 	.word	0x20000780

9000796c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
9000796c:	4b06      	ldr	r3, [pc, #24]	; (90007988 <disk_initialize+0x1c>)
9000796e:	5c1a      	ldrb	r2, [r3, r0]
90007970:	b942      	cbnz	r2, 90007984 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
90007972:	2201      	movs	r2, #1
90007974:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
90007976:	181a      	adds	r2, r3, r0
90007978:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9000797c:	6843      	ldr	r3, [r0, #4]
9000797e:	7b10      	ldrb	r0, [r2, #12]
90007980:	681b      	ldr	r3, [r3, #0]
90007982:	4718      	bx	r3
  }
  return stat;
}
90007984:	2000      	movs	r0, #0
90007986:	4770      	bx	lr
90007988:	20000780 	.word	0x20000780

9000798c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
9000798c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
9000798e:	4c05      	ldr	r4, [pc, #20]	; (900079a4 <disk_read+0x18>)
90007990:	1825      	adds	r5, r4, r0
90007992:	eb04 0080 	add.w	r0, r4, r0, lsl #2
90007996:	6840      	ldr	r0, [r0, #4]
90007998:	6884      	ldr	r4, [r0, #8]
9000799a:	7b28      	ldrb	r0, [r5, #12]
9000799c:	46a4      	mov	ip, r4
  return res;
}
9000799e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
900079a0:	4760      	bx	ip
900079a2:	bf00      	nop
900079a4:	20000780 	.word	0x20000780

900079a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
900079a8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
900079aa:	4c05      	ldr	r4, [pc, #20]	; (900079c0 <disk_write+0x18>)
900079ac:	1825      	adds	r5, r4, r0
900079ae:	eb04 0080 	add.w	r0, r4, r0, lsl #2
900079b2:	6840      	ldr	r0, [r0, #4]
900079b4:	68c4      	ldr	r4, [r0, #12]
900079b6:	7b28      	ldrb	r0, [r5, #12]
900079b8:	46a4      	mov	ip, r4
  return res;
}
900079ba:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
900079bc:	4760      	bx	ip
900079be:	bf00      	nop
900079c0:	20000780 	.word	0x20000780

900079c4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
900079c4:	4b05      	ldr	r3, [pc, #20]	; (900079dc <disk_ioctl+0x18>)
{
900079c6:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
900079c8:	181c      	adds	r4, r3, r0
900079ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
900079ce:	6843      	ldr	r3, [r0, #4]
900079d0:	7b20      	ldrb	r0, [r4, #12]
900079d2:	691b      	ldr	r3, [r3, #16]
  return res;
}
900079d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
900079d8:	4718      	bx	r3
900079da:	bf00      	nop
900079dc:	20000780 	.word	0x20000780

900079e0 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
900079e0:	2000      	movs	r0, #0
900079e2:	4770      	bx	lr

900079e4 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
900079e4:	6800      	ldr	r0, [r0, #0]
900079e6:	4770      	bx	lr

900079e8 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
900079e8:	0a0b      	lsrs	r3, r1, #8
900079ea:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
900079ec:	7043      	strb	r3, [r0, #1]
900079ee:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
900079f0:	0e09      	lsrs	r1, r1, #24
900079f2:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
900079f4:	70c1      	strb	r1, [r0, #3]
}
900079f6:	4770      	bx	lr

900079f8 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
900079f8:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
900079fa:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
900079fe:	4290      	cmp	r0, r2
90007a00:	d1fb      	bne.n	900079fa <mem_set+0x2>
}
90007a02:	4770      	bx	lr

90007a04 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
90007a04:	4a1b      	ldr	r2, [pc, #108]	; (90007a74 <chk_lock+0x70>)
90007a06:	6813      	ldr	r3, [r2, #0]
{
90007a08:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
90007a0a:	b163      	cbz	r3, 90007a26 <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
90007a0c:	6804      	ldr	r4, [r0, #0]
90007a0e:	42a3      	cmp	r3, r4
90007a10:	d107      	bne.n	90007a22 <chk_lock+0x1e>
90007a12:	6884      	ldr	r4, [r0, #8]
90007a14:	6853      	ldr	r3, [r2, #4]
90007a16:	429c      	cmp	r4, r3
90007a18:	d103      	bne.n	90007a22 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
90007a1a:	6894      	ldr	r4, [r2, #8]
90007a1c:	6943      	ldr	r3, [r0, #20]
90007a1e:	429c      	cmp	r4, r3
90007a20:	d020      	beq.n	90007a64 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
90007a22:	2400      	movs	r4, #0
90007a24:	e000      	b.n	90007a28 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
90007a26:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
90007a28:	6913      	ldr	r3, [r2, #16]
90007a2a:	b1cb      	cbz	r3, 90007a60 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
90007a2c:	6805      	ldr	r5, [r0, #0]
90007a2e:	42ab      	cmp	r3, r5
90007a30:	d107      	bne.n	90007a42 <chk_lock+0x3e>
90007a32:	6955      	ldr	r5, [r2, #20]
90007a34:	6883      	ldr	r3, [r0, #8]
90007a36:	429d      	cmp	r5, r3
90007a38:	d103      	bne.n	90007a42 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
90007a3a:	6995      	ldr	r5, [r2, #24]
90007a3c:	6943      	ldr	r3, [r0, #20]
90007a3e:	429d      	cmp	r5, r3
90007a40:	d015      	beq.n	90007a6e <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
90007a42:	b96c      	cbnz	r4, 90007a60 <chk_lock+0x5c>
90007a44:	2902      	cmp	r1, #2
90007a46:	bf0c      	ite	eq
90007a48:	2000      	moveq	r0, #0
90007a4a:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
90007a4c:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
90007a4e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
90007a52:	8998      	ldrh	r0, [r3, #12]
90007a54:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
90007a58:	4258      	negs	r0, r3
90007a5a:	4158      	adcs	r0, r3
90007a5c:	0100      	lsls	r0, r0, #4
90007a5e:	e7f5      	b.n	90007a4c <chk_lock+0x48>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
90007a60:	2000      	movs	r0, #0
90007a62:	e7f3      	b.n	90007a4c <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
90007a64:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
90007a66:	2900      	cmp	r1, #0
90007a68:	d0f1      	beq.n	90007a4e <chk_lock+0x4a>
90007a6a:	2010      	movs	r0, #16
90007a6c:	e7ee      	b.n	90007a4c <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
90007a6e:	2301      	movs	r3, #1
90007a70:	e7f9      	b.n	90007a66 <chk_lock+0x62>
90007a72:	bf00      	nop
90007a74:	20000754 	.word	0x20000754

90007a78 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
90007a78:	4a1f      	ldr	r2, [pc, #124]	; (90007af8 <inc_lock+0x80>)
{
90007a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
90007a7c:	6813      	ldr	r3, [r2, #0]
90007a7e:	6806      	ldr	r6, [r0, #0]
90007a80:	429e      	cmp	r6, r3
90007a82:	d107      	bne.n	90007a94 <inc_lock+0x1c>
90007a84:	6885      	ldr	r5, [r0, #8]
90007a86:	6854      	ldr	r4, [r2, #4]
90007a88:	42a5      	cmp	r5, r4
90007a8a:	d103      	bne.n	90007a94 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
90007a8c:	6895      	ldr	r5, [r2, #8]
90007a8e:	6944      	ldr	r4, [r0, #20]
90007a90:	42a5      	cmp	r5, r4
90007a92:	d022      	beq.n	90007ada <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
90007a94:	6914      	ldr	r4, [r2, #16]
90007a96:	42b4      	cmp	r4, r6
90007a98:	d107      	bne.n	90007aaa <inc_lock+0x32>
90007a9a:	6957      	ldr	r7, [r2, #20]
90007a9c:	6885      	ldr	r5, [r0, #8]
90007a9e:	42af      	cmp	r7, r5
90007aa0:	d103      	bne.n	90007aaa <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
90007aa2:	6997      	ldr	r7, [r2, #24]
90007aa4:	6945      	ldr	r5, [r0, #20]
90007aa6:	42af      	cmp	r7, r5
90007aa8:	d021      	beq.n	90007aee <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
90007aaa:	b10b      	cbz	r3, 90007ab0 <inc_lock+0x38>
90007aac:	bb0c      	cbnz	r4, 90007af2 <inc_lock+0x7a>
90007aae:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
90007ab0:	011d      	lsls	r5, r3, #4
90007ab2:	eb02 1403 	add.w	r4, r2, r3, lsl #4
90007ab6:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
90007ab8:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
90007aba:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
90007abc:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
90007abe:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
90007ac0:	2000      	movs	r0, #0
90007ac2:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
90007ac4:	b981      	cbnz	r1, 90007ae8 <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
90007ac6:	eb02 1103 	add.w	r1, r2, r3, lsl #4
90007aca:	8989      	ldrh	r1, [r1, #12]
90007acc:	3101      	adds	r1, #1
90007ace:	b289      	uxth	r1, r1
90007ad0:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
90007ad4:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
90007ad6:	8191      	strh	r1, [r2, #12]
}
90007ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
90007ada:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
90007adc:	eb02 1003 	add.w	r0, r2, r3, lsl #4
90007ae0:	8980      	ldrh	r0, [r0, #12]
90007ae2:	2900      	cmp	r1, #0
90007ae4:	d0ef      	beq.n	90007ac6 <inc_lock+0x4e>
90007ae6:	b920      	cbnz	r0, 90007af2 <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
90007ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
90007aec:	e7f0      	b.n	90007ad0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
90007aee:	2301      	movs	r3, #1
90007af0:	e7f4      	b.n	90007adc <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
90007af2:	2000      	movs	r0, #0
90007af4:	e7f0      	b.n	90007ad8 <inc_lock+0x60>
90007af6:	bf00      	nop
90007af8:	20000754 	.word	0x20000754

90007afc <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
90007afc:	3801      	subs	r0, #1
90007afe:	2801      	cmp	r0, #1
90007b00:	d815      	bhi.n	90007b2e <dec_lock+0x32>
		n = Files[i].ctr;
90007b02:	4a0c      	ldr	r2, [pc, #48]	; (90007b34 <dec_lock+0x38>)
90007b04:	0101      	lsls	r1, r0, #4
90007b06:	eb02 1000 	add.w	r0, r2, r0, lsl #4
90007b0a:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
90007b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90007b10:	d104      	bne.n	90007b1c <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
90007b12:	2300      	movs	r3, #0
90007b14:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
90007b16:	2000      	movs	r0, #0
90007b18:	5050      	str	r0, [r2, r1]
90007b1a:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
90007b1c:	2b00      	cmp	r3, #0
90007b1e:	d0fa      	beq.n	90007b16 <dec_lock+0x1a>
90007b20:	3b01      	subs	r3, #1
90007b22:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
90007b24:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
90007b26:	2b00      	cmp	r3, #0
90007b28:	d0f5      	beq.n	90007b16 <dec_lock+0x1a>
		res = FR_OK;
90007b2a:	2000      	movs	r0, #0
90007b2c:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
90007b2e:	2002      	movs	r0, #2
	}
	return res;
}
90007b30:	4770      	bx	lr
90007b32:	bf00      	nop
90007b34:	20000754 	.word	0x20000754

90007b38 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
90007b38:	4b05      	ldr	r3, [pc, #20]	; (90007b50 <clear_lock+0x18>)
90007b3a:	681a      	ldr	r2, [r3, #0]
90007b3c:	4290      	cmp	r0, r2
90007b3e:	bf04      	itt	eq
90007b40:	2200      	moveq	r2, #0
90007b42:	601a      	streq	r2, [r3, #0]
90007b44:	691a      	ldr	r2, [r3, #16]
90007b46:	4290      	cmp	r0, r2
90007b48:	bf04      	itt	eq
90007b4a:	2200      	moveq	r2, #0
90007b4c:	611a      	streq	r2, [r3, #16]
	}
}
90007b4e:	4770      	bx	lr
90007b50:	20000754 	.word	0x20000754

90007b54 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
90007b54:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
90007b56:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
90007b58:	3b02      	subs	r3, #2
90007b5a:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
90007b5c:	bf83      	ittte	hi
90007b5e:	8943      	ldrhhi	r3, [r0, #10]
90007b60:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
90007b62:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
90007b66:	2000      	movls	r0, #0
}
90007b68:	4770      	bx	lr

90007b6a <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
90007b6a:	6802      	ldr	r2, [r0, #0]
90007b6c:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
90007b6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
90007b70:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
90007b72:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
90007b74:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
90007b78:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
90007b7a:	b130      	cbz	r0, 90007b8a <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
90007b7c:	4281      	cmp	r1, r0
90007b7e:	d302      	bcc.n	90007b86 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
90007b80:	1a09      	subs	r1, r1, r0
90007b82:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
90007b84:	e7f8      	b.n	90007b78 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
90007b86:	6858      	ldr	r0, [r3, #4]
90007b88:	4408      	add	r0, r1
}
90007b8a:	4770      	bx	lr

90007b8c <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
90007b8c:	f3c2 2307 	ubfx	r3, r2, #8, #8
90007b90:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
90007b92:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
90007b94:	7803      	ldrb	r3, [r0, #0]
90007b96:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
90007b98:	bf01      	itttt	eq
90007b9a:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
90007b9c:	750a      	strbeq	r2, [r1, #20]
90007b9e:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
90007ba0:	754a      	strbeq	r2, [r1, #21]
	}
}
90007ba2:	4770      	bx	lr

90007ba4 <sum_sfn>:
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
90007ba4:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
90007ba8:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
90007baa:	01d3      	lsls	r3, r2, #7
90007bac:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
90007bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
90007bb4:	fa52 f383 	uxtab	r3, r2, r3
	} while (--n);
90007bb8:	4288      	cmp	r0, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
90007bba:	b2da      	uxtb	r2, r3
	} while (--n);
90007bbc:	d1f5      	bne.n	90007baa <sum_sfn+0x6>
	return sum;
}
90007bbe:	4610      	mov	r0, r2
90007bc0:	4770      	bx	lr

90007bc2 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
90007bc2:	6803      	ldr	r3, [r0, #0]
{
90007bc4:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
90007bc6:	b153      	cbz	r3, 90007bde <get_ldnumber+0x1c>
90007bc8:	4619      	mov	r1, r3
90007bca:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
90007bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
90007bd0:	2c1f      	cmp	r4, #31
90007bd2:	d910      	bls.n	90007bf6 <get_ldnumber+0x34>
90007bd4:	2c3a      	cmp	r4, #58	; 0x3a
90007bd6:	d1f8      	bne.n	90007bca <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
90007bd8:	1c59      	adds	r1, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
90007bda:	428a      	cmp	r2, r1
90007bdc:	d002      	beq.n	90007be4 <get_ldnumber+0x22>
	int vol = -1;
90007bde:	f04f 33ff 	mov.w	r3, #4294967295
90007be2:	e006      	b.n	90007bf2 <get_ldnumber+0x30>
			i = *tp++ - '0';
90007be4:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
90007be6:	3b30      	subs	r3, #48	; 0x30
90007be8:	b2d9      	uxtb	r1, r3
90007bea:	2901      	cmp	r1, #1
90007bec:	d8f7      	bhi.n	90007bde <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
90007bee:	3201      	adds	r2, #1
90007bf0:	6002      	str	r2, [r0, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
90007bf2:	4618      	mov	r0, r3
90007bf4:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
90007bf6:	2300      	movs	r3, #0
90007bf8:	e7fb      	b.n	90007bf2 <get_ldnumber+0x30>

90007bfa <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
90007bfa:	b538      	push	{r3, r4, r5, lr}
90007bfc:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
90007bfe:	4604      	mov	r4, r0
90007c00:	b918      	cbnz	r0, 90007c0a <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
90007c02:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
90007c04:	2300      	movs	r3, #0
90007c06:	602b      	str	r3, [r5, #0]
	return res;
}
90007c08:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
90007c0a:	6803      	ldr	r3, [r0, #0]
90007c0c:	2b00      	cmp	r3, #0
90007c0e:	d0f8      	beq.n	90007c02 <validate+0x8>
90007c10:	781a      	ldrb	r2, [r3, #0]
90007c12:	2a00      	cmp	r2, #0
90007c14:	d0f5      	beq.n	90007c02 <validate+0x8>
90007c16:	8881      	ldrh	r1, [r0, #4]
90007c18:	88da      	ldrh	r2, [r3, #6]
90007c1a:	4291      	cmp	r1, r2
90007c1c:	d1f1      	bne.n	90007c02 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
90007c1e:	7858      	ldrb	r0, [r3, #1]
90007c20:	f7ff fe9a 	bl	90007958 <disk_status>
90007c24:	f010 0001 	ands.w	r0, r0, #1
90007c28:	d1eb      	bne.n	90007c02 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
90007c2a:	6823      	ldr	r3, [r4, #0]
90007c2c:	e7eb      	b.n	90007c06 <validate+0xc>

90007c2e <get_fileinfo>:
{
90007c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
90007c32:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
90007c34:	f8d0 8000 	ldr.w	r8, [r0]
{
90007c38:	4606      	mov	r6, r0
90007c3a:	460c      	mov	r4, r1
	fno->fname[0] = 0;		/* Invaidate file info */
90007c3c:	758d      	strb	r5, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
90007c3e:	69c3      	ldr	r3, [r0, #28]
90007c40:	2b00      	cmp	r3, #0
90007c42:	d059      	beq.n	90007cf8 <get_fileinfo+0xca>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
90007c44:	6b03      	ldr	r3, [r0, #48]	; 0x30
90007c46:	3301      	adds	r3, #1
90007c48:	d00a      	beq.n	90007c60 <get_fileinfo+0x32>
90007c4a:	f101 0715 	add.w	r7, r1, #21
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
90007c4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
90007c52:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
90007c56:	2800      	cmp	r0, #0
90007c58:	d150      	bne.n	90007cfc <get_fileinfo+0xce>
			fno->fname[i] = 0;	/* Terminate the LFN */
90007c5a:	4425      	add	r5, r4
90007c5c:	2300      	movs	r3, #0
90007c5e:	75ab      	strb	r3, [r5, #22]
		c = (TCHAR)dp->dir[i++];
90007c60:	6a31      	ldr	r1, [r6, #32]
	i = j = 0;
90007c62:	2300      	movs	r3, #0
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
90007c64:	7da5      	ldrb	r5, [r4, #22]
			fno->altname[j++] = '.';
90007c66:	272e      	movs	r7, #46	; 0x2e
90007c68:	1e4e      	subs	r6, r1, #1
	i = j = 0;
90007c6a:	4618      	mov	r0, r3
		c = (TCHAR)dp->dir[i++];
90007c6c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
90007c70:	3001      	adds	r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
90007c72:	2a20      	cmp	r2, #32
90007c74:	d026      	beq.n	90007cc4 <get_fileinfo+0x96>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
90007c76:	2a05      	cmp	r2, #5
90007c78:	bf08      	it	eq
90007c7a:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
90007c7c:	2809      	cmp	r0, #9
90007c7e:	d107      	bne.n	90007c90 <get_fileinfo+0x62>
			if (!lfv) fno->fname[j] = '.';
90007c80:	eb04 0c03 	add.w	ip, r4, r3
90007c84:	b90d      	cbnz	r5, 90007c8a <get_fileinfo+0x5c>
90007c86:	f88c 7016 	strb.w	r7, [ip, #22]
			fno->altname[j++] = '.';
90007c8a:	3301      	adds	r3, #1
90007c8c:	f88c 7009 	strb.w	r7, [ip, #9]
		fno->altname[j] = c;
90007c90:	eb04 0c03 	add.w	ip, r4, r3
90007c94:	f88c 2009 	strb.w	r2, [ip, #9]
		if (!lfv) {
90007c98:	b99d      	cbnz	r5, 90007cc2 <get_fileinfo+0x94>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
90007c9a:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
90007c9e:	f1be 0f19 	cmp.w	lr, #25
90007ca2:	d80c      	bhi.n	90007cbe <get_fileinfo+0x90>
90007ca4:	2808      	cmp	r0, #8
90007ca6:	f891 800c 	ldrb.w	r8, [r1, #12]
90007caa:	bf8c      	ite	hi
90007cac:	f04f 0e10 	movhi.w	lr, #16
90007cb0:	f04f 0e08 	movls.w	lr, #8
90007cb4:	ea18 0f0e 	tst.w	r8, lr
				c += 0x20;			/* To lower */
90007cb8:	bf1c      	itt	ne
90007cba:	3220      	addne	r2, #32
90007cbc:	b2d2      	uxtbne	r2, r2
			fno->fname[j] = c;
90007cbe:	f88c 2016 	strb.w	r2, [ip, #22]
		j++;
90007cc2:	3301      	adds	r3, #1
	while (i < 11) {		/* Copy name body and extension */
90007cc4:	280b      	cmp	r0, #11
90007cc6:	d1d1      	bne.n	90007c6c <get_fileinfo+0x3e>
	if (!lfv) {
90007cc8:	b92d      	cbnz	r5, 90007cd6 <get_fileinfo+0xa8>
		fno->fname[j] = 0;
90007cca:	18e2      	adds	r2, r4, r3
90007ccc:	7595      	strb	r5, [r2, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
90007cce:	7b0a      	ldrb	r2, [r1, #12]
90007cd0:	2a00      	cmp	r2, #0
90007cd2:	bf08      	it	eq
90007cd4:	2300      	moveq	r3, #0
	fno->altname[j] = 0;	/* Terminate the SFN */
90007cd6:	4423      	add	r3, r4
90007cd8:	2200      	movs	r2, #0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
90007cda:	f101 001c 	add.w	r0, r1, #28
	fno->altname[j] = 0;	/* Terminate the SFN */
90007cde:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
90007ce0:	7acb      	ldrb	r3, [r1, #11]
90007ce2:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
90007ce4:	f7ff fe7e 	bl	900079e4 <ld_dword>
90007ce8:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
90007cea:	f101 0016 	add.w	r0, r1, #22
90007cee:	f7ff fe79 	bl	900079e4 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
90007cf2:	80e0      	strh	r0, [r4, #6]
90007cf4:	0c00      	lsrs	r0, r0, #16
90007cf6:	80a0      	strh	r0, [r4, #4]
}
90007cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				w = ff_convert(w, 0);		/* Unicode -> OEM */
90007cfc:	2100      	movs	r1, #0
90007cfe:	f001 fcd7 	bl	900096b0 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
90007d02:	b130      	cbz	r0, 90007d12 <get_fileinfo+0xe4>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
90007d04:	3501      	adds	r5, #1
90007d06:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90007d0a:	d002      	beq.n	90007d12 <get_fileinfo+0xe4>
				fno->fname[i++] = (TCHAR)w;
90007d0c:	f807 0f01 	strb.w	r0, [r7, #1]!
90007d10:	e79d      	b.n	90007c4e <get_fileinfo+0x20>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
90007d12:	2500      	movs	r5, #0
90007d14:	e7a1      	b.n	90007c5a <get_fileinfo+0x2c>

90007d16 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
90007d16:	3801      	subs	r0, #1
90007d18:	440a      	add	r2, r1
			*d++ = *s++;
90007d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
90007d1e:	4291      	cmp	r1, r2
			*d++ = *s++;
90007d20:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
90007d24:	d1f9      	bne.n	90007d1a <mem_cpy.part.0+0x4>
}
90007d26:	4770      	bx	lr

90007d28 <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
90007d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
90007d2c:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
90007d2e:	f100 0834 	add.w	r8, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
90007d32:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
90007d34:	2301      	movs	r3, #1
90007d36:	4632      	mov	r2, r6
90007d38:	4641      	mov	r1, r8
90007d3a:	7840      	ldrb	r0, [r0, #1]
90007d3c:	f7ff fe34 	bl	900079a8 <disk_write>
90007d40:	4605      	mov	r5, r0
90007d42:	b9a8      	cbnz	r0, 90007d70 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
90007d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
90007d46:	69e2      	ldr	r2, [r4, #28]
90007d48:	1af3      	subs	r3, r6, r3
			fs->wflag = 0;
90007d4a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
90007d4c:	4293      	cmp	r3, r2
90007d4e:	d202      	bcs.n	90007d56 <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
90007d50:	78a7      	ldrb	r7, [r4, #2]
90007d52:	2f01      	cmp	r7, #1
90007d54:	d802      	bhi.n	90007d5c <sync_window.part.0+0x34>
}
90007d56:	4628      	mov	r0, r5
90007d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
90007d5c:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
90007d5e:	4641      	mov	r1, r8
90007d60:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
90007d62:	3f01      	subs	r7, #1
					wsect += fs->fsize;
90007d64:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
90007d66:	2301      	movs	r3, #1
90007d68:	4632      	mov	r2, r6
90007d6a:	f7ff fe1d 	bl	900079a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
90007d6e:	e7f0      	b.n	90007d52 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
90007d70:	2501      	movs	r5, #1
90007d72:	e7f0      	b.n	90007d56 <sync_window.part.0+0x2e>

90007d74 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
90007d74:	78c3      	ldrb	r3, [r0, #3]
90007d76:	b10b      	cbz	r3, 90007d7c <sync_window+0x8>
90007d78:	f7ff bfd6 	b.w	90007d28 <sync_window.part.0>
}
90007d7c:	4618      	mov	r0, r3
90007d7e:	4770      	bx	lr

90007d80 <move_window>:
{
90007d80:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
90007d82:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
90007d84:	4605      	mov	r5, r0
90007d86:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
90007d88:	428b      	cmp	r3, r1
90007d8a:	d010      	beq.n	90007dae <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
90007d8c:	f7ff fff2 	bl	90007d74 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
90007d90:	b960      	cbnz	r0, 90007dac <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
90007d92:	4622      	mov	r2, r4
90007d94:	2301      	movs	r3, #1
90007d96:	f105 0134 	add.w	r1, r5, #52	; 0x34
90007d9a:	7868      	ldrb	r0, [r5, #1]
90007d9c:	f7ff fdf6 	bl	9000798c <disk_read>
				res = FR_DISK_ERR;
90007da0:	2800      	cmp	r0, #0
90007da2:	bf1c      	itt	ne
90007da4:	f04f 34ff 	movne.w	r4, #4294967295
90007da8:	2001      	movne	r0, #1
			fs->winsect = sector;
90007daa:	632c      	str	r4, [r5, #48]	; 0x30
}
90007dac:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
90007dae:	2000      	movs	r0, #0
90007db0:	e7fc      	b.n	90007dac <move_window+0x2c>
	...

90007db4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
90007db4:	2300      	movs	r3, #0
{
90007db6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
90007db8:	70c3      	strb	r3, [r0, #3]
90007dba:	f04f 33ff 	mov.w	r3, #4294967295
{
90007dbe:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
90007dc0:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
90007dc2:	f7ff ffdd 	bl	90007d80 <move_window>
90007dc6:	4603      	mov	r3, r0
90007dc8:	bb18      	cbnz	r0, 90007e12 <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
90007dca:	f8b4 1232 	ldrh.w	r1, [r4, #562]	; 0x232
90007dce:	f64a 2255 	movw	r2, #43605	; 0xaa55
90007dd2:	4291      	cmp	r1, r2
90007dd4:	d11f      	bne.n	90007e16 <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
90007dd6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
90007dda:	2ae9      	cmp	r2, #233	; 0xe9
90007ddc:	d005      	beq.n	90007dea <check_fs+0x36>
90007dde:	6b62      	ldr	r2, [r4, #52]	; 0x34
90007de0:	490f      	ldr	r1, [pc, #60]	; (90007e20 <check_fs+0x6c>)
90007de2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90007de6:	428a      	cmp	r2, r1
90007de8:	d117      	bne.n	90007e1a <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
90007dea:	f104 006a 	add.w	r0, r4, #106	; 0x6a
90007dee:	4a0d      	ldr	r2, [pc, #52]	; (90007e24 <check_fs+0x70>)
90007df0:	f7ff fdf8 	bl	900079e4 <ld_dword>
90007df4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
90007df8:	4290      	cmp	r0, r2
90007dfa:	d008      	beq.n	90007e0e <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
90007dfc:	4b0a      	ldr	r3, [pc, #40]	; (90007e28 <check_fs+0x74>)
90007dfe:	f104 0086 	add.w	r0, r4, #134	; 0x86
90007e02:	f7ff fdef 	bl	900079e4 <ld_dword>
90007e06:	1ac0      	subs	r0, r0, r3
90007e08:	bf18      	it	ne
90007e0a:	2001      	movne	r0, #1
90007e0c:	0043      	lsls	r3, r0, #1
}
90007e0e:	4618      	mov	r0, r3
90007e10:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
90007e12:	2304      	movs	r3, #4
90007e14:	e7fb      	b.n	90007e0e <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
90007e16:	2303      	movs	r3, #3
90007e18:	e7f9      	b.n	90007e0e <check_fs+0x5a>
	return 2;
90007e1a:	2302      	movs	r3, #2
90007e1c:	e7f7      	b.n	90007e0e <check_fs+0x5a>
90007e1e:	bf00      	nop
90007e20:	009000eb 	.word	0x009000eb
90007e24:	00544146 	.word	0x00544146
90007e28:	33544146 	.word	0x33544146

90007e2c <find_volume>:
{
90007e2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
90007e30:	2300      	movs	r3, #0
{
90007e32:	4688      	mov	r8, r1
90007e34:	4615      	mov	r5, r2
	*rfs = 0;
90007e36:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
90007e38:	f7ff fec3 	bl	90007bc2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
90007e3c:	1e07      	subs	r7, r0, #0
90007e3e:	f2c0 8116 	blt.w	9000806e <find_volume+0x242>
	fs = FatFs[vol];					/* Get pointer to the file system object */
90007e42:	4e8e      	ldr	r6, [pc, #568]	; (9000807c <find_volume+0x250>)
90007e44:	eb06 0387 	add.w	r3, r6, r7, lsl #2
90007e48:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
90007e4a:	2c00      	cmp	r4, #0
90007e4c:	f000 8111 	beq.w	90008072 <find_volume+0x246>
	*rfs = fs;							/* Return pointer to the file system object */
90007e50:	f8c8 4000 	str.w	r4, [r8]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
90007e54:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
90007e58:	7823      	ldrb	r3, [r4, #0]
90007e5a:	b16b      	cbz	r3, 90007e78 <find_volume+0x4c>
		stat = disk_status(fs->drv);
90007e5c:	7860      	ldrb	r0, [r4, #1]
90007e5e:	f7ff fd7b 	bl	90007958 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
90007e62:	07c1      	lsls	r1, r0, #31
90007e64:	d408      	bmi.n	90007e78 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
90007e66:	b11d      	cbz	r5, 90007e70 <find_volume+0x44>
90007e68:	f010 0504 	ands.w	r5, r0, #4
90007e6c:	d000      	beq.n	90007e70 <find_volume+0x44>
				return FR_WRITE_PROTECTED;
90007e6e:	250a      	movs	r5, #10
}
90007e70:	4628      	mov	r0, r5
90007e72:	b004      	add	sp, #16
90007e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
90007e78:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
90007e7a:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
90007e7c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
90007e7e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
90007e80:	f7ff fd74 	bl	9000796c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
90007e84:	07c2      	lsls	r2, r0, #31
90007e86:	f100 80f6 	bmi.w	90008076 <find_volume+0x24a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
90007e8a:	b10d      	cbz	r5, 90007e90 <find_volume+0x64>
90007e8c:	0743      	lsls	r3, r0, #29
90007e8e:	d4ee      	bmi.n	90007e6e <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
90007e90:	2100      	movs	r1, #0
90007e92:	4620      	mov	r0, r4
90007e94:	f7ff ff8e 	bl	90007db4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
90007e98:	2802      	cmp	r0, #2
90007e9a:	f040 80ce 	bne.w	9000803a <find_volume+0x20e>
90007e9e:	466d      	mov	r5, sp
90007ea0:	f504 73fd 	add.w	r3, r4, #506	; 0x1fa
90007ea4:	f204 213a 	addw	r1, r4, #570	; 0x23a
90007ea8:	462a      	mov	r2, r5
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
90007eaa:	f813 0c04 	ldrb.w	r0, [r3, #-4]
90007eae:	b110      	cbz	r0, 90007eb6 <find_volume+0x8a>
90007eb0:	4618      	mov	r0, r3
90007eb2:	f7ff fd97 	bl	900079e4 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
90007eb6:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
90007eb8:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
90007ebc:	428b      	cmp	r3, r1
90007ebe:	d1f4      	bne.n	90007eaa <find_volume+0x7e>
90007ec0:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
90007ec4:	f855 7b04 	ldr.w	r7, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
90007ec8:	2f00      	cmp	r7, #0
90007eca:	f000 80ab 	beq.w	90008024 <find_volume+0x1f8>
90007ece:	4639      	mov	r1, r7
90007ed0:	4620      	mov	r0, r4
90007ed2:	f7ff ff6f 	bl	90007db4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
90007ed6:	2801      	cmp	r0, #1
90007ed8:	f200 80a5 	bhi.w	90008026 <find_volume+0x1fa>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
90007edc:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
90007ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90007ee4:	f040 80ad 	bne.w	90008042 <find_volume+0x216>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
90007ee8:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
90007eec:	b921      	cbnz	r1, 90007ef8 <find_volume+0xcc>
90007eee:	f104 0058 	add.w	r0, r4, #88	; 0x58
90007ef2:	f7ff fd77 	bl	900079e4 <ld_dword>
90007ef6:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
90007ef8:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
		fs->fsize = fasize;
90007efc:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
90007efe:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
90007f00:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
90007f02:	2b01      	cmp	r3, #1
90007f04:	f200 809d 	bhi.w	90008042 <find_volume+0x216>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
90007f08:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
90007f0c:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
90007f0e:	2d00      	cmp	r5, #0
90007f10:	f000 8097 	beq.w	90008042 <find_volume+0x216>
90007f14:	1e6b      	subs	r3, r5, #1
90007f16:	422b      	tst	r3, r5
90007f18:	f040 8093 	bne.w	90008042 <find_volume+0x216>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
90007f1c:	f8b4 8045 	ldrh.w	r8, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
90007f20:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
90007f24:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
90007f28:	f040 808b 	bne.w	90008042 <find_volume+0x216>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
90007f2c:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
90007f30:	b918      	cbnz	r0, 90007f3a <find_volume+0x10e>
90007f32:	f104 0054 	add.w	r0, r4, #84	; 0x54
90007f36:	f7ff fd55 	bl	900079e4 <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
90007f3a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
90007f3e:	2b00      	cmp	r3, #0
90007f40:	d07f      	beq.n	90008042 <find_volume+0x216>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
90007f42:	fb01 fe02 	mul.w	lr, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
90007f46:	eb03 1c18 	add.w	ip, r3, r8, lsr #4
90007f4a:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
90007f4c:	4560      	cmp	r0, ip
90007f4e:	d378      	bcc.n	90008042 <find_volume+0x216>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
90007f50:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
90007f54:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
90007f56:	fbb0 f2f5 	udiv	r2, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
90007f5a:	d372      	bcc.n	90008042 <find_volume+0x216>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
90007f5c:	f64f 70f5 	movw	r0, #65525	; 0xfff5
90007f60:	4282      	cmp	r2, r0
90007f62:	d872      	bhi.n	9000804a <find_volume+0x21e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
90007f64:	f640 75f5 	movw	r5, #4085	; 0xff5
90007f68:	42aa      	cmp	r2, r5
90007f6a:	bf8c      	ite	hi
90007f6c:	2502      	movhi	r5, #2
90007f6e:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
90007f70:	3202      	adds	r2, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
90007f72:	443b      	add	r3, r7
		fs->database = bsect + sysect;					/* Data start sector */
90007f74:	eb0c 0007 	add.w	r0, ip, r7
		if (fmt == FS_FAT32) {
90007f78:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
90007f7a:	61a2      	str	r2, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
90007f7c:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
90007f7e:	6263      	str	r3, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
90007f80:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
90007f82:	d164      	bne.n	9000804e <find_volume+0x222>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
90007f84:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
90007f88:	ea58 0303 	orrs.w	r3, r8, r3
90007f8c:	d159      	bne.n	90008042 <find_volume+0x216>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
90007f8e:	0092      	lsls	r2, r2, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
90007f90:	f104 0060 	add.w	r0, r4, #96	; 0x60
90007f94:	f7ff fd26 	bl	900079e4 <ld_dword>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
90007f98:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
90007f9c:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
90007f9e:	ebb1 2f52 	cmp.w	r1, r2, lsr #9
90007fa2:	d34e      	bcc.n	90008042 <find_volume+0x216>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
90007fa4:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
90007fa8:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
90007faa:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
90007fae:	f04f 0380 	mov.w	r3, #128	; 0x80
90007fb2:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
90007fb4:	d12b      	bne.n	9000800e <find_volume+0x1e2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
90007fb6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
90007fba:	2b01      	cmp	r3, #1
90007fbc:	d127      	bne.n	9000800e <find_volume+0x1e2>
			&& move_window(fs, bsect + 1) == FR_OK)
90007fbe:	1c79      	adds	r1, r7, #1
90007fc0:	4620      	mov	r0, r4
90007fc2:	f7ff fedd 	bl	90007d80 <move_window>
90007fc6:	bb10      	cbnz	r0, 9000800e <find_volume+0x1e2>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
90007fc8:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
90007fcc:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
90007fd0:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
90007fd2:	429a      	cmp	r2, r3
90007fd4:	d11b      	bne.n	9000800e <find_volume+0x1e2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
90007fd6:	4b2a      	ldr	r3, [pc, #168]	; (90008080 <find_volume+0x254>)
90007fd8:	f104 0034 	add.w	r0, r4, #52	; 0x34
90007fdc:	f7ff fd02 	bl	900079e4 <ld_dword>
90007fe0:	4298      	cmp	r0, r3
90007fe2:	d114      	bne.n	9000800e <find_volume+0x1e2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
90007fe4:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
90007fe8:	f504 7006 	add.w	r0, r4, #536	; 0x218
90007fec:	f7ff fcfa 	bl	900079e4 <ld_dword>
90007ff0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
90007ff4:	3320      	adds	r3, #32
90007ff6:	4298      	cmp	r0, r3
90007ff8:	d109      	bne.n	9000800e <find_volume+0x1e2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
90007ffa:	f504 7007 	add.w	r0, r4, #540	; 0x21c
90007ffe:	f7ff fcf1 	bl	900079e4 <ld_dword>
90008002:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
90008004:	f504 7008 	add.w	r0, r4, #544	; 0x220
90008008:	f7ff fcec 	bl	900079e4 <ld_dword>
9000800c:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
9000800e:	8d33      	ldrh	r3, [r6, #40]	; 0x28
	clear_lock(fs);
90008010:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
90008012:	7025      	strb	r5, [r4, #0]
	return FR_OK;
90008014:	2500      	movs	r5, #0
	fs->id = ++Fsid;		/* File system mount ID */
90008016:	3301      	adds	r3, #1
90008018:	b29b      	uxth	r3, r3
9000801a:	80e3      	strh	r3, [r4, #6]
9000801c:	8533      	strh	r3, [r6, #40]	; 0x28
	clear_lock(fs);
9000801e:	f7ff fd8b 	bl	90007b38 <clear_lock>
	return FR_OK;
90008022:	e725      	b.n	90007e70 <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
90008024:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
90008026:	f108 0801 	add.w	r8, r8, #1
9000802a:	f1b8 0f04 	cmp.w	r8, #4
9000802e:	f47f af49 	bne.w	90007ec4 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
90008032:	2804      	cmp	r0, #4
90008034:	d105      	bne.n	90008042 <find_volume+0x216>
90008036:	2501      	movs	r5, #1
90008038:	e71a      	b.n	90007e70 <find_volume+0x44>
9000803a:	2804      	cmp	r0, #4
9000803c:	d0fb      	beq.n	90008036 <find_volume+0x20a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
9000803e:	2801      	cmp	r0, #1
90008040:	d901      	bls.n	90008046 <find_volume+0x21a>
90008042:	250d      	movs	r5, #13
90008044:	e714      	b.n	90007e70 <find_volume+0x44>
	bsect = 0;
90008046:	2700      	movs	r7, #0
90008048:	e748      	b.n	90007edc <find_volume+0xb0>
		fmt = FS_FAT32;
9000804a:	2503      	movs	r5, #3
9000804c:	e790      	b.n	90007f70 <find_volume+0x144>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
9000804e:	f1b8 0f00 	cmp.w	r8, #0
90008052:	d0f6      	beq.n	90008042 <find_volume+0x216>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
90008054:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
90008056:	eb03 000e 	add.w	r0, r3, lr
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
9000805a:	ea4f 0342 	mov.w	r3, r2, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
9000805e:	bf1b      	ittet	ne
90008060:	189b      	addne	r3, r3, r2
90008062:	f002 0201 	andne.w	r2, r2, #1
90008066:	461a      	moveq	r2, r3
90008068:	eb02 0253 	addne.w	r2, r2, r3, lsr #1
9000806c:	e794      	b.n	90007f98 <find_volume+0x16c>
	if (vol < 0) return FR_INVALID_DRIVE;
9000806e:	250b      	movs	r5, #11
90008070:	e6fe      	b.n	90007e70 <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
90008072:	250c      	movs	r5, #12
90008074:	e6fc      	b.n	90007e70 <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
90008076:	2503      	movs	r5, #3
90008078:	e6fa      	b.n	90007e70 <find_volume+0x44>
9000807a:	bf00      	nop
9000807c:	20000754 	.word	0x20000754
90008080:	41615252 	.word	0x41615252

90008084 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
90008084:	2901      	cmp	r1, #1
{
90008086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000808a:	4606      	mov	r6, r0
9000808c:	460c      	mov	r4, r1
9000808e:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
90008090:	d974      	bls.n	9000817c <put_fat+0xf8>
90008092:	6983      	ldr	r3, [r0, #24]
90008094:	428b      	cmp	r3, r1
90008096:	d971      	bls.n	9000817c <put_fat+0xf8>
		switch (fs->fs_type) {
90008098:	7803      	ldrb	r3, [r0, #0]
9000809a:	2b02      	cmp	r3, #2
9000809c:	d040      	beq.n	90008120 <put_fat+0x9c>
9000809e:	2b03      	cmp	r3, #3
900080a0:	d051      	beq.n	90008146 <put_fat+0xc2>
900080a2:	2b01      	cmp	r3, #1
900080a4:	d16a      	bne.n	9000817c <put_fat+0xf8>
			bc = (UINT)clst; bc += bc / 2;
900080a6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
900080aa:	6a41      	ldr	r1, [r0, #36]	; 0x24
900080ac:	eb01 2158 	add.w	r1, r1, r8, lsr #9
900080b0:	f7ff fe66 	bl	90007d80 <move_window>
900080b4:	4605      	mov	r5, r0
			if (res != FR_OK) break;
900080b6:	bb40      	cbnz	r0, 9000810a <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
900080b8:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
900080bc:	f106 0934 	add.w	r9, r6, #52	; 0x34
900080c0:	f108 0a01 	add.w	sl, r8, #1
900080c4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
900080c8:	bf18      	it	ne
900080ca:	013b      	lslne	r3, r7, #4
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
900080cc:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
900080ce:	bf17      	itett	ne
900080d0:	f819 2008 	ldrbne.w	r2, [r9, r8]
900080d4:	b2fb      	uxtbeq	r3, r7
900080d6:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
900080da:	f002 020f 	andne.w	r2, r2, #15
900080de:	bf18      	it	ne
900080e0:	4313      	orrne	r3, r2
900080e2:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
900080e6:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
900080e8:	6a71      	ldr	r1, [r6, #36]	; 0x24
			fs->wflag = 1;
900080ea:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
900080ec:	eb01 215a 	add.w	r1, r1, sl, lsr #9
900080f0:	f7ff fe46 	bl	90007d80 <move_window>
			if (res != FR_OK) break;
900080f4:	4605      	mov	r5, r0
900080f6:	b940      	cbnz	r0, 9000810a <put_fat+0x86>
			p = fs->win + bc % SS(fs);
900080f8:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
900080fc:	b144      	cbz	r4, 90008110 <put_fat+0x8c>
900080fe:	f3c7 1707 	ubfx	r7, r7, #4, #8
90008102:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
90008106:	2301      	movs	r3, #1
90008108:	70f3      	strb	r3, [r6, #3]
}
9000810a:	4628      	mov	r0, r5
9000810c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
90008110:	f819 300a 	ldrb.w	r3, [r9, sl]
90008114:	f3c7 2703 	ubfx	r7, r7, #8, #4
90008118:	f023 030f 	bic.w	r3, r3, #15
9000811c:	431f      	orrs	r7, r3
9000811e:	e7f0      	b.n	90008102 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
90008120:	6a41      	ldr	r1, [r0, #36]	; 0x24
90008122:	eb01 2114 	add.w	r1, r1, r4, lsr #8
90008126:	f7ff fe2b 	bl	90007d80 <move_window>
			if (res != FR_OK) break;
9000812a:	4605      	mov	r5, r0
9000812c:	2800      	cmp	r0, #0
9000812e:	d1ec      	bne.n	9000810a <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
90008130:	0064      	lsls	r4, r4, #1
90008132:	f106 0334 	add.w	r3, r6, #52	; 0x34
90008136:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
9000813a:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
9000813c:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
9000813e:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
90008142:	7057      	strb	r7, [r2, #1]
			fs->wflag = 1;
90008144:	e7df      	b.n	90008106 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
90008146:	6a41      	ldr	r1, [r0, #36]	; 0x24
90008148:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
9000814c:	f7ff fe18 	bl	90007d80 <move_window>
			if (res != FR_OK) break;
90008150:	4605      	mov	r5, r0
90008152:	2800      	cmp	r0, #0
90008154:	d1d9      	bne.n	9000810a <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
90008156:	00a4      	lsls	r4, r4, #2
90008158:	f106 0334 	add.w	r3, r6, #52	; 0x34
9000815c:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
90008160:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
90008164:	4423      	add	r3, r4
90008166:	4618      	mov	r0, r3
90008168:	f7ff fc3c 	bl	900079e4 <ld_dword>
9000816c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
90008170:	ea47 0100 	orr.w	r1, r7, r0
90008174:	4618      	mov	r0, r3
90008176:	f7ff fc37 	bl	900079e8 <st_dword>
9000817a:	e7c4      	b.n	90008106 <put_fat+0x82>
		switch (fs->fs_type) {
9000817c:	2502      	movs	r5, #2
9000817e:	e7c4      	b.n	9000810a <put_fat+0x86>

90008180 <sync_fs>:
{
90008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90008182:	4604      	mov	r4, r0
	res = sync_window(fs);
90008184:	f7ff fdf6 	bl	90007d74 <sync_window>
90008188:	4605      	mov	r5, r0
	if (res == FR_OK) {
9000818a:	2800      	cmp	r0, #0
9000818c:	d142      	bne.n	90008214 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
9000818e:	7823      	ldrb	r3, [r4, #0]
90008190:	2b03      	cmp	r3, #3
90008192:	d137      	bne.n	90008204 <sync_fs+0x84>
90008194:	7927      	ldrb	r7, [r4, #4]
90008196:	2f01      	cmp	r7, #1
90008198:	d134      	bne.n	90008204 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
9000819a:	f104 0634 	add.w	r6, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
9000819e:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
900081a0:	4601      	mov	r1, r0
900081a2:	f44f 7200 	mov.w	r2, #512	; 0x200
900081a6:	4630      	mov	r0, r6
900081a8:	f7ff fc26 	bl	900079f8 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
900081ac:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
900081b0:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
900081b2:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
900081b4:	2172      	movs	r1, #114	; 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
900081b6:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
900081ba:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
900081be:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
900081c0:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
900081c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
900081c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
900081cc:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
900081ce:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
900081d2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
900081d6:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
900081da:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
	*ptr++ = (BYTE)val; val >>= 8;
900081de:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
900081e2:	6961      	ldr	r1, [r4, #20]
900081e4:	f7ff fc00 	bl	900079e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
900081e8:	6921      	ldr	r1, [r4, #16]
900081ea:	f504 7008 	add.w	r0, r4, #544	; 0x220
900081ee:	f7ff fbfb 	bl	900079e8 <st_dword>
			fs->winsect = fs->volbase + 1;
900081f2:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
900081f4:	463b      	mov	r3, r7
900081f6:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
900081f8:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
900081fa:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
900081fc:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
900081fe:	f7ff fbd3 	bl	900079a8 <disk_write>
			fs->fsi_flag = 0;
90008202:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
90008204:	2200      	movs	r2, #0
90008206:	7860      	ldrb	r0, [r4, #1]
90008208:	4611      	mov	r1, r2
9000820a:	f7ff fbdb 	bl	900079c4 <disk_ioctl>
9000820e:	3800      	subs	r0, #0
90008210:	bf18      	it	ne
90008212:	2001      	movne	r0, #1
}
90008214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90008216 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
90008216:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
90008218:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
9000821a:	bf04      	itt	eq
9000821c:	8a8a      	ldrheq	r2, [r1, #20]
9000821e:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
90008222:	4618      	mov	r0, r3
90008224:	4770      	bx	lr

90008226 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
90008226:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
90008228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000822a:	4606      	mov	r6, r0
9000822c:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
9000822e:	d94e      	bls.n	900082ce <get_fat.isra.0+0xa8>
90008230:	6983      	ldr	r3, [r0, #24]
90008232:	4299      	cmp	r1, r3
90008234:	d24b      	bcs.n	900082ce <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
90008236:	7803      	ldrb	r3, [r0, #0]
90008238:	2b02      	cmp	r3, #2
9000823a:	d029      	beq.n	90008290 <get_fat.isra.0+0x6a>
9000823c:	2b03      	cmp	r3, #3
9000823e:	d034      	beq.n	900082aa <get_fat.isra.0+0x84>
90008240:	2b01      	cmp	r3, #1
90008242:	d144      	bne.n	900082ce <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
90008244:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
90008248:	6a41      	ldr	r1, [r0, #36]	; 0x24
9000824a:	eb01 2155 	add.w	r1, r1, r5, lsr #9
9000824e:	f7ff fd97 	bl	90007d80 <move_window>
90008252:	b110      	cbz	r0, 9000825a <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
90008254:	f04f 30ff 	mov.w	r0, #4294967295
}
90008258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
9000825a:	1c6f      	adds	r7, r5, #1
9000825c:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
90008260:	6a71      	ldr	r1, [r6, #36]	; 0x24
90008262:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
90008264:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
90008266:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
9000826a:	f895 5034 	ldrb.w	r5, [r5, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
9000826e:	f7ff fd87 	bl	90007d80 <move_window>
90008272:	2800      	cmp	r0, #0
90008274:	d1ee      	bne.n	90008254 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
90008276:	f3c7 0708 	ubfx	r7, r7, #0, #9
9000827a:	4437      	add	r7, r6
9000827c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
90008280:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
90008284:	07e3      	lsls	r3, r4, #31
90008286:	bf4c      	ite	mi
90008288:	0900      	lsrmi	r0, r0, #4
9000828a:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
9000828e:	e7e3      	b.n	90008258 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
90008290:	6a41      	ldr	r1, [r0, #36]	; 0x24
90008292:	eb01 2114 	add.w	r1, r1, r4, lsr #8
90008296:	f7ff fd73 	bl	90007d80 <move_window>
9000829a:	2800      	cmp	r0, #0
9000829c:	d1da      	bne.n	90008254 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
9000829e:	0064      	lsls	r4, r4, #1
900082a0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
900082a4:	4434      	add	r4, r6
900082a6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
			break;
900082a8:	e7d6      	b.n	90008258 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
900082aa:	6a41      	ldr	r1, [r0, #36]	; 0x24
900082ac:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
900082b0:	f7ff fd66 	bl	90007d80 <move_window>
900082b4:	2800      	cmp	r0, #0
900082b6:	d1cd      	bne.n	90008254 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
900082b8:	00a4      	lsls	r4, r4, #2
900082ba:	f106 0034 	add.w	r0, r6, #52	; 0x34
900082be:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
900082c2:	4420      	add	r0, r4
900082c4:	f7ff fb8e 	bl	900079e4 <ld_dword>
900082c8:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
900082cc:	e7c4      	b.n	90008258 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
900082ce:	2001      	movs	r0, #1
	return val;
900082d0:	e7c2      	b.n	90008258 <get_fat.isra.0+0x32>

900082d2 <remove_chain>:
{
900082d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
900082d4:	460c      	mov	r4, r1
900082d6:	4606      	mov	r6, r0
900082d8:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
900082da:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
900082dc:	2c01      	cmp	r4, #1
900082de:	d92c      	bls.n	9000833a <remove_chain+0x68>
900082e0:	69ab      	ldr	r3, [r5, #24]
900082e2:	42a3      	cmp	r3, r4
900082e4:	d929      	bls.n	9000833a <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
900082e6:	b12a      	cbz	r2, 900082f4 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
900082e8:	f04f 32ff 	mov.w	r2, #4294967295
900082ec:	4628      	mov	r0, r5
900082ee:	f7ff fec9 	bl	90008084 <put_fat>
		if (res != FR_OK) return res;
900082f2:	b940      	cbnz	r0, 90008306 <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
900082f4:	4621      	mov	r1, r4
900082f6:	6830      	ldr	r0, [r6, #0]
900082f8:	9401      	str	r4, [sp, #4]
900082fa:	f7ff ff94 	bl	90008226 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
900082fe:	9901      	ldr	r1, [sp, #4]
90008300:	4604      	mov	r4, r0
90008302:	b910      	cbnz	r0, 9000830a <remove_chain+0x38>
	return FR_OK;
90008304:	2000      	movs	r0, #0
}
90008306:	b002      	add	sp, #8
90008308:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
9000830a:	2801      	cmp	r0, #1
9000830c:	d015      	beq.n	9000833a <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
9000830e:	1c43      	adds	r3, r0, #1
90008310:	d015      	beq.n	9000833e <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
90008312:	2200      	movs	r2, #0
90008314:	4628      	mov	r0, r5
90008316:	f7ff feb5 	bl	90008084 <put_fat>
			if (res != FR_OK) return res;
9000831a:	2800      	cmp	r0, #0
9000831c:	d1f3      	bne.n	90008306 <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
9000831e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
90008322:	1e91      	subs	r1, r2, #2
90008324:	428b      	cmp	r3, r1
90008326:	d205      	bcs.n	90008334 <remove_chain+0x62>
			fs->free_clst++;
90008328:	3301      	adds	r3, #1
9000832a:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
9000832c:	792b      	ldrb	r3, [r5, #4]
9000832e:	f043 0301 	orr.w	r3, r3, #1
90008332:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
90008334:	42a2      	cmp	r2, r4
90008336:	d8dd      	bhi.n	900082f4 <remove_chain+0x22>
90008338:	e7e4      	b.n	90008304 <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
9000833a:	2002      	movs	r0, #2
9000833c:	e7e3      	b.n	90008306 <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
9000833e:	2001      	movs	r0, #1
90008340:	e7e1      	b.n	90008306 <remove_chain+0x34>

90008342 <create_chain>:
{
90008342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90008346:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
90008348:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
9000834a:	460f      	mov	r7, r1
9000834c:	b971      	cbnz	r1, 9000836c <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
9000834e:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
90008350:	b1ee      	cbz	r6, 9000838e <create_chain+0x4c>
90008352:	69ab      	ldr	r3, [r5, #24]
90008354:	42b3      	cmp	r3, r6
90008356:	bf98      	it	ls
90008358:	2601      	movls	r6, #1
9000835a:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
9000835c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
9000835e:	69ab      	ldr	r3, [r5, #24]
90008360:	42a3      	cmp	r3, r4
90008362:	d817      	bhi.n	90008394 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
90008364:	2e01      	cmp	r6, #1
90008366:	d114      	bne.n	90008392 <create_chain+0x50>
90008368:	2400      	movs	r4, #0
9000836a:	e006      	b.n	9000837a <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
9000836c:	4628      	mov	r0, r5
9000836e:	f7ff ff5a 	bl	90008226 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
90008372:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
90008374:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
90008376:	d803      	bhi.n	90008380 <create_chain+0x3e>
90008378:	2401      	movs	r4, #1
}
9000837a:	4620      	mov	r0, r4
9000837c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
90008380:	1c43      	adds	r3, r0, #1
90008382:	d030      	beq.n	900083e6 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
90008384:	69ab      	ldr	r3, [r5, #24]
90008386:	4283      	cmp	r3, r0
90008388:	d8f7      	bhi.n	9000837a <create_chain+0x38>
9000838a:	463e      	mov	r6, r7
9000838c:	e7e5      	b.n	9000835a <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
9000838e:	2601      	movs	r6, #1
90008390:	e7e3      	b.n	9000835a <create_chain+0x18>
				ncl = 2;
90008392:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
90008394:	4621      	mov	r1, r4
90008396:	f8d8 0000 	ldr.w	r0, [r8]
9000839a:	f7ff ff44 	bl	90008226 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
9000839e:	b130      	cbz	r0, 900083ae <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
900083a0:	2801      	cmp	r0, #1
900083a2:	d0e9      	beq.n	90008378 <create_chain+0x36>
900083a4:	3001      	adds	r0, #1
900083a6:	d01e      	beq.n	900083e6 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
900083a8:	42b4      	cmp	r4, r6
900083aa:	d1d7      	bne.n	9000835c <create_chain+0x1a>
900083ac:	e7dc      	b.n	90008368 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
900083ae:	f04f 32ff 	mov.w	r2, #4294967295
900083b2:	4621      	mov	r1, r4
900083b4:	4628      	mov	r0, r5
900083b6:	f7ff fe65 	bl	90008084 <put_fat>
		if (res == FR_OK && clst != 0) {
900083ba:	b990      	cbnz	r0, 900083e2 <create_chain+0xa0>
900083bc:	b957      	cbnz	r7, 900083d4 <create_chain+0x92>
		fs->last_clst = ncl;
900083be:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
900083c0:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
900083c4:	3a02      	subs	r2, #2
900083c6:	4293      	cmp	r3, r2
900083c8:	d910      	bls.n	900083ec <create_chain+0xaa>
		fs->fsi_flag |= 1;
900083ca:	792b      	ldrb	r3, [r5, #4]
900083cc:	f043 0301 	orr.w	r3, r3, #1
900083d0:	712b      	strb	r3, [r5, #4]
900083d2:	e7d2      	b.n	9000837a <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
900083d4:	4622      	mov	r2, r4
900083d6:	4639      	mov	r1, r7
900083d8:	4628      	mov	r0, r5
900083da:	f7ff fe53 	bl	90008084 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
900083de:	2800      	cmp	r0, #0
900083e0:	d0ed      	beq.n	900083be <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
900083e2:	2801      	cmp	r0, #1
900083e4:	d1c8      	bne.n	90008378 <create_chain+0x36>
900083e6:	f04f 34ff 	mov.w	r4, #4294967295
900083ea:	e7c6      	b.n	9000837a <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
900083ec:	3b01      	subs	r3, #1
900083ee:	616b      	str	r3, [r5, #20]
900083f0:	e7eb      	b.n	900083ca <create_chain+0x88>

900083f2 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
900083f2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
900083f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900083f8:	4606      	mov	r6, r0
900083fa:	460c      	mov	r4, r1
	FATFS *fs = dp->obj.fs;
900083fc:	6805      	ldr	r5, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
900083fe:	d301      	bcc.n	90008404 <dir_sdi+0x12>
		return FR_INT_ERR;
90008400:	2002      	movs	r0, #2
}
90008402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
90008404:	06ca      	lsls	r2, r1, #27
90008406:	d1fb      	bne.n	90008400 <dir_sdi+0xe>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
90008408:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
9000840a:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
9000840c:	b9ba      	cbnz	r2, 9000843e <dir_sdi+0x4c>
9000840e:	782b      	ldrb	r3, [r5, #0]
90008410:	2b02      	cmp	r3, #2
90008412:	d901      	bls.n	90008418 <dir_sdi+0x26>
		clst = fs->dirbase;
90008414:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
90008416:	b99b      	cbnz	r3, 90008440 <dir_sdi+0x4e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
90008418:	892b      	ldrh	r3, [r5, #8]
9000841a:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
9000841e:	d9ef      	bls.n	90008400 <dir_sdi+0xe>
		dp->sect = fs->dirbase;
90008420:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
90008422:	e9c6 2006 	strd	r2, r0, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
90008426:	2800      	cmp	r0, #0
90008428:	d0ea      	beq.n	90008400 <dir_sdi+0xe>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
9000842a:	eb00 2054 	add.w	r0, r0, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
9000842e:	3534      	adds	r5, #52	; 0x34
90008430:	f3c4 0408 	ubfx	r4, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
90008434:	61f0      	str	r0, [r6, #28]
	return FR_OK;
90008436:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
90008438:	4425      	add	r5, r4
9000843a:	6235      	str	r5, [r6, #32]
	return FR_OK;
9000843c:	e7e1      	b.n	90008402 <dir_sdi+0x10>
9000843e:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
90008440:	896f      	ldrh	r7, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
90008442:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
90008444:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
90008446:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
90008448:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
9000844a:	d203      	bcs.n	90008454 <dir_sdi+0x62>
		dp->sect = clust2sect(fs, clst);
9000844c:	4628      	mov	r0, r5
9000844e:	f7ff fb81 	bl	90007b54 <clust2sect>
90008452:	e7e6      	b.n	90008422 <dir_sdi+0x30>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
90008454:	6830      	ldr	r0, [r6, #0]
90008456:	f7ff fee6 	bl	90008226 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
9000845a:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
9000845c:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
9000845e:	d006      	beq.n	9000846e <dir_sdi+0x7c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
90008460:	2801      	cmp	r0, #1
90008462:	d9cd      	bls.n	90008400 <dir_sdi+0xe>
90008464:	69ab      	ldr	r3, [r5, #24]
90008466:	4283      	cmp	r3, r0
90008468:	d9ca      	bls.n	90008400 <dir_sdi+0xe>
			ofs -= csz;
9000846a:	1be4      	subs	r4, r4, r7
9000846c:	e7eb      	b.n	90008446 <dir_sdi+0x54>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
9000846e:	2001      	movs	r0, #1
90008470:	e7c7      	b.n	90008402 <dir_sdi+0x10>

90008472 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
90008472:	6943      	ldr	r3, [r0, #20]
{
90008474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
90008478:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
9000847c:	69c3      	ldr	r3, [r0, #28]
{
9000847e:	4605      	mov	r5, r0
90008480:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
90008482:	b18b      	cbz	r3, 900084a8 <dir_next+0x36>
90008484:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
90008488:	d20e      	bcs.n	900084a8 <dir_next+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
9000848a:	f3c8 0708 	ubfx	r7, r8, #0, #9
	FATFS *fs = dp->obj.fs;
9000848e:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
90008490:	2f00      	cmp	r7, #0
90008492:	d14f      	bne.n	90008534 <dir_next+0xc2>
		dp->sect++;				/* Next sector */
90008494:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
90008496:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
90008498:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
9000849a:	b939      	cbnz	r1, 900084ac <dir_next+0x3a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
9000849c:	8923      	ldrh	r3, [r4, #8]
9000849e:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
900084a2:	d847      	bhi.n	90008534 <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
900084a4:	2300      	movs	r3, #0
900084a6:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
900084a8:	2004      	movs	r0, #4
900084aa:	e00d      	b.n	900084c8 <dir_next+0x56>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
900084ac:	f8b4 900a 	ldrh.w	r9, [r4, #10]
900084b0:	f109 39ff 	add.w	r9, r9, #4294967295
900084b4:	ea19 2958 	ands.w	r9, r9, r8, lsr #9
900084b8:	d13c      	bne.n	90008534 <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
900084ba:	4620      	mov	r0, r4
900084bc:	f7ff feb3 	bl	90008226 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
900084c0:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
900084c2:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
900084c4:	d802      	bhi.n	900084cc <dir_next+0x5a>
900084c6:	2002      	movs	r0, #2
}
900084c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
900084cc:	1c42      	adds	r2, r0, #1
900084ce:	d101      	bne.n	900084d4 <dir_next+0x62>
900084d0:	2001      	movs	r0, #1
900084d2:	e7f9      	b.n	900084c8 <dir_next+0x56>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
900084d4:	69a3      	ldr	r3, [r4, #24]
900084d6:	4283      	cmp	r3, r0
900084d8:	d826      	bhi.n	90008528 <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
900084da:	f1ba 0f00 	cmp.w	sl, #0
900084de:	d0e1      	beq.n	900084a4 <dir_next+0x32>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
900084e0:	69a9      	ldr	r1, [r5, #24]
900084e2:	4628      	mov	r0, r5
900084e4:	f7ff ff2d 	bl	90008342 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
900084e8:	4606      	mov	r6, r0
900084ea:	2800      	cmp	r0, #0
900084ec:	d035      	beq.n	9000855a <dir_next+0xe8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
900084ee:	2801      	cmp	r0, #1
900084f0:	d0e9      	beq.n	900084c6 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
900084f2:	1c43      	adds	r3, r0, #1
900084f4:	d0ec      	beq.n	900084d0 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
900084f6:	4620      	mov	r0, r4
900084f8:	f7ff fc3c 	bl	90007d74 <sync_window>
900084fc:	4601      	mov	r1, r0
900084fe:	2800      	cmp	r0, #0
90008500:	d1e6      	bne.n	900084d0 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
90008502:	f104 0034 	add.w	r0, r4, #52	; 0x34
90008506:	f44f 7200 	mov.w	r2, #512	; 0x200
						fs->wflag = 1;
9000850a:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
9000850e:	f7ff fa73 	bl	900079f8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
90008512:	4631      	mov	r1, r6
90008514:	4620      	mov	r0, r4
90008516:	f7ff fb1d 	bl	90007b54 <clust2sect>
9000851a:	8963      	ldrh	r3, [r4, #10]
9000851c:	6320      	str	r0, [r4, #48]	; 0x30
9000851e:	4599      	cmp	r9, r3
90008520:	d30f      	bcc.n	90008542 <dir_next+0xd0>
					fs->winsect -= n;							/* Restore window offset */
90008522:	eba0 0009 	sub.w	r0, r0, r9
90008526:	6320      	str	r0, [r4, #48]	; 0x30
				dp->sect = clust2sect(fs, clst);
90008528:	4631      	mov	r1, r6
9000852a:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
9000852c:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
9000852e:	f7ff fb11 	bl	90007b54 <clust2sect>
90008532:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
90008534:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
90008536:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
90008538:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
9000853c:	443c      	add	r4, r7
9000853e:	622c      	str	r4, [r5, #32]
	return FR_OK;
90008540:	e7c2      	b.n	900084c8 <dir_next+0x56>
						fs->wflag = 1;
90008542:	4620      	mov	r0, r4
90008544:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
90008548:	f7ff fbee 	bl	90007d28 <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
9000854c:	2800      	cmp	r0, #0
9000854e:	d1bf      	bne.n	900084d0 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
90008550:	6b20      	ldr	r0, [r4, #48]	; 0x30
90008552:	f109 0901 	add.w	r9, r9, #1
90008556:	3001      	adds	r0, #1
90008558:	e7df      	b.n	9000851a <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
9000855a:	2007      	movs	r0, #7
9000855c:	e7b4      	b.n	900084c8 <dir_next+0x56>
	...

90008560 <dir_find>:
{
90008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
90008564:	2100      	movs	r1, #0
{
90008566:	b085      	sub	sp, #20
90008568:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
9000856a:	f8d0 b000 	ldr.w	fp, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
9000856e:	f7ff ff40 	bl	900083f2 <dir_sdi>
	if (res != FR_OK) return res;
90008572:	4606      	mov	r6, r0
90008574:	2800      	cmp	r0, #0
90008576:	f040 8098 	bne.w	900086aa <dir_find+0x14a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
9000857a:	f04f 08ff 	mov.w	r8, #255	; 0xff
9000857e:	f04f 3aff 	mov.w	sl, #4294967295
90008582:	46c1      	mov	r9, r8
90008584:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
		res = move_window(fs, dp->sect);
90008588:	69e1      	ldr	r1, [r4, #28]
9000858a:	4658      	mov	r0, fp
9000858c:	f7ff fbf8 	bl	90007d80 <move_window>
		if (res != FR_OK) break;
90008590:	4606      	mov	r6, r0
90008592:	2800      	cmp	r0, #0
90008594:	f040 8089 	bne.w	900086aa <dir_find+0x14a>
		c = dp->dir[DIR_Name];
90008598:	6a25      	ldr	r5, [r4, #32]
9000859a:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
9000859c:	2f00      	cmp	r7, #0
9000859e:	f000 8088 	beq.w	900086b2 <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
900085a2:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
900085a4:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
900085a6:	f002 033f 	and.w	r3, r2, #63	; 0x3f
900085aa:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
900085ac:	d003      	beq.n	900085b6 <dir_find+0x56>
900085ae:	0710      	lsls	r0, r2, #28
900085b0:	d504      	bpl.n	900085bc <dir_find+0x5c>
900085b2:	2b0f      	cmp	r3, #15
900085b4:	d004      	beq.n	900085c0 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
900085b6:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
900085ba:	e050      	b.n	9000865e <dir_find+0xfe>
			if (a == AM_LFN) {			/* An LFN entry is found */
900085bc:	2b0f      	cmp	r3, #15
900085be:	d156      	bne.n	9000866e <dir_find+0x10e>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
900085c0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
900085c4:	0659      	lsls	r1, r3, #25
900085c6:	d440      	bmi.n	9000864a <dir_find+0xea>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
900085c8:	067a      	lsls	r2, r7, #25
900085ca:	d546      	bpl.n	9000865a <dir_find+0xfa>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
900085cc:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
900085ce:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
900085d2:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
900085d6:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
900085d8:	7b6b      	ldrb	r3, [r5, #13]
900085da:	4543      	cmp	r3, r8
900085dc:	d13f      	bne.n	9000865e <dir_find+0xfe>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
900085de:	8b6b      	ldrh	r3, [r5, #26]
900085e0:	2b00      	cmp	r3, #0
900085e2:	d13c      	bne.n	9000865e <dir_find+0xfe>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
900085e4:	782e      	ldrb	r6, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
900085e6:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
900085e8:	f8db 300c 	ldr.w	r3, [fp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
900085ec:	f006 063f 	and.w	r6, r6, #63	; 0x3f
900085f0:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 900086bc <dir_find+0x15c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
900085f4:	9300      	str	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
900085f6:	230d      	movs	r3, #13
900085f8:	3e01      	subs	r6, #1
900085fa:	435e      	muls	r6, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
900085fc:	f819 3b01 	ldrb.w	r3, [r9], #1
90008600:	5aeb      	ldrh	r3, [r5, r3]
		if (wc) {
90008602:	b37a      	cbz	r2, 90008664 <dir_find+0x104>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
90008604:	2efe      	cmp	r6, #254	; 0xfe
90008606:	d82a      	bhi.n	9000865e <dir_find+0xfe>
90008608:	4618      	mov	r0, r3
9000860a:	9303      	str	r3, [sp, #12]
9000860c:	f001 f86c 	bl	900096e8 <ff_wtoupper>
90008610:	9b00      	ldr	r3, [sp, #0]
90008612:	1c71      	adds	r1, r6, #1
90008614:	9002      	str	r0, [sp, #8]
90008616:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
9000861a:	9101      	str	r1, [sp, #4]
9000861c:	f001 f864 	bl	900096e8 <ff_wtoupper>
90008620:	9a02      	ldr	r2, [sp, #8]
90008622:	4282      	cmp	r2, r0
90008624:	d11b      	bne.n	9000865e <dir_find+0xfe>
90008626:	9b03      	ldr	r3, [sp, #12]
90008628:	9901      	ldr	r1, [sp, #4]
9000862a:	461a      	mov	r2, r3
9000862c:	460e      	mov	r6, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
9000862e:	4b22      	ldr	r3, [pc, #136]	; (900086b8 <dir_find+0x158>)
90008630:	4599      	cmp	r9, r3
90008632:	d1e3      	bne.n	900085fc <dir_find+0x9c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
90008634:	782b      	ldrb	r3, [r5, #0]
90008636:	065b      	lsls	r3, r3, #25
90008638:	d504      	bpl.n	90008644 <dir_find+0xe4>
9000863a:	b11a      	cbz	r2, 90008644 <dir_find+0xe4>
9000863c:	9b00      	ldr	r3, [sp, #0]
9000863e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
90008642:	b963      	cbnz	r3, 9000865e <dir_find+0xfe>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
90008644:	3f01      	subs	r7, #1
90008646:	fa5f f987 	uxtb.w	r9, r7
		res = dir_next(dp, 0);	/* Next entry */
9000864a:	2100      	movs	r1, #0
9000864c:	4620      	mov	r0, r4
9000864e:	f7ff ff10 	bl	90008472 <dir_next>
	} while (res == FR_OK);
90008652:	4606      	mov	r6, r0
90008654:	2800      	cmp	r0, #0
90008656:	d097      	beq.n	90008588 <dir_find+0x28>
90008658:	e027      	b.n	900086aa <dir_find+0x14a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
9000865a:	45b9      	cmp	r9, r7
9000865c:	d0bc      	beq.n	900085d8 <dir_find+0x78>
9000865e:	f04f 09ff 	mov.w	r9, #255	; 0xff
90008662:	e7f2      	b.n	9000864a <dir_find+0xea>
			if (uc != 0xFFFF) return 0;		/* Check filler */
90008664:	f64f 71ff 	movw	r1, #65535	; 0xffff
90008668:	428b      	cmp	r3, r1
9000866a:	d0e0      	beq.n	9000862e <dir_find+0xce>
9000866c:	e7f7      	b.n	9000865e <dir_find+0xfe>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
9000866e:	f1b9 0f00 	cmp.w	r9, #0
90008672:	d104      	bne.n	9000867e <dir_find+0x11e>
90008674:	4628      	mov	r0, r5
90008676:	f7ff fa95 	bl	90007ba4 <sum_sfn>
9000867a:	4540      	cmp	r0, r8
9000867c:	d015      	beq.n	900086aa <dir_find+0x14a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
9000867e:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
90008682:	f016 0601 	ands.w	r6, r6, #1
90008686:	d196      	bne.n	900085b6 <dir_find+0x56>
90008688:	f104 0224 	add.w	r2, r4, #36	; 0x24
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
9000868c:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
90008690:	f815 3b01 	ldrb.w	r3, [r5], #1
90008694:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
90008698:	428d      	cmp	r5, r1
		r = *d++ - *s++;
9000869a:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
9000869e:	d002      	beq.n	900086a6 <dir_find+0x146>
900086a0:	2b00      	cmp	r3, #0
900086a2:	d0f5      	beq.n	90008690 <dir_find+0x130>
900086a4:	e787      	b.n	900085b6 <dir_find+0x56>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
900086a6:	2b00      	cmp	r3, #0
900086a8:	d185      	bne.n	900085b6 <dir_find+0x56>
}
900086aa:	4630      	mov	r0, r6
900086ac:	b005      	add	sp, #20
900086ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
900086b2:	2604      	movs	r6, #4
900086b4:	e7f9      	b.n	900086aa <dir_find+0x14a>
900086b6:	bf00      	nop
900086b8:	900103b1 	.word	0x900103b1
900086bc:	900103a4 	.word	0x900103a4

900086c0 <dir_register>:
{
900086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
900086c4:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
{
900086c8:	b089      	sub	sp, #36	; 0x24
900086ca:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
900086cc:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
900086d0:	f040 808e 	bne.w	900087f0 <dir_register+0x130>
	FATFS *fs = dp->obj.fs;
900086d4:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
900086d6:	68f2      	ldr	r2, [r6, #12]
900086d8:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
900086dc:	2b00      	cmp	r3, #0
900086de:	d166      	bne.n	900087ae <dir_register+0xee>
	mem_cpy(sn, dp->fn, 12);
900086e0:	f104 0724 	add.w	r7, r4, #36	; 0x24
	if (cnt) {
900086e4:	220c      	movs	r2, #12
900086e6:	a805      	add	r0, sp, #20
900086e8:	4639      	mov	r1, r7
900086ea:	f7ff fb14 	bl	90007d16 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
900086ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
900086f2:	07db      	lsls	r3, r3, #31
900086f4:	f140 8085 	bpl.w	90008802 <dir_register+0x142>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
900086f8:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
900086fa:	f04f 0a01 	mov.w	sl, #1
				if (sr & 0x10000) sr ^= 0x11021;
900086fe:	f8df 8234 	ldr.w	r8, [pc, #564]	; 90008934 <dir_register+0x274>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
90008702:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
90008706:	220b      	movs	r2, #11
90008708:	a905      	add	r1, sp, #20
9000870a:	4638      	mov	r0, r7
9000870c:	f8d6 900c 	ldr.w	r9, [r6, #12]
	if (cnt) {
90008710:	f7ff fb01 	bl	90007d16 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
90008714:	f1ba 0f05 	cmp.w	sl, #5
90008718:	d959      	bls.n	900087ce <dir_register+0x10e>
9000871a:	f1a9 0102 	sub.w	r1, r9, #2
9000871e:	4653      	mov	r3, sl
		while (*lfn) {	/* Create a CRC */
90008720:	f831 2f02 	ldrh.w	r2, [r1, #2]!
90008724:	2a00      	cmp	r2, #0
90008726:	d144      	bne.n	900087b2 <dir_register+0xf2>
90008728:	a805      	add	r0, sp, #20
9000872a:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
9000872c:	f003 0c0f 	and.w	ip, r3, #15
		ns[i--] = c;
90008730:	3a01      	subs	r2, #1
		c = (BYTE)((seq % 16) + '0');
90008732:	f10c 0130 	add.w	r1, ip, #48	; 0x30
		if (c > '9') c += 7;
90008736:	2939      	cmp	r1, #57	; 0x39
90008738:	bf88      	it	hi
9000873a:	f10c 0137 	addhi.w	r1, ip, #55	; 0x37
	} while (seq);
9000873e:	2b0f      	cmp	r3, #15
		ns[i--] = c;
90008740:	f800 1d01 	strb.w	r1, [r0, #-1]!
		seq /= 16;
90008744:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
90008748:	d843      	bhi.n	900087d2 <dir_register+0x112>
	ns[i] = '~';
9000874a:	f102 0320 	add.w	r3, r2, #32
9000874e:	217e      	movs	r1, #126	; 0x7e
90008750:	446b      	add	r3, sp
90008752:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
90008756:	f104 0123 	add.w	r1, r4, #35	; 0x23
9000875a:	2300      	movs	r3, #0
9000875c:	4608      	mov	r0, r1
9000875e:	429a      	cmp	r2, r3
90008760:	d006      	beq.n	90008770 <dir_register+0xb0>
90008762:	f810 cf01 	ldrb.w	ip, [r0, #1]!
90008766:	f103 0e01 	add.w	lr, r3, #1
9000876a:	f1bc 0f20 	cmp.w	ip, #32
9000876e:	d132      	bne.n	900087d6 <dir_register+0x116>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
90008770:	2a07      	cmp	r2, #7
90008772:	f103 0301 	add.w	r3, r3, #1
90008776:	bf97      	itett	ls
90008778:	f102 0020 	addls.w	r0, r2, #32
9000877c:	2020      	movhi	r0, #32
9000877e:	3201      	addls	r2, #1
90008780:	4468      	addls	r0, sp
90008782:	bf98      	it	ls
90008784:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
	} while (j < 8);
90008788:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
9000878a:	54c8      	strb	r0, [r1, r3]
	} while (j < 8);
9000878c:	d9f0      	bls.n	90008770 <dir_register+0xb0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
9000878e:	4620      	mov	r0, r4
90008790:	f7ff fee6 	bl	90008560 <dir_find>
90008794:	4681      	mov	r9, r0
			if (res != FR_OK) break;
90008796:	bb70      	cbnz	r0, 900087f6 <dir_register+0x136>
		for (n = 1; n < 100; n++) {
90008798:	f10a 0a01 	add.w	sl, sl, #1
9000879c:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
900087a0:	d1b1      	bne.n	90008706 <dir_register+0x46>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
900087a2:	f04f 0907 	mov.w	r9, #7
}
900087a6:	4648      	mov	r0, r9
900087a8:	b009      	add	sp, #36	; 0x24
900087aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
900087ae:	3501      	adds	r5, #1
900087b0:	e792      	b.n	900086d8 <dir_register+0x18>
900087b2:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
900087b4:	f002 0c01 	and.w	ip, r2, #1
				wc >>= 1;
900087b8:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
900087ba:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
900087be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
900087c2:	bf18      	it	ne
900087c4:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
900087c8:	3801      	subs	r0, #1
900087ca:	d1f3      	bne.n	900087b4 <dir_register+0xf4>
900087cc:	e7a8      	b.n	90008720 <dir_register+0x60>
900087ce:	4653      	mov	r3, sl
900087d0:	e7aa      	b.n	90008728 <dir_register+0x68>
		seq /= 16;
900087d2:	460b      	mov	r3, r1
900087d4:	e7aa      	b.n	9000872c <dir_register+0x6c>
900087d6:	4673      	mov	r3, lr
900087d8:	e7c1      	b.n	9000875e <dir_register+0x9e>
				n = 0;					/* Not a blank entry. Restart to search */
900087da:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
900087dc:	2101      	movs	r1, #1
900087de:	4620      	mov	r0, r4
900087e0:	f7ff fe47 	bl	90008472 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
900087e4:	4681      	mov	r9, r0
900087e6:	b308      	cbz	r0, 9000882c <dir_register+0x16c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
900087e8:	f1b9 0f04 	cmp.w	r9, #4
900087ec:	d0d9      	beq.n	900087a2 <dir_register+0xe2>
900087ee:	e7da      	b.n	900087a6 <dir_register+0xe6>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
900087f0:	f04f 0906 	mov.w	r9, #6
900087f4:	e7d7      	b.n	900087a6 <dir_register+0xe6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
900087f6:	2804      	cmp	r0, #4
900087f8:	d1d5      	bne.n	900087a6 <dir_register+0xe6>
		dp->fn[NSFLAG] = sn[NSFLAG];
900087fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
900087fe:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
90008802:	f89d 301f 	ldrb.w	r3, [sp, #31]
	res = dir_sdi(dp, 0);
90008806:	2100      	movs	r1, #0
90008808:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
9000880a:	f8d4 a000 	ldr.w	sl, [r4]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
9000880e:	079b      	lsls	r3, r3, #30
90008810:	bf45      	ittet	mi
90008812:	350c      	addmi	r5, #12
90008814:	230d      	movmi	r3, #13
90008816:	2501      	movpl	r5, #1
90008818:	fbb5 f5f3 	udivmi	r5, r5, r3
9000881c:	bf48      	it	mi
9000881e:	3501      	addmi	r5, #1
	res = dir_sdi(dp, 0);
90008820:	f7ff fde7 	bl	900083f2 <dir_sdi>
	if (res == FR_OK) {
90008824:	4681      	mov	r9, r0
90008826:	2800      	cmp	r0, #0
90008828:	d1de      	bne.n	900087e8 <dir_register+0x128>
		n = 0;
9000882a:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
9000882c:	69e1      	ldr	r1, [r4, #28]
9000882e:	4650      	mov	r0, sl
90008830:	f7ff faa6 	bl	90007d80 <move_window>
			if (res != FR_OK) break;
90008834:	4681      	mov	r9, r0
90008836:	2800      	cmp	r0, #0
90008838:	d1d6      	bne.n	900087e8 <dir_register+0x128>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
9000883a:	6a23      	ldr	r3, [r4, #32]
9000883c:	781b      	ldrb	r3, [r3, #0]
9000883e:	2be5      	cmp	r3, #229	; 0xe5
90008840:	d001      	beq.n	90008846 <dir_register+0x186>
90008842:	2b00      	cmp	r3, #0
90008844:	d1c9      	bne.n	900087da <dir_register+0x11a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
90008846:	f108 0801 	add.w	r8, r8, #1
9000884a:	4545      	cmp	r5, r8
9000884c:	d1c6      	bne.n	900087dc <dir_register+0x11c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
9000884e:	3d01      	subs	r5, #1
90008850:	d055      	beq.n	900088fe <dir_register+0x23e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
90008852:	6961      	ldr	r1, [r4, #20]
90008854:	4620      	mov	r0, r4
90008856:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
9000885a:	f7ff fdca 	bl	900083f2 <dir_sdi>
		if (res == FR_OK) {
9000885e:	4681      	mov	r9, r0
90008860:	2800      	cmp	r0, #0
90008862:	d1a0      	bne.n	900087a6 <dir_register+0xe6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
90008864:	f64f 78ff 	movw	r8, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
90008868:	4638      	mov	r0, r7
9000886a:	f7ff f99b 	bl	90007ba4 <sum_sfn>
9000886e:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
90008870:	69e1      	ldr	r1, [r4, #28]
90008872:	4630      	mov	r0, r6
90008874:	f7ff fa84 	bl	90007d80 <move_window>
90008878:	4681      	mov	r9, r0
				if (res != FR_OK) break;
9000887a:	2800      	cmp	r0, #0
9000887c:	d193      	bne.n	900087a6 <dir_register+0xe6>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
9000887e:	6a23      	ldr	r3, [r4, #32]
90008880:	b2e9      	uxtb	r1, r5
	dir[LDIR_Chksum] = sum;			/* Set checksum */
90008882:	9a01      	ldr	r2, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
90008884:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
90008888:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
9000888c:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
9000888e:	f04f 020f 	mov.w	r2, #15
90008892:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 90008938 <dir_register+0x278>
90008896:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
90008898:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
9000889a:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
9000889c:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
900088a0:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
900088a2:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
900088a4:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
900088a6:	4540      	cmp	r0, r8
		st_word(dir + LfnOfs[s], wc);		/* Put it */
900088a8:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++s < 13);
900088ac:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
900088b0:	bf18      	it	ne
900088b2:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
900088b6:	eb03 0b09 	add.w	fp, r3, r9
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
900088ba:	bf18      	it	ne
900088bc:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
900088be:	f803 0009 	strb.w	r0, [r3, r9]
900088c2:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
900088c6:	2800      	cmp	r0, #0
900088c8:	bf08      	it	eq
900088ca:	4640      	moveq	r0, r8
	} while (++s < 13);
900088cc:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
900088d0:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
900088d4:	d1e7      	bne.n	900088a6 <dir_register+0x1e6>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
900088d6:	4540      	cmp	r0, r8
900088d8:	d002      	beq.n	900088e0 <dir_register+0x220>
900088da:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
900088de:	b90a      	cbnz	r2, 900088e4 <dir_register+0x224>
900088e0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
900088e4:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
900088e6:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
900088e8:	2100      	movs	r1, #0
900088ea:	4620      	mov	r0, r4
				fs->wflag = 1;
900088ec:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
900088ee:	f7ff fdc0 	bl	90008472 <dir_next>
			} while (res == FR_OK && --nent);
900088f2:	4681      	mov	r9, r0
900088f4:	2800      	cmp	r0, #0
900088f6:	f47f af56 	bne.w	900087a6 <dir_register+0xe6>
900088fa:	3d01      	subs	r5, #1
900088fc:	d1b8      	bne.n	90008870 <dir_register+0x1b0>
		res = move_window(fs, dp->sect);
900088fe:	69e1      	ldr	r1, [r4, #28]
90008900:	4630      	mov	r0, r6
90008902:	f7ff fa3d 	bl	90007d80 <move_window>
		if (res == FR_OK) {
90008906:	4681      	mov	r9, r0
90008908:	2800      	cmp	r0, #0
9000890a:	f47f af4c 	bne.w	900087a6 <dir_register+0xe6>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
9000890e:	4601      	mov	r1, r0
90008910:	2220      	movs	r2, #32
90008912:	6a20      	ldr	r0, [r4, #32]
90008914:	f7ff f870 	bl	900079f8 <mem_set>
	if (cnt) {
90008918:	220b      	movs	r2, #11
9000891a:	4639      	mov	r1, r7
9000891c:	6a20      	ldr	r0, [r4, #32]
9000891e:	f7ff f9fa 	bl	90007d16 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
90008922:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
90008926:	6a22      	ldr	r2, [r4, #32]
90008928:	f003 0318 	and.w	r3, r3, #24
9000892c:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
9000892e:	2301      	movs	r3, #1
90008930:	70f3      	strb	r3, [r6, #3]
90008932:	e738      	b.n	900087a6 <dir_register+0xe6>
90008934:	00011021 	.word	0x00011021
90008938:	900103a4 	.word	0x900103a4

9000893c <dir_read.constprop.0>:
FRESULT dir_read (
9000893c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
90008940:	27ff      	movs	r7, #255	; 0xff
FRESULT dir_read (
90008942:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
90008944:	f8d0 8000 	ldr.w	r8, [r0]
	FRESULT res = FR_NO_FILE;
90008948:	2504      	movs	r5, #4
	BYTE ord = 0xFF, sum = 0xFF;
9000894a:	463c      	mov	r4, r7
			if (uc != 0xFFFF) return 0;		/* Check filler */
9000894c:	f64f 79ff 	movw	r9, #65535	; 0xffff
	while (dp->sect) {
90008950:	69f1      	ldr	r1, [r6, #28]
90008952:	b911      	cbnz	r1, 9000895a <dir_read.constprop.0+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
90008954:	2d00      	cmp	r5, #0
90008956:	d05f      	beq.n	90008a18 <dir_read.constprop.0+0xdc>
90008958:	e04f      	b.n	900089fa <dir_read.constprop.0+0xbe>
		res = move_window(fs, dp->sect);
9000895a:	4640      	mov	r0, r8
9000895c:	f7ff fa10 	bl	90007d80 <move_window>
		if (res != FR_OK) break;
90008960:	4605      	mov	r5, r0
90008962:	2800      	cmp	r0, #0
90008964:	d149      	bne.n	900089fa <dir_read.constprop.0+0xbe>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
90008966:	6a30      	ldr	r0, [r6, #32]
90008968:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) {
9000896a:	2b00      	cmp	r3, #0
9000896c:	d05c      	beq.n	90008a28 <dir_read.constprop.0+0xec>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
9000896e:	7ac2      	ldrb	r2, [r0, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
90008970:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
90008972:	f002 023f 	and.w	r2, r2, #63	; 0x3f
90008976:	71b2      	strb	r2, [r6, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
90008978:	d044      	beq.n	90008a04 <dir_read.constprop.0+0xc8>
9000897a:	2b2e      	cmp	r3, #46	; 0x2e
9000897c:	d042      	beq.n	90008a04 <dir_read.constprop.0+0xc8>
9000897e:	f022 0120 	bic.w	r1, r2, #32
90008982:	2908      	cmp	r1, #8
90008984:	d03e      	beq.n	90008a04 <dir_read.constprop.0+0xc8>
				if (a == AM_LFN) {			/* An LFN entry is found */
90008986:	2a0f      	cmp	r2, #15
90008988:	d141      	bne.n	90008a0e <dir_read.constprop.0+0xd2>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
9000898a:	0659      	lsls	r1, r3, #25
9000898c:	d538      	bpl.n	90008a00 <dir_read.constprop.0+0xc4>
						c &= (BYTE)~LLEF; ord = c;
9000898e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
90008992:	6973      	ldr	r3, [r6, #20]
						sum = dp->dir[LDIR_Chksum];
90008994:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
90008996:	6333      	str	r3, [r6, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
90008998:	7b43      	ldrb	r3, [r0, #13]
9000899a:	42bb      	cmp	r3, r7
9000899c:	d132      	bne.n	90008a04 <dir_read.constprop.0+0xc8>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
9000899e:	8b42      	ldrh	r2, [r0, #26]
900089a0:	bb82      	cbnz	r2, 90008a04 <dir_read.constprop.0+0xc8>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
900089a2:	7803      	ldrb	r3, [r0, #0]
900089a4:	210d      	movs	r1, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
900089a6:	f8d8 500c 	ldr.w	r5, [r8, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
900089aa:	f04f 0e01 	mov.w	lr, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
900089ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
900089b2:	f8df c078 	ldr.w	ip, [pc, #120]	; 90008a2c <dir_read.constprop.0+0xf0>
900089b6:	3b01      	subs	r3, #1
900089b8:	434b      	muls	r3, r1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
900089ba:	f81c 1b01 	ldrb.w	r1, [ip], #1
900089be:	5a41      	ldrh	r1, [r0, r1]
		if (wc) {
900089c0:	f1be 0f00 	cmp.w	lr, #0
900089c4:	d020      	beq.n	90008a08 <dir_read.constprop.0+0xcc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
900089c6:	2bfe      	cmp	r3, #254	; 0xfe
900089c8:	d81c      	bhi.n	90008a04 <dir_read.constprop.0+0xc8>
			lfnbuf[i++] = wc = uc;			/* Store it */
900089ca:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
900089ce:	468e      	mov	lr, r1
900089d0:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
900089d2:	3201      	adds	r2, #1
900089d4:	2a0d      	cmp	r2, #13
900089d6:	d1f0      	bne.n	900089ba <dir_read.constprop.0+0x7e>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
900089d8:	7802      	ldrb	r2, [r0, #0]
900089da:	0652      	lsls	r2, r2, #25
900089dc:	d504      	bpl.n	900089e8 <dir_read.constprop.0+0xac>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
900089de:	2bfe      	cmp	r3, #254	; 0xfe
900089e0:	d810      	bhi.n	90008a04 <dir_read.constprop.0+0xc8>
		lfnbuf[i] = 0;
900089e2:	2200      	movs	r2, #0
900089e4:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
900089e8:	3c01      	subs	r4, #1
900089ea:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
900089ec:	2100      	movs	r1, #0
900089ee:	4630      	mov	r0, r6
900089f0:	f7ff fd3f 	bl	90008472 <dir_next>
		if (res != FR_OK) break;
900089f4:	4605      	mov	r5, r0
900089f6:	2800      	cmp	r0, #0
900089f8:	d0aa      	beq.n	90008950 <dir_read.constprop.0+0x14>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
900089fa:	2300      	movs	r3, #0
900089fc:	61f3      	str	r3, [r6, #28]
900089fe:	e00c      	b.n	90008a1a <dir_read.constprop.0+0xde>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
90008a00:	42a3      	cmp	r3, r4
90008a02:	d0c9      	beq.n	90008998 <dir_read.constprop.0+0x5c>
90008a04:	24ff      	movs	r4, #255	; 0xff
90008a06:	e7f1      	b.n	900089ec <dir_read.constprop.0+0xb0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
90008a08:	4549      	cmp	r1, r9
90008a0a:	d0e2      	beq.n	900089d2 <dir_read.constprop.0+0x96>
90008a0c:	e7fa      	b.n	90008a04 <dir_read.constprop.0+0xc8>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
90008a0e:	b93c      	cbnz	r4, 90008a20 <dir_read.constprop.0+0xe4>
90008a10:	f7ff f8c8 	bl	90007ba4 <sum_sfn>
90008a14:	42b8      	cmp	r0, r7
90008a16:	d103      	bne.n	90008a20 <dir_read.constprop.0+0xe4>
		res = move_window(fs, dp->sect);
90008a18:	2500      	movs	r5, #0
}
90008a1a:	4628      	mov	r0, r5
90008a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
90008a20:	f04f 33ff 	mov.w	r3, #4294967295
90008a24:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
90008a26:	e7f8      	b.n	90008a1a <dir_read.constprop.0+0xde>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
90008a28:	2504      	movs	r5, #4
90008a2a:	e7e6      	b.n	900089fa <dir_read.constprop.0+0xbe>
90008a2c:	900103a4 	.word	0x900103a4

90008a30 <follow_path>:
{
90008a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008a34:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
90008a36:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
90008a3a:	4689      	mov	r9, r1
90008a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
90008a40:	2b2f      	cmp	r3, #47	; 0x2f
90008a42:	d0fa      	beq.n	90008a3a <follow_path+0xa>
90008a44:	2b5c      	cmp	r3, #92	; 0x5c
90008a46:	d0f8      	beq.n	90008a3a <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
90008a48:	2100      	movs	r1, #0
90008a4a:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
90008a4c:	f899 3000 	ldrb.w	r3, [r9]
90008a50:	2b1f      	cmp	r3, #31
90008a52:	f200 80b2 	bhi.w	90008bba <follow_path+0x18a>
		dp->fn[NSFLAG] = NS_NONAME;
90008a56:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
90008a58:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
90008a5a:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
90008a5e:	b003      	add	sp, #12
90008a60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
90008a64:	f7ff bcc5 	b.w	900083f2 <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
90008a68:	3501      	adds	r5, #1
90008a6a:	e0b9      	b.n	90008be0 <follow_path+0x1b0>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
90008a6c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
90008a70:	e9cd 3200 	strd	r3, r2, [sp]
90008a74:	d00e      	beq.n	90008a94 <follow_path+0x64>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
90008a76:	2101      	movs	r1, #1
90008a78:	4620      	mov	r0, r4
90008a7a:	f000 fe19 	bl	900096b0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
90008a7e:	b148      	cbz	r0, 90008a94 <follow_path+0x64>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
90008a80:	287f      	cmp	r0, #127	; 0x7f
90008a82:	e9dd 3200 	ldrd	r3, r2, [sp]
90008a86:	d807      	bhi.n	90008a98 <follow_path+0x68>
90008a88:	4c7f      	ldr	r4, [pc, #508]	; (90008c88 <follow_path+0x258>)
	while (*str && *str != chr) str++;
90008a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
90008a8e:	b119      	cbz	r1, 90008a98 <follow_path+0x68>
90008a90:	4288      	cmp	r0, r1
90008a92:	d1fa      	bne.n	90008a8a <follow_path+0x5a>
				cf |= NS_LOSS | NS_LFN; break;
90008a94:	2006      	movs	r0, #6
90008a96:	e04d      	b.n	90008b34 <follow_path+0x104>
		w = p[si++];					/* Get a character */
90008a98:	462f      	mov	r7, r5
		lfn[di++] = w;					/* Store the Unicode character */
90008a9a:	f823 0f02 	strh.w	r0, [r3, #2]!
		w = p[si++];					/* Get a character */
90008a9e:	e095      	b.n	90008bcc <follow_path+0x19c>
		w = lfn[di - 1];
90008aa0:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
		if (w != ' ' && w != '.') break;
90008aa4:	2b20      	cmp	r3, #32
90008aa6:	d002      	beq.n	90008aae <follow_path+0x7e>
90008aa8:	2b2e      	cmp	r3, #46	; 0x2e
90008aaa:	f040 80a5 	bne.w	90008bf8 <follow_path+0x1c8>
		di--;
90008aae:	3f01      	subs	r7, #1
90008ab0:	e09f      	b.n	90008bf2 <follow_path+0x1c2>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
90008ab2:	3101      	adds	r1, #1
90008ab4:	e0ad      	b.n	90008c12 <follow_path+0x1e2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
90008ab6:	4543      	cmp	r3, r8
90008ab8:	d205      	bcs.n	90008ac6 <follow_path+0x96>
90008aba:	42ba      	cmp	r2, r7
90008abc:	d149      	bne.n	90008b52 <follow_path+0x122>
			if (ni == 11) {				/* Long extension */
90008abe:	f1b8 0f0b 	cmp.w	r8, #11
90008ac2:	d13f      	bne.n	90008b44 <follow_path+0x114>
90008ac4:	e002      	b.n	90008acc <follow_path+0x9c>
90008ac6:	f1b8 0f0b 	cmp.w	r8, #11
90008aca:	d136      	bne.n	90008b3a <follow_path+0x10a>
				cf |= NS_LOSS | NS_LFN; break;
90008acc:	f044 0403 	orr.w	r4, r4, #3
90008ad0:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
90008ad4:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
90008ad8:	2be5      	cmp	r3, #229	; 0xe5
90008ada:	bf04      	itt	eq
90008adc:	2305      	moveq	r3, #5
90008ade:	f886 3024 	strbeq.w	r3, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
90008ae2:	f1b8 0f08 	cmp.w	r8, #8
90008ae6:	bf04      	itt	eq
90008ae8:	00ad      	lsleq	r5, r5, #2
90008aea:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
90008aec:	f005 030c 	and.w	r3, r5, #12
90008af0:	2b0c      	cmp	r3, #12
90008af2:	d003      	beq.n	90008afc <follow_path+0xcc>
90008af4:	f005 0203 	and.w	r2, r5, #3
90008af8:	2a03      	cmp	r2, #3
90008afa:	d101      	bne.n	90008b00 <follow_path+0xd0>
90008afc:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
90008b00:	07a1      	lsls	r1, r4, #30
90008b02:	d409      	bmi.n	90008b18 <follow_path+0xe8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
90008b04:	f005 0503 	and.w	r5, r5, #3
90008b08:	2d01      	cmp	r5, #1
90008b0a:	bf08      	it	eq
90008b0c:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
90008b10:	2b04      	cmp	r3, #4
90008b12:	bf08      	it	eq
90008b14:	f044 0408 	orreq.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
90008b18:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
90008b1a:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
90008b1e:	f7ff fd1f 	bl	90008560 <dir_find>
			ns = dp->fn[NSFLAG];
90008b22:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
90008b26:	b3c0      	cbz	r0, 90008b9a <follow_path+0x16a>
				if (res == FR_NO_FILE) {	/* Object is not found */
90008b28:	2804      	cmp	r0, #4
90008b2a:	d103      	bne.n	90008b34 <follow_path+0x104>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
90008b2c:	f013 0f04 	tst.w	r3, #4
90008b30:	bf08      	it	eq
90008b32:	2005      	moveq	r0, #5
}
90008b34:	b003      	add	sp, #12
90008b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
90008b3a:	42ba      	cmp	r2, r7
90008b3c:	d002      	beq.n	90008b44 <follow_path+0x114>
90008b3e:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
90008b42:	d8c7      	bhi.n	90008ad4 <follow_path+0xa4>
			b <<= 2; continue;
90008b44:	00ad      	lsls	r5, r5, #2
90008b46:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11;	/* Enter extension section */
90008b48:	f04f 080b 	mov.w	r8, #11
90008b4c:	2308      	movs	r3, #8
			b <<= 2; continue;
90008b4e:	b2ed      	uxtb	r5, r5
90008b50:	e089      	b.n	90008c66 <follow_path+0x236>
		if (w >= 0x80) {				/* Non ASCII character */
90008b52:	287f      	cmp	r0, #127	; 0x7f
90008b54:	d90e      	bls.n	90008b74 <follow_path+0x144>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
90008b56:	2100      	movs	r1, #0
			cf |= NS_LFN;				/* Force create LFN entry */
90008b58:	f044 0402 	orr.w	r4, r4, #2
90008b5c:	e9cd 2300 	strd	r2, r3, [sp]
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
90008b60:	f000 fda6 	bl	900096b0 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
90008b64:	e9dd 2300 	ldrd	r2, r3, [sp]
90008b68:	b160      	cbz	r0, 90008b84 <follow_path+0x154>
90008b6a:	4948      	ldr	r1, [pc, #288]	; (90008c8c <follow_path+0x25c>)
90008b6c:	4408      	add	r0, r1
90008b6e:	f810 0c73 	ldrb.w	r0, [r0, #-115]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
90008b72:	b138      	cbz	r0, 90008b84 <follow_path+0x154>
	while (*str && *str != chr) str++;
90008b74:	f8df c118 	ldr.w	ip, [pc, #280]	; 90008c90 <follow_path+0x260>
90008b78:	f81c 1b01 	ldrb.w	r1, [ip], #1
90008b7c:	2900      	cmp	r1, #0
90008b7e:	d076      	beq.n	90008c6e <follow_path+0x23e>
90008b80:	4281      	cmp	r1, r0
90008b82:	d1f9      	bne.n	90008b78 <follow_path+0x148>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
90008b84:	f044 0403 	orr.w	r4, r4, #3
90008b88:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
90008b8a:	18f1      	adds	r1, r6, r3
90008b8c:	3301      	adds	r3, #1
90008b8e:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
90008b92:	e068      	b.n	90008c66 <follow_path+0x236>
					b |= 2;
90008b94:	f045 0502 	orr.w	r5, r5, #2
90008b98:	e7f7      	b.n	90008b8a <follow_path+0x15a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
90008b9a:	075a      	lsls	r2, r3, #29
90008b9c:	d4ca      	bmi.n	90008b34 <follow_path+0x104>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
90008b9e:	79b3      	ldrb	r3, [r6, #6]
90008ba0:	06db      	lsls	r3, r3, #27
90008ba2:	d562      	bpl.n	90008c6a <follow_path+0x23a>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
90008ba4:	6973      	ldr	r3, [r6, #20]
90008ba6:	f10b 0134 	add.w	r1, fp, #52	; 0x34
90008baa:	f89b 0000 	ldrb.w	r0, [fp]
90008bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008bb2:	4419      	add	r1, r3
90008bb4:	f7ff fb2f 	bl	90008216 <ld_clust.isra.0>
90008bb8:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
90008bba:	6833      	ldr	r3, [r6, #0]
90008bbc:	f109 32ff 	add.w	r2, r9, #4294967295
90008bc0:	2700      	movs	r7, #0
90008bc2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
90008bc6:	f1aa 0802 	sub.w	r8, sl, #2
90008bca:	4643      	mov	r3, r8
		w = p[si++];					/* Get a character */
90008bcc:	f812 4f01 	ldrb.w	r4, [r2, #1]!
90008bd0:	1c7d      	adds	r5, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
90008bd2:	2c1f      	cmp	r4, #31
90008bd4:	d90c      	bls.n	90008bf0 <follow_path+0x1c0>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
90008bd6:	2c2f      	cmp	r4, #47	; 0x2f
90008bd8:	d002      	beq.n	90008be0 <follow_path+0x1b0>
90008bda:	2c5c      	cmp	r4, #92	; 0x5c
90008bdc:	f47f af46 	bne.w	90008a6c <follow_path+0x3c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
90008be0:	f819 3005 	ldrb.w	r3, [r9, r5]
90008be4:	2b2f      	cmp	r3, #47	; 0x2f
90008be6:	f43f af3f 	beq.w	90008a68 <follow_path+0x38>
90008bea:	2b5c      	cmp	r3, #92	; 0x5c
90008bec:	f43f af3c 	beq.w	90008a68 <follow_path+0x38>
	*path = &p[si];						/* Return pointer to the next segment */
90008bf0:	44a9      	add	r9, r5
	while (di) {						/* Snip off trailing spaces and dots if exist */
90008bf2:	2f00      	cmp	r7, #0
90008bf4:	f47f af54 	bne.w	90008aa0 <follow_path+0x70>
	lfn[di] = 0;						/* LFN is created */
90008bf8:	2300      	movs	r3, #0
90008bfa:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
90008bfe:	2f00      	cmp	r7, #0
90008c00:	f43f af48 	beq.w	90008a94 <follow_path+0x64>
	mem_set(dp->fn, ' ', 11);
90008c04:	2120      	movs	r1, #32
90008c06:	220b      	movs	r2, #11
90008c08:	f106 0024 	add.w	r0, r6, #36	; 0x24
90008c0c:	f7fe fef4 	bl	900079f8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
90008c10:	4619      	mov	r1, r3
90008c12:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
90008c16:	2b20      	cmp	r3, #32
90008c18:	f43f af4b 	beq.w	90008ab2 <follow_path+0x82>
90008c1c:	2b2e      	cmp	r3, #46	; 0x2e
90008c1e:	f43f af48 	beq.w	90008ab2 <follow_path+0x82>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
90008c22:	2c1f      	cmp	r4, #31
90008c24:	bf8c      	ite	hi
90008c26:	2400      	movhi	r4, #0
90008c28:	2401      	movls	r4, #1
90008c2a:	00a4      	lsls	r4, r4, #2
	if (si) cf |= NS_LOSS | NS_LFN;
90008c2c:	b109      	cbz	r1, 90008c32 <follow_path+0x202>
90008c2e:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
90008c32:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
90008c36:	2b2e      	cmp	r3, #46	; 0x2e
90008c38:	d001      	beq.n	90008c3e <follow_path+0x20e>
90008c3a:	3f01      	subs	r7, #1
90008c3c:	d1f9      	bne.n	90008c32 <follow_path+0x202>
		dp->fn[i++] = (BYTE)w;
90008c3e:	2300      	movs	r3, #0
90008c40:	f04f 0808 	mov.w	r8, #8
90008c44:	461d      	mov	r5, r3
		w = lfn[si++];					/* Get an LFN character */
90008c46:	f83a 0011 	ldrh.w	r0, [sl, r1, lsl #1]
90008c4a:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
90008c4c:	2800      	cmp	r0, #0
90008c4e:	f43f af41 	beq.w	90008ad4 <follow_path+0xa4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
90008c52:	2820      	cmp	r0, #32
90008c54:	d005      	beq.n	90008c62 <follow_path+0x232>
90008c56:	282e      	cmp	r0, #46	; 0x2e
90008c58:	f47f af2d 	bne.w	90008ab6 <follow_path+0x86>
90008c5c:	42ba      	cmp	r2, r7
90008c5e:	f43f af2e 	beq.w	90008abe <follow_path+0x8e>
			cf |= NS_LOSS | NS_LFN; continue;
90008c62:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
90008c66:	4611      	mov	r1, r2
90008c68:	e7ed      	b.n	90008c46 <follow_path+0x216>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
90008c6a:	2005      	movs	r0, #5
	return res;
90008c6c:	e762      	b.n	90008b34 <follow_path+0x104>
				if (IsUpper(w)) {		/* ASCII large capital */
90008c6e:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
90008c72:	2919      	cmp	r1, #25
90008c74:	d98e      	bls.n	90008b94 <follow_path+0x164>
					if (IsLower(w)) {	/* ASCII small capital */
90008c76:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
90008c7a:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
90008c7c:	bf9e      	ittt	ls
90008c7e:	3820      	subls	r0, #32
90008c80:	f045 0501 	orrls.w	r5, r5, #1
90008c84:	b280      	uxthls	r0, r0
90008c86:	e780      	b.n	90008b8a <follow_path+0x15a>
90008c88:	90010d7a 	.word	0x90010d7a
90008c8c:	900103a4 	.word	0x900103a4
90008c90:	90010d83 	.word	0x90010d83

90008c94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
90008c94:	b530      	push	{r4, r5, lr}
90008c96:	b085      	sub	sp, #20
90008c98:	4614      	mov	r4, r2
90008c9a:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
90008c9e:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
90008ca0:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
90008ca2:	f7fe ff8e 	bl	90007bc2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
90008ca6:	2800      	cmp	r0, #0
90008ca8:	db19      	blt.n	90008cde <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
90008caa:	490f      	ldr	r1, [pc, #60]	; (90008ce8 <f_mount+0x54>)
90008cac:	0085      	lsls	r5, r0, #2
90008cae:	eb01 0080 	add.w	r0, r1, r0, lsl #2
90008cb2:	6a00      	ldr	r0, [r0, #32]

	if (cfs) {
90008cb4:	b118      	cbz	r0, 90008cbe <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
90008cb6:	f7fe ff3f 	bl	90007b38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
90008cba:	2300      	movs	r3, #0
90008cbc:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
90008cbe:	9801      	ldr	r0, [sp, #4]
90008cc0:	b108      	cbz	r0, 90008cc6 <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
90008cc2:	2300      	movs	r3, #0
90008cc4:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
90008cc6:	4429      	add	r1, r5
90008cc8:	6208      	str	r0, [r1, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
90008cca:	b130      	cbz	r0, 90008cda <f_mount+0x46>
90008ccc:	2c01      	cmp	r4, #1
90008cce:	d108      	bne.n	90008ce2 <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
90008cd0:	2200      	movs	r2, #0
90008cd2:	a901      	add	r1, sp, #4
90008cd4:	4668      	mov	r0, sp
90008cd6:	f7ff f8a9 	bl	90007e2c <find_volume>
	LEAVE_FF(fs, res);
}
90008cda:	b005      	add	sp, #20
90008cdc:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
90008cde:	200b      	movs	r0, #11
90008ce0:	e7fb      	b.n	90008cda <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
90008ce2:	2000      	movs	r0, #0
90008ce4:	e7f9      	b.n	90008cda <f_mount+0x46>
90008ce6:	bf00      	nop
90008ce8:	20000754 	.word	0x20000754

90008cec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
90008cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90008cf0:	b090      	sub	sp, #64	; 0x40
90008cf2:	4691      	mov	r9, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
90008cf4:	4605      	mov	r5, r0
{
90008cf6:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
90008cf8:	2800      	cmp	r0, #0
90008cfa:	f000 8100 	beq.w	90008efe <f_open+0x212>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
90008cfe:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
90008d02:	a902      	add	r1, sp, #8
90008d04:	a801      	add	r0, sp, #4
90008d06:	463a      	mov	r2, r7
90008d08:	f7ff f890 	bl	90007e2c <find_volume>
	if (res == FR_OK) {
90008d0c:	2800      	cmp	r0, #0
90008d0e:	f040 80f4 	bne.w	90008efa <f_open+0x20e>
		dj.obj.fs = fs;
90008d12:	9e02      	ldr	r6, [sp, #8]
		INIT_NAMBUF(fs);
90008d14:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
90008d18:	9603      	str	r6, [sp, #12]
		INIT_NAMBUF(fs);
90008d1a:	f000 fcc4 	bl	900096a6 <ff_memalloc>
90008d1e:	4680      	mov	r8, r0
90008d20:	2800      	cmp	r0, #0
90008d22:	f000 80ee 	beq.w	90008f02 <f_open+0x216>
90008d26:	60f0      	str	r0, [r6, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
90008d28:	a803      	add	r0, sp, #12
90008d2a:	9901      	ldr	r1, [sp, #4]
90008d2c:	f7ff fe80 	bl	90008a30 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
90008d30:	4604      	mov	r4, r0
90008d32:	b960      	cbnz	r0, 90008d4e <f_open+0x62>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
90008d34:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
90008d38:	2b00      	cmp	r3, #0
90008d3a:	db5d      	blt.n	90008df8 <f_open+0x10c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
90008d3c:	f017 0f3e 	tst.w	r7, #62	; 0x3e
90008d40:	a803      	add	r0, sp, #12
90008d42:	bf14      	ite	ne
90008d44:	2101      	movne	r1, #1
90008d46:	2100      	moveq	r1, #0
90008d48:	f7fe fe5c 	bl	90007a04 <chk_lock>
90008d4c:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
90008d4e:	f019 0f1c 	tst.w	r9, #28
90008d52:	d072      	beq.n	90008e3a <f_open+0x14e>
			if (res != FR_OK) {					/* No file, create new */
90008d54:	2c00      	cmp	r4, #0
90008d56:	d051      	beq.n	90008dfc <f_open+0x110>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
90008d58:	2c04      	cmp	r4, #4
90008d5a:	d143      	bne.n	90008de4 <f_open+0xf8>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
90008d5c:	4b6a      	ldr	r3, [pc, #424]	; (90008f08 <f_open+0x21c>)
90008d5e:	681a      	ldr	r2, [r3, #0]
90008d60:	b11a      	cbz	r2, 90008d6a <f_open+0x7e>
90008d62:	691b      	ldr	r3, [r3, #16]
90008d64:	2b00      	cmp	r3, #0
90008d66:	f040 80c2 	bne.w	90008eee <f_open+0x202>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
90008d6a:	a803      	add	r0, sp, #12
90008d6c:	f7ff fca8 	bl	900086c0 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
90008d70:	4604      	mov	r4, r0
90008d72:	2800      	cmp	r0, #0
90008d74:	d136      	bne.n	90008de4 <f_open+0xf8>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
90008d76:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
90008d7a:	f7fe fe31 	bl	900079e0 <get_fattime>
90008d7e:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
90008d80:	9000      	str	r0, [sp, #0]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
90008d82:	2220      	movs	r2, #32
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
90008d84:	980b      	ldr	r0, [sp, #44]	; 0x2c
90008d86:	300e      	adds	r0, #14
90008d88:	f7fe fe2e 	bl	900079e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
90008d8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
90008d8e:	9900      	ldr	r1, [sp, #0]
90008d90:	3016      	adds	r0, #22
90008d92:	f7fe fe29 	bl	900079e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
90008d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90008d98:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
90008d9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
90008d9c:	7830      	ldrb	r0, [r6, #0]
90008d9e:	f7ff fa3a 	bl	90008216 <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
90008da2:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
90008da4:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
90008da6:	4630      	mov	r0, r6
90008da8:	f7fe fef0 	bl	90007b8c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
90008dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
90008dae:	2200      	movs	r2, #0
90008db0:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
90008db2:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
90008db4:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
90008db6:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
90008db8:	2301      	movs	r3, #1
90008dba:	70f3      	strb	r3, [r6, #3]

					if (cl) {							/* Remove the cluster chain if exist */
90008dbc:	f1b9 0f00 	cmp.w	r9, #0
90008dc0:	d027      	beq.n	90008e12 <f_open+0x126>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
90008dc2:	4649      	mov	r1, r9
90008dc4:	a803      	add	r0, sp, #12
						dw = fs->winsect;
90008dc6:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
90008dca:	f7ff fa82 	bl	900082d2 <remove_chain>
						if (res == FR_OK) {
90008dce:	4604      	mov	r4, r0
90008dd0:	b940      	cbnz	r0, 90008de4 <f_open+0xf8>
							res = move_window(fs, dw);
90008dd2:	4651      	mov	r1, sl
90008dd4:	4630      	mov	r0, r6
90008dd6:	f7fe ffd3 	bl	90007d80 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
90008dda:	f109 31ff 	add.w	r1, r9, #4294967295
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
90008dde:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
90008de0:	6131      	str	r1, [r6, #16]
		if (res == FR_OK) {
90008de2:	b1b0      	cbz	r0, 90008e12 <f_open+0x126>
				}
			}
#endif
		}

		FREE_NAMBUF();
90008de4:	4640      	mov	r0, r8
90008de6:	f000 fc60 	bl	900096aa <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
90008dea:	b10c      	cbz	r4, 90008df0 <f_open+0x104>
90008dec:	2300      	movs	r3, #0
90008dee:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
90008df0:	4620      	mov	r0, r4
90008df2:	b010      	add	sp, #64	; 0x40
90008df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
90008df8:	2406      	movs	r4, #6
90008dfa:	e7a8      	b.n	90008d4e <f_open+0x62>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
90008dfc:	f89d 3012 	ldrb.w	r3, [sp, #18]
90008e00:	f013 0f11 	tst.w	r3, #17
90008e04:	d124      	bne.n	90008e50 <f_open+0x164>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008e06:	f019 0f04 	tst.w	r9, #4
90008e0a:	d172      	bne.n	90008ef2 <f_open+0x206>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
90008e0c:	f019 0f08 	tst.w	r9, #8
90008e10:	d1b3      	bne.n	90008d7a <f_open+0x8e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
90008e12:	0738      	lsls	r0, r7, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
90008e14:	6b33      	ldr	r3, [r6, #48]	; 0x30
			fp->dir_ptr = dj.dir;
90008e16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
90008e18:	a803      	add	r0, sp, #12
				mode |= FA_MODIFIED;
90008e1a:	bf48      	it	mi
90008e1c:	f047 0740 	orrmi.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
90008e20:	626b      	str	r3, [r5, #36]	; 0x24
			fp->dir_ptr = dj.dir;
90008e22:	62ac      	str	r4, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
90008e24:	f017 0ffe 	tst.w	r7, #254	; 0xfe
90008e28:	bf14      	ite	ne
90008e2a:	2101      	movne	r1, #1
90008e2c:	2100      	moveq	r1, #0
90008e2e:	f7fe fe23 	bl	90007a78 <inc_lock>
90008e32:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
90008e34:	b970      	cbnz	r0, 90008e54 <f_open+0x168>
90008e36:	2402      	movs	r4, #2
90008e38:	e7d4      	b.n	90008de4 <f_open+0xf8>
			if (res == FR_OK) {					/* Following succeeded */
90008e3a:	2c00      	cmp	r4, #0
90008e3c:	d1d2      	bne.n	90008de4 <f_open+0xf8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
90008e3e:	f89d 3012 	ldrb.w	r3, [sp, #18]
90008e42:	06da      	lsls	r2, r3, #27
90008e44:	d457      	bmi.n	90008ef6 <f_open+0x20a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
90008e46:	f019 0f02 	tst.w	r9, #2
90008e4a:	d0e2      	beq.n	90008e12 <f_open+0x126>
90008e4c:	07dc      	lsls	r4, r3, #31
90008e4e:	d5e0      	bpl.n	90008e12 <f_open+0x126>
					res = FR_DENIED;
90008e50:	2407      	movs	r4, #7
90008e52:	e7c7      	b.n	90008de4 <f_open+0xf8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
90008e54:	7830      	ldrb	r0, [r6, #0]
90008e56:	4621      	mov	r1, r4
90008e58:	f7ff f9dd 	bl	90008216 <ld_clust.isra.0>
90008e5c:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
90008e5e:	f104 001c 	add.w	r0, r4, #28
			fp->cltbl = 0;			/* Disable fast seek mode */
90008e62:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
90008e64:	f7fe fdbe 	bl	900079e4 <ld_dword>
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008e68:	f105 0930 	add.w	r9, r5, #48	; 0x30
			fp->obj.id = fs->id;
90008e6c:	88f3      	ldrh	r3, [r6, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
90008e72:	60e8      	str	r0, [r5, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008e74:	4648      	mov	r0, r9
			fp->cltbl = 0;			/* Disable fast seek mode */
90008e76:	62e9      	str	r1, [r5, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
90008e78:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
90008e7a:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
90008e7c:	752f      	strb	r7, [r5, #20]
			fp->err = 0;			/* Clear error flag */
90008e7e:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
90008e80:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
90008e82:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
90008e84:	f7fe fdb8 	bl	900079f8 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
90008e88:	06ba      	lsls	r2, r7, #26
90008e8a:	d401      	bmi.n	90008e90 <f_open+0x1a4>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008e8c:	2400      	movs	r4, #0
90008e8e:	e7a9      	b.n	90008de4 <f_open+0xf8>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
90008e90:	68ef      	ldr	r7, [r5, #12]
90008e92:	2f00      	cmp	r7, #0
90008e94:	d0fa      	beq.n	90008e8c <f_open+0x1a0>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
90008e96:	8974      	ldrh	r4, [r6, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
90008e98:	68a9      	ldr	r1, [r5, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
90008e9a:	0264      	lsls	r4, r4, #9
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
90008e9c:	61af      	str	r7, [r5, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
90008e9e:	42bc      	cmp	r4, r7
90008ea0:	d318      	bcc.n	90008ed4 <f_open+0x1e8>
90008ea2:	2400      	movs	r4, #0
				fp->clust = clst;
90008ea4:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
90008ea6:	2c00      	cmp	r4, #0
90008ea8:	d19c      	bne.n	90008de4 <f_open+0xf8>
90008eaa:	f3c7 0308 	ubfx	r3, r7, #0, #9
90008eae:	2b00      	cmp	r3, #0
90008eb0:	d0ec      	beq.n	90008e8c <f_open+0x1a0>
					if ((sc = clust2sect(fs, clst)) == 0) {
90008eb2:	4630      	mov	r0, r6
90008eb4:	f7fe fe4e 	bl	90007b54 <clust2sect>
90008eb8:	2800      	cmp	r0, #0
90008eba:	d0bc      	beq.n	90008e36 <f_open+0x14a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
90008ebc:	eb00 2257 	add.w	r2, r0, r7, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
90008ec0:	2301      	movs	r3, #1
90008ec2:	4649      	mov	r1, r9
						fp->sect = sc + (DWORD)(ofs / SS(fs));
90008ec4:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
90008ec6:	7870      	ldrb	r0, [r6, #1]
90008ec8:	f7fe fd60 	bl	9000798c <disk_read>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008ecc:	1e04      	subs	r4, r0, #0
90008ece:	bf18      	it	ne
90008ed0:	2401      	movne	r4, #1
90008ed2:	e787      	b.n	90008de4 <f_open+0xf8>
					clst = get_fat(&fp->obj, clst);
90008ed4:	6828      	ldr	r0, [r5, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
90008ed6:	1b3f      	subs	r7, r7, r4
					clst = get_fat(&fp->obj, clst);
90008ed8:	f7ff f9a5 	bl	90008226 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
90008edc:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
90008ede:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
90008ee0:	d903      	bls.n	90008eea <f_open+0x1fe>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
90008ee2:	1c43      	adds	r3, r0, #1
90008ee4:	d1db      	bne.n	90008e9e <f_open+0x1b2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
90008ee6:	2401      	movs	r4, #1
90008ee8:	e7dc      	b.n	90008ea4 <f_open+0x1b8>
					if (clst <= 1) res = FR_INT_ERR;
90008eea:	2402      	movs	r4, #2
90008eec:	e7da      	b.n	90008ea4 <f_open+0x1b8>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
90008eee:	2412      	movs	r4, #18
90008ef0:	e778      	b.n	90008de4 <f_open+0xf8>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
90008ef2:	2408      	movs	r4, #8
90008ef4:	e776      	b.n	90008de4 <f_open+0xf8>
					res = FR_NO_FILE;
90008ef6:	2404      	movs	r4, #4
90008ef8:	e774      	b.n	90008de4 <f_open+0xf8>
90008efa:	4604      	mov	r4, r0
90008efc:	e776      	b.n	90008dec <f_open+0x100>
	if (!fp) return FR_INVALID_OBJECT;
90008efe:	2409      	movs	r4, #9
90008f00:	e776      	b.n	90008df0 <f_open+0x104>
		INIT_NAMBUF(fs);
90008f02:	2411      	movs	r4, #17
90008f04:	e774      	b.n	90008df0 <f_open+0x104>
90008f06:	bf00      	nop
90008f08:	20000754 	.word	0x20000754

90008f0c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
90008f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008f10:	b087      	sub	sp, #28
90008f12:	4617      	mov	r7, r2
90008f14:	4689      	mov	r9, r1
90008f16:	4604      	mov	r4, r0
90008f18:	9301      	str	r3, [sp, #4]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
90008f1a:	2300      	movs	r3, #0
90008f1c:	9a01      	ldr	r2, [sp, #4]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
90008f1e:	a905      	add	r1, sp, #20
	*br = 0;	/* Clear read byte counter */
90008f20:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
90008f22:	f7fe fe6a 	bl	90007bfa <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
90008f26:	4605      	mov	r5, r0
90008f28:	bb20      	cbnz	r0, 90008f74 <f_read+0x68>
90008f2a:	7d65      	ldrb	r5, [r4, #21]
90008f2c:	bb15      	cbnz	r5, 90008f74 <f_read+0x68>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
90008f2e:	7d23      	ldrb	r3, [r4, #20]
90008f30:	f013 0301 	ands.w	r3, r3, #1
90008f34:	9302      	str	r3, [sp, #8]
90008f36:	f000 8098 	beq.w	9000906a <f_read+0x15e>
	remain = fp->obj.objsize - fp->fptr;
90008f3a:	68e6      	ldr	r6, [r4, #12]
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
90008f3c:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	remain = fp->obj.objsize - fp->fptr;
90008f40:	69a3      	ldr	r3, [r4, #24]
90008f42:	1af6      	subs	r6, r6, r3
90008f44:	42be      	cmp	r6, r7
90008f46:	bf28      	it	cs
90008f48:	463e      	movcs	r6, r7
	for ( ;  btr;								/* Repeat until all data read */
90008f4a:	b19e      	cbz	r6, 90008f74 <f_read+0x68>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
90008f4c:	69a1      	ldr	r1, [r4, #24]
90008f4e:	f3c1 0308 	ubfx	r3, r1, #0, #9
90008f52:	2b00      	cmp	r3, #0
90008f54:	d17b      	bne.n	9000904e <f_read+0x142>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
90008f56:	f8dd a014 	ldr.w	sl, [sp, #20]
90008f5a:	f8ba 800a 	ldrh.w	r8, [sl, #10]
90008f5e:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
90008f62:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
90008f66:	d11b      	bne.n	90008fa0 <f_read+0x94>
				if (fp->fptr == 0) {			/* On the top of the file? */
90008f68:	b941      	cbnz	r1, 90008f7c <f_read+0x70>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
90008f6a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
90008f6c:	2801      	cmp	r0, #1
90008f6e:	d810      	bhi.n	90008f92 <f_read+0x86>
90008f70:	2502      	movs	r5, #2
90008f72:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
90008f74:	4628      	mov	r0, r5
90008f76:	b007      	add	sp, #28
90008f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
90008f7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008f7e:	b11b      	cbz	r3, 90008f88 <f_read+0x7c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
90008f80:	4620      	mov	r0, r4
90008f82:	f7fe fdf2 	bl	90007b6a <clmt_clust>
90008f86:	e7f1      	b.n	90008f6c <f_read+0x60>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
90008f88:	69e1      	ldr	r1, [r4, #28]
90008f8a:	6820      	ldr	r0, [r4, #0]
90008f8c:	f7ff f94b 	bl	90008226 <get_fat.isra.0>
90008f90:	e7ec      	b.n	90008f6c <f_read+0x60>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90008f92:	1c43      	adds	r3, r0, #1
90008f94:	d103      	bne.n	90008f9e <f_read+0x92>
90008f96:	2301      	movs	r3, #1
90008f98:	9d02      	ldr	r5, [sp, #8]
90008f9a:	7563      	strb	r3, [r4, #21]
90008f9c:	e7ea      	b.n	90008f74 <f_read+0x68>
				fp->clust = clst;				/* Update current cluster */
90008f9e:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
90008fa0:	69e1      	ldr	r1, [r4, #28]
90008fa2:	4650      	mov	r0, sl
90008fa4:	f7fe fdd6 	bl	90007b54 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
90008fa8:	2800      	cmp	r0, #0
90008faa:	d0e1      	beq.n	90008f70 <f_read+0x64>
			if (cc) {							/* Read maximum contiguous sectors directly */
90008fac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
90008fb0:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
90008fb4:	d32e      	bcc.n	90009014 <f_read+0x108>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90008fb6:	f8ba 200a 	ldrh.w	r2, [sl, #10]
90008fba:	eb08 2156 	add.w	r1, r8, r6, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
90008fbe:	0a73      	lsrs	r3, r6, #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008fc0:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90008fc4:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008fc6:	4649      	mov	r1, r9
					cc = fs->csize - csect;
90008fc8:	bf88      	it	hi
90008fca:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90008fce:	463a      	mov	r2, r7
90008fd0:	9303      	str	r3, [sp, #12]
90008fd2:	f7fe fcdb 	bl	9000798c <disk_read>
90008fd6:	2800      	cmp	r0, #0
90008fd8:	d1dd      	bne.n	90008f96 <f_read+0x8a>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
90008fda:	f994 2014 	ldrsb.w	r2, [r4, #20]
90008fde:	9b03      	ldr	r3, [sp, #12]
90008fe0:	2a00      	cmp	r2, #0
90008fe2:	da0b      	bge.n	90008ffc <f_read+0xf0>
90008fe4:	6a20      	ldr	r0, [r4, #32]
90008fe6:	1bc0      	subs	r0, r0, r7
90008fe8:	4298      	cmp	r0, r3
90008fea:	d207      	bcs.n	90008ffc <f_read+0xf0>
	if (cnt) {
90008fec:	f44f 7200 	mov.w	r2, #512	; 0x200
90008ff0:	4659      	mov	r1, fp
90008ff2:	eb09 2040 	add.w	r0, r9, r0, lsl #9
90008ff6:	f7fe fe8e 	bl	90007d16 <mem_cpy.part.0>
90008ffa:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
90008ffc:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
90008ffe:	69a3      	ldr	r3, [r4, #24]
90009000:	44b9      	add	r9, r7
90009002:	9a01      	ldr	r2, [sp, #4]
90009004:	1bf6      	subs	r6, r6, r7
90009006:	443b      	add	r3, r7
90009008:	61a3      	str	r3, [r4, #24]
9000900a:	9b01      	ldr	r3, [sp, #4]
9000900c:	681b      	ldr	r3, [r3, #0]
9000900e:	443b      	add	r3, r7
90009010:	6013      	str	r3, [r2, #0]
90009012:	e79a      	b.n	90008f4a <f_read+0x3e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
90009014:	6a22      	ldr	r2, [r4, #32]
90009016:	42ba      	cmp	r2, r7
90009018:	d018      	beq.n	9000904c <f_read+0x140>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
9000901a:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
9000901e:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
90009022:	2b00      	cmp	r3, #0
90009024:	da09      	bge.n	9000903a <f_read+0x12e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90009026:	2301      	movs	r3, #1
90009028:	4659      	mov	r1, fp
9000902a:	f7fe fcbd 	bl	900079a8 <disk_write>
9000902e:	2800      	cmp	r0, #0
90009030:	d1b1      	bne.n	90008f96 <f_read+0x8a>
					fp->flag &= (BYTE)~FA_DIRTY;
90009032:	7d23      	ldrb	r3, [r4, #20]
90009034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90009038:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
9000903a:	2301      	movs	r3, #1
9000903c:	463a      	mov	r2, r7
9000903e:	4659      	mov	r1, fp
90009040:	f89a 0001 	ldrb.w	r0, [sl, #1]
90009044:	f7fe fca2 	bl	9000798c <disk_read>
90009048:	2800      	cmp	r0, #0
9000904a:	d1a4      	bne.n	90008f96 <f_read+0x8a>
			fp->sect = sect;
9000904c:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
9000904e:	69a1      	ldr	r1, [r4, #24]
90009050:	4648      	mov	r0, r9
90009052:	f3c1 0108 	ubfx	r1, r1, #0, #9
90009056:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
9000905a:	4459      	add	r1, fp
9000905c:	42b7      	cmp	r7, r6
9000905e:	bf28      	it	cs
90009060:	4637      	movcs	r7, r6
	if (cnt) {
90009062:	463a      	mov	r2, r7
90009064:	f7fe fe57 	bl	90007d16 <mem_cpy.part.0>
}
90009068:	e7c9      	b.n	90008ffe <f_read+0xf2>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
9000906a:	2507      	movs	r5, #7
9000906c:	e782      	b.n	90008f74 <f_read+0x68>

9000906e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
9000906e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90009072:	469a      	mov	sl, r3
90009074:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
90009076:	2300      	movs	r3, #0
{
90009078:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
9000907a:	a903      	add	r1, sp, #12
{
9000907c:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
9000907e:	f8ca 3000 	str.w	r3, [sl]
{
90009082:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
90009084:	f7fe fdb9 	bl	90007bfa <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
90009088:	4605      	mov	r5, r0
9000908a:	bb60      	cbnz	r0, 900090e6 <f_write+0x78>
9000908c:	7d65      	ldrb	r5, [r4, #21]
9000908e:	bb55      	cbnz	r5, 900090e6 <f_write+0x78>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
90009090:	7d23      	ldrb	r3, [r4, #20]
90009092:	079a      	lsls	r2, r3, #30
90009094:	f140 80af 	bpl.w	900091f6 <f_write+0x188>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
90009098:	69a3      	ldr	r3, [r4, #24]
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
9000909a:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
9000909e:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
900090a0:	bf28      	it	cs
900090a2:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
900090a4:	b1de      	cbz	r6, 900090de <f_write+0x70>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
900090a6:	69a1      	ldr	r1, [r4, #24]
900090a8:	f3c1 0308 	ubfx	r3, r1, #0, #9
900090ac:	2b00      	cmp	r3, #0
900090ae:	f040 8090 	bne.w	900091d2 <f_write+0x164>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
900090b2:	f8dd 900c 	ldr.w	r9, [sp, #12]
900090b6:	f8b9 700a 	ldrh.w	r7, [r9, #10]
900090ba:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
900090bc:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
900090c0:	d124      	bne.n	9000910c <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
900090c2:	b931      	cbnz	r1, 900090d2 <f_write+0x64>
					clst = fp->obj.sclust;	/* Follow from the origin */
900090c4:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
900090c6:	b9a0      	cbnz	r0, 900090f2 <f_write+0x84>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
900090c8:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
900090ca:	4620      	mov	r0, r4
900090cc:	f7ff f939 	bl	90008342 <create_chain>
900090d0:	e004      	b.n	900090dc <f_write+0x6e>
					if (fp->cltbl) {
900090d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900090d4:	b15b      	cbz	r3, 900090ee <f_write+0x80>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
900090d6:	4620      	mov	r0, r4
900090d8:	f7fe fd47 	bl	90007b6a <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
900090dc:	b948      	cbnz	r0, 900090f2 <f_write+0x84>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
900090de:	7d23      	ldrb	r3, [r4, #20]
900090e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900090e4:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
900090e6:	4628      	mov	r0, r5
900090e8:	b005      	add	sp, #20
900090ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
900090ee:	69e1      	ldr	r1, [r4, #28]
900090f0:	e7eb      	b.n	900090ca <f_write+0x5c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
900090f2:	2801      	cmp	r0, #1
900090f4:	d102      	bne.n	900090fc <f_write+0x8e>
900090f6:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
900090f8:	7565      	strb	r5, [r4, #21]
900090fa:	e7f4      	b.n	900090e6 <f_write+0x78>
900090fc:	1c43      	adds	r3, r0, #1
900090fe:	d101      	bne.n	90009104 <f_write+0x96>
90009100:	2501      	movs	r5, #1
90009102:	e7f9      	b.n	900090f8 <f_write+0x8a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
90009104:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
90009106:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
90009108:	b903      	cbnz	r3, 9000910c <f_write+0x9e>
9000910a:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
9000910c:	f994 3014 	ldrsb.w	r3, [r4, #20]
90009110:	2b00      	cmp	r3, #0
90009112:	da0c      	bge.n	9000912e <f_write+0xc0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90009114:	2301      	movs	r3, #1
90009116:	6a22      	ldr	r2, [r4, #32]
90009118:	4659      	mov	r1, fp
9000911a:	f899 0001 	ldrb.w	r0, [r9, #1]
9000911e:	f7fe fc43 	bl	900079a8 <disk_write>
90009122:	2800      	cmp	r0, #0
90009124:	d1ec      	bne.n	90009100 <f_write+0x92>
				fp->flag &= (BYTE)~FA_DIRTY;
90009126:	7d23      	ldrb	r3, [r4, #20]
90009128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000912c:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
9000912e:	69e1      	ldr	r1, [r4, #28]
90009130:	4648      	mov	r0, r9
90009132:	f7fe fd0f 	bl	90007b54 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
90009136:	2800      	cmp	r0, #0
90009138:	d0dd      	beq.n	900090f6 <f_write+0x88>
			if (cc) {						/* Write maximum contiguous sectors directly */
9000913a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
9000913e:	eb07 0200 	add.w	r2, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
90009142:	d334      	bcc.n	900091ae <f_write+0x140>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
90009144:	f8b9 100a 	ldrh.w	r1, [r9, #10]
90009148:	eb07 2056 	add.w	r0, r7, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
9000914c:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
9000914e:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90009150:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
90009154:	bf88      	it	hi
90009156:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
90009158:	4641      	mov	r1, r8
9000915a:	e9cd 2300 	strd	r2, r3, [sp]
9000915e:	f7fe fc23 	bl	900079a8 <disk_write>
90009162:	2800      	cmp	r0, #0
90009164:	d1cc      	bne.n	90009100 <f_write+0x92>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
90009166:	6a21      	ldr	r1, [r4, #32]
90009168:	9a00      	ldr	r2, [sp, #0]
9000916a:	9b01      	ldr	r3, [sp, #4]
9000916c:	1a89      	subs	r1, r1, r2
9000916e:	4299      	cmp	r1, r3
90009170:	d20c      	bcs.n	9000918c <f_write+0x11e>
90009172:	f44f 7200 	mov.w	r2, #512	; 0x200
90009176:	eb08 2141 	add.w	r1, r8, r1, lsl #9
9000917a:	4658      	mov	r0, fp
9000917c:	9300      	str	r3, [sp, #0]
	if (cnt) {
9000917e:	f7fe fdca 	bl	90007d16 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
90009182:	7d22      	ldrb	r2, [r4, #20]
90009184:	9b00      	ldr	r3, [sp, #0]
90009186:	f002 027f 	and.w	r2, r2, #127	; 0x7f
9000918a:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
9000918c:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
9000918e:	69a3      	ldr	r3, [r4, #24]
90009190:	44b8      	add	r8, r7
90009192:	68e2      	ldr	r2, [r4, #12]
90009194:	1bf6      	subs	r6, r6, r7
90009196:	443b      	add	r3, r7
90009198:	61a3      	str	r3, [r4, #24]
9000919a:	429a      	cmp	r2, r3
9000919c:	bf2c      	ite	cs
9000919e:	60e2      	strcs	r2, [r4, #12]
900091a0:	60e3      	strcc	r3, [r4, #12]
900091a2:	f8da 3000 	ldr.w	r3, [sl]
900091a6:	443b      	add	r3, r7
900091a8:	f8ca 3000 	str.w	r3, [sl]
900091ac:	e77a      	b.n	900090a4 <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
900091ae:	6a21      	ldr	r1, [r4, #32]
				fp->fptr < fp->obj.objsize &&
900091b0:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
900091b2:	4291      	cmp	r1, r2
900091b4:	d00c      	beq.n	900091d0 <f_write+0x162>
900091b6:	68e1      	ldr	r1, [r4, #12]
900091b8:	4299      	cmp	r1, r3
900091ba:	d909      	bls.n	900091d0 <f_write+0x162>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
900091bc:	2301      	movs	r3, #1
900091be:	4659      	mov	r1, fp
900091c0:	f899 0001 	ldrb.w	r0, [r9, #1]
900091c4:	9200      	str	r2, [sp, #0]
900091c6:	f7fe fbe1 	bl	9000798c <disk_read>
				fp->fptr < fp->obj.objsize &&
900091ca:	9a00      	ldr	r2, [sp, #0]
900091cc:	2800      	cmp	r0, #0
900091ce:	d197      	bne.n	90009100 <f_write+0x92>
			fp->sect = sect;
900091d0:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
900091d2:	69a0      	ldr	r0, [r4, #24]
900091d4:	4641      	mov	r1, r8
900091d6:	f3c0 0008 	ubfx	r0, r0, #0, #9
900091da:	f5c0 7700 	rsb	r7, r0, #512	; 0x200
900091de:	4458      	add	r0, fp
900091e0:	42b7      	cmp	r7, r6
900091e2:	bf28      	it	cs
900091e4:	4637      	movcs	r7, r6
	if (cnt) {
900091e6:	463a      	mov	r2, r7
900091e8:	f7fe fd95 	bl	90007d16 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
900091ec:	7d23      	ldrb	r3, [r4, #20]
900091ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
900091f2:	7523      	strb	r3, [r4, #20]
900091f4:	e7cb      	b.n	9000918e <f_write+0x120>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
900091f6:	2507      	movs	r5, #7
900091f8:	e775      	b.n	900090e6 <f_write+0x78>

900091fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
900091fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
900091fe:	a901      	add	r1, sp, #4
{
90009200:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
90009202:	f7fe fcfa 	bl	90007bfa <validate>
	if (res == FR_OK) {
90009206:	4604      	mov	r4, r0
90009208:	2800      	cmp	r0, #0
9000920a:	d13b      	bne.n	90009284 <f_sync+0x8a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
9000920c:	7d2b      	ldrb	r3, [r5, #20]
9000920e:	f013 0440 	ands.w	r4, r3, #64	; 0x40
90009212:	d037      	beq.n	90009284 <f_sync+0x8a>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
90009214:	061b      	lsls	r3, r3, #24
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
90009216:	9f01      	ldr	r7, [sp, #4]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
90009218:	d50b      	bpl.n	90009232 <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
9000921a:	2301      	movs	r3, #1
9000921c:	6a2a      	ldr	r2, [r5, #32]
9000921e:	f105 0130 	add.w	r1, r5, #48	; 0x30
90009222:	7878      	ldrb	r0, [r7, #1]
90009224:	f7fe fbc0 	bl	900079a8 <disk_write>
90009228:	bb80      	cbnz	r0, 9000928c <f_sync+0x92>
				fp->flag &= (BYTE)~FA_DIRTY;
9000922a:	7d2b      	ldrb	r3, [r5, #20]
9000922c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90009230:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
90009232:	f7fe fbd5 	bl	900079e0 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
90009236:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
90009238:	4680      	mov	r8, r0
				res = move_window(fs, fp->dir_sect);
9000923a:	4638      	mov	r0, r7
9000923c:	f7fe fda0 	bl	90007d80 <move_window>
				if (res == FR_OK) {
90009240:	4604      	mov	r4, r0
90009242:	b9f8      	cbnz	r0, 90009284 <f_sync+0x8a>
					dir = fp->dir_ptr;
90009244:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
90009246:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
90009248:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
9000924a:	f043 0320 	orr.w	r3, r3, #32
9000924e:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
90009250:	68aa      	ldr	r2, [r5, #8]
90009252:	6828      	ldr	r0, [r5, #0]
90009254:	f7fe fc9a 	bl	90007b8c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
90009258:	68e9      	ldr	r1, [r5, #12]
9000925a:	f106 001c 	add.w	r0, r6, #28
9000925e:	f7fe fbc3 	bl	900079e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
90009262:	4641      	mov	r1, r8
90009264:	f106 0016 	add.w	r0, r6, #22
90009268:	f7fe fbbe 	bl	900079e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
9000926c:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
9000926e:	74b4      	strb	r4, [r6, #18]
					res = sync_fs(fs);					/* Restore it to the directory */
90009270:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val;
90009272:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
90009274:	70fb      	strb	r3, [r7, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
90009276:	f7fe ff83 	bl	90008180 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
9000927a:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
9000927c:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
9000927e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
90009282:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
90009284:	4620      	mov	r0, r4
90009286:	b002      	add	sp, #8
90009288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
9000928c:	2401      	movs	r4, #1
9000928e:	e7f9      	b.n	90009284 <f_sync+0x8a>

90009290 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
90009290:	b513      	push	{r0, r1, r4, lr}
90009292:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
90009294:	f7ff ffb1 	bl	900091fa <f_sync>
	if (res == FR_OK)
90009298:	b948      	cbnz	r0, 900092ae <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
9000929a:	a901      	add	r1, sp, #4
9000929c:	4620      	mov	r0, r4
9000929e:	f7fe fcac 	bl	90007bfa <validate>
		if (res == FR_OK) {
900092a2:	b920      	cbnz	r0, 900092ae <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
900092a4:	6920      	ldr	r0, [r4, #16]
900092a6:	f7fe fc29 	bl	90007afc <dec_lock>
			if (res == FR_OK)
900092aa:	b900      	cbnz	r0, 900092ae <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
900092ac:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
900092ae:	b002      	add	sp, #8
900092b0:	bd10      	pop	{r4, pc}

900092b2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
900092b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900092b6:	b085      	sub	sp, #20
900092b8:	460d      	mov	r5, r1
900092ba:	4604      	mov	r4, r0
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
900092bc:	a903      	add	r1, sp, #12
900092be:	f7fe fc9c 	bl	90007bfa <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
900092c2:	4606      	mov	r6, r0
900092c4:	b9e8      	cbnz	r0, 90009302 <f_lseek+0x50>
900092c6:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
900092c8:	b9de      	cbnz	r6, 90009302 <f_lseek+0x50>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
900092ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900092cc:	2b00      	cmp	r3, #0
900092ce:	d07c      	beq.n	900093ca <f_lseek+0x118>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
900092d0:	1c6a      	adds	r2, r5, #1
900092d2:	d139      	bne.n	90009348 <f_lseek+0x96>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
900092d4:	461d      	mov	r5, r3
			cl = fp->obj.sclust;		/* Origin of the chain */
900092d6:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
900092da:	2702      	movs	r7, #2
900092dc:	f855 bb04 	ldr.w	fp, [r5], #4
			if (cl) {
900092e0:	f1b8 0f00 	cmp.w	r8, #0
900092e4:	d028      	beq.n	90009338 <f_lseek+0x86>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
900092e6:	4640      	mov	r0, r8
900092e8:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
900092ec:	4601      	mov	r1, r0
900092ee:	4681      	mov	r9, r0
900092f0:	6820      	ldr	r0, [r4, #0]
						pcl = cl; ncl++;
900092f2:	f10a 0a01 	add.w	sl, sl, #1
						cl = get_fat(&fp->obj, cl);
900092f6:	f7fe ff96 	bl	90008226 <get_fat.isra.0>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
900092fa:	2801      	cmp	r0, #1
900092fc:	d807      	bhi.n	9000930e <f_lseek+0x5c>
900092fe:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
90009300:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
90009302:	4630      	mov	r0, r6
90009304:	b005      	add	sp, #20
90009306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000930a:	4680      	mov	r8, r0
9000930c:	e7eb      	b.n	900092e6 <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
9000930e:	1c43      	adds	r3, r0, #1
90009310:	d101      	bne.n	90009316 <f_lseek+0x64>
90009312:	2601      	movs	r6, #1
90009314:	e7f4      	b.n	90009300 <f_lseek+0x4e>
					} while (cl == pcl + 1);
90009316:	f109 0901 	add.w	r9, r9, #1
9000931a:	4581      	cmp	r9, r0
9000931c:	d0e6      	beq.n	900092ec <f_lseek+0x3a>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
9000931e:	3702      	adds	r7, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
90009320:	45bb      	cmp	fp, r7
						*tbl++ = ncl; *tbl++ = tcl;
90009322:	bf21      	itttt	cs
90009324:	462b      	movcs	r3, r5
90009326:	f843 ab08 	strcs.w	sl, [r3], #8
9000932a:	f8c5 8004 	strcs.w	r8, [r5, #4]
9000932e:	461d      	movcs	r5, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
90009330:	9b03      	ldr	r3, [sp, #12]
90009332:	699b      	ldr	r3, [r3, #24]
90009334:	4283      	cmp	r3, r0
90009336:	d8e8      	bhi.n	9000930a <f_lseek+0x58>
			*fp->cltbl = ulen;	/* Number of items used */
90009338:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
9000933a:	455f      	cmp	r7, fp
			*fp->cltbl = ulen;	/* Number of items used */
9000933c:	601f      	str	r7, [r3, #0]
			if (ulen <= tlen) {
9000933e:	f200 80d3 	bhi.w	900094e8 <f_lseek+0x236>
				*tbl = 0;		/* Terminate table */
90009342:	2300      	movs	r3, #0
90009344:	602b      	str	r3, [r5, #0]
90009346:	e7dc      	b.n	90009302 <f_lseek+0x50>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
90009348:	68e7      	ldr	r7, [r4, #12]
9000934a:	42af      	cmp	r7, r5
9000934c:	bf28      	it	cs
9000934e:	462f      	movcs	r7, r5
			fp->fptr = ofs;				/* Set file pointer */
90009350:	61a7      	str	r7, [r4, #24]
			if (ofs) {
90009352:	2f00      	cmp	r7, #0
90009354:	d0d5      	beq.n	90009302 <f_lseek+0x50>
				fp->clust = clmt_clust(fp, ofs - 1);
90009356:	f107 39ff 	add.w	r9, r7, #4294967295
9000935a:	4620      	mov	r0, r4
9000935c:	4649      	mov	r1, r9
9000935e:	f7fe fc04 	bl	90007b6a <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
90009362:	f8dd 800c 	ldr.w	r8, [sp, #12]
				fp->clust = clmt_clust(fp, ofs - 1);
90009366:	4601      	mov	r1, r0
90009368:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
9000936a:	4640      	mov	r0, r8
9000936c:	f7fe fbf2 	bl	90007b54 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
90009370:	2800      	cmp	r0, #0
90009372:	d0c4      	beq.n	900092fe <f_lseek+0x4c>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90009374:	f3c7 0708 	ubfx	r7, r7, #0, #9
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
90009378:	f8b8 500a 	ldrh.w	r5, [r8, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
9000937c:	2f00      	cmp	r7, #0
9000937e:	d0c0      	beq.n	90009302 <f_lseek+0x50>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
90009380:	3d01      	subs	r5, #1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
90009382:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
90009384:	ea05 2559 	and.w	r5, r5, r9, lsr #9
90009388:	4405      	add	r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
9000938a:	42aa      	cmp	r2, r5
9000938c:	d0b9      	beq.n	90009302 <f_lseek+0x50>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
9000938e:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90009392:	f104 0130 	add.w	r1, r4, #48	; 0x30
90009396:	f898 0001 	ldrb.w	r0, [r8, #1]
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
9000939a:	2b00      	cmp	r3, #0
9000939c:	da0a      	bge.n	900093b4 <f_lseek+0x102>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
9000939e:	2301      	movs	r3, #1
900093a0:	9101      	str	r1, [sp, #4]
900093a2:	f7fe fb01 	bl	900079a8 <disk_write>
900093a6:	2800      	cmp	r0, #0
900093a8:	d1b3      	bne.n	90009312 <f_lseek+0x60>
						fp->flag &= (BYTE)~FA_DIRTY;
900093aa:	7d23      	ldrb	r3, [r4, #20]
900093ac:	9901      	ldr	r1, [sp, #4]
900093ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900093b2:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
900093b4:	2301      	movs	r3, #1
900093b6:	462a      	mov	r2, r5
900093b8:	f898 0001 	ldrb.w	r0, [r8, #1]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
900093bc:	f7fe fae6 	bl	9000798c <disk_read>
900093c0:	4606      	mov	r6, r0
900093c2:	2800      	cmp	r0, #0
900093c4:	d1a5      	bne.n	90009312 <f_lseek+0x60>
			fp->sect = nsect;
900093c6:	6225      	str	r5, [r4, #32]
900093c8:	e79b      	b.n	90009302 <f_lseek+0x50>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
900093ca:	68e3      	ldr	r3, [r4, #12]
900093cc:	42ab      	cmp	r3, r5
900093ce:	d204      	bcs.n	900093da <f_lseek+0x128>
900093d0:	7d22      	ldrb	r2, [r4, #20]
900093d2:	f012 0f02 	tst.w	r2, #2
900093d6:	bf08      	it	eq
900093d8:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
900093da:	2200      	movs	r2, #0
		ifptr = fp->fptr;
900093dc:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
900093de:	61a2      	str	r2, [r4, #24]
		if (ofs) {
900093e0:	bb55      	cbnz	r5, 90009438 <f_lseek+0x186>
		fp->fptr = nsect = 0;
900093e2:	2500      	movs	r5, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
900093e4:	68e2      	ldr	r2, [r4, #12]
900093e6:	69a3      	ldr	r3, [r4, #24]
900093e8:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
900093ea:	bf84      	itt	hi
900093ec:	7d22      	ldrbhi	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
900093ee:	60e3      	strhi	r3, [r4, #12]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
900093f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
900093f4:	bf84      	itt	hi
900093f6:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
900093fa:	7522      	strbhi	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
900093fc:	2b00      	cmp	r3, #0
900093fe:	d080      	beq.n	90009302 <f_lseek+0x50>
90009400:	6a22      	ldr	r2, [r4, #32]
90009402:	42aa      	cmp	r2, r5
90009404:	f43f af7d 	beq.w	90009302 <f_lseek+0x50>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
90009408:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
9000940c:	f104 0130 	add.w	r1, r4, #48	; 0x30
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
90009410:	9e03      	ldr	r6, [sp, #12]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
90009412:	2b00      	cmp	r3, #0
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90009414:	7870      	ldrb	r0, [r6, #1]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
90009416:	da0b      	bge.n	90009430 <f_lseek+0x17e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
90009418:	2301      	movs	r3, #1
9000941a:	9101      	str	r1, [sp, #4]
9000941c:	f7fe fac4 	bl	900079a8 <disk_write>
90009420:	2800      	cmp	r0, #0
90009422:	f47f af76 	bne.w	90009312 <f_lseek+0x60>
				fp->flag &= (BYTE)~FA_DIRTY;
90009426:	7d23      	ldrb	r3, [r4, #20]
90009428:	9901      	ldr	r1, [sp, #4]
9000942a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000942e:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
90009430:	2301      	movs	r3, #1
90009432:	462a      	mov	r2, r5
90009434:	7870      	ldrb	r0, [r6, #1]
90009436:	e7c1      	b.n	900093bc <f_lseek+0x10a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
90009438:	9f03      	ldr	r7, [sp, #12]
9000943a:	f8b7 800a 	ldrh.w	r8, [r7, #10]
9000943e:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
90009442:	b313      	cbz	r3, 9000948a <f_lseek+0x1d8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
90009444:	3b01      	subs	r3, #1
90009446:	1e6a      	subs	r2, r5, #1
90009448:	fbb3 f1f8 	udiv	r1, r3, r8
9000944c:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
90009450:	428a      	cmp	r2, r1
90009452:	d31a      	bcc.n	9000948a <f_lseek+0x1d8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
90009454:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
90009458:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
9000945a:	4013      	ands	r3, r2
				ofs -= fp->fptr;
9000945c:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
9000945e:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
90009460:	2900      	cmp	r1, #0
90009462:	d0be      	beq.n	900093e2 <f_lseek+0x130>
				while (ofs > bcs) {						/* Cluster following loop */
90009464:	4545      	cmp	r5, r8
					ofs -= bcs; fp->fptr += bcs;
90009466:	69a3      	ldr	r3, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
90009468:	d81e      	bhi.n	900094a8 <f_lseek+0x1f6>
				fp->fptr += ofs;
9000946a:	69a3      	ldr	r3, [r4, #24]
9000946c:	442b      	add	r3, r5
9000946e:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
90009470:	f3c5 0308 	ubfx	r3, r5, #0, #9
90009474:	2b00      	cmp	r3, #0
90009476:	d0b4      	beq.n	900093e2 <f_lseek+0x130>
					nsect = clust2sect(fs, clst);	/* Current sector */
90009478:	4638      	mov	r0, r7
9000947a:	f7fe fb6b 	bl	90007b54 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
9000947e:	2800      	cmp	r0, #0
90009480:	f43f af3d 	beq.w	900092fe <f_lseek+0x4c>
					nsect += (DWORD)(ofs / SS(fs));
90009484:	eb00 2555 	add.w	r5, r0, r5, lsr #9
90009488:	e7ac      	b.n	900093e4 <f_lseek+0x132>
				clst = fp->obj.sclust;					/* start from the first cluster */
9000948a:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
9000948c:	b951      	cbnz	r1, 900094a4 <f_lseek+0x1f2>
					clst = create_chain(&fp->obj, 0);
9000948e:	4620      	mov	r0, r4
90009490:	f7fe ff57 	bl	90008342 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
90009494:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
90009496:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
90009498:	f43f af31 	beq.w	900092fe <f_lseek+0x4c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
9000949c:	1c48      	adds	r0, r1, #1
9000949e:	f43f af38 	beq.w	90009312 <f_lseek+0x60>
					fp->obj.sclust = clst;
900094a2:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
900094a4:	61e1      	str	r1, [r4, #28]
900094a6:	e7db      	b.n	90009460 <f_lseek+0x1ae>
					ofs -= bcs; fp->fptr += bcs;
900094a8:	4443      	add	r3, r8
900094aa:	eba5 0908 	sub.w	r9, r5, r8
900094ae:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
900094b0:	7d23      	ldrb	r3, [r4, #20]
900094b2:	079a      	lsls	r2, r3, #30
900094b4:	d506      	bpl.n	900094c4 <f_lseek+0x212>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
900094b6:	4620      	mov	r0, r4
900094b8:	f7fe ff43 	bl	90008342 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
900094bc:	4605      	mov	r5, r0
900094be:	b928      	cbnz	r0, 900094cc <f_lseek+0x21a>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
900094c0:	4601      	mov	r1, r0
900094c2:	e7d2      	b.n	9000946a <f_lseek+0x1b8>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
900094c4:	6820      	ldr	r0, [r4, #0]
900094c6:	f7fe feae 	bl	90008226 <get_fat.isra.0>
900094ca:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
900094cc:	1c6b      	adds	r3, r5, #1
900094ce:	f43f af20 	beq.w	90009312 <f_lseek+0x60>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
900094d2:	2d01      	cmp	r5, #1
900094d4:	f67f af13 	bls.w	900092fe <f_lseek+0x4c>
900094d8:	69bb      	ldr	r3, [r7, #24]
900094da:	42ab      	cmp	r3, r5
900094dc:	f67f af0f 	bls.w	900092fe <f_lseek+0x4c>
					fp->clust = clst;
900094e0:	4629      	mov	r1, r5
900094e2:	61e5      	str	r5, [r4, #28]
					ofs -= bcs; fp->fptr += bcs;
900094e4:	464d      	mov	r5, r9
900094e6:	e7bd      	b.n	90009464 <f_lseek+0x1b2>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
900094e8:	2611      	movs	r6, #17
900094ea:	e70a      	b.n	90009302 <f_lseek+0x50>

900094ec <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
900094ec:	b5f0      	push	{r4, r5, r6, r7, lr}
900094ee:	b085      	sub	sp, #20
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
900094f0:	4605      	mov	r5, r0
{
900094f2:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
900094f4:	2800      	cmp	r0, #0
900094f6:	d046      	beq.n	90009586 <f_opendir+0x9a>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
900094f8:	2200      	movs	r2, #0
900094fa:	a903      	add	r1, sp, #12
900094fc:	a801      	add	r0, sp, #4
900094fe:	f7fe fc95 	bl	90007e2c <find_volume>
	if (res == FR_OK) {
90009502:	4604      	mov	r4, r0
90009504:	2800      	cmp	r0, #0
90009506:	d133      	bne.n	90009570 <f_opendir+0x84>
		obj->fs = fs;
90009508:	9f03      	ldr	r7, [sp, #12]
		INIT_NAMBUF(fs);
9000950a:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
9000950e:	602f      	str	r7, [r5, #0]
		INIT_NAMBUF(fs);
90009510:	f000 f8c9 	bl	900096a6 <ff_memalloc>
90009514:	4606      	mov	r6, r0
90009516:	2800      	cmp	r0, #0
90009518:	d037      	beq.n	9000958a <f_opendir+0x9e>
9000951a:	60f8      	str	r0, [r7, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
9000951c:	4628      	mov	r0, r5
9000951e:	9901      	ldr	r1, [sp, #4]
90009520:	f7ff fa86 	bl	90008a30 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
90009524:	4604      	mov	r4, r0
90009526:	b9e8      	cbnz	r0, 90009564 <f_opendir+0x78>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
90009528:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
9000952c:	2b00      	cmp	r3, #0
9000952e:	db07      	blt.n	90009540 <f_opendir+0x54>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
90009530:	79ab      	ldrb	r3, [r5, #6]
90009532:	06db      	lsls	r3, r3, #27
90009534:	d523      	bpl.n	9000957e <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
90009536:	7838      	ldrb	r0, [r7, #0]
90009538:	6a29      	ldr	r1, [r5, #32]
9000953a:	f7fe fe6c 	bl	90008216 <ld_clust.isra.0>
9000953e:	60a8      	str	r0, [r5, #8]
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
90009540:	88fb      	ldrh	r3, [r7, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
90009542:	2100      	movs	r1, #0
90009544:	4628      	mov	r0, r5
				obj->id = fs->id;
90009546:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
90009548:	f7fe ff53 	bl	900083f2 <dir_sdi>
#if _FS_LOCK != 0
				if (res == FR_OK) {
9000954c:	4604      	mov	r4, r0
9000954e:	b948      	cbnz	r0, 90009564 <f_opendir+0x78>
					if (obj->sclust) {
90009550:	68ab      	ldr	r3, [r5, #8]
90009552:	b193      	cbz	r3, 9000957a <f_opendir+0x8e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
90009554:	4601      	mov	r1, r0
90009556:	4628      	mov	r0, r5
90009558:	f7fe fa8e 	bl	90007a78 <inc_lock>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
9000955c:	2800      	cmp	r0, #0
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
9000955e:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
90009560:	bf08      	it	eq
90009562:	2412      	moveq	r4, #18
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
90009564:	4630      	mov	r0, r6
90009566:	f000 f8a0 	bl	900096aa <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
9000956a:	2c04      	cmp	r4, #4
9000956c:	d009      	beq.n	90009582 <f_opendir+0x96>
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
9000956e:	b10c      	cbz	r4, 90009574 <f_opendir+0x88>
90009570:	2300      	movs	r3, #0
90009572:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
90009574:	4620      	mov	r0, r4
90009576:	b005      	add	sp, #20
90009578:	bdf0      	pop	{r4, r5, r6, r7, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
9000957a:	6128      	str	r0, [r5, #16]
9000957c:	e7f2      	b.n	90009564 <f_opendir+0x78>
					res = FR_NO_PATH;
9000957e:	2405      	movs	r4, #5
90009580:	e7f0      	b.n	90009564 <f_opendir+0x78>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
90009582:	2405      	movs	r4, #5
90009584:	e7f4      	b.n	90009570 <f_opendir+0x84>
	if (!dp) return FR_INVALID_OBJECT;
90009586:	2409      	movs	r4, #9
90009588:	e7f4      	b.n	90009574 <f_opendir+0x88>
		INIT_NAMBUF(fs);
9000958a:	2411      	movs	r4, #17
9000958c:	e7f2      	b.n	90009574 <f_opendir+0x88>

9000958e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
9000958e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
90009590:	a901      	add	r1, sp, #4
{
90009592:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
90009594:	f7fe fb31 	bl	90007bfa <validate>
	if (res == FR_OK) {
90009598:	4604      	mov	r4, r0
9000959a:	b918      	cbnz	r0, 900095a4 <f_closedir+0x16>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
9000959c:	6928      	ldr	r0, [r5, #16]
9000959e:	b920      	cbnz	r0, 900095aa <f_closedir+0x1c>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
900095a0:	2300      	movs	r3, #0
900095a2:	602b      	str	r3, [r5, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
900095a4:	4620      	mov	r0, r4
900095a6:	b003      	add	sp, #12
900095a8:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
900095aa:	f7fe faa7 	bl	90007afc <dec_lock>
		if (res == FR_OK)
900095ae:	2800      	cmp	r0, #0
900095b0:	d0f6      	beq.n	900095a0 <f_closedir+0x12>
900095b2:	4604      	mov	r4, r0
900095b4:	e7f6      	b.n	900095a4 <f_closedir+0x16>

900095b6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
900095b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
900095ba:	460f      	mov	r7, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
900095bc:	a901      	add	r1, sp, #4
{
900095be:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
900095c0:	f7fe fb1b 	bl	90007bfa <validate>
	if (res == FR_OK) {
900095c4:	4604      	mov	r4, r0
900095c6:	bb30      	cbnz	r0, 90009616 <f_readdir+0x60>
		if (!fno) {
900095c8:	b937      	cbnz	r7, 900095d8 <f_readdir+0x22>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
900095ca:	4639      	mov	r1, r7
900095cc:	4628      	mov	r0, r5
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
900095ce:	b002      	add	sp, #8
900095d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
900095d4:	f7fe bf0d 	b.w	900083f2 <dir_sdi>
			INIT_NAMBUF(fs);
900095d8:	f44f 7000 	mov.w	r0, #512	; 0x200
900095dc:	f000 f863 	bl	900096a6 <ff_memalloc>
900095e0:	4606      	mov	r6, r0
900095e2:	b1e0      	cbz	r0, 9000961e <f_readdir+0x68>
900095e4:	9b01      	ldr	r3, [sp, #4]
900095e6:	60d8      	str	r0, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
900095e8:	4628      	mov	r0, r5
900095ea:	f7ff f9a7 	bl	9000893c <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
900095ee:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
900095f2:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
900095f4:	d10c      	bne.n	90009610 <f_readdir+0x5a>
				get_fileinfo(dp, fno);		/* Get the object information */
900095f6:	4639      	mov	r1, r7
900095f8:	4628      	mov	r0, r5
900095fa:	f7fe fb18 	bl	90007c2e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
900095fe:	4641      	mov	r1, r8
90009600:	4628      	mov	r0, r5
90009602:	f7fe ff36 	bl	90008472 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
90009606:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
90009608:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
9000960a:	bf14      	ite	ne
9000960c:	4604      	movne	r4, r0
9000960e:	2400      	moveq	r4, #0
			FREE_NAMBUF();
90009610:	4630      	mov	r0, r6
90009612:	f000 f84a 	bl	900096aa <ff_memfree>
}
90009616:	4620      	mov	r0, r4
90009618:	b002      	add	sp, #8
9000961a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			INIT_NAMBUF(fs);
9000961e:	2411      	movs	r4, #17
90009620:	e7f9      	b.n	90009616 <f_readdir+0x60>
	...

90009624 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
90009624:	4b0f      	ldr	r3, [pc, #60]	; (90009664 <FATFS_LinkDriverEx+0x40>)
{
90009626:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
90009628:	7b9c      	ldrb	r4, [r3, #14]
9000962a:	2c01      	cmp	r4, #1
9000962c:	d817      	bhi.n	9000965e <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
9000962e:	7b9d      	ldrb	r5, [r3, #14]
90009630:	2400      	movs	r4, #0
90009632:	b2ed      	uxtb	r5, r5
90009634:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
90009636:	7b9d      	ldrb	r5, [r3, #14]
90009638:	eb03 0585 	add.w	r5, r3, r5, lsl #2
9000963c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
9000963e:	7b98      	ldrb	r0, [r3, #14]
90009640:	4418      	add	r0, r3
90009642:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
90009644:	7b9a      	ldrb	r2, [r3, #14]
90009646:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
90009648:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
9000964a:	b2c0      	uxtb	r0, r0
9000964c:	7398      	strb	r0, [r3, #14]
    path[1] = ':';
9000964e:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
90009650:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
90009652:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
90009654:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
90009656:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
90009658:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
9000965a:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
9000965c:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
9000965e:	2001      	movs	r0, #1
90009660:	e7fc      	b.n	9000965c <FATFS_LinkDriverEx+0x38>
90009662:	bf00      	nop
90009664:	20000780 	.word	0x20000780

90009668 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
90009668:	2200      	movs	r2, #0
9000966a:	f7ff bfdb 	b.w	90009624 <FATFS_LinkDriverEx>
	...

90009670 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
90009670:	4a0a      	ldr	r2, [pc, #40]	; (9000969c <FATFS_UnLinkDriverEx+0x2c>)
90009672:	7b93      	ldrb	r3, [r2, #14]
90009674:	b17b      	cbz	r3, 90009696 <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
90009676:	7803      	ldrb	r3, [r0, #0]
90009678:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
9000967a:	b2db      	uxtb	r3, r3
9000967c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
90009680:	6848      	ldr	r0, [r1, #4]
90009682:	b140      	cbz	r0, 90009696 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
90009684:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
90009686:	4413      	add	r3, r2
90009688:	7318      	strb	r0, [r3, #12]
      disk.nbr--;
9000968a:	7b93      	ldrb	r3, [r2, #14]
      disk.drv[DiskNum] = 0;
9000968c:	6048      	str	r0, [r1, #4]
      disk.nbr--;
9000968e:	3b01      	subs	r3, #1
90009690:	b2db      	uxtb	r3, r3
90009692:	7393      	strb	r3, [r2, #14]
      ret = 0;
90009694:	4770      	bx	lr
  uint8_t ret = 1;
90009696:	2001      	movs	r0, #1
    }
  }

  return ret;
}
90009698:	4770      	bx	lr
9000969a:	bf00      	nop
9000969c:	20000780 	.word	0x20000780

900096a0 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
900096a0:	2100      	movs	r1, #0
900096a2:	f7ff bfe5 	b.w	90009670 <FATFS_UnLinkDriverEx>

900096a6 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
900096a6:	f001 bddb 	b.w	9000b260 <malloc>

900096aa <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
900096aa:	f001 bde1 	b.w	9000b270 <free>
	...

900096b0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
900096b0:	287f      	cmp	r0, #127	; 0x7f
{
900096b2:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
900096b4:	d906      	bls.n	900096c4 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
900096b6:	b131      	cbz	r1, 900096c6 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
900096b8:	28ff      	cmp	r0, #255	; 0xff
900096ba:	d811      	bhi.n	900096e0 <ff_convert+0x30>
900096bc:	3880      	subs	r0, #128	; 0x80
900096be:	4b09      	ldr	r3, [pc, #36]	; (900096e4 <ff_convert+0x34>)
900096c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
900096c4:	bd10      	pop	{r4, pc}
900096c6:	4a07      	ldr	r2, [pc, #28]	; (900096e4 <ff_convert+0x34>)
				if (chr == Tbl[c]) break;
900096c8:	f832 4b02 	ldrh.w	r4, [r2], #2
900096cc:	b28b      	uxth	r3, r1
900096ce:	4284      	cmp	r4, r0
900096d0:	d003      	beq.n	900096da <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
900096d2:	3101      	adds	r1, #1
900096d4:	2980      	cmp	r1, #128	; 0x80
900096d6:	d1f7      	bne.n	900096c8 <ff_convert+0x18>
900096d8:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
900096da:	3380      	adds	r3, #128	; 0x80
900096dc:	b2d8      	uxtb	r0, r3
900096de:	e7f1      	b.n	900096c4 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
900096e0:	2000      	movs	r0, #0
900096e2:	e7ef      	b.n	900096c4 <ff_convert+0x14>
900096e4:	9001044e 	.word	0x9001044e

900096e8 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
900096e8:	4b1f      	ldr	r3, [pc, #124]	; (90009768 <ff_wtoupper+0x80>)
900096ea:	f1a3 02bc 	sub.w	r2, r3, #188	; 0xbc
900096ee:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
900096f2:	bf28      	it	cs
900096f4:	4613      	movcs	r3, r2
{
900096f6:	b570      	push	{r4, r5, r6, lr}
900096f8:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
900096fa:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
900096fe:	460a      	mov	r2, r1
90009700:	b1ab      	cbz	r3, 9000972e <ff_wtoupper+0x46>
90009702:	4298      	cmp	r0, r3
90009704:	d313      	bcc.n	9000972e <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
90009706:	f831 4c02 	ldrh.w	r4, [r1, #-2]
9000970a:	0a25      	lsrs	r5, r4, #8
9000970c:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
9000970e:	fa53 f484 	uxtab	r4, r3, r4
90009712:	42a0      	cmp	r0, r4
90009714:	da21      	bge.n	9000975a <ff_wtoupper+0x72>
			switch (cmd) {
90009716:	2d08      	cmp	r5, #8
90009718:	d809      	bhi.n	9000972e <ff_wtoupper+0x46>
9000971a:	e8df f005 	tbb	[pc, r5]
9000971e:	0905      	.short	0x0905
90009720:	1513110f 	.word	0x1513110f
90009724:	1917      	.short	0x1917
90009726:	1b          	.byte	0x1b
90009727:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
90009728:	1ac0      	subs	r0, r0, r3
9000972a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
9000972e:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
90009730:	1ac3      	subs	r3, r0, r3
90009732:	f003 0301 	and.w	r3, r3, #1
90009736:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
90009738:	b280      	uxth	r0, r0
9000973a:	e7f8      	b.n	9000972e <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
9000973c:	3810      	subs	r0, #16
9000973e:	e7fb      	b.n	90009738 <ff_wtoupper+0x50>
			case 3:	chr -= 32; break;				/* Shift -32 */
90009740:	3820      	subs	r0, #32
90009742:	e7f9      	b.n	90009738 <ff_wtoupper+0x50>
			case 4:	chr -= 48; break;				/* Shift -48 */
90009744:	3830      	subs	r0, #48	; 0x30
90009746:	e7f7      	b.n	90009738 <ff_wtoupper+0x50>
			case 5:	chr -= 26; break;				/* Shift -26 */
90009748:	381a      	subs	r0, #26
9000974a:	e7f5      	b.n	90009738 <ff_wtoupper+0x50>
			case 6:	chr += 8; break;				/* Shift +8 */
9000974c:	3008      	adds	r0, #8
9000974e:	e7f3      	b.n	90009738 <ff_wtoupper+0x50>
			case 7: chr -= 80; break;				/* Shift -80 */
90009750:	3850      	subs	r0, #80	; 0x50
90009752:	e7f1      	b.n	90009738 <ff_wtoupper+0x50>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
90009754:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
90009758:	e7ee      	b.n	90009738 <ff_wtoupper+0x50>
		if (!cmd) p += nc;
9000975a:	3104      	adds	r1, #4
9000975c:	2d00      	cmp	r5, #0
9000975e:	d1cc      	bne.n	900096fa <ff_wtoupper+0x12>
90009760:	eb02 0346 	add.w	r3, r2, r6, lsl #1
90009764:	e7c8      	b.n	900096f8 <ff_wtoupper+0x10>
90009766:	bf00      	nop
90009768:	9001060a 	.word	0x9001060a

9000976c <AUDIO_StorageParse>:
  * @brief  Copies disk content in the explorer list.
  * @param  None
  * @retval Operation result
  */
FRESULT AUDIO_StorageParse(void)
{
9000976c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90009770:	b0d4      	sub	sp, #336	; 0x150
  FRESULT res = FR_OK;
  FILINFO fno;
  DIR dir;
  char *fn;
  
  res = f_opendir(&dir, USBDISKPath);
90009772:	492a      	ldr	r1, [pc, #168]	; (9000981c <AUDIO_StorageParse+0xb0>)
  FileList.ptr = 0;
90009774:	4c2a      	ldr	r4, [pc, #168]	; (90009820 <AUDIO_StorageParse+0xb4>)
  res = f_opendir(&dir, USBDISKPath);
90009776:	a801      	add	r0, sp, #4
90009778:	f7ff feb8 	bl	900094ec <f_opendir>
  FileList.ptr = 0;
9000977c:	2300      	movs	r3, #0
  
  if(res == FR_OK)
9000977e:	4605      	mov	r5, r0
  FileList.ptr = 0;
90009780:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
  if(res == FR_OK)
90009784:	b938      	cbnz	r0, 90009796 <AUDIO_StorageParse+0x2a>
  {
    while(USBH_MSC_IsReady(&hUSBHost))
90009786:	4e27      	ldr	r6, [pc, #156]	; (90009824 <AUDIO_StorageParse+0xb8>)
      
      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
      {
        if((fno.fattrib & AM_DIR) == 0)
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
90009788:	4f27      	ldr	r7, [pc, #156]	; (90009828 <AUDIO_StorageParse+0xbc>)
9000978a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 9000982c <AUDIO_StorageParse+0xc0>
    while(USBH_MSC_IsReady(&hUSBHost))
9000978e:	4630      	mov	r0, r6
90009790:	f7fc ff09 	bl	900065a6 <USBH_MSC_IsReady>
90009794:	b950      	cbnz	r0, 900097ac <AUDIO_StorageParse+0x40>
          }
        }
      }   
    }
  }
  NumObs = FileList.ptr;
90009796:	f8b4 33d8 	ldrh.w	r3, [r4, #984]	; 0x3d8
  f_closedir(&dir);
9000979a:	a801      	add	r0, sp, #4
  NumObs = FileList.ptr;
9000979c:	f8a4 33da 	strh.w	r3, [r4, #986]	; 0x3da
  f_closedir(&dir);
900097a0:	f7ff fef5 	bl	9000958e <f_closedir>
  return res;
}
900097a4:	4628      	mov	r0, r5
900097a6:	b054      	add	sp, #336	; 0x150
900097a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      res = f_readdir(&dir, &fno);
900097ac:	a90e      	add	r1, sp, #56	; 0x38
900097ae:	a801      	add	r0, sp, #4
900097b0:	f7ff ff01 	bl	900095b6 <f_readdir>
      if(res != FR_OK || fno.fname[0] == 0)
900097b4:	bb80      	cbnz	r0, 90009818 <AUDIO_StorageParse+0xac>
900097b6:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
900097ba:	2b00      	cmp	r3, #0
900097bc:	d0eb      	beq.n	90009796 <AUDIO_StorageParse+0x2a>
      if(fno.fname[0] == '.')
900097be:	2b2e      	cmp	r3, #46	; 0x2e
900097c0:	d0e5      	beq.n	9000978e <AUDIO_StorageParse+0x22>
      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
900097c2:	f8b4 a3d8 	ldrh.w	sl, [r4, #984]	; 0x3d8
900097c6:	f1ba 0f17 	cmp.w	sl, #23
900097ca:	d8e0      	bhi.n	9000978e <AUDIO_StorageParse+0x22>
        if((fno.fattrib & AM_DIR) == 0)
900097cc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
900097d0:	06db      	lsls	r3, r3, #27
900097d2:	d4dc      	bmi.n	9000978e <AUDIO_StorageParse+0x22>
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
900097d4:	4639      	mov	r1, r7
900097d6:	f10d 004e 	add.w	r0, sp, #78	; 0x4e
900097da:	f002 f848 	bl	9000b86e <strstr>
900097de:	b930      	cbnz	r0, 900097ee <AUDIO_StorageParse+0x82>
900097e0:	4641      	mov	r1, r8
900097e2:	f10d 004e 	add.w	r0, sp, #78	; 0x4e
900097e6:	f002 f842 	bl	9000b86e <strstr>
900097ea:	2800      	cmp	r0, #0
900097ec:	d0cf      	beq.n	9000978e <AUDIO_StorageParse+0x22>
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
900097ee:	f04f 0929 	mov.w	r9, #41	; 0x29
900097f2:	2228      	movs	r2, #40	; 0x28
900097f4:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
900097f8:	fb09 400a 	mla	r0, r9, sl, r4
900097fc:	3001      	adds	r0, #1
900097fe:	f002 f823 	bl	9000b848 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
90009802:	f8b4 33d8 	ldrh.w	r3, [r4, #984]	; 0x3d8
90009806:	2201      	movs	r2, #1
90009808:	fb09 f903 	mul.w	r9, r9, r3
            FileList.ptr++;
9000980c:	4413      	add	r3, r2
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
9000980e:	f804 2009 	strb.w	r2, [r4, r9]
            FileList.ptr++;
90009812:	f8a4 33d8 	strh.w	r3, [r4, #984]	; 0x3d8
90009816:	e7ba      	b.n	9000978e <AUDIO_StorageParse+0x22>
90009818:	4605      	mov	r5, r0
9000981a:	e7bc      	b.n	90009796 <AUDIO_StorageParse+0x2a>
9000981c:	20000b6d 	.word	0x20000b6d
90009820:	20000790 	.word	0x20000790
90009824:	20000da8 	.word	0x20000da8
90009828:	9001112b 	.word	0x9001112b
9000982c:	90010dbe 	.word	0x90010dbe

90009830 <AUDIO_ShowWavFiles>:
  * @brief  Shows audio file (*.wav) on the root
  * @param  None
  * @retval None
  */
uint8_t AUDIO_ShowWavFiles(void)
{
90009830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t i = 0;
  uint8_t line_idx = 0;

  if(AUDIO_StorageParse() ==  FR_OK)
90009834:	f7ff ff9a 	bl	9000976c <AUDIO_StorageParse>
90009838:	4604      	mov	r4, r0
9000983a:	2800      	cmp	r0, #0
9000983c:	d140      	bne.n	900098c0 <AUDIO_ShowWavFiles+0x90>
  {
    if(FileList.ptr > 0)
9000983e:	4e22      	ldr	r6, [pc, #136]	; (900098c8 <AUDIO_ShowWavFiles+0x98>)
90009840:	f8b6 33d8 	ldrh.w	r3, [r6, #984]	; 0x3d8
90009844:	2b00      	cmp	r3, #0
90009846:	d03d      	beq.n	900098c4 <AUDIO_ShowWavFiles+0x94>
    {
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
90009848:	f04f 30ff 	mov.w	r0, #4294967295
      LCD_UsrLog("audio file(s) [ROOT]:\n\n");
9000984c:	4d1f      	ldr	r5, [pc, #124]	; (900098cc <AUDIO_ShowWavFiles+0x9c>)
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
9000984e:	f7f8 f801 	bl	90001854 <BSP_LCD_SetTextColor>
      LCD_UsrLog("audio file(s) [ROOT]:\n\n");
90009852:	f04f 33ff 	mov.w	r3, #4294967295
90009856:	481e      	ldr	r0, [pc, #120]	; (900098d0 <AUDIO_ShowWavFiles+0xa0>)
      
      for(i = 0; i < FileList.ptr; i++)
      {
        line_idx++;
        LCD_DbgLog("   |__");
90009858:	f46f 087f 	mvn.w	r8, #16711680	; 0xff0000
      LCD_UsrLog("audio file(s) [ROOT]:\n\n");
9000985c:	602b      	str	r3, [r5, #0]
        LCD_DbgLog((char *)FileList.file[i].name);
9000985e:	f04f 0929 	mov.w	r9, #41	; 0x29
      LCD_UsrLog("audio file(s) [ROOT]:\n\n");
90009862:	f001 fee9 	bl	9000b638 <puts>
        LCD_DbgLog("   |__");
90009866:	f8df b070 	ldr.w	fp, [pc, #112]	; 900098d8 <AUDIO_ShowWavFiles+0xa8>
      for(i = 0; i < FileList.ptr; i++)
9000986a:	4623      	mov	r3, r4
9000986c:	b2df      	uxtb	r7, r3
9000986e:	f8b6 23d8 	ldrh.w	r2, [r6, #984]	; 0x3d8
90009872:	f103 0a01 	add.w	sl, r3, #1
90009876:	4297      	cmp	r7, r2
90009878:	d30c      	bcc.n	90009894 <AUDIO_ShowWavFiles+0x64>
        LCD_DbgLog("\n");
      }
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
9000987a:	f04f 30ff 	mov.w	r0, #4294967295
9000987e:	f7f7 ffe9 	bl	90001854 <BSP_LCD_SetTextColor>
      LCD_UsrLog("\nEnd of files list.\n");
90009882:	f04f 33ff 	mov.w	r3, #4294967295
90009886:	4813      	ldr	r0, [pc, #76]	; (900098d4 <AUDIO_ShowWavFiles+0xa4>)
90009888:	602b      	str	r3, [r5, #0]
9000988a:	f001 fed5 	bl	9000b638 <puts>
      return 0;
    }
    return 1;
  }
  return 2;
}
9000988e:	4620      	mov	r0, r4
90009890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LCD_DbgLog("   |__");
90009894:	4658      	mov	r0, fp
90009896:	f8c5 8000 	str.w	r8, [r5]
9000989a:	f001 fe5f 	bl	9000b55c <iprintf>
        LCD_DbgLog((char *)FileList.file[i].name);
9000989e:	fb09 6007 	mla	r0, r9, r7, r6
900098a2:	f8c5 8000 	str.w	r8, [r5]
900098a6:	3001      	adds	r0, #1
900098a8:	f001 fe58 	bl	9000b55c <iprintf>
        LCD_DbgLog("\n");
900098ac:	200a      	movs	r0, #10
900098ae:	f8c5 8000 	str.w	r8, [r5]
900098b2:	f001 fe65 	bl	9000b580 <putchar>
900098b6:	f04f 33ff 	mov.w	r3, #4294967295
900098ba:	602b      	str	r3, [r5, #0]
900098bc:	4653      	mov	r3, sl
900098be:	e7d5      	b.n	9000986c <AUDIO_ShowWavFiles+0x3c>
  return 2;
900098c0:	2402      	movs	r4, #2
900098c2:	e7e4      	b.n	9000988e <AUDIO_ShowWavFiles+0x5e>
    return 1;
900098c4:	2401      	movs	r4, #1
900098c6:	e7e2      	b.n	9000988e <AUDIO_ShowWavFiles+0x5e>
900098c8:	20000790 	.word	0x20000790
900098cc:	200080b4 	.word	0x200080b4
900098d0:	90010dc2 	.word	0x90010dc2
900098d4:	90010de0 	.word	0x90010de0
900098d8:	90010dd9 	.word	0x90010dd9

900098dc <AUDIO_GetWavObjectNumber>:
  * @retval None
  */
uint16_t AUDIO_GetWavObjectNumber(void)
{
  return NumObs;
}
900098dc:	4b01      	ldr	r3, [pc, #4]	; (900098e4 <AUDIO_GetWavObjectNumber+0x8>)
900098de:	f8b3 03da 	ldrh.w	r0, [r3, #986]	; 0x3da
900098e2:	4770      	bx	lr
900098e4:	20000790 	.word	0x20000790

900098e8 <USBH_UserProcess>:
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{
  switch(id)
900098e8:	2904      	cmp	r1, #4
{
900098ea:	460b      	mov	r3, r1
900098ec:	b510      	push	{r4, lr}
  switch(id)
900098ee:	d042      	beq.n	90009976 <USBH_UserProcess+0x8e>
900098f0:	2905      	cmp	r1, #5
900098f2:	d01a      	beq.n	9000992a <USBH_UserProcess+0x42>
900098f4:	2902      	cmp	r1, #2
900098f6:	d13d      	bne.n	90009974 <USBH_UserProcess+0x8c>
      LCD_ErrLog("ERROR : Cannot UnLink FatFS Driver! \n");
    }
    break;

  case HOST_USER_CLASS_ACTIVE:
    appli_state = APPLICATION_READY;
900098f8:	4c21      	ldr	r4, [pc, #132]	; (90009980 <USBH_UserProcess+0x98>)
    /* Link the USB Host disk I/O driver */
    if (FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
900098fa:	4822      	ldr	r0, [pc, #136]	; (90009984 <USBH_UserProcess+0x9c>)
    appli_state = APPLICATION_READY;
900098fc:	4621      	mov	r1, r4
900098fe:	f801 3b01 	strb.w	r3, [r1], #1
    if (FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
90009902:	f7ff feb1 	bl	90009668 <FATFS_LinkDriver>
90009906:	4602      	mov	r2, r0
90009908:	2800      	cmp	r0, #0
9000990a:	d133      	bne.n	90009974 <USBH_UserProcess+0x8c>
    {
      if (f_mount(&USBH_FatFs, "", 0) != FR_OK)
9000990c:	491e      	ldr	r1, [pc, #120]	; (90009988 <USBH_UserProcess+0xa0>)
9000990e:	f104 0008 	add.w	r0, r4, #8
90009912:	f7ff f9bf 	bl	90008c94 <f_mount>
90009916:	2800      	cmp	r0, #0
90009918:	d02c      	beq.n	90009974 <USBH_UserProcess+0x8c>
      {
        LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
9000991a:	4b1c      	ldr	r3, [pc, #112]	; (9000998c <USBH_UserProcess+0xa4>)
9000991c:	4c1c      	ldr	r4, [pc, #112]	; (90009990 <USBH_UserProcess+0xa8>)
9000991e:	481d      	ldr	r0, [pc, #116]	; (90009994 <USBH_UserProcess+0xac>)
90009920:	6023      	str	r3, [r4, #0]
90009922:	f001 fe1b 	bl	9000b55c <iprintf>
90009926:	481c      	ldr	r0, [pc, #112]	; (90009998 <USBH_UserProcess+0xb0>)
90009928:	e01f      	b.n	9000996a <USBH_UserProcess+0x82>
    appli_state = APPLICATION_DISCONNECT;
9000992a:	2203      	movs	r2, #3
9000992c:	4b14      	ldr	r3, [pc, #80]	; (90009980 <USBH_UserProcess+0x98>)
    if (f_mount(NULL, "", 0) != FR_OK)
9000992e:	4916      	ldr	r1, [pc, #88]	; (90009988 <USBH_UserProcess+0xa0>)
    appli_state = APPLICATION_DISCONNECT;
90009930:	701a      	strb	r2, [r3, #0]
    if (f_mount(NULL, "", 0) != FR_OK)
90009932:	2200      	movs	r2, #0
90009934:	4610      	mov	r0, r2
90009936:	f7ff f9ad 	bl	90008c94 <f_mount>
9000993a:	b158      	cbz	r0, 90009954 <USBH_UserProcess+0x6c>
      LCD_ErrLog("ERROR : Cannot DeInitialize FatFs! \n");
9000993c:	4b13      	ldr	r3, [pc, #76]	; (9000998c <USBH_UserProcess+0xa4>)
9000993e:	4c14      	ldr	r4, [pc, #80]	; (90009990 <USBH_UserProcess+0xa8>)
90009940:	4814      	ldr	r0, [pc, #80]	; (90009994 <USBH_UserProcess+0xac>)
90009942:	6023      	str	r3, [r4, #0]
90009944:	f001 fe0a 	bl	9000b55c <iprintf>
90009948:	4814      	ldr	r0, [pc, #80]	; (9000999c <USBH_UserProcess+0xb4>)
9000994a:	f001 fe75 	bl	9000b638 <puts>
9000994e:	f04f 33ff 	mov.w	r3, #4294967295
90009952:	6023      	str	r3, [r4, #0]
    if (FATFS_UnLinkDriver(USBDISKPath) != 0)
90009954:	4812      	ldr	r0, [pc, #72]	; (900099a0 <USBH_UserProcess+0xb8>)
90009956:	f7ff fea3 	bl	900096a0 <FATFS_UnLinkDriver>
9000995a:	b158      	cbz	r0, 90009974 <USBH_UserProcess+0x8c>
      LCD_ErrLog("ERROR : Cannot UnLink FatFS Driver! \n");
9000995c:	4b0b      	ldr	r3, [pc, #44]	; (9000998c <USBH_UserProcess+0xa4>)
9000995e:	4c0c      	ldr	r4, [pc, #48]	; (90009990 <USBH_UserProcess+0xa8>)
90009960:	480c      	ldr	r0, [pc, #48]	; (90009994 <USBH_UserProcess+0xac>)
90009962:	6023      	str	r3, [r4, #0]
90009964:	f001 fdfa 	bl	9000b55c <iprintf>
90009968:	480e      	ldr	r0, [pc, #56]	; (900099a4 <USBH_UserProcess+0xbc>)
        LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
9000996a:	f001 fe65 	bl	9000b638 <puts>
9000996e:	f04f 33ff 	mov.w	r3, #4294967295
90009972:	6023      	str	r3, [r4, #0]
    break;
   
  default:
    break; 
  }
}
90009974:	bd10      	pop	{r4, pc}
    appli_state = APPLICATION_START;
90009976:	4b02      	ldr	r3, [pc, #8]	; (90009980 <USBH_UserProcess+0x98>)
90009978:	2201      	movs	r2, #1
9000997a:	701a      	strb	r2, [r3, #0]
}
9000997c:	e7fa      	b.n	90009974 <USBH_UserProcess+0x8c>
9000997e:	bf00      	nop
90009980:	20000b6c 	.word	0x20000b6c
90009984:	90010834 	.word	0x90010834
90009988:	90010dd8 	.word	0x90010dd8
9000998c:	ffff0000 	.word	0xffff0000
90009990:	200080b4 	.word	0x200080b4
90009994:	9001096c 	.word	0x9001096c
90009998:	90010e3d 	.word	0x90010e3d
9000999c:	90010df4 	.word	0x90010df4
900099a0:	20000b6d 	.word	0x20000b6d
900099a4:	90010e18 	.word	0x90010e18

900099a8 <main>:
  SCB->VTOR = QSPI_BASE | VECT_TAB_OFFSET;
900099a8:	4b5a      	ldr	r3, [pc, #360]	; (90009b14 <main+0x16c>)
900099aa:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
{
900099ae:	b500      	push	{lr}
  SCB->VTOR = QSPI_BASE | VECT_TAB_OFFSET;
900099b0:	609a      	str	r2, [r3, #8]
{
900099b2:	b0b3      	sub	sp, #204	; 0xcc
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
900099b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900099b8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900099bc:	2100      	movs	r1, #0
900099be:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900099c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900099c6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900099ca:	695a      	ldr	r2, [r3, #20]
900099cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
900099d0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900099d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900099d6:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
900099da:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900099de:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
900099e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900099e6:	f643 70e0 	movw	r0, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900099ea:	f3c2 01c9 	ubfx	r1, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900099ee:	f3c2 324e 	ubfx	r2, r2, #13, #15
900099f2:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900099f4:	ea02 0600 	and.w	r6, r2, r0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900099f8:	460c      	mov	r4, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900099fa:	ea46 7584 	orr.w	r5, r6, r4, lsl #30
      } while (ways-- != 0U);
900099fe:	3c01      	subs	r4, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90009a00:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
90009a04:	d2f9      	bcs.n	900099fa <main+0x52>
    } while(sets-- != 0U);
90009a06:	3a20      	subs	r2, #32
90009a08:	f112 0f20 	cmn.w	r2, #32
90009a0c:	d1f2      	bne.n	900099f4 <main+0x4c>
90009a0e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90009a12:	695a      	ldr	r2, [r3, #20]
90009a14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90009a18:	615a      	str	r2, [r3, #20]
90009a1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90009a1e:	f3bf 8f6f 	isb	sy
  HAL_Init();
90009a22:	f7f9 f835 	bl	90002a90 <HAL_Init>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90009a26:	2601      	movs	r6, #1
90009a28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90009a2c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;  
90009a2e:	f04f 0e19 	mov.w	lr, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90009a32:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
90009a34:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90009a36:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90009a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
90009a3e:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;  
90009a42:	f44f 73c8 	mov.w	r3, #400	; 0x190
90009a46:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 8;
90009a4a:	2308      	movs	r3, #8
90009a4c:	9310      	str	r3, [sp, #64]	; 0x40
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
90009a4e:	f7fa fde3 	bl	90004618 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
90009a52:	b100      	cbz	r0, 90009a56 <main+0xae>
  {
    while(1) { ; }
90009a54:	e7fe      	b.n	90009a54 <main+0xac>
  }

  /* Activate the OverDrive to reach the 200 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
90009a56:	f7fa fda7 	bl	900045a8 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
90009a5a:	b100      	cbz	r0, 90009a5e <main+0xb6>
  {
    while(1) { ; }
90009a5c:	e7fe      	b.n	90009a5c <main+0xb4>
  }

  /* Select PLLSAI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
90009a5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
90009a62:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90009a66:	a811      	add	r0, sp, #68	; 0x44
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
90009a68:	9619      	str	r6, [sp, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
90009a6a:	9311      	str	r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
90009a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
90009a70:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
90009a72:	2304      	movs	r3, #4
90009a74:	e9cd c316 	strd	ip, r3, [sp, #88]	; 0x58
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
90009a78:	f7fb f854 	bl	90004b24 <HAL_RCCEx_PeriphCLKConfig>
  if(ret != HAL_OK)
90009a7c:	b100      	cbz	r0, 90009a80 <main+0xd8>
  {
    while(1) { ; }
90009a7e:	e7fe      	b.n	90009a7e <main+0xd6>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
90009a80:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90009a82:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
90009a86:	9002      	str	r0, [sp, #8]

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
90009a88:	2106      	movs	r1, #6
90009a8a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90009a8c:	e9cd 3500 	strd	r3, r5, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90009a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90009a94:	e9cd 2303 	strd	r2, r3, [sp, #12]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
90009a98:	f7fa ffa6 	bl	900049e8 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
90009a9c:	4605      	mov	r5, r0
90009a9e:	b100      	cbz	r0, 90009aa2 <main+0xfa>
  {
    while(1) { ; }
90009aa0:	e7fe      	b.n	90009aa0 <main+0xf8>
  BSP_LED_Init(LED1);
90009aa2:	f7f8 fd0b 	bl	900024bc <BSP_LED_Init>
  BSP_LCD_Init();
90009aa6:	f7f8 fbd3 	bl	90002250 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS); 
90009aaa:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
90009aae:	4630      	mov	r0, r6
90009ab0:	f7f7 fe88 	bl	900017c4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
90009ab4:	4630      	mov	r0, r6
90009ab6:	f7f7 fec1 	bl	9000183c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
90009aba:	f7f8 fb0b 	bl	900020d4 <BSP_LCD_DisplayOn>
  LCD_LOG_Init();
90009abe:	f001 fb87 	bl	9000b1d0 <LCD_LOG_Init>
  LCD_UsrLog("USB Host library started.\n"); 
90009ac2:	4b15      	ldr	r3, [pc, #84]	; (90009b18 <main+0x170>)
90009ac4:	4815      	ldr	r0, [pc, #84]	; (90009b1c <main+0x174>)
90009ac6:	601c      	str	r4, [r3, #0]
90009ac8:	f001 fdb6 	bl	9000b638 <puts>
  USBH_UsrLog("Starting Audio Demo");
90009acc:	4814      	ldr	r0, [pc, #80]	; (90009b20 <main+0x178>)
90009ace:	f001 fd45 	bl	9000b55c <iprintf>
90009ad2:	200a      	movs	r0, #10
90009ad4:	f001 fd54 	bl	9000b580 <putchar>
  AUDIO_PLAYER_Init();
90009ad8:	f000 fa64 	bl	90009fa4 <AUDIO_PLAYER_Init>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
90009adc:	f7f7 fe5a 	bl	90001794 <BSP_LCD_GetXSize>
90009ae0:	4604      	mov	r4, r0
90009ae2:	f7f7 fe63 	bl	900017ac <BSP_LCD_GetYSize>
90009ae6:	b281      	uxth	r1, r0
90009ae8:	b2a0      	uxth	r0, r4
    USBH_Process(&hUSBHost);
90009aea:	4c0e      	ldr	r4, [pc, #56]	; (90009b24 <main+0x17c>)
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
90009aec:	f7f8 feb0 	bl	90002850 <BSP_TS_Init>
  USBH_Init(&hUSBHost, USBH_UserProcess, 0);
90009af0:	462a      	mov	r2, r5
90009af2:	490d      	ldr	r1, [pc, #52]	; (90009b28 <main+0x180>)
90009af4:	480b      	ldr	r0, [pc, #44]	; (90009b24 <main+0x17c>)
90009af6:	f7fd f8a9 	bl	90006c4c <USBH_Init>
  USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
90009afa:	490c      	ldr	r1, [pc, #48]	; (90009b2c <main+0x184>)
90009afc:	4809      	ldr	r0, [pc, #36]	; (90009b24 <main+0x17c>)
90009afe:	f7fd f8d1 	bl	90006ca4 <USBH_RegisterClass>
  USBH_Start(&hUSBHost);
90009b02:	4808      	ldr	r0, [pc, #32]	; (90009b24 <main+0x17c>)
90009b04:	f7fd f950 	bl	90006da8 <USBH_Start>
    USBH_Process(&hUSBHost);
90009b08:	4620      	mov	r0, r4
90009b0a:	f7fd f957 	bl	90006dbc <USBH_Process>
    AUDIO_MenuProcess();
90009b0e:	f000 f861 	bl	90009bd4 <AUDIO_MenuProcess>
  while (1)
90009b12:	e7f9      	b.n	90009b08 <main+0x160>
90009b14:	e000ed00 	.word	0xe000ed00
90009b18:	200080b4 	.word	0x200080b4
90009b1c:	90010e5f 	.word	0x90010e5f
90009b20:	90010e79 	.word	0x90010e79
90009b24:	20000da8 	.word	0x20000da8
90009b28:	900098e9 	.word	0x900098e9
90009b2c:	20000094 	.word	0x20000094

90009b30 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{
90009b30:	b510      	push	{r4, lr}
90009b32:	b0a2      	sub	sp, #136	; 0x88
90009b34:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;

  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
90009b36:	a801      	add	r0, sp, #4
90009b38:	f7fb fa7e 	bl	90005038 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
90009b3c:	f642 3311 	movw	r3, #11025	; 0x2b11
90009b40:	429c      	cmp	r4, r3
90009b42:	d007      	beq.n	90009b54 <BSP_AUDIO_OUT_ClockConfig+0x24>
90009b44:	f245 6322 	movw	r3, #22050	; 0x5622
90009b48:	429c      	cmp	r4, r3
90009b4a:	d003      	beq.n	90009b54 <BSP_AUDIO_OUT_ClockConfig+0x24>
90009b4c:	f64a 4344 	movw	r3, #44100	; 0xac44
90009b50:	429c      	cmp	r4, r3
90009b52:	d113      	bne.n	90009b7c <BSP_AUDIO_OUT_ClockConfig+0x4c>
  {
    /* Configure PLLSAI prescalers */
    /* PLLI2S_VCO: VCO_429M
    SAI_CLK(first level) = PLLI2S_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLI2SDivQ = 214.5/19 = 11.289 Mhz */
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
90009b54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
90009b58:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
90009b5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
90009b5e:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
90009b60:	2308      	movs	r3, #8
90009b62:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
90009b64:	f240 13ad 	movw	r3, #429	; 0x1ad
90009b68:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
90009b6a:	2302      	movs	r3, #2
90009b6c:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
90009b6e:	2313      	movs	r3, #19
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
90009b70:	a801      	add	r0, sp, #4
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
90009b72:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
90009b74:	f7fa ffd6 	bl	90004b24 <HAL_RCCEx_PeriphCLKConfig>
  }
}
90009b78:	b022      	add	sp, #136	; 0x88
90009b7a:	bd10      	pop	{r4, pc}
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
90009b7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
90009b80:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
90009b82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
90009b86:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
90009b88:	2308      	movs	r3, #8
90009b8a:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;
90009b8c:	f44f 73ac 	mov.w	r3, #344	; 0x158
90009b90:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
90009b92:	2307      	movs	r3, #7
90009b94:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
90009b96:	2301      	movs	r3, #1
90009b98:	e7ea      	b.n	90009b70 <BSP_AUDIO_OUT_ClockConfig+0x40>
	...

90009b9c <BSP_LCD_ClockConfig>:
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90009b9c:	4807      	ldr	r0, [pc, #28]	; (90009bbc <BSP_LCD_ClockConfig+0x20>)
90009b9e:	2308      	movs	r3, #8
90009ba0:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90009ba4:	23c0      	movs	r3, #192	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90009ba6:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
90009baa:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
90009bac:	2305      	movs	r3, #5
90009bae:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
90009bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90009bb4:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90009bb6:	f7fa bfb5 	b.w	90004b24 <HAL_RCCEx_PeriphCLKConfig>
90009bba:	bf00      	nop
90009bbc:	20000b6c 	.word	0x20000b6c

90009bc0 <LCD_ClearTextZone>:
  * @brief  Clears the text zone.
  * @param  None
  * @retval None
  */
static void LCD_ClearTextZone(void)
{
90009bc0:	b510      	push	{r4, lr}
90009bc2:	2403      	movs	r4, #3
  uint8_t i = 0;
  
  for(i= 0; i < 13; i++)
  {
    BSP_LCD_ClearStringLine(i + 3);
90009bc4:	4620      	mov	r0, r4
  for(i= 0; i < 13; i++)
90009bc6:	3401      	adds	r4, #1
    BSP_LCD_ClearStringLine(i + 3);
90009bc8:	f7f8 f974 	bl	90001eb4 <BSP_LCD_ClearStringLine>
  for(i= 0; i < 13; i++)
90009bcc:	2c10      	cmp	r4, #16
90009bce:	d1f9      	bne.n	90009bc4 <LCD_ClearTextZone+0x4>
  }
}
90009bd0:	bd10      	pop	{r4, pc}
	...

90009bd4 <AUDIO_MenuProcess>:
{
90009bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90009bd8:	b094      	sub	sp, #80	; 0x50
  Point TransmitterPoints[] = {{TOUCH_TRANSMITTER_XMIN,TOUCH_TRANSMITTER_YMIN},
90009bda:	4b76      	ldr	r3, [pc, #472]	; (90009db4 <AUDIO_MenuProcess+0x1e0>)
90009bdc:	aa01      	add	r2, sp, #4
90009bde:	f103 0510 	add.w	r5, r3, #16
90009be2:	4617      	mov	r7, r2
90009be4:	6818      	ldr	r0, [r3, #0]
90009be6:	3308      	adds	r3, #8
90009be8:	f853 1c04 	ldr.w	r1, [r3, #-4]
90009bec:	4614      	mov	r4, r2
90009bee:	42ab      	cmp	r3, r5
90009bf0:	c403      	stmia	r4!, {r0, r1}
90009bf2:	4622      	mov	r2, r4
90009bf4:	d1f6      	bne.n	90009be4 <AUDIO_MenuProcess+0x10>
  Point ReceiverPoints[] = {{TOUCH_RECEIVER_XMIN, TOUCH_RECEIVER_YMIN},
90009bf6:	4b70      	ldr	r3, [pc, #448]	; (90009db8 <AUDIO_MenuProcess+0x1e4>)
90009bf8:	aa05      	add	r2, sp, #20
90009bfa:	f103 0510 	add.w	r5, r3, #16
90009bfe:	4690      	mov	r8, r2
90009c00:	6818      	ldr	r0, [r3, #0]
90009c02:	3308      	adds	r3, #8
90009c04:	f853 1c04 	ldr.w	r1, [r3, #-4]
90009c08:	4614      	mov	r4, r2
90009c0a:	42ab      	cmp	r3, r5
90009c0c:	c403      	stmia	r4!, {r0, r1}
90009c0e:	4622      	mov	r2, r4
90009c10:	d1f6      	bne.n	90009c00 <AUDIO_MenuProcess+0x2c>
  if(appli_state == APPLICATION_READY)
90009c12:	4d6a      	ldr	r5, [pc, #424]	; (90009dbc <AUDIO_MenuProcess+0x1e8>)
90009c14:	782b      	ldrb	r3, [r5, #0]
90009c16:	2b02      	cmp	r3, #2
90009c18:	d140      	bne.n	90009c9c <AUDIO_MenuProcess+0xc8>
    switch(AudioDemo.state)
90009c1a:	4c69      	ldr	r4, [pc, #420]	; (90009dc0 <AUDIO_MenuProcess+0x1ec>)
90009c1c:	7823      	ldrb	r3, [r4, #0]
90009c1e:	2b08      	cmp	r3, #8
90009c20:	d83c      	bhi.n	90009c9c <AUDIO_MenuProcess+0xc8>
90009c22:	e8df f003 	tbb	[pc, r3]
90009c26:	4b05      	.short	0x4b05
90009c28:	893b687a 	.word	0x893b687a
90009c2c:	3b3b      	.short	0x3b3b
90009c2e:	b6          	.byte	0xb6
90009c2f:	00          	.byte	0x00
      AudioDemo.state = WAIT;
90009c30:	2601      	movs	r6, #1
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
90009c32:	4864      	ldr	r0, [pc, #400]	; (90009dc4 <AUDIO_MenuProcess+0x1f0>)
      AudioDemo.state = WAIT;
90009c34:	7026      	strb	r6, [r4, #0]
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
90009c36:	f7f7 fe19 	bl	9000186c <BSP_LCD_SetBackColor>
	  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
90009c3a:	4863      	ldr	r0, [pc, #396]	; (90009dc8 <AUDIO_MenuProcess+0x1f4>)
90009c3c:	f7f7 fe22 	bl	90001884 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009c40:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009c44:	f7f7 fe06 	bl	90001854 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"       ___          ___      __   _      __    ____________  ___");
90009c48:	4960      	ldr	r1, [pc, #384]	; (90009dcc <AUDIO_MenuProcess+0x1f8>)
90009c4a:	2002      	movs	r0, #2
90009c4c:	f7f7 ff98 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(3, (uint8_t *)"      / _ |__ _____/ (_)__  / /  (_)__  / /__ / __/_  __/  |/  /");
90009c50:	495f      	ldr	r1, [pc, #380]	; (90009dd0 <AUDIO_MenuProcess+0x1fc>)
90009c52:	2003      	movs	r0, #3
90009c54:	f7f7 ff94 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"     / __ / // / _  / / _ \\/ /__/ / _ \\/  '_/_\\ \\  / / / /|_/ / ");
90009c58:	495e      	ldr	r1, [pc, #376]	; (90009dd4 <AUDIO_MenuProcess+0x200>)
90009c5a:	2004      	movs	r0, #4
90009c5c:	f7f7 ff90 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    /_/ |_\\_,_/\\_,_/_/\___/____/_/_//_/_/\\_\\/___/ /_/ /_/  /_/  ");
90009c60:	495d      	ldr	r1, [pc, #372]	; (90009dd8 <AUDIO_MenuProcess+0x204>)
90009c62:	2005      	movs	r0, #5
90009c64:	f7f7 ff8c 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
90009c68:	485c      	ldr	r0, [pc, #368]	; (90009ddc <AUDIO_MenuProcess+0x208>)
90009c6a:	f7f7 fe0b 	bl	90001884 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"    >> TRANSMITTER");
90009c6e:	495c      	ldr	r1, [pc, #368]	; (90009de0 <AUDIO_MenuProcess+0x20c>)
90009c70:	200a      	movs	r0, #10
90009c72:	f7f7 ff85 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"    >> RECEIVER");
90009c76:	495b      	ldr	r1, [pc, #364]	; (90009de4 <AUDIO_MenuProcess+0x210>)
90009c78:	200d      	movs	r0, #13
90009c7a:	f7f7 ff81 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SelectLayer(1);
90009c7e:	4630      	mov	r0, r6
90009c80:	f7f7 fddc 	bl	9000183c <BSP_LCD_SelectLayer>
	  BSP_LCD_SetTransparency(1, 0);  // Establecer transparencia en la capa 1
90009c84:	2100      	movs	r1, #0
90009c86:	4630      	mov	r0, r6
90009c88:	f7f7 fdde 	bl	90001848 <BSP_LCD_SetTransparency>
	  BSP_LCD_FillPolygon(TransmitterPoints, 4);
90009c8c:	2104      	movs	r1, #4
90009c8e:	4638      	mov	r0, r7
90009c90:	f7f8 f9a0 	bl	90001fd4 <BSP_LCD_FillPolygon>
	  BSP_LCD_FillPolygon(ReceiverPoints, 4);
90009c94:	2104      	movs	r1, #4
90009c96:	4640      	mov	r0, r8
90009c98:	f7f8 f99c 	bl	90001fd4 <BSP_LCD_FillPolygon>
  if(appli_state == APPLICATION_DISCONNECT)
90009c9c:	782b      	ldrb	r3, [r5, #0]
90009c9e:	2b03      	cmp	r3, #3
90009ca0:	d109      	bne.n	90009cb6 <AUDIO_MenuProcess+0xe2>
    appli_state = APPLICATION_IDLE;     
90009ca2:	2300      	movs	r3, #0
90009ca4:	702b      	strb	r3, [r5, #0]
    LCD_LOG_UpdateDisplay(); 
90009ca6:	f001 fa9d 	bl	9000b1e4 <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
90009caa:	4b45      	ldr	r3, [pc, #276]	; (90009dc0 <AUDIO_MenuProcess+0x1ec>)
90009cac:	2206      	movs	r2, #6
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);    
90009cae:	2002      	movs	r0, #2
    AudioDemo.state = AUDIO_DEMO_IDLE; 
90009cb0:	701a      	strb	r2, [r3, #0]
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);    
90009cb2:	f7f7 fa99 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
}
90009cb6:	b014      	add	sp, #80	; 0x50
90009cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	BSP_TS_GetState(&TS_State);
90009cbc:	a809      	add	r0, sp, #36	; 0x24
90009cbe:	f7f8 fe11 	bl	900028e4 <BSP_TS_GetState>
    	if(TS_State.touchDetected == 1)
90009cc2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
90009cc6:	2b01      	cmp	r3, #1
90009cc8:	d1e8      	bne.n	90009c9c <AUDIO_MenuProcess+0xc8>
    		if ((TS_State.touchX[0] > TOUCH_TRANSMITTER_XMIN) &&
90009cca:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
90009cce:	3b29      	subs	r3, #41	; 0x29
90009cd0:	b29b      	uxth	r3, r3
90009cd2:	2ba8      	cmp	r3, #168	; 0xa8
90009cd4:	d807      	bhi.n	90009ce6 <AUDIO_MenuProcess+0x112>
    			(TS_State.touchX[0] < TOUCH_TRANSMITTER_XMAX) &&
90009cd6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
90009cda:	3b97      	subs	r3, #151	; 0x97
90009cdc:	b29b      	uxth	r3, r3
90009cde:	2b1c      	cmp	r3, #28
90009ce0:	d801      	bhi.n	90009ce6 <AUDIO_MenuProcess+0x112>
    			AudioDemo.state = TRANSMITTER;
90009ce2:	2303      	movs	r3, #3
90009ce4:	7023      	strb	r3, [r4, #0]
          BSP_TS_GetState(&TS_State);
90009ce6:	a809      	add	r0, sp, #36	; 0x24
90009ce8:	f7f8 fdfc 	bl	900028e4 <BSP_TS_GetState>
        }while(TS_State.touchDetected > 0);
90009cec:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
90009cf0:	2b00      	cmp	r3, #0
90009cf2:	d1f8      	bne.n	90009ce6 <AUDIO_MenuProcess+0x112>
90009cf4:	e7d2      	b.n	90009c9c <AUDIO_MenuProcess+0xc8>
    	LCD_ClearTextZone();
90009cf6:	f7ff ff63 	bl	90009bc0 <LCD_ClearTextZone>
    	BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
90009cfa:	4838      	ldr	r0, [pc, #224]	; (90009ddc <AUDIO_MenuProcess+0x208>)
90009cfc:	f7f7 fdc2 	bl	90001884 <BSP_LCD_SetFont>
    	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009d00:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009d04:	f7f7 fda6 	bl	90001854 <BSP_LCD_SetTextColor>
  	    BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >> --TRANSMITTER--");
90009d08:	4937      	ldr	r1, [pc, #220]	; (90009de8 <AUDIO_MenuProcess+0x214>)
90009d0a:	2004      	movs	r0, #4
90009d0c:	f7f7 ff38 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
  	    BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    >> Reading from USB...");
90009d10:	4936      	ldr	r1, [pc, #216]	; (90009dec <AUDIO_MenuProcess+0x218>)
      	    BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    >> Ready to receive...");
90009d12:	2005      	movs	r0, #5
90009d14:	f7f7 ff34 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
        	break;
90009d18:	e7c0      	b.n	90009c9c <AUDIO_MenuProcess+0xc8>
        	LCD_ClearTextZone();
90009d1a:	f7ff ff51 	bl	90009bc0 <LCD_ClearTextZone>
        	BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
90009d1e:	482f      	ldr	r0, [pc, #188]	; (90009ddc <AUDIO_MenuProcess+0x208>)
90009d20:	f7f7 fdb0 	bl	90001884 <BSP_LCD_SetFont>
        	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGREEN);
90009d24:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
90009d28:	f7f7 fd94 	bl	90001854 <BSP_LCD_SetTextColor>
      	    BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"    >> --RECEIVER--");
90009d2c:	4930      	ldr	r1, [pc, #192]	; (90009df0 <AUDIO_MenuProcess+0x21c>)
90009d2e:	2004      	movs	r0, #4
90009d30:	f7f7 ff26 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
      	    BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"    >> Ready to receive...");
90009d34:	492f      	ldr	r1, [pc, #188]	; (90009df4 <AUDIO_MenuProcess+0x220>)
90009d36:	e7ec      	b.n	90009d12 <AUDIO_MenuProcess+0x13e>
        if(AudioState == AUDIO_STATE_IDLE)
90009d38:	78a3      	ldrb	r3, [r4, #2]
90009d3a:	bb1b      	cbnz	r3, 90009d84 <AUDIO_MenuProcess+0x1b0>
          if(AUDIO_ShowWavFiles() > 0)
90009d3c:	f7ff fd78 	bl	90009830 <AUDIO_ShowWavFiles>
90009d40:	b1e8      	cbz	r0, 90009d7e <AUDIO_MenuProcess+0x1aa>
            LCD_ErrLog("There is no WAV file on the USB Key.\n");         
90009d42:	4b2d      	ldr	r3, [pc, #180]	; (90009df8 <AUDIO_MenuProcess+0x224>)
90009d44:	4e2d      	ldr	r6, [pc, #180]	; (90009dfc <AUDIO_MenuProcess+0x228>)
90009d46:	482e      	ldr	r0, [pc, #184]	; (90009e00 <AUDIO_MenuProcess+0x22c>)
90009d48:	6033      	str	r3, [r6, #0]
90009d4a:	f001 fc07 	bl	9000b55c <iprintf>
90009d4e:	482d      	ldr	r0, [pc, #180]	; (90009e04 <AUDIO_MenuProcess+0x230>)
90009d50:	f001 fc72 	bl	9000b638 <puts>
90009d54:	f04f 33ff 	mov.w	r3, #4294967295
90009d58:	6033      	str	r3, [r6, #0]
    LCD_LOG_UpdateDisplay(); 
90009d5a:	f001 fa43 	bl	9000b1e4 <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
90009d5e:	2306      	movs	r3, #6
90009d60:	7023      	strb	r3, [r4, #0]
            AudioDemo.state = AUDIO_DEMO_IDLE;
90009d62:	7023      	strb	r3, [r4, #0]
          LCD_ClearTextZone();
90009d64:	f7ff ff2c 	bl	90009bc0 <LCD_ClearTextZone>
          if(AUDIO_PLAYER_Start(0) == AUDIO_ERROR_IO)
90009d68:	2000      	movs	r0, #0
90009d6a:	f000 f92b 	bl	90009fc4 <AUDIO_PLAYER_Start>
          if(AUDIO_REC_Start() == AUDIO_ERROR_IO)
90009d6e:	2801      	cmp	r0, #1
90009d70:	d194      	bne.n	90009c9c <AUDIO_MenuProcess+0xc8>
    LCD_LOG_UpdateDisplay(); 
90009d72:	f001 fa37 	bl	9000b1e4 <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
90009d76:	2306      	movs	r3, #6
90009d78:	7023      	strb	r3, [r4, #0]
            AudioDemo.state = AUDIO_DEMO_IDLE;
90009d7a:	7023      	strb	r3, [r4, #0]
90009d7c:	e78e      	b.n	90009c9c <AUDIO_MenuProcess+0xc8>
            AudioState = AUDIO_STATE_INIT;
90009d7e:	2302      	movs	r3, #2
90009d80:	70a3      	strb	r3, [r4, #2]
90009d82:	e7ef      	b.n	90009d64 <AUDIO_MenuProcess+0x190>
          if(AUDIO_PLAYER_Process() == AUDIO_ERROR_IO)
90009d84:	f000 fa80 	bl	9000a288 <AUDIO_PLAYER_Process>
90009d88:	2801      	cmp	r0, #1
90009d8a:	d187      	bne.n	90009c9c <AUDIO_MenuProcess+0xc8>
            LCD_ClearTextZone();
90009d8c:	f7ff ff18 	bl	90009bc0 <LCD_ClearTextZone>
90009d90:	e7ef      	b.n	90009d72 <AUDIO_MenuProcess+0x19e>
        if(AudioState == AUDIO_STATE_IDLE)
90009d92:	78a3      	ldrb	r3, [r4, #2]
90009d94:	b933      	cbnz	r3, 90009da4 <AUDIO_MenuProcess+0x1d0>
          AudioState = AUDIO_STATE_INIT;
90009d96:	2302      	movs	r3, #2
90009d98:	70a3      	strb	r3, [r4, #2]
          LCD_ClearTextZone();
90009d9a:	f7ff ff11 	bl	90009bc0 <LCD_ClearTextZone>
          if(AUDIO_REC_Start() == AUDIO_ERROR_IO)
90009d9e:	f000 fdf5 	bl	9000a98c <AUDIO_REC_Start>
90009da2:	e7e4      	b.n	90009d6e <AUDIO_MenuProcess+0x19a>
          status = AUDIO_REC_Process();
90009da4:	f000 ff74 	bl	9000ac90 <AUDIO_REC_Process>
          if((status == AUDIO_ERROR_IO) || (status == AUDIO_ERROR_EOF))
90009da8:	3801      	subs	r0, #1
90009daa:	b2c0      	uxtb	r0, r0
90009dac:	2801      	cmp	r0, #1
90009dae:	f63f af75 	bhi.w	90009c9c <AUDIO_MenuProcess+0xc8>
90009db2:	e7eb      	b.n	90009d8c <AUDIO_MenuProcess+0x1b8>
90009db4:	900107fc 	.word	0x900107fc
90009db8:	9001080c 	.word	0x9001080c
90009dbc:	20000b6c 	.word	0x20000b6c
90009dc0:	200012f0 	.word	0x200012f0
90009dc4:	ff008000 	.word	0xff008000
90009dc8:	20000070 	.word	0x20000070
90009dcc:	90010e8d 	.word	0x90010e8d
90009dd0:	90010ece 	.word	0x90010ece
90009dd4:	90010f0f 	.word	0x90010f0f
90009dd8:	90010f50 	.word	0x90010f50
90009ddc:	20000078 	.word	0x20000078
90009de0:	90010f90 	.word	0x90010f90
90009de4:	90010fa3 	.word	0x90010fa3
90009de8:	90010fb3 	.word	0x90010fb3
90009dec:	90010fca 	.word	0x90010fca
90009df0:	90010fe5 	.word	0x90010fe5
90009df4:	90010ff9 	.word	0x90010ff9
90009df8:	ffff0000 	.word	0xffff0000
90009dfc:	200080b4 	.word	0x200080b4
90009e00:	9001096c 	.word	0x9001096c
90009e04:	90011014 	.word	0x90011014

90009e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90009e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 90009e40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90009e0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90009e0e:	e003      	b.n	90009e18 <LoopCopyDataInit>

90009e10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90009e10:	4b0c      	ldr	r3, [pc, #48]	; (90009e44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
90009e12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
90009e14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
90009e16:	3104      	adds	r1, #4

90009e18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90009e18:	480b      	ldr	r0, [pc, #44]	; (90009e48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90009e1a:	4b0c      	ldr	r3, [pc, #48]	; (90009e4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90009e1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
90009e1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90009e20:	d3f6      	bcc.n	90009e10 <CopyDataInit>
  ldr  r2, =_sbss
90009e22:	4a0b      	ldr	r2, [pc, #44]	; (90009e50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
90009e24:	e002      	b.n	90009e2c <LoopFillZerobss>

90009e26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
90009e26:	2300      	movs	r3, #0
  str  r3, [r2], #4
90009e28:	f842 3b04 	str.w	r3, [r2], #4

90009e2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
90009e2c:	4b09      	ldr	r3, [pc, #36]	; (90009e54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
90009e2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
90009e30:	d3f9      	bcc.n	90009e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
90009e32:	f000 f82f 	bl	90009e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
90009e36:	f001 fd87 	bl	9000b948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90009e3a:	f7ff fdb5 	bl	900099a8 <main>
  bx  lr    
90009e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90009e40:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
90009e44:	90011204 	.word	0x90011204
  ldr  r0, =_sdata
90009e48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
90009e4c:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
90009e50:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
90009e54:	2000bad0 	.word	0x2000bad0

90009e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90009e58:	e7fe      	b.n	90009e58 <ADC_IRQHandler>

90009e5a <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
90009e5a:	4770      	bx	lr

90009e5c <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90009e5c:	e7fe      	b.n	90009e5c <HardFault_Handler>

90009e5e <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
90009e5e:	e7fe      	b.n	90009e5e <MemManage_Handler>

90009e60 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90009e60:	e7fe      	b.n	90009e60 <BusFault_Handler>

90009e62 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
90009e62:	e7fe      	b.n	90009e62 <UsageFault_Handler>

90009e64 <SVC_Handler>:
90009e64:	4770      	bx	lr

90009e66 <DebugMon_Handler>:
90009e66:	4770      	bx	lr

90009e68 <PendSV_Handler>:
90009e68:	4770      	bx	lr

90009e6a <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
90009e6a:	f7f8 be23 	b.w	90002ab4 <HAL_IncTick>
	...

90009e70 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
  HAL_HCD_IRQHandler(&hhcd);
90009e70:	4801      	ldr	r0, [pc, #4]	; (90009e78 <OTG_FS_IRQHandler+0x8>)
90009e72:	f7f9 bbd5 	b.w	90003620 <HAL_HCD_IRQHandler>
90009e76:	bf00      	nop
90009e78:	20003588 	.word	0x20003588

90009e7c <DMA2_Stream4_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
90009e7c:	4b01      	ldr	r3, [pc, #4]	; (90009e84 <DMA2_Stream4_IRQHandler+0x8>)
90009e7e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
90009e80:	f7f8 bfe2 	b.w	90002e48 <HAL_DMA_IRQHandler>
90009e84:	2000016c 	.word	0x2000016c

90009e88 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
90009e88:	4b01      	ldr	r3, [pc, #4]	; (90009e90 <DMA2_Stream7_IRQHandler+0x8>)
90009e8a:	6f18      	ldr	r0, [r3, #112]	; 0x70
90009e8c:	f7f8 bfdc 	b.w	90002e48 <HAL_DMA_IRQHandler>
90009e90:	200001f0 	.word	0x200001f0

90009e94 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90009e94:	490f      	ldr	r1, [pc, #60]	; (90009ed4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90009e96:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90009e98:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
90009e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90009ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
90009ea4:	4b0c      	ldr	r3, [pc, #48]	; (90009ed8 <SystemInit+0x44>)
90009ea6:	681a      	ldr	r2, [r3, #0]
90009ea8:	f042 0201 	orr.w	r2, r2, #1
90009eac:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
90009eae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
90009eb0:	681a      	ldr	r2, [r3, #0]
90009eb2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
90009eb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90009eba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
90009ebc:	4a07      	ldr	r2, [pc, #28]	; (90009edc <SystemInit+0x48>)
90009ebe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
90009ec0:	681a      	ldr	r2, [r3, #0]
90009ec2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
90009ec6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
90009ec8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
90009eca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
90009ece:	608b      	str	r3, [r1, #8]
#endif
}
90009ed0:	4770      	bx	lr
90009ed2:	bf00      	nop
90009ed4:	e000ed00 	.word	0xe000ed00
90009ed8:	40023800 	.word	0x40023800
90009edc:	24003010 	.word	0x24003010

90009ee0 <AUDIO_AcquireTouchButtons>:
  * @brief  Test touch screen state and modify audio state machine according to that
  * @param  None
  * @retval None
  */
static void AUDIO_AcquireTouchButtons(void)
{
90009ee0:	b510      	push	{r4, lr}
  static TS_StateTypeDef  TS_State={0};

  if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
90009ee2:	4c2e      	ldr	r4, [pc, #184]	; (90009f9c <AUDIO_AcquireTouchButtons+0xbc>)
90009ee4:	7823      	ldrb	r3, [r4, #0]
  {
    BSP_TS_GetState(&TS_State);
90009ee6:	4620      	mov	r0, r4
  if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
90009ee8:	2b01      	cmp	r3, #1
90009eea:	d103      	bne.n	90009ef4 <AUDIO_AcquireTouchButtons+0x14>
      {
        AudioState = AUDIO_STATE_VOLUME_UP;
      }
    }
  }
}
90009eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BSP_TS_GetState(&TS_State);
90009ef0:	f7f8 bcf8 	b.w	900028e4 <BSP_TS_GetState>
    BSP_TS_GetState(&TS_State);
90009ef4:	f7f8 fcf6 	bl	900028e4 <BSP_TS_GetState>
    if(TS_State.touchDetected == 1)
90009ef8:	7823      	ldrb	r3, [r4, #0]
90009efa:	2b01      	cmp	r3, #1
90009efc:	d110      	bne.n	90009f20 <AUDIO_AcquireTouchButtons+0x40>
      if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
90009efe:	8863      	ldrh	r3, [r4, #2]
90009f00:	f1a3 0265 	sub.w	r2, r3, #101	; 0x65
90009f04:	2a16      	cmp	r2, #22
90009f06:	d80c      	bhi.n	90009f22 <AUDIO_AcquireTouchButtons+0x42>
90009f08:	89a2      	ldrh	r2, [r4, #12]
90009f0a:	3ad5      	subs	r2, #213	; 0xd5
90009f0c:	b292      	uxth	r2, r2
90009f0e:	2a26      	cmp	r2, #38	; 0x26
90009f10:	d81f      	bhi.n	90009f52 <AUDIO_AcquireTouchButtons+0x72>
        if (AudioState == AUDIO_STATE_PLAY)
90009f12:	4b23      	ldr	r3, [pc, #140]	; (90009fa0 <AUDIO_AcquireTouchButtons+0xc0>)
90009f14:	781a      	ldrb	r2, [r3, #0]
90009f16:	2a03      	cmp	r2, #3
          AudioState = AUDIO_STATE_PAUSE;
90009f18:	bf0c      	ite	eq
90009f1a:	220b      	moveq	r2, #11
          AudioState = AUDIO_STATE_RESUME;
90009f1c:	220c      	movne	r2, #12
        AudioState = AUDIO_STATE_VOLUME_UP;
90009f1e:	701a      	strb	r2, [r3, #0]
}
90009f20:	bd10      	pop	{r4, pc}
      else if ((TS_State.touchX[0] > TOUCH_NEXT_XMIN) && (TS_State.touchX[0] < TOUCH_NEXT_XMAX) &&
90009f22:	f5a3 72a3 	sub.w	r2, r3, #326	; 0x146
90009f26:	2a26      	cmp	r2, #38	; 0x26
90009f28:	d807      	bhi.n	90009f3a <AUDIO_AcquireTouchButtons+0x5a>
90009f2a:	89a2      	ldrh	r2, [r4, #12]
90009f2c:	3ad5      	subs	r2, #213	; 0xd5
90009f2e:	b292      	uxth	r2, r2
90009f30:	2a26      	cmp	r2, #38	; 0x26
90009f32:	d81a      	bhi.n	90009f6a <AUDIO_AcquireTouchButtons+0x8a>
        AudioState = AUDIO_STATE_NEXT;
90009f34:	4b1a      	ldr	r3, [pc, #104]	; (90009fa0 <AUDIO_AcquireTouchButtons+0xc0>)
90009f36:	2206      	movs	r2, #6
90009f38:	e7f1      	b.n	90009f1e <AUDIO_AcquireTouchButtons+0x3e>
      else if ((TS_State.touchX[0] > TOUCH_PREVIOUS_XMIN) && (TS_State.touchX[0] < TOUCH_PREVIOUS_XMAX) &&
90009f3a:	f1a3 02fb 	sub.w	r2, r3, #251	; 0xfb
90009f3e:	2a26      	cmp	r2, #38	; 0x26
90009f40:	d807      	bhi.n	90009f52 <AUDIO_AcquireTouchButtons+0x72>
90009f42:	89a2      	ldrh	r2, [r4, #12]
90009f44:	3ad5      	subs	r2, #213	; 0xd5
90009f46:	b292      	uxth	r2, r2
90009f48:	2a26      	cmp	r2, #38	; 0x26
90009f4a:	d81a      	bhi.n	90009f82 <AUDIO_AcquireTouchButtons+0xa2>
        AudioState = AUDIO_STATE_PREVIOUS;
90009f4c:	4b14      	ldr	r3, [pc, #80]	; (90009fa0 <AUDIO_AcquireTouchButtons+0xc0>)
90009f4e:	2207      	movs	r2, #7
90009f50:	e7e5      	b.n	90009f1e <AUDIO_AcquireTouchButtons+0x3e>
      else if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
90009f52:	f1a3 02ab 	sub.w	r2, r3, #171	; 0xab
90009f56:	2a26      	cmp	r2, #38	; 0x26
90009f58:	d807      	bhi.n	90009f6a <AUDIO_AcquireTouchButtons+0x8a>
90009f5a:	89a3      	ldrh	r3, [r4, #12]
90009f5c:	3bd5      	subs	r3, #213	; 0xd5
90009f5e:	b29b      	uxth	r3, r3
90009f60:	2b26      	cmp	r3, #38	; 0x26
90009f62:	d8dd      	bhi.n	90009f20 <AUDIO_AcquireTouchButtons+0x40>
        AudioState = AUDIO_STATE_STOP;
90009f64:	4b0e      	ldr	r3, [pc, #56]	; (90009fa0 <AUDIO_AcquireTouchButtons+0xc0>)
90009f66:	220a      	movs	r2, #10
90009f68:	e7d9      	b.n	90009f1e <AUDIO_AcquireTouchButtons+0x3e>
      else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
90009f6a:	f1a3 0215 	sub.w	r2, r3, #21
90009f6e:	2a30      	cmp	r2, #48	; 0x30
90009f70:	d807      	bhi.n	90009f82 <AUDIO_AcquireTouchButtons+0xa2>
90009f72:	89a3      	ldrh	r3, [r4, #12]
90009f74:	3bd5      	subs	r3, #213	; 0xd5
90009f76:	b29b      	uxth	r3, r3
90009f78:	2b26      	cmp	r3, #38	; 0x26
90009f7a:	d8d1      	bhi.n	90009f20 <AUDIO_AcquireTouchButtons+0x40>
        AudioState = AUDIO_STATE_VOLUME_DOWN;
90009f7c:	4b08      	ldr	r3, [pc, #32]	; (90009fa0 <AUDIO_AcquireTouchButtons+0xc0>)
90009f7e:	220e      	movs	r2, #14
90009f80:	e7cd      	b.n	90009f1e <AUDIO_AcquireTouchButtons+0x3e>
      else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
90009f82:	f46f 72c9 	mvn.w	r2, #402	; 0x192
90009f86:	4413      	add	r3, r2
90009f88:	2b30      	cmp	r3, #48	; 0x30
90009f8a:	d8c9      	bhi.n	90009f20 <AUDIO_AcquireTouchButtons+0x40>
90009f8c:	89a3      	ldrh	r3, [r4, #12]
90009f8e:	3bd5      	subs	r3, #213	; 0xd5
90009f90:	b29b      	uxth	r3, r3
90009f92:	2b26      	cmp	r3, #38	; 0x26
90009f94:	d8c4      	bhi.n	90009f20 <AUDIO_AcquireTouchButtons+0x40>
        AudioState = AUDIO_STATE_VOLUME_UP;
90009f96:	4b02      	ldr	r3, [pc, #8]	; (90009fa0 <AUDIO_AcquireTouchButtons+0xc0>)
90009f98:	220d      	movs	r2, #13
90009f9a:	e7c0      	b.n	90009f1e <AUDIO_AcquireTouchButtons+0x3e>
90009f9c:	200012f4 	.word	0x200012f4
90009fa0:	200012f2 	.word	0x200012f2

90009fa4 <AUDIO_PLAYER_Init>:
{
90009fa4:	b508      	push	{r3, lr}
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, uwVolume, I2S_AUDIOFREQ_44K) == 0)
90009fa6:	4b06      	ldr	r3, [pc, #24]	; (90009fc0 <AUDIO_PLAYER_Init+0x1c>)
90009fa8:	f64a 4244 	movw	r2, #44100	; 0xac44
90009fac:	2004      	movs	r0, #4
90009fae:	6819      	ldr	r1, [r3, #0]
90009fb0:	b2c9      	uxtb	r1, r1
90009fb2:	f7f7 fa07 	bl	900013c4 <BSP_AUDIO_OUT_Init>
}
90009fb6:	3800      	subs	r0, #0
90009fb8:	bf18      	it	ne
90009fba:	2001      	movne	r0, #1
90009fbc:	bd08      	pop	{r3, pc}
90009fbe:	bf00      	nop
90009fc0:	200000b8 	.word	0x200000b8

90009fc4 <AUDIO_PLAYER_Start>:
{
90009fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  f_close(&WavFile);
90009fc8:	4c9b      	ldr	r4, [pc, #620]	; (9000a238 <AUDIO_PLAYER_Start+0x274>)
{
90009fca:	4607      	mov	r7, r0
90009fcc:	b092      	sub	sp, #72	; 0x48
  f_close(&WavFile);
90009fce:	f104 002c 	add.w	r0, r4, #44	; 0x2c
90009fd2:	f7ff f95d 	bl	90009290 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
90009fd6:	f7ff fc81 	bl	900098dc <AUDIO_GetWavObjectNumber>
90009fda:	42b8      	cmp	r0, r7
90009fdc:	d804      	bhi.n	90009fe8 <AUDIO_PLAYER_Start+0x24>
  return AUDIO_ERROR_IO;
90009fde:	2401      	movs	r4, #1
}
90009fe0:	4620      	mov	r0, r4
90009fe2:	b012      	add	sp, #72	; 0x48
90009fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(f_open(&WavFile, (char *)FileList.file[file_idx].name, FA_OPEN_EXISTING | FA_READ) == FR_OK) 
90009fe8:	2201      	movs	r2, #1
90009fea:	2529      	movs	r5, #41	; 0x29
90009fec:	f8df 8294 	ldr.w	r8, [pc, #660]	; 9000a284 <AUDIO_PLAYER_Start+0x2c0>
90009ff0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
90009ff4:	fb15 2507 	smlabb	r5, r5, r7, r2
90009ff8:	4e90      	ldr	r6, [pc, #576]	; (9000a23c <AUDIO_PLAYER_Start+0x278>)
90009ffa:	4445      	add	r5, r8
90009ffc:	4629      	mov	r1, r5
90009ffe:	f7fe fe75 	bl	90008cec <f_open>
9000a002:	2800      	cmp	r0, #0
9000a004:	d16d      	bne.n	9000a0e2 <AUDIO_PLAYER_Start+0x11e>
    if(f_read(&WavFile, info, sizeof(WaveFormat), (void *)&bytesread) == FR_OK)
9000a006:	222c      	movs	r2, #44	; 0x2c
9000a008:	ab02      	add	r3, sp, #8
9000a00a:	f504 7117 	add.w	r1, r4, #604	; 0x25c
9000a00e:	18a0      	adds	r0, r4, r2
9000a010:	f7fe ff7c 	bl	90008f0c <f_read>
9000a014:	2800      	cmp	r0, #0
9000a016:	f040 810a 	bne.w	9000a22e <AUDIO_PLAYER_Start+0x26a>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
9000a01a:	f04f 30ff 	mov.w	r0, #4294967295
9000a01e:	f7f7 fc19 	bl	90001854 <BSP_LCD_SetTextColor>
      sprintf((char *)str, "Playing file (%d/%d): %s", 
9000a022:	f8b8 33d8 	ldrh.w	r3, [r8, #984]	; 0x3d8
9000a026:	1c7a      	adds	r2, r7, #1
9000a028:	4985      	ldr	r1, [pc, #532]	; (9000a240 <AUDIO_PLAYER_Start+0x27c>)
9000a02a:	a803      	add	r0, sp, #12
9000a02c:	9500      	str	r5, [sp, #0]
9000a02e:	f001 fb0b 	bl	9000b648 <siprintf>
      BSP_LCD_ClearStringLine(4);
9000a032:	2004      	movs	r0, #4
9000a034:	f7f7 ff3e 	bl	90001eb4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(4, str);
9000a038:	a903      	add	r1, sp, #12
9000a03a:	2004      	movs	r0, #4
9000a03c:	f7f7 fda0 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN); 
9000a040:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a044:	f7f7 fc06 	bl	90001854 <BSP_LCD_SetTextColor>
      sprintf((char *)str,  "Sample rate : %d Hz", (int)(info->SampleRate));
9000a048:	f8d4 2274 	ldr.w	r2, [r4, #628]	; 0x274
9000a04c:	497d      	ldr	r1, [pc, #500]	; (9000a244 <AUDIO_PLAYER_Start+0x280>)
9000a04e:	a803      	add	r0, sp, #12
9000a050:	f001 fafa 	bl	9000b648 <siprintf>
      BSP_LCD_ClearStringLine(6);
9000a054:	2006      	movs	r0, #6
9000a056:	f7f7 ff2d 	bl	90001eb4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(6, str);
9000a05a:	a903      	add	r1, sp, #12
9000a05c:	2006      	movs	r0, #6
9000a05e:	f7f7 fd8f 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str,  "Channels number : %d", info->NbrChannels);
9000a062:	f8b4 2272 	ldrh.w	r2, [r4, #626]	; 0x272
9000a066:	4978      	ldr	r1, [pc, #480]	; (9000a248 <AUDIO_PLAYER_Start+0x284>)
9000a068:	a803      	add	r0, sp, #12
9000a06a:	f001 faed 	bl	9000b648 <siprintf>
      BSP_LCD_ClearStringLine(7);      
9000a06e:	2007      	movs	r0, #7
9000a070:	f7f7 ff20 	bl	90001eb4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
9000a074:	a903      	add	r1, sp, #12
9000a076:	2007      	movs	r0, #7
9000a078:	f7f7 fd82 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
      duration = info->FileSize / info->ByteRate; 
9000a07c:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
9000a080:	f8d4 1278 	ldr.w	r1, [r4, #632]	; 0x278
      sprintf((char *)str, "File Size : %d KB [%02d:%02d]", (int)(info->FileSize/1024), (int)(duration/60), (int)(duration%60));
9000a084:	203c      	movs	r0, #60	; 0x3c
      duration = info->FileSize / info->ByteRate; 
9000a086:	fbb2 f1f1 	udiv	r1, r2, r1
      sprintf((char *)str, "File Size : %d KB [%02d:%02d]", (int)(info->FileSize/1024), (int)(duration/60), (int)(duration%60));
9000a08a:	fbb1 f3f0 	udiv	r3, r1, r0
9000a08e:	fb00 1113 	mls	r1, r0, r3, r1
9000a092:	0a92      	lsrs	r2, r2, #10
9000a094:	a803      	add	r0, sp, #12
9000a096:	9100      	str	r1, [sp, #0]
9000a098:	496c      	ldr	r1, [pc, #432]	; (9000a24c <AUDIO_PLAYER_Start+0x288>)
9000a09a:	f001 fad5 	bl	9000b648 <siprintf>
      BSP_LCD_ClearStringLine(8);
9000a09e:	2008      	movs	r0, #8
9000a0a0:	f7f7 ff08 	bl	90001eb4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(8, str);
9000a0a4:	a903      	add	r1, sp, #12
9000a0a6:	2008      	movs	r0, #8
9000a0a8:	f7f7 fd6a 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
      BSP_LCD_DisplayStringAt(263, LINE(8), (uint8_t *)"[00:00]", LEFT_MODE);
9000a0ac:	f7f7 fbf6 	bl	9000189c <BSP_LCD_GetFont>
9000a0b0:	88c1      	ldrh	r1, [r0, #6]
9000a0b2:	2303      	movs	r3, #3
9000a0b4:	4a66      	ldr	r2, [pc, #408]	; (9000a250 <AUDIO_PLAYER_Start+0x28c>)
9000a0b6:	00c9      	lsls	r1, r1, #3
9000a0b8:	f240 1007 	movw	r0, #263	; 0x107
9000a0bc:	b289      	uxth	r1, r1
9000a0be:	f7f7 fd09 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
9000a0c2:	f04f 30ff 	mov.w	r0, #4294967295
9000a0c6:	f7f7 fbc5 	bl	90001854 <BSP_LCD_SetTextColor>
      sprintf((char *)str,  "Volume : %lu", uwVolume);
9000a0ca:	4962      	ldr	r1, [pc, #392]	; (9000a254 <AUDIO_PLAYER_Start+0x290>)
9000a0cc:	6832      	ldr	r2, [r6, #0]
9000a0ce:	a803      	add	r0, sp, #12
9000a0d0:	f001 faba 	bl	9000b648 <siprintf>
      BSP_LCD_ClearStringLine(9);      
9000a0d4:	2009      	movs	r0, #9
9000a0d6:	f7f7 feed 	bl	90001eb4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(9, str);
9000a0da:	a903      	add	r1, sp, #12
9000a0dc:	2009      	movs	r0, #9
9000a0de:	f7f7 fd4f 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
9000a0e2:	6831      	ldr	r1, [r6, #0]
9000a0e4:	2003      	movs	r0, #3
9000a0e6:	f8d4 2274 	ldr.w	r2, [r4, #628]	; 0x274
9000a0ea:	b2c9      	uxtb	r1, r1
9000a0ec:	f7f7 f96a 	bl	900013c4 <BSP_AUDIO_OUT_Init>
9000a0f0:	b910      	cbnz	r0, 9000a0f8 <AUDIO_PLAYER_Start+0x134>
    BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
9000a0f2:	2005      	movs	r0, #5
9000a0f4:	f7f7 f8a0 	bl	90001238 <BSP_AUDIO_OUT_SetAudioFrameSlot>
    BufferCtl.state = BUFFER_OFFSET_NONE;
9000a0f8:	2100      	movs	r1, #0
9000a0fa:	4e57      	ldr	r6, [pc, #348]	; (9000a258 <AUDIO_PLAYER_Start+0x294>)
    f_lseek(&WavFile, 0);
9000a0fc:	4857      	ldr	r0, [pc, #348]	; (9000a25c <AUDIO_PLAYER_Start+0x298>)
    BufferCtl.state = BUFFER_OFFSET_NONE;
9000a0fe:	7031      	strb	r1, [r6, #0]
    f_lseek(&WavFile, 0);
9000a100:	f7ff f8d7 	bl	900092b2 <f_lseek>
    if(f_read(&WavFile, 
9000a104:	ab03      	add	r3, sp, #12
9000a106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
9000a10a:	f5a6 5100 	sub.w	r1, r6, #8192	; 0x2000
9000a10e:	4853      	ldr	r0, [pc, #332]	; (9000a25c <AUDIO_PLAYER_Start+0x298>)
9000a110:	f7fe fefc 	bl	90008f0c <f_read>
9000a114:	4604      	mov	r4, r0
9000a116:	2800      	cmp	r0, #0
9000a118:	f47f af61 	bne.w	90009fde <AUDIO_PLAYER_Start+0x1a>
      AudioState = AUDIO_STATE_PLAY;
9000a11c:	4b50      	ldr	r3, [pc, #320]	; (9000a260 <AUDIO_PLAYER_Start+0x29c>)
9000a11e:	2503      	movs	r5, #3
  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
9000a120:	4850      	ldr	r0, [pc, #320]	; (9000a264 <AUDIO_PLAYER_Start+0x2a0>)
      AudioState = AUDIO_STATE_PLAY;
9000a122:	701d      	strb	r5, [r3, #0]
  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
9000a124:	f7f7 fbae 	bl	90001884 <BSP_LCD_SetFont>
  BSP_LCD_ClearStringLine(13);            /* Clear dedicated zone */
9000a128:	200d      	movs	r0, #13
9000a12a:	f7f7 fec3 	bl	90001eb4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(14);
9000a12e:	200e      	movs	r0, #14
9000a130:	f7f7 fec0 	bl	90001eb4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(15);
9000a134:	200f      	movs	r0, #15
9000a136:	f7f7 febd 	bl	90001eb4 <BSP_LCD_ClearStringLine>
  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000a13a:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a13e:	f7f7 fb89 	bl	90001854 <BSP_LCD_SetTextColor>
  BSP_LCD_FillPolygon(PreviousPoints, 3);   /* Previous track icon */
9000a142:	4629      	mov	r1, r5
9000a144:	4848      	ldr	r0, [pc, #288]	; (9000a268 <AUDIO_PLAYER_Start+0x2a4>)
9000a146:	f7f7 ff45 	bl	90001fd4 <BSP_LCD_FillPolygon>
  BSP_LCD_FillRect(TOUCH_PREVIOUS_XMIN, TOUCH_PREVIOUS_YMIN , 10, TOUCH_PREVIOUS_YMAX - TOUCH_PREVIOUS_YMIN);
9000a14a:	2328      	movs	r3, #40	; 0x28
9000a14c:	220a      	movs	r2, #10
9000a14e:	21d4      	movs	r1, #212	; 0xd4
9000a150:	20fa      	movs	r0, #250	; 0xfa
9000a152:	f7f7 fe73 	bl	90001e3c <BSP_LCD_FillRect>
  BSP_LCD_FillPolygon(NextPoints, 3);       /* Next track icon */
9000a156:	4629      	mov	r1, r5
9000a158:	4844      	ldr	r0, [pc, #272]	; (9000a26c <AUDIO_PLAYER_Start+0x2a8>)
9000a15a:	f7f7 ff3b 	bl	90001fd4 <BSP_LCD_FillPolygon>
  BSP_LCD_FillRect(TOUCH_NEXT_XMAX-9, TOUCH_NEXT_YMIN , 10, TOUCH_NEXT_YMAX - TOUCH_NEXT_YMIN);
9000a15e:	2328      	movs	r3, #40	; 0x28
9000a160:	220a      	movs	r2, #10
9000a162:	21d4      	movs	r1, #212	; 0xd4
9000a164:	f44f 70b2 	mov.w	r0, #356	; 0x164
9000a168:	f7f7 fe68 	bl	90001e3c <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);    /* Pause rectangles */
9000a16c:	2328      	movs	r3, #40	; 0x28
9000a16e:	220f      	movs	r2, #15
9000a170:	21d4      	movs	r1, #212	; 0xd4
9000a172:	2064      	movs	r0, #100	; 0x64
9000a174:	f7f7 fe62 	bl	90001e3c <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000a178:	2328      	movs	r3, #40	; 0x28
9000a17a:	220f      	movs	r2, #15
9000a17c:	21d4      	movs	r1, #212	; 0xd4
9000a17e:	2078      	movs	r0, #120	; 0x78
9000a180:	f7f7 fe5c 	bl	90001e3c <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
9000a184:	2328      	movs	r3, #40	; 0x28
9000a186:	21d4      	movs	r1, #212	; 0xd4
9000a188:	20aa      	movs	r0, #170	; 0xaa
9000a18a:	461a      	mov	r2, r3
9000a18c:	f7f7 fe56 	bl	90001e3c <BSP_LCD_FillRect>
  BSP_LCD_DrawRect(TOUCH_VOL_MINUS_XMIN, TOUCH_VOL_MINUS_YMIN , /* VOl- rectangle */
9000a190:	2328      	movs	r3, #40	; 0x28
9000a192:	2232      	movs	r2, #50	; 0x32
9000a194:	21d4      	movs	r1, #212	; 0xd4
9000a196:	2014      	movs	r0, #20
9000a198:	f7f7 fc04 	bl	900019a4 <BSP_LCD_DrawRect>
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl-", LEFT_MODE);
9000a19c:	f7f7 fb7e 	bl	9000189c <BSP_LCD_GetFont>
9000a1a0:	88c1      	ldrh	r1, [r0, #6]
9000a1a2:	462b      	mov	r3, r5
9000a1a4:	4a32      	ldr	r2, [pc, #200]	; (9000a270 <AUDIO_PLAYER_Start+0x2ac>)
9000a1a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
9000a1aa:	2018      	movs	r0, #24
9000a1ac:	0049      	lsls	r1, r1, #1
9000a1ae:	b289      	uxth	r1, r1
9000a1b0:	f7f7 fc90 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(TOUCH_VOL_PLUS_XMIN, TOUCH_VOL_PLUS_YMIN , /* VOl+ rectangle */
9000a1b4:	2328      	movs	r3, #40	; 0x28
9000a1b6:	2232      	movs	r2, #50	; 0x32
9000a1b8:	21d4      	movs	r1, #212	; 0xd4
9000a1ba:	f44f 70c9 	mov.w	r0, #402	; 0x192
9000a1be:	f7f7 fbf1 	bl	900019a4 <BSP_LCD_DrawRect>
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl+", RIGHT_MODE);
9000a1c2:	f7f7 fb6b 	bl	9000189c <BSP_LCD_GetFont>
9000a1c6:	88c1      	ldrh	r1, [r0, #6]
9000a1c8:	2302      	movs	r3, #2
9000a1ca:	4a2a      	ldr	r2, [pc, #168]	; (9000a274 <AUDIO_PLAYER_Start+0x2b0>)
9000a1cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
9000a1d0:	2018      	movs	r0, #24
9000a1d2:	0049      	lsls	r1, r1, #1
9000a1d4:	b289      	uxth	r1, r1
9000a1d6:	f7f7 fc7d 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
9000a1da:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
9000a1de:	f7f7 fb39 	bl	90001854 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000a1e2:	4825      	ldr	r0, [pc, #148]	; (9000a278 <AUDIO_PLAYER_Start+0x2b4>)
9000a1e4:	f7f7 fb4e 	bl	90001884 <BSP_LCD_SetFont>
  BSP_LCD_ClearStringLine(15);
9000a1e8:	200f      	movs	r0, #15
9000a1ea:	f7f7 fe63 	bl	90001eb4 <BSP_LCD_ClearStringLine>
  BSP_LCD_DisplayStringAtLine(15, (uint8_t *)"Use stop button to exit");
9000a1ee:	4923      	ldr	r1, [pc, #140]	; (9000a27c <AUDIO_PLAYER_Start+0x2b8>)
9000a1f0:	200f      	movs	r0, #15
9000a1f2:	f7f7 fcc5 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000a1f6:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a1fa:	f7f7 fb2b 	bl	90001854 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t *)"  [PLAY ]", LEFT_MODE);
9000a1fe:	f7f7 fb4d 	bl	9000189c <BSP_LCD_GetFont>
9000a202:	88c1      	ldrh	r1, [r0, #6]
9000a204:	462b      	mov	r3, r5
9000a206:	4a1e      	ldr	r2, [pc, #120]	; (9000a280 <AUDIO_PLAYER_Start+0x2bc>)
9000a208:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
9000a20c:	20fa      	movs	r0, #250	; 0xfa
9000a20e:	b289      	uxth	r1, r1
9000a210:	f7f7 fc60 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
        if(bytesread != 0)
9000a214:	9b03      	ldr	r3, [sp, #12]
9000a216:	2b00      	cmp	r3, #0
9000a218:	f43f aee1 	beq.w	90009fde <AUDIO_PLAYER_Start+0x1a>
          BSP_AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
9000a21c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
9000a220:	f5a6 5000 	sub.w	r0, r6, #8192	; 0x2000
9000a224:	f7f6 ff9e 	bl	90001164 <BSP_AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
9000a228:	9b03      	ldr	r3, [sp, #12]
9000a22a:	6073      	str	r3, [r6, #4]
          return AUDIO_ERROR_NONE;
9000a22c:	e6d8      	b.n	90009fe0 <AUDIO_PLAYER_Start+0x1c>
    f_close(&WavFile);
9000a22e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
9000a232:	f7ff f82d 	bl	90009290 <f_close>
9000a236:	e754      	b.n	9000a0e2 <AUDIO_PLAYER_Start+0x11e>
9000a238:	200012f4 	.word	0x200012f4
9000a23c:	200000b8 	.word	0x200000b8
9000a240:	90011039 	.word	0x90011039
9000a244:	90011052 	.word	0x90011052
9000a248:	90011066 	.word	0x90011066
9000a24c:	9001107b 	.word	0x9001107b
9000a250:	90011099 	.word	0x90011099
9000a254:	900110a1 	.word	0x900110a1
9000a258:	20003580 	.word	0x20003580
9000a25c:	20001320 	.word	0x20001320
9000a260:	200012f2 	.word	0x200012f2
9000a264:	20000078 	.word	0x20000078
9000a268:	200000bc 	.word	0x200000bc
9000a26c:	200000c8 	.word	0x200000c8
9000a270:	900110ae 	.word	0x900110ae
9000a274:	900110b3 	.word	0x900110b3
9000a278:	20000070 	.word	0x20000070
9000a27c:	900110b8 	.word	0x900110b8
9000a280:	900110d0 	.word	0x900110d0
9000a284:	20000790 	.word	0x20000790

9000a288 <AUDIO_PLAYER_Process>:
{
9000a288:	b570      	push	{r4, r5, r6, lr}
  switch(AudioState)
9000a28a:	4d88      	ldr	r5, [pc, #544]	; (9000a4ac <AUDIO_PLAYER_Process+0x224>)
{
9000a28c:	b086      	sub	sp, #24
  switch(AudioState)
9000a28e:	782b      	ldrb	r3, [r5, #0]
9000a290:	3b03      	subs	r3, #3
9000a292:	2b0b      	cmp	r3, #11
9000a294:	d85c      	bhi.n	9000a350 <AUDIO_PLAYER_Process+0xc8>
9000a296:	e8df f013 	tbh	[pc, r3, lsl #1]
9000a29a:	000c      	.short	0x000c
9000a29c:	005b005b 	.word	0x005b005b
9000a2a0:	008c006d 	.word	0x008c006d
9000a2a4:	005b005b 	.word	0x005b005b
9000a2a8:	00a0005e 	.word	0x00a0005e
9000a2ac:	00e900c3 	.word	0x00e900c3
9000a2b0:	0102      	.short	0x0102
    if(BufferCtl.fptr >= WaveFormat.FileSize)
9000a2b2:	4c7f      	ldr	r4, [pc, #508]	; (9000a4b0 <AUDIO_PLAYER_Process+0x228>)
9000a2b4:	4e7f      	ldr	r6, [pc, #508]	; (9000a4b4 <AUDIO_PLAYER_Process+0x22c>)
9000a2b6:	6862      	ldr	r2, [r4, #4]
9000a2b8:	f8d6 3260 	ldr.w	r3, [r6, #608]	; 0x260
9000a2bc:	429a      	cmp	r2, r3
9000a2be:	d304      	bcc.n	9000a2ca <AUDIO_PLAYER_Process+0x42>
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
9000a2c0:	2002      	movs	r0, #2
9000a2c2:	f7f6 ff91 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
9000a2c6:	2306      	movs	r3, #6
9000a2c8:	702b      	strb	r3, [r5, #0]
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
9000a2ca:	7823      	ldrb	r3, [r4, #0]
9000a2cc:	2b01      	cmp	r3, #1
9000a2ce:	d10d      	bne.n	9000a2ec <AUDIO_PLAYER_Process+0x64>
      if(f_read(&WavFile, 
9000a2d0:	ab01      	add	r3, sp, #4
9000a2d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
9000a2d6:	4978      	ldr	r1, [pc, #480]	; (9000a4b8 <AUDIO_PLAYER_Process+0x230>)
9000a2d8:	4878      	ldr	r0, [pc, #480]	; (9000a4bc <AUDIO_PLAYER_Process+0x234>)
9000a2da:	f7fe fe17 	bl	90008f0c <f_read>
9000a2de:	b160      	cbz	r0, 9000a2fa <AUDIO_PLAYER_Process+0x72>
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW); 
9000a2e0:	2002      	movs	r0, #2
9000a2e2:	f7f6 ff81 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
    audio_error = AUDIO_ERROR_IO;
9000a2e6:	2001      	movs	r0, #1
}
9000a2e8:	b006      	add	sp, #24
9000a2ea:	bd70      	pop	{r4, r5, r6, pc}
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
9000a2ec:	2b02      	cmp	r3, #2
9000a2ee:	d109      	bne.n	9000a304 <AUDIO_PLAYER_Process+0x7c>
      if(f_read(&WavFile, 
9000a2f0:	ab01      	add	r3, sp, #4
9000a2f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
9000a2f6:	4972      	ldr	r1, [pc, #456]	; (9000a4c0 <AUDIO_PLAYER_Process+0x238>)
9000a2f8:	e7ee      	b.n	9000a2d8 <AUDIO_PLAYER_Process+0x50>
      BufferCtl.fptr += bytesread; 
9000a2fa:	6863      	ldr	r3, [r4, #4]
9000a2fc:	9a01      	ldr	r2, [sp, #4]
      BufferCtl.state = BUFFER_OFFSET_NONE;
9000a2fe:	7020      	strb	r0, [r4, #0]
      BufferCtl.fptr += bytesread; 
9000a300:	4413      	add	r3, r2
9000a302:	6063      	str	r3, [r4, #4]
    elapsed_time = BufferCtl.fptr / WaveFormat.ByteRate; 
9000a304:	f8d6 2278 	ldr.w	r2, [r6, #632]	; 0x278
9000a308:	6863      	ldr	r3, [r4, #4]
9000a30a:	fbb3 f3f2 	udiv	r3, r3, r2
    if(prev_elapsed_time != elapsed_time)
9000a30e:	4a6d      	ldr	r2, [pc, #436]	; (9000a4c4 <AUDIO_PLAYER_Process+0x23c>)
9000a310:	69d1      	ldr	r1, [r2, #28]
9000a312:	4299      	cmp	r1, r3
9000a314:	d01c      	beq.n	9000a350 <AUDIO_PLAYER_Process+0xc8>
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
9000a316:	213c      	movs	r1, #60	; 0x3c
      prev_elapsed_time = elapsed_time;
9000a318:	61d3      	str	r3, [r2, #28]
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
9000a31a:	a802      	add	r0, sp, #8
9000a31c:	fbb3 f2f1 	udiv	r2, r3, r1
9000a320:	fb01 3312 	mls	r3, r1, r2, r3
9000a324:	4968      	ldr	r1, [pc, #416]	; (9000a4c8 <AUDIO_PLAYER_Process+0x240>)
9000a326:	f001 f98f 	bl	9000b648 <siprintf>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN); 
9000a32a:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a32e:	f7f7 fa91 	bl	90001854 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(263, LINE(8), str, LEFT_MODE);
9000a332:	f7f7 fab3 	bl	9000189c <BSP_LCD_GetFont>
9000a336:	88c1      	ldrh	r1, [r0, #6]
9000a338:	2303      	movs	r3, #3
9000a33a:	f240 1007 	movw	r0, #263	; 0x107
9000a33e:	00c9      	lsls	r1, r1, #3
9000a340:	aa02      	add	r2, sp, #8
9000a342:	b289      	uxth	r1, r1
9000a344:	f7f7 fbc6 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
9000a348:	f04f 30ff 	mov.w	r0, #4294967295
9000a34c:	f7f7 fa82 	bl	90001854 <BSP_LCD_SetTextColor>
    AUDIO_AcquireTouchButtons();
9000a350:	f7ff fdc6 	bl	90009ee0 <AUDIO_AcquireTouchButtons>
9000a354:	e02b      	b.n	9000a3ae <AUDIO_PLAYER_Process+0x126>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000a356:	485d      	ldr	r0, [pc, #372]	; (9000a4cc <AUDIO_PLAYER_Process+0x244>)
9000a358:	f7f7 fa7c 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
9000a35c:	2328      	movs	r3, #40	; 0x28
9000a35e:	21d4      	movs	r1, #212	; 0xd4
9000a360:	20aa      	movs	r0, #170	; 0xaa
9000a362:	461a      	mov	r2, r3
9000a364:	f7f7 fd6a 	bl	90001e3c <BSP_LCD_FillRect>
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
9000a368:	2002      	movs	r0, #2
9000a36a:	f7f6 ff3d 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
9000a36e:	2300      	movs	r3, #0
9000a370:	702b      	strb	r3, [r5, #0]
9000a372:	e7b8      	b.n	9000a2e6 <AUDIO_PLAYER_Process+0x5e>
    if(++FilePos >= AUDIO_GetWavObjectNumber())
9000a374:	4d4f      	ldr	r5, [pc, #316]	; (9000a4b4 <AUDIO_PLAYER_Process+0x22c>)
9000a376:	f8b5 4288 	ldrh.w	r4, [r5, #648]	; 0x288
9000a37a:	3401      	adds	r4, #1
9000a37c:	b224      	sxth	r4, r4
9000a37e:	f8a5 4288 	strh.w	r4, [r5, #648]	; 0x288
9000a382:	f7ff faab 	bl	900098dc <AUDIO_GetWavObjectNumber>
9000a386:	4284      	cmp	r4, r0
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
9000a388:	f04f 0002 	mov.w	r0, #2
      FilePos = 0; 
9000a38c:	bfa4      	itt	ge
9000a38e:	2300      	movge	r3, #0
9000a390:	f8a5 3288 	strhge.w	r3, [r5, #648]	; 0x288
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
9000a394:	f7f6 ff28 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
9000a398:	f895 0288 	ldrb.w	r0, [r5, #648]	; 0x288
    AUDIO_PLAYER_Start(FilePos);
9000a39c:	f7ff fe12 	bl	90009fc4 <AUDIO_PLAYER_Start>
    if(uwVolume == 0)
9000a3a0:	4b48      	ldr	r3, [pc, #288]	; (9000a4c4 <AUDIO_PLAYER_Process+0x23c>)
9000a3a2:	681c      	ldr	r4, [r3, #0]
9000a3a4:	b91c      	cbnz	r4, 9000a3ae <AUDIO_PLAYER_Process+0x126>
      BSP_AUDIO_OUT_SetVolume(uwVolume);
9000a3a6:	6818      	ldr	r0, [r3, #0]
9000a3a8:	b2c0      	uxtb	r0, r0
9000a3aa:	f7f6 ff37 	bl	9000121c <BSP_AUDIO_OUT_SetVolume>
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
9000a3ae:	2000      	movs	r0, #0
    break;
9000a3b0:	e79a      	b.n	9000a2e8 <AUDIO_PLAYER_Process+0x60>
    if(--FilePos < 0)
9000a3b2:	4c40      	ldr	r4, [pc, #256]	; (9000a4b4 <AUDIO_PLAYER_Process+0x22c>)
9000a3b4:	f8b4 3288 	ldrh.w	r3, [r4, #648]	; 0x288
9000a3b8:	3b01      	subs	r3, #1
9000a3ba:	b21b      	sxth	r3, r3
9000a3bc:	2b00      	cmp	r3, #0
9000a3be:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
9000a3c2:	da04      	bge.n	9000a3ce <AUDIO_PLAYER_Process+0x146>
      FilePos = AUDIO_GetWavObjectNumber() - 1; 
9000a3c4:	f7ff fa8a 	bl	900098dc <AUDIO_GetWavObjectNumber>
9000a3c8:	3801      	subs	r0, #1
9000a3ca:	f8a4 0288 	strh.w	r0, [r4, #648]	; 0x288
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
9000a3ce:	2002      	movs	r0, #2
9000a3d0:	f7f6 ff0a 	bl	900011e8 <BSP_AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
9000a3d4:	f894 0288 	ldrb.w	r0, [r4, #648]	; 0x288
9000a3d8:	e7e0      	b.n	9000a39c <AUDIO_PLAYER_Process+0x114>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000a3da:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a3de:	f7f7 fa39 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t *)"  [PAUSE]", LEFT_MODE);
9000a3e2:	f7f7 fa5b 	bl	9000189c <BSP_LCD_GetFont>
9000a3e6:	88c1      	ldrh	r1, [r0, #6]
9000a3e8:	2303      	movs	r3, #3
9000a3ea:	4a39      	ldr	r2, [pc, #228]	; (9000a4d0 <AUDIO_PLAYER_Process+0x248>)
9000a3ec:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
9000a3f0:	20fa      	movs	r0, #250	; 0xfa
9000a3f2:	b289      	uxth	r1, r1
9000a3f4:	f7f7 fb6e 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red pause rectangles */
9000a3f8:	4834      	ldr	r0, [pc, #208]	; (9000a4cc <AUDIO_PLAYER_Process+0x244>)
9000a3fa:	f7f7 fa2b 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000a3fe:	2328      	movs	r3, #40	; 0x28
9000a400:	220f      	movs	r2, #15
9000a402:	21d4      	movs	r1, #212	; 0xd4
9000a404:	2064      	movs	r0, #100	; 0x64
9000a406:	f7f7 fd19 	bl	90001e3c <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000a40a:	2328      	movs	r3, #40	; 0x28
9000a40c:	220f      	movs	r2, #15
9000a40e:	21d4      	movs	r1, #212	; 0xd4
9000a410:	2078      	movs	r0, #120	; 0x78
9000a412:	f7f7 fd13 	bl	90001e3c <BSP_LCD_FillRect>
    BSP_AUDIO_OUT_Pause();
9000a416:	f7f6 fec3 	bl	900011a0 <BSP_AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
9000a41a:	2301      	movs	r3, #1
    AudioState = AUDIO_STATE_PLAY;
9000a41c:	702b      	strb	r3, [r5, #0]
    break;
9000a41e:	e7c6      	b.n	9000a3ae <AUDIO_PLAYER_Process+0x126>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000a420:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000a424:	f7f7 fa16 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t *)"  [PLAY ]", LEFT_MODE);
9000a428:	f7f7 fa38 	bl	9000189c <BSP_LCD_GetFont>
9000a42c:	88c1      	ldrh	r1, [r0, #6]
9000a42e:	2303      	movs	r3, #3
9000a430:	4a28      	ldr	r2, [pc, #160]	; (9000a4d4 <AUDIO_PLAYER_Process+0x24c>)
9000a432:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
9000a436:	20fa      	movs	r0, #250	; 0xfa
9000a438:	b289      	uxth	r1, r1
9000a43a:	f7f7 fb4b 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000a43e:	2328      	movs	r3, #40	; 0x28
9000a440:	220f      	movs	r2, #15
9000a442:	21d4      	movs	r1, #212	; 0xd4
9000a444:	2064      	movs	r0, #100	; 0x64
9000a446:	f7f7 fcf9 	bl	90001e3c <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000a44a:	2328      	movs	r3, #40	; 0x28
9000a44c:	220f      	movs	r2, #15
9000a44e:	21d4      	movs	r1, #212	; 0xd4
9000a450:	2078      	movs	r0, #120	; 0x78
9000a452:	f7f7 fcf3 	bl	90001e3c <BSP_LCD_FillRect>
    BSP_AUDIO_OUT_Resume();
9000a456:	f7f6 feb5 	bl	900011c4 <BSP_AUDIO_OUT_Resume>
    if(uwVolume == 0)
9000a45a:	4b1a      	ldr	r3, [pc, #104]	; (9000a4c4 <AUDIO_PLAYER_Process+0x23c>)
9000a45c:	681a      	ldr	r2, [r3, #0]
9000a45e:	b91a      	cbnz	r2, 9000a468 <AUDIO_PLAYER_Process+0x1e0>
      BSP_AUDIO_OUT_SetVolume(uwVolume);
9000a460:	6818      	ldr	r0, [r3, #0]
9000a462:	b2c0      	uxtb	r0, r0
9000a464:	f7f6 feda 	bl	9000121c <BSP_AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
9000a468:	2303      	movs	r3, #3
9000a46a:	e7d7      	b.n	9000a41c <AUDIO_PLAYER_Process+0x194>
    if( uwVolume <= 90)
9000a46c:	4c15      	ldr	r4, [pc, #84]	; (9000a4c4 <AUDIO_PLAYER_Process+0x23c>)
9000a46e:	6823      	ldr	r3, [r4, #0]
9000a470:	2b5a      	cmp	r3, #90	; 0x5a
9000a472:	d802      	bhi.n	9000a47a <AUDIO_PLAYER_Process+0x1f2>
      uwVolume += 10;
9000a474:	6823      	ldr	r3, [r4, #0]
9000a476:	330a      	adds	r3, #10
      uwVolume -= 10;
9000a478:	6023      	str	r3, [r4, #0]
    BSP_AUDIO_OUT_SetVolume(uwVolume);
9000a47a:	6820      	ldr	r0, [r4, #0]
9000a47c:	b2c0      	uxtb	r0, r0
9000a47e:	f7f6 fecd 	bl	9000121c <BSP_AUDIO_OUT_SetVolume>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
9000a482:	f04f 30ff 	mov.w	r0, #4294967295
9000a486:	f7f7 f9e5 	bl	90001854 <BSP_LCD_SetTextColor>
    sprintf((char *)str,  "Volume : %lu ", uwVolume);
9000a48a:	6822      	ldr	r2, [r4, #0]
9000a48c:	4912      	ldr	r1, [pc, #72]	; (9000a4d8 <AUDIO_PLAYER_Process+0x250>)
9000a48e:	a802      	add	r0, sp, #8
9000a490:	f001 f8da 	bl	9000b648 <siprintf>
    BSP_LCD_DisplayStringAtLine(9, str);
9000a494:	a902      	add	r1, sp, #8
9000a496:	2009      	movs	r0, #9
9000a498:	f7f7 fb72 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
9000a49c:	e7e4      	b.n	9000a468 <AUDIO_PLAYER_Process+0x1e0>
    if( uwVolume >= 10)
9000a49e:	4c09      	ldr	r4, [pc, #36]	; (9000a4c4 <AUDIO_PLAYER_Process+0x23c>)
9000a4a0:	6823      	ldr	r3, [r4, #0]
9000a4a2:	2b09      	cmp	r3, #9
9000a4a4:	d9e9      	bls.n	9000a47a <AUDIO_PLAYER_Process+0x1f2>
      uwVolume -= 10;
9000a4a6:	6823      	ldr	r3, [r4, #0]
9000a4a8:	3b0a      	subs	r3, #10
9000a4aa:	e7e5      	b.n	9000a478 <AUDIO_PLAYER_Process+0x1f0>
9000a4ac:	200012f2 	.word	0x200012f2
9000a4b0:	20003580 	.word	0x20003580
9000a4b4:	200012f4 	.word	0x200012f4
9000a4b8:	20001580 	.word	0x20001580
9000a4bc:	20001320 	.word	0x20001320
9000a4c0:	20002580 	.word	0x20002580
9000a4c4:	200000b8 	.word	0x200000b8
9000a4c8:	9001108d 	.word	0x9001108d
9000a4cc:	ffff0000 	.word	0xffff0000
9000a4d0:	900110da 	.word	0x900110da
9000a4d4:	900110d0 	.word	0x900110d0
9000a4d8:	900110e4 	.word	0x900110e4

9000a4dc <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  if(AudioState == AUDIO_STATE_PLAY)
9000a4dc:	4b03      	ldr	r3, [pc, #12]	; (9000a4ec <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
9000a4de:	781b      	ldrb	r3, [r3, #0]
9000a4e0:	2b03      	cmp	r3, #3
    BufferCtl.state = BUFFER_OFFSET_FULL;
9000a4e2:	bf02      	ittt	eq
9000a4e4:	4b02      	ldreq	r3, [pc, #8]	; (9000a4f0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
9000a4e6:	2202      	moveq	r2, #2
9000a4e8:	701a      	strbeq	r2, [r3, #0]
}
9000a4ea:	4770      	bx	lr
9000a4ec:	200012f2 	.word	0x200012f2
9000a4f0:	20003580 	.word	0x20003580

9000a4f4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  if(AudioState == AUDIO_STATE_PLAY)
9000a4f4:	4b03      	ldr	r3, [pc, #12]	; (9000a504 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x10>)
9000a4f6:	781b      	ldrb	r3, [r3, #0]
9000a4f8:	2b03      	cmp	r3, #3
    BufferCtl.state = BUFFER_OFFSET_HALF;
9000a4fa:	bf02      	ittt	eq
9000a4fc:	4b02      	ldreq	r3, [pc, #8]	; (9000a508 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
9000a4fe:	2201      	moveq	r2, #1
9000a500:	701a      	strbeq	r2, [r3, #0]
}
9000a502:	4770      	bx	lr
9000a504:	200012f2 	.word	0x200012f2
9000a508:	20003580 	.word	0x20003580

9000a50c <HAL_HCD_MspInit>:
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hhcd->Instance == USB_OTG_FS)
9000a50c:	6803      	ldr	r3, [r0, #0]
9000a50e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
9000a512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000a516:	b090      	sub	sp, #64	; 0x40
  if(hhcd->Instance == USB_OTG_FS)
9000a518:	d146      	bne.n	9000a5a8 <HAL_HCD_MspInit+0x9c>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a51a:	4c63      	ldr	r4, [pc, #396]	; (9000a6a8 <HAL_HCD_MspInit+0x19c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
    
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a51c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a51e:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a520:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a522:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a524:	4861      	ldr	r0, [pc, #388]	; (9000a6ac <HAL_HCD_MspInit+0x1a0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a526:	f043 0301 	orr.w	r3, r3, #1
9000a52a:	6323      	str	r3, [r4, #48]	; 0x30
9000a52c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a52e:	f003 0301 	and.w	r3, r3, #1
9000a532:	9301      	str	r3, [sp, #4]
9000a534:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
9000a536:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a538:	f043 0308 	orr.w	r3, r3, #8
9000a53c:	6323      	str	r3, [r4, #48]	; 0x30
9000a53e:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a540:	f003 0308 	and.w	r3, r3, #8
9000a544:	9302      	str	r3, [sp, #8]
9000a546:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a548:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
9000a54c:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a550:	2303      	movs	r3, #3
9000a552:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
9000a556:	230a      	movs	r3, #10
9000a558:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a55a:	f7f8 fe81 	bl	90003260 <HAL_GPIO_Init>
    
    /* Configure POWER_SWITCH IO pin */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
9000a55e:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000a560:	a90b      	add	r1, sp, #44	; 0x2c
9000a562:	4853      	ldr	r0, [pc, #332]	; (9000a6b0 <HAL_HCD_MspInit+0x1a4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a564:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a566:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000a56a:	f7f8 fe79 	bl	90003260 <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
9000a56e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
9000a570:	2043      	movs	r0, #67	; 0x43
9000a572:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
9000a574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
9000a578:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
9000a57a:	6363      	str	r3, [r4, #52]	; 0x34
9000a57c:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000a57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000a582:	9303      	str	r3, [sp, #12]
9000a584:	9b03      	ldr	r3, [sp, #12]
9000a586:	6c63      	ldr	r3, [r4, #68]	; 0x44
9000a588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
9000a58c:	6463      	str	r3, [r4, #68]	; 0x44
9000a58e:	6c63      	ldr	r3, [r4, #68]	; 0x44
9000a590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
9000a594:	9304      	str	r3, [sp, #16]
9000a596:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
9000a598:	f7f8 fac2 	bl	90002b20 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
9000a59c:	2043      	movs	r0, #67	; 0x43
    
    /* Set USBHS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
    
    /* Enable USBHS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
9000a59e:	f7f8 faf1 	bl	90002b84 <HAL_NVIC_EnableIRQ>
  }   
}
9000a5a2:	b010      	add	sp, #64	; 0x40
9000a5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hhcd->Instance == USB_OTG_HS)
9000a5a8:	4a42      	ldr	r2, [pc, #264]	; (9000a6b4 <HAL_HCD_MspInit+0x1a8>)
9000a5aa:	4293      	cmp	r3, r2
9000a5ac:	d1f9      	bne.n	9000a5a2 <HAL_HCD_MspInit+0x96>
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a5ae:	4c3e      	ldr	r4, [pc, #248]	; (9000a6a8 <HAL_HCD_MspInit+0x19c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a5b0:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a5b2:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a5b4:	260a      	movs	r6, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a5b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a5b8:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a5bc:	a90b      	add	r1, sp, #44	; 0x2c
9000a5be:	483b      	ldr	r0, [pc, #236]	; (9000a6ac <HAL_HCD_MspInit+0x1a0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
9000a5c0:	f043 0301 	orr.w	r3, r3, #1
9000a5c4:	6323      	str	r3, [r4, #48]	; 0x30
9000a5c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a5c8:	f003 0301 	and.w	r3, r3, #1
9000a5cc:	9305      	str	r3, [sp, #20]
9000a5ce:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
9000a5d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a5d2:	f043 0302 	orr.w	r3, r3, #2
9000a5d6:	6323      	str	r3, [r4, #48]	; 0x30
9000a5d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a5da:	f003 0302 	and.w	r3, r3, #2
9000a5de:	9306      	str	r3, [sp, #24]
9000a5e0:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
9000a5e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a5e4:	f043 0304 	orr.w	r3, r3, #4
9000a5e8:	6323      	str	r3, [r4, #48]	; 0x30
9000a5ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a5ec:	f003 0304 	and.w	r3, r3, #4
9000a5f0:	9307      	str	r3, [sp, #28]
9000a5f2:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000a5f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a5f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000a5fa:	6323      	str	r3, [r4, #48]	; 0x30
9000a5fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a5fe:	960f      	str	r6, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOH_CLK_ENABLE();
9000a600:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000a604:	9308      	str	r3, [sp, #32]
9000a606:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a608:	2320      	movs	r3, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a60a:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a60e:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a612:	f7f8 fe25 	bl	90003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
9000a616:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a618:	a90b      	add	r1, sp, #44	; 0x2c
9000a61a:	4824      	ldr	r0, [pc, #144]	; (9000a6ac <HAL_HCD_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a61c:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a61e:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
9000a622:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
9000a626:	f7f8 fe1b 	bl	90003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_5 |\
9000a62a:	f643 4323 	movw	r3, #15395	; 0x3c23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
9000a62e:	a90b      	add	r1, sp, #44	; 0x2c
9000a630:	4821      	ldr	r0, [pc, #132]	; (9000a6b8 <HAL_HCD_MspInit+0x1ac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a632:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a634:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a636:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
9000a63a:	f7f8 fe11 	bl	90003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
9000a63e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); 
9000a640:	a90b      	add	r1, sp, #44	; 0x2c
9000a642:	481e      	ldr	r0, [pc, #120]	; (9000a6bc <HAL_HCD_MspInit+0x1b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a644:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a646:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a648:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); 
9000a64c:	f7f8 fe08 	bl	90003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
9000a650:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000a652:	a90b      	add	r1, sp, #44	; 0x2c
9000a654:	481a      	ldr	r0, [pc, #104]	; (9000a6c0 <HAL_HCD_MspInit+0x1b4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a656:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a658:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a65a:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000a65e:	f7f8 fdff 	bl	90003260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
9000a662:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000a664:	a90b      	add	r1, sp, #44	; 0x2c
9000a666:	4815      	ldr	r0, [pc, #84]	; (9000a6bc <HAL_HCD_MspInit+0x1b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000a668:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
9000a66a:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000a66c:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000a670:	f7f8 fdf6 	bl	90003260 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000a674:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000a676:	204d      	movs	r0, #77	; 0x4d
9000a678:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000a67a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000a67e:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
9000a680:	6323      	str	r3, [r4, #48]	; 0x30
9000a682:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a684:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
9000a688:	9309      	str	r3, [sp, #36]	; 0x24
9000a68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
9000a68c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a68e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
9000a692:	6323      	str	r3, [r4, #48]	; 0x30
9000a694:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
9000a69a:	930a      	str	r3, [sp, #40]	; 0x28
9000a69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 6, 0);
9000a69e:	f7f8 fa3f 	bl	90002b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
9000a6a2:	204d      	movs	r0, #77	; 0x4d
9000a6a4:	e77b      	b.n	9000a59e <HAL_HCD_MspInit+0x92>
9000a6a6:	bf00      	nop
9000a6a8:	40023800 	.word	0x40023800
9000a6ac:	40020000 	.word	0x40020000
9000a6b0:	40020c00 	.word	0x40020c00
9000a6b4:	40040000 	.word	0x40040000
9000a6b8:	40020400 	.word	0x40020400
9000a6bc:	40020800 	.word	0x40020800
9000a6c0:	40021c00 	.word	0x40021c00

9000a6c4 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
9000a6c4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a6c8:	f7fc be6d 	b.w	900073a6 <USBH_LL_IncTimer>

9000a6cc <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
9000a6cc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a6d0:	f7fc be7f 	b.w	900073d2 <USBH_LL_Connect>

9000a6d4 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
9000a6d4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a6d8:	f7fc be85 	b.w	900073e6 <USBH_LL_Disconnect>

9000a6dc <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
9000a6dc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a6e0:	f7fc be6f 	b.w	900073c2 <USBH_LL_PortEnabled>

9000a6e4 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
9000a6e4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
9000a6e8:	f7fc be6f 	b.w	900073ca <USBH_LL_PortDisabled>

9000a6ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
}
9000a6ec:	4770      	bx	lr
	...

9000a6f0 <USBH_LL_Init>:
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
9000a6f0:	b570      	push	{r4, r5, r6, lr}
#ifdef USE_USB_FS  
  /* Set the LL driver parameters */
  hhcd.Instance = USB_OTG_FS;
9000a6f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
9000a6f6:	4c0f      	ldr	r4, [pc, #60]	; (9000a734 <USBH_LL_Init+0x44>)
  hhcd.Init.Host_channels = 11; 
  hhcd.Init.dma_enable = 0;
9000a6f8:	2500      	movs	r5, #0
{
9000a6fa:	4606      	mov	r6, r0
  hhcd.Instance = USB_OTG_FS;
9000a6fc:	6023      	str	r3, [r4, #0]
  hhcd.Init.Host_channels = 11; 
9000a6fe:	230b      	movs	r3, #11
  hhcd.Init.Sof_enable = 0;
  hhcd.Init.speed = HCD_SPEED_FULL;
  hhcd.Init.vbus_sensing_enable = 0;
  
  /* Link the driver to the stack */
  hhcd.pData = phost;
9000a700:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hhcd.Init.Host_channels = 11; 
9000a704:	60a3      	str	r3, [r4, #8]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED; 
9000a706:	2302      	movs	r3, #2
  phost->pData = &hhcd;
9000a708:	f8c0 44bc 	str.w	r4, [r0, #1212]	; 0x4bc
  
  /* Initialize the LL Driver */
  HAL_HCD_Init(&hhcd);
9000a70c:	4620      	mov	r0, r4
  hhcd.Init.dma_enable = 0;
9000a70e:	6125      	str	r5, [r4, #16]
  hhcd.Init.low_power_enable = 0;
9000a710:	6225      	str	r5, [r4, #32]
  hhcd.Init.vbus_sensing_enable = 0;
9000a712:	62e5      	str	r5, [r4, #44]	; 0x2c
  hhcd.Init.Sof_enable = 0;
9000a714:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hhcd.Init.speed = HCD_SPEED_FULL;
9000a718:	2301      	movs	r3, #1
9000a71a:	60e3      	str	r3, [r4, #12]
  HAL_HCD_Init(&hhcd);
9000a71c:	f7f8 fecf 	bl	900034be <HAL_HCD_Init>
  phost->pData = &hhcd;
  /* Initialize the LL driver */
  HAL_HCD_Init(&hhcd);
#endif /*USE_USB_HS*/ 

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd));
9000a720:	4620      	mov	r0, r4
9000a722:	f7f9 fad3 	bl	90003ccc <HAL_HCD_GetCurrentFrame>
9000a726:	4601      	mov	r1, r0
9000a728:	4630      	mov	r0, r6
9000a72a:	f7fc fe39 	bl	900073a0 <USBH_LL_SetTimer>
  
  return USBH_OK;
}
9000a72e:	4628      	mov	r0, r5
9000a730:	bd70      	pop	{r4, r5, r6, pc}
9000a732:	bf00      	nop
9000a734:	20003588 	.word	0x20003588

9000a738 <USBH_LL_Start>:
  * @brief  Starts the Low Level portion of the Host driver.   
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
9000a738:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
9000a73a:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a73e:	f7f9 fa8f 	bl	90003c60 <HAL_HCD_Start>
  return USBH_OK; 
}
9000a742:	2000      	movs	r0, #0
9000a744:	bd08      	pop	{r3, pc}

9000a746 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
9000a746:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
9000a748:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a74c:	f7f9 fa9e 	bl	90003c8c <HAL_HCD_Stop>
  return USBH_OK; 
}
9000a750:	2000      	movs	r0, #0
9000a752:	bd08      	pop	{r3, pc}

9000a754 <USBH_LL_GetSpeed>:
  * @brief  Returns the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
9000a754:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
  
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
9000a756:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a75a:	f7f9 faba 	bl	90003cd2 <HAL_HCD_GetCurrentSpeed>
9000a75e:	2803      	cmp	r0, #3
9000a760:	bf28      	it	cs
9000a762:	2001      	movcs	r0, #1
  default:  
    speed = USBH_SPEED_FULL;    
    break;    
  }
  return speed;
}
9000a764:	b2c0      	uxtb	r0, r0
9000a766:	bd08      	pop	{r3, pc}

9000a768 <USBH_LL_ResetPort>:
  * @brief  Resets the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
9000a768:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
9000a76a:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a76e:	f7f9 fa9f 	bl	90003cb0 <HAL_HCD_ResetPort>
  return USBH_OK; 
}
9000a772:	2000      	movs	r0, #0
9000a774:	bd08      	pop	{r3, pc}

9000a776 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)  
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
9000a776:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a77a:	f7f9 baa2 	b.w	90003cc2 <HAL_HCD_HC_GetXferCount>

9000a77e <USBH_LL_OpenPipe>:
                                    uint8_t epnum,                                      
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
9000a77e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_Init(phost->pData,
9000a780:	f8bd 4020 	ldrh.w	r4, [sp, #32]
9000a784:	9402      	str	r4, [sp, #8]
9000a786:	f89d 401c 	ldrb.w	r4, [sp, #28]
9000a78a:	9401      	str	r4, [sp, #4]
9000a78c:	f89d 4018 	ldrb.w	r4, [sp, #24]
9000a790:	9400      	str	r4, [sp, #0]
9000a792:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a796:	f7f8 fe4a 	bl	9000342e <HAL_HCD_HC_Init>
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
}
9000a79a:	2000      	movs	r0, #0
9000a79c:	b004      	add	sp, #16
9000a79e:	bd10      	pop	{r4, pc}

9000a7a0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
9000a7a0:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe);
9000a7a2:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a7a6:	f7f8 fe78 	bl	9000349a <HAL_HCD_HC_Halt>
  return USBH_OK; 
}
9000a7aa:	2000      	movs	r0, #0
9000a7ac:	bd08      	pop	{r3, pc}

9000a7ae <USBH_LL_SubmitURB>:
                                     uint8_t ep_type,  
                                     uint8_t token, 
                                     uint8_t* pbuff, 
                                     uint16_t length,
                                     uint8_t do_ping) 
{
9000a7ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_SubmitRequest(phost->pData,
9000a7b0:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
9000a7b4:	9403      	str	r4, [sp, #12]
9000a7b6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
9000a7ba:	9402      	str	r4, [sp, #8]
9000a7bc:	9c07      	ldr	r4, [sp, #28]
9000a7be:	9401      	str	r4, [sp, #4]
9000a7c0:	f89d 4018 	ldrb.w	r4, [sp, #24]
9000a7c4:	9400      	str	r4, [sp, #0]
9000a7c6:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a7ca:	f7f8 fec5 	bl	90003558 <HAL_HCD_HC_SubmitRequest>
                           token, 
                           pbuff, 
                           length,
                           do_ping);
  return USBH_OK;   
}
9000a7ce:	2000      	movs	r0, #0
9000a7d0:	b004      	add	sp, #16
9000a7d2:	bd10      	pop	{r4, pc}

9000a7d4 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe) 
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
9000a7d4:	f8d0 04bc 	ldr.w	r0, [r0, #1212]	; 0x4bc
9000a7d8:	f7f9 ba6d 	b.w	90003cb6 <HAL_HCD_HC_GetURBState>

9000a7dc <USBH_LL_DriverVBUS>:
  *           0: VBUS Active 
  *           1: VBUS Inactive
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
9000a7dc:	b508      	push	{r3, lr}
#ifdef USE_USB_FS
  if(state == 0)
9000a7de:	b949      	cbnz	r1, 9000a7f4 <USBH_LL_DriverVBUS+0x18>
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
9000a7e0:	2201      	movs	r2, #1
  }
  else
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
9000a7e2:	2120      	movs	r1, #32
9000a7e4:	4804      	ldr	r0, [pc, #16]	; (9000a7f8 <USBH_LL_DriverVBUS+0x1c>)
9000a7e6:	f7f8 fe1d 	bl	90003424 <HAL_GPIO_WritePin>
  }
  
  HAL_Delay(200);
9000a7ea:	20c8      	movs	r0, #200	; 0xc8
9000a7ec:	f7f8 f974 	bl	90002ad8 <HAL_Delay>
#endif /* USE_USB_FS */
  return USBH_OK;  
}
9000a7f0:	2000      	movs	r0, #0
9000a7f2:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
9000a7f4:	2200      	movs	r2, #0
9000a7f6:	e7f4      	b.n	9000a7e2 <USBH_LL_DriverVBUS+0x6>
9000a7f8:	40020c00 	.word	0x40020c00

9000a7fc <USBH_LL_SetToggle>:
  * @param  toggle: toggle (0/1)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
  if(hhcd.hc[pipe].ep_is_in)
9000a7fc:	4b06      	ldr	r3, [pc, #24]	; (9000a818 <USBH_LL_SetToggle+0x1c>)
9000a7fe:	2028      	movs	r0, #40	; 0x28
9000a800:	fb00 3101 	mla	r1, r0, r1, r3
9000a804:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
9000a808:	b11b      	cbz	r3, 9000a812 <USBH_LL_SetToggle+0x16>
  {
    hhcd.hc[pipe].toggle_in = toggle;
9000a80a:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
  }
  return USBH_OK; 
}
9000a80e:	2000      	movs	r0, #0
9000a810:	4770      	bx	lr
    hhcd.hc[pipe].toggle_out = toggle;
9000a812:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
9000a816:	e7fa      	b.n	9000a80e <USBH_LL_SetToggle+0x12>
9000a818:	20003588 	.word	0x20003588

9000a81c <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
  uint8_t toggle = 0;
  
  if(hhcd.hc[pipe].ep_is_in)
9000a81c:	4b06      	ldr	r3, [pc, #24]	; (9000a838 <USBH_LL_GetToggle+0x1c>)
9000a81e:	2228      	movs	r2, #40	; 0x28
9000a820:	fb02 3101 	mla	r1, r2, r1, r3
9000a824:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
9000a828:	b113      	cbz	r3, 9000a830 <USBH_LL_GetToggle+0x14>
  {
    toggle = hhcd.hc[pipe].toggle_in;
9000a82a:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
9000a82e:	4770      	bx	lr
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
9000a830:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle; 
}
9000a834:	4770      	bx	lr
9000a836:	bf00      	nop
9000a838:	20003588 	.word	0x20003588

9000a83c <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);  
9000a83c:	f7f8 b94c 	b.w	90002ad8 <HAL_Delay>

9000a840 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
9000a840:	2000      	movs	r0, #0
9000a842:	4770      	bx	lr

9000a844 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
9000a844:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
9000a846:	4804      	ldr	r0, [pc, #16]	; (9000a858 <USBH_status+0x14>)
{
9000a848:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
9000a84a:	f7fb feb9 	bl	900065c0 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
9000a84e:	fab0 f080 	clz	r0, r0
9000a852:	0940      	lsrs	r0, r0, #5
9000a854:	bd08      	pop	{r3, pc}
9000a856:	bf00      	nop
9000a858:	20000da8 	.word	0x20000da8

9000a85c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
9000a85c:	b510      	push	{r4, lr}
9000a85e:	4603      	mov	r3, r0
9000a860:	b08e      	sub	sp, #56	; 0x38
9000a862:	4608      	mov	r0, r1
9000a864:	4614      	mov	r4, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
9000a866:	2903      	cmp	r1, #3
9000a868:	d803      	bhi.n	9000a872 <USBH_ioctl+0x16>
9000a86a:	e8df f001 	tbb	[pc, r1]
9000a86e:	0503      	.short	0x0503
9000a870:	1a10      	.short	0x1a10
9000a872:	2004      	movs	r0, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
9000a874:	b00e      	add	sp, #56	; 0x38
9000a876:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000a878:	aa01      	add	r2, sp, #4
9000a87a:	4619      	mov	r1, r3
9000a87c:	480e      	ldr	r0, [pc, #56]	; (9000a8b8 <USBH_ioctl+0x5c>)
9000a87e:	f7fb feb0 	bl	900065e2 <USBH_MSC_GetLUNInfo>
9000a882:	b108      	cbz	r0, 9000a888 <USBH_ioctl+0x2c>
      res = RES_ERROR;
9000a884:	2001      	movs	r0, #1
9000a886:	e7f5      	b.n	9000a874 <USBH_ioctl+0x18>
      *(DWORD*)buff = info.capacity.block_nbr;
9000a888:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
9000a88a:	6023      	str	r3, [r4, #0]
      res = RES_OK;
9000a88c:	e7f2      	b.n	9000a874 <USBH_ioctl+0x18>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000a88e:	aa01      	add	r2, sp, #4
9000a890:	4619      	mov	r1, r3
9000a892:	4809      	ldr	r0, [pc, #36]	; (9000a8b8 <USBH_ioctl+0x5c>)
9000a894:	f7fb fea5 	bl	900065e2 <USBH_MSC_GetLUNInfo>
9000a898:	2800      	cmp	r0, #0
9000a89a:	d1f3      	bne.n	9000a884 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size;
9000a89c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
9000a8a0:	e7f3      	b.n	9000a88a <USBH_ioctl+0x2e>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
9000a8a2:	aa01      	add	r2, sp, #4
9000a8a4:	4619      	mov	r1, r3
9000a8a6:	4804      	ldr	r0, [pc, #16]	; (9000a8b8 <USBH_ioctl+0x5c>)
9000a8a8:	f7fb fe9b 	bl	900065e2 <USBH_MSC_GetLUNInfo>
9000a8ac:	2800      	cmp	r0, #0
9000a8ae:	d1e9      	bne.n	9000a884 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
9000a8b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
9000a8b4:	0a5b      	lsrs	r3, r3, #9
9000a8b6:	e7e8      	b.n	9000a88a <USBH_ioctl+0x2e>
9000a8b8:	20000da8 	.word	0x20000da8

9000a8bc <USBH_read>:
{
9000a8bc:	b510      	push	{r4, lr}
9000a8be:	b090      	sub	sp, #64	; 0x40
9000a8c0:	4604      	mov	r4, r0
  if(USBH_MSC_Read(&hUSBHost, lun, sector, buff, count) == USBH_OK)
9000a8c2:	9300      	str	r3, [sp, #0]
9000a8c4:	460b      	mov	r3, r1
9000a8c6:	4601      	mov	r1, r0
9000a8c8:	480f      	ldr	r0, [pc, #60]	; (9000a908 <USBH_read+0x4c>)
9000a8ca:	f7fb fea2 	bl	90006612 <USBH_MSC_Read>
9000a8ce:	b1b0      	cbz	r0, 9000a8fe <USBH_read+0x42>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
9000a8d0:	aa03      	add	r2, sp, #12
9000a8d2:	4621      	mov	r1, r4
9000a8d4:	480c      	ldr	r0, [pc, #48]	; (9000a908 <USBH_read+0x4c>)
9000a8d6:	f7fb fe84 	bl	900065e2 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
9000a8da:	f89d 3019 	ldrb.w	r3, [sp, #25]
9000a8de:	2b28      	cmp	r3, #40	; 0x28
9000a8e0:	d003      	beq.n	9000a8ea <USBH_read+0x2e>
9000a8e2:	2b3a      	cmp	r3, #58	; 0x3a
9000a8e4:	d001      	beq.n	9000a8ea <USBH_read+0x2e>
9000a8e6:	2b04      	cmp	r3, #4
9000a8e8:	d10b      	bne.n	9000a902 <USBH_read+0x46>
      USBH_ErrLog ("USB Disk is not ready!");
9000a8ea:	4808      	ldr	r0, [pc, #32]	; (9000a90c <USBH_read+0x50>)
9000a8ec:	f000 fe36 	bl	9000b55c <iprintf>
9000a8f0:	4807      	ldr	r0, [pc, #28]	; (9000a910 <USBH_read+0x54>)
9000a8f2:	f000 fe33 	bl	9000b55c <iprintf>
9000a8f6:	200a      	movs	r0, #10
9000a8f8:	f000 fe42 	bl	9000b580 <putchar>
      res = RES_NOTRDY;
9000a8fc:	2003      	movs	r0, #3
}
9000a8fe:	b010      	add	sp, #64	; 0x40
9000a900:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
9000a902:	2001      	movs	r0, #1
  return res;
9000a904:	e7fb      	b.n	9000a8fe <USBH_read+0x42>
9000a906:	bf00      	nop
9000a908:	20000da8 	.word	0x20000da8
9000a90c:	9001096c 	.word	0x9001096c
9000a910:	900110f2 	.word	0x900110f2

9000a914 <USBH_write>:
{
9000a914:	b510      	push	{r4, lr}
9000a916:	b090      	sub	sp, #64	; 0x40
9000a918:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSBHost, lun, sector, (BYTE *)buff, count) == USBH_OK)
9000a91a:	9300      	str	r3, [sp, #0]
9000a91c:	460b      	mov	r3, r1
9000a91e:	4601      	mov	r1, r0
9000a920:	4816      	ldr	r0, [pc, #88]	; (9000a97c <USBH_write+0x68>)
9000a922:	f7fb feb7 	bl	90006694 <USBH_MSC_Write>
9000a926:	b160      	cbz	r0, 9000a942 <USBH_write+0x2e>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
9000a928:	aa03      	add	r2, sp, #12
9000a92a:	4621      	mov	r1, r4
9000a92c:	4813      	ldr	r0, [pc, #76]	; (9000a97c <USBH_write+0x68>)
9000a92e:	f7fb fe58 	bl	900065e2 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
9000a932:	f89d 3019 	ldrb.w	r3, [sp, #25]
9000a936:	2b27      	cmp	r3, #39	; 0x27
9000a938:	d009      	beq.n	9000a94e <USBH_write+0x3a>
9000a93a:	d804      	bhi.n	9000a946 <USBH_write+0x32>
9000a93c:	2b04      	cmp	r3, #4
9000a93e:	d011      	beq.n	9000a964 <USBH_write+0x50>
9000a940:	2001      	movs	r0, #1
}
9000a942:	b010      	add	sp, #64	; 0x40
9000a944:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
9000a946:	2b28      	cmp	r3, #40	; 0x28
9000a948:	d00c      	beq.n	9000a964 <USBH_write+0x50>
9000a94a:	2b3a      	cmp	r3, #58	; 0x3a
9000a94c:	e7f7      	b.n	9000a93e <USBH_write+0x2a>
      USBH_ErrLog("USB Disk is Write protected!");
9000a94e:	480c      	ldr	r0, [pc, #48]	; (9000a980 <USBH_write+0x6c>)
9000a950:	f000 fe04 	bl	9000b55c <iprintf>
9000a954:	480b      	ldr	r0, [pc, #44]	; (9000a984 <USBH_write+0x70>)
9000a956:	f000 fe01 	bl	9000b55c <iprintf>
9000a95a:	200a      	movs	r0, #10
9000a95c:	f000 fe10 	bl	9000b580 <putchar>
      res = RES_WRPRT;
9000a960:	2002      	movs	r0, #2
      break;
9000a962:	e7ee      	b.n	9000a942 <USBH_write+0x2e>
      USBH_ErrLog("USB Disk is not ready!");
9000a964:	4806      	ldr	r0, [pc, #24]	; (9000a980 <USBH_write+0x6c>)
9000a966:	f000 fdf9 	bl	9000b55c <iprintf>
9000a96a:	4807      	ldr	r0, [pc, #28]	; (9000a988 <USBH_write+0x74>)
9000a96c:	f000 fdf6 	bl	9000b55c <iprintf>
9000a970:	200a      	movs	r0, #10
9000a972:	f000 fe05 	bl	9000b580 <putchar>
      res = RES_NOTRDY;
9000a976:	2003      	movs	r0, #3
      break;
9000a978:	e7e3      	b.n	9000a942 <USBH_write+0x2e>
9000a97a:	bf00      	nop
9000a97c:	20000da8 	.word	0x20000da8
9000a980:	9001096c 	.word	0x9001096c
9000a984:	90011109 	.word	0x90011109
9000a988:	900110f2 	.word	0x900110f2

9000a98c <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
9000a98c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t byteswritten = 0;
9000a990:	2300      	movs	r3, #0
{
9000a992:	b091      	sub	sp, #68	; 0x44
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20]; 
  
  uwVolume_rec = 100;
9000a994:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 9000ac8c <AUDIO_REC_Start+0x300>
9000a998:	2464      	movs	r4, #100	; 0x64

  /* Create a new file system */
  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
9000a99a:	220a      	movs	r2, #10
9000a99c:	49a7      	ldr	r1, [pc, #668]	; (9000ac3c <AUDIO_REC_Start+0x2b0>)
9000a99e:	48a8      	ldr	r0, [pc, #672]	; (9000ac40 <AUDIO_REC_Start+0x2b4>)
  uint32_t byteswritten = 0;
9000a9a0:	9300      	str	r3, [sp, #0]
  uwVolume_rec = 100;
9000a9a2:	f8c8 4000 	str.w	r4, [r8]
  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
9000a9a6:	f7fe f9a1 	bl	90008cec <f_open>
9000a9aa:	b120      	cbz	r0, 9000a9b6 <AUDIO_REC_Start+0x2a>
          return AUDIO_ERROR_NONE;
        }
      }
    }
  }
  return AUDIO_ERROR_IO; 
9000a9ac:	2401      	movs	r4, #1
}
9000a9ae:	4620      	mov	r0, r4
9000a9b0:	b011      	add	sp, #68	; 0x44
9000a9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{  
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
9000a9b6:	4ba3      	ldr	r3, [pc, #652]	; (9000ac44 <AUDIO_REC_Start+0x2b8>)
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
9000a9b8:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
9000a9bc:	f44f 567a 	mov.w	r6, #16000	; 0x3e80
  pHeader[4] = 0x00;
  pHeader[5] = 0x4C;
  pHeader[6] = 0x1D;
  pHeader[7] = 0x00;
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
9000a9c0:	2757      	movs	r7, #87	; 0x57
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
9000a9c2:	4aa1      	ldr	r2, [pc, #644]	; (9000ac48 <AUDIO_REC_Start+0x2bc>)
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
9000a9c4:	2502      	movs	r5, #2
  pHeader[17]  = 0x00;
  pHeader[18]  = 0x00;
  pHeader[19]  = 0x00;
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
9000a9c6:	f04f 0901 	mov.w	r9, #1
  pHeader[5] = 0x4C;
9000a9ca:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
9000a9ce:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
9000a9d0:	222c      	movs	r2, #44	; 0x2c
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
9000a9d2:	82dd      	strh	r5, [r3, #22]
  pHeader[14]  = 't';
9000a9d4:	f04f 0e74 	mov.w	lr, #116	; 0x74
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
9000a9d8:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
9000a9da:	e9c3 6106 	strd	r6, r1, [r3, #24]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
9000a9de:	499b      	ldr	r1, [pc, #620]	; (9000ac4c <AUDIO_REC_Start+0x2c0>)
9000a9e0:	6219      	str	r1, [r3, #32]
  pHeader[0] = 'R';
9000a9e2:	2352      	movs	r3, #82	; 0x52
9000a9e4:	499a      	ldr	r1, [pc, #616]	; (9000ac50 <AUDIO_REC_Start+0x2c4>)
  pHeader[8]  = 'W';
9000a9e6:	720f      	strb	r7, [r1, #8]
  pHeader[9]  = 'A';
9000a9e8:	2741      	movs	r7, #65	; 0x41
  pHeader[0] = 'R';
9000a9ea:	700b      	strb	r3, [r1, #0]
  pHeader[1] = 'I';
9000a9ec:	2349      	movs	r3, #73	; 0x49
  pHeader[9]  = 'A';
9000a9ee:	724f      	strb	r7, [r1, #9]
  pHeader[10] = 'V';
9000a9f0:	2756      	movs	r7, #86	; 0x56
  pHeader[20]  = 0x01;
9000a9f2:	f881 9014 	strb.w	r9, [r1, #20]
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
  pHeader[23]  = 0x00;
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
9000a9f6:	f04f 0980 	mov.w	r9, #128	; 0x80
  pHeader[10] = 'V';
9000a9fa:	728f      	strb	r7, [r1, #10]
  pHeader[11] = 'E';
9000a9fc:	2745      	movs	r7, #69	; 0x45
  pHeader[1] = 'I';
9000a9fe:	704b      	strb	r3, [r1, #1]
  pHeader[2] = 'F';
9000aa00:	2346      	movs	r3, #70	; 0x46
  pHeader[11] = 'E';
9000aa02:	72cf      	strb	r7, [r1, #11]
  pHeader[12]  = 'f';
9000aa04:	2766      	movs	r7, #102	; 0x66
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
9000aa06:	f881 9018 	strb.w	r9, [r1, #24]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
9000aa0a:	f04f 093e 	mov.w	r9, #62	; 0x3e
  pHeader[12]  = 'f';
9000aa0e:	730f      	strb	r7, [r1, #12]
  pHeader[13]  = 'm';
9000aa10:	276d      	movs	r7, #109	; 0x6d
  pHeader[2] = 'F';
9000aa12:	708b      	strb	r3, [r1, #2]
  pHeader[13]  = 'm';
9000aa14:	734f      	strb	r7, [r1, #13]
  pHeader[15]  = ' ';
9000aa16:	2720      	movs	r7, #32
  pHeader[3] = 'F';
9000aa18:	70cb      	strb	r3, [r1, #3]
  pHeader[6] = 0x1D;
9000aa1a:	231d      	movs	r3, #29
  pHeader[15]  = ' ';
9000aa1c:	73cf      	strb	r7, [r1, #15]
  pHeader[16]  = 0x10;
9000aa1e:	2710      	movs	r7, #16
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
9000aa20:	f881 9019 	strb.w	r9, [r1, #25]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
9000aa24:	f04f 09fa 	mov.w	r9, #250	; 0xfa
  pHeader[4] = 0x00;
9000aa28:	7108      	strb	r0, [r1, #4]
  pHeader[6] = 0x1D;
9000aa2a:	718b      	strb	r3, [r1, #6]
  pHeader[7] = 0x00;
9000aa2c:	71c8      	strb	r0, [r1, #7]
  pHeader[17]  = 0x00;
9000aa2e:	7448      	strb	r0, [r1, #17]
  pHeader[18]  = 0x00;
9000aa30:	7488      	strb	r0, [r1, #18]
  pHeader[19]  = 0x00;
9000aa32:	74c8      	strb	r0, [r1, #19]
  pHeader[21]  = 0x00;
9000aa34:	7548      	strb	r0, [r1, #21]
  pHeader[23]  = 0x00;
9000aa36:	75c8      	strb	r0, [r1, #23]
  pHeader[5] = 0x4C;
9000aa38:	f881 c005 	strb.w	ip, [r1, #5]
  pHeader[14]  = 't';
9000aa3c:	f881 e00e 	strb.w	lr, [r1, #14]
  pHeader[16]  = 0x10;
9000aa40:	740f      	strb	r7, [r1, #16]
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
9000aa42:	758d      	strb	r5, [r1, #22]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
9000aa44:	7688      	strb	r0, [r1, #26]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
9000aa46:	f881 901d 	strb.w	r9, [r1, #29]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
9000aa4a:	f04f 0904 	mov.w	r9, #4
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
  pHeader[35]  = 0x00;
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
9000aa4e:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pHeader[37]  = 'a';
9000aa52:	2461      	movs	r4, #97	; 0x61
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
9000aa54:	76c8      	strb	r0, [r1, #27]
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
9000aa56:	7708      	strb	r0, [r1, #28]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
9000aa58:	7788      	strb	r0, [r1, #30]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
9000aa5a:	77c8      	strb	r0, [r1, #31]
  pHeader[33]  = 0x00;
9000aa5c:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pHeader[35]  = 0x00;
9000aa60:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  pHeader[37]  = 'a';
9000aa64:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pHeader[38]  = 't';
  pHeader[39]  = 'a';
9000aa68:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
9000aa6c:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
  pHeader[41]  = 0x4C;
  pHeader[42]  = 0x1D;
9000aa70:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
9000aa74:	466b      	mov	r3, sp
  pHeader[43]  = 0x00;
9000aa76:	f881 002b 	strb.w	r0, [r1, #43]	; 0x2b
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
9000aa7a:	f881 9020 	strb.w	r9, [r1, #32]
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
9000aa7e:	4870      	ldr	r0, [pc, #448]	; (9000ac40 <AUDIO_REC_Start+0x2b4>)
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
9000aa80:	f881 7022 	strb.w	r7, [r1, #34]	; 0x22
  pHeader[38]  = 't';
9000aa84:	f881 e026 	strb.w	lr, [r1, #38]	; 0x26
  pHeader[41]  = 0x4C;
9000aa88:	f881 c029 	strb.w	ip, [r1, #41]	; 0x29
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
9000aa8c:	f7fe faef 	bl	9000906e <f_write>
9000aa90:	4604      	mov	r4, r0
9000aa92:	2800      	cmp	r0, #0
9000aa94:	d18a      	bne.n	9000a9ac <AUDIO_REC_Start+0x20>
      AudioState = AUDIO_STATE_PRERECORD;
9000aa96:	4b6f      	ldr	r3, [pc, #444]	; (9000ac54 <AUDIO_REC_Start+0x2c8>)
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
9000aa98:	f04f 30ff 	mov.w	r0, #4294967295
      AudioState = AUDIO_STATE_PRERECORD;
9000aa9c:	f883 9000 	strb.w	r9, [r3]
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
9000aaa0:	f7f6 fed8 	bl	90001854 <BSP_LCD_SetTextColor>
      sprintf((char *)str, "Recording file: %s", 
9000aaa4:	4a65      	ldr	r2, [pc, #404]	; (9000ac3c <AUDIO_REC_Start+0x2b0>)
9000aaa6:	eb0d 0009 	add.w	r0, sp, r9
9000aaaa:	496b      	ldr	r1, [pc, #428]	; (9000ac58 <AUDIO_REC_Start+0x2cc>)
9000aaac:	f000 fdcc 	bl	9000b648 <siprintf>
      BSP_LCD_ClearStringLine(4);
9000aab0:	4648      	mov	r0, r9
9000aab2:	f7f7 f9ff 	bl	90001eb4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(4, str);
9000aab6:	eb0d 0109 	add.w	r1, sp, r9
9000aaba:	4648      	mov	r0, r9
9000aabc:	f7f7 f860 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN); 
9000aac0:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000aac4:	f7f6 fec6 	bl	90001854 <BSP_LCD_SetTextColor>
      sprintf((char *)str,  "Sample rate : %d Hz", (int)DEFAULT_AUDIO_IN_FREQ);
9000aac8:	4632      	mov	r2, r6
9000aaca:	4964      	ldr	r1, [pc, #400]	; (9000ac5c <AUDIO_REC_Start+0x2d0>)
9000aacc:	eb0d 0009 	add.w	r0, sp, r9
9000aad0:	f000 fdba 	bl	9000b648 <siprintf>
      BSP_LCD_ClearStringLine(6);
9000aad4:	2006      	movs	r0, #6
9000aad6:	f7f7 f9ed 	bl	90001eb4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(6, str);
9000aada:	eb0d 0109 	add.w	r1, sp, r9
9000aade:	2006      	movs	r0, #6
9000aae0:	f7f7 f84e 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str,  "Channels number : %d", (int)DEFAULT_AUDIO_IN_CHANNEL_NBR);
9000aae4:	462a      	mov	r2, r5
9000aae6:	495e      	ldr	r1, [pc, #376]	; (9000ac60 <AUDIO_REC_Start+0x2d4>)
9000aae8:	eb0d 0009 	add.w	r0, sp, r9
9000aaec:	f000 fdac 	bl	9000b648 <siprintf>
      BSP_LCD_ClearStringLine(7);      
9000aaf0:	2007      	movs	r0, #7
9000aaf2:	f7f7 f9df 	bl	90001eb4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
9000aaf6:	eb0d 0109 	add.w	r1, sp, r9
9000aafa:	2007      	movs	r0, #7
9000aafc:	f7f7 f840 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str,  "Volume : %d ", (int)uwVolume_rec);
9000ab00:	f8d8 2000 	ldr.w	r2, [r8]
9000ab04:	4957      	ldr	r1, [pc, #348]	; (9000ac64 <AUDIO_REC_Start+0x2d8>)
9000ab06:	eb0d 0009 	add.w	r0, sp, r9
9000ab0a:	f000 fd9d 	bl	9000b648 <siprintf>
      BSP_LCD_ClearStringLine(7);
9000ab0e:	2007      	movs	r0, #7
9000ab10:	f7f7 f9d0 	bl	90001eb4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
9000ab14:	eb0d 0109 	add.w	r1, sp, r9
9000ab18:	2007      	movs	r0, #7
9000ab1a:	f7f7 f831 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
      sprintf((char *)str, "File Size :");
9000ab1e:	4952      	ldr	r1, [pc, #328]	; (9000ac68 <AUDIO_REC_Start+0x2dc>)
9000ab20:	eb0d 0009 	add.w	r0, sp, r9
9000ab24:	f000 ff37 	bl	9000b996 <strcpy>
      BSP_LCD_ClearStringLine(8);
9000ab28:	2008      	movs	r0, #8
9000ab2a:	f7f7 f9c3 	bl	90001eb4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(8, str);
9000ab2e:	eb0d 0109 	add.w	r1, sp, r9
9000ab32:	2008      	movs	r0, #8
9000ab34:	f7f7 f824 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
  * @param  None
  * @retval None
  */
static void AUDIO_REC_DisplayButtons(void)
{
  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
9000ab38:	484c      	ldr	r0, [pc, #304]	; (9000ac6c <AUDIO_REC_Start+0x2e0>)
9000ab3a:	f7f6 fea3 	bl	90001884 <BSP_LCD_SetFont>
  BSP_LCD_ClearStringLine(13);            /* Clear dedicated zone */
9000ab3e:	200d      	movs	r0, #13
9000ab40:	f7f7 f9b8 	bl	90001eb4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(14);
9000ab44:	200e      	movs	r0, #14
9000ab46:	f7f7 f9b5 	bl	90001eb4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(15);
9000ab4a:	200f      	movs	r0, #15
9000ab4c:	f7f7 f9b2 	bl	90001eb4 <BSP_LCD_ClearStringLine>

  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000ab50:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000ab54:	f7f6 fe7e 	bl	90001854 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2, /* Record circle */
9000ab58:	2214      	movs	r2, #20
9000ab5a:	21e8      	movs	r1, #232	; 0xe8
9000ab5c:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000ab60:	f7f7 f9d0 	bl	90001f04 <BSP_LCD_FillCircle>
                     (TOUCH_RECORD_YMAX+TOUCH_RECORD_YMIN)/2,
                     (TOUCH_RECORD_XMAX-TOUCH_RECORD_XMIN)/2);
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);    /* Pause rectangles */
9000ab64:	2328      	movs	r3, #40	; 0x28
9000ab66:	220f      	movs	r2, #15
9000ab68:	21d4      	movs	r1, #212	; 0xd4
9000ab6a:	207d      	movs	r0, #125	; 0x7d
9000ab6c:	f7f7 f966 	bl	90001e3c <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000ab70:	2328      	movs	r3, #40	; 0x28
9000ab72:	220f      	movs	r2, #15
9000ab74:	21d4      	movs	r1, #212	; 0xd4
9000ab76:	2091      	movs	r0, #145	; 0x91
9000ab78:	f7f7 f960 	bl	90001e3c <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
9000ab7c:	2328      	movs	r3, #40	; 0x28
9000ab7e:	21d4      	movs	r1, #212	; 0xd4
9000ab80:	20cd      	movs	r0, #205	; 0xcd
9000ab82:	461a      	mov	r2, r3
9000ab84:	f7f7 f95a 	bl	90001e3c <BSP_LCD_FillRect>
                   TOUCH_STOP_XMAX - TOUCH_STOP_XMIN,
                   TOUCH_STOP_YMAX - TOUCH_STOP_YMIN);
  BSP_LCD_DrawRect(TOUCH_VOL_MINUS_XMIN, TOUCH_VOL_MINUS_YMIN , /* VOl- rectangle */
9000ab88:	2328      	movs	r3, #40	; 0x28
9000ab8a:	2232      	movs	r2, #50	; 0x32
9000ab8c:	21d4      	movs	r1, #212	; 0xd4
9000ab8e:	2014      	movs	r0, #20
9000ab90:	f7f6 ff08 	bl	900019a4 <BSP_LCD_DrawRect>
                   TOUCH_VOL_MINUS_XMAX - TOUCH_VOL_MINUS_XMIN,
                   TOUCH_VOL_MINUS_YMAX - TOUCH_VOL_MINUS_YMIN);
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl-", LEFT_MODE);
9000ab94:	f7f6 fe82 	bl	9000189c <BSP_LCD_GetFont>
9000ab98:	88c1      	ldrh	r1, [r0, #6]
9000ab9a:	2303      	movs	r3, #3
9000ab9c:	4a34      	ldr	r2, [pc, #208]	; (9000ac70 <AUDIO_REC_Start+0x2e4>)
9000ab9e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
9000aba2:	2018      	movs	r0, #24
9000aba4:	0049      	lsls	r1, r1, #1
9000aba6:	b289      	uxth	r1, r1
9000aba8:	f7f6 ff94 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(TOUCH_VOL_PLUS_XMIN, TOUCH_VOL_PLUS_YMIN , /* VOl+ rectangle */
9000abac:	2328      	movs	r3, #40	; 0x28
9000abae:	2232      	movs	r2, #50	; 0x32
9000abb0:	21d4      	movs	r1, #212	; 0xd4
9000abb2:	f44f 70c9 	mov.w	r0, #402	; 0x192
9000abb6:	f7f6 fef5 	bl	900019a4 <BSP_LCD_DrawRect>
                   TOUCH_VOL_PLUS_XMAX - TOUCH_VOL_PLUS_XMIN,
                   TOUCH_VOL_PLUS_YMAX - TOUCH_VOL_PLUS_YMIN);
  BSP_LCD_DisplayStringAt(24, LINE(14), (uint8_t *)"VOl+", RIGHT_MODE);
9000abba:	f7f6 fe6f 	bl	9000189c <BSP_LCD_GetFont>
9000abbe:	88c1      	ldrh	r1, [r0, #6]
9000abc0:	462b      	mov	r3, r5
9000abc2:	4a2c      	ldr	r2, [pc, #176]	; (9000ac74 <AUDIO_REC_Start+0x2e8>)
9000abc4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
9000abc8:	2018      	movs	r0, #24
9000abca:	0049      	lsls	r1, r1, #1
9000abcc:	b289      	uxth	r1, r1
9000abce:	f7f6 ff81 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
9000abd2:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
9000abd6:	f7f6 fe3d 	bl	90001854 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000abda:	4827      	ldr	r0, [pc, #156]	; (9000ac78 <AUDIO_REC_Start+0x2ec>)
9000abdc:	f7f6 fe52 	bl	90001884 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAtLine(15, (uint8_t *)"Use record button to start record, stop to exit");
9000abe0:	4926      	ldr	r1, [pc, #152]	; (9000ac7c <AUDIO_REC_Start+0x2f0>)
9000abe2:	200f      	movs	r0, #15
9000abe4:	f7f6 ffcc 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000abe8:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000abec:	f7f6 fe32 	bl	90001854 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [     ]", LEFT_MODE);
9000abf0:	f7f6 fe54 	bl	9000189c <BSP_LCD_GetFont>
9000abf4:	88c1      	ldrh	r1, [r0, #6]
9000abf6:	2303      	movs	r3, #3
9000abf8:	4a21      	ldr	r2, [pc, #132]	; (9000ac80 <AUDIO_REC_Start+0x2f4>)
9000abfa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000abfe:	20f7      	movs	r0, #247	; 0xf7
9000ac00:	0049      	lsls	r1, r1, #1
9000ac02:	b289      	uxth	r1, r1
9000ac04:	f7f6 ff66 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
        if(byteswritten != 0)
9000ac08:	9b00      	ldr	r3, [sp, #0]
9000ac0a:	2b00      	cmp	r3, #0
9000ac0c:	f43f aece 	beq.w	9000a9ac <AUDIO_REC_Start+0x20>
          BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
9000ac10:	462a      	mov	r2, r5
9000ac12:	4639      	mov	r1, r7
9000ac14:	4630      	mov	r0, r6
9000ac16:	f7f6 fd7b 	bl	90001710 <BSP_AUDIO_IN_Init>
          BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
9000ac1a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
9000ac1e:	4819      	ldr	r0, [pc, #100]	; (9000ac84 <AUDIO_REC_Start+0x2f8>)
9000ac20:	f7f6 fc3a 	bl	90001498 <BSP_AUDIO_IN_Record>
          BufferCtl.fptr = byteswritten;
9000ac24:	4b18      	ldr	r3, [pc, #96]	; (9000ac88 <AUDIO_REC_Start+0x2fc>)
9000ac26:	9a00      	ldr	r2, [sp, #0]
          BufferCtl.pcm_ptr = 0;
9000ac28:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
          BufferCtl.fptr = byteswritten;
9000ac2c:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
          BufferCtl.offset = 0;
9000ac30:	f8c3 4808 	str.w	r4, [r3, #2056]	; 0x808
          BufferCtl.wr_state = BUFFER_EMPTY;
9000ac34:	f883 4804 	strb.w	r4, [r3, #2052]	; 0x804
          return AUDIO_ERROR_NONE;
9000ac38:	e6b9      	b.n	9000a9ae <AUDIO_REC_Start+0x22>
9000ac3a:	bf00      	nop
9000ac3c:	90011126 	.word	0x90011126
9000ac40:	20001320 	.word	0x20001320
9000ac44:	20001550 	.word	0x20001550
9000ac48:	001d4c00 	.word	0x001d4c00
9000ac4c:	00100004 	.word	0x00100004
9000ac50:	2000384c 	.word	0x2000384c
9000ac54:	200012f2 	.word	0x200012f2
9000ac58:	9001112f 	.word	0x9001112f
9000ac5c:	90011052 	.word	0x90011052
9000ac60:	90011066 	.word	0x90011066
9000ac64:	90011142 	.word	0x90011142
9000ac68:	9001114f 	.word	0x9001114f
9000ac6c:	20000078 	.word	0x20000078
9000ac70:	900110ae 	.word	0x900110ae
9000ac74:	900110b3 	.word	0x900110b3
9000ac78:	20000070 	.word	0x20000070
9000ac7c:	9001115b 	.word	0x9001115b
9000ac80:	9001118b 	.word	0x9001118b
9000ac84:	200038a4 	.word	0x200038a4
9000ac88:	200078a4 	.word	0x200078a4
9000ac8c:	200000d8 	.word	0x200000d8

9000ac90 <AUDIO_REC_Process>:
{
9000ac90:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t byteswritten = 0;
9000ac92:	2300      	movs	r3, #0
{
9000ac94:	b087      	sub	sp, #28
  switch(AudioState)
9000ac96:	4ca2      	ldr	r4, [pc, #648]	; (9000af20 <AUDIO_REC_Process+0x290>)
  uint32_t byteswritten = 0;
9000ac98:	9301      	str	r3, [sp, #4]
  switch(AudioState)
9000ac9a:	7823      	ldrb	r3, [r4, #0]
9000ac9c:	3b01      	subs	r3, #1
9000ac9e:	2b0d      	cmp	r3, #13
9000aca0:	d817      	bhi.n	9000acd2 <AUDIO_REC_Process+0x42>
9000aca2:	e8df f013 	tbh	[pc, r3, lsl #1]
9000aca6:	0229      	.short	0x0229
9000aca8:	00160016 	.word	0x00160016
9000acac:	0078000e 	.word	0x0078000e
9000acb0:	00390039 	.word	0x00390039
9000acb4:	00160016 	.word	0x00160016
9000acb8:	01ad0159 	.word	0x01ad0159
9000acbc:	020601da 	.word	0x020601da
9000acc0:	0222      	.short	0x0222
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000acc2:	4d98      	ldr	r5, [pc, #608]	; (9000af24 <AUDIO_REC_Process+0x294>)
9000acc4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000acc8:	2b01      	cmp	r3, #1
9000acca:	d104      	bne.n	9000acd6 <AUDIO_REC_Process+0x46>
      BSP_TS_GetState(&TS_State);
9000accc:	4896      	ldr	r0, [pc, #600]	; (9000af28 <AUDIO_REC_Process+0x298>)
9000acce:	f7f7 fe09 	bl	900028e4 <BSP_TS_GetState>
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
9000acd2:	2500      	movs	r5, #0
9000acd4:	e0df      	b.n	9000ae96 <AUDIO_REC_Process+0x206>
      BSP_TS_GetState(&TS_State);
9000acd6:	f105 002c 	add.w	r0, r5, #44	; 0x2c
9000acda:	f7f7 fe03 	bl	900028e4 <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
9000acde:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
9000ace2:	2a01      	cmp	r2, #1
9000ace4:	d13d      	bne.n	9000ad62 <AUDIO_REC_Process+0xd2>
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
9000ace6:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
9000ace8:	f1a3 01ce 	sub.w	r1, r3, #206	; 0xce
9000acec:	2926      	cmp	r1, #38	; 0x26
9000acee:	d807      	bhi.n	9000ad00 <AUDIO_REC_Process+0x70>
9000acf0:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
9000acf2:	3ad5      	subs	r2, #213	; 0xd5
9000acf4:	b292      	uxth	r2, r2
9000acf6:	2a26      	cmp	r2, #38	; 0x26
9000acf8:	d835      	bhi.n	9000ad66 <AUDIO_REC_Process+0xd6>
      AudioState = AUDIO_STATE_STOP;
9000acfa:	230a      	movs	r3, #10
          AudioState = AUDIO_STATE_PRERECORD;
9000acfc:	7023      	strb	r3, [r4, #0]
9000acfe:	e7e8      	b.n	9000acd2 <AUDIO_REC_Process+0x42>
        else if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
9000ad00:	f46f 7696 	mvn.w	r6, #300	; 0x12c
9000ad04:	1999      	adds	r1, r3, r6
9000ad06:	2926      	cmp	r1, #38	; 0x26
9000ad08:	d808      	bhi.n	9000ad1c <AUDIO_REC_Process+0x8c>
9000ad0a:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000ad0c:	3bd5      	subs	r3, #213	; 0xd5
9000ad0e:	b29b      	uxth	r3, r3
9000ad10:	2b26      	cmp	r3, #38	; 0x26
9000ad12:	d83b      	bhi.n	9000ad8c <AUDIO_REC_Process+0xfc>
          display_update = 1;
9000ad14:	4b85      	ldr	r3, [pc, #532]	; (9000af2c <AUDIO_REC_Process+0x29c>)
9000ad16:	605a      	str	r2, [r3, #4]
    AudioState = AUDIO_STATE_RECORD;
9000ad18:	2305      	movs	r3, #5
9000ad1a:	e7ef      	b.n	9000acfc <AUDIO_REC_Process+0x6c>
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
9000ad1c:	f1a3 0215 	sub.w	r2, r3, #21
9000ad20:	2a30      	cmp	r2, #48	; 0x30
9000ad22:	d820      	bhi.n	9000ad66 <AUDIO_REC_Process+0xd6>
9000ad24:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000ad26:	3bd5      	subs	r3, #213	; 0xd5
9000ad28:	b29b      	uxth	r3, r3
9000ad2a:	2b26      	cmp	r3, #38	; 0x26
9000ad2c:	d82e      	bhi.n	9000ad8c <AUDIO_REC_Process+0xfc>
          AudioState = AUDIO_STATE_VOLUME_DOWN;
9000ad2e:	230e      	movs	r3, #14
9000ad30:	7023      	strb	r3, [r4, #0]
          if(uwVolume_rec >= 5)
9000ad32:	4b7e      	ldr	r3, [pc, #504]	; (9000af2c <AUDIO_REC_Process+0x29c>)
9000ad34:	681a      	ldr	r2, [r3, #0]
9000ad36:	2a04      	cmp	r2, #4
9000ad38:	d902      	bls.n	9000ad40 <AUDIO_REC_Process+0xb0>
        	  uwVolume_rec -= 5;
9000ad3a:	681a      	ldr	r2, [r3, #0]
9000ad3c:	3a05      	subs	r2, #5
        	  uwVolume_rec += 5;
9000ad3e:	601a      	str	r2, [r3, #0]
          sprintf((char *)str,  "Volume : %d ", (int)uwVolume_rec);
9000ad40:	4d7a      	ldr	r5, [pc, #488]	; (9000af2c <AUDIO_REC_Process+0x29c>)
9000ad42:	a802      	add	r0, sp, #8
9000ad44:	497a      	ldr	r1, [pc, #488]	; (9000af30 <AUDIO_REC_Process+0x2a0>)
9000ad46:	682a      	ldr	r2, [r5, #0]
9000ad48:	f000 fc7e 	bl	9000b648 <siprintf>
          BSP_LCD_ClearStringLine(7);
9000ad4c:	2007      	movs	r0, #7
9000ad4e:	f7f7 f8b1 	bl	90001eb4 <BSP_LCD_ClearStringLine>
          BSP_LCD_DisplayStringAtLine(7, str);
9000ad52:	2007      	movs	r0, #7
9000ad54:	a902      	add	r1, sp, #8
9000ad56:	f7f6 ff13 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
          BSP_AUDIO_IN_SetVolume(uwVolume_rec);
9000ad5a:	6828      	ldr	r0, [r5, #0]
9000ad5c:	b2c0      	uxtb	r0, r0
9000ad5e:	f7f6 fbcf 	bl	90001500 <BSP_AUDIO_IN_SetVolume>
          AudioState = AUDIO_STATE_PRERECORD;
9000ad62:	2304      	movs	r3, #4
9000ad64:	e7ca      	b.n	9000acfc <AUDIO_REC_Process+0x6c>
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
9000ad66:	f46f 70c9 	mvn.w	r0, #402	; 0x192
9000ad6a:	4403      	add	r3, r0
9000ad6c:	2b30      	cmp	r3, #48	; 0x30
9000ad6e:	d80d      	bhi.n	9000ad8c <AUDIO_REC_Process+0xfc>
9000ad70:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000ad72:	3bd5      	subs	r3, #213	; 0xd5
9000ad74:	b29b      	uxth	r3, r3
9000ad76:	2b26      	cmp	r3, #38	; 0x26
9000ad78:	d808      	bhi.n	9000ad8c <AUDIO_REC_Process+0xfc>
          AudioState = AUDIO_STATE_VOLUME_UP;
9000ad7a:	230d      	movs	r3, #13
9000ad7c:	7023      	strb	r3, [r4, #0]
          if(uwVolume_rec <= 95)
9000ad7e:	4b6b      	ldr	r3, [pc, #428]	; (9000af2c <AUDIO_REC_Process+0x29c>)
9000ad80:	681a      	ldr	r2, [r3, #0]
9000ad82:	2a5f      	cmp	r2, #95	; 0x5f
9000ad84:	d8dc      	bhi.n	9000ad40 <AUDIO_REC_Process+0xb0>
        	  uwVolume_rec += 5;
9000ad86:	681a      	ldr	r2, [r3, #0]
9000ad88:	3205      	adds	r2, #5
9000ad8a:	e7d8      	b.n	9000ad3e <AUDIO_REC_Process+0xae>
        if ((AudioState == AUDIO_STATE_VOLUME_DOWN) || (AudioState == AUDIO_STATE_VOLUME_UP))
9000ad8c:	7823      	ldrb	r3, [r4, #0]
9000ad8e:	3b0d      	subs	r3, #13
9000ad90:	2b01      	cmp	r3, #1
9000ad92:	d89e      	bhi.n	9000acd2 <AUDIO_REC_Process+0x42>
9000ad94:	e7d4      	b.n	9000ad40 <AUDIO_REC_Process+0xb0>
    if (display_update)
9000ad96:	4f65      	ldr	r7, [pc, #404]	; (9000af2c <AUDIO_REC_Process+0x29c>)
9000ad98:	687b      	ldr	r3, [r7, #4]
9000ad9a:	b1eb      	cbz	r3, 9000add8 <AUDIO_REC_Process+0x148>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red record circle */
9000ad9c:	4865      	ldr	r0, [pc, #404]	; (9000af34 <AUDIO_REC_Process+0x2a4>)
9000ad9e:	f7f6 fd59 	bl	90001854 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000ada2:	2214      	movs	r2, #20
9000ada4:	21e8      	movs	r1, #232	; 0xe8
9000ada6:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000adaa:	f7f7 f8ab 	bl	90001f04 <BSP_LCD_FillCircle>
      BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
9000adae:	4862      	ldr	r0, [pc, #392]	; (9000af38 <AUDIO_REC_Process+0x2a8>)
9000adb0:	f7f6 fd68 	bl	90001884 <BSP_LCD_SetFont>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000adb4:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000adb8:	f7f6 fd4c 	bl	90001854 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [RECORD]", LEFT_MODE);
9000adbc:	f7f6 fd6e 	bl	9000189c <BSP_LCD_GetFont>
9000adc0:	88c1      	ldrh	r1, [r0, #6]
9000adc2:	2303      	movs	r3, #3
9000adc4:	4a5d      	ldr	r2, [pc, #372]	; (9000af3c <AUDIO_REC_Process+0x2ac>)
9000adc6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000adca:	20f7      	movs	r0, #247	; 0xf7
9000adcc:	0049      	lsls	r1, r1, #1
9000adce:	b289      	uxth	r1, r1
9000add0:	f7f6 fe80 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
      display_update = 0;
9000add4:	2300      	movs	r3, #0
9000add6:	607b      	str	r3, [r7, #4]
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000add8:	4d52      	ldr	r5, [pc, #328]	; (9000af24 <AUDIO_REC_Process+0x294>)
9000adda:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
      BSP_TS_GetState(&TS_State);
9000adde:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000ade2:	2b01      	cmp	r3, #1
9000ade4:	d10c      	bne.n	9000ae00 <AUDIO_REC_Process+0x170>
      BSP_TS_GetState(&TS_State);
9000ade6:	f7f7 fd7d 	bl	900028e4 <BSP_TS_GetState>
    if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
9000adea:	4955      	ldr	r1, [pc, #340]	; (9000af40 <AUDIO_REC_Process+0x2b0>)
9000adec:	4b55      	ldr	r3, [pc, #340]	; (9000af44 <AUDIO_REC_Process+0x2b4>)
9000adee:	f501 4680 	add.w	r6, r1, #16384	; 0x4000
9000adf2:	f8d6 280c 	ldr.w	r2, [r6, #2060]	; 0x80c
9000adf6:	429a      	cmp	r2, r3
9000adf8:	d937      	bls.n	9000ae6a <AUDIO_REC_Process+0x1da>
      display_update = 1;
9000adfa:	2301      	movs	r3, #1
9000adfc:	607b      	str	r3, [r7, #4]
9000adfe:	e77c      	b.n	9000acfa <AUDIO_REC_Process+0x6a>
      BSP_TS_GetState(&TS_State);
9000ae00:	f7f7 fd70 	bl	900028e4 <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
9000ae04:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000ae08:	2b01      	cmp	r3, #1
9000ae0a:	d1ee      	bne.n	9000adea <AUDIO_REC_Process+0x15a>
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
9000ae0c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
9000ae0e:	f1a3 02ce 	sub.w	r2, r3, #206	; 0xce
9000ae12:	2a26      	cmp	r2, #38	; 0x26
9000ae14:	d807      	bhi.n	9000ae26 <AUDIO_REC_Process+0x196>
9000ae16:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
9000ae18:	3ad5      	subs	r2, #213	; 0xd5
9000ae1a:	b292      	uxth	r2, r2
9000ae1c:	2a26      	cmp	r2, #38	; 0x26
9000ae1e:	d818      	bhi.n	9000ae52 <AUDIO_REC_Process+0x1c2>
          AudioState = AUDIO_STATE_STOP;
9000ae20:	230a      	movs	r3, #10
          AudioState = AUDIO_STATE_VOLUME_UP;
9000ae22:	7023      	strb	r3, [r4, #0]
9000ae24:	e7e1      	b.n	9000adea <AUDIO_REC_Process+0x15a>
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
9000ae26:	f1a3 027e 	sub.w	r2, r3, #126	; 0x7e
9000ae2a:	2a16      	cmp	r2, #22
9000ae2c:	d806      	bhi.n	9000ae3c <AUDIO_REC_Process+0x1ac>
9000ae2e:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000ae30:	3bd5      	subs	r3, #213	; 0xd5
9000ae32:	b29b      	uxth	r3, r3
9000ae34:	2b26      	cmp	r3, #38	; 0x26
9000ae36:	d8d8      	bhi.n	9000adea <AUDIO_REC_Process+0x15a>
          AudioState = AUDIO_STATE_PAUSE;
9000ae38:	230b      	movs	r3, #11
9000ae3a:	e7f2      	b.n	9000ae22 <AUDIO_REC_Process+0x192>
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
9000ae3c:	f1a3 0215 	sub.w	r2, r3, #21
9000ae40:	2a30      	cmp	r2, #48	; 0x30
9000ae42:	d806      	bhi.n	9000ae52 <AUDIO_REC_Process+0x1c2>
9000ae44:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000ae46:	3bd5      	subs	r3, #213	; 0xd5
9000ae48:	b29b      	uxth	r3, r3
9000ae4a:	2b26      	cmp	r3, #38	; 0x26
9000ae4c:	d8cd      	bhi.n	9000adea <AUDIO_REC_Process+0x15a>
          AudioState = AUDIO_STATE_VOLUME_DOWN;
9000ae4e:	230e      	movs	r3, #14
9000ae50:	e7e7      	b.n	9000ae22 <AUDIO_REC_Process+0x192>
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
9000ae52:	f46f 71c9 	mvn.w	r1, #402	; 0x192
9000ae56:	440b      	add	r3, r1
9000ae58:	2b30      	cmp	r3, #48	; 0x30
9000ae5a:	d8c6      	bhi.n	9000adea <AUDIO_REC_Process+0x15a>
9000ae5c:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000ae5e:	3bd5      	subs	r3, #213	; 0xd5
9000ae60:	b29b      	uxth	r3, r3
9000ae62:	2b26      	cmp	r3, #38	; 0x26
9000ae64:	d8c1      	bhi.n	9000adea <AUDIO_REC_Process+0x15a>
          AudioState = AUDIO_STATE_VOLUME_UP;
9000ae66:	230d      	movs	r3, #13
9000ae68:	e7db      	b.n	9000ae22 <AUDIO_REC_Process+0x192>
    if(BufferCtl.wr_state == BUFFER_FULL)
9000ae6a:	f896 5804 	ldrb.w	r5, [r6, #2052]	; 0x804
9000ae6e:	2d01      	cmp	r5, #1
9000ae70:	d11c      	bne.n	9000aeac <AUDIO_REC_Process+0x21c>
      if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset), 
9000ae72:	f8d6 0808 	ldr.w	r0, [r6, #2056]	; 0x808
9000ae76:	ab01      	add	r3, sp, #4
9000ae78:	f44f 5210 	mov.w	r2, #9216	; 0x2400
9000ae7c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
9000ae80:	4831      	ldr	r0, [pc, #196]	; (9000af48 <AUDIO_REC_Process+0x2b8>)
9000ae82:	f7fe f8f4 	bl	9000906e <f_write>
9000ae86:	b148      	cbz	r0, 9000ae9c <AUDIO_REC_Process+0x20c>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000ae88:	482a      	ldr	r0, [pc, #168]	; (9000af34 <AUDIO_REC_Process+0x2a4>)
9000ae8a:	f7f6 fce3 	bl	90001854 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"RECORD FAIL");
9000ae8e:	492f      	ldr	r1, [pc, #188]	; (9000af4c <AUDIO_REC_Process+0x2bc>)
9000ae90:	200e      	movs	r0, #14
9000ae92:	f7f6 fe75 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
}
9000ae96:	4628      	mov	r0, r5
9000ae98:	b007      	add	sp, #28
9000ae9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      BufferCtl.fptr += byteswritten;
9000ae9c:	f8d6 380c 	ldr.w	r3, [r6, #2060]	; 0x80c
9000aea0:	9a01      	ldr	r2, [sp, #4]
      BufferCtl.wr_state =  BUFFER_EMPTY;
9000aea2:	f886 0804 	strb.w	r0, [r6, #2052]	; 0x804
      BufferCtl.fptr += byteswritten;
9000aea6:	4413      	add	r3, r2
9000aea8:	f8c6 380c 	str.w	r3, [r6, #2060]	; 0x80c
    elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2); 
9000aeac:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
9000aeb0:	f8d6 380c 	ldr.w	r3, [r6, #2060]	; 0x80c
9000aeb4:	fbb3 f3f2 	udiv	r3, r3, r2
    if(prev_elapsed_time != elapsed_time)
9000aeb8:	68ba      	ldr	r2, [r7, #8]
9000aeba:	429a      	cmp	r2, r3
9000aebc:	f43f af09 	beq.w	9000acd2 <AUDIO_REC_Process+0x42>
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
9000aec0:	213c      	movs	r1, #60	; 0x3c
      prev_elapsed_time = elapsed_time;
9000aec2:	60bb      	str	r3, [r7, #8]
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
9000aec4:	a802      	add	r0, sp, #8
9000aec6:	fbb3 f2f1 	udiv	r2, r3, r1
9000aeca:	fb01 3312 	mls	r3, r1, r2, r3
9000aece:	4920      	ldr	r1, [pc, #128]	; (9000af50 <AUDIO_REC_Process+0x2c0>)
9000aed0:	f000 fbba 	bl	9000b648 <siprintf>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
9000aed4:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000aed8:	f7f6 fcbc 	bl	90001854 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(263, LINE(8), str, LEFT_MODE);
9000aedc:	f7f6 fcde 	bl	9000189c <BSP_LCD_GetFont>
9000aee0:	88c1      	ldrh	r1, [r0, #6]
9000aee2:	2303      	movs	r3, #3
9000aee4:	aa02      	add	r2, sp, #8
9000aee6:	00c9      	lsls	r1, r1, #3
9000aee8:	f240 1007 	movw	r0, #263	; 0x107
9000aeec:	b289      	uxth	r1, r1
9000aeee:	f7f6 fdf1 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
      sprintf((char *)str, "%4d KB", (int)((int32_t)BufferCtl.fptr/1024));
9000aef2:	f8d6 280c 	ldr.w	r2, [r6, #2060]	; 0x80c
9000aef6:	4917      	ldr	r1, [pc, #92]	; (9000af54 <AUDIO_REC_Process+0x2c4>)
9000aef8:	a802      	add	r0, sp, #8
9000aefa:	2a00      	cmp	r2, #0
9000aefc:	bfb8      	it	lt
9000aefe:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
9000af02:	1292      	asrs	r2, r2, #10
9000af04:	f000 fba0 	bl	9000b648 <siprintf>
      BSP_LCD_DisplayStringAt(83, LINE(8), str, LEFT_MODE);
9000af08:	f7f6 fcc8 	bl	9000189c <BSP_LCD_GetFont>
9000af0c:	88c1      	ldrh	r1, [r0, #6]
9000af0e:	2303      	movs	r3, #3
9000af10:	aa02      	add	r2, sp, #8
9000af12:	00c9      	lsls	r1, r1, #3
9000af14:	2053      	movs	r0, #83	; 0x53
9000af16:	b289      	uxth	r1, r1
9000af18:	f7f6 fddc 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
9000af1c:	e6d9      	b.n	9000acd2 <AUDIO_REC_Process+0x42>
9000af1e:	bf00      	nop
9000af20:	200012f2 	.word	0x200012f2
9000af24:	2000384c 	.word	0x2000384c
9000af28:	20003878 	.word	0x20003878
9000af2c:	200000d8 	.word	0x200000d8
9000af30:	90011142 	.word	0x90011142
9000af34:	ffff0000 	.word	0xffff0000
9000af38:	20000070 	.word	0x20000070
9000af3c:	90011195 	.word	0x90011195
9000af40:	200038a4 	.word	0x200038a4
9000af44:	001d4bff 	.word	0x001d4bff
9000af48:	20001320 	.word	0x20001320
9000af4c:	900111a0 	.word	0x900111a0
9000af50:	9001108d 	.word	0x9001108d
9000af54:	900111ac 	.word	0x900111ac
    BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
9000af58:	2002      	movs	r0, #2
9000af5a:	f7f6 faa7 	bl	900014ac <BSP_AUDIO_IN_Stop>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);   /* Display blue cyan record circle */
9000af5e:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000af62:	f7f6 fc77 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000af66:	2214      	movs	r2, #20
9000af68:	21e8      	movs	r1, #232	; 0xe8
9000af6a:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000af6e:	f7f6 ffc9 	bl	90001f04 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000af72:	4872      	ldr	r0, [pc, #456]	; (9000b13c <AUDIO_REC_Process+0x4ac>)
9000af74:	f7f6 fc6e 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
9000af78:	2328      	movs	r3, #40	; 0x28
9000af7a:	21d4      	movs	r1, #212	; 0xd4
9000af7c:	20cd      	movs	r0, #205	; 0xcd
9000af7e:	461a      	mov	r2, r3
9000af80:	f7f6 ff5c 	bl	90001e3c <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
9000af84:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000af88:	f7f6 fc64 	bl	90001854 <BSP_LCD_SetTextColor>
    display_update = 1;
9000af8c:	4b6c      	ldr	r3, [pc, #432]	; (9000b140 <AUDIO_REC_Process+0x4b0>)
9000af8e:	2201      	movs	r2, #1
    HAL_Delay(150);
9000af90:	2096      	movs	r0, #150	; 0x96
    display_update = 1;
9000af92:	605a      	str	r2, [r3, #4]
    HAL_Delay(150);
9000af94:	f7f7 fda0 	bl	90002ad8 <HAL_Delay>
    if(f_lseek(&WavFile, 0) == FR_OK)
9000af98:	2100      	movs	r1, #0
9000af9a:	486a      	ldr	r0, [pc, #424]	; (9000b144 <AUDIO_REC_Process+0x4b4>)
9000af9c:	f7fe f989 	bl	900092b2 <f_lseek>
9000afa0:	b9f0      	cbnz	r0, 9000afe0 <AUDIO_REC_Process+0x350>
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
9000afa2:	4a69      	ldr	r2, [pc, #420]	; (9000b148 <AUDIO_REC_Process+0x4b8>)
9000afa4:	4969      	ldr	r1, [pc, #420]	; (9000b14c <AUDIO_REC_Process+0x4bc>)
9000afa6:	f8d2 380c 	ldr.w	r3, [r2, #2060]	; 0x80c
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
9000afaa:	0a18      	lsrs	r0, r3, #8
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
9000afac:	710b      	strb	r3, [r1, #4]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
9000afae:	7148      	strb	r0, [r1, #5]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
9000afb0:	0c18      	lsrs	r0, r3, #16
9000afb2:	7188      	strb	r0, [r1, #6]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
9000afb4:	0e18      	lsrs	r0, r3, #24
  BufferCtl.fptr -=44;
9000afb6:	3b2c      	subs	r3, #44	; 0x2c
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
9000afb8:	71c8      	strb	r0, [r1, #7]
  BufferCtl.fptr -=44;
9000afba:	f8c2 380c 	str.w	r3, [r2, #2060]	; 0x80c
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
9000afbe:	0a1a      	lsrs	r2, r3, #8
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
9000afc0:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
9000afc4:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
9000afc8:	0c1a      	lsrs	r2, r3, #16
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
9000afca:	0e1b      	lsrs	r3, r3, #24
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
9000afcc:	485d      	ldr	r0, [pc, #372]	; (9000b144 <AUDIO_REC_Process+0x4b4>)
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
9000afce:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
9000afd2:	222c      	movs	r2, #44	; 0x2c
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
9000afd4:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
9000afd8:	ab01      	add	r3, sp, #4
9000afda:	f7fe f848 	bl	9000906e <f_write>
9000afde:	b168      	cbz	r0, 9000affc <AUDIO_REC_Process+0x36c>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000afe0:	4856      	ldr	r0, [pc, #344]	; (9000b13c <AUDIO_REC_Process+0x4ac>)
        audio_error = AUDIO_ERROR_IO;
9000afe2:	2501      	movs	r5, #1
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
9000afe4:	f7f6 fc36 	bl	90001854 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"RECORD FAIL");          
9000afe8:	4959      	ldr	r1, [pc, #356]	; (9000b150 <AUDIO_REC_Process+0x4c0>)
9000afea:	200e      	movs	r0, #14
9000afec:	f7f6 fdc8 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
    AudioState = AUDIO_STATE_IDLE;      
9000aff0:	2300      	movs	r3, #0
    f_close(&WavFile);
9000aff2:	4854      	ldr	r0, [pc, #336]	; (9000b144 <AUDIO_REC_Process+0x4b4>)
    AudioState = AUDIO_STATE_IDLE;      
9000aff4:	7023      	strb	r3, [r4, #0]
    f_close(&WavFile);
9000aff6:	f7fe f94b 	bl	90009290 <f_close>
    break;
9000affa:	e74c      	b.n	9000ae96 <AUDIO_REC_Process+0x206>
        audio_error = AUDIO_ERROR_EOF;
9000affc:	2502      	movs	r5, #2
9000affe:	e7f7      	b.n	9000aff0 <AUDIO_REC_Process+0x360>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Displays red pause rectangles */
9000b000:	484e      	ldr	r0, [pc, #312]	; (9000b13c <AUDIO_REC_Process+0x4ac>)
9000b002:	f7f6 fc27 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000b006:	2328      	movs	r3, #40	; 0x28
9000b008:	220f      	movs	r2, #15
9000b00a:	21d4      	movs	r1, #212	; 0xd4
9000b00c:	207d      	movs	r0, #125	; 0x7d
9000b00e:	f7f6 ff15 	bl	90001e3c <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000b012:	2328      	movs	r3, #40	; 0x28
9000b014:	220f      	movs	r2, #15
9000b016:	21d4      	movs	r1, #212	; 0xd4
9000b018:	2091      	movs	r0, #145	; 0x91
9000b01a:	f7f6 ff0f 	bl	90001e3c <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);   /* Display blue cyan record circle */
9000b01e:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000b022:	f7f6 fc17 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000b026:	2214      	movs	r2, #20
9000b028:	21e8      	movs	r1, #232	; 0xe8
9000b02a:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000b02e:	f7f6 ff69 	bl	90001f04 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000b032:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000b036:	f7f6 fc0d 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [PAUSE] ", LEFT_MODE);    
9000b03a:	f7f6 fc2f 	bl	9000189c <BSP_LCD_GetFont>
9000b03e:	88c1      	ldrh	r1, [r0, #6]
9000b040:	2303      	movs	r3, #3
9000b042:	4a44      	ldr	r2, [pc, #272]	; (9000b154 <AUDIO_REC_Process+0x4c4>)
9000b044:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000b048:	20f7      	movs	r0, #247	; 0xf7
9000b04a:	0049      	lsls	r1, r1, #1
9000b04c:	b289      	uxth	r1, r1
9000b04e:	f7f6 fd41 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
    BSP_AUDIO_IN_Pause();
9000b052:	f7f6 fa45 	bl	900014e0 <BSP_AUDIO_IN_Pause>
    AudioState = AUDIO_STATE_WAIT;
9000b056:	2301      	movs	r3, #1
9000b058:	e650      	b.n	9000acfc <AUDIO_REC_Process+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);    /* Displays blue cyan pause rectangles */
9000b05a:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
9000b05e:	f7f6 fbf9 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000b062:	2328      	movs	r3, #40	; 0x28
9000b064:	220f      	movs	r2, #15
9000b066:	21d4      	movs	r1, #212	; 0xd4
9000b068:	207d      	movs	r0, #125	; 0x7d
9000b06a:	f7f6 fee7 	bl	90001e3c <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
9000b06e:	2328      	movs	r3, #40	; 0x28
9000b070:	220f      	movs	r2, #15
9000b072:	21d4      	movs	r1, #212	; 0xd4
9000b074:	2091      	movs	r0, #145	; 0x91
9000b076:	f7f6 fee1 	bl	90001e3c <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red record circle */
9000b07a:	4830      	ldr	r0, [pc, #192]	; (9000b13c <AUDIO_REC_Process+0x4ac>)
9000b07c:	f7f6 fbea 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
9000b080:	2214      	movs	r2, #20
9000b082:	21e8      	movs	r1, #232	; 0xe8
9000b084:	f44f 70a0 	mov.w	r0, #320	; 0x140
9000b088:	f7f6 ff3c 	bl	90001f04 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000b08c:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000b090:	f7f6 fbe0 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [RECORD]", LEFT_MODE);   
9000b094:	f7f6 fc02 	bl	9000189c <BSP_LCD_GetFont>
9000b098:	88c1      	ldrh	r1, [r0, #6]
9000b09a:	2303      	movs	r3, #3
9000b09c:	4a2e      	ldr	r2, [pc, #184]	; (9000b158 <AUDIO_REC_Process+0x4c8>)
9000b09e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000b0a2:	20f7      	movs	r0, #247	; 0xf7
9000b0a4:	0049      	lsls	r1, r1, #1
9000b0a6:	b289      	uxth	r1, r1
9000b0a8:	f7f6 fd14 	bl	90001ad4 <BSP_LCD_DisplayStringAt>
    BSP_AUDIO_IN_Resume();
9000b0ac:	f7f6 fa20 	bl	900014f0 <BSP_AUDIO_IN_Resume>
    AudioState = AUDIO_STATE_RECORD;
9000b0b0:	e632      	b.n	9000ad18 <AUDIO_REC_Process+0x88>
    if(uwVolume_rec <= 95)
9000b0b2:	4d23      	ldr	r5, [pc, #140]	; (9000b140 <AUDIO_REC_Process+0x4b0>)
9000b0b4:	682b      	ldr	r3, [r5, #0]
9000b0b6:	2b5f      	cmp	r3, #95	; 0x5f
9000b0b8:	d802      	bhi.n	9000b0c0 <AUDIO_REC_Process+0x430>
    	uwVolume_rec += 5;
9000b0ba:	682b      	ldr	r3, [r5, #0]
9000b0bc:	3305      	adds	r3, #5
    	uwVolume_rec -= 5;
9000b0be:	602b      	str	r3, [r5, #0]
    sprintf((char *)str,  "Volume : %d ", (int)uwVolume_rec);
9000b0c0:	682a      	ldr	r2, [r5, #0]
9000b0c2:	a802      	add	r0, sp, #8
9000b0c4:	4925      	ldr	r1, [pc, #148]	; (9000b15c <AUDIO_REC_Process+0x4cc>)
9000b0c6:	f000 fabf 	bl	9000b648 <siprintf>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
9000b0ca:	f06f 00ff 	mvn.w	r0, #255	; 0xff
9000b0ce:	f7f6 fbc1 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_ClearStringLine(7);
9000b0d2:	2007      	movs	r0, #7
9000b0d4:	f7f6 feee 	bl	90001eb4 <BSP_LCD_ClearStringLine>
    BSP_LCD_DisplayStringAtLine(7, str);
9000b0d8:	a902      	add	r1, sp, #8
9000b0da:	2007      	movs	r0, #7
9000b0dc:	f7f6 fd50 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
    BSP_AUDIO_IN_SetVolume(uwVolume_rec);
9000b0e0:	6828      	ldr	r0, [r5, #0]
9000b0e2:	b2c0      	uxtb	r0, r0
9000b0e4:	f7f6 fa0c 	bl	90001500 <BSP_AUDIO_IN_SetVolume>
    AudioState = AUDIO_STATE_RECORD;
9000b0e8:	e616      	b.n	9000ad18 <AUDIO_REC_Process+0x88>
    if(uwVolume_rec >= 5)
9000b0ea:	4d15      	ldr	r5, [pc, #84]	; (9000b140 <AUDIO_REC_Process+0x4b0>)
9000b0ec:	682b      	ldr	r3, [r5, #0]
9000b0ee:	2b04      	cmp	r3, #4
9000b0f0:	d9e6      	bls.n	9000b0c0 <AUDIO_REC_Process+0x430>
    	uwVolume_rec -= 5;
9000b0f2:	682b      	ldr	r3, [r5, #0]
9000b0f4:	3b05      	subs	r3, #5
9000b0f6:	e7e2      	b.n	9000b0be <AUDIO_REC_Process+0x42e>
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
9000b0f8:	4d14      	ldr	r5, [pc, #80]	; (9000b14c <AUDIO_REC_Process+0x4bc>)
9000b0fa:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000b0fe:	2b01      	cmp	r3, #1
9000b100:	f43f ade4 	beq.w	9000accc <AUDIO_REC_Process+0x3c>
      BSP_TS_GetState(&TS_State);
9000b104:	f105 002c 	add.w	r0, r5, #44	; 0x2c
9000b108:	f7f7 fbec 	bl	900028e4 <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
9000b10c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
9000b110:	2b01      	cmp	r3, #1
9000b112:	f47f adde 	bne.w	9000acd2 <AUDIO_REC_Process+0x42>
        if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
9000b116:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
9000b118:	f46f 7296 	mvn.w	r2, #300	; 0x12c
9000b11c:	189a      	adds	r2, r3, r2
9000b11e:	2a26      	cmp	r2, #38	; 0x26
9000b120:	d807      	bhi.n	9000b132 <AUDIO_REC_Process+0x4a2>
9000b122:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
9000b124:	3bd5      	subs	r3, #213	; 0xd5
9000b126:	b29b      	uxth	r3, r3
9000b128:	2b26      	cmp	r3, #38	; 0x26
9000b12a:	f63f add2 	bhi.w	9000acd2 <AUDIO_REC_Process+0x42>
          AudioState = AUDIO_STATE_RESUME;
9000b12e:	230c      	movs	r3, #12
9000b130:	e5e4      	b.n	9000acfc <AUDIO_REC_Process+0x6c>
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
9000b132:	3b7e      	subs	r3, #126	; 0x7e
9000b134:	2b16      	cmp	r3, #22
9000b136:	d9f4      	bls.n	9000b122 <AUDIO_REC_Process+0x492>
9000b138:	e5cb      	b.n	9000acd2 <AUDIO_REC_Process+0x42>
9000b13a:	bf00      	nop
9000b13c:	ffff0000 	.word	0xffff0000
9000b140:	200000d8 	.word	0x200000d8
9000b144:	20001320 	.word	0x20001320
9000b148:	200078a4 	.word	0x200078a4
9000b14c:	2000384c 	.word	0x2000384c
9000b150:	900111a0 	.word	0x900111a0
9000b154:	900111b3 	.word	0x900111b3
9000b158:	90011195 	.word	0x90011195
9000b15c:	90011142 	.word	0x90011142

9000b160 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
9000b160:	4b0f      	ldr	r3, [pc, #60]	; (9000b1a0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x40>)
9000b162:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
9000b166:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
9000b16a:	f5b2 5f90 	cmp.w	r2, #4608	; 0x1200
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
9000b16e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
9000b172:	d106      	bne.n	9000b182 <BSP_AUDIO_IN_TransferComplete_CallBack+0x22>
    BufferCtl.wr_state   =  BUFFER_FULL;
9000b174:	2201      	movs	r2, #1
9000b176:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
    BufferCtl.offset  = 0;
9000b17a:	2200      	movs	r2, #0
9000b17c:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
9000b180:	4770      	bx	lr
9000b182:	f5b2 5f10 	cmp.w	r2, #9216	; 0x2400
9000b186:	d309      	bcc.n	9000b19c <BSP_AUDIO_IN_TransferComplete_CallBack+0x3c>
    BufferCtl.wr_state   =  BUFFER_FULL;
9000b188:	2201      	movs	r2, #1
9000b18a:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
9000b18e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
9000b192:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
    BufferCtl.pcm_ptr = 0;
9000b196:	2200      	movs	r2, #0
9000b198:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
9000b19c:	4770      	bx	lr
9000b19e:	bf00      	nop
9000b1a0:	200078a4 	.word	0x200078a4

9000b1a4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
9000b1a4:	f7ff bfdc 	b.w	9000b160 <BSP_AUDIO_IN_TransferComplete_CallBack>

9000b1a8 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
9000b1a8:	4b08      	ldr	r3, [pc, #32]	; (9000b1cc <LCD_LOG_DeInit+0x24>)
9000b1aa:	f04f 32ff 	mov.w	r2, #4294967295
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
9000b1ae:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
9000b1b0:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
9000b1b2:	2200      	movs	r2, #0
  LCD_CacheBuffer_yptr_invert= ENABLE;
9000b1b4:	7399      	strb	r1, [r3, #14]
  LCD_CacheBuffer_xptr = 0;
9000b1b6:	809a      	strh	r2, [r3, #4]
  LCD_CacheBuffer_yptr_top = 0;
9000b1b8:	80da      	strh	r2, [r3, #6]
  LCD_CacheBuffer_yptr_bottom = 0;
9000b1ba:	811a      	strh	r2, [r3, #8]
  LCD_CacheBuffer_yptr_top_bak = 0;
9000b1bc:	815a      	strh	r2, [r3, #10]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
9000b1be:	819a      	strh	r2, [r3, #12]
  LCD_ScrollActive = DISABLE;
9000b1c0:	73da      	strb	r2, [r3, #15]
  LCD_Lock = DISABLE;
9000b1c2:	741a      	strb	r2, [r3, #16]
  LCD_Scrolled = DISABLE;
9000b1c4:	745a      	strb	r2, [r3, #17]
  LCD_ScrollBackStep = 0;
9000b1c6:	825a      	strh	r2, [r3, #18]
}
9000b1c8:	4770      	bx	lr
9000b1ca:	bf00      	nop
9000b1cc:	200080b4 	.word	0x200080b4

9000b1d0 <LCD_LOG_Init>:
{
9000b1d0:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
9000b1d2:	f7ff ffe9 	bl	9000b1a8 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
9000b1d6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
}
9000b1da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
9000b1de:	f7f6 bb69 	b.w	900018b4 <BSP_LCD_Clear>
	...

9000b1e4 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
9000b1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
9000b1e8:	4c1b      	ldr	r4, [pc, #108]	; (9000b258 <LCD_LOG_UpdateDisplay+0x74>)
9000b1ea:	4f1c      	ldr	r7, [pc, #112]	; (9000b25c <LCD_LOG_UpdateDisplay+0x78>)
9000b1ec:	8923      	ldrh	r3, [r4, #8]
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
9000b1ee:	88e2      	ldrh	r2, [r4, #6]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
9000b1f0:	2b08      	cmp	r3, #8
9000b1f2:	d811      	bhi.n	9000b218 <LCD_LOG_UpdateDisplay+0x34>
9000b1f4:	4293      	cmp	r3, r2
9000b1f6:	d311      	bcc.n	9000b21c <LCD_LOG_UpdateDisplay+0x38>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
9000b1f8:	2584      	movs	r5, #132	; 0x84
9000b1fa:	fb05 7303 	mla	r3, r5, r3, r7
9000b1fe:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
9000b202:	f7f6 fb27 	bl	90001854 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
9000b206:	8921      	ldrh	r1, [r4, #8]
9000b208:	1d08      	adds	r0, r1, #4
9000b20a:	fb05 7101 	mla	r1, r5, r1, r7
9000b20e:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
9000b210:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
9000b214:	f7f6 bcb4 	b.w	90001b80 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
9000b218:	4293      	cmp	r3, r2
9000b21a:	d201      	bcs.n	9000b220 <LCD_LOG_UpdateDisplay+0x3c>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
9000b21c:	336e      	adds	r3, #110	; 0x6e
9000b21e:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
9000b220:	3b09      	subs	r3, #9
9000b222:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
9000b224:	f04f 086e 	mov.w	r8, #110	; 0x6e
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
9000b228:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
9000b22c:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
9000b22e:	19a5      	adds	r5, r4, r6
9000b230:	fbb5 f3f8 	udiv	r3, r5, r8
9000b234:	fb08 5513 	mls	r5, r8, r3, r5
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
9000b238:	fb09 7505 	mla	r5, r9, r5, r7
9000b23c:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
9000b240:	f7f6 fb08 	bl	90001854 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
9000b244:	1d30      	adds	r0, r6, #4
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
9000b246:	3601      	adds	r6, #1
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
9000b248:	4629      	mov	r1, r5
9000b24a:	b280      	uxth	r0, r0
9000b24c:	f7f6 fc98 	bl	90001b80 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
9000b250:	2e0a      	cmp	r6, #10
9000b252:	d1ec      	bne.n	9000b22e <LCD_LOG_UpdateDisplay+0x4a>
}
9000b254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b258:	200080b4 	.word	0x200080b4
9000b25c:	200080c8 	.word	0x200080c8

9000b260 <malloc>:
9000b260:	4b02      	ldr	r3, [pc, #8]	; (9000b26c <malloc+0xc>)
9000b262:	4601      	mov	r1, r0
9000b264:	6818      	ldr	r0, [r3, #0]
9000b266:	f000 b82b 	b.w	9000b2c0 <_malloc_r>
9000b26a:	bf00      	nop
9000b26c:	2000013c 	.word	0x2000013c

9000b270 <free>:
9000b270:	4b02      	ldr	r3, [pc, #8]	; (9000b27c <free+0xc>)
9000b272:	4601      	mov	r1, r0
9000b274:	6818      	ldr	r0, [r3, #0]
9000b276:	f000 bb97 	b.w	9000b9a8 <_free_r>
9000b27a:	bf00      	nop
9000b27c:	2000013c 	.word	0x2000013c

9000b280 <sbrk_aligned>:
9000b280:	b570      	push	{r4, r5, r6, lr}
9000b282:	4e0e      	ldr	r6, [pc, #56]	; (9000b2bc <sbrk_aligned+0x3c>)
9000b284:	460c      	mov	r4, r1
9000b286:	6831      	ldr	r1, [r6, #0]
9000b288:	4605      	mov	r5, r0
9000b28a:	b911      	cbnz	r1, 9000b292 <sbrk_aligned+0x12>
9000b28c:	f000 fb3a 	bl	9000b904 <_sbrk_r>
9000b290:	6030      	str	r0, [r6, #0]
9000b292:	4621      	mov	r1, r4
9000b294:	4628      	mov	r0, r5
9000b296:	f000 fb35 	bl	9000b904 <_sbrk_r>
9000b29a:	1c43      	adds	r3, r0, #1
9000b29c:	d00a      	beq.n	9000b2b4 <sbrk_aligned+0x34>
9000b29e:	1cc4      	adds	r4, r0, #3
9000b2a0:	f024 0403 	bic.w	r4, r4, #3
9000b2a4:	42a0      	cmp	r0, r4
9000b2a6:	d007      	beq.n	9000b2b8 <sbrk_aligned+0x38>
9000b2a8:	1a21      	subs	r1, r4, r0
9000b2aa:	4628      	mov	r0, r5
9000b2ac:	f000 fb2a 	bl	9000b904 <_sbrk_r>
9000b2b0:	3001      	adds	r0, #1
9000b2b2:	d101      	bne.n	9000b2b8 <sbrk_aligned+0x38>
9000b2b4:	f04f 34ff 	mov.w	r4, #4294967295
9000b2b8:	4620      	mov	r0, r4
9000b2ba:	bd70      	pop	{r4, r5, r6, pc}
9000b2bc:	2000b984 	.word	0x2000b984

9000b2c0 <_malloc_r>:
9000b2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000b2c4:	1ccd      	adds	r5, r1, #3
9000b2c6:	f025 0503 	bic.w	r5, r5, #3
9000b2ca:	3508      	adds	r5, #8
9000b2cc:	2d0c      	cmp	r5, #12
9000b2ce:	bf38      	it	cc
9000b2d0:	250c      	movcc	r5, #12
9000b2d2:	2d00      	cmp	r5, #0
9000b2d4:	4607      	mov	r7, r0
9000b2d6:	db01      	blt.n	9000b2dc <_malloc_r+0x1c>
9000b2d8:	42a9      	cmp	r1, r5
9000b2da:	d905      	bls.n	9000b2e8 <_malloc_r+0x28>
9000b2dc:	230c      	movs	r3, #12
9000b2de:	603b      	str	r3, [r7, #0]
9000b2e0:	2600      	movs	r6, #0
9000b2e2:	4630      	mov	r0, r6
9000b2e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b2e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 9000b3bc <_malloc_r+0xfc>
9000b2ec:	f000 f868 	bl	9000b3c0 <__malloc_lock>
9000b2f0:	f8d8 3000 	ldr.w	r3, [r8]
9000b2f4:	461c      	mov	r4, r3
9000b2f6:	bb5c      	cbnz	r4, 9000b350 <_malloc_r+0x90>
9000b2f8:	4629      	mov	r1, r5
9000b2fa:	4638      	mov	r0, r7
9000b2fc:	f7ff ffc0 	bl	9000b280 <sbrk_aligned>
9000b300:	1c43      	adds	r3, r0, #1
9000b302:	4604      	mov	r4, r0
9000b304:	d155      	bne.n	9000b3b2 <_malloc_r+0xf2>
9000b306:	f8d8 4000 	ldr.w	r4, [r8]
9000b30a:	4626      	mov	r6, r4
9000b30c:	2e00      	cmp	r6, #0
9000b30e:	d145      	bne.n	9000b39c <_malloc_r+0xdc>
9000b310:	2c00      	cmp	r4, #0
9000b312:	d048      	beq.n	9000b3a6 <_malloc_r+0xe6>
9000b314:	6823      	ldr	r3, [r4, #0]
9000b316:	4631      	mov	r1, r6
9000b318:	4638      	mov	r0, r7
9000b31a:	eb04 0903 	add.w	r9, r4, r3
9000b31e:	f000 faf1 	bl	9000b904 <_sbrk_r>
9000b322:	4581      	cmp	r9, r0
9000b324:	d13f      	bne.n	9000b3a6 <_malloc_r+0xe6>
9000b326:	6821      	ldr	r1, [r4, #0]
9000b328:	1a6d      	subs	r5, r5, r1
9000b32a:	4629      	mov	r1, r5
9000b32c:	4638      	mov	r0, r7
9000b32e:	f7ff ffa7 	bl	9000b280 <sbrk_aligned>
9000b332:	3001      	adds	r0, #1
9000b334:	d037      	beq.n	9000b3a6 <_malloc_r+0xe6>
9000b336:	6823      	ldr	r3, [r4, #0]
9000b338:	442b      	add	r3, r5
9000b33a:	6023      	str	r3, [r4, #0]
9000b33c:	f8d8 3000 	ldr.w	r3, [r8]
9000b340:	2b00      	cmp	r3, #0
9000b342:	d038      	beq.n	9000b3b6 <_malloc_r+0xf6>
9000b344:	685a      	ldr	r2, [r3, #4]
9000b346:	42a2      	cmp	r2, r4
9000b348:	d12b      	bne.n	9000b3a2 <_malloc_r+0xe2>
9000b34a:	2200      	movs	r2, #0
9000b34c:	605a      	str	r2, [r3, #4]
9000b34e:	e00f      	b.n	9000b370 <_malloc_r+0xb0>
9000b350:	6822      	ldr	r2, [r4, #0]
9000b352:	1b52      	subs	r2, r2, r5
9000b354:	d41f      	bmi.n	9000b396 <_malloc_r+0xd6>
9000b356:	2a0b      	cmp	r2, #11
9000b358:	d917      	bls.n	9000b38a <_malloc_r+0xca>
9000b35a:	1961      	adds	r1, r4, r5
9000b35c:	42a3      	cmp	r3, r4
9000b35e:	6025      	str	r5, [r4, #0]
9000b360:	bf18      	it	ne
9000b362:	6059      	strne	r1, [r3, #4]
9000b364:	6863      	ldr	r3, [r4, #4]
9000b366:	bf08      	it	eq
9000b368:	f8c8 1000 	streq.w	r1, [r8]
9000b36c:	5162      	str	r2, [r4, r5]
9000b36e:	604b      	str	r3, [r1, #4]
9000b370:	4638      	mov	r0, r7
9000b372:	f104 060b 	add.w	r6, r4, #11
9000b376:	f000 f829 	bl	9000b3cc <__malloc_unlock>
9000b37a:	f026 0607 	bic.w	r6, r6, #7
9000b37e:	1d23      	adds	r3, r4, #4
9000b380:	1af2      	subs	r2, r6, r3
9000b382:	d0ae      	beq.n	9000b2e2 <_malloc_r+0x22>
9000b384:	1b9b      	subs	r3, r3, r6
9000b386:	50a3      	str	r3, [r4, r2]
9000b388:	e7ab      	b.n	9000b2e2 <_malloc_r+0x22>
9000b38a:	42a3      	cmp	r3, r4
9000b38c:	6862      	ldr	r2, [r4, #4]
9000b38e:	d1dd      	bne.n	9000b34c <_malloc_r+0x8c>
9000b390:	f8c8 2000 	str.w	r2, [r8]
9000b394:	e7ec      	b.n	9000b370 <_malloc_r+0xb0>
9000b396:	4623      	mov	r3, r4
9000b398:	6864      	ldr	r4, [r4, #4]
9000b39a:	e7ac      	b.n	9000b2f6 <_malloc_r+0x36>
9000b39c:	4634      	mov	r4, r6
9000b39e:	6876      	ldr	r6, [r6, #4]
9000b3a0:	e7b4      	b.n	9000b30c <_malloc_r+0x4c>
9000b3a2:	4613      	mov	r3, r2
9000b3a4:	e7cc      	b.n	9000b340 <_malloc_r+0x80>
9000b3a6:	230c      	movs	r3, #12
9000b3a8:	603b      	str	r3, [r7, #0]
9000b3aa:	4638      	mov	r0, r7
9000b3ac:	f000 f80e 	bl	9000b3cc <__malloc_unlock>
9000b3b0:	e797      	b.n	9000b2e2 <_malloc_r+0x22>
9000b3b2:	6025      	str	r5, [r4, #0]
9000b3b4:	e7dc      	b.n	9000b370 <_malloc_r+0xb0>
9000b3b6:	605b      	str	r3, [r3, #4]
9000b3b8:	deff      	udf	#255	; 0xff
9000b3ba:	bf00      	nop
9000b3bc:	2000b980 	.word	0x2000b980

9000b3c0 <__malloc_lock>:
9000b3c0:	4801      	ldr	r0, [pc, #4]	; (9000b3c8 <__malloc_lock+0x8>)
9000b3c2:	f000 bae6 	b.w	9000b992 <__retarget_lock_acquire_recursive>
9000b3c6:	bf00      	nop
9000b3c8:	2000bac8 	.word	0x2000bac8

9000b3cc <__malloc_unlock>:
9000b3cc:	4801      	ldr	r0, [pc, #4]	; (9000b3d4 <__malloc_unlock+0x8>)
9000b3ce:	f000 bae1 	b.w	9000b994 <__retarget_lock_release_recursive>
9000b3d2:	bf00      	nop
9000b3d4:	2000bac8 	.word	0x2000bac8

9000b3d8 <std>:
9000b3d8:	2300      	movs	r3, #0
9000b3da:	b510      	push	{r4, lr}
9000b3dc:	4604      	mov	r4, r0
9000b3de:	e9c0 3300 	strd	r3, r3, [r0]
9000b3e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000b3e6:	6083      	str	r3, [r0, #8]
9000b3e8:	8181      	strh	r1, [r0, #12]
9000b3ea:	6643      	str	r3, [r0, #100]	; 0x64
9000b3ec:	81c2      	strh	r2, [r0, #14]
9000b3ee:	6183      	str	r3, [r0, #24]
9000b3f0:	4619      	mov	r1, r3
9000b3f2:	2208      	movs	r2, #8
9000b3f4:	305c      	adds	r0, #92	; 0x5c
9000b3f6:	f000 fa1f 	bl	9000b838 <memset>
9000b3fa:	4b0d      	ldr	r3, [pc, #52]	; (9000b430 <std+0x58>)
9000b3fc:	6263      	str	r3, [r4, #36]	; 0x24
9000b3fe:	4b0d      	ldr	r3, [pc, #52]	; (9000b434 <std+0x5c>)
9000b400:	62a3      	str	r3, [r4, #40]	; 0x28
9000b402:	4b0d      	ldr	r3, [pc, #52]	; (9000b438 <std+0x60>)
9000b404:	62e3      	str	r3, [r4, #44]	; 0x2c
9000b406:	4b0d      	ldr	r3, [pc, #52]	; (9000b43c <std+0x64>)
9000b408:	6323      	str	r3, [r4, #48]	; 0x30
9000b40a:	4b0d      	ldr	r3, [pc, #52]	; (9000b440 <std+0x68>)
9000b40c:	6224      	str	r4, [r4, #32]
9000b40e:	429c      	cmp	r4, r3
9000b410:	d006      	beq.n	9000b420 <std+0x48>
9000b412:	f103 0268 	add.w	r2, r3, #104	; 0x68
9000b416:	4294      	cmp	r4, r2
9000b418:	d002      	beq.n	9000b420 <std+0x48>
9000b41a:	33d0      	adds	r3, #208	; 0xd0
9000b41c:	429c      	cmp	r4, r3
9000b41e:	d105      	bne.n	9000b42c <std+0x54>
9000b420:	f104 0058 	add.w	r0, r4, #88	; 0x58
9000b424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000b428:	f000 bab2 	b.w	9000b990 <__retarget_lock_init_recursive>
9000b42c:	bd10      	pop	{r4, pc}
9000b42e:	bf00      	nop
9000b430:	9000b689 	.word	0x9000b689
9000b434:	9000b6ab 	.word	0x9000b6ab
9000b438:	9000b6e3 	.word	0x9000b6e3
9000b43c:	9000b707 	.word	0x9000b707
9000b440:	2000b988 	.word	0x2000b988

9000b444 <stdio_exit_handler>:
9000b444:	4a02      	ldr	r2, [pc, #8]	; (9000b450 <stdio_exit_handler+0xc>)
9000b446:	4903      	ldr	r1, [pc, #12]	; (9000b454 <stdio_exit_handler+0x10>)
9000b448:	4803      	ldr	r0, [pc, #12]	; (9000b458 <stdio_exit_handler+0x14>)
9000b44a:	f000 b869 	b.w	9000b520 <_fwalk_sglue>
9000b44e:	bf00      	nop
9000b450:	200000e4 	.word	0x200000e4
9000b454:	9000c3a5 	.word	0x9000c3a5
9000b458:	200000f0 	.word	0x200000f0

9000b45c <cleanup_stdio>:
9000b45c:	6841      	ldr	r1, [r0, #4]
9000b45e:	4b0c      	ldr	r3, [pc, #48]	; (9000b490 <cleanup_stdio+0x34>)
9000b460:	4299      	cmp	r1, r3
9000b462:	b510      	push	{r4, lr}
9000b464:	4604      	mov	r4, r0
9000b466:	d001      	beq.n	9000b46c <cleanup_stdio+0x10>
9000b468:	f000 ff9c 	bl	9000c3a4 <_fflush_r>
9000b46c:	68a1      	ldr	r1, [r4, #8]
9000b46e:	4b09      	ldr	r3, [pc, #36]	; (9000b494 <cleanup_stdio+0x38>)
9000b470:	4299      	cmp	r1, r3
9000b472:	d002      	beq.n	9000b47a <cleanup_stdio+0x1e>
9000b474:	4620      	mov	r0, r4
9000b476:	f000 ff95 	bl	9000c3a4 <_fflush_r>
9000b47a:	68e1      	ldr	r1, [r4, #12]
9000b47c:	4b06      	ldr	r3, [pc, #24]	; (9000b498 <cleanup_stdio+0x3c>)
9000b47e:	4299      	cmp	r1, r3
9000b480:	d004      	beq.n	9000b48c <cleanup_stdio+0x30>
9000b482:	4620      	mov	r0, r4
9000b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000b488:	f000 bf8c 	b.w	9000c3a4 <_fflush_r>
9000b48c:	bd10      	pop	{r4, pc}
9000b48e:	bf00      	nop
9000b490:	2000b988 	.word	0x2000b988
9000b494:	2000b9f0 	.word	0x2000b9f0
9000b498:	2000ba58 	.word	0x2000ba58

9000b49c <global_stdio_init.part.0>:
9000b49c:	b510      	push	{r4, lr}
9000b49e:	4b0b      	ldr	r3, [pc, #44]	; (9000b4cc <global_stdio_init.part.0+0x30>)
9000b4a0:	4c0b      	ldr	r4, [pc, #44]	; (9000b4d0 <global_stdio_init.part.0+0x34>)
9000b4a2:	4a0c      	ldr	r2, [pc, #48]	; (9000b4d4 <global_stdio_init.part.0+0x38>)
9000b4a4:	601a      	str	r2, [r3, #0]
9000b4a6:	4620      	mov	r0, r4
9000b4a8:	2200      	movs	r2, #0
9000b4aa:	2104      	movs	r1, #4
9000b4ac:	f7ff ff94 	bl	9000b3d8 <std>
9000b4b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
9000b4b4:	2201      	movs	r2, #1
9000b4b6:	2109      	movs	r1, #9
9000b4b8:	f7ff ff8e 	bl	9000b3d8 <std>
9000b4bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
9000b4c0:	2202      	movs	r2, #2
9000b4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000b4c6:	2112      	movs	r1, #18
9000b4c8:	f7ff bf86 	b.w	9000b3d8 <std>
9000b4cc:	2000bac0 	.word	0x2000bac0
9000b4d0:	2000b988 	.word	0x2000b988
9000b4d4:	9000b445 	.word	0x9000b445

9000b4d8 <__sfp_lock_acquire>:
9000b4d8:	4801      	ldr	r0, [pc, #4]	; (9000b4e0 <__sfp_lock_acquire+0x8>)
9000b4da:	f000 ba5a 	b.w	9000b992 <__retarget_lock_acquire_recursive>
9000b4de:	bf00      	nop
9000b4e0:	2000bac9 	.word	0x2000bac9

9000b4e4 <__sfp_lock_release>:
9000b4e4:	4801      	ldr	r0, [pc, #4]	; (9000b4ec <__sfp_lock_release+0x8>)
9000b4e6:	f000 ba55 	b.w	9000b994 <__retarget_lock_release_recursive>
9000b4ea:	bf00      	nop
9000b4ec:	2000bac9 	.word	0x2000bac9

9000b4f0 <__sinit>:
9000b4f0:	b510      	push	{r4, lr}
9000b4f2:	4604      	mov	r4, r0
9000b4f4:	f7ff fff0 	bl	9000b4d8 <__sfp_lock_acquire>
9000b4f8:	6a23      	ldr	r3, [r4, #32]
9000b4fa:	b11b      	cbz	r3, 9000b504 <__sinit+0x14>
9000b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000b500:	f7ff bff0 	b.w	9000b4e4 <__sfp_lock_release>
9000b504:	4b04      	ldr	r3, [pc, #16]	; (9000b518 <__sinit+0x28>)
9000b506:	6223      	str	r3, [r4, #32]
9000b508:	4b04      	ldr	r3, [pc, #16]	; (9000b51c <__sinit+0x2c>)
9000b50a:	681b      	ldr	r3, [r3, #0]
9000b50c:	2b00      	cmp	r3, #0
9000b50e:	d1f5      	bne.n	9000b4fc <__sinit+0xc>
9000b510:	f7ff ffc4 	bl	9000b49c <global_stdio_init.part.0>
9000b514:	e7f2      	b.n	9000b4fc <__sinit+0xc>
9000b516:	bf00      	nop
9000b518:	9000b45d 	.word	0x9000b45d
9000b51c:	2000bac0 	.word	0x2000bac0

9000b520 <_fwalk_sglue>:
9000b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000b524:	4607      	mov	r7, r0
9000b526:	4688      	mov	r8, r1
9000b528:	4614      	mov	r4, r2
9000b52a:	2600      	movs	r6, #0
9000b52c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000b530:	f1b9 0901 	subs.w	r9, r9, #1
9000b534:	d505      	bpl.n	9000b542 <_fwalk_sglue+0x22>
9000b536:	6824      	ldr	r4, [r4, #0]
9000b538:	2c00      	cmp	r4, #0
9000b53a:	d1f7      	bne.n	9000b52c <_fwalk_sglue+0xc>
9000b53c:	4630      	mov	r0, r6
9000b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b542:	89ab      	ldrh	r3, [r5, #12]
9000b544:	2b01      	cmp	r3, #1
9000b546:	d907      	bls.n	9000b558 <_fwalk_sglue+0x38>
9000b548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000b54c:	3301      	adds	r3, #1
9000b54e:	d003      	beq.n	9000b558 <_fwalk_sglue+0x38>
9000b550:	4629      	mov	r1, r5
9000b552:	4638      	mov	r0, r7
9000b554:	47c0      	blx	r8
9000b556:	4306      	orrs	r6, r0
9000b558:	3568      	adds	r5, #104	; 0x68
9000b55a:	e7e9      	b.n	9000b530 <_fwalk_sglue+0x10>

9000b55c <iprintf>:
9000b55c:	b40f      	push	{r0, r1, r2, r3}
9000b55e:	b507      	push	{r0, r1, r2, lr}
9000b560:	4906      	ldr	r1, [pc, #24]	; (9000b57c <iprintf+0x20>)
9000b562:	ab04      	add	r3, sp, #16
9000b564:	6808      	ldr	r0, [r1, #0]
9000b566:	f853 2b04 	ldr.w	r2, [r3], #4
9000b56a:	6881      	ldr	r1, [r0, #8]
9000b56c:	9301      	str	r3, [sp, #4]
9000b56e:	f000 fbe9 	bl	9000bd44 <_vfiprintf_r>
9000b572:	b003      	add	sp, #12
9000b574:	f85d eb04 	ldr.w	lr, [sp], #4
9000b578:	b004      	add	sp, #16
9000b57a:	4770      	bx	lr
9000b57c:	2000013c 	.word	0x2000013c

9000b580 <putchar>:
9000b580:	4b02      	ldr	r3, [pc, #8]	; (9000b58c <putchar+0xc>)
9000b582:	4601      	mov	r1, r0
9000b584:	6818      	ldr	r0, [r3, #0]
9000b586:	6882      	ldr	r2, [r0, #8]
9000b588:	f000 bf96 	b.w	9000c4b8 <_putc_r>
9000b58c:	2000013c 	.word	0x2000013c

9000b590 <_puts_r>:
9000b590:	6a03      	ldr	r3, [r0, #32]
9000b592:	b570      	push	{r4, r5, r6, lr}
9000b594:	6884      	ldr	r4, [r0, #8]
9000b596:	4605      	mov	r5, r0
9000b598:	460e      	mov	r6, r1
9000b59a:	b90b      	cbnz	r3, 9000b5a0 <_puts_r+0x10>
9000b59c:	f7ff ffa8 	bl	9000b4f0 <__sinit>
9000b5a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000b5a2:	07db      	lsls	r3, r3, #31
9000b5a4:	d405      	bmi.n	9000b5b2 <_puts_r+0x22>
9000b5a6:	89a3      	ldrh	r3, [r4, #12]
9000b5a8:	0598      	lsls	r0, r3, #22
9000b5aa:	d402      	bmi.n	9000b5b2 <_puts_r+0x22>
9000b5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000b5ae:	f000 f9f0 	bl	9000b992 <__retarget_lock_acquire_recursive>
9000b5b2:	89a3      	ldrh	r3, [r4, #12]
9000b5b4:	0719      	lsls	r1, r3, #28
9000b5b6:	d513      	bpl.n	9000b5e0 <_puts_r+0x50>
9000b5b8:	6923      	ldr	r3, [r4, #16]
9000b5ba:	b18b      	cbz	r3, 9000b5e0 <_puts_r+0x50>
9000b5bc:	3e01      	subs	r6, #1
9000b5be:	68a3      	ldr	r3, [r4, #8]
9000b5c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
9000b5c4:	3b01      	subs	r3, #1
9000b5c6:	60a3      	str	r3, [r4, #8]
9000b5c8:	b9e9      	cbnz	r1, 9000b606 <_puts_r+0x76>
9000b5ca:	2b00      	cmp	r3, #0
9000b5cc:	da2e      	bge.n	9000b62c <_puts_r+0x9c>
9000b5ce:	4622      	mov	r2, r4
9000b5d0:	210a      	movs	r1, #10
9000b5d2:	4628      	mov	r0, r5
9000b5d4:	f000 f89b 	bl	9000b70e <__swbuf_r>
9000b5d8:	3001      	adds	r0, #1
9000b5da:	d007      	beq.n	9000b5ec <_puts_r+0x5c>
9000b5dc:	250a      	movs	r5, #10
9000b5de:	e007      	b.n	9000b5f0 <_puts_r+0x60>
9000b5e0:	4621      	mov	r1, r4
9000b5e2:	4628      	mov	r0, r5
9000b5e4:	f000 f8d0 	bl	9000b788 <__swsetup_r>
9000b5e8:	2800      	cmp	r0, #0
9000b5ea:	d0e7      	beq.n	9000b5bc <_puts_r+0x2c>
9000b5ec:	f04f 35ff 	mov.w	r5, #4294967295
9000b5f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000b5f2:	07da      	lsls	r2, r3, #31
9000b5f4:	d405      	bmi.n	9000b602 <_puts_r+0x72>
9000b5f6:	89a3      	ldrh	r3, [r4, #12]
9000b5f8:	059b      	lsls	r3, r3, #22
9000b5fa:	d402      	bmi.n	9000b602 <_puts_r+0x72>
9000b5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000b5fe:	f000 f9c9 	bl	9000b994 <__retarget_lock_release_recursive>
9000b602:	4628      	mov	r0, r5
9000b604:	bd70      	pop	{r4, r5, r6, pc}
9000b606:	2b00      	cmp	r3, #0
9000b608:	da04      	bge.n	9000b614 <_puts_r+0x84>
9000b60a:	69a2      	ldr	r2, [r4, #24]
9000b60c:	429a      	cmp	r2, r3
9000b60e:	dc06      	bgt.n	9000b61e <_puts_r+0x8e>
9000b610:	290a      	cmp	r1, #10
9000b612:	d004      	beq.n	9000b61e <_puts_r+0x8e>
9000b614:	6823      	ldr	r3, [r4, #0]
9000b616:	1c5a      	adds	r2, r3, #1
9000b618:	6022      	str	r2, [r4, #0]
9000b61a:	7019      	strb	r1, [r3, #0]
9000b61c:	e7cf      	b.n	9000b5be <_puts_r+0x2e>
9000b61e:	4622      	mov	r2, r4
9000b620:	4628      	mov	r0, r5
9000b622:	f000 f874 	bl	9000b70e <__swbuf_r>
9000b626:	3001      	adds	r0, #1
9000b628:	d1c9      	bne.n	9000b5be <_puts_r+0x2e>
9000b62a:	e7df      	b.n	9000b5ec <_puts_r+0x5c>
9000b62c:	6823      	ldr	r3, [r4, #0]
9000b62e:	250a      	movs	r5, #10
9000b630:	1c5a      	adds	r2, r3, #1
9000b632:	6022      	str	r2, [r4, #0]
9000b634:	701d      	strb	r5, [r3, #0]
9000b636:	e7db      	b.n	9000b5f0 <_puts_r+0x60>

9000b638 <puts>:
9000b638:	4b02      	ldr	r3, [pc, #8]	; (9000b644 <puts+0xc>)
9000b63a:	4601      	mov	r1, r0
9000b63c:	6818      	ldr	r0, [r3, #0]
9000b63e:	f7ff bfa7 	b.w	9000b590 <_puts_r>
9000b642:	bf00      	nop
9000b644:	2000013c 	.word	0x2000013c

9000b648 <siprintf>:
9000b648:	b40e      	push	{r1, r2, r3}
9000b64a:	b500      	push	{lr}
9000b64c:	b09c      	sub	sp, #112	; 0x70
9000b64e:	ab1d      	add	r3, sp, #116	; 0x74
9000b650:	9002      	str	r0, [sp, #8]
9000b652:	9006      	str	r0, [sp, #24]
9000b654:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
9000b658:	4809      	ldr	r0, [pc, #36]	; (9000b680 <siprintf+0x38>)
9000b65a:	9107      	str	r1, [sp, #28]
9000b65c:	9104      	str	r1, [sp, #16]
9000b65e:	4909      	ldr	r1, [pc, #36]	; (9000b684 <siprintf+0x3c>)
9000b660:	f853 2b04 	ldr.w	r2, [r3], #4
9000b664:	9105      	str	r1, [sp, #20]
9000b666:	6800      	ldr	r0, [r0, #0]
9000b668:	9301      	str	r3, [sp, #4]
9000b66a:	a902      	add	r1, sp, #8
9000b66c:	f000 fa42 	bl	9000baf4 <_svfiprintf_r>
9000b670:	9b02      	ldr	r3, [sp, #8]
9000b672:	2200      	movs	r2, #0
9000b674:	701a      	strb	r2, [r3, #0]
9000b676:	b01c      	add	sp, #112	; 0x70
9000b678:	f85d eb04 	ldr.w	lr, [sp], #4
9000b67c:	b003      	add	sp, #12
9000b67e:	4770      	bx	lr
9000b680:	2000013c 	.word	0x2000013c
9000b684:	ffff0208 	.word	0xffff0208

9000b688 <__sread>:
9000b688:	b510      	push	{r4, lr}
9000b68a:	460c      	mov	r4, r1
9000b68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000b690:	f000 f926 	bl	9000b8e0 <_read_r>
9000b694:	2800      	cmp	r0, #0
9000b696:	bfab      	itete	ge
9000b698:	6d63      	ldrge	r3, [r4, #84]	; 0x54
9000b69a:	89a3      	ldrhlt	r3, [r4, #12]
9000b69c:	181b      	addge	r3, r3, r0
9000b69e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9000b6a2:	bfac      	ite	ge
9000b6a4:	6563      	strge	r3, [r4, #84]	; 0x54
9000b6a6:	81a3      	strhlt	r3, [r4, #12]
9000b6a8:	bd10      	pop	{r4, pc}

9000b6aa <__swrite>:
9000b6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000b6ae:	461f      	mov	r7, r3
9000b6b0:	898b      	ldrh	r3, [r1, #12]
9000b6b2:	05db      	lsls	r3, r3, #23
9000b6b4:	4605      	mov	r5, r0
9000b6b6:	460c      	mov	r4, r1
9000b6b8:	4616      	mov	r6, r2
9000b6ba:	d505      	bpl.n	9000b6c8 <__swrite+0x1e>
9000b6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000b6c0:	2302      	movs	r3, #2
9000b6c2:	2200      	movs	r2, #0
9000b6c4:	f000 f8fa 	bl	9000b8bc <_lseek_r>
9000b6c8:	89a3      	ldrh	r3, [r4, #12]
9000b6ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000b6ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000b6d2:	81a3      	strh	r3, [r4, #12]
9000b6d4:	4632      	mov	r2, r6
9000b6d6:	463b      	mov	r3, r7
9000b6d8:	4628      	mov	r0, r5
9000b6da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000b6de:	f000 b921 	b.w	9000b924 <_write_r>

9000b6e2 <__sseek>:
9000b6e2:	b510      	push	{r4, lr}
9000b6e4:	460c      	mov	r4, r1
9000b6e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000b6ea:	f000 f8e7 	bl	9000b8bc <_lseek_r>
9000b6ee:	1c43      	adds	r3, r0, #1
9000b6f0:	89a3      	ldrh	r3, [r4, #12]
9000b6f2:	bf15      	itete	ne
9000b6f4:	6560      	strne	r0, [r4, #84]	; 0x54
9000b6f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9000b6fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9000b6fe:	81a3      	strheq	r3, [r4, #12]
9000b700:	bf18      	it	ne
9000b702:	81a3      	strhne	r3, [r4, #12]
9000b704:	bd10      	pop	{r4, pc}

9000b706 <__sclose>:
9000b706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000b70a:	f000 b8c7 	b.w	9000b89c <_close_r>

9000b70e <__swbuf_r>:
9000b70e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000b710:	460e      	mov	r6, r1
9000b712:	4614      	mov	r4, r2
9000b714:	4605      	mov	r5, r0
9000b716:	b118      	cbz	r0, 9000b720 <__swbuf_r+0x12>
9000b718:	6a03      	ldr	r3, [r0, #32]
9000b71a:	b90b      	cbnz	r3, 9000b720 <__swbuf_r+0x12>
9000b71c:	f7ff fee8 	bl	9000b4f0 <__sinit>
9000b720:	69a3      	ldr	r3, [r4, #24]
9000b722:	60a3      	str	r3, [r4, #8]
9000b724:	89a3      	ldrh	r3, [r4, #12]
9000b726:	071a      	lsls	r2, r3, #28
9000b728:	d525      	bpl.n	9000b776 <__swbuf_r+0x68>
9000b72a:	6923      	ldr	r3, [r4, #16]
9000b72c:	b31b      	cbz	r3, 9000b776 <__swbuf_r+0x68>
9000b72e:	6823      	ldr	r3, [r4, #0]
9000b730:	6922      	ldr	r2, [r4, #16]
9000b732:	1a98      	subs	r0, r3, r2
9000b734:	6963      	ldr	r3, [r4, #20]
9000b736:	b2f6      	uxtb	r6, r6
9000b738:	4283      	cmp	r3, r0
9000b73a:	4637      	mov	r7, r6
9000b73c:	dc04      	bgt.n	9000b748 <__swbuf_r+0x3a>
9000b73e:	4621      	mov	r1, r4
9000b740:	4628      	mov	r0, r5
9000b742:	f000 fe2f 	bl	9000c3a4 <_fflush_r>
9000b746:	b9e0      	cbnz	r0, 9000b782 <__swbuf_r+0x74>
9000b748:	68a3      	ldr	r3, [r4, #8]
9000b74a:	3b01      	subs	r3, #1
9000b74c:	60a3      	str	r3, [r4, #8]
9000b74e:	6823      	ldr	r3, [r4, #0]
9000b750:	1c5a      	adds	r2, r3, #1
9000b752:	6022      	str	r2, [r4, #0]
9000b754:	701e      	strb	r6, [r3, #0]
9000b756:	6962      	ldr	r2, [r4, #20]
9000b758:	1c43      	adds	r3, r0, #1
9000b75a:	429a      	cmp	r2, r3
9000b75c:	d004      	beq.n	9000b768 <__swbuf_r+0x5a>
9000b75e:	89a3      	ldrh	r3, [r4, #12]
9000b760:	07db      	lsls	r3, r3, #31
9000b762:	d506      	bpl.n	9000b772 <__swbuf_r+0x64>
9000b764:	2e0a      	cmp	r6, #10
9000b766:	d104      	bne.n	9000b772 <__swbuf_r+0x64>
9000b768:	4621      	mov	r1, r4
9000b76a:	4628      	mov	r0, r5
9000b76c:	f000 fe1a 	bl	9000c3a4 <_fflush_r>
9000b770:	b938      	cbnz	r0, 9000b782 <__swbuf_r+0x74>
9000b772:	4638      	mov	r0, r7
9000b774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000b776:	4621      	mov	r1, r4
9000b778:	4628      	mov	r0, r5
9000b77a:	f000 f805 	bl	9000b788 <__swsetup_r>
9000b77e:	2800      	cmp	r0, #0
9000b780:	d0d5      	beq.n	9000b72e <__swbuf_r+0x20>
9000b782:	f04f 37ff 	mov.w	r7, #4294967295
9000b786:	e7f4      	b.n	9000b772 <__swbuf_r+0x64>

9000b788 <__swsetup_r>:
9000b788:	b538      	push	{r3, r4, r5, lr}
9000b78a:	4b2a      	ldr	r3, [pc, #168]	; (9000b834 <__swsetup_r+0xac>)
9000b78c:	4605      	mov	r5, r0
9000b78e:	6818      	ldr	r0, [r3, #0]
9000b790:	460c      	mov	r4, r1
9000b792:	b118      	cbz	r0, 9000b79c <__swsetup_r+0x14>
9000b794:	6a03      	ldr	r3, [r0, #32]
9000b796:	b90b      	cbnz	r3, 9000b79c <__swsetup_r+0x14>
9000b798:	f7ff feaa 	bl	9000b4f0 <__sinit>
9000b79c:	89a3      	ldrh	r3, [r4, #12]
9000b79e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000b7a2:	0718      	lsls	r0, r3, #28
9000b7a4:	d422      	bmi.n	9000b7ec <__swsetup_r+0x64>
9000b7a6:	06d9      	lsls	r1, r3, #27
9000b7a8:	d407      	bmi.n	9000b7ba <__swsetup_r+0x32>
9000b7aa:	2309      	movs	r3, #9
9000b7ac:	602b      	str	r3, [r5, #0]
9000b7ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
9000b7b2:	81a3      	strh	r3, [r4, #12]
9000b7b4:	f04f 30ff 	mov.w	r0, #4294967295
9000b7b8:	e034      	b.n	9000b824 <__swsetup_r+0x9c>
9000b7ba:	0758      	lsls	r0, r3, #29
9000b7bc:	d512      	bpl.n	9000b7e4 <__swsetup_r+0x5c>
9000b7be:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000b7c0:	b141      	cbz	r1, 9000b7d4 <__swsetup_r+0x4c>
9000b7c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000b7c6:	4299      	cmp	r1, r3
9000b7c8:	d002      	beq.n	9000b7d0 <__swsetup_r+0x48>
9000b7ca:	4628      	mov	r0, r5
9000b7cc:	f000 f8ec 	bl	9000b9a8 <_free_r>
9000b7d0:	2300      	movs	r3, #0
9000b7d2:	6363      	str	r3, [r4, #52]	; 0x34
9000b7d4:	89a3      	ldrh	r3, [r4, #12]
9000b7d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
9000b7da:	81a3      	strh	r3, [r4, #12]
9000b7dc:	2300      	movs	r3, #0
9000b7de:	6063      	str	r3, [r4, #4]
9000b7e0:	6923      	ldr	r3, [r4, #16]
9000b7e2:	6023      	str	r3, [r4, #0]
9000b7e4:	89a3      	ldrh	r3, [r4, #12]
9000b7e6:	f043 0308 	orr.w	r3, r3, #8
9000b7ea:	81a3      	strh	r3, [r4, #12]
9000b7ec:	6923      	ldr	r3, [r4, #16]
9000b7ee:	b94b      	cbnz	r3, 9000b804 <__swsetup_r+0x7c>
9000b7f0:	89a3      	ldrh	r3, [r4, #12]
9000b7f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
9000b7f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000b7fa:	d003      	beq.n	9000b804 <__swsetup_r+0x7c>
9000b7fc:	4621      	mov	r1, r4
9000b7fe:	4628      	mov	r0, r5
9000b800:	f000 fe1e 	bl	9000c440 <__smakebuf_r>
9000b804:	89a0      	ldrh	r0, [r4, #12]
9000b806:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000b80a:	f010 0301 	ands.w	r3, r0, #1
9000b80e:	d00a      	beq.n	9000b826 <__swsetup_r+0x9e>
9000b810:	2300      	movs	r3, #0
9000b812:	60a3      	str	r3, [r4, #8]
9000b814:	6963      	ldr	r3, [r4, #20]
9000b816:	425b      	negs	r3, r3
9000b818:	61a3      	str	r3, [r4, #24]
9000b81a:	6923      	ldr	r3, [r4, #16]
9000b81c:	b943      	cbnz	r3, 9000b830 <__swsetup_r+0xa8>
9000b81e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
9000b822:	d1c4      	bne.n	9000b7ae <__swsetup_r+0x26>
9000b824:	bd38      	pop	{r3, r4, r5, pc}
9000b826:	0781      	lsls	r1, r0, #30
9000b828:	bf58      	it	pl
9000b82a:	6963      	ldrpl	r3, [r4, #20]
9000b82c:	60a3      	str	r3, [r4, #8]
9000b82e:	e7f4      	b.n	9000b81a <__swsetup_r+0x92>
9000b830:	2000      	movs	r0, #0
9000b832:	e7f7      	b.n	9000b824 <__swsetup_r+0x9c>
9000b834:	2000013c 	.word	0x2000013c

9000b838 <memset>:
9000b838:	4402      	add	r2, r0
9000b83a:	4603      	mov	r3, r0
9000b83c:	4293      	cmp	r3, r2
9000b83e:	d100      	bne.n	9000b842 <memset+0xa>
9000b840:	4770      	bx	lr
9000b842:	f803 1b01 	strb.w	r1, [r3], #1
9000b846:	e7f9      	b.n	9000b83c <memset+0x4>

9000b848 <strncpy>:
9000b848:	b510      	push	{r4, lr}
9000b84a:	3901      	subs	r1, #1
9000b84c:	4603      	mov	r3, r0
9000b84e:	b132      	cbz	r2, 9000b85e <strncpy+0x16>
9000b850:	f811 4f01 	ldrb.w	r4, [r1, #1]!
9000b854:	f803 4b01 	strb.w	r4, [r3], #1
9000b858:	3a01      	subs	r2, #1
9000b85a:	2c00      	cmp	r4, #0
9000b85c:	d1f7      	bne.n	9000b84e <strncpy+0x6>
9000b85e:	441a      	add	r2, r3
9000b860:	2100      	movs	r1, #0
9000b862:	4293      	cmp	r3, r2
9000b864:	d100      	bne.n	9000b868 <strncpy+0x20>
9000b866:	bd10      	pop	{r4, pc}
9000b868:	f803 1b01 	strb.w	r1, [r3], #1
9000b86c:	e7f9      	b.n	9000b862 <strncpy+0x1a>

9000b86e <strstr>:
9000b86e:	780a      	ldrb	r2, [r1, #0]
9000b870:	b570      	push	{r4, r5, r6, lr}
9000b872:	b96a      	cbnz	r2, 9000b890 <strstr+0x22>
9000b874:	bd70      	pop	{r4, r5, r6, pc}
9000b876:	429a      	cmp	r2, r3
9000b878:	d109      	bne.n	9000b88e <strstr+0x20>
9000b87a:	460c      	mov	r4, r1
9000b87c:	4605      	mov	r5, r0
9000b87e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
9000b882:	2b00      	cmp	r3, #0
9000b884:	d0f6      	beq.n	9000b874 <strstr+0x6>
9000b886:	f815 6f01 	ldrb.w	r6, [r5, #1]!
9000b88a:	429e      	cmp	r6, r3
9000b88c:	d0f7      	beq.n	9000b87e <strstr+0x10>
9000b88e:	3001      	adds	r0, #1
9000b890:	7803      	ldrb	r3, [r0, #0]
9000b892:	2b00      	cmp	r3, #0
9000b894:	d1ef      	bne.n	9000b876 <strstr+0x8>
9000b896:	4618      	mov	r0, r3
9000b898:	e7ec      	b.n	9000b874 <strstr+0x6>
	...

9000b89c <_close_r>:
9000b89c:	b538      	push	{r3, r4, r5, lr}
9000b89e:	4d06      	ldr	r5, [pc, #24]	; (9000b8b8 <_close_r+0x1c>)
9000b8a0:	2300      	movs	r3, #0
9000b8a2:	4604      	mov	r4, r0
9000b8a4:	4608      	mov	r0, r1
9000b8a6:	602b      	str	r3, [r5, #0]
9000b8a8:	f000 febc 	bl	9000c624 <_close>
9000b8ac:	1c43      	adds	r3, r0, #1
9000b8ae:	d102      	bne.n	9000b8b6 <_close_r+0x1a>
9000b8b0:	682b      	ldr	r3, [r5, #0]
9000b8b2:	b103      	cbz	r3, 9000b8b6 <_close_r+0x1a>
9000b8b4:	6023      	str	r3, [r4, #0]
9000b8b6:	bd38      	pop	{r3, r4, r5, pc}
9000b8b8:	2000bac4 	.word	0x2000bac4

9000b8bc <_lseek_r>:
9000b8bc:	b538      	push	{r3, r4, r5, lr}
9000b8be:	4d07      	ldr	r5, [pc, #28]	; (9000b8dc <_lseek_r+0x20>)
9000b8c0:	4604      	mov	r4, r0
9000b8c2:	4608      	mov	r0, r1
9000b8c4:	4611      	mov	r1, r2
9000b8c6:	2200      	movs	r2, #0
9000b8c8:	602a      	str	r2, [r5, #0]
9000b8ca:	461a      	mov	r2, r3
9000b8cc:	f000 fec2 	bl	9000c654 <_lseek>
9000b8d0:	1c43      	adds	r3, r0, #1
9000b8d2:	d102      	bne.n	9000b8da <_lseek_r+0x1e>
9000b8d4:	682b      	ldr	r3, [r5, #0]
9000b8d6:	b103      	cbz	r3, 9000b8da <_lseek_r+0x1e>
9000b8d8:	6023      	str	r3, [r4, #0]
9000b8da:	bd38      	pop	{r3, r4, r5, pc}
9000b8dc:	2000bac4 	.word	0x2000bac4

9000b8e0 <_read_r>:
9000b8e0:	b538      	push	{r3, r4, r5, lr}
9000b8e2:	4d07      	ldr	r5, [pc, #28]	; (9000b900 <_read_r+0x20>)
9000b8e4:	4604      	mov	r4, r0
9000b8e6:	4608      	mov	r0, r1
9000b8e8:	4611      	mov	r1, r2
9000b8ea:	2200      	movs	r2, #0
9000b8ec:	602a      	str	r2, [r5, #0]
9000b8ee:	461a      	mov	r2, r3
9000b8f0:	f000 feb8 	bl	9000c664 <_read>
9000b8f4:	1c43      	adds	r3, r0, #1
9000b8f6:	d102      	bne.n	9000b8fe <_read_r+0x1e>
9000b8f8:	682b      	ldr	r3, [r5, #0]
9000b8fa:	b103      	cbz	r3, 9000b8fe <_read_r+0x1e>
9000b8fc:	6023      	str	r3, [r4, #0]
9000b8fe:	bd38      	pop	{r3, r4, r5, pc}
9000b900:	2000bac4 	.word	0x2000bac4

9000b904 <_sbrk_r>:
9000b904:	b538      	push	{r3, r4, r5, lr}
9000b906:	4d06      	ldr	r5, [pc, #24]	; (9000b920 <_sbrk_r+0x1c>)
9000b908:	2300      	movs	r3, #0
9000b90a:	4604      	mov	r4, r0
9000b90c:	4608      	mov	r0, r1
9000b90e:	602b      	str	r3, [r5, #0]
9000b910:	f000 feb0 	bl	9000c674 <_sbrk>
9000b914:	1c43      	adds	r3, r0, #1
9000b916:	d102      	bne.n	9000b91e <_sbrk_r+0x1a>
9000b918:	682b      	ldr	r3, [r5, #0]
9000b91a:	b103      	cbz	r3, 9000b91e <_sbrk_r+0x1a>
9000b91c:	6023      	str	r3, [r4, #0]
9000b91e:	bd38      	pop	{r3, r4, r5, pc}
9000b920:	2000bac4 	.word	0x2000bac4

9000b924 <_write_r>:
9000b924:	b538      	push	{r3, r4, r5, lr}
9000b926:	4d07      	ldr	r5, [pc, #28]	; (9000b944 <_write_r+0x20>)
9000b928:	4604      	mov	r4, r0
9000b92a:	4608      	mov	r0, r1
9000b92c:	4611      	mov	r1, r2
9000b92e:	2200      	movs	r2, #0
9000b930:	602a      	str	r2, [r5, #0]
9000b932:	461a      	mov	r2, r3
9000b934:	f000 feac 	bl	9000c690 <_write>
9000b938:	1c43      	adds	r3, r0, #1
9000b93a:	d102      	bne.n	9000b942 <_write_r+0x1e>
9000b93c:	682b      	ldr	r3, [r5, #0]
9000b93e:	b103      	cbz	r3, 9000b942 <_write_r+0x1e>
9000b940:	6023      	str	r3, [r4, #0]
9000b942:	bd38      	pop	{r3, r4, r5, pc}
9000b944:	2000bac4 	.word	0x2000bac4

9000b948 <__libc_init_array>:
9000b948:	b570      	push	{r4, r5, r6, lr}
9000b94a:	4d0d      	ldr	r5, [pc, #52]	; (9000b980 <__libc_init_array+0x38>)
9000b94c:	4c0d      	ldr	r4, [pc, #52]	; (9000b984 <__libc_init_array+0x3c>)
9000b94e:	1b64      	subs	r4, r4, r5
9000b950:	10a4      	asrs	r4, r4, #2
9000b952:	2600      	movs	r6, #0
9000b954:	42a6      	cmp	r6, r4
9000b956:	d109      	bne.n	9000b96c <__libc_init_array+0x24>
9000b958:	4d0b      	ldr	r5, [pc, #44]	; (9000b988 <__libc_init_array+0x40>)
9000b95a:	4c0c      	ldr	r4, [pc, #48]	; (9000b98c <__libc_init_array+0x44>)
9000b95c:	f000 fea0 	bl	9000c6a0 <_init>
9000b960:	1b64      	subs	r4, r4, r5
9000b962:	10a4      	asrs	r4, r4, #2
9000b964:	2600      	movs	r6, #0
9000b966:	42a6      	cmp	r6, r4
9000b968:	d105      	bne.n	9000b976 <__libc_init_array+0x2e>
9000b96a:	bd70      	pop	{r4, r5, r6, pc}
9000b96c:	f855 3b04 	ldr.w	r3, [r5], #4
9000b970:	4798      	blx	r3
9000b972:	3601      	adds	r6, #1
9000b974:	e7ee      	b.n	9000b954 <__libc_init_array+0xc>
9000b976:	f855 3b04 	ldr.w	r3, [r5], #4
9000b97a:	4798      	blx	r3
9000b97c:	3601      	adds	r6, #1
9000b97e:	e7f2      	b.n	9000b966 <__libc_init_array+0x1e>
9000b980:	900111fc 	.word	0x900111fc
9000b984:	900111fc 	.word	0x900111fc
9000b988:	900111fc 	.word	0x900111fc
9000b98c:	90011200 	.word	0x90011200

9000b990 <__retarget_lock_init_recursive>:
9000b990:	4770      	bx	lr

9000b992 <__retarget_lock_acquire_recursive>:
9000b992:	4770      	bx	lr

9000b994 <__retarget_lock_release_recursive>:
9000b994:	4770      	bx	lr

9000b996 <strcpy>:
9000b996:	4603      	mov	r3, r0
9000b998:	f811 2b01 	ldrb.w	r2, [r1], #1
9000b99c:	f803 2b01 	strb.w	r2, [r3], #1
9000b9a0:	2a00      	cmp	r2, #0
9000b9a2:	d1f9      	bne.n	9000b998 <strcpy+0x2>
9000b9a4:	4770      	bx	lr
	...

9000b9a8 <_free_r>:
9000b9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
9000b9aa:	2900      	cmp	r1, #0
9000b9ac:	d044      	beq.n	9000ba38 <_free_r+0x90>
9000b9ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000b9b2:	9001      	str	r0, [sp, #4]
9000b9b4:	2b00      	cmp	r3, #0
9000b9b6:	f1a1 0404 	sub.w	r4, r1, #4
9000b9ba:	bfb8      	it	lt
9000b9bc:	18e4      	addlt	r4, r4, r3
9000b9be:	f7ff fcff 	bl	9000b3c0 <__malloc_lock>
9000b9c2:	4a1e      	ldr	r2, [pc, #120]	; (9000ba3c <_free_r+0x94>)
9000b9c4:	9801      	ldr	r0, [sp, #4]
9000b9c6:	6813      	ldr	r3, [r2, #0]
9000b9c8:	b933      	cbnz	r3, 9000b9d8 <_free_r+0x30>
9000b9ca:	6063      	str	r3, [r4, #4]
9000b9cc:	6014      	str	r4, [r2, #0]
9000b9ce:	b003      	add	sp, #12
9000b9d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9000b9d4:	f7ff bcfa 	b.w	9000b3cc <__malloc_unlock>
9000b9d8:	42a3      	cmp	r3, r4
9000b9da:	d908      	bls.n	9000b9ee <_free_r+0x46>
9000b9dc:	6825      	ldr	r5, [r4, #0]
9000b9de:	1961      	adds	r1, r4, r5
9000b9e0:	428b      	cmp	r3, r1
9000b9e2:	bf01      	itttt	eq
9000b9e4:	6819      	ldreq	r1, [r3, #0]
9000b9e6:	685b      	ldreq	r3, [r3, #4]
9000b9e8:	1949      	addeq	r1, r1, r5
9000b9ea:	6021      	streq	r1, [r4, #0]
9000b9ec:	e7ed      	b.n	9000b9ca <_free_r+0x22>
9000b9ee:	461a      	mov	r2, r3
9000b9f0:	685b      	ldr	r3, [r3, #4]
9000b9f2:	b10b      	cbz	r3, 9000b9f8 <_free_r+0x50>
9000b9f4:	42a3      	cmp	r3, r4
9000b9f6:	d9fa      	bls.n	9000b9ee <_free_r+0x46>
9000b9f8:	6811      	ldr	r1, [r2, #0]
9000b9fa:	1855      	adds	r5, r2, r1
9000b9fc:	42a5      	cmp	r5, r4
9000b9fe:	d10b      	bne.n	9000ba18 <_free_r+0x70>
9000ba00:	6824      	ldr	r4, [r4, #0]
9000ba02:	4421      	add	r1, r4
9000ba04:	1854      	adds	r4, r2, r1
9000ba06:	42a3      	cmp	r3, r4
9000ba08:	6011      	str	r1, [r2, #0]
9000ba0a:	d1e0      	bne.n	9000b9ce <_free_r+0x26>
9000ba0c:	681c      	ldr	r4, [r3, #0]
9000ba0e:	685b      	ldr	r3, [r3, #4]
9000ba10:	6053      	str	r3, [r2, #4]
9000ba12:	440c      	add	r4, r1
9000ba14:	6014      	str	r4, [r2, #0]
9000ba16:	e7da      	b.n	9000b9ce <_free_r+0x26>
9000ba18:	d902      	bls.n	9000ba20 <_free_r+0x78>
9000ba1a:	230c      	movs	r3, #12
9000ba1c:	6003      	str	r3, [r0, #0]
9000ba1e:	e7d6      	b.n	9000b9ce <_free_r+0x26>
9000ba20:	6825      	ldr	r5, [r4, #0]
9000ba22:	1961      	adds	r1, r4, r5
9000ba24:	428b      	cmp	r3, r1
9000ba26:	bf04      	itt	eq
9000ba28:	6819      	ldreq	r1, [r3, #0]
9000ba2a:	685b      	ldreq	r3, [r3, #4]
9000ba2c:	6063      	str	r3, [r4, #4]
9000ba2e:	bf04      	itt	eq
9000ba30:	1949      	addeq	r1, r1, r5
9000ba32:	6021      	streq	r1, [r4, #0]
9000ba34:	6054      	str	r4, [r2, #4]
9000ba36:	e7ca      	b.n	9000b9ce <_free_r+0x26>
9000ba38:	b003      	add	sp, #12
9000ba3a:	bd30      	pop	{r4, r5, pc}
9000ba3c:	2000b980 	.word	0x2000b980

9000ba40 <__ssputs_r>:
9000ba40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000ba44:	688e      	ldr	r6, [r1, #8]
9000ba46:	461f      	mov	r7, r3
9000ba48:	42be      	cmp	r6, r7
9000ba4a:	680b      	ldr	r3, [r1, #0]
9000ba4c:	4682      	mov	sl, r0
9000ba4e:	460c      	mov	r4, r1
9000ba50:	4690      	mov	r8, r2
9000ba52:	d82c      	bhi.n	9000baae <__ssputs_r+0x6e>
9000ba54:	898a      	ldrh	r2, [r1, #12]
9000ba56:	f412 6f90 	tst.w	r2, #1152	; 0x480
9000ba5a:	d026      	beq.n	9000baaa <__ssputs_r+0x6a>
9000ba5c:	6965      	ldr	r5, [r4, #20]
9000ba5e:	6909      	ldr	r1, [r1, #16]
9000ba60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000ba64:	eba3 0901 	sub.w	r9, r3, r1
9000ba68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000ba6c:	1c7b      	adds	r3, r7, #1
9000ba6e:	444b      	add	r3, r9
9000ba70:	106d      	asrs	r5, r5, #1
9000ba72:	429d      	cmp	r5, r3
9000ba74:	bf38      	it	cc
9000ba76:	461d      	movcc	r5, r3
9000ba78:	0553      	lsls	r3, r2, #21
9000ba7a:	d527      	bpl.n	9000bacc <__ssputs_r+0x8c>
9000ba7c:	4629      	mov	r1, r5
9000ba7e:	f7ff fc1f 	bl	9000b2c0 <_malloc_r>
9000ba82:	4606      	mov	r6, r0
9000ba84:	b360      	cbz	r0, 9000bae0 <__ssputs_r+0xa0>
9000ba86:	6921      	ldr	r1, [r4, #16]
9000ba88:	464a      	mov	r2, r9
9000ba8a:	f000 fd85 	bl	9000c598 <memcpy>
9000ba8e:	89a3      	ldrh	r3, [r4, #12]
9000ba90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
9000ba94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000ba98:	81a3      	strh	r3, [r4, #12]
9000ba9a:	6126      	str	r6, [r4, #16]
9000ba9c:	6165      	str	r5, [r4, #20]
9000ba9e:	444e      	add	r6, r9
9000baa0:	eba5 0509 	sub.w	r5, r5, r9
9000baa4:	6026      	str	r6, [r4, #0]
9000baa6:	60a5      	str	r5, [r4, #8]
9000baa8:	463e      	mov	r6, r7
9000baaa:	42be      	cmp	r6, r7
9000baac:	d900      	bls.n	9000bab0 <__ssputs_r+0x70>
9000baae:	463e      	mov	r6, r7
9000bab0:	6820      	ldr	r0, [r4, #0]
9000bab2:	4632      	mov	r2, r6
9000bab4:	4641      	mov	r1, r8
9000bab6:	f000 fd33 	bl	9000c520 <memmove>
9000baba:	68a3      	ldr	r3, [r4, #8]
9000babc:	1b9b      	subs	r3, r3, r6
9000babe:	60a3      	str	r3, [r4, #8]
9000bac0:	6823      	ldr	r3, [r4, #0]
9000bac2:	4433      	add	r3, r6
9000bac4:	6023      	str	r3, [r4, #0]
9000bac6:	2000      	movs	r0, #0
9000bac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000bacc:	462a      	mov	r2, r5
9000bace:	f000 fd71 	bl	9000c5b4 <_realloc_r>
9000bad2:	4606      	mov	r6, r0
9000bad4:	2800      	cmp	r0, #0
9000bad6:	d1e0      	bne.n	9000ba9a <__ssputs_r+0x5a>
9000bad8:	6921      	ldr	r1, [r4, #16]
9000bada:	4650      	mov	r0, sl
9000badc:	f7ff ff64 	bl	9000b9a8 <_free_r>
9000bae0:	230c      	movs	r3, #12
9000bae2:	f8ca 3000 	str.w	r3, [sl]
9000bae6:	89a3      	ldrh	r3, [r4, #12]
9000bae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000baec:	81a3      	strh	r3, [r4, #12]
9000baee:	f04f 30ff 	mov.w	r0, #4294967295
9000baf2:	e7e9      	b.n	9000bac8 <__ssputs_r+0x88>

9000baf4 <_svfiprintf_r>:
9000baf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000baf8:	4698      	mov	r8, r3
9000bafa:	898b      	ldrh	r3, [r1, #12]
9000bafc:	061b      	lsls	r3, r3, #24
9000bafe:	b09d      	sub	sp, #116	; 0x74
9000bb00:	4607      	mov	r7, r0
9000bb02:	460d      	mov	r5, r1
9000bb04:	4614      	mov	r4, r2
9000bb06:	d50e      	bpl.n	9000bb26 <_svfiprintf_r+0x32>
9000bb08:	690b      	ldr	r3, [r1, #16]
9000bb0a:	b963      	cbnz	r3, 9000bb26 <_svfiprintf_r+0x32>
9000bb0c:	2140      	movs	r1, #64	; 0x40
9000bb0e:	f7ff fbd7 	bl	9000b2c0 <_malloc_r>
9000bb12:	6028      	str	r0, [r5, #0]
9000bb14:	6128      	str	r0, [r5, #16]
9000bb16:	b920      	cbnz	r0, 9000bb22 <_svfiprintf_r+0x2e>
9000bb18:	230c      	movs	r3, #12
9000bb1a:	603b      	str	r3, [r7, #0]
9000bb1c:	f04f 30ff 	mov.w	r0, #4294967295
9000bb20:	e0d0      	b.n	9000bcc4 <_svfiprintf_r+0x1d0>
9000bb22:	2340      	movs	r3, #64	; 0x40
9000bb24:	616b      	str	r3, [r5, #20]
9000bb26:	2300      	movs	r3, #0
9000bb28:	9309      	str	r3, [sp, #36]	; 0x24
9000bb2a:	2320      	movs	r3, #32
9000bb2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000bb30:	f8cd 800c 	str.w	r8, [sp, #12]
9000bb34:	2330      	movs	r3, #48	; 0x30
9000bb36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 9000bcdc <_svfiprintf_r+0x1e8>
9000bb3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000bb3e:	f04f 0901 	mov.w	r9, #1
9000bb42:	4623      	mov	r3, r4
9000bb44:	469a      	mov	sl, r3
9000bb46:	f813 2b01 	ldrb.w	r2, [r3], #1
9000bb4a:	b10a      	cbz	r2, 9000bb50 <_svfiprintf_r+0x5c>
9000bb4c:	2a25      	cmp	r2, #37	; 0x25
9000bb4e:	d1f9      	bne.n	9000bb44 <_svfiprintf_r+0x50>
9000bb50:	ebba 0b04 	subs.w	fp, sl, r4
9000bb54:	d00b      	beq.n	9000bb6e <_svfiprintf_r+0x7a>
9000bb56:	465b      	mov	r3, fp
9000bb58:	4622      	mov	r2, r4
9000bb5a:	4629      	mov	r1, r5
9000bb5c:	4638      	mov	r0, r7
9000bb5e:	f7ff ff6f 	bl	9000ba40 <__ssputs_r>
9000bb62:	3001      	adds	r0, #1
9000bb64:	f000 80a9 	beq.w	9000bcba <_svfiprintf_r+0x1c6>
9000bb68:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000bb6a:	445a      	add	r2, fp
9000bb6c:	9209      	str	r2, [sp, #36]	; 0x24
9000bb6e:	f89a 3000 	ldrb.w	r3, [sl]
9000bb72:	2b00      	cmp	r3, #0
9000bb74:	f000 80a1 	beq.w	9000bcba <_svfiprintf_r+0x1c6>
9000bb78:	2300      	movs	r3, #0
9000bb7a:	f04f 32ff 	mov.w	r2, #4294967295
9000bb7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000bb82:	f10a 0a01 	add.w	sl, sl, #1
9000bb86:	9304      	str	r3, [sp, #16]
9000bb88:	9307      	str	r3, [sp, #28]
9000bb8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000bb8e:	931a      	str	r3, [sp, #104]	; 0x68
9000bb90:	4654      	mov	r4, sl
9000bb92:	2205      	movs	r2, #5
9000bb94:	f814 1b01 	ldrb.w	r1, [r4], #1
9000bb98:	4850      	ldr	r0, [pc, #320]	; (9000bcdc <_svfiprintf_r+0x1e8>)
9000bb9a:	f7f4 fb39 	bl	90000210 <memchr>
9000bb9e:	9a04      	ldr	r2, [sp, #16]
9000bba0:	b9d8      	cbnz	r0, 9000bbda <_svfiprintf_r+0xe6>
9000bba2:	06d0      	lsls	r0, r2, #27
9000bba4:	bf44      	itt	mi
9000bba6:	2320      	movmi	r3, #32
9000bba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000bbac:	0711      	lsls	r1, r2, #28
9000bbae:	bf44      	itt	mi
9000bbb0:	232b      	movmi	r3, #43	; 0x2b
9000bbb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000bbb6:	f89a 3000 	ldrb.w	r3, [sl]
9000bbba:	2b2a      	cmp	r3, #42	; 0x2a
9000bbbc:	d015      	beq.n	9000bbea <_svfiprintf_r+0xf6>
9000bbbe:	9a07      	ldr	r2, [sp, #28]
9000bbc0:	4654      	mov	r4, sl
9000bbc2:	2000      	movs	r0, #0
9000bbc4:	f04f 0c0a 	mov.w	ip, #10
9000bbc8:	4621      	mov	r1, r4
9000bbca:	f811 3b01 	ldrb.w	r3, [r1], #1
9000bbce:	3b30      	subs	r3, #48	; 0x30
9000bbd0:	2b09      	cmp	r3, #9
9000bbd2:	d94d      	bls.n	9000bc70 <_svfiprintf_r+0x17c>
9000bbd4:	b1b0      	cbz	r0, 9000bc04 <_svfiprintf_r+0x110>
9000bbd6:	9207      	str	r2, [sp, #28]
9000bbd8:	e014      	b.n	9000bc04 <_svfiprintf_r+0x110>
9000bbda:	eba0 0308 	sub.w	r3, r0, r8
9000bbde:	fa09 f303 	lsl.w	r3, r9, r3
9000bbe2:	4313      	orrs	r3, r2
9000bbe4:	9304      	str	r3, [sp, #16]
9000bbe6:	46a2      	mov	sl, r4
9000bbe8:	e7d2      	b.n	9000bb90 <_svfiprintf_r+0x9c>
9000bbea:	9b03      	ldr	r3, [sp, #12]
9000bbec:	1d19      	adds	r1, r3, #4
9000bbee:	681b      	ldr	r3, [r3, #0]
9000bbf0:	9103      	str	r1, [sp, #12]
9000bbf2:	2b00      	cmp	r3, #0
9000bbf4:	bfbb      	ittet	lt
9000bbf6:	425b      	neglt	r3, r3
9000bbf8:	f042 0202 	orrlt.w	r2, r2, #2
9000bbfc:	9307      	strge	r3, [sp, #28]
9000bbfe:	9307      	strlt	r3, [sp, #28]
9000bc00:	bfb8      	it	lt
9000bc02:	9204      	strlt	r2, [sp, #16]
9000bc04:	7823      	ldrb	r3, [r4, #0]
9000bc06:	2b2e      	cmp	r3, #46	; 0x2e
9000bc08:	d10c      	bne.n	9000bc24 <_svfiprintf_r+0x130>
9000bc0a:	7863      	ldrb	r3, [r4, #1]
9000bc0c:	2b2a      	cmp	r3, #42	; 0x2a
9000bc0e:	d134      	bne.n	9000bc7a <_svfiprintf_r+0x186>
9000bc10:	9b03      	ldr	r3, [sp, #12]
9000bc12:	1d1a      	adds	r2, r3, #4
9000bc14:	681b      	ldr	r3, [r3, #0]
9000bc16:	9203      	str	r2, [sp, #12]
9000bc18:	2b00      	cmp	r3, #0
9000bc1a:	bfb8      	it	lt
9000bc1c:	f04f 33ff 	movlt.w	r3, #4294967295
9000bc20:	3402      	adds	r4, #2
9000bc22:	9305      	str	r3, [sp, #20]
9000bc24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 9000bcec <_svfiprintf_r+0x1f8>
9000bc28:	7821      	ldrb	r1, [r4, #0]
9000bc2a:	2203      	movs	r2, #3
9000bc2c:	4650      	mov	r0, sl
9000bc2e:	f7f4 faef 	bl	90000210 <memchr>
9000bc32:	b138      	cbz	r0, 9000bc44 <_svfiprintf_r+0x150>
9000bc34:	9b04      	ldr	r3, [sp, #16]
9000bc36:	eba0 000a 	sub.w	r0, r0, sl
9000bc3a:	2240      	movs	r2, #64	; 0x40
9000bc3c:	4082      	lsls	r2, r0
9000bc3e:	4313      	orrs	r3, r2
9000bc40:	3401      	adds	r4, #1
9000bc42:	9304      	str	r3, [sp, #16]
9000bc44:	f814 1b01 	ldrb.w	r1, [r4], #1
9000bc48:	4825      	ldr	r0, [pc, #148]	; (9000bce0 <_svfiprintf_r+0x1ec>)
9000bc4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000bc4e:	2206      	movs	r2, #6
9000bc50:	f7f4 fade 	bl	90000210 <memchr>
9000bc54:	2800      	cmp	r0, #0
9000bc56:	d038      	beq.n	9000bcca <_svfiprintf_r+0x1d6>
9000bc58:	4b22      	ldr	r3, [pc, #136]	; (9000bce4 <_svfiprintf_r+0x1f0>)
9000bc5a:	bb1b      	cbnz	r3, 9000bca4 <_svfiprintf_r+0x1b0>
9000bc5c:	9b03      	ldr	r3, [sp, #12]
9000bc5e:	3307      	adds	r3, #7
9000bc60:	f023 0307 	bic.w	r3, r3, #7
9000bc64:	3308      	adds	r3, #8
9000bc66:	9303      	str	r3, [sp, #12]
9000bc68:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000bc6a:	4433      	add	r3, r6
9000bc6c:	9309      	str	r3, [sp, #36]	; 0x24
9000bc6e:	e768      	b.n	9000bb42 <_svfiprintf_r+0x4e>
9000bc70:	fb0c 3202 	mla	r2, ip, r2, r3
9000bc74:	460c      	mov	r4, r1
9000bc76:	2001      	movs	r0, #1
9000bc78:	e7a6      	b.n	9000bbc8 <_svfiprintf_r+0xd4>
9000bc7a:	2300      	movs	r3, #0
9000bc7c:	3401      	adds	r4, #1
9000bc7e:	9305      	str	r3, [sp, #20]
9000bc80:	4619      	mov	r1, r3
9000bc82:	f04f 0c0a 	mov.w	ip, #10
9000bc86:	4620      	mov	r0, r4
9000bc88:	f810 2b01 	ldrb.w	r2, [r0], #1
9000bc8c:	3a30      	subs	r2, #48	; 0x30
9000bc8e:	2a09      	cmp	r2, #9
9000bc90:	d903      	bls.n	9000bc9a <_svfiprintf_r+0x1a6>
9000bc92:	2b00      	cmp	r3, #0
9000bc94:	d0c6      	beq.n	9000bc24 <_svfiprintf_r+0x130>
9000bc96:	9105      	str	r1, [sp, #20]
9000bc98:	e7c4      	b.n	9000bc24 <_svfiprintf_r+0x130>
9000bc9a:	fb0c 2101 	mla	r1, ip, r1, r2
9000bc9e:	4604      	mov	r4, r0
9000bca0:	2301      	movs	r3, #1
9000bca2:	e7f0      	b.n	9000bc86 <_svfiprintf_r+0x192>
9000bca4:	ab03      	add	r3, sp, #12
9000bca6:	9300      	str	r3, [sp, #0]
9000bca8:	462a      	mov	r2, r5
9000bcaa:	4b0f      	ldr	r3, [pc, #60]	; (9000bce8 <_svfiprintf_r+0x1f4>)
9000bcac:	a904      	add	r1, sp, #16
9000bcae:	4638      	mov	r0, r7
9000bcb0:	f3af 8000 	nop.w
9000bcb4:	1c42      	adds	r2, r0, #1
9000bcb6:	4606      	mov	r6, r0
9000bcb8:	d1d6      	bne.n	9000bc68 <_svfiprintf_r+0x174>
9000bcba:	89ab      	ldrh	r3, [r5, #12]
9000bcbc:	065b      	lsls	r3, r3, #25
9000bcbe:	f53f af2d 	bmi.w	9000bb1c <_svfiprintf_r+0x28>
9000bcc2:	9809      	ldr	r0, [sp, #36]	; 0x24
9000bcc4:	b01d      	add	sp, #116	; 0x74
9000bcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000bcca:	ab03      	add	r3, sp, #12
9000bccc:	9300      	str	r3, [sp, #0]
9000bcce:	462a      	mov	r2, r5
9000bcd0:	4b05      	ldr	r3, [pc, #20]	; (9000bce8 <_svfiprintf_r+0x1f4>)
9000bcd2:	a904      	add	r1, sp, #16
9000bcd4:	4638      	mov	r0, r7
9000bcd6:	f000 f9bd 	bl	9000c054 <_printf_i>
9000bcda:	e7eb      	b.n	9000bcb4 <_svfiprintf_r+0x1c0>
9000bcdc:	900111be 	.word	0x900111be
9000bce0:	900111c8 	.word	0x900111c8
9000bce4:	00000000 	.word	0x00000000
9000bce8:	9000ba41 	.word	0x9000ba41
9000bcec:	900111c4 	.word	0x900111c4

9000bcf0 <__sfputc_r>:
9000bcf0:	6893      	ldr	r3, [r2, #8]
9000bcf2:	3b01      	subs	r3, #1
9000bcf4:	2b00      	cmp	r3, #0
9000bcf6:	b410      	push	{r4}
9000bcf8:	6093      	str	r3, [r2, #8]
9000bcfa:	da08      	bge.n	9000bd0e <__sfputc_r+0x1e>
9000bcfc:	6994      	ldr	r4, [r2, #24]
9000bcfe:	42a3      	cmp	r3, r4
9000bd00:	db01      	blt.n	9000bd06 <__sfputc_r+0x16>
9000bd02:	290a      	cmp	r1, #10
9000bd04:	d103      	bne.n	9000bd0e <__sfputc_r+0x1e>
9000bd06:	f85d 4b04 	ldr.w	r4, [sp], #4
9000bd0a:	f7ff bd00 	b.w	9000b70e <__swbuf_r>
9000bd0e:	6813      	ldr	r3, [r2, #0]
9000bd10:	1c58      	adds	r0, r3, #1
9000bd12:	6010      	str	r0, [r2, #0]
9000bd14:	7019      	strb	r1, [r3, #0]
9000bd16:	4608      	mov	r0, r1
9000bd18:	f85d 4b04 	ldr.w	r4, [sp], #4
9000bd1c:	4770      	bx	lr

9000bd1e <__sfputs_r>:
9000bd1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000bd20:	4606      	mov	r6, r0
9000bd22:	460f      	mov	r7, r1
9000bd24:	4614      	mov	r4, r2
9000bd26:	18d5      	adds	r5, r2, r3
9000bd28:	42ac      	cmp	r4, r5
9000bd2a:	d101      	bne.n	9000bd30 <__sfputs_r+0x12>
9000bd2c:	2000      	movs	r0, #0
9000bd2e:	e007      	b.n	9000bd40 <__sfputs_r+0x22>
9000bd30:	f814 1b01 	ldrb.w	r1, [r4], #1
9000bd34:	463a      	mov	r2, r7
9000bd36:	4630      	mov	r0, r6
9000bd38:	f7ff ffda 	bl	9000bcf0 <__sfputc_r>
9000bd3c:	1c43      	adds	r3, r0, #1
9000bd3e:	d1f3      	bne.n	9000bd28 <__sfputs_r+0xa>
9000bd40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000bd44 <_vfiprintf_r>:
9000bd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000bd48:	460d      	mov	r5, r1
9000bd4a:	b09d      	sub	sp, #116	; 0x74
9000bd4c:	4614      	mov	r4, r2
9000bd4e:	4698      	mov	r8, r3
9000bd50:	4606      	mov	r6, r0
9000bd52:	b118      	cbz	r0, 9000bd5c <_vfiprintf_r+0x18>
9000bd54:	6a03      	ldr	r3, [r0, #32]
9000bd56:	b90b      	cbnz	r3, 9000bd5c <_vfiprintf_r+0x18>
9000bd58:	f7ff fbca 	bl	9000b4f0 <__sinit>
9000bd5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000bd5e:	07d9      	lsls	r1, r3, #31
9000bd60:	d405      	bmi.n	9000bd6e <_vfiprintf_r+0x2a>
9000bd62:	89ab      	ldrh	r3, [r5, #12]
9000bd64:	059a      	lsls	r2, r3, #22
9000bd66:	d402      	bmi.n	9000bd6e <_vfiprintf_r+0x2a>
9000bd68:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000bd6a:	f7ff fe12 	bl	9000b992 <__retarget_lock_acquire_recursive>
9000bd6e:	89ab      	ldrh	r3, [r5, #12]
9000bd70:	071b      	lsls	r3, r3, #28
9000bd72:	d501      	bpl.n	9000bd78 <_vfiprintf_r+0x34>
9000bd74:	692b      	ldr	r3, [r5, #16]
9000bd76:	b99b      	cbnz	r3, 9000bda0 <_vfiprintf_r+0x5c>
9000bd78:	4629      	mov	r1, r5
9000bd7a:	4630      	mov	r0, r6
9000bd7c:	f7ff fd04 	bl	9000b788 <__swsetup_r>
9000bd80:	b170      	cbz	r0, 9000bda0 <_vfiprintf_r+0x5c>
9000bd82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000bd84:	07dc      	lsls	r4, r3, #31
9000bd86:	d504      	bpl.n	9000bd92 <_vfiprintf_r+0x4e>
9000bd88:	f04f 30ff 	mov.w	r0, #4294967295
9000bd8c:	b01d      	add	sp, #116	; 0x74
9000bd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000bd92:	89ab      	ldrh	r3, [r5, #12]
9000bd94:	0598      	lsls	r0, r3, #22
9000bd96:	d4f7      	bmi.n	9000bd88 <_vfiprintf_r+0x44>
9000bd98:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000bd9a:	f7ff fdfb 	bl	9000b994 <__retarget_lock_release_recursive>
9000bd9e:	e7f3      	b.n	9000bd88 <_vfiprintf_r+0x44>
9000bda0:	2300      	movs	r3, #0
9000bda2:	9309      	str	r3, [sp, #36]	; 0x24
9000bda4:	2320      	movs	r3, #32
9000bda6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000bdaa:	f8cd 800c 	str.w	r8, [sp, #12]
9000bdae:	2330      	movs	r3, #48	; 0x30
9000bdb0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 9000bf64 <_vfiprintf_r+0x220>
9000bdb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000bdb8:	f04f 0901 	mov.w	r9, #1
9000bdbc:	4623      	mov	r3, r4
9000bdbe:	469a      	mov	sl, r3
9000bdc0:	f813 2b01 	ldrb.w	r2, [r3], #1
9000bdc4:	b10a      	cbz	r2, 9000bdca <_vfiprintf_r+0x86>
9000bdc6:	2a25      	cmp	r2, #37	; 0x25
9000bdc8:	d1f9      	bne.n	9000bdbe <_vfiprintf_r+0x7a>
9000bdca:	ebba 0b04 	subs.w	fp, sl, r4
9000bdce:	d00b      	beq.n	9000bde8 <_vfiprintf_r+0xa4>
9000bdd0:	465b      	mov	r3, fp
9000bdd2:	4622      	mov	r2, r4
9000bdd4:	4629      	mov	r1, r5
9000bdd6:	4630      	mov	r0, r6
9000bdd8:	f7ff ffa1 	bl	9000bd1e <__sfputs_r>
9000bddc:	3001      	adds	r0, #1
9000bdde:	f000 80a9 	beq.w	9000bf34 <_vfiprintf_r+0x1f0>
9000bde2:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000bde4:	445a      	add	r2, fp
9000bde6:	9209      	str	r2, [sp, #36]	; 0x24
9000bde8:	f89a 3000 	ldrb.w	r3, [sl]
9000bdec:	2b00      	cmp	r3, #0
9000bdee:	f000 80a1 	beq.w	9000bf34 <_vfiprintf_r+0x1f0>
9000bdf2:	2300      	movs	r3, #0
9000bdf4:	f04f 32ff 	mov.w	r2, #4294967295
9000bdf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000bdfc:	f10a 0a01 	add.w	sl, sl, #1
9000be00:	9304      	str	r3, [sp, #16]
9000be02:	9307      	str	r3, [sp, #28]
9000be04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000be08:	931a      	str	r3, [sp, #104]	; 0x68
9000be0a:	4654      	mov	r4, sl
9000be0c:	2205      	movs	r2, #5
9000be0e:	f814 1b01 	ldrb.w	r1, [r4], #1
9000be12:	4854      	ldr	r0, [pc, #336]	; (9000bf64 <_vfiprintf_r+0x220>)
9000be14:	f7f4 f9fc 	bl	90000210 <memchr>
9000be18:	9a04      	ldr	r2, [sp, #16]
9000be1a:	b9d8      	cbnz	r0, 9000be54 <_vfiprintf_r+0x110>
9000be1c:	06d1      	lsls	r1, r2, #27
9000be1e:	bf44      	itt	mi
9000be20:	2320      	movmi	r3, #32
9000be22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000be26:	0713      	lsls	r3, r2, #28
9000be28:	bf44      	itt	mi
9000be2a:	232b      	movmi	r3, #43	; 0x2b
9000be2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000be30:	f89a 3000 	ldrb.w	r3, [sl]
9000be34:	2b2a      	cmp	r3, #42	; 0x2a
9000be36:	d015      	beq.n	9000be64 <_vfiprintf_r+0x120>
9000be38:	9a07      	ldr	r2, [sp, #28]
9000be3a:	4654      	mov	r4, sl
9000be3c:	2000      	movs	r0, #0
9000be3e:	f04f 0c0a 	mov.w	ip, #10
9000be42:	4621      	mov	r1, r4
9000be44:	f811 3b01 	ldrb.w	r3, [r1], #1
9000be48:	3b30      	subs	r3, #48	; 0x30
9000be4a:	2b09      	cmp	r3, #9
9000be4c:	d94d      	bls.n	9000beea <_vfiprintf_r+0x1a6>
9000be4e:	b1b0      	cbz	r0, 9000be7e <_vfiprintf_r+0x13a>
9000be50:	9207      	str	r2, [sp, #28]
9000be52:	e014      	b.n	9000be7e <_vfiprintf_r+0x13a>
9000be54:	eba0 0308 	sub.w	r3, r0, r8
9000be58:	fa09 f303 	lsl.w	r3, r9, r3
9000be5c:	4313      	orrs	r3, r2
9000be5e:	9304      	str	r3, [sp, #16]
9000be60:	46a2      	mov	sl, r4
9000be62:	e7d2      	b.n	9000be0a <_vfiprintf_r+0xc6>
9000be64:	9b03      	ldr	r3, [sp, #12]
9000be66:	1d19      	adds	r1, r3, #4
9000be68:	681b      	ldr	r3, [r3, #0]
9000be6a:	9103      	str	r1, [sp, #12]
9000be6c:	2b00      	cmp	r3, #0
9000be6e:	bfbb      	ittet	lt
9000be70:	425b      	neglt	r3, r3
9000be72:	f042 0202 	orrlt.w	r2, r2, #2
9000be76:	9307      	strge	r3, [sp, #28]
9000be78:	9307      	strlt	r3, [sp, #28]
9000be7a:	bfb8      	it	lt
9000be7c:	9204      	strlt	r2, [sp, #16]
9000be7e:	7823      	ldrb	r3, [r4, #0]
9000be80:	2b2e      	cmp	r3, #46	; 0x2e
9000be82:	d10c      	bne.n	9000be9e <_vfiprintf_r+0x15a>
9000be84:	7863      	ldrb	r3, [r4, #1]
9000be86:	2b2a      	cmp	r3, #42	; 0x2a
9000be88:	d134      	bne.n	9000bef4 <_vfiprintf_r+0x1b0>
9000be8a:	9b03      	ldr	r3, [sp, #12]
9000be8c:	1d1a      	adds	r2, r3, #4
9000be8e:	681b      	ldr	r3, [r3, #0]
9000be90:	9203      	str	r2, [sp, #12]
9000be92:	2b00      	cmp	r3, #0
9000be94:	bfb8      	it	lt
9000be96:	f04f 33ff 	movlt.w	r3, #4294967295
9000be9a:	3402      	adds	r4, #2
9000be9c:	9305      	str	r3, [sp, #20]
9000be9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 9000bf74 <_vfiprintf_r+0x230>
9000bea2:	7821      	ldrb	r1, [r4, #0]
9000bea4:	2203      	movs	r2, #3
9000bea6:	4650      	mov	r0, sl
9000bea8:	f7f4 f9b2 	bl	90000210 <memchr>
9000beac:	b138      	cbz	r0, 9000bebe <_vfiprintf_r+0x17a>
9000beae:	9b04      	ldr	r3, [sp, #16]
9000beb0:	eba0 000a 	sub.w	r0, r0, sl
9000beb4:	2240      	movs	r2, #64	; 0x40
9000beb6:	4082      	lsls	r2, r0
9000beb8:	4313      	orrs	r3, r2
9000beba:	3401      	adds	r4, #1
9000bebc:	9304      	str	r3, [sp, #16]
9000bebe:	f814 1b01 	ldrb.w	r1, [r4], #1
9000bec2:	4829      	ldr	r0, [pc, #164]	; (9000bf68 <_vfiprintf_r+0x224>)
9000bec4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000bec8:	2206      	movs	r2, #6
9000beca:	f7f4 f9a1 	bl	90000210 <memchr>
9000bece:	2800      	cmp	r0, #0
9000bed0:	d03f      	beq.n	9000bf52 <_vfiprintf_r+0x20e>
9000bed2:	4b26      	ldr	r3, [pc, #152]	; (9000bf6c <_vfiprintf_r+0x228>)
9000bed4:	bb1b      	cbnz	r3, 9000bf1e <_vfiprintf_r+0x1da>
9000bed6:	9b03      	ldr	r3, [sp, #12]
9000bed8:	3307      	adds	r3, #7
9000beda:	f023 0307 	bic.w	r3, r3, #7
9000bede:	3308      	adds	r3, #8
9000bee0:	9303      	str	r3, [sp, #12]
9000bee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000bee4:	443b      	add	r3, r7
9000bee6:	9309      	str	r3, [sp, #36]	; 0x24
9000bee8:	e768      	b.n	9000bdbc <_vfiprintf_r+0x78>
9000beea:	fb0c 3202 	mla	r2, ip, r2, r3
9000beee:	460c      	mov	r4, r1
9000bef0:	2001      	movs	r0, #1
9000bef2:	e7a6      	b.n	9000be42 <_vfiprintf_r+0xfe>
9000bef4:	2300      	movs	r3, #0
9000bef6:	3401      	adds	r4, #1
9000bef8:	9305      	str	r3, [sp, #20]
9000befa:	4619      	mov	r1, r3
9000befc:	f04f 0c0a 	mov.w	ip, #10
9000bf00:	4620      	mov	r0, r4
9000bf02:	f810 2b01 	ldrb.w	r2, [r0], #1
9000bf06:	3a30      	subs	r2, #48	; 0x30
9000bf08:	2a09      	cmp	r2, #9
9000bf0a:	d903      	bls.n	9000bf14 <_vfiprintf_r+0x1d0>
9000bf0c:	2b00      	cmp	r3, #0
9000bf0e:	d0c6      	beq.n	9000be9e <_vfiprintf_r+0x15a>
9000bf10:	9105      	str	r1, [sp, #20]
9000bf12:	e7c4      	b.n	9000be9e <_vfiprintf_r+0x15a>
9000bf14:	fb0c 2101 	mla	r1, ip, r1, r2
9000bf18:	4604      	mov	r4, r0
9000bf1a:	2301      	movs	r3, #1
9000bf1c:	e7f0      	b.n	9000bf00 <_vfiprintf_r+0x1bc>
9000bf1e:	ab03      	add	r3, sp, #12
9000bf20:	9300      	str	r3, [sp, #0]
9000bf22:	462a      	mov	r2, r5
9000bf24:	4b12      	ldr	r3, [pc, #72]	; (9000bf70 <_vfiprintf_r+0x22c>)
9000bf26:	a904      	add	r1, sp, #16
9000bf28:	4630      	mov	r0, r6
9000bf2a:	f3af 8000 	nop.w
9000bf2e:	4607      	mov	r7, r0
9000bf30:	1c78      	adds	r0, r7, #1
9000bf32:	d1d6      	bne.n	9000bee2 <_vfiprintf_r+0x19e>
9000bf34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000bf36:	07d9      	lsls	r1, r3, #31
9000bf38:	d405      	bmi.n	9000bf46 <_vfiprintf_r+0x202>
9000bf3a:	89ab      	ldrh	r3, [r5, #12]
9000bf3c:	059a      	lsls	r2, r3, #22
9000bf3e:	d402      	bmi.n	9000bf46 <_vfiprintf_r+0x202>
9000bf40:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000bf42:	f7ff fd27 	bl	9000b994 <__retarget_lock_release_recursive>
9000bf46:	89ab      	ldrh	r3, [r5, #12]
9000bf48:	065b      	lsls	r3, r3, #25
9000bf4a:	f53f af1d 	bmi.w	9000bd88 <_vfiprintf_r+0x44>
9000bf4e:	9809      	ldr	r0, [sp, #36]	; 0x24
9000bf50:	e71c      	b.n	9000bd8c <_vfiprintf_r+0x48>
9000bf52:	ab03      	add	r3, sp, #12
9000bf54:	9300      	str	r3, [sp, #0]
9000bf56:	462a      	mov	r2, r5
9000bf58:	4b05      	ldr	r3, [pc, #20]	; (9000bf70 <_vfiprintf_r+0x22c>)
9000bf5a:	a904      	add	r1, sp, #16
9000bf5c:	4630      	mov	r0, r6
9000bf5e:	f000 f879 	bl	9000c054 <_printf_i>
9000bf62:	e7e4      	b.n	9000bf2e <_vfiprintf_r+0x1ea>
9000bf64:	900111be 	.word	0x900111be
9000bf68:	900111c8 	.word	0x900111c8
9000bf6c:	00000000 	.word	0x00000000
9000bf70:	9000bd1f 	.word	0x9000bd1f
9000bf74:	900111c4 	.word	0x900111c4

9000bf78 <_printf_common>:
9000bf78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000bf7c:	4616      	mov	r6, r2
9000bf7e:	4699      	mov	r9, r3
9000bf80:	688a      	ldr	r2, [r1, #8]
9000bf82:	690b      	ldr	r3, [r1, #16]
9000bf84:	f8dd 8020 	ldr.w	r8, [sp, #32]
9000bf88:	4293      	cmp	r3, r2
9000bf8a:	bfb8      	it	lt
9000bf8c:	4613      	movlt	r3, r2
9000bf8e:	6033      	str	r3, [r6, #0]
9000bf90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
9000bf94:	4607      	mov	r7, r0
9000bf96:	460c      	mov	r4, r1
9000bf98:	b10a      	cbz	r2, 9000bf9e <_printf_common+0x26>
9000bf9a:	3301      	adds	r3, #1
9000bf9c:	6033      	str	r3, [r6, #0]
9000bf9e:	6823      	ldr	r3, [r4, #0]
9000bfa0:	0699      	lsls	r1, r3, #26
9000bfa2:	bf42      	ittt	mi
9000bfa4:	6833      	ldrmi	r3, [r6, #0]
9000bfa6:	3302      	addmi	r3, #2
9000bfa8:	6033      	strmi	r3, [r6, #0]
9000bfaa:	6825      	ldr	r5, [r4, #0]
9000bfac:	f015 0506 	ands.w	r5, r5, #6
9000bfb0:	d106      	bne.n	9000bfc0 <_printf_common+0x48>
9000bfb2:	f104 0a19 	add.w	sl, r4, #25
9000bfb6:	68e3      	ldr	r3, [r4, #12]
9000bfb8:	6832      	ldr	r2, [r6, #0]
9000bfba:	1a9b      	subs	r3, r3, r2
9000bfbc:	42ab      	cmp	r3, r5
9000bfbe:	dc26      	bgt.n	9000c00e <_printf_common+0x96>
9000bfc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
9000bfc4:	1e13      	subs	r3, r2, #0
9000bfc6:	6822      	ldr	r2, [r4, #0]
9000bfc8:	bf18      	it	ne
9000bfca:	2301      	movne	r3, #1
9000bfcc:	0692      	lsls	r2, r2, #26
9000bfce:	d42b      	bmi.n	9000c028 <_printf_common+0xb0>
9000bfd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
9000bfd4:	4649      	mov	r1, r9
9000bfd6:	4638      	mov	r0, r7
9000bfd8:	47c0      	blx	r8
9000bfda:	3001      	adds	r0, #1
9000bfdc:	d01e      	beq.n	9000c01c <_printf_common+0xa4>
9000bfde:	6823      	ldr	r3, [r4, #0]
9000bfe0:	6922      	ldr	r2, [r4, #16]
9000bfe2:	f003 0306 	and.w	r3, r3, #6
9000bfe6:	2b04      	cmp	r3, #4
9000bfe8:	bf02      	ittt	eq
9000bfea:	68e5      	ldreq	r5, [r4, #12]
9000bfec:	6833      	ldreq	r3, [r6, #0]
9000bfee:	1aed      	subeq	r5, r5, r3
9000bff0:	68a3      	ldr	r3, [r4, #8]
9000bff2:	bf0c      	ite	eq
9000bff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000bff8:	2500      	movne	r5, #0
9000bffa:	4293      	cmp	r3, r2
9000bffc:	bfc4      	itt	gt
9000bffe:	1a9b      	subgt	r3, r3, r2
9000c000:	18ed      	addgt	r5, r5, r3
9000c002:	2600      	movs	r6, #0
9000c004:	341a      	adds	r4, #26
9000c006:	42b5      	cmp	r5, r6
9000c008:	d11a      	bne.n	9000c040 <_printf_common+0xc8>
9000c00a:	2000      	movs	r0, #0
9000c00c:	e008      	b.n	9000c020 <_printf_common+0xa8>
9000c00e:	2301      	movs	r3, #1
9000c010:	4652      	mov	r2, sl
9000c012:	4649      	mov	r1, r9
9000c014:	4638      	mov	r0, r7
9000c016:	47c0      	blx	r8
9000c018:	3001      	adds	r0, #1
9000c01a:	d103      	bne.n	9000c024 <_printf_common+0xac>
9000c01c:	f04f 30ff 	mov.w	r0, #4294967295
9000c020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c024:	3501      	adds	r5, #1
9000c026:	e7c6      	b.n	9000bfb6 <_printf_common+0x3e>
9000c028:	18e1      	adds	r1, r4, r3
9000c02a:	1c5a      	adds	r2, r3, #1
9000c02c:	2030      	movs	r0, #48	; 0x30
9000c02e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9000c032:	4422      	add	r2, r4
9000c034:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
9000c038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
9000c03c:	3302      	adds	r3, #2
9000c03e:	e7c7      	b.n	9000bfd0 <_printf_common+0x58>
9000c040:	2301      	movs	r3, #1
9000c042:	4622      	mov	r2, r4
9000c044:	4649      	mov	r1, r9
9000c046:	4638      	mov	r0, r7
9000c048:	47c0      	blx	r8
9000c04a:	3001      	adds	r0, #1
9000c04c:	d0e6      	beq.n	9000c01c <_printf_common+0xa4>
9000c04e:	3601      	adds	r6, #1
9000c050:	e7d9      	b.n	9000c006 <_printf_common+0x8e>
	...

9000c054 <_printf_i>:
9000c054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000c058:	7e0f      	ldrb	r7, [r1, #24]
9000c05a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000c05c:	2f78      	cmp	r7, #120	; 0x78
9000c05e:	4691      	mov	r9, r2
9000c060:	4680      	mov	r8, r0
9000c062:	460c      	mov	r4, r1
9000c064:	469a      	mov	sl, r3
9000c066:	f101 0243 	add.w	r2, r1, #67	; 0x43
9000c06a:	d807      	bhi.n	9000c07c <_printf_i+0x28>
9000c06c:	2f62      	cmp	r7, #98	; 0x62
9000c06e:	d80a      	bhi.n	9000c086 <_printf_i+0x32>
9000c070:	2f00      	cmp	r7, #0
9000c072:	f000 80d4 	beq.w	9000c21e <_printf_i+0x1ca>
9000c076:	2f58      	cmp	r7, #88	; 0x58
9000c078:	f000 80c0 	beq.w	9000c1fc <_printf_i+0x1a8>
9000c07c:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000c080:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
9000c084:	e03a      	b.n	9000c0fc <_printf_i+0xa8>
9000c086:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
9000c08a:	2b15      	cmp	r3, #21
9000c08c:	d8f6      	bhi.n	9000c07c <_printf_i+0x28>
9000c08e:	a101      	add	r1, pc, #4	; (adr r1, 9000c094 <_printf_i+0x40>)
9000c090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000c094:	9000c0ed 	.word	0x9000c0ed
9000c098:	9000c101 	.word	0x9000c101
9000c09c:	9000c07d 	.word	0x9000c07d
9000c0a0:	9000c07d 	.word	0x9000c07d
9000c0a4:	9000c07d 	.word	0x9000c07d
9000c0a8:	9000c07d 	.word	0x9000c07d
9000c0ac:	9000c101 	.word	0x9000c101
9000c0b0:	9000c07d 	.word	0x9000c07d
9000c0b4:	9000c07d 	.word	0x9000c07d
9000c0b8:	9000c07d 	.word	0x9000c07d
9000c0bc:	9000c07d 	.word	0x9000c07d
9000c0c0:	9000c205 	.word	0x9000c205
9000c0c4:	9000c12d 	.word	0x9000c12d
9000c0c8:	9000c1bf 	.word	0x9000c1bf
9000c0cc:	9000c07d 	.word	0x9000c07d
9000c0d0:	9000c07d 	.word	0x9000c07d
9000c0d4:	9000c227 	.word	0x9000c227
9000c0d8:	9000c07d 	.word	0x9000c07d
9000c0dc:	9000c12d 	.word	0x9000c12d
9000c0e0:	9000c07d 	.word	0x9000c07d
9000c0e4:	9000c07d 	.word	0x9000c07d
9000c0e8:	9000c1c7 	.word	0x9000c1c7
9000c0ec:	682b      	ldr	r3, [r5, #0]
9000c0ee:	1d1a      	adds	r2, r3, #4
9000c0f0:	681b      	ldr	r3, [r3, #0]
9000c0f2:	602a      	str	r2, [r5, #0]
9000c0f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000c0f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000c0fc:	2301      	movs	r3, #1
9000c0fe:	e09f      	b.n	9000c240 <_printf_i+0x1ec>
9000c100:	6820      	ldr	r0, [r4, #0]
9000c102:	682b      	ldr	r3, [r5, #0]
9000c104:	0607      	lsls	r7, r0, #24
9000c106:	f103 0104 	add.w	r1, r3, #4
9000c10a:	6029      	str	r1, [r5, #0]
9000c10c:	d501      	bpl.n	9000c112 <_printf_i+0xbe>
9000c10e:	681e      	ldr	r6, [r3, #0]
9000c110:	e003      	b.n	9000c11a <_printf_i+0xc6>
9000c112:	0646      	lsls	r6, r0, #25
9000c114:	d5fb      	bpl.n	9000c10e <_printf_i+0xba>
9000c116:	f9b3 6000 	ldrsh.w	r6, [r3]
9000c11a:	2e00      	cmp	r6, #0
9000c11c:	da03      	bge.n	9000c126 <_printf_i+0xd2>
9000c11e:	232d      	movs	r3, #45	; 0x2d
9000c120:	4276      	negs	r6, r6
9000c122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000c126:	485a      	ldr	r0, [pc, #360]	; (9000c290 <_printf_i+0x23c>)
9000c128:	230a      	movs	r3, #10
9000c12a:	e012      	b.n	9000c152 <_printf_i+0xfe>
9000c12c:	682b      	ldr	r3, [r5, #0]
9000c12e:	6820      	ldr	r0, [r4, #0]
9000c130:	1d19      	adds	r1, r3, #4
9000c132:	6029      	str	r1, [r5, #0]
9000c134:	0605      	lsls	r5, r0, #24
9000c136:	d501      	bpl.n	9000c13c <_printf_i+0xe8>
9000c138:	681e      	ldr	r6, [r3, #0]
9000c13a:	e002      	b.n	9000c142 <_printf_i+0xee>
9000c13c:	0641      	lsls	r1, r0, #25
9000c13e:	d5fb      	bpl.n	9000c138 <_printf_i+0xe4>
9000c140:	881e      	ldrh	r6, [r3, #0]
9000c142:	4853      	ldr	r0, [pc, #332]	; (9000c290 <_printf_i+0x23c>)
9000c144:	2f6f      	cmp	r7, #111	; 0x6f
9000c146:	bf0c      	ite	eq
9000c148:	2308      	moveq	r3, #8
9000c14a:	230a      	movne	r3, #10
9000c14c:	2100      	movs	r1, #0
9000c14e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
9000c152:	6865      	ldr	r5, [r4, #4]
9000c154:	60a5      	str	r5, [r4, #8]
9000c156:	2d00      	cmp	r5, #0
9000c158:	bfa2      	ittt	ge
9000c15a:	6821      	ldrge	r1, [r4, #0]
9000c15c:	f021 0104 	bicge.w	r1, r1, #4
9000c160:	6021      	strge	r1, [r4, #0]
9000c162:	b90e      	cbnz	r6, 9000c168 <_printf_i+0x114>
9000c164:	2d00      	cmp	r5, #0
9000c166:	d04b      	beq.n	9000c200 <_printf_i+0x1ac>
9000c168:	4615      	mov	r5, r2
9000c16a:	fbb6 f1f3 	udiv	r1, r6, r3
9000c16e:	fb03 6711 	mls	r7, r3, r1, r6
9000c172:	5dc7      	ldrb	r7, [r0, r7]
9000c174:	f805 7d01 	strb.w	r7, [r5, #-1]!
9000c178:	4637      	mov	r7, r6
9000c17a:	42bb      	cmp	r3, r7
9000c17c:	460e      	mov	r6, r1
9000c17e:	d9f4      	bls.n	9000c16a <_printf_i+0x116>
9000c180:	2b08      	cmp	r3, #8
9000c182:	d10b      	bne.n	9000c19c <_printf_i+0x148>
9000c184:	6823      	ldr	r3, [r4, #0]
9000c186:	07de      	lsls	r6, r3, #31
9000c188:	d508      	bpl.n	9000c19c <_printf_i+0x148>
9000c18a:	6923      	ldr	r3, [r4, #16]
9000c18c:	6861      	ldr	r1, [r4, #4]
9000c18e:	4299      	cmp	r1, r3
9000c190:	bfde      	ittt	le
9000c192:	2330      	movle	r3, #48	; 0x30
9000c194:	f805 3c01 	strble.w	r3, [r5, #-1]
9000c198:	f105 35ff 	addle.w	r5, r5, #4294967295
9000c19c:	1b52      	subs	r2, r2, r5
9000c19e:	6122      	str	r2, [r4, #16]
9000c1a0:	f8cd a000 	str.w	sl, [sp]
9000c1a4:	464b      	mov	r3, r9
9000c1a6:	aa03      	add	r2, sp, #12
9000c1a8:	4621      	mov	r1, r4
9000c1aa:	4640      	mov	r0, r8
9000c1ac:	f7ff fee4 	bl	9000bf78 <_printf_common>
9000c1b0:	3001      	adds	r0, #1
9000c1b2:	d14a      	bne.n	9000c24a <_printf_i+0x1f6>
9000c1b4:	f04f 30ff 	mov.w	r0, #4294967295
9000c1b8:	b004      	add	sp, #16
9000c1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c1be:	6823      	ldr	r3, [r4, #0]
9000c1c0:	f043 0320 	orr.w	r3, r3, #32
9000c1c4:	6023      	str	r3, [r4, #0]
9000c1c6:	4833      	ldr	r0, [pc, #204]	; (9000c294 <_printf_i+0x240>)
9000c1c8:	2778      	movs	r7, #120	; 0x78
9000c1ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
9000c1ce:	6823      	ldr	r3, [r4, #0]
9000c1d0:	6829      	ldr	r1, [r5, #0]
9000c1d2:	061f      	lsls	r7, r3, #24
9000c1d4:	f851 6b04 	ldr.w	r6, [r1], #4
9000c1d8:	d402      	bmi.n	9000c1e0 <_printf_i+0x18c>
9000c1da:	065f      	lsls	r7, r3, #25
9000c1dc:	bf48      	it	mi
9000c1de:	b2b6      	uxthmi	r6, r6
9000c1e0:	07df      	lsls	r7, r3, #31
9000c1e2:	bf48      	it	mi
9000c1e4:	f043 0320 	orrmi.w	r3, r3, #32
9000c1e8:	6029      	str	r1, [r5, #0]
9000c1ea:	bf48      	it	mi
9000c1ec:	6023      	strmi	r3, [r4, #0]
9000c1ee:	b91e      	cbnz	r6, 9000c1f8 <_printf_i+0x1a4>
9000c1f0:	6823      	ldr	r3, [r4, #0]
9000c1f2:	f023 0320 	bic.w	r3, r3, #32
9000c1f6:	6023      	str	r3, [r4, #0]
9000c1f8:	2310      	movs	r3, #16
9000c1fa:	e7a7      	b.n	9000c14c <_printf_i+0xf8>
9000c1fc:	4824      	ldr	r0, [pc, #144]	; (9000c290 <_printf_i+0x23c>)
9000c1fe:	e7e4      	b.n	9000c1ca <_printf_i+0x176>
9000c200:	4615      	mov	r5, r2
9000c202:	e7bd      	b.n	9000c180 <_printf_i+0x12c>
9000c204:	682b      	ldr	r3, [r5, #0]
9000c206:	6826      	ldr	r6, [r4, #0]
9000c208:	6961      	ldr	r1, [r4, #20]
9000c20a:	1d18      	adds	r0, r3, #4
9000c20c:	6028      	str	r0, [r5, #0]
9000c20e:	0635      	lsls	r5, r6, #24
9000c210:	681b      	ldr	r3, [r3, #0]
9000c212:	d501      	bpl.n	9000c218 <_printf_i+0x1c4>
9000c214:	6019      	str	r1, [r3, #0]
9000c216:	e002      	b.n	9000c21e <_printf_i+0x1ca>
9000c218:	0670      	lsls	r0, r6, #25
9000c21a:	d5fb      	bpl.n	9000c214 <_printf_i+0x1c0>
9000c21c:	8019      	strh	r1, [r3, #0]
9000c21e:	2300      	movs	r3, #0
9000c220:	6123      	str	r3, [r4, #16]
9000c222:	4615      	mov	r5, r2
9000c224:	e7bc      	b.n	9000c1a0 <_printf_i+0x14c>
9000c226:	682b      	ldr	r3, [r5, #0]
9000c228:	1d1a      	adds	r2, r3, #4
9000c22a:	602a      	str	r2, [r5, #0]
9000c22c:	681d      	ldr	r5, [r3, #0]
9000c22e:	6862      	ldr	r2, [r4, #4]
9000c230:	2100      	movs	r1, #0
9000c232:	4628      	mov	r0, r5
9000c234:	f7f3 ffec 	bl	90000210 <memchr>
9000c238:	b108      	cbz	r0, 9000c23e <_printf_i+0x1ea>
9000c23a:	1b40      	subs	r0, r0, r5
9000c23c:	6060      	str	r0, [r4, #4]
9000c23e:	6863      	ldr	r3, [r4, #4]
9000c240:	6123      	str	r3, [r4, #16]
9000c242:	2300      	movs	r3, #0
9000c244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000c248:	e7aa      	b.n	9000c1a0 <_printf_i+0x14c>
9000c24a:	6923      	ldr	r3, [r4, #16]
9000c24c:	462a      	mov	r2, r5
9000c24e:	4649      	mov	r1, r9
9000c250:	4640      	mov	r0, r8
9000c252:	47d0      	blx	sl
9000c254:	3001      	adds	r0, #1
9000c256:	d0ad      	beq.n	9000c1b4 <_printf_i+0x160>
9000c258:	6823      	ldr	r3, [r4, #0]
9000c25a:	079b      	lsls	r3, r3, #30
9000c25c:	d413      	bmi.n	9000c286 <_printf_i+0x232>
9000c25e:	68e0      	ldr	r0, [r4, #12]
9000c260:	9b03      	ldr	r3, [sp, #12]
9000c262:	4298      	cmp	r0, r3
9000c264:	bfb8      	it	lt
9000c266:	4618      	movlt	r0, r3
9000c268:	e7a6      	b.n	9000c1b8 <_printf_i+0x164>
9000c26a:	2301      	movs	r3, #1
9000c26c:	4632      	mov	r2, r6
9000c26e:	4649      	mov	r1, r9
9000c270:	4640      	mov	r0, r8
9000c272:	47d0      	blx	sl
9000c274:	3001      	adds	r0, #1
9000c276:	d09d      	beq.n	9000c1b4 <_printf_i+0x160>
9000c278:	3501      	adds	r5, #1
9000c27a:	68e3      	ldr	r3, [r4, #12]
9000c27c:	9903      	ldr	r1, [sp, #12]
9000c27e:	1a5b      	subs	r3, r3, r1
9000c280:	42ab      	cmp	r3, r5
9000c282:	dcf2      	bgt.n	9000c26a <_printf_i+0x216>
9000c284:	e7eb      	b.n	9000c25e <_printf_i+0x20a>
9000c286:	2500      	movs	r5, #0
9000c288:	f104 0619 	add.w	r6, r4, #25
9000c28c:	e7f5      	b.n	9000c27a <_printf_i+0x226>
9000c28e:	bf00      	nop
9000c290:	900111cf 	.word	0x900111cf
9000c294:	900111e0 	.word	0x900111e0

9000c298 <__sflush_r>:
9000c298:	898a      	ldrh	r2, [r1, #12]
9000c29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c29e:	4605      	mov	r5, r0
9000c2a0:	0710      	lsls	r0, r2, #28
9000c2a2:	460c      	mov	r4, r1
9000c2a4:	d458      	bmi.n	9000c358 <__sflush_r+0xc0>
9000c2a6:	684b      	ldr	r3, [r1, #4]
9000c2a8:	2b00      	cmp	r3, #0
9000c2aa:	dc05      	bgt.n	9000c2b8 <__sflush_r+0x20>
9000c2ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9000c2ae:	2b00      	cmp	r3, #0
9000c2b0:	dc02      	bgt.n	9000c2b8 <__sflush_r+0x20>
9000c2b2:	2000      	movs	r0, #0
9000c2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000c2b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000c2ba:	2e00      	cmp	r6, #0
9000c2bc:	d0f9      	beq.n	9000c2b2 <__sflush_r+0x1a>
9000c2be:	2300      	movs	r3, #0
9000c2c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
9000c2c4:	682f      	ldr	r7, [r5, #0]
9000c2c6:	6a21      	ldr	r1, [r4, #32]
9000c2c8:	602b      	str	r3, [r5, #0]
9000c2ca:	d032      	beq.n	9000c332 <__sflush_r+0x9a>
9000c2cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
9000c2ce:	89a3      	ldrh	r3, [r4, #12]
9000c2d0:	075a      	lsls	r2, r3, #29
9000c2d2:	d505      	bpl.n	9000c2e0 <__sflush_r+0x48>
9000c2d4:	6863      	ldr	r3, [r4, #4]
9000c2d6:	1ac0      	subs	r0, r0, r3
9000c2d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000c2da:	b10b      	cbz	r3, 9000c2e0 <__sflush_r+0x48>
9000c2dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000c2de:	1ac0      	subs	r0, r0, r3
9000c2e0:	2300      	movs	r3, #0
9000c2e2:	4602      	mov	r2, r0
9000c2e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000c2e6:	6a21      	ldr	r1, [r4, #32]
9000c2e8:	4628      	mov	r0, r5
9000c2ea:	47b0      	blx	r6
9000c2ec:	1c43      	adds	r3, r0, #1
9000c2ee:	89a3      	ldrh	r3, [r4, #12]
9000c2f0:	d106      	bne.n	9000c300 <__sflush_r+0x68>
9000c2f2:	6829      	ldr	r1, [r5, #0]
9000c2f4:	291d      	cmp	r1, #29
9000c2f6:	d82b      	bhi.n	9000c350 <__sflush_r+0xb8>
9000c2f8:	4a29      	ldr	r2, [pc, #164]	; (9000c3a0 <__sflush_r+0x108>)
9000c2fa:	410a      	asrs	r2, r1
9000c2fc:	07d6      	lsls	r6, r2, #31
9000c2fe:	d427      	bmi.n	9000c350 <__sflush_r+0xb8>
9000c300:	2200      	movs	r2, #0
9000c302:	6062      	str	r2, [r4, #4]
9000c304:	04d9      	lsls	r1, r3, #19
9000c306:	6922      	ldr	r2, [r4, #16]
9000c308:	6022      	str	r2, [r4, #0]
9000c30a:	d504      	bpl.n	9000c316 <__sflush_r+0x7e>
9000c30c:	1c42      	adds	r2, r0, #1
9000c30e:	d101      	bne.n	9000c314 <__sflush_r+0x7c>
9000c310:	682b      	ldr	r3, [r5, #0]
9000c312:	b903      	cbnz	r3, 9000c316 <__sflush_r+0x7e>
9000c314:	6560      	str	r0, [r4, #84]	; 0x54
9000c316:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000c318:	602f      	str	r7, [r5, #0]
9000c31a:	2900      	cmp	r1, #0
9000c31c:	d0c9      	beq.n	9000c2b2 <__sflush_r+0x1a>
9000c31e:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000c322:	4299      	cmp	r1, r3
9000c324:	d002      	beq.n	9000c32c <__sflush_r+0x94>
9000c326:	4628      	mov	r0, r5
9000c328:	f7ff fb3e 	bl	9000b9a8 <_free_r>
9000c32c:	2000      	movs	r0, #0
9000c32e:	6360      	str	r0, [r4, #52]	; 0x34
9000c330:	e7c0      	b.n	9000c2b4 <__sflush_r+0x1c>
9000c332:	2301      	movs	r3, #1
9000c334:	4628      	mov	r0, r5
9000c336:	47b0      	blx	r6
9000c338:	1c41      	adds	r1, r0, #1
9000c33a:	d1c8      	bne.n	9000c2ce <__sflush_r+0x36>
9000c33c:	682b      	ldr	r3, [r5, #0]
9000c33e:	2b00      	cmp	r3, #0
9000c340:	d0c5      	beq.n	9000c2ce <__sflush_r+0x36>
9000c342:	2b1d      	cmp	r3, #29
9000c344:	d001      	beq.n	9000c34a <__sflush_r+0xb2>
9000c346:	2b16      	cmp	r3, #22
9000c348:	d101      	bne.n	9000c34e <__sflush_r+0xb6>
9000c34a:	602f      	str	r7, [r5, #0]
9000c34c:	e7b1      	b.n	9000c2b2 <__sflush_r+0x1a>
9000c34e:	89a3      	ldrh	r3, [r4, #12]
9000c350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000c354:	81a3      	strh	r3, [r4, #12]
9000c356:	e7ad      	b.n	9000c2b4 <__sflush_r+0x1c>
9000c358:	690f      	ldr	r7, [r1, #16]
9000c35a:	2f00      	cmp	r7, #0
9000c35c:	d0a9      	beq.n	9000c2b2 <__sflush_r+0x1a>
9000c35e:	0793      	lsls	r3, r2, #30
9000c360:	680e      	ldr	r6, [r1, #0]
9000c362:	bf08      	it	eq
9000c364:	694b      	ldreq	r3, [r1, #20]
9000c366:	600f      	str	r7, [r1, #0]
9000c368:	bf18      	it	ne
9000c36a:	2300      	movne	r3, #0
9000c36c:	eba6 0807 	sub.w	r8, r6, r7
9000c370:	608b      	str	r3, [r1, #8]
9000c372:	f1b8 0f00 	cmp.w	r8, #0
9000c376:	dd9c      	ble.n	9000c2b2 <__sflush_r+0x1a>
9000c378:	6a21      	ldr	r1, [r4, #32]
9000c37a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9000c37c:	4643      	mov	r3, r8
9000c37e:	463a      	mov	r2, r7
9000c380:	4628      	mov	r0, r5
9000c382:	47b0      	blx	r6
9000c384:	2800      	cmp	r0, #0
9000c386:	dc06      	bgt.n	9000c396 <__sflush_r+0xfe>
9000c388:	89a3      	ldrh	r3, [r4, #12]
9000c38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000c38e:	81a3      	strh	r3, [r4, #12]
9000c390:	f04f 30ff 	mov.w	r0, #4294967295
9000c394:	e78e      	b.n	9000c2b4 <__sflush_r+0x1c>
9000c396:	4407      	add	r7, r0
9000c398:	eba8 0800 	sub.w	r8, r8, r0
9000c39c:	e7e9      	b.n	9000c372 <__sflush_r+0xda>
9000c39e:	bf00      	nop
9000c3a0:	dfbffffe 	.word	0xdfbffffe

9000c3a4 <_fflush_r>:
9000c3a4:	b538      	push	{r3, r4, r5, lr}
9000c3a6:	690b      	ldr	r3, [r1, #16]
9000c3a8:	4605      	mov	r5, r0
9000c3aa:	460c      	mov	r4, r1
9000c3ac:	b913      	cbnz	r3, 9000c3b4 <_fflush_r+0x10>
9000c3ae:	2500      	movs	r5, #0
9000c3b0:	4628      	mov	r0, r5
9000c3b2:	bd38      	pop	{r3, r4, r5, pc}
9000c3b4:	b118      	cbz	r0, 9000c3be <_fflush_r+0x1a>
9000c3b6:	6a03      	ldr	r3, [r0, #32]
9000c3b8:	b90b      	cbnz	r3, 9000c3be <_fflush_r+0x1a>
9000c3ba:	f7ff f899 	bl	9000b4f0 <__sinit>
9000c3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c3c2:	2b00      	cmp	r3, #0
9000c3c4:	d0f3      	beq.n	9000c3ae <_fflush_r+0xa>
9000c3c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
9000c3c8:	07d0      	lsls	r0, r2, #31
9000c3ca:	d404      	bmi.n	9000c3d6 <_fflush_r+0x32>
9000c3cc:	0599      	lsls	r1, r3, #22
9000c3ce:	d402      	bmi.n	9000c3d6 <_fflush_r+0x32>
9000c3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c3d2:	f7ff fade 	bl	9000b992 <__retarget_lock_acquire_recursive>
9000c3d6:	4628      	mov	r0, r5
9000c3d8:	4621      	mov	r1, r4
9000c3da:	f7ff ff5d 	bl	9000c298 <__sflush_r>
9000c3de:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000c3e0:	07da      	lsls	r2, r3, #31
9000c3e2:	4605      	mov	r5, r0
9000c3e4:	d4e4      	bmi.n	9000c3b0 <_fflush_r+0xc>
9000c3e6:	89a3      	ldrh	r3, [r4, #12]
9000c3e8:	059b      	lsls	r3, r3, #22
9000c3ea:	d4e1      	bmi.n	9000c3b0 <_fflush_r+0xc>
9000c3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c3ee:	f7ff fad1 	bl	9000b994 <__retarget_lock_release_recursive>
9000c3f2:	e7dd      	b.n	9000c3b0 <_fflush_r+0xc>

9000c3f4 <__swhatbuf_r>:
9000c3f4:	b570      	push	{r4, r5, r6, lr}
9000c3f6:	460c      	mov	r4, r1
9000c3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000c3fc:	2900      	cmp	r1, #0
9000c3fe:	b096      	sub	sp, #88	; 0x58
9000c400:	4615      	mov	r5, r2
9000c402:	461e      	mov	r6, r3
9000c404:	da0d      	bge.n	9000c422 <__swhatbuf_r+0x2e>
9000c406:	89a3      	ldrh	r3, [r4, #12]
9000c408:	f013 0f80 	tst.w	r3, #128	; 0x80
9000c40c:	f04f 0100 	mov.w	r1, #0
9000c410:	bf0c      	ite	eq
9000c412:	f44f 6380 	moveq.w	r3, #1024	; 0x400
9000c416:	2340      	movne	r3, #64	; 0x40
9000c418:	2000      	movs	r0, #0
9000c41a:	6031      	str	r1, [r6, #0]
9000c41c:	602b      	str	r3, [r5, #0]
9000c41e:	b016      	add	sp, #88	; 0x58
9000c420:	bd70      	pop	{r4, r5, r6, pc}
9000c422:	466a      	mov	r2, sp
9000c424:	f000 f896 	bl	9000c554 <_fstat_r>
9000c428:	2800      	cmp	r0, #0
9000c42a:	dbec      	blt.n	9000c406 <__swhatbuf_r+0x12>
9000c42c:	9901      	ldr	r1, [sp, #4]
9000c42e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
9000c432:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
9000c436:	4259      	negs	r1, r3
9000c438:	4159      	adcs	r1, r3
9000c43a:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000c43e:	e7eb      	b.n	9000c418 <__swhatbuf_r+0x24>

9000c440 <__smakebuf_r>:
9000c440:	898b      	ldrh	r3, [r1, #12]
9000c442:	b573      	push	{r0, r1, r4, r5, r6, lr}
9000c444:	079d      	lsls	r5, r3, #30
9000c446:	4606      	mov	r6, r0
9000c448:	460c      	mov	r4, r1
9000c44a:	d507      	bpl.n	9000c45c <__smakebuf_r+0x1c>
9000c44c:	f104 0347 	add.w	r3, r4, #71	; 0x47
9000c450:	6023      	str	r3, [r4, #0]
9000c452:	6123      	str	r3, [r4, #16]
9000c454:	2301      	movs	r3, #1
9000c456:	6163      	str	r3, [r4, #20]
9000c458:	b002      	add	sp, #8
9000c45a:	bd70      	pop	{r4, r5, r6, pc}
9000c45c:	ab01      	add	r3, sp, #4
9000c45e:	466a      	mov	r2, sp
9000c460:	f7ff ffc8 	bl	9000c3f4 <__swhatbuf_r>
9000c464:	9900      	ldr	r1, [sp, #0]
9000c466:	4605      	mov	r5, r0
9000c468:	4630      	mov	r0, r6
9000c46a:	f7fe ff29 	bl	9000b2c0 <_malloc_r>
9000c46e:	b948      	cbnz	r0, 9000c484 <__smakebuf_r+0x44>
9000c470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c474:	059a      	lsls	r2, r3, #22
9000c476:	d4ef      	bmi.n	9000c458 <__smakebuf_r+0x18>
9000c478:	f023 0303 	bic.w	r3, r3, #3
9000c47c:	f043 0302 	orr.w	r3, r3, #2
9000c480:	81a3      	strh	r3, [r4, #12]
9000c482:	e7e3      	b.n	9000c44c <__smakebuf_r+0xc>
9000c484:	89a3      	ldrh	r3, [r4, #12]
9000c486:	6020      	str	r0, [r4, #0]
9000c488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000c48c:	81a3      	strh	r3, [r4, #12]
9000c48e:	9b00      	ldr	r3, [sp, #0]
9000c490:	6163      	str	r3, [r4, #20]
9000c492:	9b01      	ldr	r3, [sp, #4]
9000c494:	6120      	str	r0, [r4, #16]
9000c496:	b15b      	cbz	r3, 9000c4b0 <__smakebuf_r+0x70>
9000c498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000c49c:	4630      	mov	r0, r6
9000c49e:	f000 f86b 	bl	9000c578 <_isatty_r>
9000c4a2:	b128      	cbz	r0, 9000c4b0 <__smakebuf_r+0x70>
9000c4a4:	89a3      	ldrh	r3, [r4, #12]
9000c4a6:	f023 0303 	bic.w	r3, r3, #3
9000c4aa:	f043 0301 	orr.w	r3, r3, #1
9000c4ae:	81a3      	strh	r3, [r4, #12]
9000c4b0:	89a3      	ldrh	r3, [r4, #12]
9000c4b2:	431d      	orrs	r5, r3
9000c4b4:	81a5      	strh	r5, [r4, #12]
9000c4b6:	e7cf      	b.n	9000c458 <__smakebuf_r+0x18>

9000c4b8 <_putc_r>:
9000c4b8:	b570      	push	{r4, r5, r6, lr}
9000c4ba:	460d      	mov	r5, r1
9000c4bc:	4614      	mov	r4, r2
9000c4be:	4606      	mov	r6, r0
9000c4c0:	b118      	cbz	r0, 9000c4ca <_putc_r+0x12>
9000c4c2:	6a03      	ldr	r3, [r0, #32]
9000c4c4:	b90b      	cbnz	r3, 9000c4ca <_putc_r+0x12>
9000c4c6:	f7ff f813 	bl	9000b4f0 <__sinit>
9000c4ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000c4cc:	07d8      	lsls	r0, r3, #31
9000c4ce:	d405      	bmi.n	9000c4dc <_putc_r+0x24>
9000c4d0:	89a3      	ldrh	r3, [r4, #12]
9000c4d2:	0599      	lsls	r1, r3, #22
9000c4d4:	d402      	bmi.n	9000c4dc <_putc_r+0x24>
9000c4d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c4d8:	f7ff fa5b 	bl	9000b992 <__retarget_lock_acquire_recursive>
9000c4dc:	68a3      	ldr	r3, [r4, #8]
9000c4de:	3b01      	subs	r3, #1
9000c4e0:	2b00      	cmp	r3, #0
9000c4e2:	60a3      	str	r3, [r4, #8]
9000c4e4:	da05      	bge.n	9000c4f2 <_putc_r+0x3a>
9000c4e6:	69a2      	ldr	r2, [r4, #24]
9000c4e8:	4293      	cmp	r3, r2
9000c4ea:	db12      	blt.n	9000c512 <_putc_r+0x5a>
9000c4ec:	b2eb      	uxtb	r3, r5
9000c4ee:	2b0a      	cmp	r3, #10
9000c4f0:	d00f      	beq.n	9000c512 <_putc_r+0x5a>
9000c4f2:	6823      	ldr	r3, [r4, #0]
9000c4f4:	1c5a      	adds	r2, r3, #1
9000c4f6:	6022      	str	r2, [r4, #0]
9000c4f8:	701d      	strb	r5, [r3, #0]
9000c4fa:	b2ed      	uxtb	r5, r5
9000c4fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000c4fe:	07da      	lsls	r2, r3, #31
9000c500:	d405      	bmi.n	9000c50e <_putc_r+0x56>
9000c502:	89a3      	ldrh	r3, [r4, #12]
9000c504:	059b      	lsls	r3, r3, #22
9000c506:	d402      	bmi.n	9000c50e <_putc_r+0x56>
9000c508:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c50a:	f7ff fa43 	bl	9000b994 <__retarget_lock_release_recursive>
9000c50e:	4628      	mov	r0, r5
9000c510:	bd70      	pop	{r4, r5, r6, pc}
9000c512:	4629      	mov	r1, r5
9000c514:	4622      	mov	r2, r4
9000c516:	4630      	mov	r0, r6
9000c518:	f7ff f8f9 	bl	9000b70e <__swbuf_r>
9000c51c:	4605      	mov	r5, r0
9000c51e:	e7ed      	b.n	9000c4fc <_putc_r+0x44>

9000c520 <memmove>:
9000c520:	4288      	cmp	r0, r1
9000c522:	b510      	push	{r4, lr}
9000c524:	eb01 0402 	add.w	r4, r1, r2
9000c528:	d902      	bls.n	9000c530 <memmove+0x10>
9000c52a:	4284      	cmp	r4, r0
9000c52c:	4623      	mov	r3, r4
9000c52e:	d807      	bhi.n	9000c540 <memmove+0x20>
9000c530:	1e43      	subs	r3, r0, #1
9000c532:	42a1      	cmp	r1, r4
9000c534:	d008      	beq.n	9000c548 <memmove+0x28>
9000c536:	f811 2b01 	ldrb.w	r2, [r1], #1
9000c53a:	f803 2f01 	strb.w	r2, [r3, #1]!
9000c53e:	e7f8      	b.n	9000c532 <memmove+0x12>
9000c540:	4402      	add	r2, r0
9000c542:	4601      	mov	r1, r0
9000c544:	428a      	cmp	r2, r1
9000c546:	d100      	bne.n	9000c54a <memmove+0x2a>
9000c548:	bd10      	pop	{r4, pc}
9000c54a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000c54e:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000c552:	e7f7      	b.n	9000c544 <memmove+0x24>

9000c554 <_fstat_r>:
9000c554:	b538      	push	{r3, r4, r5, lr}
9000c556:	4d07      	ldr	r5, [pc, #28]	; (9000c574 <_fstat_r+0x20>)
9000c558:	2300      	movs	r3, #0
9000c55a:	4604      	mov	r4, r0
9000c55c:	4608      	mov	r0, r1
9000c55e:	4611      	mov	r1, r2
9000c560:	602b      	str	r3, [r5, #0]
9000c562:	f000 f867 	bl	9000c634 <_fstat>
9000c566:	1c43      	adds	r3, r0, #1
9000c568:	d102      	bne.n	9000c570 <_fstat_r+0x1c>
9000c56a:	682b      	ldr	r3, [r5, #0]
9000c56c:	b103      	cbz	r3, 9000c570 <_fstat_r+0x1c>
9000c56e:	6023      	str	r3, [r4, #0]
9000c570:	bd38      	pop	{r3, r4, r5, pc}
9000c572:	bf00      	nop
9000c574:	2000bac4 	.word	0x2000bac4

9000c578 <_isatty_r>:
9000c578:	b538      	push	{r3, r4, r5, lr}
9000c57a:	4d06      	ldr	r5, [pc, #24]	; (9000c594 <_isatty_r+0x1c>)
9000c57c:	2300      	movs	r3, #0
9000c57e:	4604      	mov	r4, r0
9000c580:	4608      	mov	r0, r1
9000c582:	602b      	str	r3, [r5, #0]
9000c584:	f000 f85e 	bl	9000c644 <_isatty>
9000c588:	1c43      	adds	r3, r0, #1
9000c58a:	d102      	bne.n	9000c592 <_isatty_r+0x1a>
9000c58c:	682b      	ldr	r3, [r5, #0]
9000c58e:	b103      	cbz	r3, 9000c592 <_isatty_r+0x1a>
9000c590:	6023      	str	r3, [r4, #0]
9000c592:	bd38      	pop	{r3, r4, r5, pc}
9000c594:	2000bac4 	.word	0x2000bac4

9000c598 <memcpy>:
9000c598:	440a      	add	r2, r1
9000c59a:	4291      	cmp	r1, r2
9000c59c:	f100 33ff 	add.w	r3, r0, #4294967295
9000c5a0:	d100      	bne.n	9000c5a4 <memcpy+0xc>
9000c5a2:	4770      	bx	lr
9000c5a4:	b510      	push	{r4, lr}
9000c5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
9000c5aa:	f803 4f01 	strb.w	r4, [r3, #1]!
9000c5ae:	4291      	cmp	r1, r2
9000c5b0:	d1f9      	bne.n	9000c5a6 <memcpy+0xe>
9000c5b2:	bd10      	pop	{r4, pc}

9000c5b4 <_realloc_r>:
9000c5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c5b8:	4680      	mov	r8, r0
9000c5ba:	4614      	mov	r4, r2
9000c5bc:	460e      	mov	r6, r1
9000c5be:	b921      	cbnz	r1, 9000c5ca <_realloc_r+0x16>
9000c5c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000c5c4:	4611      	mov	r1, r2
9000c5c6:	f7fe be7b 	b.w	9000b2c0 <_malloc_r>
9000c5ca:	b92a      	cbnz	r2, 9000c5d8 <_realloc_r+0x24>
9000c5cc:	f7ff f9ec 	bl	9000b9a8 <_free_r>
9000c5d0:	4625      	mov	r5, r4
9000c5d2:	4628      	mov	r0, r5
9000c5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000c5d8:	f000 f81b 	bl	9000c612 <_malloc_usable_size_r>
9000c5dc:	4284      	cmp	r4, r0
9000c5de:	4607      	mov	r7, r0
9000c5e0:	d802      	bhi.n	9000c5e8 <_realloc_r+0x34>
9000c5e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000c5e6:	d812      	bhi.n	9000c60e <_realloc_r+0x5a>
9000c5e8:	4621      	mov	r1, r4
9000c5ea:	4640      	mov	r0, r8
9000c5ec:	f7fe fe68 	bl	9000b2c0 <_malloc_r>
9000c5f0:	4605      	mov	r5, r0
9000c5f2:	2800      	cmp	r0, #0
9000c5f4:	d0ed      	beq.n	9000c5d2 <_realloc_r+0x1e>
9000c5f6:	42bc      	cmp	r4, r7
9000c5f8:	4622      	mov	r2, r4
9000c5fa:	4631      	mov	r1, r6
9000c5fc:	bf28      	it	cs
9000c5fe:	463a      	movcs	r2, r7
9000c600:	f7ff ffca 	bl	9000c598 <memcpy>
9000c604:	4631      	mov	r1, r6
9000c606:	4640      	mov	r0, r8
9000c608:	f7ff f9ce 	bl	9000b9a8 <_free_r>
9000c60c:	e7e1      	b.n	9000c5d2 <_realloc_r+0x1e>
9000c60e:	4635      	mov	r5, r6
9000c610:	e7df      	b.n	9000c5d2 <_realloc_r+0x1e>

9000c612 <_malloc_usable_size_r>:
9000c612:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000c616:	1f18      	subs	r0, r3, #4
9000c618:	2b00      	cmp	r3, #0
9000c61a:	bfbc      	itt	lt
9000c61c:	580b      	ldrlt	r3, [r1, r0]
9000c61e:	18c0      	addlt	r0, r0, r3
9000c620:	4770      	bx	lr
	...

9000c624 <_close>:
9000c624:	4b02      	ldr	r3, [pc, #8]	; (9000c630 <_close+0xc>)
9000c626:	2258      	movs	r2, #88	; 0x58
9000c628:	601a      	str	r2, [r3, #0]
9000c62a:	f04f 30ff 	mov.w	r0, #4294967295
9000c62e:	4770      	bx	lr
9000c630:	2000bac4 	.word	0x2000bac4

9000c634 <_fstat>:
9000c634:	4b02      	ldr	r3, [pc, #8]	; (9000c640 <_fstat+0xc>)
9000c636:	2258      	movs	r2, #88	; 0x58
9000c638:	601a      	str	r2, [r3, #0]
9000c63a:	f04f 30ff 	mov.w	r0, #4294967295
9000c63e:	4770      	bx	lr
9000c640:	2000bac4 	.word	0x2000bac4

9000c644 <_isatty>:
9000c644:	4b02      	ldr	r3, [pc, #8]	; (9000c650 <_isatty+0xc>)
9000c646:	2258      	movs	r2, #88	; 0x58
9000c648:	601a      	str	r2, [r3, #0]
9000c64a:	2000      	movs	r0, #0
9000c64c:	4770      	bx	lr
9000c64e:	bf00      	nop
9000c650:	2000bac4 	.word	0x2000bac4

9000c654 <_lseek>:
9000c654:	4b02      	ldr	r3, [pc, #8]	; (9000c660 <_lseek+0xc>)
9000c656:	2258      	movs	r2, #88	; 0x58
9000c658:	601a      	str	r2, [r3, #0]
9000c65a:	f04f 30ff 	mov.w	r0, #4294967295
9000c65e:	4770      	bx	lr
9000c660:	2000bac4 	.word	0x2000bac4

9000c664 <_read>:
9000c664:	4b02      	ldr	r3, [pc, #8]	; (9000c670 <_read+0xc>)
9000c666:	2258      	movs	r2, #88	; 0x58
9000c668:	601a      	str	r2, [r3, #0]
9000c66a:	f04f 30ff 	mov.w	r0, #4294967295
9000c66e:	4770      	bx	lr
9000c670:	2000bac4 	.word	0x2000bac4

9000c674 <_sbrk>:
9000c674:	4a04      	ldr	r2, [pc, #16]	; (9000c688 <_sbrk+0x14>)
9000c676:	6811      	ldr	r1, [r2, #0]
9000c678:	4603      	mov	r3, r0
9000c67a:	b909      	cbnz	r1, 9000c680 <_sbrk+0xc>
9000c67c:	4903      	ldr	r1, [pc, #12]	; (9000c68c <_sbrk+0x18>)
9000c67e:	6011      	str	r1, [r2, #0]
9000c680:	6810      	ldr	r0, [r2, #0]
9000c682:	4403      	add	r3, r0
9000c684:	6013      	str	r3, [r2, #0]
9000c686:	4770      	bx	lr
9000c688:	2000bacc 	.word	0x2000bacc
9000c68c:	2000bad0 	.word	0x2000bad0

9000c690 <_write>:
9000c690:	4b02      	ldr	r3, [pc, #8]	; (9000c69c <_write+0xc>)
9000c692:	2258      	movs	r2, #88	; 0x58
9000c694:	601a      	str	r2, [r3, #0]
9000c696:	f04f 30ff 	mov.w	r0, #4294967295
9000c69a:	4770      	bx	lr
9000c69c:	2000bac4 	.word	0x2000bac4

9000c6a0 <_init>:
9000c6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c6a2:	bf00      	nop
9000c6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000c6a6:	bc08      	pop	{r3}
9000c6a8:	469e      	mov	lr, r3
9000c6aa:	4770      	bx	lr

9000c6ac <_fini>:
9000c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c6ae:	bf00      	nop
9000c6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000c6b2:	bc08      	pop	{r3}
9000c6b4:	469e      	mov	lr, r3
9000c6b6:	4770      	bx	lr
